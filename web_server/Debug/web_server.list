
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  08011f28  08011f28  00021f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015700  08015700  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08015700  08015700  00025700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015708  08015708  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015708  08015708  00025708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801570c  0801570c  0002570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08015710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08015798  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08015838  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d08  200001c8  080158d8  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ed0  080158d8  00038ed0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002300f  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e3c  00000000  00000000  00053248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001980  00000000  00000000  00059088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001438  00000000  00000000  0005aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003599a  00000000  00000000  0005be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002c401  00000000  00000000  000917da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010df6a  00000000  00000000  000bdbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000070e0  00000000  00000000  001cbb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001d2c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08011f10 	.word	0x08011f10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08011f10 	.word	0x08011f10

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  tCGI LED_CGI = {"/LEDControl.cgi", LedControlCgiHandler};
 8000612:	4a1a      	ldr	r2, [pc, #104]	; (800067c <main+0x70>)
 8000614:	463b      	mov	r3, r7
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fdc5 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f835 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f903 	bl	8000830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062a:	f000 f8a3 	bl	8000774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062e:	f000 f8d1 	bl	80007d4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000632:	f004 fbdb 	bl	8004dec <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  httpd_init();
 8000636:	f005 ffa5 	bl	8006584 <httpd_init>
  http_set_cgi_handlers(&LED_CGI, 1);
 800063a:	463b      	mov	r3, r7
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ffc0 	bl	80065c4 <http_set_cgi_handlers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000644:	f004 fd12 	bl	800506c <MX_LWIP_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GreenLED );     //Green LED
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <main+0x74>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2101      	movs	r1, #1
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0x78>)
 8000654:	f002 f9b0 	bl	80029b8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, BlueLED );      //Blue LED
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x7c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <main+0x78>)
 8000664:	f002 f9a8 	bl	80029b8 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RedLED );      //Red LED
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <main+0x80>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <main+0x78>)
 8000676:	f002 f99f 	bl	80029b8 <HAL_GPIO_WritePin>
	  MX_LWIP_Process();
 800067a:	e7e3      	b.n	8000644 <main+0x38>
 800067c:	08011f38 	.word	0x08011f38
 8000680:	20000774 	.word	0x20000774
 8000684:	40020400 	.word	0x40020400
 8000688:	20000778 	.word	0x20000778
 800068c:	2000077c 	.word	0x2000077c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f010 fd6b 	bl	801117a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b4:	f002 fae2 	bl	8002c7c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fb0f 	bl	8002d3c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f9ae 	bl	8000a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f002 fab8 	bl	8002c9c <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f9a7 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fda0 	bl	8003298 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800075e:	f000 f991 	bl	8000a84 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART3_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x58>)
 80007b8:	f003 fbbc 	bl	8003f34 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f95f 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001e4 	.word	0x200001e4
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2206      	movs	r2, #6
 80007e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2201      	movs	r2, #1
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	f002 f8e7 	bl	80029ea <HAL_PCD_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f92f 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000026c 	.word	0x2000026c

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b47      	ldr	r3, [pc, #284]	; (8000964 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a46      	ldr	r2, [pc, #280]	; (8000964 <MX_GPIO_Init+0x134>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b44      	ldr	r3, [pc, #272]	; (8000964 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b41      	ldr	r3, [pc, #260]	; (8000964 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <MX_GPIO_Init+0x134>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MX_GPIO_Init+0x134>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <MX_GPIO_Init+0x134>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008dc:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_GPIO_Init+0x138>)
 80008de:	f002 f86b 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_GPIO_Init+0x13c>)
 80008e8:	f002 f866 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_GPIO_Init+0x140>)
 8000904:	f001 feac 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8000908:	f244 0381 	movw	r3, #16513	; 0x4081
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_GPIO_Init+0x138>)
 8000922:	f001 fe9d 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x13c>)
 800093e:	f001 fe8f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x13c>)
 8000956:	f001 fe83 	bl	8002660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40021800 	.word	0x40021800
 8000970:	40020800 	.word	0x40020800

08000974 <LedControlCgiHandler>:

/* USER CODE BEGIN 4 */
const char *LedControlCgiHandler(int index, int numParams, char *pcParam[], char *pcValue[])
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	603b      	str	r3, [r7, #0]
  if(index == 0)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d168      	bne.n	8000a5a <LedControlCgiHandler+0xe6>
  {
    for(int i=0; i < numParams; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e061      	b.n	8000a52 <LedControlCgiHandler+0xde>
    {
      if(strcmp(pcParam[i], "green") == 0)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4932      	ldr	r1, [pc, #200]	; (8000a64 <LedControlCgiHandler+0xf0>)
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc50 	bl	8000240 <strcmp>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d113      	bne.n	80009ce <LedControlCgiHandler+0x5a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	492d      	ldr	r1, [pc, #180]	; (8000a68 <LedControlCgiHandler+0xf4>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc44 	bl	8000240 <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <LedControlCgiHandler+0x52>
        {
          GreenLED = 1;
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <LedControlCgiHandler+0xf8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e042      	b.n	8000a4c <LedControlCgiHandler+0xd8>
        }
        else
        {
          GreenLED = 0;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <LedControlCgiHandler+0xf8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e03e      	b.n	8000a4c <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "blue") == 0)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4925      	ldr	r1, [pc, #148]	; (8000a70 <LedControlCgiHandler+0xfc>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc30 	bl	8000240 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d113      	bne.n	8000a0e <LedControlCgiHandler+0x9a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	491d      	ldr	r1, [pc, #116]	; (8000a68 <LedControlCgiHandler+0xf4>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc24 	bl	8000240 <strcmp>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d103      	bne.n	8000a06 <LedControlCgiHandler+0x92>
        {
          BlueLED = 1;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <LedControlCgiHandler+0x100>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e022      	b.n	8000a4c <LedControlCgiHandler+0xd8>
        }
        else
        {
          BlueLED = 0;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <LedControlCgiHandler+0x100>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e01e      	b.n	8000a4c <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "red") == 0)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4917      	ldr	r1, [pc, #92]	; (8000a78 <LedControlCgiHandler+0x104>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fc10 	bl	8000240 <strcmp>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d112      	bne.n	8000a4c <LedControlCgiHandler+0xd8>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	490d      	ldr	r1, [pc, #52]	; (8000a68 <LedControlCgiHandler+0xf4>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fc04 	bl	8000240 <strcmp>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <LedControlCgiHandler+0xd2>
        {
          RedLED = 1;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <LedControlCgiHandler+0x108>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e002      	b.n	8000a4c <LedControlCgiHandler+0xd8>
        }
        else
        {
          RedLED = 0;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <LedControlCgiHandler+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
    for(int i=0; i < numParams; i++)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	db99      	blt.n	800098e <LedControlCgiHandler+0x1a>
        }
      }
    }
  }
  return "/index.html";
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <LedControlCgiHandler+0x10c>)
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08011f40 	.word	0x08011f40
 8000a68:	08011f48 	.word	0x08011f48
 8000a6c:	20000774 	.word	0x20000774
 8000a70:	08011f4c 	.word	0x08011f4c
 8000a74:	20000778 	.word	0x20000778
 8000a78:	08011f54 	.word	0x08011f54
 8000a7c:	2000077c 	.word	0x2000077c
 8000a80:	08011f58 	.word	0x08011f58

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ae      	sub	sp, #184	; 0xb8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2290      	movs	r2, #144	; 0x90
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f010 fb3e 	bl	801117a <memset>
  if(huart->Instance==USART3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d13c      	bne.n	8000b82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fde4 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b22:	f7ff ffaf 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b70:	2307      	movs	r3, #7
 8000b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b7e:	f001 fd6f 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37b8      	adds	r7, #184	; 0xb8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0ae      	sub	sp, #184	; 0xb8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2290      	movs	r2, #144	; 0x90
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f010 fade 	bl	801117a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc6:	d159      	bne.n	8000c7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fd83 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000be4:	f7ff ff4e 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <HAL_PCD_MspInit+0xf0>)
 8000c28:	f001 fd1a 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <HAL_PCD_MspInit+0xf0>)
 8000c48:	f001 fd0a 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c56:	6353      	str	r3, [r2, #52]	; 0x34
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_PCD_MspInit+0xec>)
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	37b8      	adds	r7, #184	; 0xb8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 faa6 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_kill>:

int _kill(int pid, int sig)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <_kill+0x20>)
 8000cfc:	2216      	movs	r2, #22
 8000cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20008ec0 	.word	0x20008ec0

08000d14 <_exit>:

void _exit (int status)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffe5 	bl	8000cf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d26:	e7fe      	b.n	8000d26 <_exit+0x12>

08000d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
  }
  return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_close>:

int _close(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_isatty>:

int _isatty(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d205      	bcs.n	8000e40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <_sbrk+0x6c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20080000 	.word	0x20080000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	20000780 	.word	0x20000780
 8000e6c:	20008ed0 	.word	0x20008ed0
 8000e70:	20008ec0 	.word	0x20008ec0

08000e74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9e:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd7 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f010 f9c5 	bl	8011254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb9f 	bl	800060c <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000edc:	08015710 	.word	0x08015710
  ldr r2, =_sbss
 8000ee0:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000ee4:	20008ed0 	.word	0x20008ed0

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>

08000eea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00b      	beq.n	8000f12 <LAN8742_RegisterBusIO+0x28>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <LAN8742_RegisterBusIO+0x28>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <LAN8742_RegisterBusIO+0x28>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e014      	b.n	8000f42 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d17c      	bne.n	8001068 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2220      	movs	r2, #32
 8000f80:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e01c      	b.n	8000fc2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2112      	movs	r1, #18
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	4798      	blx	r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da03      	bge.n	8000fa4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f9c:	f06f 0304 	mvn.w	r3, #4
 8000fa0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000fa2:	e00b      	b.n	8000fbc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d105      	bne.n	8000fbc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
         break;
 8000fba:	e005      	b.n	8000fc8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d9df      	bls.n	8000f88 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	d902      	bls.n	8000fd6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fd0:	f06f 0302 	mvn.w	r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d145      	bne.n	8001068 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6810      	ldr	r0, [r2, #0]
 8000fe4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4798      	blx	r3
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db37      	blt.n	8001062 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6810      	ldr	r0, [r2, #0]
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	2100      	movs	r1, #0
 8001000:	4798      	blx	r3
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	db28      	blt.n	800105a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4798      	blx	r3
 800100e:	4603      	mov	r3, r0
 8001010:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001012:	e01c      	b.n	800104e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4798      	blx	r3
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001026:	d80e      	bhi.n	8001046 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	f107 0208 	add.w	r2, r7, #8
 8001034:	2100      	movs	r1, #0
 8001036:	4798      	blx	r3
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	da07      	bge.n	800104e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800103e:	f06f 0304 	mvn.w	r3, #4
 8001042:	613b      	str	r3, [r7, #16]
                 break;
 8001044:	e010      	b.n	8001068 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001046:	f06f 0301 	mvn.w	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
               break;
 800104c:	e00c      	b.n	8001068 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1dd      	bne.n	8001014 <LAN8742_Init+0xc6>
 8001058:	e006      	b.n	8001068 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800105a:	f06f 0304 	mvn.w	r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e002      	b.n	8001068 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001062:	f06f 0303 	mvn.w	r3, #3
 8001066:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d112      	bne.n	8001094 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4798      	blx	r3
 8001074:	4603      	mov	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001078:	bf00      	nop
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800108c:	d9f5      	bls.n	800107a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001094:	693b      	ldr	r3, [r7, #16]
 }
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6810      	ldr	r0, [r2, #0]
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	2101      	movs	r1, #1
 80010b8:	4798      	blx	r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da02      	bge.n	80010c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010c0:	f06f 0304 	mvn.w	r3, #4
 80010c4:	e06e      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6810      	ldr	r0, [r2, #0]
 80010ce:	f107 020c 	add.w	r2, r7, #12
 80010d2:	2101      	movs	r1, #1
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da02      	bge.n	80010e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010dc:	f06f 0304 	mvn.w	r3, #4
 80010e0:	e060      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80010ec:	2301      	movs	r3, #1
 80010ee:	e059      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6810      	ldr	r0, [r2, #0]
 80010f8:	f107 020c 	add.w	r2, r7, #12
 80010fc:	2100      	movs	r1, #0
 80010fe:	4798      	blx	r3
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	da02      	bge.n	800110c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001106:	f06f 0304 	mvn.w	r3, #4
 800110a:	e04b      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11b      	bne.n	800114e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <LAN8742_GetLinkState+0x90>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800112a:	2302      	movs	r3, #2
 800112c:	e03a      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001138:	2303      	movs	r3, #3
 800113a:	e033      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001146:	2304      	movs	r3, #4
 8001148:	e02c      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800114a:	2305      	movs	r3, #5
 800114c:	e02a      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6810      	ldr	r0, [r2, #0]
 8001156:	f107 020c 	add.w	r2, r7, #12
 800115a:	211f      	movs	r1, #31
 800115c:	4798      	blx	r3
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	da02      	bge.n	800116a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001164:	f06f 0304 	mvn.w	r3, #4
 8001168:	e01c      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001174:	2306      	movs	r3, #6
 8001176:	e015      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 031c 	and.w	r3, r3, #28
 800117e:	2b18      	cmp	r3, #24
 8001180:	d101      	bne.n	8001186 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001182:	2302      	movs	r3, #2
 8001184:	e00e      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f003 031c 	and.w	r3, r3, #28
 800118c:	2b08      	cmp	r3, #8
 800118e:	d101      	bne.n	8001194 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001190:	2303      	movs	r3, #3
 8001192:	e007      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 031c 	and.w	r3, r3, #28
 800119a:	2b14      	cmp	r3, #20
 800119c:	d101      	bne.n	80011a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800119e:	2304      	movs	r3, #4
 80011a0:	e000      	b.n	80011a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011a2:	2305      	movs	r3, #5
    }				
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f92f 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f806 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fc68 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f911 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000784 	.word	0x20000784

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000784 	.word	0x20000784

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e06a      	b.n	8001564 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2223      	movs	r2, #35	; 0x23
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f003 ffcb 	bl	800543c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_ETH_Init+0xf0>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <HAL_ETH_Init+0xf0>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_ETH_Init+0xf0>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4927      	ldr	r1, [pc, #156]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_ETH_Init+0xf4>)
 80014da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff feac 	bl	8001250 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014fa:	e011      	b.n	8001520 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014fc:	f7ff fea8 	bl	8001250 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800150a:	d909      	bls.n	8001520 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2204      	movs	r2, #4
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	22e0      	movs	r2, #224	; 0xe0
 8001518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e4      	bne.n	80014fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fdf0 	bl	8002118 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fe97 	bl	800226c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 feed 	bl	800231e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	461a      	mov	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fe55 	bl	80021fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2210      	movs	r2, #16
 800155e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800

08001574 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001582:	2b10      	cmp	r3, #16
 8001584:	d150      	bne.n	8001628 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2223      	movs	r2, #35	; 0x23
 800158a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f9fd 	bl	8001994 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0208 	orr.w	r2, r2, #8
 80015a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fe58 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0204 	orr.w	r2, r2, #4
 80015ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fe45 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fc36 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001602:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2223      	movs	r2, #35	; 0x23
 8001620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e000      	b.n	800162a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001640:	2b23      	cmp	r3, #35	; 0x23
 8001642:	d14a      	bne.n	80016da <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2223      	movs	r2, #35	; 0x23
 8001648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800165e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001662:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	f023 0302 	bic.w	r3, r3, #2
 8001676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800167a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fde7 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fbd8 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fdd1 	bl	8001268 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2210      	movs	r2, #16
 80016d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07c      	b.n	8001804 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001710:	2b23      	cmp	r3, #35	; 0x23
 8001712:	d176      	bne.n	8001802 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001714:	2200      	movs	r2, #0
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fe6d 	bl	80023f8 <ETH_Prepare_Tx_Descriptors>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e065      	b.n	8001804 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001738:	f3bf 8f4f 	dsb	sy
}
 800173c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3206      	adds	r2, #6
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b03      	cmp	r3, #3
 800175c:	d904      	bls.n	8001768 <HAL_ETH_Transmit+0x84>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	1f1a      	subs	r2, r3, #4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3106      	adds	r1, #6
 8001774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800177e:	f7ff fd67 	bl	8001250 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001784:	e037      	b.n	80017f6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d011      	beq.n	80017bc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179e:	f043 0208 	orr.w	r2, r3, #8
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e023      	b.n	8001804 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c2:	d018      	beq.n	80017f6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017c4:	f7ff fd44 	bl	8001250 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d302      	bcc.n	80017da <HAL_ETH_Transmit+0xf6>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017f0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e006      	b.n	8001804 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	dbc3      	blt.n	8001786 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0a8      	b.n	800198a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183e:	2b23      	cmp	r3, #35	; 0x23
 8001840:	d001      	beq.n	8001846 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0a1      	b.n	800198a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	3212      	adds	r2, #18
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185c:	f1c3 0304 	rsb	r3, r3, #4
 8001860:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001862:	e06a      	b.n	800193a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <HAL_ETH_ReadData+0x88>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d040      	beq.n	8001916 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00c      	beq.n	80018d8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018c8:	3b04      	subs	r3, #4
 80018ca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018f0:	461a      	mov	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f003 ff63 	bl	80057c0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d902      	bls.n	8001928 <HAL_ETH_ReadData+0x11c>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b04      	subs	r3, #4
 8001926:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	3212      	adds	r2, #18
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800193e:	2b00      	cmp	r3, #0
 8001940:	db06      	blt.n	8001950 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d202      	bcs.n	8001950 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d089      	beq.n	8001864 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	441a      	add	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f815 	bl	8001994 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019a0:	2301      	movs	r3, #1
 80019a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	3212      	adds	r2, #18
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80019bc:	e040      	b.n	8001a40 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d112      	bne.n	80019ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fec8 	bl	8005760 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	74fb      	strb	r3, [r7, #19]
 80019da:	e007      	b.n	80019ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	461a      	mov	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	461a      	mov	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d026      	beq.n	8001a40 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <ETH_UpdateDescriptor+0xe4>)
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	e003      	b.n	8001a0a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001a08:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0a:	f3bf 8f5f 	dmb	sy
}
 8001a0e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d902      	bls.n	8001a2e <ETH_UpdateDescriptor+0x9a>
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	3212      	adds	r2, #18
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <ETH_UpdateDescriptor+0xb8>
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1b8      	bne.n	80019be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d00c      	beq.n	8001a70 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	80004600 	.word	0x80004600

08001a7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001acc:	f7ff fbc0 	bl	8001250 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad4:	f7ff fbbc 	bl	8001250 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e010      	b.n	8001b0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff fb70 	bl	8001250 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b74:	f7ff fb6c 	bl	8001250 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d301      	bcc.n	8001b88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d9      	b.n	8001d6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00b      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d105      	bne.n	8001da2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f883 	bl	8001ea4 <ETH_SetMACConfig>

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fc5a 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8001dc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e027      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d908      	bls.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d204      	bcs.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e01a      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d303      	bcc.n	8001e0e <HAL_ETH_SetMDIOClockRange+0x62>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d911      	bls.n	8001e32 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d908      	bls.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d804      	bhi.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e005      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e32:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	01312cff 	.word	0x01312cff
 8001e48:	02160ebf 	.word	0x02160ebf
 8001e4c:	03938700 	.word	0x03938700
 8001e50:	05f5e0ff 	.word	0x05f5e0ff
 8001e54:	08f0d17f 	.word	0x08f0d17f

08001e58 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e7a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff f9ed 	bl	8001268 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e98:	6193      	str	r3, [r2, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <ETH_SetMACConfig+0x15c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	7c1b      	ldrb	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetMACConfig+0x28>
 8001ec6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eca:	e000      	b.n	8001ece <ETH_SetMACConfig+0x2a>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7c5b      	ldrb	r3, [r3, #17]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <ETH_SetMACConfig+0x38>
 8001ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eda:	e000      	b.n	8001ede <ETH_SetMACConfig+0x3a>
 8001edc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ede:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7fdb      	ldrb	r3, [r3, #31]
 8001eea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	7f92      	ldrb	r2, [r2, #30]
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d102      	bne.n	8001f02 <ETH_SetMACConfig+0x5e>
 8001efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f00:	e000      	b.n	8001f04 <ETH_SetMACConfig+0x60>
 8001f02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	7f1b      	ldrb	r3, [r3, #28]
 8001f0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d102      	bne.n	8001f2c <ETH_SetMACConfig+0x88>
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2a:	e000      	b.n	8001f2e <ETH_SetMACConfig+0x8a>
 8001f2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	7bdb      	ldrb	r3, [r3, #15]
 8001f34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f46:	4313      	orrs	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff f982 	bl	8001268 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0xee>
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0xf0>
 8001f92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d101      	bne.n	8001faa <ETH_SetMACConfig+0x106>
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x108>
 8001faa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fb4:	2a01      	cmp	r2, #1
 8001fb6:	d101      	bne.n	8001fbc <ETH_SetMACConfig+0x118>
 8001fb8:	2204      	movs	r2, #4
 8001fba:	e000      	b.n	8001fbe <ETH_SetMACConfig+0x11a>
 8001fbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d101      	bne.n	8001fce <ETH_SetMACConfig+0x12a>
 8001fca:	2202      	movs	r2, #2
 8001fcc:	e000      	b.n	8001fd0 <ETH_SetMACConfig+0x12c>
 8001fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f93d 	bl	8001268 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	ff20810f 	.word	0xff20810f

08002004 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <ETH_SetDMAConfig+0x110>)
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7b1b      	ldrb	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetDMAConfig+0x2c>
 800202a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800202e:	e000      	b.n	8002032 <ETH_SetDMAConfig+0x2e>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7b5b      	ldrb	r3, [r3, #13]
 8002036:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002038:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	7f52      	ldrb	r2, [r2, #29]
 800203e:	2a00      	cmp	r2, #0
 8002040:	d102      	bne.n	8002048 <ETH_SetDMAConfig+0x44>
 8002042:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002046:	e000      	b.n	800204a <ETH_SetDMAConfig+0x46>
 8002048:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800204a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	7b9b      	ldrb	r3, [r3, #14]
 8002050:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002052:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002058:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7f1b      	ldrb	r3, [r3, #28]
 800205e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002060:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7f9b      	ldrb	r3, [r3, #30]
 8002066:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002068:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002076:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002078:	4313      	orrs	r3, r2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff f8e4 	bl	8001268 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	461a      	mov	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff f8b5 	bl	8001268 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	f8de3f23 	.word	0xf8de3f23

08002118 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0a6      	sub	sp, #152	; 0x98
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002154:	2300      	movs	r3, #0
 8002156:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800215e:	2300      	movs	r3, #0
 8002160:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fe86 	bl	8001ea4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002198:	2301      	movs	r3, #1
 800219a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff08 	bl	8002004 <ETH_SetDMAConfig>
}
 80021f4:	bf00      	nop
 80021f6:	3798      	adds	r7, #152	; 0x98
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3204      	adds	r2, #4
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <ETH_MACAddressConfig+0x68>)
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061a      	lsls	r2, r3, #24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3302      	adds	r3, #2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4313      	orrs	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <ETH_MACAddressConfig+0x6c>)
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40028040 	.word	0x40028040
 8002268:	40028044 	.word	0x40028044

0800226c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e03e      	b.n	80022f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	3206      	adds	r2, #6
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d80c      	bhi.n	80022dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e004      	b.n	80022e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d9bd      	bls.n	800227a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e046      	b.n	80023ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002368:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002370:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	3212      	adds	r2, #18
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d80c      	bhi.n	80023aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6919      	ldr	r1, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e004      	b.n	80023b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d9b5      	bls.n	800232c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	60da      	str	r2, [r3, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b08d      	sub	sp, #52	; 0x34
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3318      	adds	r3, #24
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243a:	d007      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3304      	adds	r3, #4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e0ff      	b.n	8002650 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3301      	adds	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4b7d      	ldr	r3, [pc, #500]	; (800265c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002466:	4013      	ands	r3, r2
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	6852      	ldr	r2, [r2, #4]
 800246c:	431a      	orrs	r2, r3
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80024d2:	f3bf 8f5f 	dmb	sy
}
 80024d6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024e4:	e082      	b.n	80025ec <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	3301      	adds	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	2b03      	cmp	r3, #3
 800251c:	d902      	bls.n	8002524 <ETH_Prepare_Tx_Descriptors+0x12c>
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	3b04      	subs	r3, #4
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002546:	d007      	beq.n	8002558 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	3304      	adds	r3, #4
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d029      	beq.n	80025ac <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
 800256a:	e019      	b.n	80025a0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800256c:	f3bf 8f5f 	dmb	sy
}
 8002570:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	3301      	adds	r3, #1
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	2b03      	cmp	r3, #3
 8002588:	d902      	bls.n	8002590 <ETH_Prepare_Tx_Descriptors+0x198>
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	3b04      	subs	r3, #4
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	3301      	adds	r3, #1
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3e1      	bcc.n	800256c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e051      	b.n	8002650 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	3301      	adds	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <ETH_Prepare_Tx_Descriptors+0x264>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	6852      	ldr	r2, [r2, #4]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80025da:	f3bf 8f5f 	dmb	sy
}
 80025de:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f af78 	bne.w	80024e6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e005      	b.n	8002616 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	3304      	adds	r3, #4
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800264a:	b662      	cpsie	i
}
 800264c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3734      	adds	r7, #52	; 0x34
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	ffffe000 	.word	0xffffe000

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e175      	b.n	800296c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8164 	bne.w	8002966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x56>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80be 	beq.w	8002966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_GPIO_Init+0x324>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002802:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_GPIO_Init+0x328>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_GPIO_Init+0x32c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d037      	beq.n	800289e <HAL_GPIO_Init+0x23e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d031      	beq.n	800289a <HAL_GPIO_Init+0x23a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_GPIO_Init+0x334>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <HAL_GPIO_Init+0x236>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a55      	ldr	r2, [pc, #340]	; (8002998 <HAL_GPIO_Init+0x338>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x232>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_GPIO_Init+0x33c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x22e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <HAL_GPIO_Init+0x340>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x22a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_GPIO_Init+0x344>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a51      	ldr	r2, [pc, #324]	; (80029a8 <HAL_GPIO_Init+0x348>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a50      	ldr	r2, [pc, #320]	; (80029ac <HAL_GPIO_Init+0x34c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x21a>
 8002876:	2309      	movs	r3, #9
 8002878:	e012      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800287a:	230a      	movs	r3, #10
 800287c:	e010      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800287e:	2308      	movs	r3, #8
 8002880:	e00e      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002882:	2307      	movs	r3, #7
 8002884:	e00c      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002886:	2306      	movs	r3, #6
 8002888:	e00a      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800288a:	2305      	movs	r3, #5
 800288c:	e008      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800288e:	2304      	movs	r3, #4
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002892:	2303      	movs	r3, #3
 8002894:	e004      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 8002896:	2302      	movs	r3, #2
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_GPIO_Init+0x240>
 800289e:	2300      	movs	r3, #0
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f002 0203 	and.w	r2, r2, #3
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	4093      	lsls	r3, r2
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028b0:	4935      	ldr	r1, [pc, #212]	; (8002988 <HAL_GPIO_Init+0x328>)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e8:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_GPIO_Init+0x354>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_GPIO_Init+0x354>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_GPIO_Init+0x354>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_GPIO_Init+0x354>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	f67f ae86 	bls.w	8002680 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3724      	adds	r7, #36	; 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40013800 	.word	0x40013800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40021800 	.word	0x40021800
 80029a8:	40021c00 	.word	0x40021c00
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40022400 	.word	0x40022400
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ec:	b08f      	sub	sp, #60	; 0x3c
 80029ee:	af0a      	add	r7, sp, #40	; 0x28
 80029f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e116      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f8be 	bl	8000b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 ff3a 	bl	80048b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	687e      	ldr	r6, [r7, #4]
 8002a48:	466d      	mov	r5, sp
 8002a4a:	f106 0410 	add.w	r4, r6, #16
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a5e:	1d33      	adds	r3, r6, #4
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f001 fece 	bl	8004804 <USB_CoreInit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0d7      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 ff28 	bl	80048d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e04a      	b.n	8002b22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	333d      	adds	r3, #61	; 0x3d
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	333c      	adds	r3, #60	; 0x3c
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3344      	adds	r3, #68	; 0x44
 8002ac8:	4602      	mov	r2, r0
 8002aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3340      	adds	r3, #64	; 0x40
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3348      	adds	r3, #72	; 0x48
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334c      	adds	r3, #76	; 0x4c
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3354      	adds	r3, #84	; 0x54
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3af      	bcc.n	8002a8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
 8002b30:	e044      	b.n	8002bbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3b5      	bcc.n	8002b32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	687e      	ldr	r6, [r7, #4]
 8002bce:	466d      	mov	r5, sp
 8002bd0:	f106 0410 	add.w	r4, r6, #16
 8002bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002be4:	1d33      	adds	r3, r6, #4
 8002be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be8:	6838      	ldr	r0, [r7, #0]
 8002bea:	f001 fec1 	bl	8004970 <USB_DevInit>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e014      	b.n	8002c2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f80b 	bl	8002c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 f87f 	bl	8004d26 <USB_DevDisconnect>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	10000003 	.word	0x10000003

08002c7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7fe fac1 	bl	8001250 <HAL_GetTick>
 8002cce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd0:	e009      	b.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd2:	f7fe fabd 	bl	8001250 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e022      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d00:	f7fe faa6 	bl	8001250 <HAL_GetTick>
 8002d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d06:	e009      	b.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d08:	f7fe faa2 	bl	8001250 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d16:	d901      	bls.n	8002d1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e007      	b.n	8002d2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d28:	d1ee      	bne.n	8002d08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e29b      	b.n	800328a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8087 	beq.w	8002e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d00c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6c:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d112      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d84:	d10b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d06c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x130>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d168      	bne.n	8002e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e275      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a>
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a83      	ldr	r2, [pc, #524]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x9c>
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a72      	ldr	r2, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6b      	ldr	r2, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fa18 	bl	8001250 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fa14 	bl	8001250 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e229      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fa04 	bl	8001250 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fa00 	bl	8001250 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e215      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x110>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d069      	beq.n	8002f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7a:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1e9      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	493d      	ldr	r1, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e040      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f9b6 	bl	8001250 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe f9b2 	bl	8001250 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1c7      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4929      	ldr	r1, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
 8002f1a:	e018      	b.n	8002f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe f992 	bl	8001250 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe f98e 	bl	8001250 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1a3      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d038      	beq.n	8002fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe f96f 	bl	8001250 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe f96b 	bl	8001250 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e180      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x23a>
 8002f94:	e01a      	b.n	8002fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe f955 	bl	8001250 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe f951 	bl	8001250 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d903      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e166      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
 8002fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a4 	beq.w	8003122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a88      	ldr	r2, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b86      	ldr	r3, [pc, #536]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800300e:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7f      	ldr	r2, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe f919 	bl	8001250 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe f915 	bl	8001250 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e12a      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x4d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x31a>
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a6f      	ldr	r2, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x33c>
 800305e:	4b6b      	ldr	r3, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x35e>
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a5e      	ldr	r2, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x376>
 800309a:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe f8c9 	bl	8001250 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe f8c5 	bl	8001250 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0d8      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x386>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe f8b3 	bl	8001250 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe f8af 	bl	8001250 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e0c2      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80ae 	beq.w	8003288 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d06d      	beq.n	8003214 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d14b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a31      	ldr	r2, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f880 	bl	8001250 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f87c 	bl	8001250 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e091      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	491b      	ldr	r1, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe f84e 	bl	8001250 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe f84a 	bl	8001250 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e05f      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x47c>
 80031d6:	e057      	b.n	8003288 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f834 	bl	8001250 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe f830 	bl	8001250 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e045      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_OscConfig+0x4d0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x4b0>
 800320a:	e03d      	b.n	8003288 <HAL_RCC_OscConfig+0x54c>
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x558>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d030      	beq.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d129      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d122      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800324c:	4293      	cmp	r3, r2
 800324e:	d119      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d10f      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0d0      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d910      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	4965      	ldr	r1, [pc, #404]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b8      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003302:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800331a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b50      	ldr	r3, [pc, #320]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	494d      	ldr	r1, [pc, #308]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d040      	beq.n	80033bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d115      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e07f      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e073      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06b      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4936      	ldr	r1, [pc, #216]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fd ff60 	bl	8001250 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fd ff5c 	bl	8001250 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e053      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d210      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 020f 	bic.w	r2, r3, #15
 80033d2:	4922      	ldr	r1, [pc, #136]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e032      	b.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4916      	ldr	r1, [pc, #88]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	490e      	ldr	r1, [pc, #56]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800342a:	f000 f821 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490a      	ldr	r1, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x1cc>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1d0>)
 8003444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd febc 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023c00 	.word	0x40023c00
 8003460:	40023800 	.word	0x40023800
 8003464:	08014b90 	.word	0x08014b90
 8003468:	20000000 	.word	0x20000000
 800346c:	20000004 	.word	0x20000004

08003470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003474:	b094      	sub	sp, #80	; 0x50
 8003476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
 800347c:	2300      	movs	r3, #0
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	2300      	movs	r3, #0
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003488:	4b79      	ldr	r3, [pc, #484]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d00d      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003494:	2b08      	cmp	r3, #8
 8003496:	f200 80e1 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x1ec>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x34>
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x3a>
 80034a2:	e0db      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a8:	e0db      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_GetSysClockFreq+0x208>)
 80034ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ae:	e0d8      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d063      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	2200      	movs	r2, #0
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
 80034da:	2300      	movs	r3, #0
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
 80034de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	f04f 0000 	mov.w	r0, #0
 80034ea:	f04f 0100 	mov.w	r1, #0
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f4:	0150      	lsls	r0, r2, #5
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4621      	mov	r1, r4
 80034fc:	1a51      	subs	r1, r2, r1
 80034fe:	6139      	str	r1, [r7, #16]
 8003500:	4629      	mov	r1, r5
 8003502:	eb63 0301 	sbc.w	r3, r3, r1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003514:	4659      	mov	r1, fp
 8003516:	018b      	lsls	r3, r1, #6
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351e:	4651      	mov	r1, sl
 8003520:	018a      	lsls	r2, r1, #6
 8003522:	4651      	mov	r1, sl
 8003524:	ebb2 0801 	subs.w	r8, r2, r1
 8003528:	4659      	mov	r1, fp
 800352a:	eb63 0901 	sbc.w	r9, r3, r1
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003542:	4690      	mov	r8, r2
 8003544:	4699      	mov	r9, r3
 8003546:	4623      	mov	r3, r4
 8003548:	eb18 0303 	adds.w	r3, r8, r3
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	462b      	mov	r3, r5
 8003550:	eb49 0303 	adc.w	r3, r9, r3
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003562:	4629      	mov	r1, r5
 8003564:	024b      	lsls	r3, r1, #9
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800356c:	4621      	mov	r1, r4
 800356e:	024a      	lsls	r2, r1, #9
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003576:	2200      	movs	r2, #0
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
 800357a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003580:	f7fc fec6 	bl	8000310 <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4613      	mov	r3, r2
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358c:	e058      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	4618      	mov	r0, r3
 8003598:	4611      	mov	r1, r2
 800359a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	f04f 0000 	mov.w	r0, #0
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	0159      	lsls	r1, r3, #5
 80035b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ba:	0150      	lsls	r0, r2, #5
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4641      	mov	r1, r8
 80035c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035c6:	4649      	mov	r1, r9
 80035c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e0:	ebb2 040a 	subs.w	r4, r2, sl
 80035e4:	eb63 050b 	sbc.w	r5, r3, fp
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	464b      	mov	r3, r9
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003616:	4629      	mov	r1, r5
 8003618:	028b      	lsls	r3, r1, #10
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003620:	4621      	mov	r1, r4
 8003622:	028a      	lsls	r2, r1, #10
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362a:	2200      	movs	r2, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	61fa      	str	r2, [r7, #28]
 8003630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003634:	f7fc fe6c 	bl	8000310 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4613      	mov	r3, r2
 800363e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_GetSysClockFreq+0x200>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetSysClockFreq+0x204>)
 800365e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003664:	4618      	mov	r0, r3
 8003666:	3750      	adds	r7, #80	; 0x50
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	007a1200 	.word	0x007a1200

0800367c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08014ba0 	.word	0x08014ba0

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffdc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0b5b      	lsrs	r3, r3, #13
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08014ba0 	.word	0x08014ba0

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800370c:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	4964      	ldr	r1, [pc, #400]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	4959      	ldr	r1, [pc, #356]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377a:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	494a      	ldr	r1, [pc, #296]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 808b 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a39      	ldr	r2, [pc, #228]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6413      	str	r3, [r2, #64]	; 0x40
 80037d4:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e0:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fd30 	bl	8001250 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd fd2c 	bl	8001250 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e38f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003812:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d035      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d02e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d114      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fcf4 	bl	8001250 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd fcf0 	bl	8001250 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e351      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ee      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389a:	d111      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	4901      	ldr	r1, [pc, #4]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
 80038b2:	e00b      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	0ffffcff 	.word	0x0ffffcff
 80038c0:	4bac      	ldr	r3, [pc, #688]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4aab      	ldr	r2, [pc, #684]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	4ba9      	ldr	r3, [pc, #676]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	49a6      	ldr	r1, [pc, #664]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ea:	4ba2      	ldr	r3, [pc, #648]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	4aa0      	ldr	r2, [pc, #640]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038fa:	4b9e      	ldr	r3, [pc, #632]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	499b      	ldr	r1, [pc, #620]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003918:	4b96      	ldr	r3, [pc, #600]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	4993      	ldr	r1, [pc, #588]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393a:	4b8e      	ldr	r3, [pc, #568]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003948:	498a      	ldr	r1, [pc, #552]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800395c:	4b85      	ldr	r3, [pc, #532]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396a:	4982      	ldr	r1, [pc, #520]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800397e:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4979      	ldr	r1, [pc, #484]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a0:	4b74      	ldr	r3, [pc, #464]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4971      	ldr	r1, [pc, #452]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c2:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f023 020c 	bic.w	r2, r3, #12
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	4968      	ldr	r1, [pc, #416]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e4:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	4960      	ldr	r1, [pc, #384]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a06:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	4957      	ldr	r1, [pc, #348]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a28:	4b52      	ldr	r3, [pc, #328]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	494f      	ldr	r1, [pc, #316]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4946      	ldr	r1, [pc, #280]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	493e      	ldr	r1, [pc, #248]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a8e:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab0:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	492d      	ldr	r1, [pc, #180]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d011      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	4924      	ldr	r1, [pc, #144]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	4914      	ldr	r1, [pc, #80]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b44:	490b      	ldr	r1, [pc, #44]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	4902      	ldr	r1, [pc, #8]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b84:	4b8a      	ldr	r3, [pc, #552]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	4986      	ldr	r1, [pc, #536]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	497d      	ldr	r1, [pc, #500]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d006      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d6 	beq.w	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd4:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd fb36 	bl	8001250 <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003be8:	f7fd fb32 	bl	8001250 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e195      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d021      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	0e1b      	lsrs	r3, r3, #24
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4958      	ldr	r1, [pc, #352]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02e      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c80:	d129      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c82:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	493e      	ldr	r1, [pc, #248]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc4:	f023 021f 	bic.w	r2, r3, #31
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	4938      	ldr	r1, [pc, #224]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01d      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ce2:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce8:	0e1b      	lsrs	r3, r3, #24
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	0f1b      	lsrs	r3, r3, #28
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	019a      	lsls	r2, r3, #6
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	071b      	lsls	r3, r3, #28
 8003d16:	4926      	ldr	r1, [pc, #152]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d011      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	491a      	ldr	r1, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d4e:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fa79 	bl	8001250 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd fa75 	bl	8001250 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0d8      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	f040 80ce 	bne.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fd fa5c 	bl	8001250 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d9c:	f7fd fa58 	bl	8001250 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d904      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0bb      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db4:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d0ec      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12a      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dea:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003df8:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	0f1b      	lsrs	r3, r3, #28
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	019a      	lsls	r2, r3, #6
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	4944      	ldr	r1, [pc, #272]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	493d      	ldr	r1, [pc, #244]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d022      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e54:	d11d      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	0e1b      	lsrs	r3, r3, #24
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	0f1b      	lsrs	r3, r3, #28
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	019a      	lsls	r2, r3, #6
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	071b      	lsls	r3, r3, #28
 8003e8a:	4929      	ldr	r1, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d028      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	019a      	lsls	r2, r3, #6
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4917      	ldr	r1, [pc, #92]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4911      	ldr	r1, [pc, #68]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd f9a8 	bl	8001250 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f04:	f7fd f9a4 	bl	8001250 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e007      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f22:	d1ef      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e040      	b.n	8003fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fdbe 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f82c 	bl	8003fd0 <UART_SetConfig>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e022      	b.n	8003fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa84 	bl	8004498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fb0b 	bl	80045dc <UART_CheckIdleState>
 8003fc6:	4603      	mov	r3, r0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4ba6      	ldr	r3, [pc, #664]	; (8004294 <UART_SetConfig+0x2c4>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a94      	ldr	r2, [pc, #592]	; (8004298 <UART_SetConfig+0x2c8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d120      	bne.n	800408e <UART_SetConfig+0xbe>
 800404c:	4b93      	ldr	r3, [pc, #588]	; (800429c <UART_SetConfig+0x2cc>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b03      	cmp	r3, #3
 8004058:	d816      	bhi.n	8004088 <UART_SetConfig+0xb8>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x90>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004071 	.word	0x08004071
 8004064:	0800407d 	.word	0x0800407d
 8004068:	08004077 	.word	0x08004077
 800406c:	08004083 	.word	0x08004083
 8004070:	2301      	movs	r3, #1
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e150      	b.n	8004318 <UART_SetConfig+0x348>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e14d      	b.n	8004318 <UART_SetConfig+0x348>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e14a      	b.n	8004318 <UART_SetConfig+0x348>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e147      	b.n	8004318 <UART_SetConfig+0x348>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e144      	b.n	8004318 <UART_SetConfig+0x348>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <UART_SetConfig+0x2d0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d132      	bne.n	80040fe <UART_SetConfig+0x12e>
 8004098:	4b80      	ldr	r3, [pc, #512]	; (800429c <UART_SetConfig+0x2cc>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d828      	bhi.n	80040f8 <UART_SetConfig+0x128>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0xdc>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	080040f9 	.word	0x080040f9
 80040b4:	080040f9 	.word	0x080040f9
 80040b8:	080040f9 	.word	0x080040f9
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040f9 	.word	0x080040f9
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080040f9 	.word	0x080040f9
 80040cc:	080040e7 	.word	0x080040e7
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	080040f9 	.word	0x080040f9
 80040dc:	080040f3 	.word	0x080040f3
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e118      	b.n	8004318 <UART_SetConfig+0x348>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e115      	b.n	8004318 <UART_SetConfig+0x348>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e112      	b.n	8004318 <UART_SetConfig+0x348>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e10f      	b.n	8004318 <UART_SetConfig+0x348>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e10c      	b.n	8004318 <UART_SetConfig+0x348>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <UART_SetConfig+0x2d4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d120      	bne.n	800414a <UART_SetConfig+0x17a>
 8004108:	4b64      	ldr	r3, [pc, #400]	; (800429c <UART_SetConfig+0x2cc>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004112:	2b30      	cmp	r3, #48	; 0x30
 8004114:	d013      	beq.n	800413e <UART_SetConfig+0x16e>
 8004116:	2b30      	cmp	r3, #48	; 0x30
 8004118:	d814      	bhi.n	8004144 <UART_SetConfig+0x174>
 800411a:	2b20      	cmp	r3, #32
 800411c:	d009      	beq.n	8004132 <UART_SetConfig+0x162>
 800411e:	2b20      	cmp	r3, #32
 8004120:	d810      	bhi.n	8004144 <UART_SetConfig+0x174>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <UART_SetConfig+0x15c>
 8004126:	2b10      	cmp	r3, #16
 8004128:	d006      	beq.n	8004138 <UART_SetConfig+0x168>
 800412a:	e00b      	b.n	8004144 <UART_SetConfig+0x174>
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0f2      	b.n	8004318 <UART_SetConfig+0x348>
 8004132:	2302      	movs	r3, #2
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0ef      	b.n	8004318 <UART_SetConfig+0x348>
 8004138:	2304      	movs	r3, #4
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0ec      	b.n	8004318 <UART_SetConfig+0x348>
 800413e:	2308      	movs	r3, #8
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e0e9      	b.n	8004318 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e0e6      	b.n	8004318 <UART_SetConfig+0x348>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a56      	ldr	r2, [pc, #344]	; (80042a8 <UART_SetConfig+0x2d8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d120      	bne.n	8004196 <UART_SetConfig+0x1c6>
 8004154:	4b51      	ldr	r3, [pc, #324]	; (800429c <UART_SetConfig+0x2cc>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800415e:	2bc0      	cmp	r3, #192	; 0xc0
 8004160:	d013      	beq.n	800418a <UART_SetConfig+0x1ba>
 8004162:	2bc0      	cmp	r3, #192	; 0xc0
 8004164:	d814      	bhi.n	8004190 <UART_SetConfig+0x1c0>
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d009      	beq.n	800417e <UART_SetConfig+0x1ae>
 800416a:	2b80      	cmp	r3, #128	; 0x80
 800416c:	d810      	bhi.n	8004190 <UART_SetConfig+0x1c0>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <UART_SetConfig+0x1a8>
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d006      	beq.n	8004184 <UART_SetConfig+0x1b4>
 8004176:	e00b      	b.n	8004190 <UART_SetConfig+0x1c0>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0cc      	b.n	8004318 <UART_SetConfig+0x348>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0c9      	b.n	8004318 <UART_SetConfig+0x348>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0c6      	b.n	8004318 <UART_SetConfig+0x348>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e0c3      	b.n	8004318 <UART_SetConfig+0x348>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e0c0      	b.n	8004318 <UART_SetConfig+0x348>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a44      	ldr	r2, [pc, #272]	; (80042ac <UART_SetConfig+0x2dc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d125      	bne.n	80041ec <UART_SetConfig+0x21c>
 80041a0:	4b3e      	ldr	r3, [pc, #248]	; (800429c <UART_SetConfig+0x2cc>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ae:	d017      	beq.n	80041e0 <UART_SetConfig+0x210>
 80041b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b4:	d817      	bhi.n	80041e6 <UART_SetConfig+0x216>
 80041b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ba:	d00b      	beq.n	80041d4 <UART_SetConfig+0x204>
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c0:	d811      	bhi.n	80041e6 <UART_SetConfig+0x216>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <UART_SetConfig+0x1fe>
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d006      	beq.n	80041da <UART_SetConfig+0x20a>
 80041cc:	e00b      	b.n	80041e6 <UART_SetConfig+0x216>
 80041ce:	2300      	movs	r3, #0
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0a1      	b.n	8004318 <UART_SetConfig+0x348>
 80041d4:	2302      	movs	r3, #2
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e09e      	b.n	8004318 <UART_SetConfig+0x348>
 80041da:	2304      	movs	r3, #4
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e09b      	b.n	8004318 <UART_SetConfig+0x348>
 80041e0:	2308      	movs	r3, #8
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e098      	b.n	8004318 <UART_SetConfig+0x348>
 80041e6:	2310      	movs	r3, #16
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e095      	b.n	8004318 <UART_SetConfig+0x348>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <UART_SetConfig+0x2e0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d125      	bne.n	8004242 <UART_SetConfig+0x272>
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004204:	d017      	beq.n	8004236 <UART_SetConfig+0x266>
 8004206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420a:	d817      	bhi.n	800423c <UART_SetConfig+0x26c>
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004210:	d00b      	beq.n	800422a <UART_SetConfig+0x25a>
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d811      	bhi.n	800423c <UART_SetConfig+0x26c>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <UART_SetConfig+0x254>
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x260>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x26c>
 8004224:	2301      	movs	r3, #1
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e076      	b.n	8004318 <UART_SetConfig+0x348>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e073      	b.n	8004318 <UART_SetConfig+0x348>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e070      	b.n	8004318 <UART_SetConfig+0x348>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e06d      	b.n	8004318 <UART_SetConfig+0x348>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e06a      	b.n	8004318 <UART_SetConfig+0x348>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <UART_SetConfig+0x2e4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d138      	bne.n	80042be <UART_SetConfig+0x2ee>
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x2bc>
 800425c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004260:	d82a      	bhi.n	80042b8 <UART_SetConfig+0x2e8>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d00b      	beq.n	8004280 <UART_SetConfig+0x2b0>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d824      	bhi.n	80042b8 <UART_SetConfig+0x2e8>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <UART_SetConfig+0x2aa>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x2b6>
 8004278:	e01e      	b.n	80042b8 <UART_SetConfig+0x2e8>
 800427a:	2300      	movs	r3, #0
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e04b      	b.n	8004318 <UART_SetConfig+0x348>
 8004280:	2302      	movs	r3, #2
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e048      	b.n	8004318 <UART_SetConfig+0x348>
 8004286:	2304      	movs	r3, #4
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e045      	b.n	8004318 <UART_SetConfig+0x348>
 800428c:	2308      	movs	r3, #8
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e042      	b.n	8004318 <UART_SetConfig+0x348>
 8004292:	bf00      	nop
 8004294:	efff69f3 	.word	0xefff69f3
 8004298:	40011000 	.word	0x40011000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40004400 	.word	0x40004400
 80042a4:	40004800 	.word	0x40004800
 80042a8:	40004c00 	.word	0x40004c00
 80042ac:	40005000 	.word	0x40005000
 80042b0:	40011400 	.word	0x40011400
 80042b4:	40007800 	.word	0x40007800
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e02c      	b.n	8004318 <UART_SetConfig+0x348>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a72      	ldr	r2, [pc, #456]	; (800448c <UART_SetConfig+0x4bc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d125      	bne.n	8004314 <UART_SetConfig+0x344>
 80042c8:	4b71      	ldr	r3, [pc, #452]	; (8004490 <UART_SetConfig+0x4c0>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042d6:	d017      	beq.n	8004308 <UART_SetConfig+0x338>
 80042d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042dc:	d817      	bhi.n	800430e <UART_SetConfig+0x33e>
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d00b      	beq.n	80042fc <UART_SetConfig+0x32c>
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d811      	bhi.n	800430e <UART_SetConfig+0x33e>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <UART_SetConfig+0x326>
 80042ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f2:	d006      	beq.n	8004302 <UART_SetConfig+0x332>
 80042f4:	e00b      	b.n	800430e <UART_SetConfig+0x33e>
 80042f6:	2300      	movs	r3, #0
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e00d      	b.n	8004318 <UART_SetConfig+0x348>
 80042fc:	2302      	movs	r3, #2
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e00a      	b.n	8004318 <UART_SetConfig+0x348>
 8004302:	2304      	movs	r3, #4
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e007      	b.n	8004318 <UART_SetConfig+0x348>
 8004308:	2308      	movs	r3, #8
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e004      	b.n	8004318 <UART_SetConfig+0x348>
 800430e:	2310      	movs	r3, #16
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e001      	b.n	8004318 <UART_SetConfig+0x348>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d15b      	bne.n	80043da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004322:	7ffb      	ldrb	r3, [r7, #31]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d828      	bhi.n	800437a <UART_SetConfig+0x3aa>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x360>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004355 	.word	0x08004355
 8004334:	0800435d 	.word	0x0800435d
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437b 	.word	0x0800437b
 8004340:	0800436b 	.word	0x0800436b
 8004344:	0800437b 	.word	0x0800437b
 8004348:	0800437b 	.word	0x0800437b
 800434c:	0800437b 	.word	0x0800437b
 8004350:	08004373 	.word	0x08004373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004354:	f7ff f99e 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e013      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7ff f9ae 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <UART_SetConfig+0x4c4>)
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00c      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436a:	f7ff f881 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800436e:	61b8      	str	r0, [r7, #24]
        break;
 8004370:	e008      	b.n	8004384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	61bb      	str	r3, [r7, #24]
        break;
 8004378:	e004      	b.n	8004384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	77bb      	strb	r3, [r7, #30]
        break;
 8004382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d074      	beq.n	8004474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	005a      	lsls	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d916      	bls.n	80043d4 <UART_SetConfig+0x404>
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d212      	bcs.n	80043d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	89fa      	ldrh	r2, [r7, #14]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	e04f      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77bb      	strb	r3, [r7, #30]
 80043d8:	e04c      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d828      	bhi.n	8004432 <UART_SetConfig+0x462>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x418>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	08004433 	.word	0x08004433
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004433 	.word	0x08004433
 8004404:	08004433 	.word	0x08004433
 8004408:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff f942 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e013      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7ff f952 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <UART_SetConfig+0x4c4>)
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e00c      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7ff f825 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8004426:	61b8      	str	r0, [r7, #24]
        break;
 8004428:	e008      	b.n	800443c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e004      	b.n	800443c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77bb      	strb	r3, [r7, #30]
        break;
 800443a:	bf00      	nop
    }

    if (pclk != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085a      	lsrs	r2, r3, #1
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	441a      	add	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d909      	bls.n	8004470 <UART_SetConfig+0x4a0>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d205      	bcs.n	8004470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	e001      	b.n	8004474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004480:	7fbb      	ldrb	r3, [r7, #30]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40007c00 	.word	0x40007c00
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400

08004498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d10a      	bne.n	80045ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc fe30 	bl	8001250 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10e      	bne.n	800461e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f831 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e027      	b.n	800466e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b04      	cmp	r3, #4
 800462a:	d10e      	bne.n	800464a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f81b 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e011      	b.n	800466e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b09c      	sub	sp, #112	; 0x70
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	e0a7      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	f000 80a3 	beq.w	80047d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fc fddd 	bl	8001250 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d13f      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046bc:	667b      	str	r3, [r7, #100]	; 0x64
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	663b      	str	r3, [r7, #96]	; 0x60
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e068      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d050      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004744:	d148      	bne.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
 8004770:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e6      	bne.n	8004750 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	66bb      	str	r3, [r7, #104]	; 0x68
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047a2:	623a      	str	r2, [r7, #32]
 80047a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e010      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f43f af48 	beq.w	8004688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3770      	adds	r7, #112	; 0x70
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 001c 	add.w	r0, r7, #28
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	d120      	bne.n	800485e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <USB_CoreInit+0xac>)
 800482e:	4013      	ands	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa96 	bl	8004d84 <USB_CoreReset>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e010      	b.n	8004880 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa8a 	bl	8004d84 <USB_CoreReset>
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10b      	bne.n	800489e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f043 0206 	orr.w	r2, r3, #6
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048aa:	b004      	add	sp, #16
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	ffbdffbf 	.word	0xffbdffbf

080048b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 0201 	bic.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d115      	bne.n	8004924 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004904:	2001      	movs	r0, #1
 8004906:	f7fc fcaf 	bl	8001268 <HAL_Delay>
      ms++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa29 	bl	8004d68 <USB_GetMode>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d01e      	beq.n	800495a <USB_SetCurrentMode+0x84>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b31      	cmp	r3, #49	; 0x31
 8004920:	d9f0      	bls.n	8004904 <USB_SetCurrentMode+0x2e>
 8004922:	e01a      	b.n	800495a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d115      	bne.n	8004956 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004936:	2001      	movs	r0, #1
 8004938:	f7fc fc96 	bl	8001268 <HAL_Delay>
      ms++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa10 	bl	8004d68 <USB_GetMode>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <USB_SetCurrentMode+0x84>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b31      	cmp	r3, #49	; 0x31
 8004952:	d9f0      	bls.n	8004936 <USB_SetCurrentMode+0x60>
 8004954:	e001      	b.n	800495a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e005      	b.n	8004966 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b32      	cmp	r3, #50	; 0x32
 800495e:	d101      	bne.n	8004964 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004970:	b084      	sub	sp, #16
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800497e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e009      	b.n	80049a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	3301      	adds	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b0e      	cmp	r3, #14
 80049a8:	d9f2      	bls.n	8004990 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11c      	bne.n	80049ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e005      	b.n	80049f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049fc:	461a      	mov	r2, r3
 80049fe:	2300      	movs	r3, #0
 8004a00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	461a      	mov	r2, r3
 8004a12:	680b      	ldr	r3, [r1, #0]
 8004a14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10c      	bne.n	8004a36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a22:	2100      	movs	r1, #0
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f965 	bl	8004cf4 <USB_SetDevSpeed>
 8004a2a:	e008      	b.n	8004a3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f960 	bl	8004cf4 <USB_SetDevSpeed>
 8004a34:	e003      	b.n	8004a3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a36:	2103      	movs	r1, #3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f95b 	bl	8004cf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a3e:	2110      	movs	r1, #16
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8f3 	bl	8004c2c <USB_FlushTxFifo>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f91f 	bl	8004c94 <USB_FlushRxFifo>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	461a      	mov	r2, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	e043      	b.n	8004b12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa0:	d118      	bne.n	8004ad4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e013      	b.n	8004ae6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	461a      	mov	r2, r3
 8004acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e008      	b.n	8004ae6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	461a      	mov	r2, r3
 8004af4:	2300      	movs	r3, #0
 8004af6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3b7      	bcc.n	8004a8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e043      	b.n	8004ba8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b36:	d118      	bne.n	8004b6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e013      	b.n	8004b7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e008      	b.n	8004b7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	461a      	mov	r2, r3
 8004b78:	2300      	movs	r3, #0
 8004b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ba0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3b7      	bcc.n	8004b20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f043 0210 	orr.w	r2, r3, #16
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <USB_DevInit+0x2b4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f043 0208 	orr.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <USB_DevInit+0x2b8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c20:	b004      	add	sp, #16
 8004c22:	4770      	bx	lr
 8004c24:	803c3800 	.word	0x803c3800
 8004c28:	40000004 	.word	0x40000004

08004c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <USB_FlushTxFifo+0x64>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e01b      	b.n	8004c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	daf2      	bge.n	8004c3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	019b      	lsls	r3, r3, #6
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <USB_FlushTxFifo+0x64>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e006      	b.n	8004c84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d0f0      	beq.n	8004c64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	00030d40 	.word	0x00030d40

08004c94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <USB_FlushRxFifo+0x5c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e018      	b.n	8004ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	daf2      	bge.n	8004ca0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <USB_FlushRxFifo+0x5c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e006      	b.n	8004ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d0f0      	beq.n	8004cc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d40:	f023 0303 	bic.w	r3, r3, #3
 8004d44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0301 	and.w	r3, r3, #1
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3301      	adds	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <USB_CoreReset+0x64>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e01b      	b.n	8004dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	daf2      	bge.n	8004d90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <USB_CoreReset+0x64>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d0f0      	beq.n	8004dba <USB_CoreReset+0x36>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	00030d40 	.word	0x00030d40

08004dec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004df2:	4b87      	ldr	r3, [pc, #540]	; (8005010 <MX_LWIP_Init+0x224>)
 8004df4:	22c0      	movs	r2, #192	; 0xc0
 8004df6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004df8:	4b85      	ldr	r3, [pc, #532]	; (8005010 <MX_LWIP_Init+0x224>)
 8004dfa:	22a8      	movs	r2, #168	; 0xa8
 8004dfc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004e04:	4b82      	ldr	r3, [pc, #520]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e06:	226f      	movs	r2, #111	; 0x6f
 8004e08:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e0a:	4b82      	ldr	r3, [pc, #520]	; (8005014 <MX_LWIP_Init+0x228>)
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e10:	4b80      	ldr	r3, [pc, #512]	; (8005014 <MX_LWIP_Init+0x228>)
 8004e12:	22ff      	movs	r2, #255	; 0xff
 8004e14:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004e16:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <MX_LWIP_Init+0x228>)
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e1c:	4b7d      	ldr	r3, [pc, #500]	; (8005014 <MX_LWIP_Init+0x228>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004e22:	4b7d      	ldr	r3, [pc, #500]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004e24:	22c0      	movs	r2, #192	; 0xc0
 8004e26:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004e28:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004e2a:	22a8      	movs	r2, #168	; 0xa8
 8004e2c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004e2e:	4b7a      	ldr	r3, [pc, #488]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004e34:	4b78      	ldr	r3, [pc, #480]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004e3a:	f001 fc57 	bl	80066ec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e3e:	4b74      	ldr	r3, [pc, #464]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	4b72      	ldr	r3, [pc, #456]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	4b70      	ldr	r3, [pc, #448]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e4e:	789b      	ldrb	r3, [r3, #2]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	4313      	orrs	r3, r2
 8004e54:	4a6e      	ldr	r2, [pc, #440]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e56:	78d2      	ldrb	r2, [r2, #3]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	061a      	lsls	r2, r3, #24
 8004e5c:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	0619      	lsls	r1, r3, #24
 8004e62:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	4319      	orrs	r1, r3
 8004e6a:	4b69      	ldr	r3, [pc, #420]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e6c:	789b      	ldrb	r3, [r3, #2]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	430b      	orrs	r3, r1
 8004e72:	4967      	ldr	r1, [pc, #412]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e74:	78c9      	ldrb	r1, [r1, #3]
 8004e76:	430b      	orrs	r3, r1
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	4b63      	ldr	r3, [pc, #396]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	0619      	lsls	r1, r3, #24
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	4319      	orrs	r1, r3
 8004e8e:	4b60      	ldr	r3, [pc, #384]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e90:	789b      	ldrb	r3, [r3, #2]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	430b      	orrs	r3, r1
 8004e96:	495e      	ldr	r1, [pc, #376]	; (8005010 <MX_LWIP_Init+0x224>)
 8004e98:	78c9      	ldrb	r1, [r1, #3]
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	4b5a      	ldr	r3, [pc, #360]	; (8005010 <MX_LWIP_Init+0x224>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	0619      	lsls	r1, r3, #24
 8004eaa:	4b59      	ldr	r3, [pc, #356]	; (8005010 <MX_LWIP_Init+0x224>)
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	4319      	orrs	r1, r3
 8004eb2:	4b57      	ldr	r3, [pc, #348]	; (8005010 <MX_LWIP_Init+0x224>)
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	4955      	ldr	r1, [pc, #340]	; (8005010 <MX_LWIP_Init+0x224>)
 8004ebc:	78c9      	ldrb	r1, [r1, #3]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	0e1b      	lsrs	r3, r3, #24
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a55      	ldr	r2, [pc, #340]	; (800501c <MX_LWIP_Init+0x230>)
 8004ec6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ec8:	4b52      	ldr	r3, [pc, #328]	; (8005014 <MX_LWIP_Init+0x228>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	061a      	lsls	r2, r3, #24
 8004ece:	4b51      	ldr	r3, [pc, #324]	; (8005014 <MX_LWIP_Init+0x228>)
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <MX_LWIP_Init+0x228>)
 8004ed8:	789b      	ldrb	r3, [r3, #2]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4313      	orrs	r3, r2
 8004ede:	4a4d      	ldr	r2, [pc, #308]	; (8005014 <MX_LWIP_Init+0x228>)
 8004ee0:	78d2      	ldrb	r2, [r2, #3]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	061a      	lsls	r2, r3, #24
 8004ee6:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <MX_LWIP_Init+0x228>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	0619      	lsls	r1, r3, #24
 8004eec:	4b49      	ldr	r3, [pc, #292]	; (8005014 <MX_LWIP_Init+0x228>)
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	4319      	orrs	r1, r3
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <MX_LWIP_Init+0x228>)
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	430b      	orrs	r3, r1
 8004efc:	4945      	ldr	r1, [pc, #276]	; (8005014 <MX_LWIP_Init+0x228>)
 8004efe:	78c9      	ldrb	r1, [r1, #3]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	4b42      	ldr	r3, [pc, #264]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	0619      	lsls	r1, r3, #24
 8004f10:	4b40      	ldr	r3, [pc, #256]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	4319      	orrs	r1, r3
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f1a:	789b      	ldrb	r3, [r3, #2]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	493c      	ldr	r1, [pc, #240]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f22:	78c9      	ldrb	r1, [r1, #3]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	0a1b      	lsrs	r3, r3, #8
 8004f28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	0619      	lsls	r1, r3, #24
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	4319      	orrs	r1, r3
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f3e:	789b      	ldrb	r3, [r3, #2]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	430b      	orrs	r3, r1
 8004f44:	4933      	ldr	r1, [pc, #204]	; (8005014 <MX_LWIP_Init+0x228>)
 8004f46:	78c9      	ldrb	r1, [r1, #3]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	0e1b      	lsrs	r3, r3, #24
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <MX_LWIP_Init+0x234>)
 8004f50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f62:	789b      	ldrb	r3, [r3, #2]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	4313      	orrs	r3, r2
 8004f68:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f6a:	78d2      	ldrb	r2, [r2, #3]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	061a      	lsls	r2, r3, #24
 8004f70:	4b29      	ldr	r3, [pc, #164]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	0619      	lsls	r1, r3, #24
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	4319      	orrs	r1, r3
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	430b      	orrs	r3, r1
 8004f86:	4924      	ldr	r1, [pc, #144]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f88:	78c9      	ldrb	r1, [r1, #3]
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f92:	431a      	orrs	r2, r3
 8004f94:	4b20      	ldr	r3, [pc, #128]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	0619      	lsls	r1, r3, #24
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	4319      	orrs	r1, r3
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	491b      	ldr	r1, [pc, #108]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fac:	78c9      	ldrb	r1, [r1, #3]
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	4b17      	ldr	r3, [pc, #92]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	0619      	lsls	r1, r3, #24
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	4319      	orrs	r1, r3
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fc8:	789b      	ldrb	r3, [r3, #2]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	4912      	ldr	r1, [pc, #72]	; (8005018 <MX_LWIP_Init+0x22c>)
 8004fd0:	78c9      	ldrb	r1, [r1, #3]
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	0e1b      	lsrs	r3, r3, #24
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	4a12      	ldr	r2, [pc, #72]	; (8005024 <MX_LWIP_Init+0x238>)
 8004fda:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <MX_LWIP_Init+0x23c>)
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <MX_LWIP_Init+0x240>)
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <MX_LWIP_Init+0x238>)
 8004fea:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <MX_LWIP_Init+0x234>)
 8004fec:	490b      	ldr	r1, [pc, #44]	; (800501c <MX_LWIP_Init+0x230>)
 8004fee:	4810      	ldr	r0, [pc, #64]	; (8005030 <MX_LWIP_Init+0x244>)
 8004ff0:	f002 f868 	bl	80070c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ff4:	480e      	ldr	r0, [pc, #56]	; (8005030 <MX_LWIP_Init+0x244>)
 8004ff6:	f002 fa17 	bl	8007428 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004ffa:	480d      	ldr	r0, [pc, #52]	; (8005030 <MX_LWIP_Init+0x244>)
 8004ffc:	f002 fa24 	bl	8007448 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005000:	490c      	ldr	r1, [pc, #48]	; (8005034 <MX_LWIP_Init+0x248>)
 8005002:	480b      	ldr	r0, [pc, #44]	; (8005030 <MX_LWIP_Init+0x244>)
 8005004:	f002 fb22 	bl	800764c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	200007cc 	.word	0x200007cc
 8005014:	200007d0 	.word	0x200007d0
 8005018:	200007d4 	.word	0x200007d4
 800501c:	200007c0 	.word	0x200007c0
 8005020:	200007c4 	.word	0x200007c4
 8005024:	200007c8 	.word	0x200007c8
 8005028:	08010d05 	.word	0x08010d05
 800502c:	0800539d 	.word	0x0800539d
 8005030:	2000078c 	.word	0x2000078c
 8005034:	08005089 	.word	0x08005089

08005038 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005040:	f7fc f906 	bl	8001250 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <Ethernet_Link_Periodic_Handle+0x30>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b63      	cmp	r3, #99	; 0x63
 800504e:	d907      	bls.n	8005060 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005050:	f7fc f8fe 	bl	8001250 <HAL_GetTick>
 8005054:	4603      	mov	r3, r0
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <Ethernet_Link_Periodic_Handle+0x30>)
 8005058:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 faf4 	bl	8005648 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000788 	.word	0x20000788

0800506c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005070:	4804      	ldr	r0, [pc, #16]	; (8005084 <MX_LWIP_Process+0x18>)
 8005072:	f000 f973 	bl	800535c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005076:	f009 fa59 	bl	800e52c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <MX_LWIP_Process+0x18>)
 800507c:	f7ff ffdc 	bl	8005038 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000078c 	.word	0x2000078c

08005088 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <SCB_InvalidateDCache_by_Addr>:
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80050ae:	2320      	movs	r3, #32
 80050b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050b2:	f3bf 8f4f 	dsb	sy
}
 80050b6:	bf00      	nop
    while (op_size > 0) {
 80050b8:	e00b      	b.n	80050d2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <SCB_InvalidateDCache_by_Addr+0x54>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dcf0      	bgt.n	80050ba <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80050d8:	f3bf 8f4f 	dsb	sy
}
 80050dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050de:	f3bf 8f6f 	isb	sy
}
 80050e2:	bf00      	nop
}
 80050e4:	bf00      	nop
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005100:	4b40      	ldr	r3, [pc, #256]	; (8005204 <low_level_init+0x110>)
 8005102:	4a41      	ldr	r2, [pc, #260]	; (8005208 <low_level_init+0x114>)
 8005104:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005106:	2300      	movs	r3, #0
 8005108:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800510e:	23e1      	movs	r3, #225	; 0xe1
 8005110:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005112:	2300      	movs	r3, #0
 8005114:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005116:	2300      	movs	r3, #0
 8005118:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800511a:	2300      	movs	r3, #0
 800511c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800511e:	4a39      	ldr	r2, [pc, #228]	; (8005204 <low_level_init+0x110>)
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005126:	4b37      	ldr	r3, [pc, #220]	; (8005204 <low_level_init+0x110>)
 8005128:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800512c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800512e:	4b35      	ldr	r3, [pc, #212]	; (8005204 <low_level_init+0x110>)
 8005130:	4a36      	ldr	r2, [pc, #216]	; (800520c <low_level_init+0x118>)
 8005132:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005134:	4b33      	ldr	r3, [pc, #204]	; (8005204 <low_level_init+0x110>)
 8005136:	4a36      	ldr	r2, [pc, #216]	; (8005210 <low_level_init+0x11c>)
 8005138:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800513a:	4b32      	ldr	r3, [pc, #200]	; (8005204 <low_level_init+0x110>)
 800513c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005140:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005142:	4830      	ldr	r0, [pc, #192]	; (8005204 <low_level_init+0x110>)
 8005144:	f7fc f99a 	bl	800147c <HAL_ETH_Init>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800514c:	2238      	movs	r2, #56	; 0x38
 800514e:	2100      	movs	r1, #0
 8005150:	4830      	ldr	r0, [pc, #192]	; (8005214 <low_level_init+0x120>)
 8005152:	f00c f812 	bl	801117a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <low_level_init+0x120>)
 8005158:	2221      	movs	r2, #33	; 0x21
 800515a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800515c:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <low_level_init+0x120>)
 800515e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005162:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005164:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <low_level_init+0x120>)
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800516a:	482b      	ldr	r0, [pc, #172]	; (8005218 <low_level_init+0x124>)
 800516c:	f001 fe72 	bl	8006e54 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2206      	movs	r2, #6
 8005174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005178:	4b22      	ldr	r3, [pc, #136]	; (8005204 <low_level_init+0x110>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <low_level_init+0x110>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	785a      	ldrb	r2, [r3, #1]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005190:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <low_level_init+0x110>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	789a      	ldrb	r2, [r3, #2]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <low_level_init+0x110>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	78da      	ldrb	r2, [r3, #3]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <low_level_init+0x110>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	791a      	ldrb	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <low_level_init+0x110>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	795a      	ldrb	r2, [r3, #5]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051c6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051ce:	f043 030a 	orr.w	r3, r3, #10
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80051da:	4910      	ldr	r1, [pc, #64]	; (800521c <low_level_init+0x128>)
 80051dc:	4810      	ldr	r0, [pc, #64]	; (8005220 <low_level_init+0x12c>)
 80051de:	f7fb fe84 	bl	8000eea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80051e2:	480f      	ldr	r0, [pc, #60]	; (8005220 <low_level_init+0x12c>)
 80051e4:	f7fb feb3 	bl	8000f4e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa2a 	bl	8005648 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80051f4:	e001      	b.n	80051fa <low_level_init+0x106>
    Error_Handler();
 80051f6:	f7fb fc45 	bl	8000a84 <Error_Handler>
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20005164 	.word	0x20005164
 8005208:	40028000 	.word	0x40028000
 800520c:	20000128 	.word	0x20000128
 8005210:	20000088 	.word	0x20000088
 8005214:	20005214 	.word	0x20005214
 8005218:	08014ba8 	.word	0x08014ba8
 800521c:	2000000c 	.word	0x2000000c
 8005220:	2000524c 	.word	0x2000524c

08005224 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b092      	sub	sp, #72	; 0x48
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	2230      	movs	r2, #48	; 0x30
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f00b ff98 	bl	801117a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800524a:	f107 030c 	add.w	r3, r7, #12
 800524e:	2230      	movs	r2, #48	; 0x30
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f00b ff91 	bl	801117a <memset>

  for(q = p; q != NULL; q = q->next)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	e045      	b.n	80052ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	2b03      	cmp	r3, #3
 8005262:	d902      	bls.n	800526a <low_level_output+0x46>
      return ERR_IF;
 8005264:	f06f 030b 	mvn.w	r3, #11
 8005268:	e055      	b.n	8005316 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800526a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	3348      	adds	r3, #72	; 0x48
 800527a:	443b      	add	r3, r7
 800527c:	3b3c      	subs	r3, #60	; 0x3c
 800527e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	895b      	ldrh	r3, [r3, #10]
 8005284:	4619      	mov	r1, r3
 8005286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005288:	4613      	mov	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	3348      	adds	r3, #72	; 0x48
 8005292:	443b      	add	r3, r7
 8005294:	3b38      	subs	r3, #56	; 0x38
 8005296:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800529e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	f107 000c 	add.w	r0, r7, #12
 80052a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a8:	460b      	mov	r3, r1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	440b      	add	r3, r1
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	18c1      	adds	r1, r0, r3
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	3348      	adds	r3, #72	; 0x48
 80052bc:	443b      	add	r3, r7
 80052be:	3b34      	subs	r3, #52	; 0x34
 80052c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3348      	adds	r3, #72	; 0x48
 80052d6:	443b      	add	r3, r7
 80052d8:	3b34      	subs	r3, #52	; 0x34
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	3301      	adds	r3, #1
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1b6      	bne.n	800525e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	891b      	ldrh	r3, [r3, #8]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <low_level_output+0xfc>)
 80052f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <low_level_output+0xfc>)
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <low_level_output+0xfc>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005308:	2214      	movs	r2, #20
 800530a:	4905      	ldr	r1, [pc, #20]	; (8005320 <low_level_output+0xfc>)
 800530c:	4805      	ldr	r0, [pc, #20]	; (8005324 <low_level_output+0x100>)
 800530e:	f7fc f9e9 	bl	80016e4 <HAL_ETH_Transmit>

  return errval;
 8005312:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005316:	4618      	mov	r0, r3
 8005318:	3748      	adds	r7, #72	; 0x48
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20005214 	.word	0x20005214
 8005324:	20005164 	.word	0x20005164

08005328 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <low_level_input+0x2c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800533c:	f107 030c 	add.w	r3, r7, #12
 8005340:	4619      	mov	r1, r3
 8005342:	4805      	ldr	r0, [pc, #20]	; (8005358 <low_level_input+0x30>)
 8005344:	f7fc fa62 	bl	800180c <HAL_ETH_ReadData>
  }

  return p;
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20005160 	.word	0x20005160
 8005358:	20005164 	.word	0x20005164

0800535c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffdd 	bl	8005328 <low_level_input>
 800536e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	4798      	blx	r3
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f002 fce0 	bl	8007d4c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ea      	bne.n	8005368 <ethernetif_input+0xc>
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <ethernetif_init+0x1c>
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <ethernetif_init+0x48>)
 80053ac:	f240 127b 	movw	r2, #379	; 0x17b
 80053b0:	490d      	ldr	r1, [pc, #52]	; (80053e8 <ethernetif_init+0x4c>)
 80053b2:	480e      	ldr	r0, [pc, #56]	; (80053ec <ethernetif_init+0x50>)
 80053b4:	f00b fe7c 	bl	80110b0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2273      	movs	r2, #115	; 0x73
 80053bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2274      	movs	r2, #116	; 0x74
 80053c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <ethernetif_init+0x54>)
 80053cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <ethernetif_init+0x58>)
 80053d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fe8d 	bl	80050f4 <low_level_init>

  return ERR_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	08011f64 	.word	0x08011f64
 80053e8:	08011f80 	.word	0x08011f80
 80053ec:	08011f90 	.word	0x08011f90
 80053f0:	0800f1bd 	.word	0x0800f1bd
 80053f4:	08005225 	.word	0x08005225

080053f8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	4807      	ldr	r0, [pc, #28]	; (8005424 <pbuf_free_custom+0x2c>)
 8005408:	f001 fe06 	bl	8007018 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <pbuf_free_custom+0x30>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d102      	bne.n	800541a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <pbuf_free_custom+0x30>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
  }
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	08014ba8 	.word	0x08014ba8
 8005428:	20005160 	.word	0x20005160

0800542c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005430:	f7fb ff0e 	bl	8001250 <HAL_GetTick>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	; 0x38
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a4e      	ldr	r2, [pc, #312]	; (8005594 <HAL_ETH_MspInit+0x158>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f040 8096 	bne.w	800558c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005460:	4b4d      	ldr	r3, [pc, #308]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	4a4c      	ldr	r2, [pc, #304]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 8005466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800546a:	6313      	str	r3, [r2, #48]	; 0x30
 800546c:	4b4a      	ldr	r3, [pc, #296]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	623b      	str	r3, [r7, #32]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	4b47      	ldr	r3, [pc, #284]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4a46      	ldr	r2, [pc, #280]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 800547e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005482:	6313      	str	r3, [r2, #48]	; 0x30
 8005484:	4b44      	ldr	r3, [pc, #272]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4b41      	ldr	r3, [pc, #260]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4a40      	ldr	r2, [pc, #256]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 8005496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800549a:	6313      	str	r3, [r2, #48]	; 0x30
 800549c:	4b3e      	ldr	r3, [pc, #248]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a8:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	6313      	str	r3, [r2, #48]	; 0x30
 80054b4:	4b38      	ldr	r3, [pc, #224]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c0:	4b35      	ldr	r3, [pc, #212]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4a34      	ldr	r2, [pc, #208]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6313      	str	r3, [r2, #48]	; 0x30
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d8:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054de:	f043 0302 	orr.w	r3, r3, #2
 80054e2:	6313      	str	r3, [r2, #48]	; 0x30
 80054e4:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80054f0:	4b29      	ldr	r3, [pc, #164]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054fa:	6313      	str	r3, [r2, #48]	; 0x30
 80054fc:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_ETH_MspInit+0x15c>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005508:	2332      	movs	r3, #50	; 0x32
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550c:	2302      	movs	r3, #2
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005514:	2303      	movs	r3, #3
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005518:	230b      	movs	r3, #11
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005520:	4619      	mov	r1, r3
 8005522:	481e      	ldr	r0, [pc, #120]	; (800559c <HAL_ETH_MspInit+0x160>)
 8005524:	f7fd f89c 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005528:	2386      	movs	r3, #134	; 0x86
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005534:	2303      	movs	r3, #3
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005538:	230b      	movs	r3, #11
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005540:	4619      	mov	r1, r3
 8005542:	4817      	ldr	r0, [pc, #92]	; (80055a0 <HAL_ETH_MspInit+0x164>)
 8005544:	f7fd f88c 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554e:	2302      	movs	r3, #2
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005552:	2300      	movs	r3, #0
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005556:	2303      	movs	r3, #3
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800555a:	230b      	movs	r3, #11
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800555e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005562:	4619      	mov	r1, r3
 8005564:	480f      	ldr	r0, [pc, #60]	; (80055a4 <HAL_ETH_MspInit+0x168>)
 8005566:	f7fd f87b 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800556a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005570:	2302      	movs	r3, #2
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005574:	2300      	movs	r3, #0
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005578:	2303      	movs	r3, #3
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800557c:	230b      	movs	r3, #11
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005584:	4619      	mov	r1, r3
 8005586:	4808      	ldr	r0, [pc, #32]	; (80055a8 <HAL_ETH_MspInit+0x16c>)
 8005588:	f7fd f86a 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800558c:	bf00      	nop
 800558e:	3738      	adds	r7, #56	; 0x38
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40028000 	.word	0x40028000
 8005598:	40023800 	.word	0x40023800
 800559c:	40020800 	.word	0x40020800
 80055a0:	40020000 	.word	0x40020000
 80055a4:	40020400 	.word	0x40020400
 80055a8:	40021800 	.word	0x40021800

080055ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <ETH_PHY_IO_Init+0x10>)
 80055b2:	f7fc fbfb 	bl	8001dac <HAL_ETH_SetMDIOClockRange>

  return 0;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20005164 	.word	0x20005164

080055c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	4807      	ldr	r0, [pc, #28]	; (8005600 <ETH_PHY_IO_ReadReg+0x30>)
 80055e4:	f7fc fa4a 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	e000      	b.n	80055f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20005164 	.word	0x20005164

08005604 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	68f9      	ldr	r1, [r7, #12]
 8005616:	4807      	ldr	r0, [pc, #28]	; (8005634 <ETH_PHY_IO_WriteReg+0x30>)
 8005618:	f7fc fa7b 	bl	8001b12 <HAL_ETH_WritePHYRegister>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	e000      	b.n	800562a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20005164 	.word	0x20005164

08005638 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800563c:	f7fb fe08 	bl	8001250 <HAL_GetTick>
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b0a0      	sub	sp, #128	; 0x80
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	2264      	movs	r2, #100	; 0x64
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f00b fd8e 	bl	801117a <memset>
  int32_t PHYLinkState = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005666:	2300      	movs	r3, #0
 8005668:	67bb      	str	r3, [r7, #120]	; 0x78
 800566a:	2300      	movs	r3, #0
 800566c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800566e:	483a      	ldr	r0, [pc, #232]	; (8005758 <ethernet_link_check_state+0x110>)
 8005670:	f7fb fd15 	bl	800109e <LAN8742_GetLinkState>
 8005674:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <ethernet_link_check_state+0x5a>
 8005688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800568a:	2b01      	cmp	r3, #1
 800568c:	dc09      	bgt.n	80056a2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800568e:	4833      	ldr	r0, [pc, #204]	; (800575c <ethernet_link_check_state+0x114>)
 8005690:	f7fb ffcf 	bl	8001632 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 ff43 	bl	8007520 <netif_set_down>
    netif_set_link_down(netif);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 ffa6 	bl	80075ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80056a0:	e055      	b.n	800574e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d14e      	bne.n	800574e <ethernet_link_check_state+0x106>
 80056b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	dd4b      	ble.n	800574e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80056b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b8:	3b02      	subs	r3, #2
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d82a      	bhi.n	8005714 <ethernet_link_check_state+0xcc>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <ethernet_link_check_state+0x7c>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056e7 	.word	0x080056e7
 80056cc:	080056f7 	.word	0x080056f7
 80056d0:	08005707 	.word	0x08005707
      duplex = ETH_FULLDUPLEX_MODE;
 80056d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80056da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056e0:	2301      	movs	r3, #1
 80056e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056e4:	e017      	b.n	8005716 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80056ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056f4:	e00f      	b.n	8005716 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80056f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056fa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80056fc:	2300      	movs	r3, #0
 80056fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005700:	2301      	movs	r3, #1
 8005702:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005704:	e007      	b.n	8005716 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005706:	2300      	movs	r3, #0
 8005708:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800570a:	2300      	movs	r3, #0
 800570c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005712:	e000      	b.n	8005716 <ethernet_link_check_state+0xce>
      break;
 8005714:	bf00      	nop
    if(linkchanged)
 8005716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d018      	beq.n	800574e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4619      	mov	r1, r3
 8005722:	480e      	ldr	r0, [pc, #56]	; (800575c <ethernet_link_check_state+0x114>)
 8005724:	f7fc fa3e 	bl	8001ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800572c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005730:	f107 030c 	add.w	r3, r7, #12
 8005734:	4619      	mov	r1, r3
 8005736:	4809      	ldr	r0, [pc, #36]	; (800575c <ethernet_link_check_state+0x114>)
 8005738:	f7fc fb1e 	bl	8001d78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800573c:	4807      	ldr	r0, [pc, #28]	; (800575c <ethernet_link_check_state+0x114>)
 800573e:	f7fb ff19 	bl	8001574 <HAL_ETH_Start>
      netif_set_up(netif);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fe80 	bl	8007448 <netif_set_up>
      netif_set_link_up(netif);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 ff1b 	bl	8007584 <netif_set_link_up>
}
 800574e:	bf00      	nop
 8005750:	3780      	adds	r7, #128	; 0x80
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	2000524c 	.word	0x2000524c
 800575c:	20005164 	.word	0x20005164

08005760 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005768:	4812      	ldr	r0, [pc, #72]	; (80057b4 <HAL_ETH_RxAllocateCallback+0x54>)
 800576a:	f001 fbe7 	bl	8006f3c <memp_malloc_pool>
 800576e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d014      	beq.n	80057a0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f103 0220 	add.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a0d      	ldr	r2, [pc, #52]	; (80057b8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005784:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800578e:	9201      	str	r2, [sp, #4]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2241      	movs	r2, #65	; 0x41
 8005796:	2100      	movs	r1, #0
 8005798:	2000      	movs	r0, #0
 800579a:	f002 f91d 	bl	80079d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800579e:	e005      	b.n	80057ac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_ETH_RxAllocateCallback+0x5c>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	08014ba8 	.word	0x08014ba8
 80057b8:	080053f9 	.word	0x080053f9
 80057bc:	20005160 	.word	0x20005160

080057c0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3b20      	subs	r3, #32
 80057de:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2200      	movs	r2, #0
 80057ea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e003      	b.n	800580a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e009      	b.n	800582c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	891a      	ldrh	r2, [r3, #8]
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	4413      	add	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f2      	bne.n	8005818 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fc30 	bl	800509c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800583c:	bf00      	nop
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <fs_open+0x16>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <fs_open+0x1c>
    return ERR_ARG;
 800585a:	f06f 030f 	mvn.w	r3, #15
 800585e:	e028      	b.n	80058b2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <fs_open+0x78>)
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e020      	b.n	80058a8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4619      	mov	r1, r3
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f7fa fce7 	bl	8000240 <strcmp>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d114      	bne.n	80058a2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7c1a      	ldrb	r2, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e007      	b.n	80058b2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1db      	bne.n	8005866 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80058ae:	f06f 0305 	mvn.w	r3, #5
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	08015504 	.word	0x08015504

080058c0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	1ad3      	subs	r3, r2, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80058fa:	22ac      	movs	r2, #172	; 0xac
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f00b fc3b 	bl	801117a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005912:	20ac      	movs	r0, #172	; 0xac
 8005914:	f001 f9a4 	bl	8006c60 <mem_malloc>
 8005918:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <http_state_alloc+0x1a>
    http_state_init(ret);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ffe6 	bl	80058f2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005926:	687b      	ldr	r3, [r7, #4]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ffbb 	bl	80058c0 <fs_close>
    hs->handle = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4618      	mov	r0, r3
 800595e:	f002 f9f5 	bl	8007d4c <pbuf_free>
    hs->req = NULL;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <http_state_free+0x1a>
    http_state_eof(hs);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffd6 	bl	8005930 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 f805 	bl	8006994 <mem_free>
  }
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <http_write+0x22>
 80059a8:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <http_write+0xc8>)
 80059aa:	f240 2219 	movw	r2, #537	; 0x219
 80059ae:	492c      	ldr	r1, [pc, #176]	; (8005a60 <http_write+0xcc>)
 80059b0:	482c      	ldr	r0, [pc, #176]	; (8005a64 <http_write+0xd0>)
 80059b2:	f00b fb7d 	bl	80110b0 <iprintf>
  len = *length;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <http_write+0x32>
    return ERR_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e045      	b.n	8005a52 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80059cc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80059ce:	8aba      	ldrh	r2, [r7, #20]
 80059d0:	8afb      	ldrh	r3, [r7, #22]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d201      	bcs.n	80059da <http_write+0x46>
    len = max_len;
 80059d6:	8abb      	ldrh	r3, [r7, #20]
 80059d8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80059e2:	8afa      	ldrh	r2, [r7, #22]
 80059e4:	8abb      	ldrh	r3, [r7, #20]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d901      	bls.n	80059ee <http_write+0x5a>
    len = max_len;
 80059ea:	8abb      	ldrh	r3, [r7, #20]
 80059ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	8afa      	ldrh	r2, [r7, #22]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f006 ff31 	bl	800c85c <tcp_write>
 80059fa:	4603      	mov	r3, r0
 80059fc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80059fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d10f      	bne.n	8005a28 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d902      	bls.n	8005a22 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	82fb      	strh	r3, [r7, #22]
 8005a20:	e002      	b.n	8005a28 <http_write+0x94>
      } else {
        len /= 2;
 8005a22:	8afb      	ldrh	r3, [r7, #22]
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005a28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d102      	bne.n	8005a38 <http_write+0xa4>
 8005a32:	8afb      	ldrh	r3, [r7, #22]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d8da      	bhi.n	80059ee <http_write+0x5a>

  if (err == ERR_OK) {
 8005a38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8afa      	ldrh	r2, [r7, #22]
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005a4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08011ff8 	.word	0x08011ff8
 8005a60:	08012030 	.word	0x08012030
 8005a64:	08012040 	.word	0x08012040

08005a68 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005a76:	2100      	movs	r1, #0
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f003 ffad 	bl	80099d8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8005a7e:	2100      	movs	r1, #0
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f003 ffbb 	bl	80099fc <tcp_recv>
  altcp_err(pcb, NULL);
 8005a86:	2100      	movs	r1, #0
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f003 fffb 	bl	8009a84 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2100      	movs	r1, #0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f004 f830 	bl	8009af8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005a98:	2100      	movs	r1, #0
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f003 ffd0 	bl	8009a40 <tcp_sent>
  if (hs != NULL) {
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005aa6:	68b8      	ldr	r0, [r7, #8]
 8005aa8:	f7ff ff62 	bl	8005970 <http_state_free>
  }

  if (abort_conn) {
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f002 fed2 	bl	800885c <tcp_abort>
    return ERR_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e00f      	b.n	8005adc <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f002 fde3 	bl	8008688 <tcp_close>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005ace:	2204      	movs	r2, #4
 8005ad0:	4904      	ldr	r1, [pc, #16]	; (8005ae4 <http_close_or_abort_conn+0x7c>)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f004 f810 	bl	8009af8 <tcp_poll>
  }
  return err;
 8005ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	080062f7 	.word	0x080062f7

08005ae8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005af2:	2200      	movs	r2, #0
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff ffb6 	bl	8005a68 <http_close_or_abort_conn>
 8005afc:	4603      	mov	r3, r0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ffe8 	bl	8005ae8 <http_close_conn>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <extract_uri_parameters+0x18>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <extract_uri_parameters+0x1c>
    return (0);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e04e      	b.n	8005bda <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	e042      	b.n	8005bcc <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	330a      	adds	r3, #10
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005b58:	2126      	movs	r1, #38	; 0x26
 8005b5a:	6978      	ldr	r0, [r7, #20]
 8005b5c:	f00b fb15 	bl	801118a <strchr>
 8005b60:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <extract_uri_parameters+0x56>
      *pair = '\0';
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
      pair++;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	3301      	adds	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e00c      	b.n	8005b90 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005b76:	2120      	movs	r1, #32
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f00b fb06 	bl	801118a <strchr>
 8005b7e:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <extract_uri_parameters+0x6c>
        *pair = '\0';
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005b90:	213d      	movs	r1, #61	; 0x3d
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f00b faf9 	bl	801118a <strchr>
 8005b98:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <extract_uri_parameters+0x98>
      *equals = '\0';
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	331a      	adds	r3, #26
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e006      	b.n	8005bc6 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	331a      	adds	r3, #26
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b0f      	cmp	r3, #15
 8005bd0:	dc02      	bgt.n	8005bd8 <extract_uri_parameters+0xb8>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1b6      	bne.n	8005b46 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005bd8:	693b      	ldr	r3, [r7, #16]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff84 	bl	8005b06 <http_eof>
    return 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e016      	b.n	8005c30 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fe64 	bl	80058d4 <fs_bytes_left>
 8005c0c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dc05      	bgt.n	8005c20 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ff75 	bl	8005b06 <http_eof>
    return 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e007      	b.n	8005c30 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <http_check_eof+0x54>)
 8005c22:	f240 429d 	movw	r2, #1181	; 0x49d
 8005c26:	4905      	ldr	r1, [pc, #20]	; (8005c3c <http_check_eof+0x58>)
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <http_check_eof+0x5c>)
 8005c2a:	f00b fa41 	bl	80110b0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005c2e:	2301      	movs	r3, #1
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08011ff8 	.word	0x08011ff8
 8005c3c:	08012068 	.word	0x08012068
 8005c40:	08012040 	.word	0x08012040

08005c44 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d803      	bhi.n	8005c66 <http_send_data_nonssi+0x22>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	e001      	b.n	8005c6a <http_send_data_nonssi+0x26>
 8005c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c6a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6999      	ldr	r1, [r3, #24]
 8005c70:	f107 020c 	add.w	r2, r7, #12
 8005c74:	2300      	movs	r3, #0
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fe8c 	bl	8005994 <http_write>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10d      	bne.n	8005ca4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	89ba      	ldrh	r2, [r7, #12]
 8005c92:	441a      	add	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	89ba      	ldrh	r2, [r7, #12]
 8005c9e:	1a9a      	subs	r2, r3, r2
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <http_send+0x18>
    return 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e025      	b.n	8005d12 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff87 	bl	8005be4 <http_check_eof>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <http_send+0x32>
      return 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e018      	b.n	8005d12 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ffae 	bl	8005c44 <http_send_data_nonssi>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <http_send+0x62>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fdeb 	bl	80058d4 <fs_bytes_left>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dc05      	bgt.n	8005d10 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fefd 	bl	8005b06 <http_eof>
    return 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <http_get_404_file+0x80>)
 8005d2a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7ff fd85 	bl	8005844 <fs_open>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d024      	beq.n	8005d90 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <http_get_404_file+0x84>)
 8005d4a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7ff fd75 	bl	8005844 <fs_open>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d014      	beq.n	8005d90 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <http_get_404_file+0x88>)
 8005d6a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7ff fd65 	bl	8005844 <fs_open>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
        return NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005d90:	687b      	ldr	r3, [r7, #4]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080120a0 	.word	0x080120a0
 8005da0:	080120ac 	.word	0x080120ac
 8005da4:	080120b8 	.word	0x080120b8

08005da8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	; 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <http_parse_request+0x24>
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <http_parse_request+0x1ac>)
 8005dc0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005dc4:	4964      	ldr	r1, [pc, #400]	; (8005f58 <http_parse_request+0x1b0>)
 8005dc6:	4865      	ldr	r0, [pc, #404]	; (8005f5c <http_parse_request+0x1b4>)
 8005dc8:	f00b f972 	bl	80110b0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <http_parse_request+0x38>
 8005dd2:	4b60      	ldr	r3, [pc, #384]	; (8005f54 <http_parse_request+0x1ac>)
 8005dd4:	f240 72af 	movw	r2, #1967	; 0x7af
 8005dd8:	4961      	ldr	r1, [pc, #388]	; (8005f60 <http_parse_request+0x1b8>)
 8005dda:	4860      	ldr	r0, [pc, #384]	; (8005f5c <http_parse_request+0x1b4>)
 8005ddc:	f00b f968 	bl	80110b0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <http_parse_request+0x48>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005df0:	f06f 0307 	mvn.w	r3, #7
 8005df4:	e0a9      	b.n	8005f4a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	621a      	str	r2, [r3, #32]
 8005e04:	e005      	b.n	8005e12 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f002 f85f 	bl	8007ed0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e14:	f002 f83a 	bl	8007e8c <pbuf_ref>

  if (hs->req->next != NULL) {
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	891b      	ldrh	r3, [r3, #8]
 8005e28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	bf28      	it	cs
 8005e30:	4613      	movcs	r3, r2
 8005e32:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6a18      	ldr	r0, [r3, #32]
 8005e38:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4949      	ldr	r1, [pc, #292]	; (8005f64 <http_parse_request+0x1bc>)
 8005e3e:	f002 f96f 	bl	8008120 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005e42:	4b48      	ldr	r3, [pc, #288]	; (8005f64 <http_parse_request+0x1bc>)
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	e005      	b.n	8005e54 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	895b      	ldrh	r3, [r3, #10]
 8005e52:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005e54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d962      	bls.n	8005f20 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005e5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4942      	ldr	r1, [pc, #264]	; (8005f68 <http_parse_request+0x1c0>)
 8005e60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e62:	f000 fc0d 	bl	8006680 <lwip_strnstr>
 8005e66:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d058      	beq.n	8005f20 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005e72:	2204      	movs	r2, #4
 8005e74:	493d      	ldr	r1, [pc, #244]	; (8005f6c <http_parse_request+0x1c4>)
 8005e76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e78:	f00b f994 	bl	80111a4 <strncmp>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d116      	bne.n	8005eb0 <http_parse_request+0x108>
        sp1 = data + 3;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	3303      	adds	r3, #3
 8005e86:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	8b7a      	ldrh	r2, [r7, #26]
 8005e9e:	4934      	ldr	r1, [pc, #208]	; (8005f70 <http_parse_request+0x1c8>)
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fbed 	bl	8006680 <lwip_strnstr>
 8005ea6:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d111      	bne.n	8005ed2 <http_parse_request+0x12a>
 8005eae:	e006      	b.n	8005ebe <http_parse_request+0x116>
        data[4] = 0;
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005eb8:	f06f 030f 	mvn.w	r3, #15
 8005ebc:	e045      	b.n	8005f4a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	8b7a      	ldrh	r2, [r7, #26]
 8005ec4:	4928      	ldr	r1, [pc, #160]	; (8005f68 <http_parse_request+0x1c0>)
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fbda 	bl	8006680 <lwip_strnstr>
 8005ecc:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01e      	beq.n	8005f20 <http_parse_request+0x178>
 8005ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d91a      	bls.n	8005f20 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005eea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005eec:	461a      	mov	r2, r3
 8005eee:	4921      	ldr	r1, [pc, #132]	; (8005f74 <http_parse_request+0x1cc>)
 8005ef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ef2:	f000 fbc5 	bl	8006680 <lwip_strnstr>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	3301      	adds	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005f08:	8b3b      	ldrh	r3, [r7, #24]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	68b8      	ldr	r0, [r7, #8]
 8005f18:	f000 f82e 	bl	8005f78 <http_find_file>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	e014      	b.n	8005f4a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 ff99 	bl	8007e5c <pbuf_clen>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	891b      	ldrh	r3, [r3, #8]
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d205      	bcs.n	8005f46 <http_parse_request+0x19e>
 8005f3a:	8a7b      	ldrh	r3, [r7, #18]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d802      	bhi.n	8005f46 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005f40:	f06f 0304 	mvn.w	r3, #4
 8005f44:	e001      	b.n	8005f4a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005f46:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3738      	adds	r7, #56	; 0x38
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	08011ff8 	.word	0x08011ff8
 8005f58:	080120c4 	.word	0x080120c4
 8005f5c:	08012040 	.word	0x08012040
 8005f60:	080120d0 	.word	0x080120d0
 8005f64:	2000526c 	.word	0x2000526c
 8005f68:	080120dc 	.word	0x080120dc
 8005f6c:	080120e0 	.word	0x080120e0
 8005f70:	080120e8 	.word	0x080120e8
 8005f74:	080120ec 	.word	0x080120ec

08005f78 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b093      	sub	sp, #76	; 0x4c
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fa f95d 	bl	8000254 <strlen>
 8005f9a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d06b      	beq.n	800607a <http_find_file+0x102>
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4413      	add	r3, r2
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b2f      	cmp	r3, #47	; 0x2f
 8005fae:	d164      	bne.n	800607a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005fb0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005fb2:	4a72      	ldr	r2, [pc, #456]	; (800617c <http_find_file+0x204>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d102      	bne.n	8005fbe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d15d      	bne.n	800607a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	2b3f      	cmp	r3, #63	; 0x3f
 8005fc4:	bf28      	it	cs
 8005fc6:	233f      	movcs	r3, #63	; 0x3f
 8005fc8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4869      	ldr	r0, [pc, #420]	; (800617c <http_find_file+0x204>)
 8005fd8:	f00b f963 	bl	80112a2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005fdc:	4a67      	ldr	r2, [pc, #412]	; (800617c <http_find_file+0x204>)
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fea:	e043      	b.n	8006074 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d028      	beq.n	8006044 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005ff8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01e      	beq.n	800603e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006000:	4a5f      	ldr	r2, [pc, #380]	; (8006180 <http_find_file+0x208>)
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa f923 	bl	8000254 <strlen>
 800600e:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4293      	cmp	r3, r2
 8006016:	bf28      	it	cs
 8006018:	4613      	movcs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	4a57      	ldr	r2, [pc, #348]	; (800617c <http_find_file+0x204>)
 8006020:	1898      	adds	r0, r3, r2
 8006022:	4a57      	ldr	r2, [pc, #348]	; (8006180 <http_find_file+0x208>)
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4619      	mov	r1, r3
 800602e:	f00b f938 	bl	80112a2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	4a50      	ldr	r2, [pc, #320]	; (800617c <http_find_file+0x204>)
 800603a:	2100      	movs	r1, #0
 800603c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800603e:	4b4f      	ldr	r3, [pc, #316]	; (800617c <http_find_file+0x204>)
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006042:	e004      	b.n	800604e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006044:	4a4e      	ldr	r2, [pc, #312]	; (8006180 <http_find_file+0x208>)
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fbf6 	bl	8005844 <fs_open>
 8006058:	4603      	mov	r3, r0
 800605a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800605c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <http_find_file+0xf6>
        uri = file_name;
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800606c:	e005      	b.n	800607a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	3301      	adds	r3, #1
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b04      	cmp	r3, #4
 8006078:	d9b8      	bls.n	8005fec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d161      	bne.n	8006144 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	213f      	movs	r1, #63	; 0x3f
 8006084:	4618      	mov	r0, r3
 8006086:	f00b f880 	bl	801118a <strchr>
 800608a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
      params++;
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	3301      	adds	r3, #1
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800609e:	4b39      	ldr	r3, [pc, #228]	; (8006184 <http_find_file+0x20c>)
 80060a0:	f04f 32ff 	mov.w	r2, #4294967295
 80060a4:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <http_find_file+0x210>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d034      	beq.n	8006118 <http_find_file+0x1a0>
 80060ae:	4b37      	ldr	r3, [pc, #220]	; (800618c <http_find_file+0x214>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d030      	beq.n	8006118 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80060b6:	2300      	movs	r3, #0
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ba:	e028      	b.n	800610e <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80060bc:	68b8      	ldr	r0, [r7, #8]
 80060be:	4b33      	ldr	r3, [pc, #204]	; (800618c <http_find_file+0x214>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fa f8b8 	bl	8000240 <strcmp>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d118      	bne.n	8006108 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80060d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fd21 	bl	8005b20 <extract_uri_parameters>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a28      	ldr	r2, [pc, #160]	; (8006184 <http_find_file+0x20c>)
 80060e2:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80060e4:	4b29      	ldr	r3, [pc, #164]	; (800618c <http_find_file+0x214>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4413      	add	r3, r2
 80060ee:	685c      	ldr	r4, [r3, #4]
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <http_find_file+0x20c>)
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80060fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006100:	47a0      	blx	r4
 8006102:	4603      	mov	r3, r0
 8006104:	60bb      	str	r3, [r7, #8]
          break;
 8006106:	e007      	b.n	8006118 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	3301      	adds	r3, #1
 800610c:	633b      	str	r3, [r7, #48]	; 0x30
 800610e:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <http_find_file+0x210>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006114:	429a      	cmp	r2, r3
 8006116:	dbd1      	blt.n	80060bc <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4611      	mov	r1, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fb90 	bl	8005844 <fs_open>
 8006124:	4603      	mov	r3, r0
 8006126:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006128:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <http_find_file+0x1be>
      file = &hs->file_handle;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
 8006134:	e006      	b.n	8006144 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4619      	mov	r1, r3
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fded 	bl	8005d1c <http_get_404_file>
 8006142:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4619      	mov	r1, r3
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fde3 	bl	8005d1c <http_get_404_file>
 8006156:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f810 	bl	8006190 <http_init_file>
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3744      	adds	r7, #68	; 0x44
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	bf00      	nop
 800617c:	2000566c 	.word	0x2000566c
 8006180:	08015518 	.word	0x08015518
 8006184:	200056b4 	.word	0x200056b4
 8006188:	200056b0 	.word	0x200056b0
 800618c:	200056ac 	.word	0x200056ac

08006190 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <http_init_file+0x2a>
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <http_init_file+0xf4>)
 80061ae:	f640 120b 	movw	r2, #2315	; 0x90b
 80061b2:	4935      	ldr	r1, [pc, #212]	; (8006288 <http_init_file+0xf8>)
 80061b4:	4835      	ldr	r0, [pc, #212]	; (800628c <http_init_file+0xfc>)
 80061b6:	f00a ff7b 	bl	80110b0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da06      	bge.n	80061de <http_init_file+0x4e>
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <http_init_file+0xf4>)
 80061d2:	f640 1234 	movw	r2, #2356	; 0x934
 80061d6:	492e      	ldr	r1, [pc, #184]	; (8006290 <http_init_file+0x100>)
 80061d8:	482c      	ldr	r0, [pc, #176]	; (800628c <http_init_file+0xfc>)
 80061da:	f00a ff69 	bl	80110b0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	461a      	mov	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	7c1b      	ldrb	r3, [r3, #16]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <http_init_file+0x7c>
 80061fe:	4b21      	ldr	r3, [pc, #132]	; (8006284 <http_init_file+0xf4>)
 8006200:	f640 1243 	movw	r2, #2371	; 0x943
 8006204:	4923      	ldr	r1, [pc, #140]	; (8006294 <http_init_file+0x104>)
 8006206:	4821      	ldr	r0, [pc, #132]	; (800628c <http_init_file+0xfc>)
 8006208:	f00a ff52 	bl	80110b0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d032      	beq.n	8006278 <http_init_file+0xe8>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	7c1b      	ldrb	r3, [r3, #16]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02b      	beq.n	8006278 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6998      	ldr	r0, [r3, #24]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	461a      	mov	r2, r3
 800622a:	491b      	ldr	r1, [pc, #108]	; (8006298 <http_init_file+0x108>)
 800622c:	f000 fa28 	bl	8006680 <lwip_strnstr>
 8006230:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01f      	beq.n	8006278 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	; 0x24
 800625c:	e00c      	b.n	8006278 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	08011ff8 	.word	0x08011ff8
 8006288:	080120f4 	.word	0x080120f4
 800628c:	08012040 	.word	0x08012040
 8006290:	08012108 	.word	0x08012108
 8006294:	08012128 	.word	0x08012128
 8006298:	080120ec 	.word	0x080120ec

0800629c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <http_err+0x1c>
    http_state_free(hs);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fb5c 	bl	8005970 <http_state_free>
  }
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <http_sent+0x1c>
    return ERR_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e008      	b.n	80062ee <http_sent+0x2e>
  }

  hs->retries = 0;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	68b8      	ldr	r0, [r7, #8]
 80062e8:	f7ff fce1 	bl	8005cae <http_send>

  return ERR_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d107      	bne.n	800631a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800630a:	2100      	movs	r1, #0
 800630c:	6838      	ldr	r0, [r7, #0]
 800630e:	f7ff fbeb 	bl	8005ae8 <http_close_conn>
 8006312:	4603      	mov	r3, r0
 8006314:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	e021      	b.n	800635e <http_poll+0x68>
  } else {
    hs->retries++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006320:	3301      	adds	r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006330:	2b04      	cmp	r3, #4
 8006332:	d105      	bne.n	8006340 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	6838      	ldr	r0, [r7, #0]
 8006338:	f7ff fbd6 	bl	8005ae8 <http_close_conn>
      return ERR_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e00e      	b.n	800635e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	6838      	ldr	r0, [r7, #0]
 800634c:	f7ff fcaf 	bl	8005cae <http_send>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f007 f86a 	bl	800d430 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800637a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <http_recv+0x26>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <http_recv+0x26>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d111      	bne.n	80063b2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	891b      	ldrh	r3, [r3, #8]
 8006398:	4619      	mov	r1, r3
 800639a:	68b8      	ldr	r0, [r7, #8]
 800639c:	f002 fc38 	bl	8008c10 <tcp_recved>
      pbuf_free(p);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fcd3 	bl	8007d4c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	68b8      	ldr	r0, [r7, #8]
 80063aa:	f7ff fb9d 	bl	8005ae8 <http_close_conn>
    return ERR_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e055      	b.n	800645e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	891b      	ldrh	r3, [r3, #8]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68b8      	ldr	r0, [r7, #8]
 80063ba:	f002 fc29 	bl	8008c10 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d147      	bne.n	8006456 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	6979      	ldr	r1, [r7, #20]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff fcec 	bl	8005da8 <http_parse_request>
 80063d0:	4603      	mov	r3, r0
 80063d2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80063d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d015      	beq.n	8006408 <http_recv+0xa0>
 80063dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063e0:	f113 0f05 	cmn.w	r3, #5
 80063e4:	d010      	beq.n	8006408 <http_recv+0xa0>
 80063e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063ea:	f113 0f10 	cmn.w	r3, #16
 80063ee:	d00b      	beq.n	8006408 <http_recv+0xa0>
 80063f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063f4:	f113 0f08 	cmn.w	r3, #8
 80063f8:	d006      	beq.n	8006408 <http_recv+0xa0>
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <http_recv+0x100>)
 80063fc:	f640 2204 	movw	r2, #2564	; 0xa04
 8006400:	491a      	ldr	r1, [pc, #104]	; (800646c <http_recv+0x104>)
 8006402:	481b      	ldr	r0, [pc, #108]	; (8006470 <http_recv+0x108>)
 8006404:	f00a fe54 	bl	80110b0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800640c:	f113 0f05 	cmn.w	r3, #5
 8006410:	d00b      	beq.n	800642a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <http_recv+0xc2>
          pbuf_free(hs->req);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fc94 	bl	8007d4c <pbuf_free>
          hs->req = NULL;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fc8e 	bl	8007d4c <pbuf_free>
      if (parsed == ERR_OK) {
 8006430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f7ff fc37 	bl	8005cae <http_send>
 8006440:	e00c      	b.n	800645c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8006442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006446:	f113 0f10 	cmn.w	r3, #16
 800644a:	d107      	bne.n	800645c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800644c:	6979      	ldr	r1, [r7, #20]
 800644e:	68b8      	ldr	r0, [r7, #8]
 8006450:	f7ff fb4a 	bl	8005ae8 <http_close_conn>
 8006454:	e002      	b.n	800645c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fc78 	bl	8007d4c <pbuf_free>
    }
  }
  return ERR_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	08011ff8 	.word	0x08011ff8
 800646c:	08012154 	.word	0x08012154
 8006470:	08012040 	.word	0x08012040

08006474 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <http_accept+0x1c>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <http_accept+0x22>
    return ERR_VAL;
 8006490:	f06f 0305 	mvn.w	r3, #5
 8006494:	e025      	b.n	80064e2 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006496:	2101      	movs	r1, #1
 8006498:	68b8      	ldr	r0, [r7, #8]
 800649a:	f003 f89d 	bl	80095d8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800649e:	f7ff fa35 	bl	800590c <http_state_alloc>
 80064a2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	e018      	b.n	80064e2 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80064b6:	6979      	ldr	r1, [r7, #20]
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f003 fa8d 	bl	80099d8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80064be:	490b      	ldr	r1, [pc, #44]	; (80064ec <http_accept+0x78>)
 80064c0:	68b8      	ldr	r0, [r7, #8]
 80064c2:	f003 fa9b 	bl	80099fc <tcp_recv>
  altcp_err(pcb, http_err);
 80064c6:	490a      	ldr	r1, [pc, #40]	; (80064f0 <http_accept+0x7c>)
 80064c8:	68b8      	ldr	r0, [r7, #8]
 80064ca:	f003 fadb 	bl	8009a84 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80064ce:	2204      	movs	r2, #4
 80064d0:	4908      	ldr	r1, [pc, #32]	; (80064f4 <http_accept+0x80>)
 80064d2:	68b8      	ldr	r0, [r7, #8]
 80064d4:	f003 fb10 	bl	8009af8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80064d8:	4907      	ldr	r1, [pc, #28]	; (80064f8 <http_accept+0x84>)
 80064da:	68b8      	ldr	r0, [r7, #8]
 80064dc:	f003 fab0 	bl	8009a40 <tcp_sent>

  return ERR_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	08006369 	.word	0x08006369
 80064f0:	0800629d 	.word	0x0800629d
 80064f4:	080062f7 	.word	0x080062f7
 80064f8:	080062c1 	.word	0x080062c1

080064fc <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d029      	beq.n	8006562 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800650e:	2101      	movs	r1, #1
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f003 f861 	bl	80095d8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006516:	887b      	ldrh	r3, [r7, #2]
 8006518:	461a      	mov	r2, r3
 800651a:	4914      	ldr	r1, [pc, #80]	; (800656c <httpd_init_pcb+0x70>)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f002 f9a9 	bl	8008874 <tcp_bind>
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <httpd_init_pcb+0x40>
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <httpd_init_pcb+0x74>)
 8006530:	f640 2257 	movw	r2, #2647	; 0xa57
 8006534:	490f      	ldr	r1, [pc, #60]	; (8006574 <httpd_init_pcb+0x78>)
 8006536:	4810      	ldr	r0, [pc, #64]	; (8006578 <httpd_init_pcb+0x7c>)
 8006538:	f00a fdba 	bl	80110b0 <iprintf>
    pcb = altcp_listen(pcb);
 800653c:	21ff      	movs	r1, #255	; 0xff
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fa50 	bl	80089e4 <tcp_listen_with_backlog>
 8006544:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <httpd_init_pcb+0x5e>
 800654c:	4b08      	ldr	r3, [pc, #32]	; (8006570 <httpd_init_pcb+0x74>)
 800654e:	f640 2259 	movw	r2, #2649	; 0xa59
 8006552:	490a      	ldr	r1, [pc, #40]	; (800657c <httpd_init_pcb+0x80>)
 8006554:	4808      	ldr	r0, [pc, #32]	; (8006578 <httpd_init_pcb+0x7c>)
 8006556:	f00a fdab 	bl	80110b0 <iprintf>
    altcp_accept(pcb, http_accept);
 800655a:	4909      	ldr	r1, [pc, #36]	; (8006580 <httpd_init_pcb+0x84>)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f003 fab3 	bl	8009ac8 <tcp_accept>
  }
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	08015610 	.word	0x08015610
 8006570:	08011ff8 	.word	0x08011ff8
 8006574:	08012180 	.word	0x08012180
 8006578:	08012040 	.word	0x08012040
 800657c:	0801219c 	.word	0x0801219c
 8006580:	08006475 	.word	0x08006475

08006584 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800658a:	202e      	movs	r0, #46	; 0x2e
 800658c:	f003 fa16 	bl	80099bc <tcp_new_ip_type>
 8006590:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <httpd_init+0x22>
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <httpd_init+0x34>)
 800659a:	f640 2272 	movw	r2, #2674	; 0xa72
 800659e:	4907      	ldr	r1, [pc, #28]	; (80065bc <httpd_init+0x38>)
 80065a0:	4807      	ldr	r0, [pc, #28]	; (80065c0 <httpd_init+0x3c>)
 80065a2:	f00a fd85 	bl	80110b0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80065a6:	2150      	movs	r1, #80	; 0x50
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ffa7 	bl	80064fc <httpd_init_pcb>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08011ff8 	.word	0x08011ff8
 80065bc:	080121bc 	.word	0x080121bc
 80065c0:	08012040 	.word	0x08012040

080065c4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <http_set_cgi_handlers+0x1e>
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <http_set_cgi_handlers+0x48>)
 80065d6:	f640 22b2 	movw	r2, #2738	; 0xab2
 80065da:	490d      	ldr	r1, [pc, #52]	; (8006610 <http_set_cgi_handlers+0x4c>)
 80065dc:	480d      	ldr	r0, [pc, #52]	; (8006614 <http_set_cgi_handlers+0x50>)
 80065de:	f00a fd67 	bl	80110b0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc06      	bgt.n	80065f6 <http_set_cgi_handlers+0x32>
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <http_set_cgi_handlers+0x48>)
 80065ea:	f640 22b3 	movw	r2, #2739	; 0xab3
 80065ee:	490a      	ldr	r1, [pc, #40]	; (8006618 <http_set_cgi_handlers+0x54>)
 80065f0:	4808      	ldr	r0, [pc, #32]	; (8006614 <http_set_cgi_handlers+0x50>)
 80065f2:	f00a fd5d 	bl	80110b0 <iprintf>

  httpd_cgis = cgis;
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <http_set_cgi_handlers+0x58>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <http_set_cgi_handlers+0x5c>)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6013      	str	r3, [r2, #0]
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	08011ff8 	.word	0x08011ff8
 8006610:	080121d8 	.word	0x080121d8
 8006614:	08012040 	.word	0x08012040
 8006618:	080121e8 	.word	0x080121e8
 800661c:	200056ac 	.word	0x200056ac
 8006620:	200056b0 	.word	0x200056b0

08006624 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	b21a      	sxth	r2, r3
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	b21b      	sxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b21b      	sxth	r3, r3
 8006640:	b29b      	uxth	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	061a      	lsls	r2, r3, #24
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0a1b      	lsrs	r3, r3, #8
 8006668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	4313      	orrs	r3, r2
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800668c:	68b8      	ldr	r0, [r7, #8]
 800668e:	f7f9 fde1 	bl	8000254 <strlen>
 8006692:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	e022      	b.n	80066e4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e012      	b.n	80066ca <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d109      	bne.n	80066c4 <lwip_strnstr+0x44>
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	6978      	ldr	r0, [r7, #20]
 80066b6:	f00a fd75 	bl	80111a4 <strncmp>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	e00f      	b.n	80066e4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3301      	adds	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <lwip_strnstr+0x62>
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	441a      	add	r2, r3
 80066d8:	68f9      	ldr	r1, [r7, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	440b      	add	r3, r1
 80066de:	429a      	cmp	r2, r3
 80066e0:	d9e0      	bls.n	80066a4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80066f6:	f000 f8d5 	bl	80068a4 <mem_init>
  memp_init();
 80066fa:	f000 fbdb 	bl	8006eb4 <memp_init>
  pbuf_init();
  netif_init();
 80066fe:	f000 fcd9 	bl	80070b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006702:	f007 ff55 	bl	800e5b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006706:	f001 fdaf 	bl	8008268 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800670a:	f007 fec7 	bl	800e49c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <ptr_to_mem+0x20>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	4413      	add	r3, r2
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20005d24 	.word	0x20005d24

0800673c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <mem_to_ptr+0x20>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	b29b      	uxth	r3, r3
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20005d24 	.word	0x20005d24

08006760 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <plug_holes+0x120>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d206      	bcs.n	8006780 <plug_holes+0x20>
 8006772:	4b44      	ldr	r3, [pc, #272]	; (8006884 <plug_holes+0x124>)
 8006774:	f240 12df 	movw	r2, #479	; 0x1df
 8006778:	4943      	ldr	r1, [pc, #268]	; (8006888 <plug_holes+0x128>)
 800677a:	4844      	ldr	r0, [pc, #272]	; (800688c <plug_holes+0x12c>)
 800677c:	f00a fc98 	bl	80110b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006780:	4b43      	ldr	r3, [pc, #268]	; (8006890 <plug_holes+0x130>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d306      	bcc.n	8006798 <plug_holes+0x38>
 800678a:	4b3e      	ldr	r3, [pc, #248]	; (8006884 <plug_holes+0x124>)
 800678c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006790:	4940      	ldr	r1, [pc, #256]	; (8006894 <plug_holes+0x134>)
 8006792:	483e      	ldr	r0, [pc, #248]	; (800688c <plug_holes+0x12c>)
 8006794:	f00a fc8c 	bl	80110b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	791b      	ldrb	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d006      	beq.n	80067ae <plug_holes+0x4e>
 80067a0:	4b38      	ldr	r3, [pc, #224]	; (8006884 <plug_holes+0x124>)
 80067a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80067a6:	493c      	ldr	r1, [pc, #240]	; (8006898 <plug_holes+0x138>)
 80067a8:	4838      	ldr	r0, [pc, #224]	; (800688c <plug_holes+0x12c>)
 80067aa:	f00a fc81 	bl	80110b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067b6:	d906      	bls.n	80067c6 <plug_holes+0x66>
 80067b8:	4b32      	ldr	r3, [pc, #200]	; (8006884 <plug_holes+0x124>)
 80067ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80067be:	4937      	ldr	r1, [pc, #220]	; (800689c <plug_holes+0x13c>)
 80067c0:	4832      	ldr	r0, [pc, #200]	; (800688c <plug_holes+0x12c>)
 80067c2:	f00a fc75 	bl	80110b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff ffa4 	bl	8006718 <ptr_to_mem>
 80067d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d024      	beq.n	8006824 <plug_holes+0xc4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	791b      	ldrb	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d120      	bne.n	8006824 <plug_holes+0xc4>
 80067e2:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <plug_holes+0x130>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d01b      	beq.n	8006824 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80067ec:	4b2c      	ldr	r3, [pc, #176]	; (80068a0 <plug_holes+0x140>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d102      	bne.n	80067fc <plug_holes+0x9c>
      lfree = mem;
 80067f6:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <plug_holes+0x140>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800680c:	d00a      	beq.n	8006824 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff80 	bl	8006718 <ptr_to_mem>
 8006818:	4604      	mov	r4, r0
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff ff8e 	bl	800673c <mem_to_ptr>
 8006820:	4603      	mov	r3, r0
 8006822:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff ff75 	bl	8006718 <ptr_to_mem>
 800682e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d01f      	beq.n	8006878 <plug_holes+0x118>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11b      	bne.n	8006878 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <plug_holes+0x140>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	429a      	cmp	r2, r3
 8006848:	d102      	bne.n	8006850 <plug_holes+0xf0>
      lfree = pmem;
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <plug_holes+0x140>)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	881a      	ldrh	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006860:	d00a      	beq.n	8006878 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ff56 	bl	8006718 <ptr_to_mem>
 800686c:	4604      	mov	r4, r0
 800686e:	68b8      	ldr	r0, [r7, #8]
 8006870:	f7ff ff64 	bl	800673c <mem_to_ptr>
 8006874:	4603      	mov	r3, r0
 8006876:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	bd90      	pop	{r4, r7, pc}
 8006880:	20005d24 	.word	0x20005d24
 8006884:	08012204 	.word	0x08012204
 8006888:	08012234 	.word	0x08012234
 800688c:	0801224c 	.word	0x0801224c
 8006890:	20005d28 	.word	0x20005d28
 8006894:	08012274 	.word	0x08012274
 8006898:	08012290 	.word	0x08012290
 800689c:	080122ac 	.word	0x080122ac
 80068a0:	20005d2c 	.word	0x20005d2c

080068a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80068aa:	4b18      	ldr	r3, [pc, #96]	; (800690c <mem_init+0x68>)
 80068ac:	3303      	adds	r3, #3
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b16      	ldr	r3, [pc, #88]	; (8006910 <mem_init+0x6c>)
 80068b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <mem_init+0x6c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80068d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80068d6:	f7ff ff1f 	bl	8006718 <ptr_to_mem>
 80068da:	4603      	mov	r3, r0
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <mem_init+0x70>)
 80068de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80068e0:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <mem_init+0x70>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2201      	movs	r2, #1
 80068e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <mem_init+0x70>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <mem_init+0x70>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80068fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <mem_init+0x6c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a05      	ldr	r2, [pc, #20]	; (8006918 <mem_init+0x74>)
 8006902:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200056d0 	.word	0x200056d0
 8006910:	20005d24 	.word	0x20005d24
 8006914:	20005d28 	.word	0x20005d28
 8006918:	20005d2c 	.word	0x20005d2c

0800691c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff09 	bl	800673c <mem_to_ptr>
 800692a:	4603      	mov	r3, r0
 800692c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fef0 	bl	8006718 <ptr_to_mem>
 8006938:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff feea 	bl	8006718 <ptr_to_mem>
 8006944:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800694e:	d818      	bhi.n	8006982 <mem_link_valid+0x66>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006958:	d813      	bhi.n	8006982 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800695e:	8afa      	ldrh	r2, [r7, #22]
 8006960:	429a      	cmp	r2, r3
 8006962:	d004      	beq.n	800696e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	8afa      	ldrh	r2, [r7, #22]
 800696a:	429a      	cmp	r2, r3
 800696c:	d109      	bne.n	8006982 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800696e:	4b08      	ldr	r3, [pc, #32]	; (8006990 <mem_link_valid+0x74>)
 8006970:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	429a      	cmp	r2, r3
 8006976:	d006      	beq.n	8006986 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	8afa      	ldrh	r2, [r7, #22]
 800697e:	429a      	cmp	r2, r3
 8006980:	d001      	beq.n	8006986 <mem_link_valid+0x6a>
    return 0;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <mem_link_valid+0x6c>
  }
  return 1;
 8006986:	2301      	movs	r3, #1
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20005d28 	.word	0x20005d28

08006994 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04c      	beq.n	8006a3c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80069ac:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <mem_free+0xb0>)
 80069ae:	f240 2273 	movw	r2, #627	; 0x273
 80069b2:	4925      	ldr	r1, [pc, #148]	; (8006a48 <mem_free+0xb4>)
 80069b4:	4825      	ldr	r0, [pc, #148]	; (8006a4c <mem_free+0xb8>)
 80069b6:	f00a fb7b 	bl	80110b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069ba:	e040      	b.n	8006a3e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b08      	subs	r3, #8
 80069c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80069c2:	4b23      	ldr	r3, [pc, #140]	; (8006a50 <mem_free+0xbc>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d306      	bcc.n	80069da <mem_free+0x46>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f103 020c 	add.w	r2, r3, #12
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <mem_free+0xc0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d907      	bls.n	80069ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <mem_free+0xb0>)
 80069dc:	f240 227f 	movw	r2, #639	; 0x27f
 80069e0:	491d      	ldr	r1, [pc, #116]	; (8006a58 <mem_free+0xc4>)
 80069e2:	481a      	ldr	r0, [pc, #104]	; (8006a4c <mem_free+0xb8>)
 80069e4:	f00a fb64 	bl	80110b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80069e8:	e029      	b.n	8006a3e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	791b      	ldrb	r3, [r3, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <mem_free+0xb0>)
 80069f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80069f8:	4918      	ldr	r1, [pc, #96]	; (8006a5c <mem_free+0xc8>)
 80069fa:	4814      	ldr	r0, [pc, #80]	; (8006a4c <mem_free+0xb8>)
 80069fc:	f00a fb58 	bl	80110b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a00:	e01d      	b.n	8006a3e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff8a 	bl	800691c <mem_link_valid>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <mem_free+0xb0>)
 8006a10:	f240 2295 	movw	r2, #661	; 0x295
 8006a14:	4912      	ldr	r1, [pc, #72]	; (8006a60 <mem_free+0xcc>)
 8006a16:	480d      	ldr	r0, [pc, #52]	; (8006a4c <mem_free+0xb8>)
 8006a18:	f00a fb4a 	bl	80110b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006a1c:	e00f      	b.n	8006a3e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <mem_free+0xd0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d202      	bcs.n	8006a34 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <mem_free+0xd0>)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fe93 	bl	8006760 <plug_holes>
 8006a3a:	e000      	b.n	8006a3e <mem_free+0xaa>
    return;
 8006a3c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08012204 	.word	0x08012204
 8006a48:	080122d8 	.word	0x080122d8
 8006a4c:	0801224c 	.word	0x0801224c
 8006a50:	20005d24 	.word	0x20005d24
 8006a54:	20005d28 	.word	0x20005d28
 8006a58:	080122fc 	.word	0x080122fc
 8006a5c:	08012318 	.word	0x08012318
 8006a60:	08012340 	.word	0x08012340
 8006a64:	20005d2c 	.word	0x20005d2c

08006a68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006a74:	887b      	ldrh	r3, [r7, #2]
 8006a76:	3303      	adds	r3, #3
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f023 0303 	bic.w	r3, r3, #3
 8006a7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	2b0b      	cmp	r3, #11
 8006a84:	d801      	bhi.n	8006a8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006a86:	230c      	movs	r3, #12
 8006a88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006a8a:	8bfb      	ldrh	r3, [r7, #30]
 8006a8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a90:	d803      	bhi.n	8006a9a <mem_trim+0x32>
 8006a92:	8bfa      	ldrh	r2, [r7, #30]
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d201      	bcs.n	8006a9e <mem_trim+0x36>
    return NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e0cc      	b.n	8006c38 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a9e:	4b68      	ldr	r3, [pc, #416]	; (8006c40 <mem_trim+0x1d8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d304      	bcc.n	8006ab2 <mem_trim+0x4a>
 8006aa8:	4b66      	ldr	r3, [pc, #408]	; (8006c44 <mem_trim+0x1dc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d306      	bcc.n	8006ac0 <mem_trim+0x58>
 8006ab2:	4b65      	ldr	r3, [pc, #404]	; (8006c48 <mem_trim+0x1e0>)
 8006ab4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006ab8:	4964      	ldr	r1, [pc, #400]	; (8006c4c <mem_trim+0x1e4>)
 8006aba:	4865      	ldr	r0, [pc, #404]	; (8006c50 <mem_trim+0x1e8>)
 8006abc:	f00a faf8 	bl	80110b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006ac0:	4b5f      	ldr	r3, [pc, #380]	; (8006c40 <mem_trim+0x1d8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d304      	bcc.n	8006ad4 <mem_trim+0x6c>
 8006aca:	4b5e      	ldr	r3, [pc, #376]	; (8006c44 <mem_trim+0x1dc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d301      	bcc.n	8006ad8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	e0af      	b.n	8006c38 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b08      	subs	r3, #8
 8006adc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006ade:	69b8      	ldr	r0, [r7, #24]
 8006ae0:	f7ff fe2c 	bl	800673c <mem_to_ptr>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	8afb      	ldrh	r3, [r7, #22]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b08      	subs	r3, #8
 8006af4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006af6:	8bfa      	ldrh	r2, [r7, #30]
 8006af8:	8abb      	ldrh	r3, [r7, #20]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d906      	bls.n	8006b0c <mem_trim+0xa4>
 8006afe:	4b52      	ldr	r3, [pc, #328]	; (8006c48 <mem_trim+0x1e0>)
 8006b00:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006b04:	4953      	ldr	r1, [pc, #332]	; (8006c54 <mem_trim+0x1ec>)
 8006b06:	4852      	ldr	r0, [pc, #328]	; (8006c50 <mem_trim+0x1e8>)
 8006b08:	f00a fad2 	bl	80110b0 <iprintf>
  if (newsize > size) {
 8006b0c:	8bfa      	ldrh	r2, [r7, #30]
 8006b0e:	8abb      	ldrh	r3, [r7, #20]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d901      	bls.n	8006b18 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e08f      	b.n	8006c38 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006b18:	8bfa      	ldrh	r2, [r7, #30]
 8006b1a:	8abb      	ldrh	r3, [r7, #20]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d101      	bne.n	8006b24 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	e089      	b.n	8006c38 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fdf5 	bl	8006718 <ptr_to_mem>
 8006b2e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	791b      	ldrb	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d13f      	bne.n	8006bb8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b40:	d106      	bne.n	8006b50 <mem_trim+0xe8>
 8006b42:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <mem_trim+0x1e0>)
 8006b44:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006b48:	4943      	ldr	r1, [pc, #268]	; (8006c58 <mem_trim+0x1f0>)
 8006b4a:	4841      	ldr	r0, [pc, #260]	; (8006c50 <mem_trim+0x1e8>)
 8006b4c:	f00a fab0 	bl	80110b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b56:	8afa      	ldrh	r2, [r7, #22]
 8006b58:	8bfb      	ldrh	r3, [r7, #30]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3308      	adds	r3, #8
 8006b60:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006b62:	4b3e      	ldr	r3, [pc, #248]	; (8006c5c <mem_trim+0x1f4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d106      	bne.n	8006b7a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fdd2 	bl	8006718 <ptr_to_mem>
 8006b74:	4603      	mov	r3, r0
 8006b76:	4a39      	ldr	r2, [pc, #228]	; (8006c5c <mem_trim+0x1f4>)
 8006b78:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fdcb 	bl	8006718 <ptr_to_mem>
 8006b82:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2200      	movs	r2, #0
 8006b88:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	89ba      	ldrh	r2, [r7, #12]
 8006b8e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	8afa      	ldrh	r2, [r7, #22]
 8006b94:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	89fa      	ldrh	r2, [r7, #14]
 8006b9a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ba4:	d047      	beq.n	8006c36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fdb4 	bl	8006718 <ptr_to_mem>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	8053      	strh	r3, [r2, #2]
 8006bb6:	e03e      	b.n	8006c36 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006bb8:	8bfb      	ldrh	r3, [r7, #30]
 8006bba:	f103 0214 	add.w	r2, r3, #20
 8006bbe:	8abb      	ldrh	r3, [r7, #20]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d838      	bhi.n	8006c36 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006bc4:	8afa      	ldrh	r2, [r7, #22]
 8006bc6:	8bfb      	ldrh	r3, [r7, #30]
 8006bc8:	4413      	add	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3308      	adds	r3, #8
 8006bce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bd8:	d106      	bne.n	8006be8 <mem_trim+0x180>
 8006bda:	4b1b      	ldr	r3, [pc, #108]	; (8006c48 <mem_trim+0x1e0>)
 8006bdc:	f240 3216 	movw	r2, #790	; 0x316
 8006be0:	491d      	ldr	r1, [pc, #116]	; (8006c58 <mem_trim+0x1f0>)
 8006be2:	481b      	ldr	r0, [pc, #108]	; (8006c50 <mem_trim+0x1e8>)
 8006be4:	f00a fa64 	bl	80110b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fd94 	bl	8006718 <ptr_to_mem>
 8006bf0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <mem_trim+0x1f4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d202      	bcs.n	8006c02 <mem_trim+0x19a>
      lfree = mem2;
 8006bfc:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <mem_trim+0x1f4>)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2200      	movs	r2, #0
 8006c06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	881a      	ldrh	r2, [r3, #0]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	8afa      	ldrh	r2, [r7, #22]
 8006c14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	89fa      	ldrh	r2, [r7, #14]
 8006c1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c24:	d007      	beq.n	8006c36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fd74 	bl	8006718 <ptr_to_mem>
 8006c30:	4602      	mov	r2, r0
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006c36:	687b      	ldr	r3, [r7, #4]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20005d24 	.word	0x20005d24
 8006c44:	20005d28 	.word	0x20005d28
 8006c48:	08012204 	.word	0x08012204
 8006c4c:	08012374 	.word	0x08012374
 8006c50:	0801224c 	.word	0x0801224c
 8006c54:	0801238c 	.word	0x0801238c
 8006c58:	080123ac 	.word	0x080123ac
 8006c5c:	20005d2c 	.word	0x20005d2c

08006c60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <mem_malloc+0x14>
    return NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e0d9      	b.n	8006e28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	3303      	adds	r3, #3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006c80:	8bbb      	ldrh	r3, [r7, #28]
 8006c82:	2b0b      	cmp	r3, #11
 8006c84:	d801      	bhi.n	8006c8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006c86:	230c      	movs	r3, #12
 8006c88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c8a:	8bbb      	ldrh	r3, [r7, #28]
 8006c8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c90:	d803      	bhi.n	8006c9a <mem_malloc+0x3a>
 8006c92:	8bba      	ldrh	r2, [r7, #28]
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d201      	bcs.n	8006c9e <mem_malloc+0x3e>
    return NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e0c4      	b.n	8006e28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c9e:	4b64      	ldr	r3, [pc, #400]	; (8006e30 <mem_malloc+0x1d0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fd4a 	bl	800673c <mem_to_ptr>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	83fb      	strh	r3, [r7, #30]
 8006cac:	e0b4      	b.n	8006e18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006cae:	8bfb      	ldrh	r3, [r7, #30]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fd31 	bl	8006718 <ptr_to_mem>
 8006cb6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 80a4 	bne.w	8006e0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	8bfb      	ldrh	r3, [r7, #30]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f1a3 0208 	sub.w	r2, r3, #8
 8006cd0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	f0c0 8099 	bcc.w	8006e0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	8bfb      	ldrh	r3, [r7, #30]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f1a3 0208 	sub.w	r2, r3, #8
 8006ce6:	8bbb      	ldrh	r3, [r7, #28]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d333      	bcc.n	8006d56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006cee:	8bfa      	ldrh	r2, [r7, #30]
 8006cf0:	8bbb      	ldrh	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006cfa:	8a7b      	ldrh	r3, [r7, #18]
 8006cfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d00:	d106      	bne.n	8006d10 <mem_malloc+0xb0>
 8006d02:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <mem_malloc+0x1d4>)
 8006d04:	f240 3287 	movw	r2, #903	; 0x387
 8006d08:	494b      	ldr	r1, [pc, #300]	; (8006e38 <mem_malloc+0x1d8>)
 8006d0a:	484c      	ldr	r0, [pc, #304]	; (8006e3c <mem_malloc+0x1dc>)
 8006d0c:	f00a f9d0 	bl	80110b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006d10:	8a7b      	ldrh	r3, [r7, #18]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fd00 	bl	8006718 <ptr_to_mem>
 8006d18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	881a      	ldrh	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8bfa      	ldrh	r2, [r7, #30]
 8006d2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	8a7a      	ldrh	r2, [r7, #18]
 8006d32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2201      	movs	r2, #1
 8006d38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d42:	d00b      	beq.n	8006d5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fce5 	bl	8006718 <ptr_to_mem>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	8a7b      	ldrh	r3, [r7, #18]
 8006d52:	8053      	strh	r3, [r2, #2]
 8006d54:	e002      	b.n	8006d5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006d5c:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <mem_malloc+0x1d0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d127      	bne.n	8006db6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006d66:	4b32      	ldr	r3, [pc, #200]	; (8006e30 <mem_malloc+0x1d0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006d6c:	e005      	b.n	8006d7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fcd0 	bl	8006718 <ptr_to_mem>
 8006d78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d004      	beq.n	8006d8c <mem_malloc+0x12c>
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <mem_malloc+0x1e0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d1f0      	bne.n	8006d6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8006d8c:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <mem_malloc+0x1d0>)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <mem_malloc+0x1d0>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <mem_malloc+0x1e0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d00b      	beq.n	8006db6 <mem_malloc+0x156>
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <mem_malloc+0x1d0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <mem_malloc+0x156>
 8006da8:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <mem_malloc+0x1d4>)
 8006daa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006dae:	4925      	ldr	r1, [pc, #148]	; (8006e44 <mem_malloc+0x1e4>)
 8006db0:	4822      	ldr	r0, [pc, #136]	; (8006e3c <mem_malloc+0x1dc>)
 8006db2:	f00a f97d 	bl	80110b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006db6:	8bba      	ldrh	r2, [r7, #28]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <mem_malloc+0x1e0>)
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d906      	bls.n	8006dd4 <mem_malloc+0x174>
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <mem_malloc+0x1d4>)
 8006dc8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006dcc:	491e      	ldr	r1, [pc, #120]	; (8006e48 <mem_malloc+0x1e8>)
 8006dce:	481b      	ldr	r0, [pc, #108]	; (8006e3c <mem_malloc+0x1dc>)
 8006dd0:	f00a f96e 	bl	80110b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <mem_malloc+0x18c>
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <mem_malloc+0x1d4>)
 8006de0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006de4:	4919      	ldr	r1, [pc, #100]	; (8006e4c <mem_malloc+0x1ec>)
 8006de6:	4815      	ldr	r0, [pc, #84]	; (8006e3c <mem_malloc+0x1dc>)
 8006de8:	f00a f962 	bl	80110b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <mem_malloc+0x1a4>
 8006df6:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <mem_malloc+0x1d4>)
 8006df8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006dfc:	4914      	ldr	r1, [pc, #80]	; (8006e50 <mem_malloc+0x1f0>)
 8006dfe:	480f      	ldr	r0, [pc, #60]	; (8006e3c <mem_malloc+0x1dc>)
 8006e00:	f00a f956 	bl	80110b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	3308      	adds	r3, #8
 8006e08:	e00e      	b.n	8006e28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006e0a:	8bfb      	ldrh	r3, [r7, #30]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fc83 	bl	8006718 <ptr_to_mem>
 8006e12:	4603      	mov	r3, r0
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e18:	8bfa      	ldrh	r2, [r7, #30]
 8006e1a:	8bbb      	ldrh	r3, [r7, #28]
 8006e1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006e20:	429a      	cmp	r2, r3
 8006e22:	f4ff af44 	bcc.w	8006cae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20005d2c 	.word	0x20005d2c
 8006e34:	08012204 	.word	0x08012204
 8006e38:	080123ac 	.word	0x080123ac
 8006e3c:	0801224c 	.word	0x0801224c
 8006e40:	20005d28 	.word	0x20005d28
 8006e44:	080123c0 	.word	0x080123c0
 8006e48:	080123dc 	.word	0x080123dc
 8006e4c:	0801240c 	.word	0x0801240c
 8006e50:	0801243c 	.word	0x0801243c

08006e54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	3303      	adds	r3, #3
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e011      	b.n	8006e9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	dbe7      	blt.n	8006e76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006eba:	2300      	movs	r3, #0
 8006ebc:	80fb      	strh	r3, [r7, #6]
 8006ebe:	e009      	b.n	8006ed4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006ec0:	88fb      	ldrh	r3, [r7, #6]
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <memp_init+0x30>)
 8006ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff ffc3 	bl	8006e54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	80fb      	strh	r3, [r7, #6]
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d9f2      	bls.n	8006ec0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	080155ac 	.word	0x080155ac

08006ee8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d006      	beq.n	8006f20 <do_memp_malloc_pool+0x38>
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <do_memp_malloc_pool+0x48>)
 8006f14:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006f18:	4906      	ldr	r1, [pc, #24]	; (8006f34 <do_memp_malloc_pool+0x4c>)
 8006f1a:	4807      	ldr	r0, [pc, #28]	; (8006f38 <do_memp_malloc_pool+0x50>)
 8006f1c:	f00a f8c8 	bl	80110b0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	e000      	b.n	8006f26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	08012460 	.word	0x08012460
 8006f34:	08012490 	.word	0x08012490
 8006f38:	080124b4 	.word	0x080124b4

08006f3c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <memp_malloc_pool+0x1c>
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <memp_malloc_pool+0x38>)
 8006f4c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006f50:	4909      	ldr	r1, [pc, #36]	; (8006f78 <memp_malloc_pool+0x3c>)
 8006f52:	480a      	ldr	r0, [pc, #40]	; (8006f7c <memp_malloc_pool+0x40>)
 8006f54:	f00a f8ac 	bl	80110b0 <iprintf>
  if (desc == NULL) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <memp_malloc_pool+0x26>
    return NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e003      	b.n	8006f6a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff ffc0 	bl	8006ee8 <do_memp_malloc_pool>
 8006f68:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	08012460 	.word	0x08012460
 8006f78:	080124dc 	.word	0x080124dc
 8006f7c:	080124b4 	.word	0x080124b4

08006f80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d908      	bls.n	8006fa2 <memp_malloc+0x22>
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <memp_malloc+0x3c>)
 8006f92:	f240 1257 	movw	r2, #343	; 0x157
 8006f96:	490a      	ldr	r1, [pc, #40]	; (8006fc0 <memp_malloc+0x40>)
 8006f98:	480a      	ldr	r0, [pc, #40]	; (8006fc4 <memp_malloc+0x44>)
 8006f9a:	f00a f889 	bl	80110b0 <iprintf>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e008      	b.n	8006fb4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <memp_malloc+0x48>)
 8006fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff ff9c 	bl	8006ee8 <do_memp_malloc_pool>
 8006fb0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08012460 	.word	0x08012460
 8006fc0:	080124f0 	.word	0x080124f0
 8006fc4:	080124b4 	.word	0x080124b4
 8006fc8:	080155ac 	.word	0x080155ac

08006fcc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <do_memp_free_pool+0x22>
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <do_memp_free_pool+0x40>)
 8006fe2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006fe6:	490a      	ldr	r1, [pc, #40]	; (8007010 <do_memp_free_pool+0x44>)
 8006fe8:	480a      	ldr	r0, [pc, #40]	; (8007014 <do_memp_free_pool+0x48>)
 8006fea:	f00a f861 	bl	80110b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	08012460 	.word	0x08012460
 8007010:	08012510 	.word	0x08012510
 8007014:	080124b4 	.word	0x080124b4

08007018 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <memp_free_pool+0x1e>
 8007028:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <memp_free_pool+0x3c>)
 800702a:	f240 1295 	movw	r2, #405	; 0x195
 800702e:	490a      	ldr	r1, [pc, #40]	; (8007058 <memp_free_pool+0x40>)
 8007030:	480a      	ldr	r0, [pc, #40]	; (800705c <memp_free_pool+0x44>)
 8007032:	f00a f83d 	bl	80110b0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <memp_free_pool+0x34>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ffc1 	bl	8006fcc <do_memp_free_pool>
 800704a:	e000      	b.n	800704e <memp_free_pool+0x36>
    return;
 800704c:	bf00      	nop
}
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	08012460 	.word	0x08012460
 8007058:	080124dc 	.word	0x080124dc
 800705c:	080124b4 	.word	0x080124b4

08007060 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b08      	cmp	r3, #8
 8007070:	d907      	bls.n	8007082 <memp_free+0x22>
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <memp_free+0x44>)
 8007074:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007078:	490b      	ldr	r1, [pc, #44]	; (80070a8 <memp_free+0x48>)
 800707a:	480c      	ldr	r0, [pc, #48]	; (80070ac <memp_free+0x4c>)
 800707c:	f00a f818 	bl	80110b0 <iprintf>
 8007080:	e00c      	b.n	800709c <memp_free+0x3c>

  if (mem == NULL) {
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <memp_free+0x50>)
 800708c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff ff9a 	bl	8006fcc <do_memp_free_pool>
 8007098:	e000      	b.n	800709c <memp_free+0x3c>
    return;
 800709a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	08012460 	.word	0x08012460
 80070a8:	08012530 	.word	0x08012530
 80070ac:	080124b4 	.word	0x080124b4
 80070b0:	080155ac 	.word	0x080155ac

080070b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d108      	bne.n	80070ea <netif_add+0x26>
 80070d8:	4b57      	ldr	r3, [pc, #348]	; (8007238 <netif_add+0x174>)
 80070da:	f240 1227 	movw	r2, #295	; 0x127
 80070de:	4957      	ldr	r1, [pc, #348]	; (800723c <netif_add+0x178>)
 80070e0:	4857      	ldr	r0, [pc, #348]	; (8007240 <netif_add+0x17c>)
 80070e2:	f009 ffe5 	bl	80110b0 <iprintf>
 80070e6:	2300      	movs	r3, #0
 80070e8:	e0a2      	b.n	8007230 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <netif_add+0x3e>
 80070f0:	4b51      	ldr	r3, [pc, #324]	; (8007238 <netif_add+0x174>)
 80070f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80070f6:	4953      	ldr	r1, [pc, #332]	; (8007244 <netif_add+0x180>)
 80070f8:	4851      	ldr	r0, [pc, #324]	; (8007240 <netif_add+0x17c>)
 80070fa:	f009 ffd9 	bl	80110b0 <iprintf>
 80070fe:	2300      	movs	r3, #0
 8007100:	e096      	b.n	8007230 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007108:	4b4f      	ldr	r3, [pc, #316]	; (8007248 <netif_add+0x184>)
 800710a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007112:	4b4d      	ldr	r3, [pc, #308]	; (8007248 <netif_add+0x184>)
 8007114:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800711c:	4b4a      	ldr	r3, [pc, #296]	; (8007248 <netif_add+0x184>)
 800711e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a45      	ldr	r2, [pc, #276]	; (800724c <netif_add+0x188>)
 8007136:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a3a      	ldr	r2, [r7, #32]
 8007150:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007152:	4b3f      	ldr	r3, [pc, #252]	; (8007250 <netif_add+0x18c>)
 8007154:	781a      	ldrb	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007160:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f913 	bl	8007394 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	4798      	blx	r3
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <netif_add+0xba>
    return NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	e058      	b.n	8007230 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007184:	2bff      	cmp	r3, #255	; 0xff
 8007186:	d103      	bne.n	8007190 <netif_add+0xcc>
        netif->num = 0;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007194:	4b2f      	ldr	r3, [pc, #188]	; (8007254 <netif_add+0x190>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e02b      	b.n	80071f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d106      	bne.n	80071b2 <netif_add+0xee>
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <netif_add+0x174>)
 80071a6:	f240 128b 	movw	r2, #395	; 0x18b
 80071aa:	492b      	ldr	r1, [pc, #172]	; (8007258 <netif_add+0x194>)
 80071ac:	4824      	ldr	r0, [pc, #144]	; (8007240 <netif_add+0x17c>)
 80071ae:	f009 ff7f 	bl	80110b0 <iprintf>
        num_netifs++;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2bff      	cmp	r3, #255	; 0xff
 80071bc:	dd06      	ble.n	80071cc <netif_add+0x108>
 80071be:	4b1e      	ldr	r3, [pc, #120]	; (8007238 <netif_add+0x174>)
 80071c0:	f240 128d 	movw	r2, #397	; 0x18d
 80071c4:	4925      	ldr	r1, [pc, #148]	; (800725c <netif_add+0x198>)
 80071c6:	481e      	ldr	r0, [pc, #120]	; (8007240 <netif_add+0x17c>)
 80071c8:	f009 ff72 	bl	80110b0 <iprintf>
        if (netif2->num == netif->num) {
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071d8:	429a      	cmp	r2, r3
 80071da:	d108      	bne.n	80071ee <netif_add+0x12a>
          netif->num++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80071ec:	e005      	b.n	80071fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1d0      	bne.n	800719c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1be      	bne.n	800717e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007206:	2bfe      	cmp	r3, #254	; 0xfe
 8007208:	d103      	bne.n	8007212 <netif_add+0x14e>
    netif_num = 0;
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <netif_add+0x18c>)
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e006      	b.n	8007220 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007218:	3301      	adds	r3, #1
 800721a:	b2da      	uxtb	r2, r3
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <netif_add+0x18c>)
 800721e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <netif_add+0x190>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007228:	4a0a      	ldr	r2, [pc, #40]	; (8007254 <netif_add+0x190>)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	0801254c 	.word	0x0801254c
 800723c:	080125e0 	.word	0x080125e0
 8007240:	0801259c 	.word	0x0801259c
 8007244:	080125fc 	.word	0x080125fc
 8007248:	08015610 	.word	0x08015610
 800724c:	0800766f 	.word	0x0800766f
 8007250:	20008c24 	.word	0x20008c24
 8007254:	20008c1c 	.word	0x20008c1c
 8007258:	08012620 	.word	0x08012620
 800725c:	08012634 	.word	0x08012634

08007260 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 fde9 	bl	8009e44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f007 fb25 	bl	800e8c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <netif_do_set_ipaddr+0x20>
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <netif_do_set_ipaddr+0x88>)
 8007298:	f240 12cb 	movw	r2, #459	; 0x1cb
 800729c:	491c      	ldr	r1, [pc, #112]	; (8007310 <netif_do_set_ipaddr+0x8c>)
 800729e:	481d      	ldr	r0, [pc, #116]	; (8007314 <netif_do_set_ipaddr+0x90>)
 80072a0:	f009 ff06 	bl	80110b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <netif_do_set_ipaddr+0x34>
 80072aa:	4b18      	ldr	r3, [pc, #96]	; (800730c <netif_do_set_ipaddr+0x88>)
 80072ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80072b0:	4917      	ldr	r1, [pc, #92]	; (8007310 <netif_do_set_ipaddr+0x8c>)
 80072b2:	4818      	ldr	r0, [pc, #96]	; (8007314 <netif_do_set_ipaddr+0x90>)
 80072b4:	f009 fefc 	bl	80110b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3304      	adds	r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d01c      	beq.n	8007300 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3304      	adds	r3, #4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80072d6:	f107 0314 	add.w	r3, r7, #20
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ffbf 	bl	8007260 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <netif_do_set_ipaddr+0x6a>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	e000      	b.n	80072f0 <netif_do_set_ipaddr+0x6c>
 80072ee:	2300      	movs	r3, #0
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80072f4:	2101      	movs	r1, #1
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f8d2 	bl	80074a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	0801254c 	.word	0x0801254c
 8007310:	08012664 	.word	0x08012664
 8007314:	0801259c 	.word	0x0801259c

08007318 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3308      	adds	r3, #8
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d00a      	beq.n	8007348 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <netif_do_set_netmask+0x26>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	e000      	b.n	8007340 <netif_do_set_netmask+0x28>
 800733e:	2300      	movs	r3, #0
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	330c      	adds	r3, #12
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d00a      	beq.n	8007386 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <netif_do_set_gw+0x26>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	e000      	b.n	800737e <netif_do_set_gw+0x28>
 800737c:	2300      	movs	r3, #0
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80073b0:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <netif_set_addr+0x90>)
 80073b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <netif_set_addr+0x90>)
 80073bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80073c4:	4b17      	ldr	r3, [pc, #92]	; (8007424 <netif_set_addr+0x90>)
 80073c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <netif_set_addr+0x42>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <netif_set_addr+0x46>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <netif_set_addr+0x48>
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d006      	beq.n	80073f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80073e4:	f107 0310 	add.w	r3, r7, #16
 80073e8:	461a      	mov	r2, r3
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff ff49 	bl	8007284 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80073f2:	69fa      	ldr	r2, [r7, #28]
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff ff8e 	bl	8007318 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff ffa8 	bl	8007356 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800740c:	f107 0310 	add.w	r3, r7, #16
 8007410:	461a      	mov	r2, r3
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ff35 	bl	8007284 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800741a:	bf00      	nop
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	08015610 	.word	0x08015610

08007428 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007430:	4a04      	ldr	r2, [pc, #16]	; (8007444 <netif_set_default+0x1c>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20008c20 	.word	0x20008c20

08007448 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <netif_set_up+0x1e>
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <netif_set_up+0x4c>)
 8007458:	f44f 7254 	mov.w	r2, #848	; 0x350
 800745c:	490e      	ldr	r1, [pc, #56]	; (8007498 <netif_set_up+0x50>)
 800745e:	480f      	ldr	r0, [pc, #60]	; (800749c <netif_set_up+0x54>)
 8007460:	f009 fe26 	bl	80110b0 <iprintf>
 8007464:	e013      	b.n	800748e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10c      	bne.n	800748e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007486:	2103      	movs	r1, #3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f809 	bl	80074a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	0801254c 	.word	0x0801254c
 8007498:	080126d4 	.word	0x080126d4
 800749c:	0801259c 	.word	0x0801259c

080074a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <netif_issue_reports+0x20>
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <netif_issue_reports+0x74>)
 80074b4:	f240 326d 	movw	r2, #877	; 0x36d
 80074b8:	4917      	ldr	r1, [pc, #92]	; (8007518 <netif_issue_reports+0x78>)
 80074ba:	4818      	ldr	r0, [pc, #96]	; (800751c <netif_issue_reports+0x7c>)
 80074bc:	f009 fdf8 	bl	80110b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01e      	beq.n	800750c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f008 f947 	bl	800f798 <etharp_request>
 800750a:	e000      	b.n	800750e <netif_issue_reports+0x6e>
    return;
 800750c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	0801254c 	.word	0x0801254c
 8007518:	080126f0 	.word	0x080126f0
 800751c:	0801259c 	.word	0x0801259c

08007520 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <netif_set_down+0x1e>
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <netif_set_down+0x58>)
 8007530:	f240 329b 	movw	r2, #923	; 0x39b
 8007534:	4911      	ldr	r1, [pc, #68]	; (800757c <netif_set_down+0x5c>)
 8007536:	4812      	ldr	r0, [pc, #72]	; (8007580 <netif_set_down+0x60>)
 8007538:	f009 fdba 	bl	80110b0 <iprintf>
 800753c:	e019      	b.n	8007572 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d012      	beq.n	8007572 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	b2da      	uxtb	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f007 fcd1 	bl	800ef14 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0801254c 	.word	0x0801254c
 800757c:	08012714 	.word	0x08012714
 8007580:	0801259c 	.word	0x0801259c

08007584 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <netif_set_link_up+0x1e>
 8007592:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <netif_set_link_up+0x5c>)
 8007594:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007598:	4912      	ldr	r1, [pc, #72]	; (80075e4 <netif_set_link_up+0x60>)
 800759a:	4813      	ldr	r0, [pc, #76]	; (80075e8 <netif_set_link_up+0x64>)
 800759c:	f009 fd88 	bl	80110b0 <iprintf>
 80075a0:	e01b      	b.n	80075da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d114      	bne.n	80075da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075b6:	f043 0304 	orr.w	r3, r3, #4
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80075c2:	2103      	movs	r1, #3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff6b 	bl	80074a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <netif_set_link_up+0x56>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	0801254c 	.word	0x0801254c
 80075e4:	08012734 	.word	0x08012734
 80075e8:	0801259c 	.word	0x0801259c

080075ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d107      	bne.n	800760a <netif_set_link_down+0x1e>
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <netif_set_link_down+0x54>)
 80075fc:	f240 4206 	movw	r2, #1030	; 0x406
 8007600:	4910      	ldr	r1, [pc, #64]	; (8007644 <netif_set_link_down+0x58>)
 8007602:	4811      	ldr	r0, [pc, #68]	; (8007648 <netif_set_link_down+0x5c>)
 8007604:	f009 fd54 	bl	80110b0 <iprintf>
 8007608:	e017      	b.n	800763a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d010      	beq.n	800763a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800761e:	f023 0304 	bic.w	r3, r3, #4
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <netif_set_link_down+0x4e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	0801254c 	.word	0x0801254c
 8007644:	08012758 	.word	0x08012758
 8007648:	0801259c 	.word	0x0801259c

0800764c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	61da      	str	r2, [r3, #28]
  }
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800767a:	f06f 030b 	mvn.w	r3, #11
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d013      	beq.n	80076c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800769c:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <netif_get_by_index+0x48>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e00c      	b.n	80076be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076aa:	3301      	adds	r3, #1
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	79fa      	ldrb	r2, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d101      	bne.n	80076b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	e006      	b.n	80076c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1ef      	bne.n	80076a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	20008c1c 	.word	0x20008c1c

080076d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <pbuf_free_ooseq+0x38>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <pbuf_free_ooseq+0x3c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	e00a      	b.n	8007702 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f002 fbe3 	bl	8009ec0 <tcp_free_ooseq>
      return;
 80076fa:	e005      	b.n	8007708 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f1      	bne.n	80076ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20008c25 	.word	0x20008c25
 8007714:	20008c34 	.word	0x20008c34

08007718 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800771c:	4b03      	ldr	r3, [pc, #12]	; (800772c <pbuf_pool_is_empty+0x14>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007722:	bf00      	nop
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20008c25 	.word	0x20008c25

08007730 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4611      	mov	r1, r2
 800773c:	461a      	mov	r2, r3
 800773e:	460b      	mov	r3, r1
 8007740:	80fb      	strh	r3, [r7, #6]
 8007742:	4613      	mov	r3, r2
 8007744:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88ba      	ldrh	r2, [r7, #4]
 800775c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800775e:	8b3b      	ldrh	r3, [r7, #24]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	7f3a      	ldrb	r2, [r7, #28]
 800776a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	73da      	strb	r2, [r3, #15]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af02      	add	r7, sp, #8
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]
 800778e:	460b      	mov	r3, r1
 8007790:	80bb      	strh	r3, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800779a:	887b      	ldrh	r3, [r7, #2]
 800779c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80077a0:	d07f      	beq.n	80078a2 <pbuf_alloc+0x11e>
 80077a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80077a6:	f300 80c8 	bgt.w	800793a <pbuf_alloc+0x1b6>
 80077aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80077ae:	d010      	beq.n	80077d2 <pbuf_alloc+0x4e>
 80077b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80077b4:	f300 80c1 	bgt.w	800793a <pbuf_alloc+0x1b6>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d002      	beq.n	80077c2 <pbuf_alloc+0x3e>
 80077bc:	2b41      	cmp	r3, #65	; 0x41
 80077be:	f040 80bc 	bne.w	800793a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80077c2:	887a      	ldrh	r2, [r7, #2]
 80077c4:	88bb      	ldrh	r3, [r7, #4]
 80077c6:	4619      	mov	r1, r3
 80077c8:	2000      	movs	r0, #0
 80077ca:	f000 f8d1 	bl	8007970 <pbuf_alloc_reference>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80077d0:	e0bd      	b.n	800794e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80077da:	88bb      	ldrh	r3, [r7, #4]
 80077dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80077de:	2008      	movs	r0, #8
 80077e0:	f7ff fbce 	bl	8006f80 <memp_malloc>
 80077e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80077ec:	f7ff ff94 	bl	8007718 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80077f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077f8:	f000 faa8 	bl	8007d4c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e0a7      	b.n	8007950 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007802:	3303      	adds	r3, #3
 8007804:	b29b      	uxth	r3, r3
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	b29b      	uxth	r3, r3
 800780c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007810:	b29b      	uxth	r3, r3
 8007812:	8b7a      	ldrh	r2, [r7, #26]
 8007814:	4293      	cmp	r3, r2
 8007816:	bf28      	it	cs
 8007818:	4613      	movcs	r3, r2
 800781a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800781c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800781e:	3310      	adds	r3, #16
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	3303      	adds	r3, #3
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	4618      	mov	r0, r3
 800782c:	89f9      	ldrh	r1, [r7, #14]
 800782e:	8b7a      	ldrh	r2, [r7, #26]
 8007830:	2300      	movs	r3, #0
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	887b      	ldrh	r3, [r7, #2]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	460b      	mov	r3, r1
 800783a:	4601      	mov	r1, r0
 800783c:	6938      	ldr	r0, [r7, #16]
 800783e:	f7ff ff77 	bl	8007730 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <pbuf_alloc+0xd8>
 800784e:	4b42      	ldr	r3, [pc, #264]	; (8007958 <pbuf_alloc+0x1d4>)
 8007850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007854:	4941      	ldr	r1, [pc, #260]	; (800795c <pbuf_alloc+0x1d8>)
 8007856:	4842      	ldr	r0, [pc, #264]	; (8007960 <pbuf_alloc+0x1dc>)
 8007858:	f009 fc2a 	bl	80110b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800785c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800785e:	3303      	adds	r3, #3
 8007860:	f023 0303 	bic.w	r3, r3, #3
 8007864:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007868:	d106      	bne.n	8007878 <pbuf_alloc+0xf4>
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <pbuf_alloc+0x1d4>)
 800786c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007870:	493c      	ldr	r1, [pc, #240]	; (8007964 <pbuf_alloc+0x1e0>)
 8007872:	483b      	ldr	r0, [pc, #236]	; (8007960 <pbuf_alloc+0x1dc>)
 8007874:	f009 fc1c 	bl	80110b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
 8007882:	e002      	b.n	800788a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800788e:	8b7a      	ldrh	r2, [r7, #26]
 8007890:	89fb      	ldrh	r3, [r7, #14]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800789a:	8b7b      	ldrh	r3, [r7, #26]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d19e      	bne.n	80077de <pbuf_alloc+0x5a>
      break;
 80078a0:	e055      	b.n	800794e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80078a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078a4:	3303      	adds	r3, #3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f023 0303 	bic.w	r3, r3, #3
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	88bb      	ldrh	r3, [r7, #4]
 80078b0:	3303      	adds	r3, #3
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80078be:	8b3b      	ldrh	r3, [r7, #24]
 80078c0:	3310      	adds	r3, #16
 80078c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078c4:	8b3a      	ldrh	r2, [r7, #24]
 80078c6:	88bb      	ldrh	r3, [r7, #4]
 80078c8:	3303      	adds	r3, #3
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d306      	bcc.n	80078e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80078d2:	8afa      	ldrh	r2, [r7, #22]
 80078d4:	88bb      	ldrh	r3, [r7, #4]
 80078d6:	3303      	adds	r3, #3
 80078d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078dc:	429a      	cmp	r2, r3
 80078de:	d201      	bcs.n	80078e4 <pbuf_alloc+0x160>
        return NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e035      	b.n	8007950 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80078e4:	8afb      	ldrh	r3, [r7, #22]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff f9ba 	bl	8006c60 <mem_malloc>
 80078ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <pbuf_alloc+0x174>
        return NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e02b      	b.n	8007950 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80078f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078fa:	3310      	adds	r3, #16
 80078fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fe:	4413      	add	r3, r2
 8007900:	3303      	adds	r3, #3
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	4618      	mov	r0, r3
 8007908:	88b9      	ldrh	r1, [r7, #4]
 800790a:	88ba      	ldrh	r2, [r7, #4]
 800790c:	2300      	movs	r3, #0
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	887b      	ldrh	r3, [r7, #2]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	460b      	mov	r3, r1
 8007916:	4601      	mov	r1, r0
 8007918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800791a:	f7ff ff09 	bl	8007730 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d010      	beq.n	800794c <pbuf_alloc+0x1c8>
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <pbuf_alloc+0x1d4>)
 800792c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007930:	490d      	ldr	r1, [pc, #52]	; (8007968 <pbuf_alloc+0x1e4>)
 8007932:	480b      	ldr	r0, [pc, #44]	; (8007960 <pbuf_alloc+0x1dc>)
 8007934:	f009 fbbc 	bl	80110b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007938:	e008      	b.n	800794c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <pbuf_alloc+0x1d4>)
 800793c:	f240 1227 	movw	r2, #295	; 0x127
 8007940:	490a      	ldr	r1, [pc, #40]	; (800796c <pbuf_alloc+0x1e8>)
 8007942:	4807      	ldr	r0, [pc, #28]	; (8007960 <pbuf_alloc+0x1dc>)
 8007944:	f009 fbb4 	bl	80110b0 <iprintf>
      return NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	e001      	b.n	8007950 <pbuf_alloc+0x1cc>
      break;
 800794c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007950:	4618      	mov	r0, r3
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	0801277c 	.word	0x0801277c
 800795c:	080127ac 	.word	0x080127ac
 8007960:	080127dc 	.word	0x080127dc
 8007964:	08012804 	.word	0x08012804
 8007968:	08012838 	.word	0x08012838
 800796c:	08012864 	.word	0x08012864

08007970 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af02      	add	r7, sp, #8
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
 800797c:	4613      	mov	r3, r2
 800797e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007980:	883b      	ldrh	r3, [r7, #0]
 8007982:	2b41      	cmp	r3, #65	; 0x41
 8007984:	d009      	beq.n	800799a <pbuf_alloc_reference+0x2a>
 8007986:	883b      	ldrh	r3, [r7, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d006      	beq.n	800799a <pbuf_alloc_reference+0x2a>
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <pbuf_alloc_reference+0x5c>)
 800798e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007992:	490f      	ldr	r1, [pc, #60]	; (80079d0 <pbuf_alloc_reference+0x60>)
 8007994:	480f      	ldr	r0, [pc, #60]	; (80079d4 <pbuf_alloc_reference+0x64>)
 8007996:	f009 fb8b 	bl	80110b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800799a:	2007      	movs	r0, #7
 800799c:	f7ff faf0 	bl	8006f80 <memp_malloc>
 80079a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e00b      	b.n	80079c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80079ac:	8879      	ldrh	r1, [r7, #2]
 80079ae:	887a      	ldrh	r2, [r7, #2]
 80079b0:	2300      	movs	r3, #0
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	883b      	ldrh	r3, [r7, #0]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	460b      	mov	r3, r1
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff feb7 	bl	8007730 <pbuf_init_alloced_pbuf>
  return p;
 80079c2:	68fb      	ldr	r3, [r7, #12]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	0801277c 	.word	0x0801277c
 80079d0:	08012880 	.word	0x08012880
 80079d4:	080127dc 	.word	0x080127dc

080079d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af02      	add	r7, sp, #8
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	460b      	mov	r3, r1
 80079e6:	81bb      	strh	r3, [r7, #12]
 80079e8:	4613      	mov	r3, r2
 80079ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079f0:	8a7b      	ldrh	r3, [r7, #18]
 80079f2:	3303      	adds	r3, #3
 80079f4:	f023 0203 	bic.w	r2, r3, #3
 80079f8:	89bb      	ldrh	r3, [r7, #12]
 80079fa:	441a      	add	r2, r3
 80079fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d901      	bls.n	8007a06 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e018      	b.n	8007a38 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007a0c:	8a7b      	ldrh	r3, [r7, #18]
 8007a0e:	3303      	adds	r3, #3
 8007a10:	f023 0303 	bic.w	r3, r3, #3
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	4413      	add	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e001      	b.n	8007a20 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	89b9      	ldrh	r1, [r7, #12]
 8007a24:	89ba      	ldrh	r2, [r7, #12]
 8007a26:	2302      	movs	r3, #2
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	897b      	ldrh	r3, [r7, #10]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	6979      	ldr	r1, [r7, #20]
 8007a32:	f7ff fe7d 	bl	8007730 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007a36:	687b      	ldr	r3, [r7, #4]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <pbuf_realloc+0x20>
 8007a52:	4b3a      	ldr	r3, [pc, #232]	; (8007b3c <pbuf_realloc+0xfc>)
 8007a54:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007a58:	4939      	ldr	r1, [pc, #228]	; (8007b40 <pbuf_realloc+0x100>)
 8007a5a:	483a      	ldr	r0, [pc, #232]	; (8007b44 <pbuf_realloc+0x104>)
 8007a5c:	f009 fb28 	bl	80110b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	891b      	ldrh	r3, [r3, #8]
 8007a64:	887a      	ldrh	r2, [r7, #2]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d263      	bcs.n	8007b32 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	891a      	ldrh	r2, [r3, #8]
 8007a6e:	887b      	ldrh	r3, [r7, #2]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007a74:	887b      	ldrh	r3, [r7, #2]
 8007a76:	817b      	strh	r3, [r7, #10]
  q = p;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007a7c:	e018      	b.n	8007ab0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	895b      	ldrh	r3, [r3, #10]
 8007a82:	897a      	ldrh	r2, [r7, #10]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	891a      	ldrh	r2, [r3, #8]
 8007a8c:	893b      	ldrh	r3, [r7, #8]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <pbuf_realloc+0x70>
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <pbuf_realloc+0xfc>)
 8007aa4:	f240 12af 	movw	r2, #431	; 0x1af
 8007aa8:	4927      	ldr	r1, [pc, #156]	; (8007b48 <pbuf_realloc+0x108>)
 8007aaa:	4826      	ldr	r0, [pc, #152]	; (8007b44 <pbuf_realloc+0x104>)
 8007aac:	f009 fb00 	bl	80110b0 <iprintf>
  while (rem_len > q->len) {
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	895b      	ldrh	r3, [r3, #10]
 8007ab4:	897a      	ldrh	r2, [r7, #10]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d8e1      	bhi.n	8007a7e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	7b1b      	ldrb	r3, [r3, #12]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d121      	bne.n	8007b0a <pbuf_realloc+0xca>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	895b      	ldrh	r3, [r3, #10]
 8007aca:	897a      	ldrh	r2, [r7, #10]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d01c      	beq.n	8007b0a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	7b5b      	ldrb	r3, [r3, #13]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d116      	bne.n	8007b0a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	897b      	ldrh	r3, [r7, #10]
 8007ae8:	4413      	add	r3, r2
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7fe ffba 	bl	8006a68 <mem_trim>
 8007af4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <pbuf_realloc+0xca>
 8007afc:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <pbuf_realloc+0xfc>)
 8007afe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007b02:	4912      	ldr	r1, [pc, #72]	; (8007b4c <pbuf_realloc+0x10c>)
 8007b04:	480f      	ldr	r0, [pc, #60]	; (8007b44 <pbuf_realloc+0x104>)
 8007b06:	f009 fad3 	bl	80110b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	897a      	ldrh	r2, [r7, #10]
 8007b0e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	895a      	ldrh	r2, [r3, #10]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f911 	bl	8007d4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e000      	b.n	8007b34 <pbuf_realloc+0xf4>
    return;
 8007b32:	bf00      	nop

}
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	0801277c 	.word	0x0801277c
 8007b40:	08012894 	.word	0x08012894
 8007b44:	080127dc 	.word	0x080127dc
 8007b48:	080128ac 	.word	0x080128ac
 8007b4c:	080128c4 	.word	0x080128c4

08007b50 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <pbuf_add_header_impl+0x22>
 8007b64:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <pbuf_add_header_impl+0xc4>)
 8007b66:	f240 12df 	movw	r2, #479	; 0x1df
 8007b6a:	492b      	ldr	r1, [pc, #172]	; (8007c18 <pbuf_add_header_impl+0xc8>)
 8007b6c:	482b      	ldr	r0, [pc, #172]	; (8007c1c <pbuf_add_header_impl+0xcc>)
 8007b6e:	f009 fa9f 	bl	80110b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <pbuf_add_header_impl+0x30>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7e:	d301      	bcc.n	8007b84 <pbuf_add_header_impl+0x34>
    return 1;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e043      	b.n	8007c0c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <pbuf_add_header_impl+0x3e>
    return 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e03e      	b.n	8007c0c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	891a      	ldrh	r2, [r3, #8]
 8007b96:	8a7b      	ldrh	r3, [r7, #18]
 8007b98:	4413      	add	r3, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8a7a      	ldrh	r2, [r7, #18]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d901      	bls.n	8007ba6 <pbuf_add_header_impl+0x56>
    return 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e032      	b.n	8007c0c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	7b1b      	ldrb	r3, [r3, #12]
 8007baa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007bac:	8a3b      	ldrh	r3, [r7, #16]
 8007bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00c      	beq.n	8007bd0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	425b      	negs	r3, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d20d      	bcs.n	8007be8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e01d      	b.n	8007c0c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d006      	beq.n	8007be4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	425b      	negs	r3, r3
 8007bde:	4413      	add	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e001      	b.n	8007be8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e011      	b.n	8007c0c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	895a      	ldrh	r2, [r3, #10]
 8007bf2:	8a7b      	ldrh	r3, [r7, #18]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	891a      	ldrh	r2, [r3, #8]
 8007c00:	8a7b      	ldrh	r3, [r7, #18]
 8007c02:	4413      	add	r3, r2
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	811a      	strh	r2, [r3, #8]


  return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	0801277c 	.word	0x0801277c
 8007c18:	080128e0 	.word	0x080128e0
 8007c1c:	080127dc 	.word	0x080127dc

08007c20 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff ff8e 	bl	8007b50 <pbuf_add_header_impl>
 8007c34:	4603      	mov	r3, r0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <pbuf_remove_header+0x1e>
 8007c50:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <pbuf_remove_header+0x94>)
 8007c52:	f240 224b 	movw	r2, #587	; 0x24b
 8007c56:	4920      	ldr	r1, [pc, #128]	; (8007cd8 <pbuf_remove_header+0x98>)
 8007c58:	4820      	ldr	r0, [pc, #128]	; (8007cdc <pbuf_remove_header+0x9c>)
 8007c5a:	f009 fa29 	bl	80110b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <pbuf_remove_header+0x2c>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6a:	d301      	bcc.n	8007c70 <pbuf_remove_header+0x30>
    return 1;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e02c      	b.n	8007cca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <pbuf_remove_header+0x3a>
    return 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e027      	b.n	8007cca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	895b      	ldrh	r3, [r3, #10]
 8007c82:	89fa      	ldrh	r2, [r7, #14]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d908      	bls.n	8007c9a <pbuf_remove_header+0x5a>
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <pbuf_remove_header+0x94>)
 8007c8a:	f240 2255 	movw	r2, #597	; 0x255
 8007c8e:	4914      	ldr	r1, [pc, #80]	; (8007ce0 <pbuf_remove_header+0xa0>)
 8007c90:	4812      	ldr	r0, [pc, #72]	; (8007cdc <pbuf_remove_header+0x9c>)
 8007c92:	f009 fa0d 	bl	80110b0 <iprintf>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e017      	b.n	8007cca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	441a      	add	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	895a      	ldrh	r2, [r3, #10]
 8007cb0:	89fb      	ldrh	r3, [r7, #14]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	891a      	ldrh	r2, [r3, #8]
 8007cbe:	89fb      	ldrh	r3, [r7, #14]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	0801277c 	.word	0x0801277c
 8007cd8:	080128e0 	.word	0x080128e0
 8007cdc:	080127dc 	.word	0x080127dc
 8007ce0:	080128ec 	.word	0x080128ec

08007ce4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007cf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da08      	bge.n	8007d0e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007cfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d00:	425b      	negs	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff9b 	bl	8007c40 <pbuf_remove_header>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	e007      	b.n	8007d1e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007d0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d12:	787a      	ldrb	r2, [r7, #1]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff ff1a 	bl	8007b50 <pbuf_add_header_impl>
 8007d1c:	4603      	mov	r3, r0
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d36:	2201      	movs	r2, #1
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff ffd2 	bl	8007ce4 <pbuf_header_impl>
 8007d40:	4603      	mov	r3, r0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <pbuf_free+0x22>
 8007d60:	4b38      	ldr	r3, [pc, #224]	; (8007e44 <pbuf_free+0xf8>)
 8007d62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007d66:	4938      	ldr	r1, [pc, #224]	; (8007e48 <pbuf_free+0xfc>)
 8007d68:	4838      	ldr	r0, [pc, #224]	; (8007e4c <pbuf_free+0x100>)
 8007d6a:	f009 f9a1 	bl	80110b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e063      	b.n	8007e3a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007d76:	e05c      	b.n	8007e32 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7b9b      	ldrb	r3, [r3, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <pbuf_free+0x42>
 8007d80:	4b30      	ldr	r3, [pc, #192]	; (8007e44 <pbuf_free+0xf8>)
 8007d82:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007d86:	4932      	ldr	r1, [pc, #200]	; (8007e50 <pbuf_free+0x104>)
 8007d88:	4830      	ldr	r0, [pc, #192]	; (8007e4c <pbuf_free+0x100>)
 8007d8a:	f009 f991 	bl	80110b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7b9b      	ldrb	r3, [r3, #14]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	739a      	strb	r2, [r3, #14]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7b9b      	ldrb	r3, [r3, #14]
 8007d9e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007da0:	7dbb      	ldrb	r3, [r7, #22]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d143      	bne.n	8007e2e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	7b1b      	ldrb	r3, [r3, #12]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7b5b      	ldrb	r3, [r3, #13]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <pbuf_free+0x90>
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <pbuf_free+0xf8>)
 8007dd0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007dd4:	491f      	ldr	r1, [pc, #124]	; (8007e54 <pbuf_free+0x108>)
 8007dd6:	481d      	ldr	r0, [pc, #116]	; (8007e4c <pbuf_free+0x100>)
 8007dd8:	f009 f96a 	bl	80110b0 <iprintf>
        pc->custom_free_function(p);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
 8007de4:	e01d      	b.n	8007e22 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d104      	bne.n	8007df6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	2008      	movs	r0, #8
 8007df0:	f7ff f936 	bl	8007060 <memp_free>
 8007df4:	e015      	b.n	8007e22 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d104      	bne.n	8007e06 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	2007      	movs	r0, #7
 8007e00:	f7ff f92e 	bl	8007060 <memp_free>
 8007e04:	e00d      	b.n	8007e22 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <pbuf_free+0xc8>
          mem_free(p);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe fdc1 	bl	8006994 <mem_free>
 8007e12:	e006      	b.n	8007e22 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <pbuf_free+0xf8>)
 8007e16:	f240 320f 	movw	r2, #783	; 0x30f
 8007e1a:	490f      	ldr	r1, [pc, #60]	; (8007e58 <pbuf_free+0x10c>)
 8007e1c:	480b      	ldr	r0, [pc, #44]	; (8007e4c <pbuf_free+0x100>)
 8007e1e:	f009 f947 	bl	80110b0 <iprintf>
        }
      }
      count++;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	3301      	adds	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e001      	b.n	8007e32 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d19f      	bne.n	8007d78 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0801277c 	.word	0x0801277c
 8007e48:	080128e0 	.word	0x080128e0
 8007e4c:	080127dc 	.word	0x080127dc
 8007e50:	0801290c 	.word	0x0801290c
 8007e54:	08012924 	.word	0x08012924
 8007e58:	08012948 	.word	0x08012948

08007e5c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007e68:	e005      	b.n	8007e76 <pbuf_clen+0x1a>
    ++len;
 8007e6a:	89fb      	ldrh	r3, [r7, #14]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f6      	bne.n	8007e6a <pbuf_clen+0xe>
  }
  return len;
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d010      	beq.n	8007ebc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7b9b      	ldrb	r3, [r3, #14]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7b9b      	ldrb	r3, [r3, #14]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <pbuf_ref+0x30>
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <pbuf_ref+0x38>)
 8007eb0:	f240 3242 	movw	r2, #834	; 0x342
 8007eb4:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <pbuf_ref+0x3c>)
 8007eb6:	4805      	ldr	r0, [pc, #20]	; (8007ecc <pbuf_ref+0x40>)
 8007eb8:	f009 f8fa 	bl	80110b0 <iprintf>
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	0801277c 	.word	0x0801277c
 8007ec8:	0801295c 	.word	0x0801295c
 8007ecc:	080127dc 	.word	0x080127dc

08007ed0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <pbuf_cat+0x16>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d107      	bne.n	8007ef6 <pbuf_cat+0x26>
 8007ee6:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <pbuf_cat+0x98>)
 8007ee8:	f240 3259 	movw	r2, #857	; 0x359
 8007eec:	491f      	ldr	r1, [pc, #124]	; (8007f6c <pbuf_cat+0x9c>)
 8007eee:	4820      	ldr	r0, [pc, #128]	; (8007f70 <pbuf_cat+0xa0>)
 8007ef0:	f009 f8de 	bl	80110b0 <iprintf>
 8007ef4:	e034      	b.n	8007f60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e00a      	b.n	8007f12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	891a      	ldrh	r2, [r3, #8]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	891b      	ldrh	r3, [r3, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1f0      	bne.n	8007efc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	891a      	ldrh	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	895b      	ldrh	r3, [r3, #10]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d006      	beq.n	8007f34 <pbuf_cat+0x64>
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <pbuf_cat+0x98>)
 8007f28:	f240 3262 	movw	r2, #866	; 0x362
 8007f2c:	4911      	ldr	r1, [pc, #68]	; (8007f74 <pbuf_cat+0xa4>)
 8007f2e:	4810      	ldr	r0, [pc, #64]	; (8007f70 <pbuf_cat+0xa0>)
 8007f30:	f009 f8be 	bl	80110b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <pbuf_cat+0x7a>
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <pbuf_cat+0x98>)
 8007f3e:	f240 3263 	movw	r2, #867	; 0x363
 8007f42:	490d      	ldr	r1, [pc, #52]	; (8007f78 <pbuf_cat+0xa8>)
 8007f44:	480a      	ldr	r0, [pc, #40]	; (8007f70 <pbuf_cat+0xa0>)
 8007f46:	f009 f8b3 	bl	80110b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	891a      	ldrh	r2, [r3, #8]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	891b      	ldrh	r3, [r3, #8]
 8007f52:	4413      	add	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	0801277c 	.word	0x0801277c
 8007f6c:	08012970 	.word	0x08012970
 8007f70:	080127dc 	.word	0x080127dc
 8007f74:	080129a8 	.word	0x080129a8
 8007f78:	080129d8 	.word	0x080129d8

08007f7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <pbuf_copy+0x2a>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <pbuf_copy+0x2a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	891a      	ldrh	r2, [r3, #8]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	891b      	ldrh	r3, [r3, #8]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d209      	bcs.n	8007fba <pbuf_copy+0x3e>
 8007fa6:	4b57      	ldr	r3, [pc, #348]	; (8008104 <pbuf_copy+0x188>)
 8007fa8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007fac:	4956      	ldr	r1, [pc, #344]	; (8008108 <pbuf_copy+0x18c>)
 8007fae:	4857      	ldr	r0, [pc, #348]	; (800810c <pbuf_copy+0x190>)
 8007fb0:	f009 f87e 	bl	80110b0 <iprintf>
 8007fb4:	f06f 030f 	mvn.w	r3, #15
 8007fb8:	e09f      	b.n	80080fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	895b      	ldrh	r3, [r3, #10]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	895b      	ldrh	r3, [r3, #10]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1acb      	subs	r3, r1, r3
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d306      	bcc.n	8007fe0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	895b      	ldrh	r3, [r3, #10]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	e005      	b.n	8007fec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	895b      	ldrh	r3, [r3, #10]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	18d0      	adds	r0, r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4619      	mov	r1, r3
 8008000:	f009 f94f 	bl	80112a2 <memcpy>
    offset_to += len;
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	895b      	ldrh	r3, [r3, #10]
 8008018:	461a      	mov	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4293      	cmp	r3, r2
 800801e:	d906      	bls.n	800802e <pbuf_copy+0xb2>
 8008020:	4b38      	ldr	r3, [pc, #224]	; (8008104 <pbuf_copy+0x188>)
 8008022:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008026:	493a      	ldr	r1, [pc, #232]	; (8008110 <pbuf_copy+0x194>)
 8008028:	4838      	ldr	r0, [pc, #224]	; (800810c <pbuf_copy+0x190>)
 800802a:	f009 f841 	bl	80110b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	895b      	ldrh	r3, [r3, #10]
 8008032:	461a      	mov	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	4293      	cmp	r3, r2
 8008038:	d906      	bls.n	8008048 <pbuf_copy+0xcc>
 800803a:	4b32      	ldr	r3, [pc, #200]	; (8008104 <pbuf_copy+0x188>)
 800803c:	f240 32da 	movw	r2, #986	; 0x3da
 8008040:	4934      	ldr	r1, [pc, #208]	; (8008114 <pbuf_copy+0x198>)
 8008042:	4832      	ldr	r0, [pc, #200]	; (800810c <pbuf_copy+0x190>)
 8008044:	f009 f834 	bl	80110b0 <iprintf>
    if (offset_from >= p_from->len) {
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	895b      	ldrh	r3, [r3, #10]
 800804c:	461a      	mov	r2, r3
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4293      	cmp	r3, r2
 8008052:	d304      	bcc.n	800805e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	895b      	ldrh	r3, [r3, #10]
 8008062:	461a      	mov	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4293      	cmp	r3, r2
 8008068:	d114      	bne.n	8008094 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10c      	bne.n	8008094 <pbuf_copy+0x118>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <pbuf_copy+0x118>
 8008080:	4b20      	ldr	r3, [pc, #128]	; (8008104 <pbuf_copy+0x188>)
 8008082:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008086:	4924      	ldr	r1, [pc, #144]	; (8008118 <pbuf_copy+0x19c>)
 8008088:	4820      	ldr	r0, [pc, #128]	; (800810c <pbuf_copy+0x190>)
 800808a:	f009 f811 	bl	80110b0 <iprintf>
 800808e:	f06f 030f 	mvn.w	r3, #15
 8008092:	e032      	b.n	80080fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d013      	beq.n	80080c2 <pbuf_copy+0x146>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	895a      	ldrh	r2, [r3, #10]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	891b      	ldrh	r3, [r3, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d10d      	bne.n	80080c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <pbuf_copy+0x146>
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <pbuf_copy+0x188>)
 80080b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80080b4:	4919      	ldr	r1, [pc, #100]	; (800811c <pbuf_copy+0x1a0>)
 80080b6:	4815      	ldr	r0, [pc, #84]	; (800810c <pbuf_copy+0x190>)
 80080b8:	f008 fffa 	bl	80110b0 <iprintf>
 80080bc:	f06f 0305 	mvn.w	r3, #5
 80080c0:	e01b      	b.n	80080fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d013      	beq.n	80080f0 <pbuf_copy+0x174>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	895a      	ldrh	r2, [r3, #10]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	891b      	ldrh	r3, [r3, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d10d      	bne.n	80080f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <pbuf_copy+0x174>
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <pbuf_copy+0x188>)
 80080de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080e2:	490e      	ldr	r1, [pc, #56]	; (800811c <pbuf_copy+0x1a0>)
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <pbuf_copy+0x190>)
 80080e6:	f008 ffe3 	bl	80110b0 <iprintf>
 80080ea:	f06f 0305 	mvn.w	r3, #5
 80080ee:	e004      	b.n	80080fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f47f af61 	bne.w	8007fba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	0801277c 	.word	0x0801277c
 8008108:	08012a24 	.word	0x08012a24
 800810c:	080127dc 	.word	0x080127dc
 8008110:	08012a54 	.word	0x08012a54
 8008114:	08012a6c 	.word	0x08012a6c
 8008118:	08012a88 	.word	0x08012a88
 800811c:	08012a98 	.word	0x08012a98

08008120 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4611      	mov	r1, r2
 800812c:	461a      	mov	r2, r3
 800812e:	460b      	mov	r3, r1
 8008130:	80fb      	strh	r3, [r7, #6]
 8008132:	4613      	mov	r3, r2
 8008134:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d108      	bne.n	8008156 <pbuf_copy_partial+0x36>
 8008144:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <pbuf_copy_partial+0xd4>)
 8008146:	f240 420a 	movw	r2, #1034	; 0x40a
 800814a:	492b      	ldr	r1, [pc, #172]	; (80081f8 <pbuf_copy_partial+0xd8>)
 800814c:	482b      	ldr	r0, [pc, #172]	; (80081fc <pbuf_copy_partial+0xdc>)
 800814e:	f008 ffaf 	bl	80110b0 <iprintf>
 8008152:	2300      	movs	r3, #0
 8008154:	e04a      	b.n	80081ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d108      	bne.n	800816e <pbuf_copy_partial+0x4e>
 800815c:	4b25      	ldr	r3, [pc, #148]	; (80081f4 <pbuf_copy_partial+0xd4>)
 800815e:	f240 420b 	movw	r2, #1035	; 0x40b
 8008162:	4927      	ldr	r1, [pc, #156]	; (8008200 <pbuf_copy_partial+0xe0>)
 8008164:	4825      	ldr	r0, [pc, #148]	; (80081fc <pbuf_copy_partial+0xdc>)
 8008166:	f008 ffa3 	bl	80110b0 <iprintf>
 800816a:	2300      	movs	r3, #0
 800816c:	e03e      	b.n	80081ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	e034      	b.n	80081de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008174:	88bb      	ldrh	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <pbuf_copy_partial+0x70>
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	895b      	ldrh	r3, [r3, #10]
 800817e:	88ba      	ldrh	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d305      	bcc.n	8008190 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	895b      	ldrh	r3, [r3, #10]
 8008188:	88ba      	ldrh	r2, [r7, #4]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	80bb      	strh	r3, [r7, #4]
 800818e:	e023      	b.n	80081d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	895a      	ldrh	r2, [r3, #10]
 8008194:	88bb      	ldrh	r3, [r7, #4]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800819a:	8b3a      	ldrh	r2, [r7, #24]
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d901      	bls.n	80081a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80081a6:	8b7b      	ldrh	r3, [r7, #26]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	18d0      	adds	r0, r2, r3
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	88bb      	ldrh	r3, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	8b3a      	ldrh	r2, [r7, #24]
 80081b6:	4619      	mov	r1, r3
 80081b8:	f009 f873 	bl	80112a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80081bc:	8afa      	ldrh	r2, [r7, #22]
 80081be:	8b3b      	ldrh	r3, [r7, #24]
 80081c0:	4413      	add	r3, r2
 80081c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80081c4:	8b7a      	ldrh	r2, [r7, #26]
 80081c6:	8b3b      	ldrh	r3, [r7, #24]
 80081c8:	4413      	add	r3, r2
 80081ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	8b3b      	ldrh	r3, [r7, #24]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <pbuf_copy_partial+0xca>
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1c4      	bne.n	8008174 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80081ea:	8afb      	ldrh	r3, [r7, #22]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	0801277c 	.word	0x0801277c
 80081f8:	08012ac4 	.word	0x08012ac4
 80081fc:	080127dc 	.word	0x080127dc
 8008200:	08012ae4 	.word	0x08012ae4

08008204 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	603a      	str	r2, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
 8008210:	460b      	mov	r3, r1
 8008212:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	8919      	ldrh	r1, [r3, #8]
 8008218:	88ba      	ldrh	r2, [r7, #4]
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fab1 	bl	8007784 <pbuf_alloc>
 8008222:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <pbuf_clone+0x2a>
    return NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	e011      	b.n	8008252 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fea3 	bl	8007f7c <pbuf_copy>
 8008236:	4603      	mov	r3, r0
 8008238:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800823a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <pbuf_clone+0x4c>
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <pbuf_clone+0x58>)
 8008244:	f240 5224 	movw	r2, #1316	; 0x524
 8008248:	4905      	ldr	r1, [pc, #20]	; (8008260 <pbuf_clone+0x5c>)
 800824a:	4806      	ldr	r0, [pc, #24]	; (8008264 <pbuf_clone+0x60>)
 800824c:	f008 ff30 	bl	80110b0 <iprintf>
  return q;
 8008250:	68fb      	ldr	r3, [r7, #12]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	0801277c 	.word	0x0801277c
 8008260:	08012bf0 	.word	0x08012bf0
 8008264:	080127dc 	.word	0x080127dc

08008268 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800826c:	f008 fe20 	bl	8010eb0 <rand>
 8008270:	4603      	mov	r3, r0
 8008272:	b29b      	uxth	r3, r3
 8008274:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008278:	b29b      	uxth	r3, r3
 800827a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800827e:	b29a      	uxth	r2, r3
 8008280:	4b01      	ldr	r3, [pc, #4]	; (8008288 <tcp_init+0x20>)
 8008282:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008284:	bf00      	nop
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000020 	.word	0x20000020

0800828c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7d1b      	ldrb	r3, [r3, #20]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d105      	bne.n	80082a8 <tcp_free+0x1c>
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <tcp_free+0x2c>)
 800829e:	22d4      	movs	r2, #212	; 0xd4
 80082a0:	4906      	ldr	r1, [pc, #24]	; (80082bc <tcp_free+0x30>)
 80082a2:	4807      	ldr	r0, [pc, #28]	; (80082c0 <tcp_free+0x34>)
 80082a4:	f008 ff04 	bl	80110b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	2001      	movs	r0, #1
 80082ac:	f7fe fed8 	bl	8007060 <memp_free>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	08012c7c 	.word	0x08012c7c
 80082bc:	08012cac 	.word	0x08012cac
 80082c0:	08012cc0 	.word	0x08012cc0

080082c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7d1b      	ldrb	r3, [r3, #20]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <tcp_free_listen+0x1c>
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <tcp_free_listen+0x2c>)
 80082d6:	22df      	movs	r2, #223	; 0xdf
 80082d8:	4906      	ldr	r1, [pc, #24]	; (80082f4 <tcp_free_listen+0x30>)
 80082da:	4807      	ldr	r0, [pc, #28]	; (80082f8 <tcp_free_listen+0x34>)
 80082dc:	f008 fee8 	bl	80110b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	2002      	movs	r0, #2
 80082e4:	f7fe febc 	bl	8007060 <memp_free>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	08012c7c 	.word	0x08012c7c
 80082f4:	08012ce8 	.word	0x08012ce8
 80082f8:	08012cc0 	.word	0x08012cc0

080082fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008300:	f001 f85c 	bl	80093bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <tcp_tmr+0x28>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	4b05      	ldr	r3, [pc, #20]	; (8008324 <tcp_tmr+0x28>)
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <tcp_tmr+0x28>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800831c:	f000 fd0e 	bl	8008d3c <tcp_slowtmr>
  }
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20008c3d 	.word	0x20008c3d

08008328 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <tcp_remove_listener+0x1c>
 8008338:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <tcp_remove_listener+0x48>)
 800833a:	22ff      	movs	r2, #255	; 0xff
 800833c:	490d      	ldr	r1, [pc, #52]	; (8008374 <tcp_remove_listener+0x4c>)
 800833e:	480e      	ldr	r0, [pc, #56]	; (8008378 <tcp_remove_listener+0x50>)
 8008340:	f008 feb6 	bl	80110b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e00a      	b.n	8008360 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d102      	bne.n	800835a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f1      	bne.n	800834a <tcp_remove_listener+0x22>
    }
  }
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	08012c7c 	.word	0x08012c7c
 8008374:	08012d04 	.word	0x08012d04
 8008378:	08012cc0 	.word	0x08012cc0

0800837c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <tcp_listen_closed+0x1c>
 800838a:	4b14      	ldr	r3, [pc, #80]	; (80083dc <tcp_listen_closed+0x60>)
 800838c:	f240 1211 	movw	r2, #273	; 0x111
 8008390:	4913      	ldr	r1, [pc, #76]	; (80083e0 <tcp_listen_closed+0x64>)
 8008392:	4814      	ldr	r0, [pc, #80]	; (80083e4 <tcp_listen_closed+0x68>)
 8008394:	f008 fe8c 	bl	80110b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7d1b      	ldrb	r3, [r3, #20]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d006      	beq.n	80083ae <tcp_listen_closed+0x32>
 80083a0:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <tcp_listen_closed+0x60>)
 80083a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80083a6:	4910      	ldr	r1, [pc, #64]	; (80083e8 <tcp_listen_closed+0x6c>)
 80083a8:	480e      	ldr	r0, [pc, #56]	; (80083e4 <tcp_listen_closed+0x68>)
 80083aa:	f008 fe81 	bl	80110b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083ae:	2301      	movs	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e00b      	b.n	80083cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80083b4:	4a0d      	ldr	r2, [pc, #52]	; (80083ec <tcp_listen_closed+0x70>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff ffb1 	bl	8008328 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d9f0      	bls.n	80083b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	08012c7c 	.word	0x08012c7c
 80083e0:	08012d2c 	.word	0x08012d2c
 80083e4:	08012cc0 	.word	0x08012cc0
 80083e8:	08012d38 	.word	0x08012d38
 80083ec:	080155e8 	.word	0x080155e8

080083f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af04      	add	r7, sp, #16
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <tcp_close_shutdown+0x20>
 8008402:	4b63      	ldr	r3, [pc, #396]	; (8008590 <tcp_close_shutdown+0x1a0>)
 8008404:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008408:	4962      	ldr	r1, [pc, #392]	; (8008594 <tcp_close_shutdown+0x1a4>)
 800840a:	4863      	ldr	r0, [pc, #396]	; (8008598 <tcp_close_shutdown+0x1a8>)
 800840c:	f008 fe50 	bl	80110b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d066      	beq.n	80084e4 <tcp_close_shutdown+0xf4>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7d1b      	ldrb	r3, [r3, #20]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d003      	beq.n	8008426 <tcp_close_shutdown+0x36>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	7d1b      	ldrb	r3, [r3, #20]
 8008422:	2b07      	cmp	r3, #7
 8008424:	d15e      	bne.n	80084e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <tcp_close_shutdown+0x48>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008436:	d055      	beq.n	80084e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8b5b      	ldrh	r3, [r3, #26]
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <tcp_close_shutdown+0x62>
 8008444:	4b52      	ldr	r3, [pc, #328]	; (8008590 <tcp_close_shutdown+0x1a0>)
 8008446:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800844a:	4954      	ldr	r1, [pc, #336]	; (800859c <tcp_close_shutdown+0x1ac>)
 800844c:	4852      	ldr	r0, [pc, #328]	; (8008598 <tcp_close_shutdown+0x1a8>)
 800844e:	f008 fe2f 	bl	80110b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800845a:	687d      	ldr	r5, [r7, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	8ad2      	ldrh	r2, [r2, #22]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	8b09      	ldrh	r1, [r1, #24]
 8008468:	9102      	str	r1, [sp, #8]
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	462b      	mov	r3, r5
 8008470:	4622      	mov	r2, r4
 8008472:	4601      	mov	r1, r0
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f005 fd8f 	bl	800df98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fb6c 	bl	8009b58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008480:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <tcp_close_shutdown+0x1b0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d105      	bne.n	8008496 <tcp_close_shutdown+0xa6>
 800848a:	4b45      	ldr	r3, [pc, #276]	; (80085a0 <tcp_close_shutdown+0x1b0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	4a43      	ldr	r2, [pc, #268]	; (80085a0 <tcp_close_shutdown+0x1b0>)
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e013      	b.n	80084be <tcp_close_shutdown+0xce>
 8008496:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <tcp_close_shutdown+0x1b0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e00c      	b.n	80084b8 <tcp_close_shutdown+0xc8>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d104      	bne.n	80084b2 <tcp_close_shutdown+0xc2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	60da      	str	r2, [r3, #12]
 80084b0:	e005      	b.n	80084be <tcp_close_shutdown+0xce>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1ef      	bne.n	800849e <tcp_close_shutdown+0xae>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	4b37      	ldr	r3, [pc, #220]	; (80085a4 <tcp_close_shutdown+0x1b4>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80084ca:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <tcp_close_shutdown+0x1b8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d102      	bne.n	80084da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80084d4:	f004 f804 	bl	800c4e0 <tcp_trigger_input_pcb_close>
 80084d8:	e002      	b.n	80084e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fed6 	bl	800828c <tcp_free>
      }
      return ERR_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e050      	b.n	8008586 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7d1b      	ldrb	r3, [r3, #20]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d03b      	beq.n	8008564 <tcp_close_shutdown+0x174>
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	dc44      	bgt.n	800857a <tcp_close_shutdown+0x18a>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <tcp_close_shutdown+0x10a>
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d02a      	beq.n	800854e <tcp_close_shutdown+0x15e>
 80084f8:	e03f      	b.n	800857a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8adb      	ldrh	r3, [r3, #22]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d021      	beq.n	8008546 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008502:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <tcp_close_shutdown+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	429a      	cmp	r2, r3
 800850a:	d105      	bne.n	8008518 <tcp_close_shutdown+0x128>
 800850c:	4b27      	ldr	r3, [pc, #156]	; (80085ac <tcp_close_shutdown+0x1bc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	4a26      	ldr	r2, [pc, #152]	; (80085ac <tcp_close_shutdown+0x1bc>)
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	e013      	b.n	8008540 <tcp_close_shutdown+0x150>
 8008518:	4b24      	ldr	r3, [pc, #144]	; (80085ac <tcp_close_shutdown+0x1bc>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	e00c      	b.n	800853a <tcp_close_shutdown+0x14a>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	d104      	bne.n	8008534 <tcp_close_shutdown+0x144>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	e005      	b.n	8008540 <tcp_close_shutdown+0x150>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1ef      	bne.n	8008520 <tcp_close_shutdown+0x130>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff fea0 	bl	800828c <tcp_free>
      break;
 800854c:	e01a      	b.n	8008584 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ff14 	bl	800837c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4816      	ldr	r0, [pc, #88]	; (80085b0 <tcp_close_shutdown+0x1c0>)
 8008558:	f001 fb4e 	bl	8009bf8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff feb1 	bl	80082c4 <tcp_free_listen>
      break;
 8008562:	e00f      	b.n	8008584 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	480e      	ldr	r0, [pc, #56]	; (80085a0 <tcp_close_shutdown+0x1b0>)
 8008568:	f001 fb46 	bl	8009bf8 <tcp_pcb_remove>
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <tcp_close_shutdown+0x1b4>)
 800856e:	2201      	movs	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fe8a 	bl	800828c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008578:	e004      	b.n	8008584 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f81a 	bl	80085b4 <tcp_close_shutdown_fin>
 8008580:	4603      	mov	r3, r0
 8008582:	e000      	b.n	8008586 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bdb0      	pop	{r4, r5, r7, pc}
 800858e:	bf00      	nop
 8008590:	08012c7c 	.word	0x08012c7c
 8008594:	08012d50 	.word	0x08012d50
 8008598:	08012cc0 	.word	0x08012cc0
 800859c:	08012d70 	.word	0x08012d70
 80085a0:	20008c34 	.word	0x20008c34
 80085a4:	20008c3c 	.word	0x20008c3c
 80085a8:	20008c74 	.word	0x20008c74
 80085ac:	20008c2c 	.word	0x20008c2c
 80085b0:	20008c30 	.word	0x20008c30

080085b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <tcp_close_shutdown_fin+0x1c>
 80085c2:	4b2e      	ldr	r3, [pc, #184]	; (800867c <tcp_close_shutdown_fin+0xc8>)
 80085c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80085c8:	492d      	ldr	r1, [pc, #180]	; (8008680 <tcp_close_shutdown_fin+0xcc>)
 80085ca:	482e      	ldr	r0, [pc, #184]	; (8008684 <tcp_close_shutdown_fin+0xd0>)
 80085cc:	f008 fd70 	bl	80110b0 <iprintf>

  switch (pcb->state) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7d1b      	ldrb	r3, [r3, #20]
 80085d4:	2b07      	cmp	r3, #7
 80085d6:	d020      	beq.n	800861a <tcp_close_shutdown_fin+0x66>
 80085d8:	2b07      	cmp	r3, #7
 80085da:	dc2b      	bgt.n	8008634 <tcp_close_shutdown_fin+0x80>
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d002      	beq.n	80085e6 <tcp_close_shutdown_fin+0x32>
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d00d      	beq.n	8008600 <tcp_close_shutdown_fin+0x4c>
 80085e4:	e026      	b.n	8008634 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f004 fde4 	bl	800d1b4 <tcp_send_fin>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80085f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11f      	bne.n	8008638 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2205      	movs	r2, #5
 80085fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085fe:	e01b      	b.n	8008638 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f004 fdd7 	bl	800d1b4 <tcp_send_fin>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800860a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d114      	bne.n	800863c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2205      	movs	r2, #5
 8008616:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008618:	e010      	b.n	800863c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f004 fdca 	bl	800d1b4 <tcp_send_fin>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2209      	movs	r2, #9
 8008630:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008632:	e005      	b.n	8008640 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	e01c      	b.n	8008672 <tcp_close_shutdown_fin+0xbe>
      break;
 8008638:	bf00      	nop
 800863a:	e002      	b.n	8008642 <tcp_close_shutdown_fin+0x8e>
      break;
 800863c:	bf00      	nop
 800863e:	e000      	b.n	8008642 <tcp_close_shutdown_fin+0x8e>
      break;
 8008640:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f004 fef0 	bl	800d430 <tcp_output>
 8008650:	e00d      	b.n	800866e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d108      	bne.n	800866e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8b5b      	ldrh	r3, [r3, #26]
 8008660:	f043 0308 	orr.w	r3, r3, #8
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e001      	b.n	8008672 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800866e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	08012c7c 	.word	0x08012c7c
 8008680:	08012d2c 	.word	0x08012d2c
 8008684:	08012cc0 	.word	0x08012cc0

08008688 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <tcp_close+0x22>
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <tcp_close+0x4c>)
 8008698:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800869c:	490e      	ldr	r1, [pc, #56]	; (80086d8 <tcp_close+0x50>)
 800869e:	480f      	ldr	r0, [pc, #60]	; (80086dc <tcp_close+0x54>)
 80086a0:	f008 fd06 	bl	80110b0 <iprintf>
 80086a4:	f06f 030f 	mvn.w	r3, #15
 80086a8:	e00f      	b.n	80086ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7d1b      	ldrb	r3, [r3, #20]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d006      	beq.n	80086c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8b5b      	ldrh	r3, [r3, #26]
 80086b6:	f043 0310 	orr.w	r3, r3, #16
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80086c0:	2101      	movs	r1, #1
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fe94 	bl	80083f0 <tcp_close_shutdown>
 80086c8:	4603      	mov	r3, r0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	08012c7c 	.word	0x08012c7c
 80086d8:	08012d8c 	.word	0x08012d8c
 80086dc:	08012cc0 	.word	0x08012cc0

080086e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08e      	sub	sp, #56	; 0x38
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d107      	bne.n	8008700 <tcp_abandon+0x20>
 80086f0:	4b52      	ldr	r3, [pc, #328]	; (800883c <tcp_abandon+0x15c>)
 80086f2:	f240 223d 	movw	r2, #573	; 0x23d
 80086f6:	4952      	ldr	r1, [pc, #328]	; (8008840 <tcp_abandon+0x160>)
 80086f8:	4852      	ldr	r0, [pc, #328]	; (8008844 <tcp_abandon+0x164>)
 80086fa:	f008 fcd9 	bl	80110b0 <iprintf>
 80086fe:	e099      	b.n	8008834 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7d1b      	ldrb	r3, [r3, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d106      	bne.n	8008716 <tcp_abandon+0x36>
 8008708:	4b4c      	ldr	r3, [pc, #304]	; (800883c <tcp_abandon+0x15c>)
 800870a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800870e:	494e      	ldr	r1, [pc, #312]	; (8008848 <tcp_abandon+0x168>)
 8008710:	484c      	ldr	r0, [pc, #304]	; (8008844 <tcp_abandon+0x164>)
 8008712:	f008 fccd 	bl	80110b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7d1b      	ldrb	r3, [r3, #20]
 800871a:	2b0a      	cmp	r3, #10
 800871c:	d107      	bne.n	800872e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	484a      	ldr	r0, [pc, #296]	; (800884c <tcp_abandon+0x16c>)
 8008722:	f001 fa69 	bl	8009bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff fdb0 	bl	800828c <tcp_free>
 800872c:	e082      	b.n	8008834 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008748:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d126      	bne.n	80087a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8adb      	ldrh	r3, [r3, #22]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d02e      	beq.n	80087be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008760:	4b3b      	ldr	r3, [pc, #236]	; (8008850 <tcp_abandon+0x170>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	429a      	cmp	r2, r3
 8008768:	d105      	bne.n	8008776 <tcp_abandon+0x96>
 800876a:	4b39      	ldr	r3, [pc, #228]	; (8008850 <tcp_abandon+0x170>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	4a37      	ldr	r2, [pc, #220]	; (8008850 <tcp_abandon+0x170>)
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	e013      	b.n	800879e <tcp_abandon+0xbe>
 8008776:	4b36      	ldr	r3, [pc, #216]	; (8008850 <tcp_abandon+0x170>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e00c      	b.n	8008798 <tcp_abandon+0xb8>
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d104      	bne.n	8008792 <tcp_abandon+0xb2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e005      	b.n	800879e <tcp_abandon+0xbe>
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ef      	bne.n	800877e <tcp_abandon+0x9e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	60da      	str	r2, [r3, #12]
 80087a4:	e00b      	b.n	80087be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	8adb      	ldrh	r3, [r3, #22]
 80087ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4828      	ldr	r0, [pc, #160]	; (8008854 <tcp_abandon+0x174>)
 80087b4:	f001 fa20 	bl	8009bf8 <tcp_pcb_remove>
 80087b8:	4b27      	ldr	r3, [pc, #156]	; (8008858 <tcp_abandon+0x178>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d004      	beq.n	80087d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fed6 	bl	800957c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fecd 	bl	800957c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d004      	beq.n	80087f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fec4 	bl	800957c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00e      	beq.n	8008818 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3304      	adds	r3, #4
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	8b12      	ldrh	r2, [r2, #24]
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008808:	9201      	str	r2, [sp, #4]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	460b      	mov	r3, r1
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	69b9      	ldr	r1, [r7, #24]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f005 fbc0 	bl	800df98 <tcp_rst>
    }
    last_state = pcb->state;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7d1b      	ldrb	r3, [r3, #20]
 800881c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fd34 	bl	800828c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <tcp_abandon+0x154>
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f06f 010c 	mvn.w	r1, #12
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	4798      	blx	r3
  }
}
 8008834:	3728      	adds	r7, #40	; 0x28
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	08012c7c 	.word	0x08012c7c
 8008840:	08012dc0 	.word	0x08012dc0
 8008844:	08012cc0 	.word	0x08012cc0
 8008848:	08012ddc 	.word	0x08012ddc
 800884c:	20008c38 	.word	0x20008c38
 8008850:	20008c2c 	.word	0x20008c2c
 8008854:	20008c34 	.word	0x20008c34
 8008858:	20008c3c 	.word	0x20008c3c

0800885c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008864:	2101      	movs	r1, #1
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ff3a 	bl	80086e0 <tcp_abandon>
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008882:	2304      	movs	r3, #4
 8008884:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800888c:	4b3e      	ldr	r3, [pc, #248]	; (8008988 <tcp_bind+0x114>)
 800888e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <tcp_bind+0x36>
 8008896:	4b3d      	ldr	r3, [pc, #244]	; (800898c <tcp_bind+0x118>)
 8008898:	f240 22a9 	movw	r2, #681	; 0x2a9
 800889c:	493c      	ldr	r1, [pc, #240]	; (8008990 <tcp_bind+0x11c>)
 800889e:	483d      	ldr	r0, [pc, #244]	; (8008994 <tcp_bind+0x120>)
 80088a0:	f008 fc06 	bl	80110b0 <iprintf>
 80088a4:	f06f 030f 	mvn.w	r3, #15
 80088a8:	e06a      	b.n	8008980 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	7d1b      	ldrb	r3, [r3, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <tcp_bind+0x52>
 80088b2:	4b36      	ldr	r3, [pc, #216]	; (800898c <tcp_bind+0x118>)
 80088b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80088b8:	4937      	ldr	r1, [pc, #220]	; (8008998 <tcp_bind+0x124>)
 80088ba:	4836      	ldr	r0, [pc, #216]	; (8008994 <tcp_bind+0x120>)
 80088bc:	f008 fbf8 	bl	80110b0 <iprintf>
 80088c0:	f06f 0305 	mvn.w	r3, #5
 80088c4:	e05c      	b.n	8008980 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80088cc:	f000 f9f0 	bl	8008cb0 <tcp_new_port>
 80088d0:	4603      	mov	r3, r0
 80088d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d135      	bne.n	8008946 <tcp_bind+0xd2>
      return ERR_BUF;
 80088da:	f06f 0301 	mvn.w	r3, #1
 80088de:	e04f      	b.n	8008980 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	e02b      	b.n	800893e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80088e6:	4a2d      	ldr	r2, [pc, #180]	; (800899c <tcp_bind+0x128>)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e01e      	b.n	8008932 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	8adb      	ldrh	r3, [r3, #22]
 80088f8:	88fa      	ldrh	r2, [r7, #6]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d116      	bne.n	800892c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80088fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00c      	beq.n	8008926 <tcp_bind+0xb2>
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008922:	429a      	cmp	r2, r3
 8008924:	d102      	bne.n	800892c <tcp_bind+0xb8>
              return ERR_USE;
 8008926:	f06f 0307 	mvn.w	r3, #7
 800892a:	e029      	b.n	8008980 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1dd      	bne.n	80088f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	429a      	cmp	r2, r3
 8008944:	dbcf      	blt.n	80088e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00c      	beq.n	8008966 <tcp_bind+0xf2>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d008      	beq.n	8008966 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <tcp_bind+0xec>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	e000      	b.n	8008962 <tcp_bind+0xee>
 8008960:	2300      	movs	r3, #0
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <tcp_bind+0x12c>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	60da      	str	r2, [r3, #12]
 8008974:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <tcp_bind+0x12c>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	f005 fccf 	bl	800e31c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3720      	adds	r7, #32
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	08015610 	.word	0x08015610
 800898c:	08012c7c 	.word	0x08012c7c
 8008990:	08012e10 	.word	0x08012e10
 8008994:	08012cc0 	.word	0x08012cc0
 8008998:	08012e28 	.word	0x08012e28
 800899c:	080155e8 	.word	0x080155e8
 80089a0:	20008c2c 	.word	0x20008c2c

080089a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <tcp_accept_null+0x22>
 80089b8:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <tcp_accept_null+0x34>)
 80089ba:	f240 320f 	movw	r2, #783	; 0x30f
 80089be:	4907      	ldr	r1, [pc, #28]	; (80089dc <tcp_accept_null+0x38>)
 80089c0:	4807      	ldr	r0, [pc, #28]	; (80089e0 <tcp_accept_null+0x3c>)
 80089c2:	f008 fb75 	bl	80110b0 <iprintf>

  tcp_abort(pcb);
 80089c6:	68b8      	ldr	r0, [r7, #8]
 80089c8:	f7ff ff48 	bl	800885c <tcp_abort>

  return ERR_ABRT;
 80089cc:	f06f 030c 	mvn.w	r3, #12
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	08012c7c 	.word	0x08012c7c
 80089dc:	08012e50 	.word	0x08012e50
 80089e0:	08012cc0 	.word	0x08012cc0

080089e4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	2200      	movs	r2, #0
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f806 	bl	8008a08 <tcp_listen_with_backlog_and_err>
 80089fc:	4603      	mov	r3, r0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	460b      	mov	r3, r1
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <tcp_listen_with_backlog_and_err+0x2c>
 8008a20:	4b47      	ldr	r3, [pc, #284]	; (8008b40 <tcp_listen_with_backlog_and_err+0x138>)
 8008a22:	f240 3259 	movw	r2, #857	; 0x359
 8008a26:	4947      	ldr	r1, [pc, #284]	; (8008b44 <tcp_listen_with_backlog_and_err+0x13c>)
 8008a28:	4847      	ldr	r0, [pc, #284]	; (8008b48 <tcp_listen_with_backlog_and_err+0x140>)
 8008a2a:	f008 fb41 	bl	80110b0 <iprintf>
 8008a2e:	23f0      	movs	r3, #240	; 0xf0
 8008a30:	76fb      	strb	r3, [r7, #27]
 8008a32:	e079      	b.n	8008b28 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	7d1b      	ldrb	r3, [r3, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d009      	beq.n	8008a50 <tcp_listen_with_backlog_and_err+0x48>
 8008a3c:	4b40      	ldr	r3, [pc, #256]	; (8008b40 <tcp_listen_with_backlog_and_err+0x138>)
 8008a3e:	f240 325a 	movw	r2, #858	; 0x35a
 8008a42:	4942      	ldr	r1, [pc, #264]	; (8008b4c <tcp_listen_with_backlog_and_err+0x144>)
 8008a44:	4840      	ldr	r0, [pc, #256]	; (8008b48 <tcp_listen_with_backlog_and_err+0x140>)
 8008a46:	f008 fb33 	bl	80110b0 <iprintf>
 8008a4a:	23f1      	movs	r3, #241	; 0xf1
 8008a4c:	76fb      	strb	r3, [r7, #27]
 8008a4e:	e06b      	b.n	8008b28 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d104      	bne.n	8008a62 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008a5c:	23f7      	movs	r3, #247	; 0xf7
 8008a5e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a60:	e062      	b.n	8008b28 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008a62:	2002      	movs	r0, #2
 8008a64:	f7fe fa8c 	bl	8006f80 <memp_malloc>
 8008a68:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008a70:	23ff      	movs	r3, #255	; 0xff
 8008a72:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008a74:	e058      	b.n	8008b28 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8ada      	ldrh	r2, [r3, #22]
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7d5a      	ldrb	r2, [r3, #21]
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	7a5a      	ldrb	r2, [r3, #9]
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	7ada      	ldrb	r2, [r3, #11]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	7a9a      	ldrb	r2, [r3, #10]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8adb      	ldrh	r3, [r3, #22]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d021      	beq.n	8008b06 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ac2:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <tcp_listen_with_backlog_and_err+0x148>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d105      	bne.n	8008ad8 <tcp_listen_with_backlog_and_err+0xd0>
 8008acc:	4b20      	ldr	r3, [pc, #128]	; (8008b50 <tcp_listen_with_backlog_and_err+0x148>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <tcp_listen_with_backlog_and_err+0x148>)
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	e013      	b.n	8008b00 <tcp_listen_with_backlog_and_err+0xf8>
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <tcp_listen_with_backlog_and_err+0x148>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e00c      	b.n	8008afa <tcp_listen_with_backlog_and_err+0xf2>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d104      	bne.n	8008af4 <tcp_listen_with_backlog_and_err+0xec>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	e005      	b.n	8008b00 <tcp_listen_with_backlog_and_err+0xf8>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1ef      	bne.n	8008ae0 <tcp_listen_with_backlog_and_err+0xd8>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fbc0 	bl	800828c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	4a11      	ldr	r2, [pc, #68]	; (8008b54 <tcp_listen_with_backlog_and_err+0x14c>)
 8008b10:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008b12:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <tcp_listen_with_backlog_and_err+0x150>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <tcp_listen_with_backlog_and_err+0x150>)
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f005 fbfc 	bl	800e31c <tcp_timer_needed>
  res = ERR_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7efa      	ldrb	r2, [r7, #27]
 8008b32:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008b34:	69fb      	ldr	r3, [r7, #28]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	08012c7c 	.word	0x08012c7c
 8008b44:	08012e70 	.word	0x08012e70
 8008b48:	08012cc0 	.word	0x08012cc0
 8008b4c:	08012ea0 	.word	0x08012ea0
 8008b50:	20008c2c 	.word	0x20008c2c
 8008b54:	080089a5 	.word	0x080089a5
 8008b58:	20008c30 	.word	0x20008c30

08008b5c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <tcp_update_rcv_ann_wnd+0x1c>
 8008b6a:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <tcp_update_rcv_ann_wnd+0xa4>)
 8008b6c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008b70:	4924      	ldr	r1, [pc, #144]	; (8008c04 <tcp_update_rcv_ann_wnd+0xa8>)
 8008b72:	4825      	ldr	r0, [pc, #148]	; (8008c08 <tcp_update_rcv_ann_wnd+0xac>)
 8008b74:	f008 fa9c 	bl	80110b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b80:	4413      	add	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008b8c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008b90:	bf28      	it	cs
 8008b92:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008b96:	b292      	uxth	r2, r2
 8008b98:	4413      	add	r3, r2
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	db08      	blt.n	8008bb4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	e020      	b.n	8008bf6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dd03      	ble.n	8008bca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bc8:	e014      	b.n	8008bf4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bdc:	d306      	bcc.n	8008bec <tcp_update_rcv_ann_wnd+0x90>
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <tcp_update_rcv_ann_wnd+0xa4>)
 8008be0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008be4:	4909      	ldr	r1, [pc, #36]	; (8008c0c <tcp_update_rcv_ann_wnd+0xb0>)
 8008be6:	4808      	ldr	r0, [pc, #32]	; (8008c08 <tcp_update_rcv_ann_wnd+0xac>)
 8008be8:	f008 fa62 	bl	80110b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008bf4:	2300      	movs	r3, #0
  }
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08012c7c 	.word	0x08012c7c
 8008c04:	08012ed8 	.word	0x08012ed8
 8008c08:	08012cc0 	.word	0x08012cc0
 8008c0c:	08012efc 	.word	0x08012efc

08008c10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d107      	bne.n	8008c32 <tcp_recved+0x22>
 8008c22:	4b1f      	ldr	r3, [pc, #124]	; (8008ca0 <tcp_recved+0x90>)
 8008c24:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008c28:	491e      	ldr	r1, [pc, #120]	; (8008ca4 <tcp_recved+0x94>)
 8008c2a:	481f      	ldr	r0, [pc, #124]	; (8008ca8 <tcp_recved+0x98>)
 8008c2c:	f008 fa40 	bl	80110b0 <iprintf>
 8008c30:	e032      	b.n	8008c98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	7d1b      	ldrb	r3, [r3, #20]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d106      	bne.n	8008c48 <tcp_recved+0x38>
 8008c3a:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <tcp_recved+0x90>)
 8008c3c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008c40:	491a      	ldr	r1, [pc, #104]	; (8008cac <tcp_recved+0x9c>)
 8008c42:	4819      	ldr	r0, [pc, #100]	; (8008ca8 <tcp_recved+0x98>)
 8008c44:	f008 fa34 	bl	80110b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	4413      	add	r3, r2
 8008c50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008c52:	89fb      	ldrh	r3, [r7, #14]
 8008c54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c58:	d804      	bhi.n	8008c64 <tcp_recved+0x54>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5e:	89fa      	ldrh	r2, [r7, #14]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d204      	bcs.n	8008c6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c6a:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c6c:	e002      	b.n	8008c74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	89fa      	ldrh	r2, [r7, #14]
 8008c72:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ff71 	bl	8008b5c <tcp_update_rcv_ann_wnd>
 8008c7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c82:	d309      	bcc.n	8008c98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	8b5b      	ldrh	r3, [r3, #26]
 8008c88:	f043 0302 	orr.w	r3, r3, #2
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 fbcc 	bl	800d430 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08012c7c 	.word	0x08012c7c
 8008ca4:	08012f18 	.word	0x08012f18
 8008ca8:	08012cc0 	.word	0x08012cc0
 8008cac:	08012f30 	.word	0x08012f30

08008cb0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008cba:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <tcp_new_port+0x84>)
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <tcp_new_port+0x84>)
 8008cc4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008cc6:	4b1b      	ldr	r3, [pc, #108]	; (8008d34 <tcp_new_port+0x84>)
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d103      	bne.n	8008cda <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008cd2:	4b18      	ldr	r3, [pc, #96]	; (8008d34 <tcp_new_port+0x84>)
 8008cd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008cd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cda:	2300      	movs	r3, #0
 8008cdc:	71fb      	strb	r3, [r7, #7]
 8008cde:	e01e      	b.n	8008d1e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <tcp_new_port+0x88>)
 8008ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	e011      	b.n	8008d12 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	8ada      	ldrh	r2, [r3, #22]
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <tcp_new_port+0x84>)
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d108      	bne.n	8008d0c <tcp_new_port+0x5c>
        n++;
 8008cfa:	88bb      	ldrh	r3, [r7, #4]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008d00:	88bb      	ldrh	r3, [r7, #4]
 8008d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d06:	d3d8      	bcc.n	8008cba <tcp_new_port+0xa>
          return 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e00d      	b.n	8008d28 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1ea      	bne.n	8008cee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	71fb      	strb	r3, [r7, #7]
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d9dd      	bls.n	8008ce0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008d24:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <tcp_new_port+0x84>)
 8008d26:	881b      	ldrh	r3, [r3, #0]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	20000020 	.word	0x20000020
 8008d38:	080155e8 	.word	0x080155e8

08008d3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b090      	sub	sp, #64	; 0x40
 8008d40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008d48:	4b94      	ldr	r3, [pc, #592]	; (8008f9c <tcp_slowtmr+0x260>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	4a93      	ldr	r2, [pc, #588]	; (8008f9c <tcp_slowtmr+0x260>)
 8008d50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008d52:	4b93      	ldr	r3, [pc, #588]	; (8008fa0 <tcp_slowtmr+0x264>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	3301      	adds	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	4b91      	ldr	r3, [pc, #580]	; (8008fa0 <tcp_slowtmr+0x264>)
 8008d5c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008d62:	4b90      	ldr	r3, [pc, #576]	; (8008fa4 <tcp_slowtmr+0x268>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008d68:	e29d      	b.n	80092a6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	7d1b      	ldrb	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <tcp_slowtmr+0x44>
 8008d72:	4b8d      	ldr	r3, [pc, #564]	; (8008fa8 <tcp_slowtmr+0x26c>)
 8008d74:	f240 42be 	movw	r2, #1214	; 0x4be
 8008d78:	498c      	ldr	r1, [pc, #560]	; (8008fac <tcp_slowtmr+0x270>)
 8008d7a:	488d      	ldr	r0, [pc, #564]	; (8008fb0 <tcp_slowtmr+0x274>)
 8008d7c:	f008 f998 	bl	80110b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	7d1b      	ldrb	r3, [r3, #20]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d106      	bne.n	8008d96 <tcp_slowtmr+0x5a>
 8008d88:	4b87      	ldr	r3, [pc, #540]	; (8008fa8 <tcp_slowtmr+0x26c>)
 8008d8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008d8e:	4989      	ldr	r1, [pc, #548]	; (8008fb4 <tcp_slowtmr+0x278>)
 8008d90:	4887      	ldr	r0, [pc, #540]	; (8008fb0 <tcp_slowtmr+0x274>)
 8008d92:	f008 f98d 	bl	80110b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	2b0a      	cmp	r3, #10
 8008d9c:	d106      	bne.n	8008dac <tcp_slowtmr+0x70>
 8008d9e:	4b82      	ldr	r3, [pc, #520]	; (8008fa8 <tcp_slowtmr+0x26c>)
 8008da0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008da4:	4984      	ldr	r1, [pc, #528]	; (8008fb8 <tcp_slowtmr+0x27c>)
 8008da6:	4882      	ldr	r0, [pc, #520]	; (8008fb0 <tcp_slowtmr+0x274>)
 8008da8:	f008 f982 	bl	80110b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	7f9a      	ldrb	r2, [r3, #30]
 8008db0:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <tcp_slowtmr+0x264>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d105      	bne.n	8008dc4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008dc2:	e270      	b.n	80092a6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008dc4:	4b76      	ldr	r3, [pc, #472]	; (8008fa0 <tcp_slowtmr+0x264>)
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	7d1b      	ldrb	r3, [r3, #20]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d10a      	bne.n	8008df6 <tcp_slowtmr+0xba>
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d905      	bls.n	8008df6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dee:	3301      	adds	r3, #1
 8008df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008df4:	e11e      	b.n	8009034 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dfc:	2b0b      	cmp	r3, #11
 8008dfe:	d905      	bls.n	8008e0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e04:	3301      	adds	r3, #1
 8008e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e0a:	e113      	b.n	8009034 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d075      	beq.n	8008f02 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <tcp_slowtmr+0xf0>
 8008e1e:	4b62      	ldr	r3, [pc, #392]	; (8008fa8 <tcp_slowtmr+0x26c>)
 8008e20:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008e24:	4965      	ldr	r1, [pc, #404]	; (8008fbc <tcp_slowtmr+0x280>)
 8008e26:	4862      	ldr	r0, [pc, #392]	; (8008fb0 <tcp_slowtmr+0x274>)
 8008e28:	f008 f942 	bl	80110b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <tcp_slowtmr+0x106>
 8008e34:	4b5c      	ldr	r3, [pc, #368]	; (8008fa8 <tcp_slowtmr+0x26c>)
 8008e36:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008e3a:	4961      	ldr	r1, [pc, #388]	; (8008fc0 <tcp_slowtmr+0x284>)
 8008e3c:	485c      	ldr	r0, [pc, #368]	; (8008fb0 <tcp_slowtmr+0x274>)
 8008e3e:	f008 f937 	bl	80110b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008e48:	2b0b      	cmp	r3, #11
 8008e4a:	d905      	bls.n	8008e58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e50:	3301      	adds	r3, #1
 8008e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e56:	e0ed      	b.n	8009034 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	4a58      	ldr	r2, [pc, #352]	; (8008fc4 <tcp_slowtmr+0x288>)
 8008e62:	5cd3      	ldrb	r3, [r2, r3]
 8008e64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e6c:	7c7a      	ldrb	r2, [r7, #17]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d907      	bls.n	8008e82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e78:	3301      	adds	r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e88:	7c7a      	ldrb	r2, [r7, #17]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	f200 80d2 	bhi.w	8009034 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008e90:	2301      	movs	r3, #1
 8008e92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ea0:	f005 f96e 	bl	800e180 <tcp_zero_window_probe>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d014      	beq.n	8008ed4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008eaa:	2300      	movs	r3, #0
 8008eac:	623b      	str	r3, [r7, #32]
 8008eae:	e011      	b.n	8008ed4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eba:	f004 f833 	bl	800cf24 <tcp_split_unsent_seg>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d107      	bne.n	8008ed4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ec6:	f004 fab3 	bl	800d430 <tcp_output>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80ac 	beq.w	8009034 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008eea:	2b06      	cmp	r3, #6
 8008eec:	f200 80a2 	bhi.w	8009034 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008f00:	e098      	b.n	8009034 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db0f      	blt.n	8008f2c <tcp_slowtmr+0x1f0>
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d008      	beq.n	8008f2c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	3301      	adds	r3, #1
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	b21a      	sxth	r2, r3
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	db7b      	blt.n	8009034 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f3e:	f004 fd6b 	bl	800da18 <tcp_rexmit_rto_prepare>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <tcp_slowtmr+0x21c>
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d171      	bne.n	8009034 <tcp_slowtmr+0x2f8>
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d06d      	beq.n	8009034 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	7d1b      	ldrb	r3, [r3, #20]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d03a      	beq.n	8008fd6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f66:	2b0c      	cmp	r3, #12
 8008f68:	bf28      	it	cs
 8008f6a:	230c      	movcs	r3, #12
 8008f6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f74:	10db      	asrs	r3, r3, #3
 8008f76:	b21b      	sxth	r3, r3
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f80:	4413      	add	r3, r2
 8008f82:	7efa      	ldrb	r2, [r7, #27]
 8008f84:	4910      	ldr	r1, [pc, #64]	; (8008fc8 <tcp_slowtmr+0x28c>)
 8008f86:	5c8a      	ldrb	r2, [r1, r2]
 8008f88:	4093      	lsls	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f92:	4293      	cmp	r3, r2
 8008f94:	dc1a      	bgt.n	8008fcc <tcp_slowtmr+0x290>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	b21a      	sxth	r2, r3
 8008f9a:	e019      	b.n	8008fd0 <tcp_slowtmr+0x294>
 8008f9c:	20008c28 	.word	0x20008c28
 8008fa0:	20008c3e 	.word	0x20008c3e
 8008fa4:	20008c34 	.word	0x20008c34
 8008fa8:	08012c7c 	.word	0x08012c7c
 8008fac:	08012fc0 	.word	0x08012fc0
 8008fb0:	08012cc0 	.word	0x08012cc0
 8008fb4:	08012fec 	.word	0x08012fec
 8008fb8:	08013018 	.word	0x08013018
 8008fbc:	08013048 	.word	0x08013048
 8008fc0:	0801307c 	.word	0x0801307c
 8008fc4:	080155e0 	.word	0x080155e0
 8008fc8:	080155d0 	.word	0x080155d0
 8008fcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	bf28      	it	cs
 8008fec:	4613      	movcs	r3, r2
 8008fee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ff0:	8a7b      	ldrh	r3, [r7, #18]
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	429a      	cmp	r2, r3
 800900c:	d206      	bcs.n	800901c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	2200      	movs	r2, #0
 800902a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800902e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009030:	f004 fd62 	bl	800daf8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	7d1b      	ldrb	r3, [r3, #20]
 8009038:	2b06      	cmp	r3, #6
 800903a:	d111      	bne.n	8009060 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	8b5b      	ldrh	r3, [r3, #26]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009048:	4b9c      	ldr	r3, [pc, #624]	; (80092bc <tcp_slowtmr+0x580>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b28      	cmp	r3, #40	; 0x28
 8009054:	d904      	bls.n	8009060 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905a:	3301      	adds	r3, #1
 800905c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	7a5b      	ldrb	r3, [r3, #9]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d04a      	beq.n	8009102 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009070:	2b04      	cmp	r3, #4
 8009072:	d003      	beq.n	800907c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009078:	2b07      	cmp	r3, #7
 800907a:	d142      	bne.n	8009102 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800907c:	4b8f      	ldr	r3, [pc, #572]	; (80092bc <tcp_slowtmr+0x580>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800908c:	4b8c      	ldr	r3, [pc, #560]	; (80092c0 <tcp_slowtmr+0x584>)
 800908e:	440b      	add	r3, r1
 8009090:	498c      	ldr	r1, [pc, #560]	; (80092c4 <tcp_slowtmr+0x588>)
 8009092:	fba1 1303 	umull	r1, r3, r1, r3
 8009096:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009098:	429a      	cmp	r2, r3
 800909a:	d90a      	bls.n	80090b2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800909c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a0:	3301      	adds	r3, #1
 80090a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80090a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090aa:	3301      	adds	r3, #1
 80090ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090b0:	e027      	b.n	8009102 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090b2:	4b82      	ldr	r3, [pc, #520]	; (80092bc <tcp_slowtmr+0x580>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090c8:	4618      	mov	r0, r3
 80090ca:	4b7f      	ldr	r3, [pc, #508]	; (80092c8 <tcp_slowtmr+0x58c>)
 80090cc:	fb00 f303 	mul.w	r3, r0, r3
 80090d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80090d2:	497c      	ldr	r1, [pc, #496]	; (80092c4 <tcp_slowtmr+0x588>)
 80090d4:	fba1 1303 	umull	r1, r3, r1, r3
 80090d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090da:	429a      	cmp	r2, r3
 80090dc:	d911      	bls.n	8009102 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80090de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e0:	f005 f80e 	bl	800e100 <tcp_keepalive>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80090ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80090f8:	3301      	adds	r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009106:	2b00      	cmp	r3, #0
 8009108:	d011      	beq.n	800912e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800910a:	4b6c      	ldr	r3, [pc, #432]	; (80092bc <tcp_slowtmr+0x580>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	1ad2      	subs	r2, r2, r3
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800911a:	4619      	mov	r1, r3
 800911c:	460b      	mov	r3, r1
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	440b      	add	r3, r1
 8009122:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009124:	429a      	cmp	r2, r3
 8009126:	d302      	bcc.n	800912e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800912a:	f000 fec9 	bl	8009ec0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	7d1b      	ldrb	r3, [r3, #20]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d10b      	bne.n	800914e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009136:	4b61      	ldr	r3, [pc, #388]	; (80092bc <tcp_slowtmr+0x580>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b28      	cmp	r3, #40	; 0x28
 8009142:	d904      	bls.n	800914e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009148:	3301      	adds	r3, #1
 800914a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	7d1b      	ldrb	r3, [r3, #20]
 8009152:	2b09      	cmp	r3, #9
 8009154:	d10b      	bne.n	800916e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009156:	4b59      	ldr	r3, [pc, #356]	; (80092bc <tcp_slowtmr+0x580>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2bf0      	cmp	r3, #240	; 0xf0
 8009162:	d904      	bls.n	800916e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009168:	3301      	adds	r3, #1
 800916a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800916e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009172:	2b00      	cmp	r3, #0
 8009174:	d060      	beq.n	8009238 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800917e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009180:	f000 fcea 	bl	8009b58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	d010      	beq.n	80091ac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800918a:	4b50      	ldr	r3, [pc, #320]	; (80092cc <tcp_slowtmr+0x590>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009190:	429a      	cmp	r2, r3
 8009192:	d106      	bne.n	80091a2 <tcp_slowtmr+0x466>
 8009194:	4b4e      	ldr	r3, [pc, #312]	; (80092d0 <tcp_slowtmr+0x594>)
 8009196:	f240 526d 	movw	r2, #1389	; 0x56d
 800919a:	494e      	ldr	r1, [pc, #312]	; (80092d4 <tcp_slowtmr+0x598>)
 800919c:	484e      	ldr	r0, [pc, #312]	; (80092d8 <tcp_slowtmr+0x59c>)
 800919e:	f007 ff87 	bl	80110b0 <iprintf>
        prev->next = pcb->next;
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	e00f      	b.n	80091cc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80091ac:	4b47      	ldr	r3, [pc, #284]	; (80092cc <tcp_slowtmr+0x590>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d006      	beq.n	80091c4 <tcp_slowtmr+0x488>
 80091b6:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <tcp_slowtmr+0x594>)
 80091b8:	f240 5271 	movw	r2, #1393	; 0x571
 80091bc:	4947      	ldr	r1, [pc, #284]	; (80092dc <tcp_slowtmr+0x5a0>)
 80091be:	4846      	ldr	r0, [pc, #280]	; (80092d8 <tcp_slowtmr+0x59c>)
 80091c0:	f007 ff76 	bl	80110b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4a40      	ldr	r2, [pc, #256]	; (80092cc <tcp_slowtmr+0x590>)
 80091ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80091cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d013      	beq.n	80091fc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80091dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	3304      	adds	r3, #4
 80091e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e4:	8ad2      	ldrh	r2, [r2, #22]
 80091e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091e8:	8b09      	ldrh	r1, [r1, #24]
 80091ea:	9102      	str	r1, [sp, #8]
 80091ec:	9201      	str	r2, [sp, #4]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	462b      	mov	r3, r5
 80091f2:	4622      	mov	r2, r4
 80091f4:	4601      	mov	r1, r0
 80091f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091f8:	f004 fece 	bl	800df98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	7d1b      	ldrb	r3, [r3, #20]
 8009206:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009212:	6838      	ldr	r0, [r7, #0]
 8009214:	f7ff f83a 	bl	800828c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <tcp_slowtmr+0x5a4>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <tcp_slowtmr+0x4f2>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f06f 010c 	mvn.w	r1, #12
 800922a:	68b8      	ldr	r0, [r7, #8]
 800922c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800922e:	4b2c      	ldr	r3, [pc, #176]	; (80092e0 <tcp_slowtmr+0x5a4>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d037      	beq.n	80092a6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009236:	e592      	b.n	8008d5e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	7f1b      	ldrb	r3, [r3, #28]
 8009246:	3301      	adds	r3, #1
 8009248:	b2da      	uxtb	r2, r3
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	7f1a      	ldrb	r2, [r3, #28]
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	7f5b      	ldrb	r3, [r3, #29]
 8009256:	429a      	cmp	r2, r3
 8009258:	d325      	bcc.n	80092a6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009260:	4b1f      	ldr	r3, [pc, #124]	; (80092e0 <tcp_slowtmr+0x5a4>)
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <tcp_slowtmr+0x54c>
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009278:	6912      	ldr	r2, [r2, #16]
 800927a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	4603      	mov	r3, r0
 8009282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009286:	e002      	b.n	800928e <tcp_slowtmr+0x552>
 8009288:	2300      	movs	r3, #0
 800928a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <tcp_slowtmr+0x5a4>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d000      	beq.n	8009298 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009296:	e562      	b.n	8008d5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009298:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80092a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a2:	f004 f8c5 	bl	800d430 <tcp_output>
  while (pcb != NULL) {
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f47f ad5e 	bne.w	8008d6a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <tcp_slowtmr+0x5a8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80092b8:	e069      	b.n	800938e <tcp_slowtmr+0x652>
 80092ba:	bf00      	nop
 80092bc:	20008c28 	.word	0x20008c28
 80092c0:	000a4cb8 	.word	0x000a4cb8
 80092c4:	10624dd3 	.word	0x10624dd3
 80092c8:	000124f8 	.word	0x000124f8
 80092cc:	20008c34 	.word	0x20008c34
 80092d0:	08012c7c 	.word	0x08012c7c
 80092d4:	080130b4 	.word	0x080130b4
 80092d8:	08012cc0 	.word	0x08012cc0
 80092dc:	080130e0 	.word	0x080130e0
 80092e0:	20008c3c 	.word	0x20008c3c
 80092e4:	20008c38 	.word	0x20008c38
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	2b0a      	cmp	r3, #10
 80092ee:	d006      	beq.n	80092fe <tcp_slowtmr+0x5c2>
 80092f0:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <tcp_slowtmr+0x664>)
 80092f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80092f6:	492b      	ldr	r1, [pc, #172]	; (80093a4 <tcp_slowtmr+0x668>)
 80092f8:	482b      	ldr	r0, [pc, #172]	; (80093a8 <tcp_slowtmr+0x66c>)
 80092fa:	f007 fed9 	bl	80110b0 <iprintf>
    pcb_remove = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009304:	4b29      	ldr	r3, [pc, #164]	; (80093ac <tcp_slowtmr+0x670>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2bf0      	cmp	r3, #240	; 0xf0
 8009310:	d904      	bls.n	800931c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009316:	3301      	adds	r3, #1
 8009318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02f      	beq.n	8009384 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009326:	f000 fc17 	bl	8009b58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009330:	4b1f      	ldr	r3, [pc, #124]	; (80093b0 <tcp_slowtmr+0x674>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009336:	429a      	cmp	r2, r3
 8009338:	d106      	bne.n	8009348 <tcp_slowtmr+0x60c>
 800933a:	4b19      	ldr	r3, [pc, #100]	; (80093a0 <tcp_slowtmr+0x664>)
 800933c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009340:	491c      	ldr	r1, [pc, #112]	; (80093b4 <tcp_slowtmr+0x678>)
 8009342:	4819      	ldr	r0, [pc, #100]	; (80093a8 <tcp_slowtmr+0x66c>)
 8009344:	f007 feb4 	bl	80110b0 <iprintf>
        prev->next = pcb->next;
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	60da      	str	r2, [r3, #12]
 8009350:	e00f      	b.n	8009372 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009352:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <tcp_slowtmr+0x674>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009358:	429a      	cmp	r2, r3
 800935a:	d006      	beq.n	800936a <tcp_slowtmr+0x62e>
 800935c:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <tcp_slowtmr+0x664>)
 800935e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009362:	4915      	ldr	r1, [pc, #84]	; (80093b8 <tcp_slowtmr+0x67c>)
 8009364:	4810      	ldr	r0, [pc, #64]	; (80093a8 <tcp_slowtmr+0x66c>)
 8009366:	f007 fea3 	bl	80110b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <tcp_slowtmr+0x674>)
 8009370:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800937c:	69f8      	ldr	r0, [r7, #28]
 800937e:	f7fe ff85 	bl	800828c <tcp_free>
 8009382:	e004      	b.n	800938e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1a9      	bne.n	80092e8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	3730      	adds	r7, #48	; 0x30
 800939a:	46bd      	mov	sp, r7
 800939c:	bdb0      	pop	{r4, r5, r7, pc}
 800939e:	bf00      	nop
 80093a0:	08012c7c 	.word	0x08012c7c
 80093a4:	0801310c 	.word	0x0801310c
 80093a8:	08012cc0 	.word	0x08012cc0
 80093ac:	20008c28 	.word	0x20008c28
 80093b0:	20008c38 	.word	0x20008c38
 80093b4:	0801313c 	.word	0x0801313c
 80093b8:	08013164 	.word	0x08013164

080093bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80093c2:	4b2d      	ldr	r3, [pc, #180]	; (8009478 <tcp_fasttmr+0xbc>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	3301      	adds	r3, #1
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <tcp_fasttmr+0xbc>)
 80093cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80093ce:	4b2b      	ldr	r3, [pc, #172]	; (800947c <tcp_fasttmr+0xc0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093d4:	e048      	b.n	8009468 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7f9a      	ldrb	r2, [r3, #30]
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <tcp_fasttmr+0xbc>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d03f      	beq.n	8009462 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80093e2:	4b25      	ldr	r3, [pc, #148]	; (8009478 <tcp_fasttmr+0xbc>)
 80093e4:	781a      	ldrb	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8b5b      	ldrh	r3, [r3, #26]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d010      	beq.n	8009418 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8b5b      	ldrh	r3, [r3, #26]
 80093fa:	f043 0302 	orr.w	r3, r3, #2
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f004 f813 	bl	800d430 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8b5b      	ldrh	r3, [r3, #26]
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	8b5b      	ldrh	r3, [r3, #26]
 800941c:	f003 0308 	and.w	r3, r3, #8
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8b5b      	ldrh	r3, [r3, #26]
 8009428:	f023 0308 	bic.w	r3, r3, #8
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff f8be 	bl	80085b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009446:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <tcp_fasttmr+0xc4>)
 8009448:	2200      	movs	r2, #0
 800944a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f819 	bl	8009484 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009452:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <tcp_fasttmr+0xc4>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d000      	beq.n	800945c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800945a:	e7b8      	b.n	80093ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	607b      	str	r3, [r7, #4]
 8009460:	e002      	b.n	8009468 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1b3      	bne.n	80093d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20008c3e 	.word	0x20008c3e
 800947c:	20008c34 	.word	0x20008c34
 8009480:	20008c3c 	.word	0x20008c3c

08009484 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009484:	b590      	push	{r4, r7, lr}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <tcp_process_refused_data+0x22>
 8009492:	4b37      	ldr	r3, [pc, #220]	; (8009570 <tcp_process_refused_data+0xec>)
 8009494:	f240 6209 	movw	r2, #1545	; 0x609
 8009498:	4936      	ldr	r1, [pc, #216]	; (8009574 <tcp_process_refused_data+0xf0>)
 800949a:	4837      	ldr	r0, [pc, #220]	; (8009578 <tcp_process_refused_data+0xf4>)
 800949c:	f007 fe08 	bl	80110b0 <iprintf>
 80094a0:	f06f 030f 	mvn.w	r3, #15
 80094a4:	e060      	b.n	8009568 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094aa:	7b5b      	ldrb	r3, [r3, #13]
 80094ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <tcp_process_refused_data+0x58>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6918      	ldr	r0, [r3, #16]
 80094ce:	2300      	movs	r3, #0
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	47a0      	blx	r4
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
 80094da:	e007      	b.n	80094ec <tcp_process_refused_data+0x68>
 80094dc:	2300      	movs	r3, #0
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	2000      	movs	r0, #0
 80094e4:	f000 f8c2 	bl	800966c <tcp_recv_null>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80094ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d12a      	bne.n	800954a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d033      	beq.n	8009566 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009502:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009506:	d005      	beq.n	8009514 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	3301      	adds	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <tcp_process_refused_data+0xb2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6918      	ldr	r0, [r3, #16]
 8009528:	2300      	movs	r3, #0
 800952a:	2200      	movs	r2, #0
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	47a0      	blx	r4
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
 8009534:	e001      	b.n	800953a <tcp_process_refused_data+0xb6>
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800953a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953e:	f113 0f0d 	cmn.w	r3, #13
 8009542:	d110      	bne.n	8009566 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009544:	f06f 030c 	mvn.w	r3, #12
 8009548:	e00e      	b.n	8009568 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800954a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800954e:	f113 0f0d 	cmn.w	r3, #13
 8009552:	d102      	bne.n	800955a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009554:	f06f 030c 	mvn.w	r3, #12
 8009558:	e006      	b.n	8009568 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009560:	f06f 0304 	mvn.w	r3, #4
 8009564:	e000      	b.n	8009568 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	bd90      	pop	{r4, r7, pc}
 8009570:	08012c7c 	.word	0x08012c7c
 8009574:	0801318c 	.word	0x0801318c
 8009578:	08012cc0 	.word	0x08012cc0

0800957c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009584:	e007      	b.n	8009596 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f80a 	bl	80095a6 <tcp_seg_free>
    seg = next;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1f4      	bne.n	8009586 <tcp_segs_free+0xa>
  }
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00c      	beq.n	80095ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fbc3 	bl	8007d4c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	2003      	movs	r0, #3
 80095ca:	f7fd fd49 	bl	8007060 <memp_free>
  }
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d107      	bne.n	80095fa <tcp_setprio+0x22>
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <tcp_setprio+0x30>)
 80095ec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80095f0:	4906      	ldr	r1, [pc, #24]	; (800960c <tcp_setprio+0x34>)
 80095f2:	4807      	ldr	r0, [pc, #28]	; (8009610 <tcp_setprio+0x38>)
 80095f4:	f007 fd5c 	bl	80110b0 <iprintf>
 80095f8:	e002      	b.n	8009600 <tcp_setprio+0x28>

  pcb->prio = prio;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	755a      	strb	r2, [r3, #21]
}
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	08012c7c 	.word	0x08012c7c
 800960c:	080131b4 	.word	0x080131b4
 8009610:	08012cc0 	.word	0x08012cc0

08009614 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <tcp_seg_copy+0x1c>
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <tcp_seg_copy+0x4c>)
 8009624:	f240 6282 	movw	r2, #1666	; 0x682
 8009628:	490e      	ldr	r1, [pc, #56]	; (8009664 <tcp_seg_copy+0x50>)
 800962a:	480f      	ldr	r0, [pc, #60]	; (8009668 <tcp_seg_copy+0x54>)
 800962c:	f007 fd40 	bl	80110b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009630:	2003      	movs	r0, #3
 8009632:	f7fd fca5 	bl	8006f80 <memp_malloc>
 8009636:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <tcp_seg_copy+0x2e>
    return NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	e00a      	b.n	8009658 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009642:	2210      	movs	r2, #16
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f007 fe2b 	bl	80112a2 <memcpy>
  pbuf_ref(cseg->p);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fc1b 	bl	8007e8c <pbuf_ref>
  return cseg;
 8009656:	68fb      	ldr	r3, [r7, #12]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	08012c7c 	.word	0x08012c7c
 8009664:	080131d0 	.word	0x080131d0
 8009668:	08012cc0 	.word	0x08012cc0

0800966c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <tcp_recv_null+0x28>
 8009680:	4b12      	ldr	r3, [pc, #72]	; (80096cc <tcp_recv_null+0x60>)
 8009682:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009686:	4912      	ldr	r1, [pc, #72]	; (80096d0 <tcp_recv_null+0x64>)
 8009688:	4812      	ldr	r0, [pc, #72]	; (80096d4 <tcp_recv_null+0x68>)
 800968a:	f007 fd11 	bl	80110b0 <iprintf>
 800968e:	f06f 030f 	mvn.w	r3, #15
 8009692:	e016      	b.n	80096c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d009      	beq.n	80096ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	4619      	mov	r1, r3
 80096a0:	68b8      	ldr	r0, [r7, #8]
 80096a2:	f7ff fab5 	bl	8008c10 <tcp_recved>
    pbuf_free(p);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fe fb50 	bl	8007d4c <pbuf_free>
 80096ac:	e008      	b.n	80096c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80096ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80096b6:	68b8      	ldr	r0, [r7, #8]
 80096b8:	f7fe ffe6 	bl	8008688 <tcp_close>
 80096bc:	4603      	mov	r3, r0
 80096be:	e000      	b.n	80096c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	08012c7c 	.word	0x08012c7c
 80096d0:	080131ec 	.word	0x080131ec
 80096d4:	08012cc0 	.word	0x08012cc0

080096d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	db01      	blt.n	80096ee <tcp_kill_prio+0x16>
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	e000      	b.n	80096f0 <tcp_kill_prio+0x18>
 80096ee:	237f      	movs	r3, #127	; 0x7f
 80096f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80096f2:	7afb      	ldrb	r3, [r7, #11]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d034      	beq.n	8009762 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <tcp_kill_prio+0x94>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	e01f      	b.n	800974e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	7d5b      	ldrb	r3, [r3, #21]
 8009712:	7afa      	ldrb	r2, [r7, #11]
 8009714:	429a      	cmp	r2, r3
 8009716:	d80c      	bhi.n	8009732 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800971c:	7afa      	ldrb	r2, [r7, #11]
 800971e:	429a      	cmp	r2, r3
 8009720:	d112      	bne.n	8009748 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <tcp_kill_prio+0x98>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d80a      	bhi.n	8009748 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <tcp_kill_prio+0x98>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	7d5b      	ldrb	r3, [r3, #21]
 8009746:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1dc      	bne.n	800970e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f7ff f87e 	bl	800885c <tcp_abort>
 8009760:	e000      	b.n	8009764 <tcp_kill_prio+0x8c>
    return;
 8009762:	bf00      	nop
  }
}
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20008c34 	.word	0x20008c34
 8009770:	20008c28 	.word	0x20008c28

08009774 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	2b08      	cmp	r3, #8
 8009782:	d009      	beq.n	8009798 <tcp_kill_state+0x24>
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b09      	cmp	r3, #9
 8009788:	d006      	beq.n	8009798 <tcp_kill_state+0x24>
 800978a:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <tcp_kill_state+0x80>)
 800978c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009790:	4919      	ldr	r1, [pc, #100]	; (80097f8 <tcp_kill_state+0x84>)
 8009792:	481a      	ldr	r0, [pc, #104]	; (80097fc <tcp_kill_state+0x88>)
 8009794:	f007 fc8c 	bl	80110b0 <iprintf>

  inactivity = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097a0:	4b17      	ldr	r3, [pc, #92]	; (8009800 <tcp_kill_state+0x8c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e017      	b.n	80097d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	7d1b      	ldrb	r3, [r3, #20]
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10f      	bne.n	80097d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80097b2:	4b14      	ldr	r3, [pc, #80]	; (8009804 <tcp_kill_state+0x90>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d807      	bhi.n	80097d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80097c2:	4b10      	ldr	r3, [pc, #64]	; (8009804 <tcp_kill_state+0x90>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1e4      	bne.n	80097a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80097e4:	2100      	movs	r1, #0
 80097e6:	6938      	ldr	r0, [r7, #16]
 80097e8:	f7fe ff7a 	bl	80086e0 <tcp_abandon>
  }
}
 80097ec:	bf00      	nop
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	08012c7c 	.word	0x08012c7c
 80097f8:	08013208 	.word	0x08013208
 80097fc:	08012cc0 	.word	0x08012cc0
 8009800:	20008c34 	.word	0x20008c34
 8009804:	20008c28 	.word	0x20008c28

08009808 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009816:	4b12      	ldr	r3, [pc, #72]	; (8009860 <tcp_kill_timewait+0x58>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	e012      	b.n	8009844 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <tcp_kill_timewait+0x5c>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d807      	bhi.n	800983e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800982e:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <tcp_kill_timewait+0x5c>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e9      	bne.n	800981e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009850:	68b8      	ldr	r0, [r7, #8]
 8009852:	f7ff f803 	bl	800885c <tcp_abort>
  }
}
 8009856:	bf00      	nop
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20008c38 	.word	0x20008c38
 8009864:	20008c28 	.word	0x20008c28

08009868 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800986e:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <tcp_handle_closepend+0x48>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009874:	e014      	b.n	80098a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	8b5b      	ldrh	r3, [r3, #26]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d009      	beq.n	800989c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8b5b      	ldrh	r3, [r3, #26]
 800988c:	f023 0308 	bic.w	r3, r3, #8
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fe fe8c 	bl	80085b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e7      	bne.n	8009876 <tcp_handle_closepend+0xe>
  }
}
 80098a6:	bf00      	nop
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20008c34 	.word	0x20008c34

080098b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098be:	2001      	movs	r0, #1
 80098c0:	f7fd fb5e 	bl	8006f80 <memp_malloc>
 80098c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d126      	bne.n	800991a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80098cc:	f7ff ffcc 	bl	8009868 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80098d0:	f7ff ff9a 	bl	8009808 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098d4:	2001      	movs	r0, #1
 80098d6:	f7fd fb53 	bl	8006f80 <memp_malloc>
 80098da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d11b      	bne.n	800991a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80098e2:	2009      	movs	r0, #9
 80098e4:	f7ff ff46 	bl	8009774 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7fd fb49 	bl	8006f80 <memp_malloc>
 80098ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d111      	bne.n	800991a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80098f6:	2008      	movs	r0, #8
 80098f8:	f7ff ff3c 	bl	8009774 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098fc:	2001      	movs	r0, #1
 80098fe:	f7fd fb3f 	bl	8006f80 <memp_malloc>
 8009902:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d107      	bne.n	800991a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff fee3 	bl	80096d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009912:	2001      	movs	r0, #1
 8009914:	f7fd fb34 	bl	8006f80 <memp_malloc>
 8009918:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d03f      	beq.n	80099a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009920:	229c      	movs	r2, #156	; 0x9c
 8009922:	2100      	movs	r1, #0
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f007 fc28 	bl	801117a <memset>
    pcb->prio = prio;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	79fa      	ldrb	r2, [r7, #7]
 800992e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009936:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	22ff      	movs	r2, #255	; 0xff
 800994e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009956:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2206      	movs	r2, #6
 800995c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2206      	movs	r2, #6
 8009964:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800996c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009976:	4b0d      	ldr	r3, [pc, #52]	; (80099ac <tcp_alloc+0xf8>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <tcp_alloc+0xfc>)
 8009980:	781a      	ldrb	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800998c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a08      	ldr	r2, [pc, #32]	; (80099b4 <tcp_alloc+0x100>)
 8009994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4a07      	ldr	r2, [pc, #28]	; (80099b8 <tcp_alloc+0x104>)
 800999c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20008c28 	.word	0x20008c28
 80099b0:	20008c3e 	.word	0x20008c3e
 80099b4:	0800966d 	.word	0x0800966d
 80099b8:	006ddd00 	.word	0x006ddd00

080099bc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80099c6:	2040      	movs	r0, #64	; 0x40
 80099c8:	f7ff ff74 	bl	80098b4 <tcp_alloc>
 80099cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80099ce:	68fb      	ldr	r3, [r7, #12]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	611a      	str	r2, [r3, #16]
  }
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00e      	beq.n	8009a2a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7d1b      	ldrb	r3, [r3, #20]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d106      	bne.n	8009a22 <tcp_recv+0x26>
 8009a14:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <tcp_recv+0x38>)
 8009a16:	f240 72df 	movw	r2, #2015	; 0x7df
 8009a1a:	4907      	ldr	r1, [pc, #28]	; (8009a38 <tcp_recv+0x3c>)
 8009a1c:	4807      	ldr	r0, [pc, #28]	; (8009a3c <tcp_recv+0x40>)
 8009a1e:	f007 fb47 	bl	80110b0 <iprintf>
    pcb->recv = recv;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	08012c7c 	.word	0x08012c7c
 8009a38:	08013218 	.word	0x08013218
 8009a3c:	08012cc0 	.word	0x08012cc0

08009a40 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00e      	beq.n	8009a6e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7d1b      	ldrb	r3, [r3, #20]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d106      	bne.n	8009a66 <tcp_sent+0x26>
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <tcp_sent+0x38>)
 8009a5a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009a5e:	4907      	ldr	r1, [pc, #28]	; (8009a7c <tcp_sent+0x3c>)
 8009a60:	4807      	ldr	r0, [pc, #28]	; (8009a80 <tcp_sent+0x40>)
 8009a62:	f007 fb25 	bl	80110b0 <iprintf>
    pcb->sent = sent;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	08012c7c 	.word	0x08012c7c
 8009a7c:	08013240 	.word	0x08013240
 8009a80:	08012cc0 	.word	0x08012cc0

08009a84 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00e      	beq.n	8009ab2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7d1b      	ldrb	r3, [r3, #20]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d106      	bne.n	8009aaa <tcp_err+0x26>
 8009a9c:	4b07      	ldr	r3, [pc, #28]	; (8009abc <tcp_err+0x38>)
 8009a9e:	f640 020d 	movw	r2, #2061	; 0x80d
 8009aa2:	4907      	ldr	r1, [pc, #28]	; (8009ac0 <tcp_err+0x3c>)
 8009aa4:	4807      	ldr	r0, [pc, #28]	; (8009ac4 <tcp_err+0x40>)
 8009aa6:	f007 fb03 	bl	80110b0 <iprintf>
    pcb->errf = err;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	08012c7c 	.word	0x08012c7c
 8009ac0:	08013268 	.word	0x08013268
 8009ac4:	08012cc0 	.word	0x08012cc0

08009ac8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d008      	beq.n	8009aea <tcp_accept+0x22>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7d1b      	ldrb	r3, [r3, #20]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d104      	bne.n	8009aea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	619a      	str	r2, [r3, #24]
  }
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	4613      	mov	r3, r2
 8009b04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d107      	bne.n	8009b1c <tcp_poll+0x24>
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <tcp_poll+0x50>)
 8009b0e:	f640 023d 	movw	r2, #2109	; 0x83d
 8009b12:	490e      	ldr	r1, [pc, #56]	; (8009b4c <tcp_poll+0x54>)
 8009b14:	480e      	ldr	r0, [pc, #56]	; (8009b50 <tcp_poll+0x58>)
 8009b16:	f007 facb 	bl	80110b0 <iprintf>
 8009b1a:	e011      	b.n	8009b40 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	7d1b      	ldrb	r3, [r3, #20]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <tcp_poll+0x3a>
 8009b24:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <tcp_poll+0x50>)
 8009b26:	f640 023e 	movw	r2, #2110	; 0x83e
 8009b2a:	490a      	ldr	r1, [pc, #40]	; (8009b54 <tcp_poll+0x5c>)
 8009b2c:	4808      	ldr	r0, [pc, #32]	; (8009b50 <tcp_poll+0x58>)
 8009b2e:	f007 fabf 	bl	80110b0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	79fa      	ldrb	r2, [r7, #7]
 8009b3e:	775a      	strb	r2, [r3, #29]
}
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	08012c7c 	.word	0x08012c7c
 8009b4c:	08013290 	.word	0x08013290
 8009b50:	08012cc0 	.word	0x08012cc0
 8009b54:	080132a8 	.word	0x080132a8

08009b58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d107      	bne.n	8009b76 <tcp_pcb_purge+0x1e>
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <tcp_pcb_purge+0x94>)
 8009b68:	f640 0251 	movw	r2, #2129	; 0x851
 8009b6c:	4920      	ldr	r1, [pc, #128]	; (8009bf0 <tcp_pcb_purge+0x98>)
 8009b6e:	4821      	ldr	r0, [pc, #132]	; (8009bf4 <tcp_pcb_purge+0x9c>)
 8009b70:	f007 fa9e 	bl	80110b0 <iprintf>
 8009b74:	e037      	b.n	8009be6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7d1b      	ldrb	r3, [r3, #20]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d033      	beq.n	8009be6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009b82:	2b0a      	cmp	r3, #10
 8009b84:	d02f      	beq.n	8009be6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d02b      	beq.n	8009be6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe f8d6 	bl	8007d4c <pbuf_free>
      pcb->refused_data = NULL;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f986 	bl	8009ec0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fcdb 	bl	800957c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fcd6 	bl	800957c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	08012c7c 	.word	0x08012c7c
 8009bf0:	080132c8 	.word	0x080132c8
 8009bf4:	08012cc0 	.word	0x08012cc0

08009bf8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <tcp_pcb_remove+0x1e>
 8009c08:	4b3e      	ldr	r3, [pc, #248]	; (8009d04 <tcp_pcb_remove+0x10c>)
 8009c0a:	f640 0283 	movw	r2, #2179	; 0x883
 8009c0e:	493e      	ldr	r1, [pc, #248]	; (8009d08 <tcp_pcb_remove+0x110>)
 8009c10:	483e      	ldr	r0, [pc, #248]	; (8009d0c <tcp_pcb_remove+0x114>)
 8009c12:	f007 fa4d 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d106      	bne.n	8009c2a <tcp_pcb_remove+0x32>
 8009c1c:	4b39      	ldr	r3, [pc, #228]	; (8009d04 <tcp_pcb_remove+0x10c>)
 8009c1e:	f640 0284 	movw	r2, #2180	; 0x884
 8009c22:	493b      	ldr	r1, [pc, #236]	; (8009d10 <tcp_pcb_remove+0x118>)
 8009c24:	4839      	ldr	r0, [pc, #228]	; (8009d0c <tcp_pcb_remove+0x114>)
 8009c26:	f007 fa43 	bl	80110b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d105      	bne.n	8009c40 <tcp_pcb_remove+0x48>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	e013      	b.n	8009c68 <tcp_pcb_remove+0x70>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	e00c      	b.n	8009c62 <tcp_pcb_remove+0x6a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d104      	bne.n	8009c5c <tcp_pcb_remove+0x64>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	e005      	b.n	8009c68 <tcp_pcb_remove+0x70>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1ef      	bne.n	8009c48 <tcp_pcb_remove+0x50>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009c6e:	6838      	ldr	r0, [r7, #0]
 8009c70:	f7ff ff72 	bl	8009b58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
 8009c78:	2b0a      	cmp	r3, #10
 8009c7a:	d013      	beq.n	8009ca4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d00f      	beq.n	8009ca4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	8b5b      	ldrh	r3, [r3, #26]
 8009c88:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	8b5b      	ldrh	r3, [r3, #26]
 8009c94:	f043 0302 	orr.w	r3, r3, #2
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c9e:	6838      	ldr	r0, [r7, #0]
 8009ca0:	f003 fbc6 	bl	800d430 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	7d1b      	ldrb	r3, [r3, #20]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d020      	beq.n	8009cee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d006      	beq.n	8009cc2 <tcp_pcb_remove+0xca>
 8009cb4:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <tcp_pcb_remove+0x10c>)
 8009cb6:	f640 0293 	movw	r2, #2195	; 0x893
 8009cba:	4916      	ldr	r1, [pc, #88]	; (8009d14 <tcp_pcb_remove+0x11c>)
 8009cbc:	4813      	ldr	r0, [pc, #76]	; (8009d0c <tcp_pcb_remove+0x114>)
 8009cbe:	f007 f9f7 	bl	80110b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d006      	beq.n	8009cd8 <tcp_pcb_remove+0xe0>
 8009cca:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <tcp_pcb_remove+0x10c>)
 8009ccc:	f640 0294 	movw	r2, #2196	; 0x894
 8009cd0:	4911      	ldr	r1, [pc, #68]	; (8009d18 <tcp_pcb_remove+0x120>)
 8009cd2:	480e      	ldr	r0, [pc, #56]	; (8009d0c <tcp_pcb_remove+0x114>)
 8009cd4:	f007 f9ec 	bl	80110b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <tcp_pcb_remove+0xf6>
 8009ce0:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <tcp_pcb_remove+0x10c>)
 8009ce2:	f640 0296 	movw	r2, #2198	; 0x896
 8009ce6:	490d      	ldr	r1, [pc, #52]	; (8009d1c <tcp_pcb_remove+0x124>)
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <tcp_pcb_remove+0x114>)
 8009cea:	f007 f9e1 	bl	80110b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08012c7c 	.word	0x08012c7c
 8009d08:	080132e4 	.word	0x080132e4
 8009d0c:	08012cc0 	.word	0x08012cc0
 8009d10:	08013300 	.word	0x08013300
 8009d14:	08013320 	.word	0x08013320
 8009d18:	08013338 	.word	0x08013338
 8009d1c:	08013354 	.word	0x08013354

08009d20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <tcp_next_iss+0x1c>
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <tcp_next_iss+0x38>)
 8009d30:	f640 02af 	movw	r2, #2223	; 0x8af
 8009d34:	4909      	ldr	r1, [pc, #36]	; (8009d5c <tcp_next_iss+0x3c>)
 8009d36:	480a      	ldr	r0, [pc, #40]	; (8009d60 <tcp_next_iss+0x40>)
 8009d38:	f007 f9ba 	bl	80110b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009d3c:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <tcp_next_iss+0x44>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <tcp_next_iss+0x48>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4413      	add	r3, r2
 8009d46:	4a07      	ldr	r2, [pc, #28]	; (8009d64 <tcp_next_iss+0x44>)
 8009d48:	6013      	str	r3, [r2, #0]
  return iss;
 8009d4a:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <tcp_next_iss+0x44>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	08012c7c 	.word	0x08012c7c
 8009d5c:	0801336c 	.word	0x0801336c
 8009d60:	08012cc0 	.word	0x08012cc0
 8009d64:	20000024 	.word	0x20000024
 8009d68:	20008c28 	.word	0x20008c28

08009d6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d106      	bne.n	8009d8e <tcp_eff_send_mss_netif+0x22>
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <tcp_eff_send_mss_netif+0x68>)
 8009d82:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009d86:	4914      	ldr	r1, [pc, #80]	; (8009dd8 <tcp_eff_send_mss_netif+0x6c>)
 8009d88:	4814      	ldr	r0, [pc, #80]	; (8009ddc <tcp_eff_send_mss_netif+0x70>)
 8009d8a:	f007 f991 	bl	80110b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009d94:	89fb      	ldrh	r3, [r7, #14]
 8009d96:	e019      	b.n	8009dcc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d9e:	8afb      	ldrh	r3, [r7, #22]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d012      	beq.n	8009dca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009da4:	2328      	movs	r3, #40	; 0x28
 8009da6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009da8:	8afa      	ldrh	r2, [r7, #22]
 8009daa:	8abb      	ldrh	r3, [r7, #20]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d904      	bls.n	8009dba <tcp_eff_send_mss_netif+0x4e>
 8009db0:	8afa      	ldrh	r2, [r7, #22]
 8009db2:	8abb      	ldrh	r3, [r7, #20]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	e000      	b.n	8009dbc <tcp_eff_send_mss_netif+0x50>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009dbe:	8a7a      	ldrh	r2, [r7, #18]
 8009dc0:	89fb      	ldrh	r3, [r7, #14]
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	bf28      	it	cs
 8009dc6:	4613      	movcs	r3, r2
 8009dc8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009dca:	89fb      	ldrh	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	08012c7c 	.word	0x08012c7c
 8009dd8:	08013388 	.word	0x08013388
 8009ddc:	08012cc0 	.word	0x08012cc0

08009de0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d119      	bne.n	8009e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009df6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009dfa:	4910      	ldr	r1, [pc, #64]	; (8009e3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009dfc:	4810      	ldr	r0, [pc, #64]	; (8009e40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009dfe:	f007 f957 	bl	80110b0 <iprintf>

  while (pcb != NULL) {
 8009e02:	e011      	b.n	8009e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d108      	bne.n	8009e22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f7fe fd20 	bl	800885c <tcp_abort>
      pcb = next;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	e002      	b.n	8009e28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1ea      	bne.n	8009e04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	08012c7c 	.word	0x08012c7c
 8009e3c:	080133b0 	.word	0x080133b0
 8009e40:	08012cc0 	.word	0x08012cc0

08009e44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d02a      	beq.n	8009eaa <tcp_netif_ip_addr_changed+0x66>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d026      	beq.n	8009eaa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009e5c:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <tcp_netif_ip_addr_changed+0x70>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff ffbc 	bl	8009de0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009e68:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <tcp_netif_ip_addr_changed+0x74>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ffb6 	bl	8009de0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d017      	beq.n	8009eaa <tcp_netif_ip_addr_changed+0x66>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d013      	beq.n	8009eaa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e82:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <tcp_netif_ip_addr_changed+0x78>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e00c      	b.n	8009ea4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d103      	bne.n	8009e9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1ef      	bne.n	8009e8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20008c34 	.word	0x20008c34
 8009eb8:	20008c2c 	.word	0x20008c2c
 8009ebc:	20008c30 	.word	0x20008c30

08009ec0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d007      	beq.n	8009ee0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff fb51 	bl	800957c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009ee8:	b590      	push	{r4, r7, lr}
 8009eea:	b08d      	sub	sp, #52	; 0x34
 8009eec:	af04      	add	r7, sp, #16
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <tcp_input+0x1c>
 8009ef8:	4b9b      	ldr	r3, [pc, #620]	; (800a168 <tcp_input+0x280>)
 8009efa:	2283      	movs	r2, #131	; 0x83
 8009efc:	499b      	ldr	r1, [pc, #620]	; (800a16c <tcp_input+0x284>)
 8009efe:	489c      	ldr	r0, [pc, #624]	; (800a170 <tcp_input+0x288>)
 8009f00:	f007 f8d6 	bl	80110b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a9a      	ldr	r2, [pc, #616]	; (800a174 <tcp_input+0x28c>)
 8009f0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	895b      	ldrh	r3, [r3, #10]
 8009f10:	2b13      	cmp	r3, #19
 8009f12:	f240 83d1 	bls.w	800a6b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f16:	4b98      	ldr	r3, [pc, #608]	; (800a178 <tcp_input+0x290>)
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	4a97      	ldr	r2, [pc, #604]	; (800a178 <tcp_input+0x290>)
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f006 f86f 	bl	8010004 <ip4_addr_isbroadcast_u32>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 83c7 	bne.w	800a6bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009f2e:	4b92      	ldr	r3, [pc, #584]	; (800a178 <tcp_input+0x290>)
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f36:	2be0      	cmp	r3, #224	; 0xe0
 8009f38:	f000 83c0 	beq.w	800a6bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009f3c:	4b8d      	ldr	r3, [pc, #564]	; (800a174 <tcp_input+0x28c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	899b      	ldrh	r3, [r3, #12]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fc fb6d 	bl	8006624 <lwip_htons>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	0b1b      	lsrs	r3, r3, #12
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009f56:	7cbb      	ldrb	r3, [r7, #18]
 8009f58:	2b13      	cmp	r3, #19
 8009f5a:	f240 83b1 	bls.w	800a6c0 <tcp_input+0x7d8>
 8009f5e:	7cbb      	ldrb	r3, [r7, #18]
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	891b      	ldrh	r3, [r3, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	f200 83aa 	bhi.w	800a6c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f6c:	7cbb      	ldrb	r3, [r7, #18]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b14      	subs	r3, #20
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	4b81      	ldr	r3, [pc, #516]	; (800a17c <tcp_input+0x294>)
 8009f76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009f78:	4b81      	ldr	r3, [pc, #516]	; (800a180 <tcp_input+0x298>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	895a      	ldrh	r2, [r3, #10]
 8009f82:	7cbb      	ldrb	r3, [r7, #18]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d309      	bcc.n	8009f9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009f8a:	4b7c      	ldr	r3, [pc, #496]	; (800a17c <tcp_input+0x294>)
 8009f8c:	881a      	ldrh	r2, [r3, #0]
 8009f8e:	4b7d      	ldr	r3, [pc, #500]	; (800a184 <tcp_input+0x29c>)
 8009f90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f92:	7cbb      	ldrb	r3, [r7, #18]
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fd fe52 	bl	8007c40 <pbuf_remove_header>
 8009f9c:	e04e      	b.n	800a03c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d105      	bne.n	8009fb2 <tcp_input+0xca>
 8009fa6:	4b70      	ldr	r3, [pc, #448]	; (800a168 <tcp_input+0x280>)
 8009fa8:	22c2      	movs	r2, #194	; 0xc2
 8009faa:	4977      	ldr	r1, [pc, #476]	; (800a188 <tcp_input+0x2a0>)
 8009fac:	4870      	ldr	r0, [pc, #448]	; (800a170 <tcp_input+0x288>)
 8009fae:	f007 f87f 	bl	80110b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009fb2:	2114      	movs	r1, #20
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fd fe43 	bl	8007c40 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	895a      	ldrh	r2, [r3, #10]
 8009fbe:	4b71      	ldr	r3, [pc, #452]	; (800a184 <tcp_input+0x29c>)
 8009fc0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009fc2:	4b6e      	ldr	r3, [pc, #440]	; (800a17c <tcp_input+0x294>)
 8009fc4:	881a      	ldrh	r2, [r3, #0]
 8009fc6:	4b6f      	ldr	r3, [pc, #444]	; (800a184 <tcp_input+0x29c>)
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009fce:	4b6d      	ldr	r3, [pc, #436]	; (800a184 <tcp_input+0x29c>)
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7fd fe33 	bl	8007c40 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	8a3a      	ldrh	r2, [r7, #16]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	f200 836e 	bhi.w	800a6c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	4a64      	ldr	r2, [pc, #400]	; (800a180 <tcp_input+0x298>)
 8009ff0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	8a3a      	ldrh	r2, [r7, #16]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fd fe20 	bl	8007c40 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	891a      	ldrh	r2, [r3, #8]
 800a004:	8a3b      	ldrh	r3, [r7, #16]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	895b      	ldrh	r3, [r3, #10]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <tcp_input+0x13a>
 800a016:	4b54      	ldr	r3, [pc, #336]	; (800a168 <tcp_input+0x280>)
 800a018:	22df      	movs	r2, #223	; 0xdf
 800a01a:	495c      	ldr	r1, [pc, #368]	; (800a18c <tcp_input+0x2a4>)
 800a01c:	4854      	ldr	r0, [pc, #336]	; (800a170 <tcp_input+0x288>)
 800a01e:	f007 f847 	bl	80110b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	891a      	ldrh	r2, [r3, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	891b      	ldrh	r3, [r3, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d005      	beq.n	800a03c <tcp_input+0x154>
 800a030:	4b4d      	ldr	r3, [pc, #308]	; (800a168 <tcp_input+0x280>)
 800a032:	22e0      	movs	r2, #224	; 0xe0
 800a034:	4956      	ldr	r1, [pc, #344]	; (800a190 <tcp_input+0x2a8>)
 800a036:	484e      	ldr	r0, [pc, #312]	; (800a170 <tcp_input+0x288>)
 800a038:	f007 f83a 	bl	80110b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a03c:	4b4d      	ldr	r3, [pc, #308]	; (800a174 <tcp_input+0x28c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	4a4b      	ldr	r2, [pc, #300]	; (800a174 <tcp_input+0x28c>)
 800a046:	6814      	ldr	r4, [r2, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fc faeb 	bl	8006624 <lwip_htons>
 800a04e:	4603      	mov	r3, r0
 800a050:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a052:	4b48      	ldr	r3, [pc, #288]	; (800a174 <tcp_input+0x28c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	885b      	ldrh	r3, [r3, #2]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4a46      	ldr	r2, [pc, #280]	; (800a174 <tcp_input+0x28c>)
 800a05c:	6814      	ldr	r4, [r2, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fc fae0 	bl	8006624 <lwip_htons>
 800a064:	4603      	mov	r3, r0
 800a066:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a068:	4b42      	ldr	r3, [pc, #264]	; (800a174 <tcp_input+0x28c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	4a41      	ldr	r2, [pc, #260]	; (800a174 <tcp_input+0x28c>)
 800a070:	6814      	ldr	r4, [r2, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f7fc faeb 	bl	800664e <lwip_htonl>
 800a078:	4603      	mov	r3, r0
 800a07a:	6063      	str	r3, [r4, #4]
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	4a45      	ldr	r2, [pc, #276]	; (800a194 <tcp_input+0x2ac>)
 800a080:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a082:	4b3c      	ldr	r3, [pc, #240]	; (800a174 <tcp_input+0x28c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	4a3a      	ldr	r2, [pc, #232]	; (800a174 <tcp_input+0x28c>)
 800a08a:	6814      	ldr	r4, [r2, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fc fade 	bl	800664e <lwip_htonl>
 800a092:	4603      	mov	r3, r0
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <tcp_input+0x2b0>)
 800a09a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a09c:	4b35      	ldr	r3, [pc, #212]	; (800a174 <tcp_input+0x28c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	89db      	ldrh	r3, [r3, #14]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4a33      	ldr	r2, [pc, #204]	; (800a174 <tcp_input+0x28c>)
 800a0a6:	6814      	ldr	r4, [r2, #0]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fc fabb 	bl	8006624 <lwip_htons>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <tcp_input+0x28c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	899b      	ldrh	r3, [r3, #12]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fc fab2 	bl	8006624 <lwip_htons>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4b34      	ldr	r3, [pc, #208]	; (800a19c <tcp_input+0x2b4>)
 800a0cc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	891a      	ldrh	r2, [r3, #8]
 800a0d2:	4b33      	ldr	r3, [pc, #204]	; (800a1a0 <tcp_input+0x2b8>)
 800a0d4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a0d6:	4b31      	ldr	r3, [pc, #196]	; (800a19c <tcp_input+0x2b4>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	f003 0303 	and.w	r3, r3, #3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00c      	beq.n	800a0fc <tcp_input+0x214>
    tcplen++;
 800a0e2:	4b2f      	ldr	r3, [pc, #188]	; (800a1a0 <tcp_input+0x2b8>)
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	4b2d      	ldr	r3, [pc, #180]	; (800a1a0 <tcp_input+0x2b8>)
 800a0ec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	891a      	ldrh	r2, [r3, #8]
 800a0f2:	4b2b      	ldr	r3, [pc, #172]	; (800a1a0 <tcp_input+0x2b8>)
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	f200 82e6 	bhi.w	800a6c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a100:	4b28      	ldr	r3, [pc, #160]	; (800a1a4 <tcp_input+0x2bc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	e09d      	b.n	800a244 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	7d1b      	ldrb	r3, [r3, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d105      	bne.n	800a11c <tcp_input+0x234>
 800a110:	4b15      	ldr	r3, [pc, #84]	; (800a168 <tcp_input+0x280>)
 800a112:	22fb      	movs	r2, #251	; 0xfb
 800a114:	4924      	ldr	r1, [pc, #144]	; (800a1a8 <tcp_input+0x2c0>)
 800a116:	4816      	ldr	r0, [pc, #88]	; (800a170 <tcp_input+0x288>)
 800a118:	f006 ffca 	bl	80110b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	7d1b      	ldrb	r3, [r3, #20]
 800a120:	2b0a      	cmp	r3, #10
 800a122:	d105      	bne.n	800a130 <tcp_input+0x248>
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <tcp_input+0x280>)
 800a126:	22fc      	movs	r2, #252	; 0xfc
 800a128:	4920      	ldr	r1, [pc, #128]	; (800a1ac <tcp_input+0x2c4>)
 800a12a:	4811      	ldr	r0, [pc, #68]	; (800a170 <tcp_input+0x288>)
 800a12c:	f006 ffc0 	bl	80110b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	7d1b      	ldrb	r3, [r3, #20]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d105      	bne.n	800a144 <tcp_input+0x25c>
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <tcp_input+0x280>)
 800a13a:	22fd      	movs	r2, #253	; 0xfd
 800a13c:	491c      	ldr	r1, [pc, #112]	; (800a1b0 <tcp_input+0x2c8>)
 800a13e:	480c      	ldr	r0, [pc, #48]	; (800a170 <tcp_input+0x288>)
 800a140:	f006 ffb6 	bl	80110b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	7a1b      	ldrb	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d033      	beq.n	800a1b4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	7a1a      	ldrb	r2, [r3, #8]
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <tcp_input+0x290>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a158:	3301      	adds	r3, #1
 800a15a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d029      	beq.n	800a1b4 <tcp_input+0x2cc>
      prev = pcb;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	61bb      	str	r3, [r7, #24]
      continue;
 800a164:	e06b      	b.n	800a23e <tcp_input+0x356>
 800a166:	bf00      	nop
 800a168:	080133e4 	.word	0x080133e4
 800a16c:	08013418 	.word	0x08013418
 800a170:	08013430 	.word	0x08013430
 800a174:	20008c50 	.word	0x20008c50
 800a178:	200056b8 	.word	0x200056b8
 800a17c:	20008c54 	.word	0x20008c54
 800a180:	20008c58 	.word	0x20008c58
 800a184:	20008c56 	.word	0x20008c56
 800a188:	08013458 	.word	0x08013458
 800a18c:	08013468 	.word	0x08013468
 800a190:	08013474 	.word	0x08013474
 800a194:	20008c60 	.word	0x20008c60
 800a198:	20008c64 	.word	0x20008c64
 800a19c:	20008c6c 	.word	0x20008c6c
 800a1a0:	20008c6a 	.word	0x20008c6a
 800a1a4:	20008c34 	.word	0x20008c34
 800a1a8:	08013494 	.word	0x08013494
 800a1ac:	080134bc 	.word	0x080134bc
 800a1b0:	080134e8 	.word	0x080134e8
    }

    if (pcb->remote_port == tcphdr->src &&
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	8b1a      	ldrh	r2, [r3, #24]
 800a1b8:	4b72      	ldr	r3, [pc, #456]	; (800a384 <tcp_input+0x49c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d13a      	bne.n	800a23a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	8ada      	ldrh	r2, [r3, #22]
 800a1c8:	4b6e      	ldr	r3, [pc, #440]	; (800a384 <tcp_input+0x49c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d132      	bne.n	800a23a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	4b6b      	ldr	r3, [pc, #428]	; (800a388 <tcp_input+0x4a0>)
 800a1da:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d12c      	bne.n	800a23a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	4b68      	ldr	r3, [pc, #416]	; (800a388 <tcp_input+0x4a0>)
 800a1e6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d126      	bne.n	800a23a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d106      	bne.n	800a204 <tcp_input+0x31c>
 800a1f6:	4b65      	ldr	r3, [pc, #404]	; (800a38c <tcp_input+0x4a4>)
 800a1f8:	f240 120d 	movw	r2, #269	; 0x10d
 800a1fc:	4964      	ldr	r1, [pc, #400]	; (800a390 <tcp_input+0x4a8>)
 800a1fe:	4865      	ldr	r0, [pc, #404]	; (800a394 <tcp_input+0x4ac>)
 800a200:	f006 ff56 	bl	80110b0 <iprintf>
      if (prev != NULL) {
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <tcp_input+0x338>
        prev->next = pcb->next;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a212:	4b61      	ldr	r3, [pc, #388]	; (800a398 <tcp_input+0x4b0>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a21a:	4a5f      	ldr	r2, [pc, #380]	; (800a398 <tcp_input+0x4b0>)
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	429a      	cmp	r2, r3
 800a228:	d111      	bne.n	800a24e <tcp_input+0x366>
 800a22a:	4b58      	ldr	r3, [pc, #352]	; (800a38c <tcp_input+0x4a4>)
 800a22c:	f240 1215 	movw	r2, #277	; 0x115
 800a230:	495a      	ldr	r1, [pc, #360]	; (800a39c <tcp_input+0x4b4>)
 800a232:	4858      	ldr	r0, [pc, #352]	; (800a394 <tcp_input+0x4ac>)
 800a234:	f006 ff3c 	bl	80110b0 <iprintf>
      break;
 800a238:	e009      	b.n	800a24e <tcp_input+0x366>
    }
    prev = pcb;
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f47f af5e 	bne.w	800a108 <tcp_input+0x220>
 800a24c:	e000      	b.n	800a250 <tcp_input+0x368>
      break;
 800a24e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 80aa 	bne.w	800a3ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a258:	4b51      	ldr	r3, [pc, #324]	; (800a3a0 <tcp_input+0x4b8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	61fb      	str	r3, [r7, #28]
 800a25e:	e03f      	b.n	800a2e0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	7d1b      	ldrb	r3, [r3, #20]
 800a264:	2b0a      	cmp	r3, #10
 800a266:	d006      	beq.n	800a276 <tcp_input+0x38e>
 800a268:	4b48      	ldr	r3, [pc, #288]	; (800a38c <tcp_input+0x4a4>)
 800a26a:	f240 121f 	movw	r2, #287	; 0x11f
 800a26e:	494d      	ldr	r1, [pc, #308]	; (800a3a4 <tcp_input+0x4bc>)
 800a270:	4848      	ldr	r0, [pc, #288]	; (800a394 <tcp_input+0x4ac>)
 800a272:	f006 ff1d 	bl	80110b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	7a1b      	ldrb	r3, [r3, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	7a1a      	ldrb	r2, [r3, #8]
 800a282:	4b41      	ldr	r3, [pc, #260]	; (800a388 <tcp_input+0x4a0>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a28a:	3301      	adds	r3, #1
 800a28c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a28e:	429a      	cmp	r2, r3
 800a290:	d122      	bne.n	800a2d8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	8b1a      	ldrh	r2, [r3, #24]
 800a296:	4b3b      	ldr	r3, [pc, #236]	; (800a384 <tcp_input+0x49c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d11b      	bne.n	800a2da <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	8ada      	ldrh	r2, [r3, #22]
 800a2a6:	4b37      	ldr	r3, [pc, #220]	; (800a384 <tcp_input+0x49c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	885b      	ldrh	r3, [r3, #2]
 800a2ac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d113      	bne.n	800a2da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	4b34      	ldr	r3, [pc, #208]	; (800a388 <tcp_input+0x4a0>)
 800a2b8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d10d      	bne.n	800a2da <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b31      	ldr	r3, [pc, #196]	; (800a388 <tcp_input+0x4a0>)
 800a2c4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d107      	bne.n	800a2da <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a2ca:	69f8      	ldr	r0, [r7, #28]
 800a2cc:	f000 fb56 	bl	800a97c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fd fd3b 	bl	8007d4c <pbuf_free>
        return;
 800a2d6:	e1fd      	b.n	800a6d4 <tcp_input+0x7ec>
        continue;
 800a2d8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1bc      	bne.n	800a260 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2ea:	4b2f      	ldr	r3, [pc, #188]	; (800a3a8 <tcp_input+0x4c0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	e02a      	b.n	800a348 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	7a1b      	ldrb	r3, [r3, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00c      	beq.n	800a314 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	7a1a      	ldrb	r2, [r3, #8]
 800a2fe:	4b22      	ldr	r3, [pc, #136]	; (800a388 <tcp_input+0x4a0>)
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a306:	3301      	adds	r3, #1
 800a308:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d002      	beq.n	800a314 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	61bb      	str	r3, [r7, #24]
        continue;
 800a312:	e016      	b.n	800a342 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	8ada      	ldrh	r2, [r3, #22]
 800a318:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <tcp_input+0x49c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	429a      	cmp	r2, r3
 800a322:	d10c      	bne.n	800a33e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4b17      	ldr	r3, [pc, #92]	; (800a388 <tcp_input+0x4a0>)
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d00f      	beq.n	800a350 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00d      	beq.n	800a352 <tcp_input+0x46a>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d009      	beq.n	800a352 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1d1      	bne.n	800a2f2 <tcp_input+0x40a>
 800a34e:	e000      	b.n	800a352 <tcp_input+0x46a>
            break;
 800a350:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d029      	beq.n	800a3ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <tcp_input+0x4c0>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a36e:	4a0e      	ldr	r2, [pc, #56]	; (800a3a8 <tcp_input+0x4c0>)
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a374:	6978      	ldr	r0, [r7, #20]
 800a376:	f000 fa03 	bl	800a780 <tcp_listen_input>
      }
      pbuf_free(p);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fd fce6 	bl	8007d4c <pbuf_free>
      return;
 800a380:	e1a8      	b.n	800a6d4 <tcp_input+0x7ec>
 800a382:	bf00      	nop
 800a384:	20008c50 	.word	0x20008c50
 800a388:	200056b8 	.word	0x200056b8
 800a38c:	080133e4 	.word	0x080133e4
 800a390:	08013510 	.word	0x08013510
 800a394:	08013430 	.word	0x08013430
 800a398:	20008c34 	.word	0x20008c34
 800a39c:	0801353c 	.word	0x0801353c
 800a3a0:	20008c38 	.word	0x20008c38
 800a3a4:	08013568 	.word	0x08013568
 800a3a8:	20008c30 	.word	0x20008c30
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 8158 	beq.w	800a664 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a3b4:	4b95      	ldr	r3, [pc, #596]	; (800a60c <tcp_input+0x724>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	891a      	ldrh	r2, [r3, #8]
 800a3be:	4b93      	ldr	r3, [pc, #588]	; (800a60c <tcp_input+0x724>)
 800a3c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a3c2:	4a92      	ldr	r2, [pc, #584]	; (800a60c <tcp_input+0x724>)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a3c8:	4b91      	ldr	r3, [pc, #580]	; (800a610 <tcp_input+0x728>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a8f      	ldr	r2, [pc, #572]	; (800a60c <tcp_input+0x724>)
 800a3ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a3d0:	4b90      	ldr	r3, [pc, #576]	; (800a614 <tcp_input+0x72c>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a3d6:	4b90      	ldr	r3, [pc, #576]	; (800a618 <tcp_input+0x730>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a3dc:	4b8f      	ldr	r3, [pc, #572]	; (800a61c <tcp_input+0x734>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a3e2:	4b8f      	ldr	r3, [pc, #572]	; (800a620 <tcp_input+0x738>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	7b5b      	ldrb	r3, [r3, #13]
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a400:	2b00      	cmp	r3, #0
 800a402:	d017      	beq.n	800a434 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a404:	69f8      	ldr	r0, [r7, #28]
 800a406:	f7ff f83d 	bl	8009484 <tcp_process_refused_data>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f113 0f0d 	cmn.w	r3, #13
 800a410:	d007      	beq.n	800a422 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00c      	beq.n	800a434 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a41a:	4b82      	ldr	r3, [pc, #520]	; (800a624 <tcp_input+0x73c>)
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a426:	2b00      	cmp	r3, #0
 800a428:	f040 80e3 	bne.w	800a5f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a42c:	69f8      	ldr	r0, [r7, #28]
 800a42e:	f003 fe05 	bl	800e03c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a432:	e0de      	b.n	800a5f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a434:	4a7c      	ldr	r2, [pc, #496]	; (800a628 <tcp_input+0x740>)
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a43a:	69f8      	ldr	r0, [r7, #28]
 800a43c:	f000 fb18 	bl	800aa70 <tcp_process>
 800a440:	4603      	mov	r3, r0
 800a442:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a448:	f113 0f0d 	cmn.w	r3, #13
 800a44c:	f000 80d3 	beq.w	800a5f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a450:	4b71      	ldr	r3, [pc, #452]	; (800a618 <tcp_input+0x730>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d015      	beq.n	800a488 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <tcp_input+0x590>
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	6912      	ldr	r2, [r2, #16]
 800a470:	f06f 010d 	mvn.w	r1, #13
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a478:	69f9      	ldr	r1, [r7, #28]
 800a47a:	486c      	ldr	r0, [pc, #432]	; (800a62c <tcp_input+0x744>)
 800a47c:	f7ff fbbc 	bl	8009bf8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a480:	69f8      	ldr	r0, [r7, #28]
 800a482:	f7fd ff03 	bl	800828c <tcp_free>
 800a486:	e0da      	b.n	800a63e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a48c:	4b63      	ldr	r3, [pc, #396]	; (800a61c <tcp_input+0x734>)
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01d      	beq.n	800a4d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a494:	4b61      	ldr	r3, [pc, #388]	; (800a61c <tcp_input+0x734>)
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00a      	beq.n	800a4ba <tcp_input+0x5d2>
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	6910      	ldr	r0, [r2, #16]
 800a4ae:	89fa      	ldrh	r2, [r7, #14]
 800a4b0:	69f9      	ldr	r1, [r7, #28]
 800a4b2:	4798      	blx	r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	74fb      	strb	r3, [r7, #19]
 800a4b8:	e001      	b.n	800a4be <tcp_input+0x5d6>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a4be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4c2:	f113 0f0d 	cmn.w	r3, #13
 800a4c6:	f000 8098 	beq.w	800a5fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a4ca:	4b54      	ldr	r3, [pc, #336]	; (800a61c <tcp_input+0x734>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a4d0:	69f8      	ldr	r0, [r7, #28]
 800a4d2:	f000 f915 	bl	800a700 <tcp_input_delayed_close>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f040 8090 	bne.w	800a5fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a4de:	4b4d      	ldr	r3, [pc, #308]	; (800a614 <tcp_input+0x72c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d041      	beq.n	800a56a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <tcp_input+0x614>
 800a4ee:	4b50      	ldr	r3, [pc, #320]	; (800a630 <tcp_input+0x748>)
 800a4f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4f4:	494f      	ldr	r1, [pc, #316]	; (800a634 <tcp_input+0x74c>)
 800a4f6:	4850      	ldr	r0, [pc, #320]	; (800a638 <tcp_input+0x750>)
 800a4f8:	f006 fdda 	bl	80110b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	8b5b      	ldrh	r3, [r3, #26]
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a508:	4b42      	ldr	r3, [pc, #264]	; (800a614 <tcp_input+0x72c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fc1d 	bl	8007d4c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a512:	69f8      	ldr	r0, [r7, #28]
 800a514:	f7fe f9a2 	bl	800885c <tcp_abort>
            goto aborted;
 800a518:	e091      	b.n	800a63e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00c      	beq.n	800a53e <tcp_input+0x656>
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	6918      	ldr	r0, [r3, #16]
 800a52e:	4b39      	ldr	r3, [pc, #228]	; (800a614 <tcp_input+0x72c>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	47a0      	blx	r4
 800a538:	4603      	mov	r3, r0
 800a53a:	74fb      	strb	r3, [r7, #19]
 800a53c:	e008      	b.n	800a550 <tcp_input+0x668>
 800a53e:	4b35      	ldr	r3, [pc, #212]	; (800a614 <tcp_input+0x72c>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	2300      	movs	r3, #0
 800a544:	69f9      	ldr	r1, [r7, #28]
 800a546:	2000      	movs	r0, #0
 800a548:	f7ff f890 	bl	800966c <tcp_recv_null>
 800a54c:	4603      	mov	r3, r0
 800a54e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a554:	f113 0f0d 	cmn.w	r3, #13
 800a558:	d053      	beq.n	800a602 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a55a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a562:	4b2c      	ldr	r3, [pc, #176]	; (800a614 <tcp_input+0x72c>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a56a:	4b2b      	ldr	r3, [pc, #172]	; (800a618 <tcp_input+0x730>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	d030      	beq.n	800a5d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a582:	7b5a      	ldrb	r2, [r3, #13]
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a588:	f042 0220 	orr.w	r2, r2, #32
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	735a      	strb	r2, [r3, #13]
 800a590:	e022      	b.n	800a5d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a596:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a59a:	d005      	beq.n	800a5a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <tcp_input+0x6e2>
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	6918      	ldr	r0, [r3, #16]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	69f9      	ldr	r1, [r7, #28]
 800a5c2:	47a0      	blx	r4
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	74fb      	strb	r3, [r7, #19]
 800a5c8:	e001      	b.n	800a5ce <tcp_input+0x6e6>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a5ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5d2:	f113 0f0d 	cmn.w	r3, #13
 800a5d6:	d016      	beq.n	800a606 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a5d8:	4b13      	ldr	r3, [pc, #76]	; (800a628 <tcp_input+0x740>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a5de:	69f8      	ldr	r0, [r7, #28]
 800a5e0:	f000 f88e 	bl	800a700 <tcp_input_delayed_close>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d128      	bne.n	800a63c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a5ea:	69f8      	ldr	r0, [r7, #28]
 800a5ec:	f002 ff20 	bl	800d430 <tcp_output>
 800a5f0:	e025      	b.n	800a63e <tcp_input+0x756>
        goto aborted;
 800a5f2:	bf00      	nop
 800a5f4:	e023      	b.n	800a63e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a5f6:	bf00      	nop
 800a5f8:	e021      	b.n	800a63e <tcp_input+0x756>
              goto aborted;
 800a5fa:	bf00      	nop
 800a5fc:	e01f      	b.n	800a63e <tcp_input+0x756>
          goto aborted;
 800a5fe:	bf00      	nop
 800a600:	e01d      	b.n	800a63e <tcp_input+0x756>
            goto aborted;
 800a602:	bf00      	nop
 800a604:	e01b      	b.n	800a63e <tcp_input+0x756>
              goto aborted;
 800a606:	bf00      	nop
 800a608:	e019      	b.n	800a63e <tcp_input+0x756>
 800a60a:	bf00      	nop
 800a60c:	20008c40 	.word	0x20008c40
 800a610:	20008c50 	.word	0x20008c50
 800a614:	20008c70 	.word	0x20008c70
 800a618:	20008c6d 	.word	0x20008c6d
 800a61c:	20008c68 	.word	0x20008c68
 800a620:	20008c6c 	.word	0x20008c6c
 800a624:	20008c6a 	.word	0x20008c6a
 800a628:	20008c74 	.word	0x20008c74
 800a62c:	20008c34 	.word	0x20008c34
 800a630:	080133e4 	.word	0x080133e4
 800a634:	08013598 	.word	0x08013598
 800a638:	08013430 	.word	0x08013430
          goto aborted;
 800a63c:	bf00      	nop
    tcp_input_pcb = NULL;
 800a63e:	4b27      	ldr	r3, [pc, #156]	; (800a6dc <tcp_input+0x7f4>)
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a644:	4b26      	ldr	r3, [pc, #152]	; (800a6e0 <tcp_input+0x7f8>)
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a64a:	4b26      	ldr	r3, [pc, #152]	; (800a6e4 <tcp_input+0x7fc>)
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d03f      	beq.n	800a6d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a652:	4b24      	ldr	r3, [pc, #144]	; (800a6e4 <tcp_input+0x7fc>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd fb78 	bl	8007d4c <pbuf_free>
      inseg.p = NULL;
 800a65c:	4b21      	ldr	r3, [pc, #132]	; (800a6e4 <tcp_input+0x7fc>)
 800a65e:	2200      	movs	r2, #0
 800a660:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a662:	e036      	b.n	800a6d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a664:	4b20      	ldr	r3, [pc, #128]	; (800a6e8 <tcp_input+0x800>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fb ffd9 	bl	8006624 <lwip_htons>
 800a672:	4603      	mov	r3, r0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d118      	bne.n	800a6b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a67e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <tcp_input+0x804>)
 800a680:	6819      	ldr	r1, [r3, #0]
 800a682:	4b1b      	ldr	r3, [pc, #108]	; (800a6f0 <tcp_input+0x808>)
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <tcp_input+0x80c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a68e:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <tcp_input+0x800>)
 800a690:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a692:	885b      	ldrh	r3, [r3, #2]
 800a694:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a696:	4a14      	ldr	r2, [pc, #80]	; (800a6e8 <tcp_input+0x800>)
 800a698:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a69a:	8812      	ldrh	r2, [r2, #0]
 800a69c:	b292      	uxth	r2, r2
 800a69e:	9202      	str	r2, [sp, #8]
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <tcp_input+0x810>)
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <tcp_input+0x814>)
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f003 fc74 	bl	800df98 <tcp_rst>
    pbuf_free(p);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7fd fb4b 	bl	8007d4c <pbuf_free>
  return;
 800a6b6:	e00c      	b.n	800a6d2 <tcp_input+0x7ea>
    goto dropped;
 800a6b8:	bf00      	nop
 800a6ba:	e006      	b.n	800a6ca <tcp_input+0x7e2>
    goto dropped;
 800a6bc:	bf00      	nop
 800a6be:	e004      	b.n	800a6ca <tcp_input+0x7e2>
    goto dropped;
 800a6c0:	bf00      	nop
 800a6c2:	e002      	b.n	800a6ca <tcp_input+0x7e2>
      goto dropped;
 800a6c4:	bf00      	nop
 800a6c6:	e000      	b.n	800a6ca <tcp_input+0x7e2>
      goto dropped;
 800a6c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7fd fb3e 	bl	8007d4c <pbuf_free>
 800a6d0:	e000      	b.n	800a6d4 <tcp_input+0x7ec>
  return;
 800a6d2:	bf00      	nop
}
 800a6d4:	3724      	adds	r7, #36	; 0x24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd90      	pop	{r4, r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20008c74 	.word	0x20008c74
 800a6e0:	20008c70 	.word	0x20008c70
 800a6e4:	20008c40 	.word	0x20008c40
 800a6e8:	20008c50 	.word	0x20008c50
 800a6ec:	20008c64 	.word	0x20008c64
 800a6f0:	20008c6a 	.word	0x20008c6a
 800a6f4:	20008c60 	.word	0x20008c60
 800a6f8:	200056c8 	.word	0x200056c8
 800a6fc:	200056cc 	.word	0x200056cc

0800a700 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <tcp_input_delayed_close+0x1c>
 800a70e:	4b17      	ldr	r3, [pc, #92]	; (800a76c <tcp_input_delayed_close+0x6c>)
 800a710:	f240 225a 	movw	r2, #602	; 0x25a
 800a714:	4916      	ldr	r1, [pc, #88]	; (800a770 <tcp_input_delayed_close+0x70>)
 800a716:	4817      	ldr	r0, [pc, #92]	; (800a774 <tcp_input_delayed_close+0x74>)
 800a718:	f006 fcca 	bl	80110b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a71c:	4b16      	ldr	r3, [pc, #88]	; (800a778 <tcp_input_delayed_close+0x78>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01c      	beq.n	800a762 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8b5b      	ldrh	r3, [r3, #26]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10d      	bne.n	800a750 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d008      	beq.n	800a750 <tcp_input_delayed_close+0x50>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6912      	ldr	r2, [r2, #16]
 800a748:	f06f 010e 	mvn.w	r1, #14
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	480a      	ldr	r0, [pc, #40]	; (800a77c <tcp_input_delayed_close+0x7c>)
 800a754:	f7ff fa50 	bl	8009bf8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fd fd97 	bl	800828c <tcp_free>
    return 1;
 800a75e:	2301      	movs	r3, #1
 800a760:	e000      	b.n	800a764 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	080133e4 	.word	0x080133e4
 800a770:	080135b4 	.word	0x080135b4
 800a774:	08013430 	.word	0x08013430
 800a778:	20008c6d 	.word	0x20008c6d
 800a77c:	20008c34 	.word	0x20008c34

0800a780 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a780:	b590      	push	{r4, r7, lr}
 800a782:	b08b      	sub	sp, #44	; 0x2c
 800a784:	af04      	add	r7, sp, #16
 800a786:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a788:	4b6f      	ldr	r3, [pc, #444]	; (800a948 <tcp_listen_input+0x1c8>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	f040 80d2 	bne.w	800a93a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <tcp_listen_input+0x2a>
 800a79c:	4b6b      	ldr	r3, [pc, #428]	; (800a94c <tcp_listen_input+0x1cc>)
 800a79e:	f240 2281 	movw	r2, #641	; 0x281
 800a7a2:	496b      	ldr	r1, [pc, #428]	; (800a950 <tcp_listen_input+0x1d0>)
 800a7a4:	486b      	ldr	r0, [pc, #428]	; (800a954 <tcp_listen_input+0x1d4>)
 800a7a6:	f006 fc83 	bl	80110b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a7aa:	4b67      	ldr	r3, [pc, #412]	; (800a948 <tcp_listen_input+0x1c8>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f003 0310 	and.w	r3, r3, #16
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d019      	beq.n	800a7ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7b6:	4b68      	ldr	r3, [pc, #416]	; (800a958 <tcp_listen_input+0x1d8>)
 800a7b8:	6819      	ldr	r1, [r3, #0]
 800a7ba:	4b68      	ldr	r3, [pc, #416]	; (800a95c <tcp_listen_input+0x1dc>)
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4b67      	ldr	r3, [pc, #412]	; (800a960 <tcp_listen_input+0x1e0>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7c6:	4b67      	ldr	r3, [pc, #412]	; (800a964 <tcp_listen_input+0x1e4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7ce:	4a65      	ldr	r2, [pc, #404]	; (800a964 <tcp_listen_input+0x1e4>)
 800a7d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7d2:	8812      	ldrh	r2, [r2, #0]
 800a7d4:	b292      	uxth	r2, r2
 800a7d6:	9202      	str	r2, [sp, #8]
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	4b63      	ldr	r3, [pc, #396]	; (800a968 <tcp_listen_input+0x1e8>)
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	4b63      	ldr	r3, [pc, #396]	; (800a96c <tcp_listen_input+0x1ec>)
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f003 fbd8 	bl	800df98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a7e8:	e0a9      	b.n	800a93e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a7ea:	4b57      	ldr	r3, [pc, #348]	; (800a948 <tcp_listen_input+0x1c8>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f003 0302 	and.w	r3, r3, #2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 80a3 	beq.w	800a93e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7d5b      	ldrb	r3, [r3, #21]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff f859 	bl	80098b4 <tcp_alloc>
 800a802:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d111      	bne.n	800a82e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <tcp_listen_input+0xa8>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6910      	ldr	r0, [r2, #16]
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	2100      	movs	r1, #0
 800a820:	4798      	blx	r3
 800a822:	4603      	mov	r3, r0
 800a824:	73bb      	strb	r3, [r7, #14]
      return;
 800a826:	e08b      	b.n	800a940 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a828:	23f0      	movs	r3, #240	; 0xf0
 800a82a:	73bb      	strb	r3, [r7, #14]
      return;
 800a82c:	e088      	b.n	800a940 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a82e:	4b50      	ldr	r3, [pc, #320]	; (800a970 <tcp_listen_input+0x1f0>)
 800a830:	695a      	ldr	r2, [r3, #20]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a836:	4b4e      	ldr	r3, [pc, #312]	; (800a970 <tcp_listen_input+0x1f0>)
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	8ada      	ldrh	r2, [r3, #22]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a846:	4b47      	ldr	r3, [pc, #284]	; (800a964 <tcp_listen_input+0x1e4>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2203      	movs	r2, #3
 800a856:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a858:	4b41      	ldr	r3, [pc, #260]	; (800a960 <tcp_listen_input+0x1e0>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a86a:	6978      	ldr	r0, [r7, #20]
 800a86c:	f7ff fa58 	bl	8009d20 <tcp_next_iss>
 800a870:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a88a:	4b35      	ldr	r3, [pc, #212]	; (800a960 <tcp_listen_input+0x1e0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7a5b      	ldrb	r3, [r3, #9]
 800a8a6:	f003 030c 	and.w	r3, r3, #12
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7a1a      	ldrb	r2, [r3, #8]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a8b8:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <tcp_listen_input+0x1f4>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	60da      	str	r2, [r3, #12]
 800a8c0:	4a2c      	ldr	r2, [pc, #176]	; (800a974 <tcp_listen_input+0x1f4>)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	f003 fd29 	bl	800e31c <tcp_timer_needed>
 800a8ca:	4b2b      	ldr	r3, [pc, #172]	; (800a978 <tcp_listen_input+0x1f8>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	f001 fd8f 	bl	800c3f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <tcp_listen_input+0x1e4>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	89db      	ldrh	r3, [r3, #14]
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f005 f8ed 	bl	800fad8 <ip4_route>
 800a8fe:	4601      	mov	r1, r0
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	3304      	adds	r3, #4
 800a904:	461a      	mov	r2, r3
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff fa30 	bl	8009d6c <tcp_eff_send_mss_netif>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a914:	2112      	movs	r1, #18
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f002 fc9c 	bl	800d254 <tcp_enqueue_flags>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a928:	2100      	movs	r1, #0
 800a92a:	6978      	ldr	r0, [r7, #20]
 800a92c:	f7fd fed8 	bl	80086e0 <tcp_abandon>
      return;
 800a930:	e006      	b.n	800a940 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	f002 fd7c 	bl	800d430 <tcp_output>
  return;
 800a938:	e001      	b.n	800a93e <tcp_listen_input+0x1be>
    return;
 800a93a:	bf00      	nop
 800a93c:	e000      	b.n	800a940 <tcp_listen_input+0x1c0>
  return;
 800a93e:	bf00      	nop
}
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
 800a946:	bf00      	nop
 800a948:	20008c6c 	.word	0x20008c6c
 800a94c:	080133e4 	.word	0x080133e4
 800a950:	080135dc 	.word	0x080135dc
 800a954:	08013430 	.word	0x08013430
 800a958:	20008c64 	.word	0x20008c64
 800a95c:	20008c6a 	.word	0x20008c6a
 800a960:	20008c60 	.word	0x20008c60
 800a964:	20008c50 	.word	0x20008c50
 800a968:	200056c8 	.word	0x200056c8
 800a96c:	200056cc 	.word	0x200056cc
 800a970:	200056b8 	.word	0x200056b8
 800a974:	20008c34 	.word	0x20008c34
 800a978:	20008c3c 	.word	0x20008c3c

0800a97c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af04      	add	r7, sp, #16
 800a982:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a984:	4b2f      	ldr	r3, [pc, #188]	; (800aa44 <tcp_timewait_input+0xc8>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d153      	bne.n	800aa38 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <tcp_timewait_input+0x28>
 800a996:	4b2c      	ldr	r3, [pc, #176]	; (800aa48 <tcp_timewait_input+0xcc>)
 800a998:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a99c:	492b      	ldr	r1, [pc, #172]	; (800aa4c <tcp_timewait_input+0xd0>)
 800a99e:	482c      	ldr	r0, [pc, #176]	; (800aa50 <tcp_timewait_input+0xd4>)
 800a9a0:	f006 fb86 	bl	80110b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a9a4:	4b27      	ldr	r3, [pc, #156]	; (800aa44 <tcp_timewait_input+0xc8>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d02a      	beq.n	800aa06 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a9b0:	4b28      	ldr	r3, [pc, #160]	; (800aa54 <tcp_timewait_input+0xd8>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	db2d      	blt.n	800aa1a <tcp_timewait_input+0x9e>
 800a9be:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <tcp_timewait_input+0xd8>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a9ca:	440b      	add	r3, r1
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dc23      	bgt.n	800aa1a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9d2:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <tcp_timewait_input+0xdc>)
 800a9d4:	6819      	ldr	r1, [r3, #0]
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <tcp_timewait_input+0xe0>)
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <tcp_timewait_input+0xd8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9e2:	4b1f      	ldr	r3, [pc, #124]	; (800aa60 <tcp_timewait_input+0xe4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9e6:	885b      	ldrh	r3, [r3, #2]
 800a9e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9ea:	4a1d      	ldr	r2, [pc, #116]	; (800aa60 <tcp_timewait_input+0xe4>)
 800a9ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ee:	8812      	ldrh	r2, [r2, #0]
 800a9f0:	b292      	uxth	r2, r2
 800a9f2:	9202      	str	r2, [sp, #8]
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <tcp_timewait_input+0xe8>)
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	4b1b      	ldr	r3, [pc, #108]	; (800aa68 <tcp_timewait_input+0xec>)
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f003 faca 	bl	800df98 <tcp_rst>
      return;
 800aa04:	e01b      	b.n	800aa3e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800aa06:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <tcp_timewait_input+0xc8>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800aa12:	4b16      	ldr	r3, [pc, #88]	; (800aa6c <tcp_timewait_input+0xf0>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800aa1a:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <tcp_timewait_input+0xe0>)
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00c      	beq.n	800aa3c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	8b5b      	ldrh	r3, [r3, #26]
 800aa26:	f043 0302 	orr.w	r3, r3, #2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f002 fcfd 	bl	800d430 <tcp_output>
  }
  return;
 800aa36:	e001      	b.n	800aa3c <tcp_timewait_input+0xc0>
    return;
 800aa38:	bf00      	nop
 800aa3a:	e000      	b.n	800aa3e <tcp_timewait_input+0xc2>
  return;
 800aa3c:	bf00      	nop
}
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20008c6c 	.word	0x20008c6c
 800aa48:	080133e4 	.word	0x080133e4
 800aa4c:	080135fc 	.word	0x080135fc
 800aa50:	08013430 	.word	0x08013430
 800aa54:	20008c60 	.word	0x20008c60
 800aa58:	20008c64 	.word	0x20008c64
 800aa5c:	20008c6a 	.word	0x20008c6a
 800aa60:	20008c50 	.word	0x20008c50
 800aa64:	200056c8 	.word	0x200056c8
 800aa68:	200056cc 	.word	0x200056cc
 800aa6c:	20008c28 	.word	0x20008c28

0800aa70 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b08d      	sub	sp, #52	; 0x34
 800aa74:	af04      	add	r7, sp, #16
 800aa76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <tcp_process+0x24>
 800aa86:	4b9d      	ldr	r3, [pc, #628]	; (800acfc <tcp_process+0x28c>)
 800aa88:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aa8c:	499c      	ldr	r1, [pc, #624]	; (800ad00 <tcp_process+0x290>)
 800aa8e:	489d      	ldr	r0, [pc, #628]	; (800ad04 <tcp_process+0x294>)
 800aa90:	f006 fb0e 	bl	80110b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800aa94:	4b9c      	ldr	r3, [pc, #624]	; (800ad08 <tcp_process+0x298>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d04e      	beq.n	800ab3e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7d1b      	ldrb	r3, [r3, #20]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d108      	bne.n	800aaba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaac:	4b97      	ldr	r3, [pc, #604]	; (800ad0c <tcp_process+0x29c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d123      	bne.n	800aafc <tcp_process+0x8c>
        acceptable = 1;
 800aab4:	2301      	movs	r3, #1
 800aab6:	76fb      	strb	r3, [r7, #27]
 800aab8:	e020      	b.n	800aafc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aabe:	4b94      	ldr	r3, [pc, #592]	; (800ad10 <tcp_process+0x2a0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d102      	bne.n	800aacc <tcp_process+0x5c>
        acceptable = 1;
 800aac6:	2301      	movs	r3, #1
 800aac8:	76fb      	strb	r3, [r7, #27]
 800aaca:	e017      	b.n	800aafc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aacc:	4b90      	ldr	r3, [pc, #576]	; (800ad10 <tcp_process+0x2a0>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	db10      	blt.n	800aafc <tcp_process+0x8c>
 800aada:	4b8d      	ldr	r3, [pc, #564]	; (800ad10 <tcp_process+0x2a0>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aae6:	440b      	add	r3, r1
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc06      	bgt.n	800aafc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f043 0302 	orr.w	r3, r3, #2
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aafc:	7efb      	ldrb	r3, [r7, #27]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01b      	beq.n	800ab3a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <tcp_process+0xa8>
 800ab0a:	4b7c      	ldr	r3, [pc, #496]	; (800acfc <tcp_process+0x28c>)
 800ab0c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ab10:	4980      	ldr	r1, [pc, #512]	; (800ad14 <tcp_process+0x2a4>)
 800ab12:	487c      	ldr	r0, [pc, #496]	; (800ad04 <tcp_process+0x294>)
 800ab14:	f006 facc 	bl	80110b0 <iprintf>
      recv_flags |= TF_RESET;
 800ab18:	4b7f      	ldr	r3, [pc, #508]	; (800ad18 <tcp_process+0x2a8>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f043 0308 	orr.w	r3, r3, #8
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	4b7d      	ldr	r3, [pc, #500]	; (800ad18 <tcp_process+0x2a8>)
 800ab24:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	8b5b      	ldrh	r3, [r3, #26]
 800ab2a:	f023 0301 	bic.w	r3, r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ab34:	f06f 030d 	mvn.w	r3, #13
 800ab38:	e37a      	b.n	800b230 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e378      	b.n	800b230 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ab3e:	4b72      	ldr	r3, [pc, #456]	; (800ad08 <tcp_process+0x298>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d010      	beq.n	800ab6c <tcp_process+0xfc>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	7d1b      	ldrb	r3, [r3, #20]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d00c      	beq.n	800ab6c <tcp_process+0xfc>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7d1b      	ldrb	r3, [r3, #20]
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d008      	beq.n	800ab6c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	8b5b      	ldrh	r3, [r3, #26]
 800ab5e:	f043 0302 	orr.w	r3, r3, #2
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e361      	b.n	800b230 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8b5b      	ldrh	r3, [r3, #26]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ab78:	4b68      	ldr	r3, [pc, #416]	; (800ad1c <tcp_process+0x2ac>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fc2f 	bl	800c3f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	7d1b      	ldrb	r3, [r3, #20]
 800ab9a:	3b02      	subs	r3, #2
 800ab9c:	2b07      	cmp	r3, #7
 800ab9e:	f200 8337 	bhi.w	800b210 <tcp_process+0x7a0>
 800aba2:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <tcp_process+0x138>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800abc9 	.word	0x0800abc9
 800abac:	0800adf9 	.word	0x0800adf9
 800abb0:	0800af71 	.word	0x0800af71
 800abb4:	0800af9b 	.word	0x0800af9b
 800abb8:	0800b0bf 	.word	0x0800b0bf
 800abbc:	0800af71 	.word	0x0800af71
 800abc0:	0800b14b 	.word	0x0800b14b
 800abc4:	0800b1db 	.word	0x0800b1db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800abc8:	4b4f      	ldr	r3, [pc, #316]	; (800ad08 <tcp_process+0x298>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 80e4 	beq.w	800ad9e <tcp_process+0x32e>
 800abd6:	4b4c      	ldr	r3, [pc, #304]	; (800ad08 <tcp_process+0x298>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	f003 0302 	and.w	r3, r3, #2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80dd 	beq.w	800ad9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	4b48      	ldr	r3, [pc, #288]	; (800ad0c <tcp_process+0x29c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	f040 80d5 	bne.w	800ad9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800abf4:	4b46      	ldr	r3, [pc, #280]	; (800ad10 <tcp_process+0x2a0>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ac06:	4b41      	ldr	r3, [pc, #260]	; (800ad0c <tcp_process+0x29c>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ac0e:	4b44      	ldr	r3, [pc, #272]	; (800ad20 <tcp_process+0x2b0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	89db      	ldrh	r3, [r3, #14]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac28:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <tcp_process+0x2a0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	1e5a      	subs	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2204      	movs	r2, #4
 800ac36:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f004 ff49 	bl	800fad8 <ip4_route>
 800ac46:	4601      	mov	r1, r0
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff f88c 	bl	8009d6c <tcp_eff_send_mss_netif>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac60:	009a      	lsls	r2, r3, #2
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	bf38      	it	cc
 800ac70:	460b      	movcc	r3, r1
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d204      	bcs.n	800ac80 <tcp_process+0x210>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	e00d      	b.n	800ac9c <tcp_process+0x22c>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d904      	bls.n	800ac98 <tcp_process+0x228>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	e001      	b.n	800ac9c <tcp_process+0x22c>
 800ac98:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <tcp_process+0x24a>
 800acac:	4b13      	ldr	r3, [pc, #76]	; (800acfc <tcp_process+0x28c>)
 800acae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800acb2:	491c      	ldr	r1, [pc, #112]	; (800ad24 <tcp_process+0x2b4>)
 800acb4:	4813      	ldr	r0, [pc, #76]	; (800ad04 <tcp_process+0x294>)
 800acb6:	f006 f9fb 	bl	80110b0 <iprintf>
        --pcb->snd_queuelen;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acc0:	3b01      	subs	r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d12a      	bne.n	800ad2c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acda:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <tcp_process+0x280>
 800ace2:	4b06      	ldr	r3, [pc, #24]	; (800acfc <tcp_process+0x28c>)
 800ace4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ace8:	490f      	ldr	r1, [pc, #60]	; (800ad28 <tcp_process+0x2b8>)
 800acea:	4806      	ldr	r0, [pc, #24]	; (800ad04 <tcp_process+0x294>)
 800acec:	f006 f9e0 	bl	80110b0 <iprintf>
          pcb->unsent = rseg->next;
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	66da      	str	r2, [r3, #108]	; 0x6c
 800acf8:	e01c      	b.n	800ad34 <tcp_process+0x2c4>
 800acfa:	bf00      	nop
 800acfc:	080133e4 	.word	0x080133e4
 800ad00:	0801361c 	.word	0x0801361c
 800ad04:	08013430 	.word	0x08013430
 800ad08:	20008c6c 	.word	0x20008c6c
 800ad0c:	20008c64 	.word	0x20008c64
 800ad10:	20008c60 	.word	0x20008c60
 800ad14:	08013638 	.word	0x08013638
 800ad18:	20008c6d 	.word	0x20008c6d
 800ad1c:	20008c28 	.word	0x20008c28
 800ad20:	20008c50 	.word	0x20008c50
 800ad24:	08013658 	.word	0x08013658
 800ad28:	08013670 	.word	0x08013670
        } else {
          pcb->unacked = rseg->next;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ad34:	69f8      	ldr	r0, [r7, #28]
 800ad36:	f7fe fc36 	bl	80095a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d104      	bne.n	800ad4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad48:	861a      	strh	r2, [r3, #48]	; 0x30
 800ad4a:	e006      	b.n	800ad5a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00a      	beq.n	800ad7a <tcp_process+0x30a>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	6910      	ldr	r0, [r2, #16]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4798      	blx	r3
 800ad74:	4603      	mov	r3, r0
 800ad76:	76bb      	strb	r3, [r7, #26]
 800ad78:	e001      	b.n	800ad7e <tcp_process+0x30e>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ad7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad82:	f113 0f0d 	cmn.w	r3, #13
 800ad86:	d102      	bne.n	800ad8e <tcp_process+0x31e>
          return ERR_ABRT;
 800ad88:	f06f 030c 	mvn.w	r3, #12
 800ad8c:	e250      	b.n	800b230 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8b5b      	ldrh	r3, [r3, #26]
 800ad92:	f043 0302 	orr.w	r3, r3, #2
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ad9c:	e23a      	b.n	800b214 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ad9e:	4b98      	ldr	r3, [pc, #608]	; (800b000 <tcp_process+0x590>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 8234 	beq.w	800b214 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adac:	4b95      	ldr	r3, [pc, #596]	; (800b004 <tcp_process+0x594>)
 800adae:	6819      	ldr	r1, [r3, #0]
 800adb0:	4b95      	ldr	r3, [pc, #596]	; (800b008 <tcp_process+0x598>)
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	4b95      	ldr	r3, [pc, #596]	; (800b00c <tcp_process+0x59c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adbc:	4b94      	ldr	r3, [pc, #592]	; (800b010 <tcp_process+0x5a0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adc0:	885b      	ldrh	r3, [r3, #2]
 800adc2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adc4:	4a92      	ldr	r2, [pc, #584]	; (800b010 <tcp_process+0x5a0>)
 800adc6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adc8:	8812      	ldrh	r2, [r2, #0]
 800adca:	b292      	uxth	r2, r2
 800adcc:	9202      	str	r2, [sp, #8]
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	4b90      	ldr	r3, [pc, #576]	; (800b014 <tcp_process+0x5a4>)
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	4b90      	ldr	r3, [pc, #576]	; (800b018 <tcp_process+0x5a8>)
 800add6:	4602      	mov	r2, r0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f003 f8dd 	bl	800df98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ade4:	2b05      	cmp	r3, #5
 800ade6:	f200 8215 	bhi.w	800b214 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f002 fea9 	bl	800db48 <tcp_rexmit_rto>
      break;
 800adf6:	e20d      	b.n	800b214 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800adf8:	4b81      	ldr	r3, [pc, #516]	; (800b000 <tcp_process+0x590>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 80a1 	beq.w	800af48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ae06:	4b7f      	ldr	r3, [pc, #508]	; (800b004 <tcp_process+0x594>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	3b01      	subs	r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	db7e      	blt.n	800af14 <tcp_process+0x4a4>
 800ae16:	4b7b      	ldr	r3, [pc, #492]	; (800b004 <tcp_process+0x594>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	dc77      	bgt.n	800af14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2204      	movs	r2, #4
 800ae28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ae32:	23fa      	movs	r3, #250	; 0xfa
 800ae34:	76bb      	strb	r3, [r7, #26]
 800ae36:	e01d      	b.n	800ae74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <tcp_process+0x3e0>
 800ae42:	4b76      	ldr	r3, [pc, #472]	; (800b01c <tcp_process+0x5ac>)
 800ae44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ae48:	4975      	ldr	r1, [pc, #468]	; (800b020 <tcp_process+0x5b0>)
 800ae4a:	4876      	ldr	r0, [pc, #472]	; (800b024 <tcp_process+0x5b4>)
 800ae4c:	f006 f930 	bl	80110b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <tcp_process+0x400>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	6910      	ldr	r0, [r2, #16]
 800ae64:	2200      	movs	r2, #0
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	4798      	blx	r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	76bb      	strb	r3, [r7, #26]
 800ae6e:	e001      	b.n	800ae74 <tcp_process+0x404>
 800ae70:	23f0      	movs	r3, #240	; 0xf0
 800ae72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ae74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ae7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae80:	f113 0f0d 	cmn.w	r3, #13
 800ae84:	d002      	beq.n	800ae8c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7fd fce8 	bl	800885c <tcp_abort>
            }
            return ERR_ABRT;
 800ae8c:	f06f 030c 	mvn.w	r3, #12
 800ae90:	e1ce      	b.n	800b230 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fae0 	bl	800b458 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ae98:	4b63      	ldr	r3, [pc, #396]	; (800b028 <tcp_process+0x5b8>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <tcp_process+0x43c>
            recv_acked--;
 800aea0:	4b61      	ldr	r3, [pc, #388]	; (800b028 <tcp_process+0x5b8>)
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	4b5f      	ldr	r3, [pc, #380]	; (800b028 <tcp_process+0x5b8>)
 800aeaa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb0:	009a      	lsls	r2, r3, #2
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	f241 111c 	movw	r1, #4380	; 0x111c
 800aebc:	428b      	cmp	r3, r1
 800aebe:	bf38      	it	cc
 800aec0:	460b      	movcc	r3, r1
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d204      	bcs.n	800aed0 <tcp_process+0x460>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	b29b      	uxth	r3, r3
 800aece:	e00d      	b.n	800aeec <tcp_process+0x47c>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	f241 121c 	movw	r2, #4380	; 0x111c
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d904      	bls.n	800aee8 <tcp_process+0x478>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	e001      	b.n	800aeec <tcp_process+0x47c>
 800aee8:	f241 131c 	movw	r3, #4380	; 0x111c
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aef2:	4b4e      	ldr	r3, [pc, #312]	; (800b02c <tcp_process+0x5bc>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	f003 0320 	and.w	r3, r3, #32
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d037      	beq.n	800af6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	8b5b      	ldrh	r3, [r3, #26]
 800af02:	f043 0302 	orr.w	r3, r3, #2
 800af06:	b29a      	uxth	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2207      	movs	r2, #7
 800af10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800af12:	e02c      	b.n	800af6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af14:	4b3b      	ldr	r3, [pc, #236]	; (800b004 <tcp_process+0x594>)
 800af16:	6819      	ldr	r1, [r3, #0]
 800af18:	4b3b      	ldr	r3, [pc, #236]	; (800b008 <tcp_process+0x598>)
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	4b3b      	ldr	r3, [pc, #236]	; (800b00c <tcp_process+0x59c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af24:	4b3a      	ldr	r3, [pc, #232]	; (800b010 <tcp_process+0x5a0>)
 800af26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af28:	885b      	ldrh	r3, [r3, #2]
 800af2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af2c:	4a38      	ldr	r2, [pc, #224]	; (800b010 <tcp_process+0x5a0>)
 800af2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af30:	8812      	ldrh	r2, [r2, #0]
 800af32:	b292      	uxth	r2, r2
 800af34:	9202      	str	r2, [sp, #8]
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	4b36      	ldr	r3, [pc, #216]	; (800b014 <tcp_process+0x5a4>)
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	4b36      	ldr	r3, [pc, #216]	; (800b018 <tcp_process+0x5a8>)
 800af3e:	4602      	mov	r2, r0
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f003 f829 	bl	800df98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800af46:	e167      	b.n	800b218 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800af48:	4b2d      	ldr	r3, [pc, #180]	; (800b000 <tcp_process+0x590>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8161 	beq.w	800b218 <tcp_process+0x7a8>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	1e5a      	subs	r2, r3, #1
 800af5c:	4b2b      	ldr	r3, [pc, #172]	; (800b00c <tcp_process+0x59c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	f040 8159 	bne.w	800b218 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f002 fe10 	bl	800db8c <tcp_rexmit>
      break;
 800af6c:	e154      	b.n	800b218 <tcp_process+0x7a8>
 800af6e:	e153      	b.n	800b218 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa71 	bl	800b458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800af76:	4b2d      	ldr	r3, [pc, #180]	; (800b02c <tcp_process+0x5bc>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	f003 0320 	and.w	r3, r3, #32
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 814c 	beq.w	800b21c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8b5b      	ldrh	r3, [r3, #26]
 800af88:	f043 0302 	orr.w	r3, r3, #2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2207      	movs	r2, #7
 800af96:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af98:	e140      	b.n	800b21c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa5c 	bl	800b458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800afa0:	4b22      	ldr	r3, [pc, #136]	; (800b02c <tcp_process+0x5bc>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d071      	beq.n	800b090 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afac:	4b14      	ldr	r3, [pc, #80]	; (800b000 <tcp_process+0x590>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d060      	beq.n	800b07a <tcp_process+0x60a>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <tcp_process+0x594>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d15a      	bne.n	800b07a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d156      	bne.n	800b07a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	8b5b      	ldrh	r3, [r3, #26]
 800afd0:	f043 0302 	orr.w	r3, r3, #2
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7fe fdbc 	bl	8009b58 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800afe0:	4b13      	ldr	r3, [pc, #76]	; (800b030 <tcp_process+0x5c0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d105      	bne.n	800aff6 <tcp_process+0x586>
 800afea:	4b11      	ldr	r3, [pc, #68]	; (800b030 <tcp_process+0x5c0>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4a0f      	ldr	r2, [pc, #60]	; (800b030 <tcp_process+0x5c0>)
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	e02e      	b.n	800b054 <tcp_process+0x5e4>
 800aff6:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <tcp_process+0x5c0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e027      	b.n	800b04e <tcp_process+0x5de>
 800affe:	bf00      	nop
 800b000:	20008c6c 	.word	0x20008c6c
 800b004:	20008c64 	.word	0x20008c64
 800b008:	20008c6a 	.word	0x20008c6a
 800b00c:	20008c60 	.word	0x20008c60
 800b010:	20008c50 	.word	0x20008c50
 800b014:	200056c8 	.word	0x200056c8
 800b018:	200056cc 	.word	0x200056cc
 800b01c:	080133e4 	.word	0x080133e4
 800b020:	08013684 	.word	0x08013684
 800b024:	08013430 	.word	0x08013430
 800b028:	20008c68 	.word	0x20008c68
 800b02c:	20008c6d 	.word	0x20008c6d
 800b030:	20008c34 	.word	0x20008c34
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d104      	bne.n	800b048 <tcp_process+0x5d8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	60da      	str	r2, [r3, #12]
 800b046:	e005      	b.n	800b054 <tcp_process+0x5e4>
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1ef      	bne.n	800b034 <tcp_process+0x5c4>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	60da      	str	r2, [r3, #12]
 800b05a:	4b77      	ldr	r3, [pc, #476]	; (800b238 <tcp_process+0x7c8>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	220a      	movs	r2, #10
 800b064:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b066:	4b75      	ldr	r3, [pc, #468]	; (800b23c <tcp_process+0x7cc>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]
 800b06e:	4a73      	ldr	r2, [pc, #460]	; (800b23c <tcp_process+0x7cc>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	f003 f952 	bl	800e31c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b078:	e0d2      	b.n	800b220 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8b5b      	ldrh	r3, [r3, #26]
 800b07e:	f043 0302 	orr.w	r3, r3, #2
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2208      	movs	r2, #8
 800b08c:	751a      	strb	r2, [r3, #20]
      break;
 800b08e:	e0c7      	b.n	800b220 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b090:	4b6b      	ldr	r3, [pc, #428]	; (800b240 <tcp_process+0x7d0>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80c1 	beq.w	800b220 <tcp_process+0x7b0>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0a2:	4b68      	ldr	r3, [pc, #416]	; (800b244 <tcp_process+0x7d4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	f040 80ba 	bne.w	800b220 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 80b5 	bne.w	800b220 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	751a      	strb	r2, [r3, #20]
      break;
 800b0bc:	e0b0      	b.n	800b220 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9ca 	bl	800b458 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b0c4:	4b60      	ldr	r3, [pc, #384]	; (800b248 <tcp_process+0x7d8>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80a9 	beq.w	800b224 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8b5b      	ldrh	r3, [r3, #26]
 800b0d6:	f043 0302 	orr.w	r3, r3, #2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7fe fd39 	bl	8009b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b0e6:	4b59      	ldr	r3, [pc, #356]	; (800b24c <tcp_process+0x7dc>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d105      	bne.n	800b0fc <tcp_process+0x68c>
 800b0f0:	4b56      	ldr	r3, [pc, #344]	; (800b24c <tcp_process+0x7dc>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	4a55      	ldr	r2, [pc, #340]	; (800b24c <tcp_process+0x7dc>)
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	e013      	b.n	800b124 <tcp_process+0x6b4>
 800b0fc:	4b53      	ldr	r3, [pc, #332]	; (800b24c <tcp_process+0x7dc>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	e00c      	b.n	800b11e <tcp_process+0x6ae>
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d104      	bne.n	800b118 <tcp_process+0x6a8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68da      	ldr	r2, [r3, #12]
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	60da      	str	r2, [r3, #12]
 800b116:	e005      	b.n	800b124 <tcp_process+0x6b4>
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1ef      	bne.n	800b104 <tcp_process+0x694>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	4b43      	ldr	r3, [pc, #268]	; (800b238 <tcp_process+0x7c8>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	220a      	movs	r2, #10
 800b134:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b136:	4b41      	ldr	r3, [pc, #260]	; (800b23c <tcp_process+0x7cc>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60da      	str	r2, [r3, #12]
 800b13e:	4a3f      	ldr	r2, [pc, #252]	; (800b23c <tcp_process+0x7cc>)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	f003 f8ea 	bl	800e31c <tcp_timer_needed>
      }
      break;
 800b148:	e06c      	b.n	800b224 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f984 	bl	800b458 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b150:	4b3b      	ldr	r3, [pc, #236]	; (800b240 <tcp_process+0x7d0>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d065      	beq.n	800b228 <tcp_process+0x7b8>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b160:	4b38      	ldr	r3, [pc, #224]	; (800b244 <tcp_process+0x7d4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d15f      	bne.n	800b228 <tcp_process+0x7b8>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d15b      	bne.n	800b228 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7fe fcf1 	bl	8009b58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b176:	4b35      	ldr	r3, [pc, #212]	; (800b24c <tcp_process+0x7dc>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d105      	bne.n	800b18c <tcp_process+0x71c>
 800b180:	4b32      	ldr	r3, [pc, #200]	; (800b24c <tcp_process+0x7dc>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	4a31      	ldr	r2, [pc, #196]	; (800b24c <tcp_process+0x7dc>)
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	e013      	b.n	800b1b4 <tcp_process+0x744>
 800b18c:	4b2f      	ldr	r3, [pc, #188]	; (800b24c <tcp_process+0x7dc>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e00c      	b.n	800b1ae <tcp_process+0x73e>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d104      	bne.n	800b1a8 <tcp_process+0x738>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	60da      	str	r2, [r3, #12]
 800b1a6:	e005      	b.n	800b1b4 <tcp_process+0x744>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1ef      	bne.n	800b194 <tcp_process+0x724>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	60da      	str	r2, [r3, #12]
 800b1ba:	4b1f      	ldr	r3, [pc, #124]	; (800b238 <tcp_process+0x7c8>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	220a      	movs	r2, #10
 800b1c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <tcp_process+0x7cc>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	4a1b      	ldr	r2, [pc, #108]	; (800b23c <tcp_process+0x7cc>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	f003 f8a2 	bl	800e31c <tcp_timer_needed>
      }
      break;
 800b1d8:	e026      	b.n	800b228 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f93c 	bl	800b458 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b1e0:	4b17      	ldr	r3, [pc, #92]	; (800b240 <tcp_process+0x7d0>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	f003 0310 	and.w	r3, r3, #16
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01f      	beq.n	800b22c <tcp_process+0x7bc>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1f0:	4b14      	ldr	r3, [pc, #80]	; (800b244 <tcp_process+0x7d4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d119      	bne.n	800b22c <tcp_process+0x7bc>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d115      	bne.n	800b22c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <tcp_process+0x7d8>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f043 0310 	orr.w	r3, r3, #16
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <tcp_process+0x7d8>)
 800b20c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b20e:	e00d      	b.n	800b22c <tcp_process+0x7bc>
    default:
      break;
 800b210:	bf00      	nop
 800b212:	e00c      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b214:	bf00      	nop
 800b216:	e00a      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b218:	bf00      	nop
 800b21a:	e008      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b21c:	bf00      	nop
 800b21e:	e006      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b220:	bf00      	nop
 800b222:	e004      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b224:	bf00      	nop
 800b226:	e002      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b228:	bf00      	nop
 800b22a:	e000      	b.n	800b22e <tcp_process+0x7be>
      break;
 800b22c:	bf00      	nop
  }
  return ERR_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3724      	adds	r7, #36	; 0x24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd90      	pop	{r4, r7, pc}
 800b238:	20008c3c 	.word	0x20008c3c
 800b23c:	20008c38 	.word	0x20008c38
 800b240:	20008c6c 	.word	0x20008c6c
 800b244:	20008c64 	.word	0x20008c64
 800b248:	20008c6d 	.word	0x20008c6d
 800b24c:	20008c34 	.word	0x20008c34

0800b250 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b250:	b590      	push	{r4, r7, lr}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d106      	bne.n	800b26e <tcp_oos_insert_segment+0x1e>
 800b260:	4b3b      	ldr	r3, [pc, #236]	; (800b350 <tcp_oos_insert_segment+0x100>)
 800b262:	f240 421f 	movw	r2, #1055	; 0x41f
 800b266:	493b      	ldr	r1, [pc, #236]	; (800b354 <tcp_oos_insert_segment+0x104>)
 800b268:	483b      	ldr	r0, [pc, #236]	; (800b358 <tcp_oos_insert_segment+0x108>)
 800b26a:	f005 ff21 	bl	80110b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	899b      	ldrh	r3, [r3, #12]
 800b274:	b29b      	uxth	r3, r3
 800b276:	4618      	mov	r0, r3
 800b278:	f7fb f9d4 	bl	8006624 <lwip_htons>
 800b27c:	4603      	mov	r3, r0
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d028      	beq.n	800b2da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b288:	6838      	ldr	r0, [r7, #0]
 800b28a:	f7fe f977 	bl	800957c <tcp_segs_free>
    next = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	603b      	str	r3, [r7, #0]
 800b292:	e056      	b.n	800b342 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	899b      	ldrh	r3, [r3, #12]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fb f9c1 	bl	8006624 <lwip_htons>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00d      	beq.n	800b2ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	899b      	ldrh	r3, [r3, #12]
 800b2b4:	b29c      	uxth	r4, r3
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	f7fb f9b4 	bl	8006624 <lwip_htons>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	4322      	orrs	r2, r4
 800b2c6:	b292      	uxth	r2, r2
 800b2c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7fe f966 	bl	80095a6 <tcp_seg_free>
    while (next &&
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00e      	beq.n	800b2fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	891b      	ldrh	r3, [r3, #8]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <tcp_oos_insert_segment+0x10c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	441a      	add	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	8909      	ldrh	r1, [r1, #8]
 800b2f6:	440b      	add	r3, r1
 800b2f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	daca      	bge.n	800b294 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d01e      	beq.n	800b342 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	891b      	ldrh	r3, [r3, #8]
 800b308:	461a      	mov	r2, r3
 800b30a:	4b14      	ldr	r3, [pc, #80]	; (800b35c <tcp_oos_insert_segment+0x10c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	441a      	add	r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dd12      	ble.n	800b342 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	b29a      	uxth	r2, r3
 800b324:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <tcp_oos_insert_segment+0x10c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	891b      	ldrh	r3, [r3, #8]
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7fc fb7f 	bl	8007a40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	601a      	str	r2, [r3, #0]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd90      	pop	{r4, r7, pc}
 800b350:	080133e4 	.word	0x080133e4
 800b354:	080136a4 	.word	0x080136a4
 800b358:	08013430 	.word	0x08013430
 800b35c:	20008c60 	.word	0x20008c60

0800b360 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b360:	b5b0      	push	{r4, r5, r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b36e:	e03e      	b.n	800b3ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fc fd6c 	bl	8007e5c <pbuf_clen>
 800b384:	4603      	mov	r3, r0
 800b386:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b38e:	8a7a      	ldrh	r2, [r7, #18]
 800b390:	429a      	cmp	r2, r3
 800b392:	d906      	bls.n	800b3a2 <tcp_free_acked_segments+0x42>
 800b394:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <tcp_free_acked_segments+0xe0>)
 800b396:	f240 4257 	movw	r2, #1111	; 0x457
 800b39a:	492a      	ldr	r1, [pc, #168]	; (800b444 <tcp_free_acked_segments+0xe4>)
 800b39c:	482a      	ldr	r0, [pc, #168]	; (800b448 <tcp_free_acked_segments+0xe8>)
 800b39e:	f005 fe87 	bl	80110b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b3a8:	8a7b      	ldrh	r3, [r7, #18]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	891a      	ldrh	r2, [r3, #8]
 800b3b8:	4b24      	ldr	r3, [pc, #144]	; (800b44c <tcp_free_acked_segments+0xec>)
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	4413      	add	r3, r2
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	4b22      	ldr	r3, [pc, #136]	; (800b44c <tcp_free_acked_segments+0xec>)
 800b3c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f7fe f8ee 	bl	80095a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00c      	beq.n	800b3ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <tcp_free_acked_segments+0x8e>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <tcp_free_acked_segments+0x8e>
 800b3e0:	4b17      	ldr	r3, [pc, #92]	; (800b440 <tcp_free_acked_segments+0xe0>)
 800b3e2:	f240 4261 	movw	r2, #1121	; 0x461
 800b3e6:	491a      	ldr	r1, [pc, #104]	; (800b450 <tcp_free_acked_segments+0xf0>)
 800b3e8:	4817      	ldr	r0, [pc, #92]	; (800b448 <tcp_free_acked_segments+0xe8>)
 800b3ea:	f005 fe61 	bl	80110b0 <iprintf>
  while (seg_list != NULL &&
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d020      	beq.n	800b436 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fb f927 	bl	800664e <lwip_htonl>
 800b400:	4604      	mov	r4, r0
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	461d      	mov	r5, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7fb f907 	bl	8006624 <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0303 	and.w	r3, r3, #3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <tcp_free_acked_segments+0xc6>
 800b422:	2301      	movs	r3, #1
 800b424:	e000      	b.n	800b428 <tcp_free_acked_segments+0xc8>
 800b426:	2300      	movs	r3, #0
 800b428:	442b      	add	r3, r5
 800b42a:	18e2      	adds	r2, r4, r3
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <tcp_free_acked_segments+0xf4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd9c      	ble.n	800b370 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b436:	68bb      	ldr	r3, [r7, #8]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bdb0      	pop	{r4, r5, r7, pc}
 800b440:	080133e4 	.word	0x080133e4
 800b444:	080136cc 	.word	0x080136cc
 800b448:	08013430 	.word	0x08013430
 800b44c:	20008c68 	.word	0x20008c68
 800b450:	080136f4 	.word	0x080136f4
 800b454:	20008c64 	.word	0x20008c64

0800b458 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b458:	b5b0      	push	{r4, r5, r7, lr}
 800b45a:	b094      	sub	sp, #80	; 0x50
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <tcp_receive+0x20>
 800b46a:	4b91      	ldr	r3, [pc, #580]	; (800b6b0 <tcp_receive+0x258>)
 800b46c:	f240 427b 	movw	r2, #1147	; 0x47b
 800b470:	4990      	ldr	r1, [pc, #576]	; (800b6b4 <tcp_receive+0x25c>)
 800b472:	4891      	ldr	r0, [pc, #580]	; (800b6b8 <tcp_receive+0x260>)
 800b474:	f005 fe1c 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7d1b      	ldrb	r3, [r3, #20]
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d806      	bhi.n	800b48e <tcp_receive+0x36>
 800b480:	4b8b      	ldr	r3, [pc, #556]	; (800b6b0 <tcp_receive+0x258>)
 800b482:	f240 427c 	movw	r2, #1148	; 0x47c
 800b486:	498d      	ldr	r1, [pc, #564]	; (800b6bc <tcp_receive+0x264>)
 800b488:	488b      	ldr	r0, [pc, #556]	; (800b6b8 <tcp_receive+0x260>)
 800b48a:	f005 fe11 	bl	80110b0 <iprintf>

  if (flags & TCP_ACK) {
 800b48e:	4b8c      	ldr	r3, [pc, #560]	; (800b6c0 <tcp_receive+0x268>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f003 0310 	and.w	r3, r3, #16
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 8264 	beq.w	800b964 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a8:	4413      	add	r3, r2
 800b4aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4b0:	4b84      	ldr	r3, [pc, #528]	; (800b6c4 <tcp_receive+0x26c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	db1b      	blt.n	800b4f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4be:	4b81      	ldr	r3, [pc, #516]	; (800b6c4 <tcp_receive+0x26c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d106      	bne.n	800b4d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4ca:	4b7f      	ldr	r3, [pc, #508]	; (800b6c8 <tcp_receive+0x270>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	db0e      	blt.n	800b4f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4d8:	4b7b      	ldr	r3, [pc, #492]	; (800b6c8 <tcp_receive+0x270>)
 800b4da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d125      	bne.n	800b52c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4e0:	4b7a      	ldr	r3, [pc, #488]	; (800b6cc <tcp_receive+0x274>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	89db      	ldrh	r3, [r3, #14]
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d91c      	bls.n	800b52c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b4f2:	4b76      	ldr	r3, [pc, #472]	; (800b6cc <tcp_receive+0x274>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	89db      	ldrh	r3, [r3, #14]
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d205      	bcs.n	800b51c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b51c:	4b69      	ldr	r3, [pc, #420]	; (800b6c4 <tcp_receive+0x26c>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b524:	4b68      	ldr	r3, [pc, #416]	; (800b6c8 <tcp_receive+0x270>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b52c:	4b66      	ldr	r3, [pc, #408]	; (800b6c8 <tcp_receive+0x270>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	dc58      	bgt.n	800b5ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b53a:	4b65      	ldr	r3, [pc, #404]	; (800b6d0 <tcp_receive+0x278>)
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d14b      	bne.n	800b5da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b54c:	4413      	add	r3, r2
 800b54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b550:	429a      	cmp	r2, r3
 800b552:	d142      	bne.n	800b5da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	db3d      	blt.n	800b5da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b562:	4b59      	ldr	r3, [pc, #356]	; (800b6c8 <tcp_receive+0x270>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d137      	bne.n	800b5da <tcp_receive+0x182>
              found_dupack = 1;
 800b56a:	2301      	movs	r3, #1
 800b56c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b574:	2bff      	cmp	r3, #255	; 0xff
 800b576:	d007      	beq.n	800b588 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b57e:	3301      	adds	r3, #1
 800b580:	b2da      	uxtb	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d91b      	bls.n	800b5ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b59c:	4413      	add	r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d30a      	bcc.n	800b5c0 <tcp_receive+0x168>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5b4:	4413      	add	r3, r2
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b5be:	e004      	b.n	800b5ca <tcp_receive+0x172>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d902      	bls.n	800b5da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f002 fb45 	bl	800dc64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b5da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 8161 	bne.w	800b8a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5ea:	e15b      	b.n	800b8a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5ec:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <tcp_receive+0x270>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f2c0 814e 	blt.w	800b89a <tcp_receive+0x442>
 800b5fe:	4b32      	ldr	r3, [pc, #200]	; (800b6c8 <tcp_receive+0x270>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f300 8146 	bgt.w	800b89a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	8b5b      	ldrh	r3, [r3, #26]
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b00      	cmp	r3, #0
 800b618:	d010      	beq.n	800b63c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8b5b      	ldrh	r3, [r3, #26]
 800b61e:	f023 0304 	bic.w	r3, r3, #4
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b64a:	10db      	asrs	r3, r3, #3
 800b64c:	b21b      	sxth	r3, r3
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b656:	b29b      	uxth	r3, r3
 800b658:	4413      	add	r3, r2
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	b21a      	sxth	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b664:	4b18      	ldr	r3, [pc, #96]	; (800b6c8 <tcp_receive+0x270>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	b29a      	uxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b66e:	b29b      	uxth	r3, r3
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b67c:	4b12      	ldr	r3, [pc, #72]	; (800b6c8 <tcp_receive+0x270>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	7d1b      	ldrb	r3, [r3, #20]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	f240 8097 	bls.w	800b7bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d245      	bcs.n	800b72a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	8b5b      	ldrh	r3, [r3, #26]
 800b6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d014      	beq.n	800b6d4 <tcp_receive+0x27c>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e013      	b.n	800b6d6 <tcp_receive+0x27e>
 800b6ae:	bf00      	nop
 800b6b0:	080133e4 	.word	0x080133e4
 800b6b4:	08013714 	.word	0x08013714
 800b6b8:	08013430 	.word	0x08013430
 800b6bc:	08013730 	.word	0x08013730
 800b6c0:	20008c6c 	.word	0x20008c6c
 800b6c4:	20008c60 	.word	0x20008c60
 800b6c8:	20008c64 	.word	0x20008c64
 800b6cc:	20008c50 	.word	0x20008c50
 800b6d0:	20008c6a 	.word	0x20008c6a
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b6da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6e4:	fb12 f303 	smulbb	r3, r2, r3
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bf28      	it	cs
 800b6f0:	4613      	movcs	r3, r2
 800b6f2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6fc:	4413      	add	r3, r2
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b706:	429a      	cmp	r2, r3
 800b708:	d309      	bcc.n	800b71e <tcp_receive+0x2c6>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b710:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b712:	4413      	add	r3, r2
 800b714:	b29a      	uxth	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b71c:	e04e      	b.n	800b7bc <tcp_receive+0x364>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b724:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b728:	e048      	b.n	800b7bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b732:	4413      	add	r3, r2
 800b734:	b29a      	uxth	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d309      	bcc.n	800b754 <tcp_receive+0x2fc>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b748:	4413      	add	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b752:	e004      	b.n	800b75e <tcp_receive+0x306>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b75a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d326      	bcc.n	800b7bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b78e:	4413      	add	r3, r2
 800b790:	b29a      	uxth	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b798:	429a      	cmp	r2, r3
 800b79a:	d30a      	bcc.n	800b7b2 <tcp_receive+0x35a>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7a6:	4413      	add	r3, r2
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b7b0:	e004      	b.n	800b7bc <tcp_receive+0x364>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c4:	4a98      	ldr	r2, [pc, #608]	; (800ba28 <tcp_receive+0x5d0>)
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fdca 	bl	800b360 <tcp_free_acked_segments>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7da:	4a94      	ldr	r2, [pc, #592]	; (800ba2c <tcp_receive+0x5d4>)
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff fdbf 	bl	800b360 <tcp_free_acked_segments>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d104      	bne.n	800b7fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7f6:	861a      	strh	r2, [r3, #48]	; 0x30
 800b7f8:	e002      	b.n	800b800 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b81c:	4b84      	ldr	r3, [pc, #528]	; (800ba30 <tcp_receive+0x5d8>)
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	4413      	add	r3, r2
 800b822:	b29a      	uxth	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	8b5b      	ldrh	r3, [r3, #26]
 800b82e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b832:	2b00      	cmp	r3, #0
 800b834:	d035      	beq.n	800b8a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d118      	bne.n	800b870 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00c      	beq.n	800b860 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	4618      	mov	r0, r3
 800b854:	f7fa fefb 	bl	800664e <lwip_htonl>
 800b858:	4603      	mov	r3, r0
 800b85a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	dc20      	bgt.n	800b8a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	8b5b      	ldrh	r3, [r3, #26]
 800b864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b868:	b29a      	uxth	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b86e:	e018      	b.n	800b8a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fa fee6 	bl	800664e <lwip_htonl>
 800b882:	4603      	mov	r3, r0
 800b884:	1ae3      	subs	r3, r4, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	dc0b      	bgt.n	800b8a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8b5b      	ldrh	r3, [r3, #26]
 800b88e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b892:	b29a      	uxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b898:	e003      	b.n	800b8a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f002 fbce 	bl	800e03c <tcp_send_empty_ack>
 800b8a0:	e000      	b.n	800b8a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b8a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d05b      	beq.n	800b964 <tcp_receive+0x50c>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b0:	4b60      	ldr	r3, [pc, #384]	; (800ba34 <tcp_receive+0x5dc>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	da54      	bge.n	800b964 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b8ba:	4b5f      	ldr	r3, [pc, #380]	; (800ba38 <tcp_receive+0x5e0>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b8ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8d8:	10db      	asrs	r3, r3, #3
 800b8da:	b21b      	sxth	r3, r3
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8f2:	4413      	add	r3, r2
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b21a      	sxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b8fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b900:	2b00      	cmp	r3, #0
 800b902:	da05      	bge.n	800b910 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b908:	425b      	negs	r3, r3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b910:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b91a:	109b      	asrs	r3, r3, #2
 800b91c:	b21b      	sxth	r3, r3
 800b91e:	b29b      	uxth	r3, r3
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	b29b      	uxth	r3, r3
 800b924:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b934:	4413      	add	r3, r2
 800b936:	b29b      	uxth	r3, r3
 800b938:	b21a      	sxth	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b944:	10db      	asrs	r3, r3, #3
 800b946:	b21b      	sxth	r3, r3
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b950:	b29b      	uxth	r3, r3
 800b952:	4413      	add	r3, r2
 800b954:	b29b      	uxth	r3, r3
 800b956:	b21a      	sxth	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b964:	4b35      	ldr	r3, [pc, #212]	; (800ba3c <tcp_receive+0x5e4>)
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 84e2 	beq.w	800c332 <tcp_receive+0xeda>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	7d1b      	ldrb	r3, [r3, #20]
 800b972:	2b06      	cmp	r3, #6
 800b974:	f200 84dd 	bhi.w	800c332 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b97c:	4b30      	ldr	r3, [pc, #192]	; (800ba40 <tcp_receive+0x5e8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	f2c0 808f 	blt.w	800baa8 <tcp_receive+0x650>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b98e:	4b2b      	ldr	r3, [pc, #172]	; (800ba3c <tcp_receive+0x5e4>)
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	4619      	mov	r1, r3
 800b994:	4b2a      	ldr	r3, [pc, #168]	; (800ba40 <tcp_receive+0x5e8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	440b      	add	r3, r1
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	3301      	adds	r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f300 8082 	bgt.w	800baa8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b9a4:	4b27      	ldr	r3, [pc, #156]	; (800ba44 <tcp_receive+0x5ec>)
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9ae:	4b24      	ldr	r3, [pc, #144]	; (800ba40 <tcp_receive+0x5e8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b9b6:	4b23      	ldr	r3, [pc, #140]	; (800ba44 <tcp_receive+0x5ec>)
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <tcp_receive+0x574>
 800b9be:	4b22      	ldr	r3, [pc, #136]	; (800ba48 <tcp_receive+0x5f0>)
 800b9c0:	f240 5294 	movw	r2, #1428	; 0x594
 800b9c4:	4921      	ldr	r1, [pc, #132]	; (800ba4c <tcp_receive+0x5f4>)
 800b9c6:	4822      	ldr	r0, [pc, #136]	; (800ba50 <tcp_receive+0x5f8>)
 800b9c8:	f005 fb72 	bl	80110b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d906      	bls.n	800b9e4 <tcp_receive+0x58c>
 800b9d6:	4b1c      	ldr	r3, [pc, #112]	; (800ba48 <tcp_receive+0x5f0>)
 800b9d8:	f240 5295 	movw	r2, #1429	; 0x595
 800b9dc:	491d      	ldr	r1, [pc, #116]	; (800ba54 <tcp_receive+0x5fc>)
 800b9de:	481c      	ldr	r0, [pc, #112]	; (800ba50 <tcp_receive+0x5f8>)
 800b9e0:	f005 fb66 	bl	80110b0 <iprintf>
      off = (u16_t)off32;
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b9ea:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <tcp_receive+0x5ec>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	891b      	ldrh	r3, [r3, #8]
 800b9f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d906      	bls.n	800ba06 <tcp_receive+0x5ae>
 800b9f8:	4b13      	ldr	r3, [pc, #76]	; (800ba48 <tcp_receive+0x5f0>)
 800b9fa:	f240 5297 	movw	r2, #1431	; 0x597
 800b9fe:	4916      	ldr	r1, [pc, #88]	; (800ba58 <tcp_receive+0x600>)
 800ba00:	4813      	ldr	r0, [pc, #76]	; (800ba50 <tcp_receive+0x5f8>)
 800ba02:	f005 fb55 	bl	80110b0 <iprintf>
      inseg.len -= off;
 800ba06:	4b0f      	ldr	r3, [pc, #60]	; (800ba44 <tcp_receive+0x5ec>)
 800ba08:	891a      	ldrh	r2, [r3, #8]
 800ba0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <tcp_receive+0x5ec>)
 800ba14:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ba16:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <tcp_receive+0x5ec>)
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	891a      	ldrh	r2, [r3, #8]
 800ba1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ba24:	e02a      	b.n	800ba7c <tcp_receive+0x624>
 800ba26:	bf00      	nop
 800ba28:	0801374c 	.word	0x0801374c
 800ba2c:	08013754 	.word	0x08013754
 800ba30:	20008c68 	.word	0x20008c68
 800ba34:	20008c64 	.word	0x20008c64
 800ba38:	20008c28 	.word	0x20008c28
 800ba3c:	20008c6a 	.word	0x20008c6a
 800ba40:	20008c60 	.word	0x20008c60
 800ba44:	20008c40 	.word	0x20008c40
 800ba48:	080133e4 	.word	0x080133e4
 800ba4c:	0801375c 	.word	0x0801375c
 800ba50:	08013430 	.word	0x08013430
 800ba54:	0801376c 	.word	0x0801376c
 800ba58:	0801377c 	.word	0x0801377c
        off -= p->len;
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5e:	895b      	ldrh	r3, [r3, #10]
 800ba60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba6e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ba70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba72:	2200      	movs	r2, #0
 800ba74:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ba76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ba7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7e:	895b      	ldrh	r3, [r3, #10]
 800ba80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d8e9      	bhi.n	800ba5c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ba88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba90:	f7fc f8d6 	bl	8007c40 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	4a91      	ldr	r2, [pc, #580]	; (800bce0 <tcp_receive+0x888>)
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	4b91      	ldr	r3, [pc, #580]	; (800bce4 <tcp_receive+0x88c>)
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	4a8f      	ldr	r2, [pc, #572]	; (800bce0 <tcp_receive+0x888>)
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800baa6:	e00d      	b.n	800bac4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800baa8:	4b8d      	ldr	r3, [pc, #564]	; (800bce0 <tcp_receive+0x888>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da06      	bge.n	800bac4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	8b5b      	ldrh	r3, [r3, #26]
 800baba:	f043 0302 	orr.w	r3, r3, #2
 800babe:	b29a      	uxth	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bac4:	4b86      	ldr	r3, [pc, #536]	; (800bce0 <tcp_receive+0x888>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f2c0 842a 	blt.w	800c328 <tcp_receive+0xed0>
 800bad4:	4b82      	ldr	r3, [pc, #520]	; (800bce0 <tcp_receive+0x888>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bae0:	440b      	add	r3, r1
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	3301      	adds	r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f300 841e 	bgt.w	800c328 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baf0:	4b7b      	ldr	r3, [pc, #492]	; (800bce0 <tcp_receive+0x888>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	f040 829a 	bne.w	800c02e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bafa:	4b7a      	ldr	r3, [pc, #488]	; (800bce4 <tcp_receive+0x88c>)
 800bafc:	891c      	ldrh	r4, [r3, #8]
 800bafe:	4b79      	ldr	r3, [pc, #484]	; (800bce4 <tcp_receive+0x88c>)
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	899b      	ldrh	r3, [r3, #12]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fa fd8c 	bl	8006624 <lwip_htons>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <tcp_receive+0x6c4>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <tcp_receive+0x6c6>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4423      	add	r3, r4
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	4b71      	ldr	r3, [pc, #452]	; (800bce8 <tcp_receive+0x890>)
 800bb24:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb2a:	4b6f      	ldr	r3, [pc, #444]	; (800bce8 <tcp_receive+0x890>)
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d275      	bcs.n	800bc1e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb32:	4b6c      	ldr	r3, [pc, #432]	; (800bce4 <tcp_receive+0x88c>)
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	899b      	ldrh	r3, [r3, #12]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fa fd72 	bl	8006624 <lwip_htons>
 800bb40:	4603      	mov	r3, r0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01f      	beq.n	800bb8c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bb4c:	4b65      	ldr	r3, [pc, #404]	; (800bce4 <tcp_receive+0x88c>)
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	899b      	ldrh	r3, [r3, #12]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	b21b      	sxth	r3, r3
 800bb56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb5a:	b21c      	sxth	r4, r3
 800bb5c:	4b61      	ldr	r3, [pc, #388]	; (800bce4 <tcp_receive+0x88c>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	899b      	ldrh	r3, [r3, #12]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fa fd5d 	bl	8006624 <lwip_htons>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fa fd54 	bl	8006624 <lwip_htons>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	4323      	orrs	r3, r4
 800bb82:	b21a      	sxth	r2, r3
 800bb84:	4b57      	ldr	r3, [pc, #348]	; (800bce4 <tcp_receive+0x88c>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	b292      	uxth	r2, r2
 800bb8a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb90:	4b54      	ldr	r3, [pc, #336]	; (800bce4 <tcp_receive+0x88c>)
 800bb92:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bb94:	4b53      	ldr	r3, [pc, #332]	; (800bce4 <tcp_receive+0x88c>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	899b      	ldrh	r3, [r3, #12]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fa fd41 	bl	8006624 <lwip_htons>
 800bba2:	4603      	mov	r3, r0
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <tcp_receive+0x762>
            inseg.len -= 1;
 800bbae:	4b4d      	ldr	r3, [pc, #308]	; (800bce4 <tcp_receive+0x88c>)
 800bbb0:	891b      	ldrh	r3, [r3, #8]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	4b4b      	ldr	r3, [pc, #300]	; (800bce4 <tcp_receive+0x88c>)
 800bbb8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bbba:	4b4a      	ldr	r3, [pc, #296]	; (800bce4 <tcp_receive+0x88c>)
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	4a49      	ldr	r2, [pc, #292]	; (800bce4 <tcp_receive+0x88c>)
 800bbc0:	8912      	ldrh	r2, [r2, #8]
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fb ff3b 	bl	8007a40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bbca:	4b46      	ldr	r3, [pc, #280]	; (800bce4 <tcp_receive+0x88c>)
 800bbcc:	891c      	ldrh	r4, [r3, #8]
 800bbce:	4b45      	ldr	r3, [pc, #276]	; (800bce4 <tcp_receive+0x88c>)
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	899b      	ldrh	r3, [r3, #12]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa fd24 	bl	8006624 <lwip_htons>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <tcp_receive+0x794>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <tcp_receive+0x796>
 800bbec:	2300      	movs	r3, #0
 800bbee:	4423      	add	r3, r4
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	4b3d      	ldr	r3, [pc, #244]	; (800bce8 <tcp_receive+0x890>)
 800bbf4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbf6:	4b3c      	ldr	r3, [pc, #240]	; (800bce8 <tcp_receive+0x890>)
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4b38      	ldr	r3, [pc, #224]	; (800bce0 <tcp_receive+0x888>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	441a      	add	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc0a:	440b      	add	r3, r1
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d006      	beq.n	800bc1e <tcp_receive+0x7c6>
 800bc10:	4b36      	ldr	r3, [pc, #216]	; (800bcec <tcp_receive+0x894>)
 800bc12:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bc16:	4936      	ldr	r1, [pc, #216]	; (800bcf0 <tcp_receive+0x898>)
 800bc18:	4836      	ldr	r0, [pc, #216]	; (800bcf4 <tcp_receive+0x89c>)
 800bc1a:	f005 fa49 	bl	80110b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 80e7 	beq.w	800bdf6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bc28:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <tcp_receive+0x88c>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	899b      	ldrh	r3, [r3, #12]
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fa fcf7 	bl	8006624 <lwip_htons>
 800bc36:	4603      	mov	r3, r0
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d010      	beq.n	800bc64 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bc42:	e00a      	b.n	800bc5a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc48:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7fd fca6 	bl	80095a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1f0      	bne.n	800bc44 <tcp_receive+0x7ec>
 800bc62:	e0c8      	b.n	800bdf6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bc6a:	e052      	b.n	800bd12 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	899b      	ldrh	r3, [r3, #12]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fa fcd5 	bl	8006624 <lwip_htons>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d03d      	beq.n	800bd02 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bc86:	4b17      	ldr	r3, [pc, #92]	; (800bce4 <tcp_receive+0x88c>)
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	899b      	ldrh	r3, [r3, #12]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fa fcc8 	bl	8006624 <lwip_htons>
 800bc94:	4603      	mov	r3, r0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d130      	bne.n	800bd02 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bca0:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <tcp_receive+0x88c>)
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	899b      	ldrh	r3, [r3, #12]
 800bca6:	b29c      	uxth	r4, r3
 800bca8:	2001      	movs	r0, #1
 800bcaa:	f7fa fcbb 	bl	8006624 <lwip_htons>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <tcp_receive+0x88c>)
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	4322      	orrs	r2, r4
 800bcb8:	b292      	uxth	r2, r2
 800bcba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bcbc:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <tcp_receive+0x88c>)
 800bcbe:	891c      	ldrh	r4, [r3, #8]
 800bcc0:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <tcp_receive+0x88c>)
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	899b      	ldrh	r3, [r3, #12]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fa fcab 	bl	8006624 <lwip_htons>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00e      	beq.n	800bcf8 <tcp_receive+0x8a0>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e00d      	b.n	800bcfa <tcp_receive+0x8a2>
 800bcde:	bf00      	nop
 800bce0:	20008c60 	.word	0x20008c60
 800bce4:	20008c40 	.word	0x20008c40
 800bce8:	20008c6a 	.word	0x20008c6a
 800bcec:	080133e4 	.word	0x080133e4
 800bcf0:	0801378c 	.word	0x0801378c
 800bcf4:	08013430 	.word	0x08013430
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4423      	add	r3, r4
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	4b98      	ldr	r3, [pc, #608]	; (800bf60 <tcp_receive+0xb08>)
 800bd00:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bd0c:	6938      	ldr	r0, [r7, #16]
 800bd0e:	f7fd fc4a 	bl	80095a6 <tcp_seg_free>
            while (next &&
 800bd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00e      	beq.n	800bd36 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bd18:	4b91      	ldr	r3, [pc, #580]	; (800bf60 <tcp_receive+0xb08>)
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4b91      	ldr	r3, [pc, #580]	; (800bf64 <tcp_receive+0xb0c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	441a      	add	r2, r3
 800bd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd2c:	8909      	ldrh	r1, [r1, #8]
 800bd2e:	440b      	add	r3, r1
 800bd30:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da9a      	bge.n	800bc6c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d059      	beq.n	800bdf0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bd3c:	4b88      	ldr	r3, [pc, #544]	; (800bf60 <tcp_receive+0xb08>)
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	4b88      	ldr	r3, [pc, #544]	; (800bf64 <tcp_receive+0xb0c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	441a      	add	r2, r3
 800bd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dd4d      	ble.n	800bdf0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	4b81      	ldr	r3, [pc, #516]	; (800bf64 <tcp_receive+0xb0c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	4b80      	ldr	r3, [pc, #512]	; (800bf68 <tcp_receive+0xb10>)
 800bd68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd6a:	4b7f      	ldr	r3, [pc, #508]	; (800bf68 <tcp_receive+0xb10>)
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	899b      	ldrh	r3, [r3, #12]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fa fc56 	bl	8006624 <lwip_htons>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <tcp_receive+0x938>
                inseg.len -= 1;
 800bd84:	4b78      	ldr	r3, [pc, #480]	; (800bf68 <tcp_receive+0xb10>)
 800bd86:	891b      	ldrh	r3, [r3, #8]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	4b76      	ldr	r3, [pc, #472]	; (800bf68 <tcp_receive+0xb10>)
 800bd8e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bd90:	4b75      	ldr	r3, [pc, #468]	; (800bf68 <tcp_receive+0xb10>)
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	4a74      	ldr	r2, [pc, #464]	; (800bf68 <tcp_receive+0xb10>)
 800bd96:	8912      	ldrh	r2, [r2, #8]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fb fe50 	bl	8007a40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bda0:	4b71      	ldr	r3, [pc, #452]	; (800bf68 <tcp_receive+0xb10>)
 800bda2:	891c      	ldrh	r4, [r3, #8]
 800bda4:	4b70      	ldr	r3, [pc, #448]	; (800bf68 <tcp_receive+0xb10>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	899b      	ldrh	r3, [r3, #12]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fa fc39 	bl	8006624 <lwip_htons>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <tcp_receive+0x96a>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <tcp_receive+0x96c>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4423      	add	r3, r4
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	4b65      	ldr	r3, [pc, #404]	; (800bf60 <tcp_receive+0xb08>)
 800bdca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bdcc:	4b64      	ldr	r3, [pc, #400]	; (800bf60 <tcp_receive+0xb08>)
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4b64      	ldr	r3, [pc, #400]	; (800bf64 <tcp_receive+0xb0c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	441a      	add	r2, r3
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d006      	beq.n	800bdf0 <tcp_receive+0x998>
 800bde2:	4b62      	ldr	r3, [pc, #392]	; (800bf6c <tcp_receive+0xb14>)
 800bde4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bde8:	4961      	ldr	r1, [pc, #388]	; (800bf70 <tcp_receive+0xb18>)
 800bdea:	4862      	ldr	r0, [pc, #392]	; (800bf74 <tcp_receive+0xb1c>)
 800bdec:	f005 f960 	bl	80110b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdf4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bdf6:	4b5a      	ldr	r3, [pc, #360]	; (800bf60 <tcp_receive+0xb08>)
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	4b59      	ldr	r3, [pc, #356]	; (800bf64 <tcp_receive+0xb0c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	441a      	add	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be0a:	4b55      	ldr	r3, [pc, #340]	; (800bf60 <tcp_receive+0xb08>)
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d206      	bcs.n	800be20 <tcp_receive+0x9c8>
 800be12:	4b56      	ldr	r3, [pc, #344]	; (800bf6c <tcp_receive+0xb14>)
 800be14:	f240 6207 	movw	r2, #1543	; 0x607
 800be18:	4957      	ldr	r1, [pc, #348]	; (800bf78 <tcp_receive+0xb20>)
 800be1a:	4856      	ldr	r0, [pc, #344]	; (800bf74 <tcp_receive+0xb1c>)
 800be1c:	f005 f948 	bl	80110b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be24:	4b4e      	ldr	r3, [pc, #312]	; (800bf60 <tcp_receive+0xb08>)
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7fc fe93 	bl	8008b5c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800be36:	4b4c      	ldr	r3, [pc, #304]	; (800bf68 <tcp_receive+0xb10>)
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	891b      	ldrh	r3, [r3, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d006      	beq.n	800be4e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800be40:	4b49      	ldr	r3, [pc, #292]	; (800bf68 <tcp_receive+0xb10>)
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	4a4d      	ldr	r2, [pc, #308]	; (800bf7c <tcp_receive+0xb24>)
 800be46:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800be48:	4b47      	ldr	r3, [pc, #284]	; (800bf68 <tcp_receive+0xb10>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be4e:	4b46      	ldr	r3, [pc, #280]	; (800bf68 <tcp_receive+0xb10>)
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	899b      	ldrh	r3, [r3, #12]
 800be54:	b29b      	uxth	r3, r3
 800be56:	4618      	mov	r0, r3
 800be58:	f7fa fbe4 	bl	8006624 <lwip_htons>
 800be5c:	4603      	mov	r3, r0
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 80b8 	beq.w	800bfda <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800be6a:	4b45      	ldr	r3, [pc, #276]	; (800bf80 <tcp_receive+0xb28>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f043 0320 	orr.w	r3, r3, #32
 800be72:	b2da      	uxtb	r2, r3
 800be74:	4b42      	ldr	r3, [pc, #264]	; (800bf80 <tcp_receive+0xb28>)
 800be76:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800be78:	e0af      	b.n	800bfda <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be7e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	4a36      	ldr	r2, [pc, #216]	; (800bf64 <tcp_receive+0xb0c>)
 800be8a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	891b      	ldrh	r3, [r3, #8]
 800be90:	461c      	mov	r4, r3
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	899b      	ldrh	r3, [r3, #12]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fa fbc2 	bl	8006624 <lwip_htons>
 800bea0:	4603      	mov	r3, r0
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f003 0303 	and.w	r3, r3, #3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <tcp_receive+0xa58>
 800beac:	2301      	movs	r3, #1
 800beae:	e000      	b.n	800beb2 <tcp_receive+0xa5a>
 800beb0:	2300      	movs	r3, #0
 800beb2:	191a      	adds	r2, r3, r4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	441a      	add	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec2:	461c      	mov	r4, r3
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	891b      	ldrh	r3, [r3, #8]
 800bec8:	461d      	mov	r5, r3
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	899b      	ldrh	r3, [r3, #12]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fa fba6 	bl	8006624 <lwip_htons>
 800bed8:	4603      	mov	r3, r0
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f003 0303 	and.w	r3, r3, #3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <tcp_receive+0xa90>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <tcp_receive+0xa92>
 800bee8:	2300      	movs	r3, #0
 800beea:	442b      	add	r3, r5
 800beec:	429c      	cmp	r4, r3
 800beee:	d206      	bcs.n	800befe <tcp_receive+0xaa6>
 800bef0:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <tcp_receive+0xb14>)
 800bef2:	f240 622b 	movw	r2, #1579	; 0x62b
 800bef6:	4923      	ldr	r1, [pc, #140]	; (800bf84 <tcp_receive+0xb2c>)
 800bef8:	481e      	ldr	r0, [pc, #120]	; (800bf74 <tcp_receive+0xb1c>)
 800befa:	f005 f8d9 	bl	80110b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	891b      	ldrh	r3, [r3, #8]
 800bf02:	461c      	mov	r4, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	899b      	ldrh	r3, [r3, #12]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fa fb89 	bl	8006624 <lwip_htons>
 800bf12:	4603      	mov	r3, r0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <tcp_receive+0xaca>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <tcp_receive+0xacc>
 800bf22:	2300      	movs	r3, #0
 800bf24:	1919      	adds	r1, r3, r4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf2a:	b28b      	uxth	r3, r1
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fc fe11 	bl	8008b5c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	891b      	ldrh	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d028      	beq.n	800bf96 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bf44:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <tcp_receive+0xb24>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01d      	beq.n	800bf88 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bf4c:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <tcp_receive+0xb24>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fb ffba 	bl	8007ed0 <pbuf_cat>
 800bf5c:	e018      	b.n	800bf90 <tcp_receive+0xb38>
 800bf5e:	bf00      	nop
 800bf60:	20008c6a 	.word	0x20008c6a
 800bf64:	20008c60 	.word	0x20008c60
 800bf68:	20008c40 	.word	0x20008c40
 800bf6c:	080133e4 	.word	0x080133e4
 800bf70:	080137c4 	.word	0x080137c4
 800bf74:	08013430 	.word	0x08013430
 800bf78:	08013800 	.word	0x08013800
 800bf7c:	20008c70 	.word	0x20008c70
 800bf80:	20008c6d 	.word	0x20008c6d
 800bf84:	08013820 	.word	0x08013820
            } else {
              recv_data = cseg->p;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	4a70      	ldr	r2, [pc, #448]	; (800c150 <tcp_receive+0xcf8>)
 800bf8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2200      	movs	r2, #0
 800bf94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	899b      	ldrh	r3, [r3, #12]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fa fb40 	bl	8006624 <lwip_htons>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00d      	beq.n	800bfcc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bfb0:	4b68      	ldr	r3, [pc, #416]	; (800c154 <tcp_receive+0xcfc>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f043 0320 	orr.w	r3, r3, #32
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	4b66      	ldr	r3, [pc, #408]	; (800c154 <tcp_receive+0xcfc>)
 800bfbc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	7d1b      	ldrb	r3, [r3, #20]
 800bfc2:	2b04      	cmp	r3, #4
 800bfc4:	d102      	bne.n	800bfcc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2207      	movs	r2, #7
 800bfca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bfd4:	68b8      	ldr	r0, [r7, #8]
 800bfd6:	f7fd fae6 	bl	80095a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bfee:	429a      	cmp	r2, r3
 800bff0:	f43f af43 	beq.w	800be7a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8b5b      	ldrh	r3, [r3, #26]
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00e      	beq.n	800c01e <tcp_receive+0xbc6>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8b5b      	ldrh	r3, [r3, #26]
 800c004:	f023 0301 	bic.w	r3, r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	835a      	strh	r2, [r3, #26]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	8b5b      	ldrh	r3, [r3, #26]
 800c012:	f043 0302 	orr.w	r3, r3, #2
 800c016:	b29a      	uxth	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c01c:	e188      	b.n	800c330 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8b5b      	ldrh	r3, [r3, #26]
 800c022:	f043 0301 	orr.w	r3, r3, #1
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c02c:	e180      	b.n	800c330 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c036:	4848      	ldr	r0, [pc, #288]	; (800c158 <tcp_receive+0xd00>)
 800c038:	f7fd faec 	bl	8009614 <tcp_seg_copy>
 800c03c:	4602      	mov	r2, r0
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	675a      	str	r2, [r3, #116]	; 0x74
 800c042:	e16d      	b.n	800c320 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c044:	2300      	movs	r3, #0
 800c046:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c04e:	e157      	b.n	800c300 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	4b41      	ldr	r3, [pc, #260]	; (800c15c <tcp_receive+0xd04>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d11d      	bne.n	800c09a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c05e:	4b3e      	ldr	r3, [pc, #248]	; (800c158 <tcp_receive+0xd00>)
 800c060:	891a      	ldrh	r2, [r3, #8]
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	891b      	ldrh	r3, [r3, #8]
 800c066:	429a      	cmp	r2, r3
 800c068:	f240 814f 	bls.w	800c30a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c06c:	483a      	ldr	r0, [pc, #232]	; (800c158 <tcp_receive+0xd00>)
 800c06e:	f7fd fad1 	bl	8009614 <tcp_seg_copy>
 800c072:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 8149 	beq.w	800c30e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <tcp_receive+0xc32>
                    prev->next = cseg;
 800c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	e002      	b.n	800c090 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c092:	6978      	ldr	r0, [r7, #20]
 800c094:	f7ff f8dc 	bl	800b250 <tcp_oos_insert_segment>
                }
                break;
 800c098:	e139      	b.n	800c30e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d117      	bne.n	800c0d0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c0a0:	4b2e      	ldr	r3, [pc, #184]	; (800c15c <tcp_receive+0xd04>)
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	da57      	bge.n	800c160 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c0b0:	4829      	ldr	r0, [pc, #164]	; (800c158 <tcp_receive+0xd00>)
 800c0b2:	f7fd faaf 	bl	8009614 <tcp_seg_copy>
 800c0b6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 8129 	beq.w	800c312 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c0c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0c8:	69b8      	ldr	r0, [r7, #24]
 800c0ca:	f7ff f8c1 	bl	800b250 <tcp_oos_insert_segment>
                  }
                  break;
 800c0ce:	e120      	b.n	800c312 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c0d0:	4b22      	ldr	r3, [pc, #136]	; (800c15c <tcp_receive+0xd04>)
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	db3e      	blt.n	800c160 <tcp_receive+0xd08>
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <tcp_receive+0xd04>)
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dc35      	bgt.n	800c160 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c0f4:	4818      	ldr	r0, [pc, #96]	; (800c158 <tcp_receive+0xd00>)
 800c0f6:	f7fd fa8d 	bl	8009614 <tcp_seg_copy>
 800c0fa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f000 8109 	beq.w	800c316 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10c:	8912      	ldrh	r2, [r2, #8]
 800c10e:	441a      	add	r2, r3
 800c110:	4b12      	ldr	r3, [pc, #72]	; (800c15c <tcp_receive+0xd04>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd12      	ble.n	800c140 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c11a:	4b10      	ldr	r3, [pc, #64]	; (800c15c <tcp_receive+0xd04>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	b29a      	uxth	r2, r3
 800c120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29b      	uxth	r3, r3
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c132:	685a      	ldr	r2, [r3, #4]
 800c134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c136:	891b      	ldrh	r3, [r3, #8]
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7fb fc80 	bl	8007a40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c142:	69fa      	ldr	r2, [r7, #28]
 800c144:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c148:	69f8      	ldr	r0, [r7, #28]
 800c14a:	f7ff f881 	bl	800b250 <tcp_oos_insert_segment>
                  }
                  break;
 800c14e:	e0e2      	b.n	800c316 <tcp_receive+0xebe>
 800c150:	20008c70 	.word	0x20008c70
 800c154:	20008c6d 	.word	0x20008c6d
 800c158:	20008c40 	.word	0x20008c40
 800c15c:	20008c60 	.word	0x20008c60
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f040 80c6 	bne.w	800c2fa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c16e:	4b80      	ldr	r3, [pc, #512]	; (800c370 <tcp_receive+0xf18>)
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f340 80bd 	ble.w	800c2fa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	899b      	ldrh	r3, [r3, #12]
 800c186:	b29b      	uxth	r3, r3
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fa fa4b 	bl	8006624 <lwip_htons>
 800c18e:	4603      	mov	r3, r0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	f040 80bf 	bne.w	800c31a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c19c:	4875      	ldr	r0, [pc, #468]	; (800c374 <tcp_receive+0xf1c>)
 800c19e:	f7fd fa39 	bl	8009614 <tcp_seg_copy>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 80b6 	beq.w	800c31e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ba:	8912      	ldrh	r2, [r2, #8]
 800c1bc:	441a      	add	r2, r3
 800c1be:	4b6c      	ldr	r3, [pc, #432]	; (800c370 <tcp_receive+0xf18>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dd12      	ble.n	800c1ee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c1c8:	4b69      	ldr	r3, [pc, #420]	; (800c370 <tcp_receive+0xf18>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	891b      	ldrh	r3, [r3, #8]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f7fb fc29 	bl	8007a40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c1ee:	4b62      	ldr	r3, [pc, #392]	; (800c378 <tcp_receive+0xf20>)
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	4b5e      	ldr	r3, [pc, #376]	; (800c370 <tcp_receive+0xf18>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	441a      	add	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c202:	440b      	add	r3, r1
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	f340 8089 	ble.w	800c31e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	899b      	ldrh	r3, [r3, #12]
 800c214:	b29b      	uxth	r3, r3
 800c216:	4618      	mov	r0, r3
 800c218:	f7fa fa04 	bl	8006624 <lwip_htons>
 800c21c:	4603      	mov	r3, r0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 0301 	and.w	r3, r3, #1
 800c224:	2b00      	cmp	r3, #0
 800c226:	d022      	beq.n	800c26e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	899b      	ldrh	r3, [r3, #12]
 800c230:	b29b      	uxth	r3, r3
 800c232:	b21b      	sxth	r3, r3
 800c234:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c238:	b21c      	sxth	r4, r3
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	899b      	ldrh	r3, [r3, #12]
 800c242:	b29b      	uxth	r3, r3
 800c244:	4618      	mov	r0, r3
 800c246:	f7fa f9ed 	bl	8006624 <lwip_htons>
 800c24a:	4603      	mov	r3, r0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	b29b      	uxth	r3, r3
 800c250:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c254:	b29b      	uxth	r3, r3
 800c256:	4618      	mov	r0, r3
 800c258:	f7fa f9e4 	bl	8006624 <lwip_htons>
 800c25c:	4603      	mov	r3, r0
 800c25e:	b21b      	sxth	r3, r3
 800c260:	4323      	orrs	r3, r4
 800c262:	b21a      	sxth	r2, r3
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	b292      	uxth	r2, r2
 800c26c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	b29a      	uxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c278:	4413      	add	r3, r2
 800c27a:	b299      	uxth	r1, r3
 800c27c:	4b3c      	ldr	r3, [pc, #240]	; (800c370 <tcp_receive+0xf18>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	b29a      	uxth	r2, r3
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	1a8a      	subs	r2, r1, r2
 800c288:	b292      	uxth	r2, r2
 800c28a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	891b      	ldrh	r3, [r3, #8]
 800c298:	4619      	mov	r1, r3
 800c29a:	4610      	mov	r0, r2
 800c29c:	f7fb fbd0 	bl	8007a40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	891c      	ldrh	r4, [r3, #8]
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	899b      	ldrh	r3, [r3, #12]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fa f9b7 	bl	8006624 <lwip_htons>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f003 0303 	and.w	r3, r3, #3
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <tcp_receive+0xe6e>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <tcp_receive+0xe70>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	4423      	add	r3, r4
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	4b2a      	ldr	r3, [pc, #168]	; (800c378 <tcp_receive+0xf20>)
 800c2ce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c2d0:	4b29      	ldr	r3, [pc, #164]	; (800c378 <tcp_receive+0xf20>)
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	4b26      	ldr	r3, [pc, #152]	; (800c370 <tcp_receive+0xf18>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	441a      	add	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2e4:	440b      	add	r3, r1
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d019      	beq.n	800c31e <tcp_receive+0xec6>
 800c2ea:	4b24      	ldr	r3, [pc, #144]	; (800c37c <tcp_receive+0xf24>)
 800c2ec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c2f0:	4923      	ldr	r1, [pc, #140]	; (800c380 <tcp_receive+0xf28>)
 800c2f2:	4824      	ldr	r0, [pc, #144]	; (800c384 <tcp_receive+0xf2c>)
 800c2f4:	f004 fedc 	bl	80110b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c2f8:	e011      	b.n	800c31e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	2b00      	cmp	r3, #0
 800c304:	f47f aea4 	bne.w	800c050 <tcp_receive+0xbf8>
 800c308:	e00a      	b.n	800c320 <tcp_receive+0xec8>
                break;
 800c30a:	bf00      	nop
 800c30c:	e008      	b.n	800c320 <tcp_receive+0xec8>
                break;
 800c30e:	bf00      	nop
 800c310:	e006      	b.n	800c320 <tcp_receive+0xec8>
                  break;
 800c312:	bf00      	nop
 800c314:	e004      	b.n	800c320 <tcp_receive+0xec8>
                  break;
 800c316:	bf00      	nop
 800c318:	e002      	b.n	800c320 <tcp_receive+0xec8>
                  break;
 800c31a:	bf00      	nop
 800c31c:	e000      	b.n	800c320 <tcp_receive+0xec8>
                break;
 800c31e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 fe8b 	bl	800e03c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c326:	e003      	b.n	800c330 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f001 fe87 	bl	800e03c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c32e:	e01a      	b.n	800c366 <tcp_receive+0xf0e>
 800c330:	e019      	b.n	800c366 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c332:	4b0f      	ldr	r3, [pc, #60]	; (800c370 <tcp_receive+0xf18>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db0a      	blt.n	800c356 <tcp_receive+0xefe>
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <tcp_receive+0xf18>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c34c:	440b      	add	r3, r1
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	3301      	adds	r3, #1
 800c352:	2b00      	cmp	r3, #0
 800c354:	dd07      	ble.n	800c366 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	8b5b      	ldrh	r3, [r3, #26]
 800c35a:	f043 0302 	orr.w	r3, r3, #2
 800c35e:	b29a      	uxth	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c364:	e7ff      	b.n	800c366 <tcp_receive+0xf0e>
 800c366:	bf00      	nop
 800c368:	3750      	adds	r7, #80	; 0x50
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bdb0      	pop	{r4, r5, r7, pc}
 800c36e:	bf00      	nop
 800c370:	20008c60 	.word	0x20008c60
 800c374:	20008c40 	.word	0x20008c40
 800c378:	20008c6a 	.word	0x20008c6a
 800c37c:	080133e4 	.word	0x080133e4
 800c380:	0801378c 	.word	0x0801378c
 800c384:	08013430 	.word	0x08013430

0800c388 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c38e:	4b15      	ldr	r3, [pc, #84]	; (800c3e4 <tcp_get_next_optbyte+0x5c>)
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	b291      	uxth	r1, r2
 800c396:	4a13      	ldr	r2, [pc, #76]	; (800c3e4 <tcp_get_next_optbyte+0x5c>)
 800c398:	8011      	strh	r1, [r2, #0]
 800c39a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c39c:	4b12      	ldr	r3, [pc, #72]	; (800c3e8 <tcp_get_next_optbyte+0x60>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d004      	beq.n	800c3ae <tcp_get_next_optbyte+0x26>
 800c3a4:	4b11      	ldr	r3, [pc, #68]	; (800c3ec <tcp_get_next_optbyte+0x64>)
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	88fa      	ldrh	r2, [r7, #6]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d208      	bcs.n	800c3c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <tcp_get_next_optbyte+0x68>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3314      	adds	r3, #20
 800c3b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c3b6:	88fb      	ldrh	r3, [r7, #6]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	e00b      	b.n	800c3d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c3c0:	88fb      	ldrh	r3, [r7, #6]
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <tcp_get_next_optbyte+0x64>)
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c3ce:	4b06      	ldr	r3, [pc, #24]	; (800c3e8 <tcp_get_next_optbyte+0x60>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	797b      	ldrb	r3, [r7, #5]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	20008c5c 	.word	0x20008c5c
 800c3e8:	20008c58 	.word	0x20008c58
 800c3ec:	20008c56 	.word	0x20008c56
 800c3f0:	20008c50 	.word	0x20008c50

0800c3f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <tcp_parseopt+0x1c>
 800c402:	4b32      	ldr	r3, [pc, #200]	; (800c4cc <tcp_parseopt+0xd8>)
 800c404:	f240 727d 	movw	r2, #1917	; 0x77d
 800c408:	4931      	ldr	r1, [pc, #196]	; (800c4d0 <tcp_parseopt+0xdc>)
 800c40a:	4832      	ldr	r0, [pc, #200]	; (800c4d4 <tcp_parseopt+0xe0>)
 800c40c:	f004 fe50 	bl	80110b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c410:	4b31      	ldr	r3, [pc, #196]	; (800c4d8 <tcp_parseopt+0xe4>)
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d055      	beq.n	800c4c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c418:	4b30      	ldr	r3, [pc, #192]	; (800c4dc <tcp_parseopt+0xe8>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	e045      	b.n	800c4ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c420:	f7ff ffb2 	bl	800c388 <tcp_get_next_optbyte>
 800c424:	4603      	mov	r3, r0
 800c426:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d006      	beq.n	800c43c <tcp_parseopt+0x48>
 800c42e:	2b02      	cmp	r3, #2
 800c430:	dc2b      	bgt.n	800c48a <tcp_parseopt+0x96>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d041      	beq.n	800c4ba <tcp_parseopt+0xc6>
 800c436:	2b01      	cmp	r3, #1
 800c438:	d127      	bne.n	800c48a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c43a:	e037      	b.n	800c4ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c43c:	f7ff ffa4 	bl	800c388 <tcp_get_next_optbyte>
 800c440:	4603      	mov	r3, r0
 800c442:	2b04      	cmp	r3, #4
 800c444:	d13b      	bne.n	800c4be <tcp_parseopt+0xca>
 800c446:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <tcp_parseopt+0xe8>)
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	3301      	adds	r3, #1
 800c44c:	4a22      	ldr	r2, [pc, #136]	; (800c4d8 <tcp_parseopt+0xe4>)
 800c44e:	8812      	ldrh	r2, [r2, #0]
 800c450:	4293      	cmp	r3, r2
 800c452:	da34      	bge.n	800c4be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c454:	f7ff ff98 	bl	800c388 <tcp_get_next_optbyte>
 800c458:	4603      	mov	r3, r0
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c460:	f7ff ff92 	bl	800c388 <tcp_get_next_optbyte>
 800c464:	4603      	mov	r3, r0
 800c466:	b29a      	uxth	r2, r3
 800c468:	89bb      	ldrh	r3, [r7, #12]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c46e:	89bb      	ldrh	r3, [r7, #12]
 800c470:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c474:	d804      	bhi.n	800c480 <tcp_parseopt+0x8c>
 800c476:	89bb      	ldrh	r3, [r7, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <tcp_parseopt+0x8c>
 800c47c:	89ba      	ldrh	r2, [r7, #12]
 800c47e:	e001      	b.n	800c484 <tcp_parseopt+0x90>
 800c480:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c488:	e010      	b.n	800c4ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c48a:	f7ff ff7d 	bl	800c388 <tcp_get_next_optbyte>
 800c48e:	4603      	mov	r3, r0
 800c490:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d914      	bls.n	800c4c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <tcp_parseopt+0xe8>)
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	3b02      	subs	r3, #2
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <tcp_parseopt+0xe8>)
 800c4aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <tcp_parseopt+0xe8>)
 800c4ae:	881a      	ldrh	r2, [r3, #0]
 800c4b0:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <tcp_parseopt+0xe4>)
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d3b3      	bcc.n	800c420 <tcp_parseopt+0x2c>
 800c4b8:	e004      	b.n	800c4c4 <tcp_parseopt+0xd0>
          return;
 800c4ba:	bf00      	nop
 800c4bc:	e002      	b.n	800c4c4 <tcp_parseopt+0xd0>
            return;
 800c4be:	bf00      	nop
 800c4c0:	e000      	b.n	800c4c4 <tcp_parseopt+0xd0>
            return;
 800c4c2:	bf00      	nop
      }
    }
  }
}
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	080133e4 	.word	0x080133e4
 800c4d0:	08013848 	.word	0x08013848
 800c4d4:	08013430 	.word	0x08013430
 800c4d8:	20008c54 	.word	0x20008c54
 800c4dc:	20008c5c 	.word	0x20008c5c

0800c4e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <tcp_trigger_input_pcb_close+0x1c>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f043 0310 	orr.w	r3, r3, #16
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	4b03      	ldr	r3, [pc, #12]	; (800c4fc <tcp_trigger_input_pcb_close+0x1c>)
 800c4f0:	701a      	strb	r2, [r3, #0]
}
 800c4f2:	bf00      	nop
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	20008c6d 	.word	0x20008c6d

0800c500 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <tcp_route+0x28>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	7a1b      	ldrb	r3, [r3, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d006      	beq.n	800c528 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	7a1b      	ldrb	r3, [r3, #8]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fb f8b4 	bl	800768c <netif_get_by_index>
 800c524:	4603      	mov	r3, r0
 800c526:	e003      	b.n	800c530 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f003 fad5 	bl	800fad8 <ip4_route>
 800c52e:	4603      	mov	r3, r0
  }
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c538:	b590      	push	{r4, r7, lr}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	603b      	str	r3, [r7, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <tcp_create_segment+0x22>
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <tcp_create_segment+0x128>)
 800c550:	22a3      	movs	r2, #163	; 0xa3
 800c552:	4944      	ldr	r1, [pc, #272]	; (800c664 <tcp_create_segment+0x12c>)
 800c554:	4844      	ldr	r0, [pc, #272]	; (800c668 <tcp_create_segment+0x130>)
 800c556:	f004 fdab 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d105      	bne.n	800c56c <tcp_create_segment+0x34>
 800c560:	4b3f      	ldr	r3, [pc, #252]	; (800c660 <tcp_create_segment+0x128>)
 800c562:	22a4      	movs	r2, #164	; 0xa4
 800c564:	4941      	ldr	r1, [pc, #260]	; (800c66c <tcp_create_segment+0x134>)
 800c566:	4840      	ldr	r0, [pc, #256]	; (800c668 <tcp_create_segment+0x130>)
 800c568:	f004 fda2 	bl	80110b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c56c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	b2db      	uxtb	r3, r3
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c57a:	2003      	movs	r0, #3
 800c57c:	f7fa fd00 	bl	8006f80 <memp_malloc>
 800c580:	6138      	str	r0, [r7, #16]
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d104      	bne.n	800c592 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c588:	68b8      	ldr	r0, [r7, #8]
 800c58a:	f7fb fbdf 	bl	8007d4c <pbuf_free>
    return NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	e061      	b.n	800c656 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c598:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	891a      	ldrh	r2, [r3, #8]
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d205      	bcs.n	800c5be <tcp_create_segment+0x86>
 800c5b2:	4b2b      	ldr	r3, [pc, #172]	; (800c660 <tcp_create_segment+0x128>)
 800c5b4:	22b0      	movs	r2, #176	; 0xb0
 800c5b6:	492e      	ldr	r1, [pc, #184]	; (800c670 <tcp_create_segment+0x138>)
 800c5b8:	482b      	ldr	r0, [pc, #172]	; (800c668 <tcp_create_segment+0x130>)
 800c5ba:	f004 fd79 	bl	80110b0 <iprintf>
  seg->len = p->tot_len - optlen;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	891a      	ldrh	r2, [r3, #8]
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c5ce:	2114      	movs	r1, #20
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f7fb fb25 	bl	8007c20 <pbuf_add_header>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c5dc:	6938      	ldr	r0, [r7, #16]
 800c5de:	f7fc ffe2 	bl	80095a6 <tcp_seg_free>
    return NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e037      	b.n	800c656 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	8ada      	ldrh	r2, [r3, #22]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	68dc      	ldr	r4, [r3, #12]
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f7fa f813 	bl	8006624 <lwip_htons>
 800c5fe:	4603      	mov	r3, r0
 800c600:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	8b1a      	ldrh	r2, [r3, #24]
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	68dc      	ldr	r4, [r3, #12]
 800c60a:	4610      	mov	r0, r2
 800c60c:	f7fa f80a 	bl	8006624 <lwip_htons>
 800c610:	4603      	mov	r3, r0
 800c612:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	68dc      	ldr	r4, [r3, #12]
 800c618:	6838      	ldr	r0, [r7, #0]
 800c61a:	f7fa f818 	bl	800664e <lwip_htonl>
 800c61e:	4603      	mov	r3, r0
 800c620:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	089b      	lsrs	r3, r3, #2
 800c626:	b2db      	uxtb	r3, r3
 800c628:	b29b      	uxth	r3, r3
 800c62a:	3305      	adds	r3, #5
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	031b      	lsls	r3, r3, #12
 800c630:	b29a      	uxth	r2, r3
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4313      	orrs	r3, r2
 800c638:	b29a      	uxth	r2, r3
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	68dc      	ldr	r4, [r3, #12]
 800c63e:	4610      	mov	r0, r2
 800c640:	f7f9 fff0 	bl	8006624 <lwip_htons>
 800c644:	4603      	mov	r3, r0
 800c646:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	749a      	strb	r2, [r3, #18]
 800c650:	2200      	movs	r2, #0
 800c652:	74da      	strb	r2, [r3, #19]
  return seg;
 800c654:	693b      	ldr	r3, [r7, #16]
}
 800c656:	4618      	mov	r0, r3
 800c658:	371c      	adds	r7, #28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd90      	pop	{r4, r7, pc}
 800c65e:	bf00      	nop
 800c660:	08013864 	.word	0x08013864
 800c664:	08013898 	.word	0x08013898
 800c668:	080138b8 	.word	0x080138b8
 800c66c:	080138e0 	.word	0x080138e0
 800c670:	08013904 	.word	0x08013904

0800c674 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	607b      	str	r3, [r7, #4]
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	460b      	mov	r3, r1
 800c682:	81bb      	strh	r3, [r7, #12]
 800c684:	4613      	mov	r3, r2
 800c686:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c688:	89bb      	ldrh	r3, [r7, #12]
 800c68a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <tcp_pbuf_prealloc+0x2a>
 800c692:	4b30      	ldr	r3, [pc, #192]	; (800c754 <tcp_pbuf_prealloc+0xe0>)
 800c694:	22e8      	movs	r2, #232	; 0xe8
 800c696:	4930      	ldr	r1, [pc, #192]	; (800c758 <tcp_pbuf_prealloc+0xe4>)
 800c698:	4830      	ldr	r0, [pc, #192]	; (800c75c <tcp_pbuf_prealloc+0xe8>)
 800c69a:	f004 fd09 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d105      	bne.n	800c6b0 <tcp_pbuf_prealloc+0x3c>
 800c6a4:	4b2b      	ldr	r3, [pc, #172]	; (800c754 <tcp_pbuf_prealloc+0xe0>)
 800c6a6:	22e9      	movs	r2, #233	; 0xe9
 800c6a8:	492d      	ldr	r1, [pc, #180]	; (800c760 <tcp_pbuf_prealloc+0xec>)
 800c6aa:	482c      	ldr	r0, [pc, #176]	; (800c75c <tcp_pbuf_prealloc+0xe8>)
 800c6ac:	f004 fd00 	bl	80110b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c6b0:	89ba      	ldrh	r2, [r7, #12]
 800c6b2:	897b      	ldrh	r3, [r7, #10]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d221      	bcs.n	800c6fc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c6b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6bc:	f003 0302 	and.w	r3, r3, #2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d111      	bne.n	800c6e8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	8b5b      	ldrh	r3, [r3, #26]
 800c6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d115      	bne.n	800c6fc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c6d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d007      	beq.n	800c6e8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d103      	bne.n	800c6e8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d009      	beq.n	800c6fc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c6e8:	89bb      	ldrh	r3, [r7, #12]
 800c6ea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c6ee:	f023 0203 	bic.w	r2, r3, #3
 800c6f2:	897b      	ldrh	r3, [r7, #10]
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	bf28      	it	cs
 800c6f8:	4613      	movcs	r3, r2
 800c6fa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c6fc:	8af9      	ldrh	r1, [r7, #22]
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
 800c700:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c704:	4618      	mov	r0, r3
 800c706:	f7fb f83d 	bl	8007784 <pbuf_alloc>
 800c70a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	e019      	b.n	800c74a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d006      	beq.n	800c72c <tcp_pbuf_prealloc+0xb8>
 800c71e:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <tcp_pbuf_prealloc+0xe0>)
 800c720:	f240 120b 	movw	r2, #267	; 0x10b
 800c724:	490f      	ldr	r1, [pc, #60]	; (800c764 <tcp_pbuf_prealloc+0xf0>)
 800c726:	480d      	ldr	r0, [pc, #52]	; (800c75c <tcp_pbuf_prealloc+0xe8>)
 800c728:	f004 fcc2 	bl	80110b0 <iprintf>
  *oversize = p->len - length;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	895a      	ldrh	r2, [r3, #10]
 800c730:	89bb      	ldrh	r3, [r7, #12]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	89ba      	ldrh	r2, [r7, #12]
 800c73e:	811a      	strh	r2, [r3, #8]
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	891a      	ldrh	r2, [r3, #8]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	815a      	strh	r2, [r3, #10]
  return p;
 800c748:	693b      	ldr	r3, [r7, #16]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	08013864 	.word	0x08013864
 800c758:	0801391c 	.word	0x0801391c
 800c75c:	080138b8 	.word	0x080138b8
 800c760:	08013940 	.word	0x08013940
 800c764:	08013960 	.word	0x08013960

0800c768 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <tcp_write_checks+0x20>
 800c77a:	4b33      	ldr	r3, [pc, #204]	; (800c848 <tcp_write_checks+0xe0>)
 800c77c:	f240 1233 	movw	r2, #307	; 0x133
 800c780:	4932      	ldr	r1, [pc, #200]	; (800c84c <tcp_write_checks+0xe4>)
 800c782:	4833      	ldr	r0, [pc, #204]	; (800c850 <tcp_write_checks+0xe8>)
 800c784:	f004 fc94 	bl	80110b0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7d1b      	ldrb	r3, [r3, #20]
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d00e      	beq.n	800c7ae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c794:	2b07      	cmp	r3, #7
 800c796:	d00a      	beq.n	800c7ae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d006      	beq.n	800c7ae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d002      	beq.n	800c7ae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c7a8:	f06f 030a 	mvn.w	r3, #10
 800c7ac:	e048      	b.n	800c840 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c7ae:	887b      	ldrh	r3, [r7, #2]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <tcp_write_checks+0x50>
    return ERR_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e043      	b.n	800c840 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7be:	887a      	ldrh	r2, [r7, #2]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d909      	bls.n	800c7d8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8b5b      	ldrh	r3, [r3, #26]
 800c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d6:	e033      	b.n	800c840 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7de:	2b08      	cmp	r3, #8
 800c7e0:	d909      	bls.n	800c7f6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	8b5b      	ldrh	r3, [r3, #26]
 800c7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f4:	e024      	b.n	800c840 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00f      	beq.n	800c820 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c804:	2b00      	cmp	r3, #0
 800c806:	d11a      	bne.n	800c83e <tcp_write_checks+0xd6>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d116      	bne.n	800c83e <tcp_write_checks+0xd6>
 800c810:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <tcp_write_checks+0xe0>)
 800c812:	f240 1255 	movw	r2, #341	; 0x155
 800c816:	490f      	ldr	r1, [pc, #60]	; (800c854 <tcp_write_checks+0xec>)
 800c818:	480d      	ldr	r0, [pc, #52]	; (800c850 <tcp_write_checks+0xe8>)
 800c81a:	f004 fc49 	bl	80110b0 <iprintf>
 800c81e:	e00e      	b.n	800c83e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c824:	2b00      	cmp	r3, #0
 800c826:	d103      	bne.n	800c830 <tcp_write_checks+0xc8>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d006      	beq.n	800c83e <tcp_write_checks+0xd6>
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <tcp_write_checks+0xe0>)
 800c832:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c836:	4908      	ldr	r1, [pc, #32]	; (800c858 <tcp_write_checks+0xf0>)
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <tcp_write_checks+0xe8>)
 800c83a:	f004 fc39 	bl	80110b0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	08013864 	.word	0x08013864
 800c84c:	08013974 	.word	0x08013974
 800c850:	080138b8 	.word	0x080138b8
 800c854:	08013994 	.word	0x08013994
 800c858:	080139d0 	.word	0x080139d0

0800c85c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c85c:	b590      	push	{r4, r7, lr}
 800c85e:	b09b      	sub	sp, #108	; 0x6c
 800c860:	af04      	add	r7, sp, #16
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	4611      	mov	r1, r2
 800c868:	461a      	mov	r2, r3
 800c86a:	460b      	mov	r3, r1
 800c86c:	80fb      	strh	r3, [r7, #6]
 800c86e:	4613      	mov	r3, r2
 800c870:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	653b      	str	r3, [r7, #80]	; 0x50
 800c87a:	2300      	movs	r3, #0
 800c87c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c87e:	2300      	movs	r3, #0
 800c880:	64bb      	str	r3, [r7, #72]	; 0x48
 800c882:	2300      	movs	r3, #0
 800c884:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c886:	2300      	movs	r3, #0
 800c888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d109      	bne.n	800c8b8 <tcp_write+0x5c>
 800c8a4:	4ba4      	ldr	r3, [pc, #656]	; (800cb38 <tcp_write+0x2dc>)
 800c8a6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c8aa:	49a4      	ldr	r1, [pc, #656]	; (800cb3c <tcp_write+0x2e0>)
 800c8ac:	48a4      	ldr	r0, [pc, #656]	; (800cb40 <tcp_write+0x2e4>)
 800c8ae:	f004 fbff 	bl	80110b0 <iprintf>
 800c8b2:	f06f 030f 	mvn.w	r3, #15
 800c8b6:	e32a      	b.n	800cf0e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8be:	085b      	lsrs	r3, r3, #1
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	bf28      	it	cs
 800c8ca:	4613      	movcs	r3, r2
 800c8cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c8ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <tcp_write+0x7e>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8d8:	e000      	b.n	800c8dc <tcp_write+0x80>
 800c8da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d109      	bne.n	800c8f8 <tcp_write+0x9c>
 800c8e4:	4b94      	ldr	r3, [pc, #592]	; (800cb38 <tcp_write+0x2dc>)
 800c8e6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c8ea:	4996      	ldr	r1, [pc, #600]	; (800cb44 <tcp_write+0x2e8>)
 800c8ec:	4894      	ldr	r0, [pc, #592]	; (800cb40 <tcp_write+0x2e4>)
 800c8ee:	f004 fbdf 	bl	80110b0 <iprintf>
 800c8f2:	f06f 030f 	mvn.w	r3, #15
 800c8f6:	e30a      	b.n	800cf0e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c8f8:	88fb      	ldrh	r3, [r7, #6]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff ff33 	bl	800c768 <tcp_write_checks>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c908:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <tcp_write+0xba>
    return err;
 800c910:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c914:	e2fb      	b.n	800cf0e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c91c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c920:	2300      	movs	r3, #0
 800c922:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 80f6 	beq.w	800cb1c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c934:	653b      	str	r3, [r7, #80]	; 0x50
 800c936:	e002      	b.n	800c93e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f8      	bne.n	800c938 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c948:	7a9b      	ldrb	r3, [r3, #10]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	f003 0304 	and.w	r3, r3, #4
 800c952:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c958:	891b      	ldrh	r3, [r3, #8]
 800c95a:	4619      	mov	r1, r3
 800c95c:	8c3b      	ldrh	r3, [r7, #32]
 800c95e:	440b      	add	r3, r1
 800c960:	429a      	cmp	r2, r3
 800c962:	da06      	bge.n	800c972 <tcp_write+0x116>
 800c964:	4b74      	ldr	r3, [pc, #464]	; (800cb38 <tcp_write+0x2dc>)
 800c966:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c96a:	4977      	ldr	r1, [pc, #476]	; (800cb48 <tcp_write+0x2ec>)
 800c96c:	4874      	ldr	r0, [pc, #464]	; (800cb40 <tcp_write+0x2e4>)
 800c96e:	f004 fb9f 	bl	80110b0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c974:	891a      	ldrh	r2, [r3, #8]
 800c976:	8c3b      	ldrh	r3, [r7, #32]
 800c978:	4413      	add	r3, r2
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c988:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c98a:	8a7b      	ldrh	r3, [r7, #18]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d026      	beq.n	800c9de <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c990:	8a7b      	ldrh	r3, [r7, #18]
 800c992:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c994:	429a      	cmp	r2, r3
 800c996:	d206      	bcs.n	800c9a6 <tcp_write+0x14a>
 800c998:	4b67      	ldr	r3, [pc, #412]	; (800cb38 <tcp_write+0x2dc>)
 800c99a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c99e:	496b      	ldr	r1, [pc, #428]	; (800cb4c <tcp_write+0x2f0>)
 800c9a0:	4867      	ldr	r0, [pc, #412]	; (800cb40 <tcp_write+0x2e4>)
 800c9a2:	f004 fb85 	bl	80110b0 <iprintf>
      seg = last_unsent;
 800c9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c9aa:	8a7b      	ldrh	r3, [r7, #18]
 800c9ac:	88fa      	ldrh	r2, [r7, #6]
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	bf28      	it	cs
 800c9b2:	4613      	movcs	r3, r2
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	bf28      	it	cs
 800c9bc:	4613      	movcs	r3, r2
 800c9be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c9c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c9cc:	8a7a      	ldrh	r2, [r7, #18]
 800c9ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c9d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c9de:	8a7b      	ldrh	r3, [r7, #18]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <tcp_write+0x1a0>
 800c9e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9e8:	88fb      	ldrh	r3, [r7, #6]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d006      	beq.n	800c9fc <tcp_write+0x1a0>
 800c9ee:	4b52      	ldr	r3, [pc, #328]	; (800cb38 <tcp_write+0x2dc>)
 800c9f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9f4:	4956      	ldr	r1, [pc, #344]	; (800cb50 <tcp_write+0x2f4>)
 800c9f6:	4852      	ldr	r0, [pc, #328]	; (800cb40 <tcp_write+0x2e4>)
 800c9f8:	f004 fb5a 	bl	80110b0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c9fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca00:	88fb      	ldrh	r3, [r7, #6]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f080 8167 	bcs.w	800ccd6 <tcp_write+0x47a>
 800ca08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8163 	beq.w	800ccd6 <tcp_write+0x47a>
 800ca10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca12:	891b      	ldrh	r3, [r3, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 815e 	beq.w	800ccd6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ca1a:	88fa      	ldrh	r2, [r7, #6]
 800ca1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca20:	1ad2      	subs	r2, r2, r3
 800ca22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca24:	4293      	cmp	r3, r2
 800ca26:	bfa8      	it	ge
 800ca28:	4613      	movge	r3, r2
 800ca2a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ca2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ca30:	797b      	ldrb	r3, [r7, #5]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d027      	beq.n	800ca8a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ca3a:	f107 0012 	add.w	r0, r7, #18
 800ca3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ca40:	8bf9      	ldrh	r1, [r7, #30]
 800ca42:	2301      	movs	r3, #1
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	797b      	ldrb	r3, [r7, #5]
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2000      	movs	r0, #0
 800ca52:	f7ff fe0f 	bl	800c674 <tcp_pbuf_prealloc>
 800ca56:	6578      	str	r0, [r7, #84]	; 0x54
 800ca58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 8225 	beq.w	800ceaa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ca60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca62:	6858      	ldr	r0, [r3, #4]
 800ca64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	8bfa      	ldrh	r2, [r7, #30]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	f004 fc17 	bl	80112a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ca74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca76:	f7fb f9f1 	bl	8007e5c <pbuf_clen>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca82:	4413      	add	r3, r2
 800ca84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ca88:	e041      	b.n	800cb0e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ca8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca90:	e002      	b.n	800ca98 <tcp_write+0x23c>
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	637b      	str	r3, [r7, #52]	; 0x34
 800ca98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1f8      	bne.n	800ca92 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800caa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa2:	7b1b      	ldrb	r3, [r3, #12]
 800caa4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d115      	bne.n	800cad8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cab2:	8952      	ldrh	r2, [r2, #10]
 800cab4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d10d      	bne.n	800cad8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cabc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d006      	beq.n	800cad2 <tcp_write+0x276>
 800cac4:	4b1c      	ldr	r3, [pc, #112]	; (800cb38 <tcp_write+0x2dc>)
 800cac6:	f240 2231 	movw	r2, #561	; 0x231
 800caca:	4922      	ldr	r1, [pc, #136]	; (800cb54 <tcp_write+0x2f8>)
 800cacc:	481c      	ldr	r0, [pc, #112]	; (800cb40 <tcp_write+0x2e4>)
 800cace:	f004 faef 	bl	80110b0 <iprintf>
          extendlen = seglen;
 800cad2:	8bfb      	ldrh	r3, [r7, #30]
 800cad4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cad6:	e01a      	b.n	800cb0e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cad8:	8bfb      	ldrh	r3, [r7, #30]
 800cada:	2201      	movs	r2, #1
 800cadc:	4619      	mov	r1, r3
 800cade:	2000      	movs	r0, #0
 800cae0:	f7fa fe50 	bl	8007784 <pbuf_alloc>
 800cae4:	6578      	str	r0, [r7, #84]	; 0x54
 800cae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 81e0 	beq.w	800ceae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800caee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	441a      	add	r2, r3
 800caf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800cafa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cafc:	f7fb f9ae 	bl	8007e5c <pbuf_clen>
 800cb00:	4603      	mov	r3, r0
 800cb02:	461a      	mov	r2, r3
 800cb04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb08:	4413      	add	r3, r2
 800cb0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800cb0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb12:	8bfb      	ldrh	r3, [r7, #30]
 800cb14:	4413      	add	r3, r2
 800cb16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cb1a:	e0dc      	b.n	800ccd6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 80d7 	beq.w	800ccd6 <tcp_write+0x47a>
 800cb28:	4b03      	ldr	r3, [pc, #12]	; (800cb38 <tcp_write+0x2dc>)
 800cb2a:	f240 224a 	movw	r2, #586	; 0x24a
 800cb2e:	490a      	ldr	r1, [pc, #40]	; (800cb58 <tcp_write+0x2fc>)
 800cb30:	4803      	ldr	r0, [pc, #12]	; (800cb40 <tcp_write+0x2e4>)
 800cb32:	f004 fabd 	bl	80110b0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cb36:	e0ce      	b.n	800ccd6 <tcp_write+0x47a>
 800cb38:	08013864 	.word	0x08013864
 800cb3c:	08013a04 	.word	0x08013a04
 800cb40:	080138b8 	.word	0x080138b8
 800cb44:	08013a1c 	.word	0x08013a1c
 800cb48:	08013a50 	.word	0x08013a50
 800cb4c:	08013a68 	.word	0x08013a68
 800cb50:	08013a88 	.word	0x08013a88
 800cb54:	08013aa8 	.word	0x08013aa8
 800cb58:	08013ad4 	.word	0x08013ad4
    struct pbuf *p;
    u16_t left = len - pos;
 800cb5c:	88fa      	ldrh	r2, [r7, #6]
 800cb5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800cb66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cb72:	8b7a      	ldrh	r2, [r7, #26]
 800cb74:	8bbb      	ldrh	r3, [r7, #28]
 800cb76:	4293      	cmp	r3, r2
 800cb78:	bf28      	it	cs
 800cb7a:	4613      	movcs	r3, r2
 800cb7c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb7e:	797b      	ldrb	r3, [r7, #5]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d036      	beq.n	800cbf6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cb88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	8b3b      	ldrh	r3, [r7, #24]
 800cb90:	4413      	add	r3, r2
 800cb92:	b299      	uxth	r1, r3
 800cb94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bf0c      	ite	eq
 800cb9a:	2301      	moveq	r3, #1
 800cb9c:	2300      	movne	r3, #0
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	f107 0012 	add.w	r0, r7, #18
 800cba4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cba6:	9302      	str	r3, [sp, #8]
 800cba8:	797b      	ldrb	r3, [r7, #5]
 800cbaa:	9301      	str	r3, [sp, #4]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2036      	movs	r0, #54	; 0x36
 800cbb4:	f7ff fd5e 	bl	800c674 <tcp_pbuf_prealloc>
 800cbb8:	6338      	str	r0, [r7, #48]	; 0x30
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 8178 	beq.w	800ceb2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	895b      	ldrh	r3, [r3, #10]
 800cbc6:	8b3a      	ldrh	r2, [r7, #24]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d906      	bls.n	800cbda <tcp_write+0x37e>
 800cbcc:	4b8c      	ldr	r3, [pc, #560]	; (800ce00 <tcp_write+0x5a4>)
 800cbce:	f240 2266 	movw	r2, #614	; 0x266
 800cbd2:	498c      	ldr	r1, [pc, #560]	; (800ce04 <tcp_write+0x5a8>)
 800cbd4:	488c      	ldr	r0, [pc, #560]	; (800ce08 <tcp_write+0x5ac>)
 800cbd6:	f004 fa6b 	bl	80110b0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cbe2:	18d0      	adds	r0, r2, r3
 800cbe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	4413      	add	r3, r2
 800cbec:	8b3a      	ldrh	r2, [r7, #24]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	f004 fb57 	bl	80112a2 <memcpy>
 800cbf4:	e02f      	b.n	800cc56 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cbf6:	8a7b      	ldrh	r3, [r7, #18]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d006      	beq.n	800cc0a <tcp_write+0x3ae>
 800cbfc:	4b80      	ldr	r3, [pc, #512]	; (800ce00 <tcp_write+0x5a4>)
 800cbfe:	f240 2271 	movw	r2, #625	; 0x271
 800cc02:	4982      	ldr	r1, [pc, #520]	; (800ce0c <tcp_write+0x5b0>)
 800cc04:	4880      	ldr	r0, [pc, #512]	; (800ce08 <tcp_write+0x5ac>)
 800cc06:	f004 fa53 	bl	80110b0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cc0a:	8b3b      	ldrh	r3, [r7, #24]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	4619      	mov	r1, r3
 800cc10:	2036      	movs	r0, #54	; 0x36
 800cc12:	f7fa fdb7 	bl	8007784 <pbuf_alloc>
 800cc16:	6178      	str	r0, [r7, #20]
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 814b 	beq.w	800ceb6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cc20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	441a      	add	r2, r3
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc36:	4619      	mov	r1, r3
 800cc38:	2036      	movs	r0, #54	; 0x36
 800cc3a:	f7fa fda3 	bl	8007784 <pbuf_alloc>
 800cc3e:	6338      	str	r0, [r7, #48]	; 0x30
 800cc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d103      	bne.n	800cc4e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cc46:	6978      	ldr	r0, [r7, #20]
 800cc48:	f7fb f880 	bl	8007d4c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cc4c:	e136      	b.n	800cebc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cc4e:	6979      	ldr	r1, [r7, #20]
 800cc50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc52:	f7fb f93d 	bl	8007ed0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cc56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc58:	f7fb f900 	bl	8007e5c <pbuf_clen>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc64:	4413      	add	r3, r2
 800cc66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cc6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc6e:	2b09      	cmp	r3, #9
 800cc70:	d903      	bls.n	800cc7a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cc72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc74:	f7fb f86a 	bl	8007d4c <pbuf_free>
      goto memerr;
 800cc78:	e120      	b.n	800cebc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc82:	441a      	add	r2, r3
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f7ff fc51 	bl	800c538 <tcp_create_segment>
 800cc96:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f000 810d 	beq.w	800ceba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d102      	bne.n	800ccac <tcp_write+0x450>
      queue = seg;
 800cca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cca8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccaa:	e00c      	b.n	800ccc6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ccac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <tcp_write+0x464>
 800ccb2:	4b53      	ldr	r3, [pc, #332]	; (800ce00 <tcp_write+0x5a4>)
 800ccb4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ccb8:	4955      	ldr	r1, [pc, #340]	; (800ce10 <tcp_write+0x5b4>)
 800ccba:	4853      	ldr	r0, [pc, #332]	; (800ce08 <tcp_write+0x5ac>)
 800ccbc:	f004 f9f8 	bl	80110b0 <iprintf>
      prev_seg->next = seg;
 800ccc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccc4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ccc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ccca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccce:	8b3b      	ldrh	r3, [r7, #24]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ccd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccda:	88fb      	ldrh	r3, [r7, #6]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	f4ff af3d 	bcc.w	800cb5c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800cce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d02c      	beq.n	800cd42 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800cce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccee:	e01e      	b.n	800cd2e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	891a      	ldrh	r2, [r3, #8]
 800ccf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ccf6:	4413      	add	r3, r2
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d110      	bne.n	800cd28 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd0c:	8952      	ldrh	r2, [r2, #10]
 800cd0e:	4413      	add	r3, r2
 800cd10:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cd12:	68b9      	ldr	r1, [r7, #8]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f004 fac4 	bl	80112a2 <memcpy>
        p->len += oversize_used;
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	895a      	ldrh	r2, [r3, #10]
 800cd1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd20:	4413      	add	r3, r2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1dd      	bne.n	800ccf0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800cd34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd36:	891a      	ldrh	r2, [r3, #8]
 800cd38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd40:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800cd42:	8a7a      	ldrh	r2, [r7, #18]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800cd4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d018      	beq.n	800cd82 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cd50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <tcp_write+0x508>
 800cd56:	4b2a      	ldr	r3, [pc, #168]	; (800ce00 <tcp_write+0x5a4>)
 800cd58:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cd5c:	492d      	ldr	r1, [pc, #180]	; (800ce14 <tcp_write+0x5b8>)
 800cd5e:	482a      	ldr	r0, [pc, #168]	; (800ce08 <tcp_write+0x5ac>)
 800cd60:	f004 f9a6 	bl	80110b0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800cd64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fb f8b0 	bl	8007ed0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd72:	891a      	ldrh	r2, [r3, #8]
 800cd74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd76:	891b      	ldrh	r3, [r3, #8]
 800cd78:	4413      	add	r3, r2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd7e:	811a      	strh	r2, [r3, #8]
 800cd80:	e037      	b.n	800cdf2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cd82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d034      	beq.n	800cdf2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <tcp_write+0x53a>
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d106      	bne.n	800cda4 <tcp_write+0x548>
 800cd96:	4b1a      	ldr	r3, [pc, #104]	; (800ce00 <tcp_write+0x5a4>)
 800cd98:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cd9c:	491e      	ldr	r1, [pc, #120]	; (800ce18 <tcp_write+0x5bc>)
 800cd9e:	481a      	ldr	r0, [pc, #104]	; (800ce08 <tcp_write+0x5ac>)
 800cda0:	f004 f986 	bl	80110b0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdaa:	e009      	b.n	800cdc0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	891a      	ldrh	r2, [r3, #8]
 800cdb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1f1      	bne.n	800cdac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	891a      	ldrh	r2, [r3, #8]
 800cdcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdce:	4413      	add	r3, r2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	895a      	ldrh	r2, [r3, #10]
 800cdda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cddc:	4413      	add	r3, r2
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cde6:	891a      	ldrh	r2, [r3, #8]
 800cde8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cdea:	4413      	add	r3, r2
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cdf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d111      	bne.n	800ce1c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdfc:	66da      	str	r2, [r3, #108]	; 0x6c
 800cdfe:	e010      	b.n	800ce22 <tcp_write+0x5c6>
 800ce00:	08013864 	.word	0x08013864
 800ce04:	08013b04 	.word	0x08013b04
 800ce08:	080138b8 	.word	0x080138b8
 800ce0c:	08013b44 	.word	0x08013b44
 800ce10:	08013b54 	.word	0x08013b54
 800ce14:	08013b68 	.word	0x08013b68
 800ce18:	08013ba0 	.word	0x08013ba0
  } else {
    last_unsent->next = queue;
 800ce1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce20:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	441a      	add	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ce46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00e      	beq.n	800ce72 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10a      	bne.n	800ce72 <tcp_write+0x616>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <tcp_write+0x616>
 800ce64:	4b2c      	ldr	r3, [pc, #176]	; (800cf18 <tcp_write+0x6bc>)
 800ce66:	f240 3212 	movw	r2, #786	; 0x312
 800ce6a:	492c      	ldr	r1, [pc, #176]	; (800cf1c <tcp_write+0x6c0>)
 800ce6c:	482c      	ldr	r0, [pc, #176]	; (800cf20 <tcp_write+0x6c4>)
 800ce6e:	f004 f91f 	bl	80110b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ce72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d016      	beq.n	800cea6 <tcp_write+0x64a>
 800ce78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d012      	beq.n	800cea6 <tcp_write+0x64a>
 800ce80:	797b      	ldrb	r3, [r7, #5]
 800ce82:	f003 0302 	and.w	r3, r3, #2
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10d      	bne.n	800cea6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ce8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	899b      	ldrh	r3, [r3, #12]
 800ce90:	b29c      	uxth	r4, r3
 800ce92:	2008      	movs	r0, #8
 800ce94:	f7f9 fbc6 	bl	8006624 <lwip_htons>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	4322      	orrs	r2, r4
 800cea2:	b292      	uxth	r2, r2
 800cea4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e031      	b.n	800cf0e <tcp_write+0x6b2>
          goto memerr;
 800ceaa:	bf00      	nop
 800ceac:	e006      	b.n	800cebc <tcp_write+0x660>
            goto memerr;
 800ceae:	bf00      	nop
 800ceb0:	e004      	b.n	800cebc <tcp_write+0x660>
        goto memerr;
 800ceb2:	bf00      	nop
 800ceb4:	e002      	b.n	800cebc <tcp_write+0x660>
        goto memerr;
 800ceb6:	bf00      	nop
 800ceb8:	e000      	b.n	800cebc <tcp_write+0x660>
      goto memerr;
 800ceba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	8b5b      	ldrh	r3, [r3, #26]
 800cec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ceca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ced0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ced2:	f7fa ff3b 	bl	8007d4c <pbuf_free>
  }
  if (queue != NULL) {
 800ced6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800cedc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cede:	f7fc fb4d 	bl	800957c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00e      	beq.n	800cf0a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <tcp_write+0x6ae>
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d106      	bne.n	800cf0a <tcp_write+0x6ae>
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <tcp_write+0x6bc>)
 800cefe:	f240 3227 	movw	r2, #807	; 0x327
 800cf02:	4906      	ldr	r1, [pc, #24]	; (800cf1c <tcp_write+0x6c0>)
 800cf04:	4806      	ldr	r0, [pc, #24]	; (800cf20 <tcp_write+0x6c4>)
 800cf06:	f004 f8d3 	bl	80110b0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cf0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	375c      	adds	r7, #92	; 0x5c
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd90      	pop	{r4, r7, pc}
 800cf16:	bf00      	nop
 800cf18:	08013864 	.word	0x08013864
 800cf1c:	08013bd8 	.word	0x08013bd8
 800cf20:	080138b8 	.word	0x080138b8

0800cf24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b08b      	sub	sp, #44	; 0x2c
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]
 800cf34:	2300      	movs	r3, #0
 800cf36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <tcp_split_unsent_seg+0x2c>
 800cf42:	4b95      	ldr	r3, [pc, #596]	; (800d198 <tcp_split_unsent_seg+0x274>)
 800cf44:	f240 324b 	movw	r2, #843	; 0x34b
 800cf48:	4994      	ldr	r1, [pc, #592]	; (800d19c <tcp_split_unsent_seg+0x278>)
 800cf4a:	4895      	ldr	r0, [pc, #596]	; (800d1a0 <tcp_split_unsent_seg+0x27c>)
 800cf4c:	f004 f8b0 	bl	80110b0 <iprintf>

  useg = pcb->unsent;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d102      	bne.n	800cf62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf60:	e116      	b.n	800d190 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cf62:	887b      	ldrh	r3, [r7, #2]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d109      	bne.n	800cf7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cf68:	4b8b      	ldr	r3, [pc, #556]	; (800d198 <tcp_split_unsent_seg+0x274>)
 800cf6a:	f240 3253 	movw	r2, #851	; 0x353
 800cf6e:	498d      	ldr	r1, [pc, #564]	; (800d1a4 <tcp_split_unsent_seg+0x280>)
 800cf70:	488b      	ldr	r0, [pc, #556]	; (800d1a0 <tcp_split_unsent_seg+0x27c>)
 800cf72:	f004 f89d 	bl	80110b0 <iprintf>
    return ERR_VAL;
 800cf76:	f06f 0305 	mvn.w	r3, #5
 800cf7a:	e109      	b.n	800d190 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	891b      	ldrh	r3, [r3, #8]
 800cf80:	887a      	ldrh	r2, [r7, #2]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d301      	bcc.n	800cf8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	e102      	b.n	800d190 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf8e:	887a      	ldrh	r2, [r7, #2]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d906      	bls.n	800cfa2 <tcp_split_unsent_seg+0x7e>
 800cf94:	4b80      	ldr	r3, [pc, #512]	; (800d198 <tcp_split_unsent_seg+0x274>)
 800cf96:	f240 325b 	movw	r2, #859	; 0x35b
 800cf9a:	4983      	ldr	r1, [pc, #524]	; (800d1a8 <tcp_split_unsent_seg+0x284>)
 800cf9c:	4880      	ldr	r0, [pc, #512]	; (800d1a0 <tcp_split_unsent_seg+0x27c>)
 800cf9e:	f004 f887 	bl	80110b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	891b      	ldrh	r3, [r3, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <tcp_split_unsent_seg+0x94>
 800cfaa:	4b7b      	ldr	r3, [pc, #492]	; (800d198 <tcp_split_unsent_seg+0x274>)
 800cfac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cfb0:	497e      	ldr	r1, [pc, #504]	; (800d1ac <tcp_split_unsent_seg+0x288>)
 800cfb2:	487b      	ldr	r0, [pc, #492]	; (800d1a0 <tcp_split_unsent_seg+0x27c>)
 800cfb4:	f004 f87c 	bl	80110b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	7a9b      	ldrb	r3, [r3, #10]
 800cfbc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	891a      	ldrh	r2, [r3, #8]
 800cfce:	887b      	ldrh	r3, [r7, #2]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	89bb      	ldrh	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	2036      	movs	r0, #54	; 0x36
 800cfe6:	f7fa fbcd 	bl	8007784 <pbuf_alloc>
 800cfea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f000 80b7 	beq.w	800d162 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	891a      	ldrh	r2, [r3, #8]
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	891b      	ldrh	r3, [r3, #8]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	b29a      	uxth	r2, r3
 800d002:	887b      	ldrh	r3, [r7, #2]
 800d004:	4413      	add	r3, r2
 800d006:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	6858      	ldr	r0, [r3, #4]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	18d1      	adds	r1, r2, r3
 800d014:	897b      	ldrh	r3, [r7, #10]
 800d016:	89ba      	ldrh	r2, [r7, #12]
 800d018:	f7fb f882 	bl	8008120 <pbuf_copy_partial>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	89bb      	ldrh	r3, [r7, #12]
 800d022:	4293      	cmp	r3, r2
 800d024:	f040 809f 	bne.w	800d166 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	899b      	ldrh	r3, [r3, #12]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	4618      	mov	r0, r3
 800d032:	f7f9 faf7 	bl	8006624 <lwip_htons>
 800d036:	4603      	mov	r3, r0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d03e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d040:	2300      	movs	r3, #0
 800d042:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d044:	7efb      	ldrb	r3, [r7, #27]
 800d046:	f003 0308 	and.w	r3, r3, #8
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d007      	beq.n	800d05e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d04e:	7efb      	ldrb	r3, [r7, #27]
 800d050:	f023 0308 	bic.w	r3, r3, #8
 800d054:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d056:	7ebb      	ldrb	r3, [r7, #26]
 800d058:	f043 0308 	orr.w	r3, r3, #8
 800d05c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d05e:	7efb      	ldrb	r3, [r7, #27]
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d068:	7efb      	ldrb	r3, [r7, #27]
 800d06a:	f023 0301 	bic.w	r3, r3, #1
 800d06e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d070:	7ebb      	ldrb	r3, [r7, #26]
 800d072:	f043 0301 	orr.w	r3, r3, #1
 800d076:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7f9 fae5 	bl	800664e <lwip_htonl>
 800d084:	4602      	mov	r2, r0
 800d086:	887b      	ldrh	r3, [r7, #2]
 800d088:	18d1      	adds	r1, r2, r3
 800d08a:	7eba      	ldrb	r2, [r7, #26]
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	460b      	mov	r3, r1
 800d092:	6939      	ldr	r1, [r7, #16]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff fa4f 	bl	800c538 <tcp_create_segment>
 800d09a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d063      	beq.n	800d16a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fa fed8 	bl	8007e5c <pbuf_clen>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0b6:	1a9b      	subs	r3, r3, r2
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	6858      	ldr	r0, [r3, #4]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	891a      	ldrh	r2, [r3, #8]
 800d0ca:	89bb      	ldrh	r3, [r7, #12]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	f7fa fcb5 	bl	8007a40 <pbuf_realloc>
  useg->len -= remainder;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	891a      	ldrh	r2, [r3, #8]
 800d0da:	89bb      	ldrh	r3, [r7, #12]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	899b      	ldrh	r3, [r3, #12]
 800d0ea:	b29c      	uxth	r4, r3
 800d0ec:	7efb      	ldrb	r3, [r7, #27]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f9 fa97 	bl	8006624 <lwip_htons>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	4322      	orrs	r2, r4
 800d100:	b292      	uxth	r2, r2
 800d102:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fa fea7 	bl	8007e5c <pbuf_clen>
 800d10e:	4603      	mov	r3, r0
 800d110:	461a      	mov	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d118:	4413      	add	r3, r2
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	4618      	mov	r0, r3
 800d128:	f7fa fe98 	bl	8007e5c <pbuf_clen>
 800d12c:	4603      	mov	r3, r0
 800d12e:	461a      	mov	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d136:	4413      	add	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d103      	bne.n	800d15e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	e016      	b.n	800d190 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d162:	bf00      	nop
 800d164:	e002      	b.n	800d16c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d166:	bf00      	nop
 800d168:	e000      	b.n	800d16c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d16a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d006      	beq.n	800d180 <tcp_split_unsent_seg+0x25c>
 800d172:	4b09      	ldr	r3, [pc, #36]	; (800d198 <tcp_split_unsent_seg+0x274>)
 800d174:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d178:	490d      	ldr	r1, [pc, #52]	; (800d1b0 <tcp_split_unsent_seg+0x28c>)
 800d17a:	4809      	ldr	r0, [pc, #36]	; (800d1a0 <tcp_split_unsent_seg+0x27c>)
 800d17c:	f003 ff98 	bl	80110b0 <iprintf>
  if (p != NULL) {
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d186:	6938      	ldr	r0, [r7, #16]
 800d188:	f7fa fde0 	bl	8007d4c <pbuf_free>
  }

  return ERR_MEM;
 800d18c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d190:	4618      	mov	r0, r3
 800d192:	3724      	adds	r7, #36	; 0x24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd90      	pop	{r4, r7, pc}
 800d198:	08013864 	.word	0x08013864
 800d19c:	08013bf8 	.word	0x08013bf8
 800d1a0:	080138b8 	.word	0x080138b8
 800d1a4:	08013c1c 	.word	0x08013c1c
 800d1a8:	08013c40 	.word	0x08013c40
 800d1ac:	08013c50 	.word	0x08013c50
 800d1b0:	08013c60 	.word	0x08013c60

0800d1b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d1b4:	b590      	push	{r4, r7, lr}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <tcp_send_fin+0x1c>
 800d1c2:	4b21      	ldr	r3, [pc, #132]	; (800d248 <tcp_send_fin+0x94>)
 800d1c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d1c8:	4920      	ldr	r1, [pc, #128]	; (800d24c <tcp_send_fin+0x98>)
 800d1ca:	4821      	ldr	r0, [pc, #132]	; (800d250 <tcp_send_fin+0x9c>)
 800d1cc:	f003 ff70 	bl	80110b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d02e      	beq.n	800d236 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	e002      	b.n	800d1e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1f8      	bne.n	800d1e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	899b      	ldrh	r3, [r3, #12]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f9 fa14 	bl	8006624 <lwip_htons>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	f003 0307 	and.w	r3, r3, #7
 800d204:	2b00      	cmp	r3, #0
 800d206:	d116      	bne.n	800d236 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	899b      	ldrh	r3, [r3, #12]
 800d20e:	b29c      	uxth	r4, r3
 800d210:	2001      	movs	r0, #1
 800d212:	f7f9 fa07 	bl	8006624 <lwip_htons>
 800d216:	4603      	mov	r3, r0
 800d218:	461a      	mov	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	4322      	orrs	r2, r4
 800d220:	b292      	uxth	r2, r2
 800d222:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	8b5b      	ldrh	r3, [r3, #26]
 800d228:	f043 0320 	orr.w	r3, r3, #32
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	e004      	b.n	800d240 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d236:	2101      	movs	r1, #1
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f80b 	bl	800d254 <tcp_enqueue_flags>
 800d23e:	4603      	mov	r3, r0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	bd90      	pop	{r4, r7, pc}
 800d248:	08013864 	.word	0x08013864
 800d24c:	08013c6c 	.word	0x08013c6c
 800d250:	080138b8 	.word	0x080138b8

0800d254 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08a      	sub	sp, #40	; 0x28
 800d258:	af02      	add	r7, sp, #8
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	f003 0303 	and.w	r3, r3, #3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <tcp_enqueue_flags+0x2c>
 800d272:	4b67      	ldr	r3, [pc, #412]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d274:	f240 4211 	movw	r2, #1041	; 0x411
 800d278:	4966      	ldr	r1, [pc, #408]	; (800d414 <tcp_enqueue_flags+0x1c0>)
 800d27a:	4867      	ldr	r0, [pc, #412]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d27c:	f003 ff18 	bl	80110b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d106      	bne.n	800d294 <tcp_enqueue_flags+0x40>
 800d286:	4b62      	ldr	r3, [pc, #392]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d288:	f240 4213 	movw	r2, #1043	; 0x413
 800d28c:	4963      	ldr	r1, [pc, #396]	; (800d41c <tcp_enqueue_flags+0x1c8>)
 800d28e:	4862      	ldr	r0, [pc, #392]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d290:	f003 ff0e 	bl	80110b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d294:	78fb      	ldrb	r3, [r7, #3]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d2a2:	7ffb      	ldrb	r3, [r7, #31]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	f003 0304 	and.w	r3, r3, #4
 800d2ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	2036      	movs	r0, #54	; 0x36
 800d2ba:	f7fa fa63 	bl	8007784 <pbuf_alloc>
 800d2be:	6138      	str	r0, [r7, #16]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d109      	bne.n	800d2da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	8b5b      	ldrh	r3, [r3, #26]
 800d2ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d8:	e095      	b.n	800d406 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	895a      	ldrh	r2, [r3, #10]
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d206      	bcs.n	800d2f4 <tcp_enqueue_flags+0xa0>
 800d2e6:	4b4a      	ldr	r3, [pc, #296]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d2e8:	f240 4239 	movw	r2, #1081	; 0x439
 800d2ec:	494c      	ldr	r1, [pc, #304]	; (800d420 <tcp_enqueue_flags+0x1cc>)
 800d2ee:	484a      	ldr	r0, [pc, #296]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d2f0:	f003 fede 	bl	80110b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d2f8:	78fa      	ldrb	r2, [r7, #3]
 800d2fa:	7ffb      	ldrb	r3, [r7, #31]
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	460b      	mov	r3, r1
 800d300:	6939      	ldr	r1, [r7, #16]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff f918 	bl	800c538 <tcp_create_segment>
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d109      	bne.n	800d324 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	8b5b      	ldrh	r3, [r3, #26]
 800d314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d318:	b29a      	uxth	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	e070      	b.n	800d406 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	f003 0303 	and.w	r3, r3, #3
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d006      	beq.n	800d33e <tcp_enqueue_flags+0xea>
 800d330:	4b37      	ldr	r3, [pc, #220]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d332:	f240 4242 	movw	r2, #1090	; 0x442
 800d336:	493b      	ldr	r1, [pc, #236]	; (800d424 <tcp_enqueue_flags+0x1d0>)
 800d338:	4837      	ldr	r0, [pc, #220]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d33a:	f003 feb9 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	891b      	ldrh	r3, [r3, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d006      	beq.n	800d354 <tcp_enqueue_flags+0x100>
 800d346:	4b32      	ldr	r3, [pc, #200]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d348:	f240 4243 	movw	r2, #1091	; 0x443
 800d34c:	4936      	ldr	r1, [pc, #216]	; (800d428 <tcp_enqueue_flags+0x1d4>)
 800d34e:	4832      	ldr	r0, [pc, #200]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d350:	f003 feae 	bl	80110b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	66da      	str	r2, [r3, #108]	; 0x6c
 800d362:	e00d      	b.n	800d380 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	e002      	b.n	800d372 <tcp_enqueue_flags+0x11e>
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	61bb      	str	r3, [r7, #24]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1f8      	bne.n	800d36c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	f003 0302 	and.w	r3, r3, #2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d104      	bne.n	800d39c <tcp_enqueue_flags+0x148>
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d3a6:	78fb      	ldrb	r3, [r7, #3]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d006      	beq.n	800d3be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	8b5b      	ldrh	r3, [r3, #26]
 800d3b4:	f043 0320 	orr.w	r3, r3, #32
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fa fd4a 	bl	8007e5c <pbuf_clen>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3d2:	4413      	add	r3, r2
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00e      	beq.n	800d404 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <tcp_enqueue_flags+0x1b0>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d106      	bne.n	800d404 <tcp_enqueue_flags+0x1b0>
 800d3f6:	4b06      	ldr	r3, [pc, #24]	; (800d410 <tcp_enqueue_flags+0x1bc>)
 800d3f8:	f240 4265 	movw	r2, #1125	; 0x465
 800d3fc:	490b      	ldr	r1, [pc, #44]	; (800d42c <tcp_enqueue_flags+0x1d8>)
 800d3fe:	4806      	ldr	r0, [pc, #24]	; (800d418 <tcp_enqueue_flags+0x1c4>)
 800d400:	f003 fe56 	bl	80110b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	08013864 	.word	0x08013864
 800d414:	08013c88 	.word	0x08013c88
 800d418:	080138b8 	.word	0x080138b8
 800d41c:	08013ce0 	.word	0x08013ce0
 800d420:	08013d00 	.word	0x08013d00
 800d424:	08013d3c 	.word	0x08013d3c
 800d428:	08013d54 	.word	0x08013d54
 800d42c:	08013d80 	.word	0x08013d80

0800d430 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d430:	b5b0      	push	{r4, r5, r7, lr}
 800d432:	b08a      	sub	sp, #40	; 0x28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <tcp_output+0x1c>
 800d43e:	4b8a      	ldr	r3, [pc, #552]	; (800d668 <tcp_output+0x238>)
 800d440:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d444:	4989      	ldr	r1, [pc, #548]	; (800d66c <tcp_output+0x23c>)
 800d446:	488a      	ldr	r0, [pc, #552]	; (800d670 <tcp_output+0x240>)
 800d448:	f003 fe32 	bl	80110b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d106      	bne.n	800d462 <tcp_output+0x32>
 800d454:	4b84      	ldr	r3, [pc, #528]	; (800d668 <tcp_output+0x238>)
 800d456:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d45a:	4986      	ldr	r1, [pc, #536]	; (800d674 <tcp_output+0x244>)
 800d45c:	4884      	ldr	r0, [pc, #528]	; (800d670 <tcp_output+0x240>)
 800d45e:	f003 fe27 	bl	80110b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d462:	4b85      	ldr	r3, [pc, #532]	; (800d678 <tcp_output+0x248>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d101      	bne.n	800d470 <tcp_output+0x40>
    return ERR_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	e1ce      	b.n	800d80e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d47c:	4293      	cmp	r3, r2
 800d47e:	bf28      	it	cs
 800d480:	4613      	movcs	r3, r2
 800d482:	b29b      	uxth	r3, r3
 800d484:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 81aa 	beq.w	800d7f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fdcb 	bl	800e03c <tcp_send_empty_ack>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	e1b1      	b.n	800d80e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff f824 	bl	800c500 <tcp_route>
 800d4b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <tcp_output+0x96>
    return ERR_RTE;
 800d4c0:	f06f 0303 	mvn.w	r3, #3
 800d4c4:	e1a3      	b.n	800d80e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d003      	beq.n	800d4d4 <tcp_output+0xa4>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d111      	bne.n	800d4f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <tcp_output+0xb0>
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	3304      	adds	r3, #4
 800d4de:	e000      	b.n	800d4e2 <tcp_output+0xb2>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <tcp_output+0xc0>
      return ERR_RTE;
 800d4ea:	f06f 0303 	mvn.w	r3, #3
 800d4ee:	e18e      	b.n	800d80e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f9 f8a5 	bl	800664e <lwip_htonl>
 800d504:	4602      	mov	r2, r0
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50e:	8912      	ldrh	r2, [r2, #8]
 800d510:	4413      	add	r3, r2
 800d512:	69ba      	ldr	r2, [r7, #24]
 800d514:	429a      	cmp	r2, r3
 800d516:	d227      	bcs.n	800d568 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d51e:	461a      	mov	r2, r3
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	4293      	cmp	r3, r2
 800d524:	d114      	bne.n	800d550 <tcp_output+0x120>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d110      	bne.n	800d550 <tcp_output+0x120>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10b      	bne.n	800d550 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	8b5b      	ldrh	r3, [r3, #26]
 800d554:	f003 0302 	and.w	r3, r3, #2
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 814d 	beq.w	800d7f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fd6c 	bl	800e03c <tcp_send_empty_ack>
 800d564:	4603      	mov	r3, r0
 800d566:	e152      	b.n	800d80e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d574:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 811c 	beq.w	800d7b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d57e:	e002      	b.n	800d586 <tcp_output+0x156>
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	623b      	str	r3, [r7, #32]
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f8      	bne.n	800d580 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d58e:	e112      	b.n	800d7b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	899b      	ldrh	r3, [r3, #12]
 800d596:	b29b      	uxth	r3, r3
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f9 f843 	bl	8006624 <lwip_htons>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d006      	beq.n	800d5b8 <tcp_output+0x188>
 800d5aa:	4b2f      	ldr	r3, [pc, #188]	; (800d668 <tcp_output+0x238>)
 800d5ac:	f240 5236 	movw	r2, #1334	; 0x536
 800d5b0:	4932      	ldr	r1, [pc, #200]	; (800d67c <tcp_output+0x24c>)
 800d5b2:	482f      	ldr	r0, [pc, #188]	; (800d670 <tcp_output+0x240>)
 800d5b4:	f003 fd7c 	bl	80110b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01f      	beq.n	800d600 <tcp_output+0x1d0>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	8b5b      	ldrh	r3, [r3, #26]
 800d5c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d119      	bne.n	800d600 <tcp_output+0x1d0>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00b      	beq.n	800d5ec <tcp_output+0x1bc>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d110      	bne.n	800d600 <tcp_output+0x1d0>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e2:	891a      	ldrh	r2, [r3, #8]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d209      	bcs.n	800d600 <tcp_output+0x1d0>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d004      	beq.n	800d600 <tcp_output+0x1d0>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5fc:	2b08      	cmp	r3, #8
 800d5fe:	d901      	bls.n	800d604 <tcp_output+0x1d4>
 800d600:	2301      	movs	r3, #1
 800d602:	e000      	b.n	800d606 <tcp_output+0x1d6>
 800d604:	2300      	movs	r3, #0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8b5b      	ldrh	r3, [r3, #26]
 800d60e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d612:	2b00      	cmp	r3, #0
 800d614:	f000 80e4 	beq.w	800d7e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d00d      	beq.n	800d63c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	899b      	ldrh	r3, [r3, #12]
 800d626:	b29c      	uxth	r4, r3
 800d628:	2010      	movs	r0, #16
 800d62a:	f7f8 fffb 	bl	8006624 <lwip_htons>
 800d62e:	4603      	mov	r3, r0
 800d630:	461a      	mov	r2, r3
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	4322      	orrs	r2, r4
 800d638:	b292      	uxth	r2, r2
 800d63a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d642:	f000 f909 	bl	800d858 <tcp_output_segment>
 800d646:	4603      	mov	r3, r0
 800d648:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d016      	beq.n	800d680 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	8b5b      	ldrh	r3, [r3, #26]
 800d656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	835a      	strh	r2, [r3, #26]
      return err;
 800d660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d664:	e0d3      	b.n	800d80e <tcp_output+0x3de>
 800d666:	bf00      	nop
 800d668:	08013864 	.word	0x08013864
 800d66c:	08013da8 	.word	0x08013da8
 800d670:	080138b8 	.word	0x080138b8
 800d674:	08013dc0 	.word	0x08013dc0
 800d678:	20008c74 	.word	0x20008c74
 800d67c:	08013de8 	.word	0x08013de8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7d1b      	ldrb	r3, [r3, #20]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d006      	beq.n	800d69e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	8b5b      	ldrh	r3, [r3, #26]
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	b29a      	uxth	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7f8 ffd2 	bl	800664e <lwip_htonl>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	891b      	ldrh	r3, [r3, #8]
 800d6b0:	461d      	mov	r5, r3
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	899b      	ldrh	r3, [r3, #12]
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f8 ffb2 	bl	8006624 <lwip_htons>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	f003 0303 	and.w	r3, r3, #3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <tcp_output+0x2a0>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e000      	b.n	800d6d2 <tcp_output+0x2a2>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	442b      	add	r3, r5
 800d6d4:	4423      	add	r3, r4
 800d6d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	da02      	bge.n	800d6ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	891b      	ldrh	r3, [r3, #8]
 800d6ee:	461c      	mov	r4, r3
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	899b      	ldrh	r3, [r3, #12]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f8 ff93 	bl	8006624 <lwip_htons>
 800d6fe:	4603      	mov	r3, r0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <tcp_output+0x2de>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e000      	b.n	800d710 <tcp_output+0x2e0>
 800d70e:	2300      	movs	r3, #0
 800d710:	4423      	add	r3, r4
 800d712:	2b00      	cmp	r3, #0
 800d714:	d049      	beq.n	800d7aa <tcp_output+0x37a>
      seg->next = NULL;
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d720:	2b00      	cmp	r3, #0
 800d722:	d105      	bne.n	800d730 <tcp_output+0x300>
        pcb->unacked = seg;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d728:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	623b      	str	r3, [r7, #32]
 800d72e:	e03f      	b.n	800d7b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	4618      	mov	r0, r3
 800d738:	f7f8 ff89 	bl	800664e <lwip_htonl>
 800d73c:	4604      	mov	r4, r0
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4618      	mov	r0, r3
 800d746:	f7f8 ff82 	bl	800664e <lwip_htonl>
 800d74a:	4603      	mov	r3, r0
 800d74c:	1ae3      	subs	r3, r4, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	da24      	bge.n	800d79c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3370      	adds	r3, #112	; 0x70
 800d756:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d758:	e002      	b.n	800d760 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d011      	beq.n	800d78c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	4618      	mov	r0, r3
 800d772:	f7f8 ff6c 	bl	800664e <lwip_htonl>
 800d776:	4604      	mov	r4, r0
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f8 ff65 	bl	800664e <lwip_htonl>
 800d784:	4603      	mov	r3, r0
 800d786:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dbe6      	blt.n	800d75a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	e009      	b.n	800d7b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	623b      	str	r3, [r7, #32]
 800d7a8:	e002      	b.n	800d7b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d7aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7ac:	f7fb fefb 	bl	80095a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d012      	beq.n	800d7e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f8 ff43 	bl	800664e <lwip_htonl>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d2:	8912      	ldrh	r2, [r2, #8]
 800d7d4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	f4bf aed9 	bcs.w	800d590 <tcp_output+0x160>
 800d7de:	e000      	b.n	800d7e2 <tcp_output+0x3b2>
      break;
 800d7e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d108      	bne.n	800d7fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d7f2:	e004      	b.n	800d7fe <tcp_output+0x3ce>
    goto output_done;
 800d7f4:	bf00      	nop
 800d7f6:	e002      	b.n	800d7fe <tcp_output+0x3ce>
    goto output_done;
 800d7f8:	bf00      	nop
 800d7fa:	e000      	b.n	800d7fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d7fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8b5b      	ldrh	r3, [r3, #26]
 800d802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d806:	b29a      	uxth	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3728      	adds	r7, #40	; 0x28
 800d812:	46bd      	mov	sp, r7
 800d814:	bdb0      	pop	{r4, r5, r7, pc}
 800d816:	bf00      	nop

0800d818 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <tcp_output_segment_busy+0x1c>
 800d826:	4b09      	ldr	r3, [pc, #36]	; (800d84c <tcp_output_segment_busy+0x34>)
 800d828:	f240 529a 	movw	r2, #1434	; 0x59a
 800d82c:	4908      	ldr	r1, [pc, #32]	; (800d850 <tcp_output_segment_busy+0x38>)
 800d82e:	4809      	ldr	r0, [pc, #36]	; (800d854 <tcp_output_segment_busy+0x3c>)
 800d830:	f003 fc3e 	bl	80110b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	7b9b      	ldrb	r3, [r3, #14]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d001      	beq.n	800d842 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d83e:	2301      	movs	r3, #1
 800d840:	e000      	b.n	800d844 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	08013864 	.word	0x08013864
 800d850:	08013e00 	.word	0x08013e00
 800d854:	080138b8 	.word	0x080138b8

0800d858 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d858:	b5b0      	push	{r4, r5, r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af04      	add	r7, sp, #16
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <tcp_output_segment+0x20>
 800d86a:	4b64      	ldr	r3, [pc, #400]	; (800d9fc <tcp_output_segment+0x1a4>)
 800d86c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d870:	4963      	ldr	r1, [pc, #396]	; (800da00 <tcp_output_segment+0x1a8>)
 800d872:	4864      	ldr	r0, [pc, #400]	; (800da04 <tcp_output_segment+0x1ac>)
 800d874:	f003 fc1c 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <tcp_output_segment+0x34>
 800d87e:	4b5f      	ldr	r3, [pc, #380]	; (800d9fc <tcp_output_segment+0x1a4>)
 800d880:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d884:	4960      	ldr	r1, [pc, #384]	; (800da08 <tcp_output_segment+0x1b0>)
 800d886:	485f      	ldr	r0, [pc, #380]	; (800da04 <tcp_output_segment+0x1ac>)
 800d888:	f003 fc12 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d106      	bne.n	800d8a0 <tcp_output_segment+0x48>
 800d892:	4b5a      	ldr	r3, [pc, #360]	; (800d9fc <tcp_output_segment+0x1a4>)
 800d894:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d898:	495c      	ldr	r1, [pc, #368]	; (800da0c <tcp_output_segment+0x1b4>)
 800d89a:	485a      	ldr	r0, [pc, #360]	; (800da04 <tcp_output_segment+0x1ac>)
 800d89c:	f003 fc08 	bl	80110b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff ffb9 	bl	800d818 <tcp_output_segment_busy>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d001      	beq.n	800d8b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e0a1      	b.n	800d9f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	68dc      	ldr	r4, [r3, #12]
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	f7f8 fec8 	bl	800664e <lwip_htonl>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68dc      	ldr	r4, [r3, #12]
 800d8ca:	4610      	mov	r0, r2
 800d8cc:	f7f8 feaa 	bl	8006624 <lwip_htons>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d8dc:	441a      	add	r2, r3
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	3314      	adds	r3, #20
 800d8e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	7a9b      	ldrb	r3, [r3, #10]
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d015      	beq.n	800d922 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	6879      	ldr	r1, [r7, #4]
 800d8fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d902:	f7fc fa33 	bl	8009d6c <tcp_eff_send_mss_netif>
 800d906:	4603      	mov	r3, r0
 800d908:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d90a:	8b7b      	ldrh	r3, [r7, #26]
 800d90c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d910:	4618      	mov	r0, r3
 800d912:	f7f8 fe9c 	bl	800664e <lwip_htonl>
 800d916:	4602      	mov	r2, r0
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	3304      	adds	r3, #4
 800d920:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d928:	2b00      	cmp	r3, #0
 800d92a:	da02      	bge.n	800d932 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2200      	movs	r2, #0
 800d930:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10c      	bne.n	800d954 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d93a:	4b35      	ldr	r3, [pc, #212]	; (800da10 <tcp_output_segment+0x1b8>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	4618      	mov	r0, r3
 800d94a:	f7f8 fe80 	bl	800664e <lwip_htonl>
 800d94e:	4602      	mov	r2, r0
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	8959      	ldrh	r1, [r3, #10]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	8b3a      	ldrh	r2, [r7, #24]
 800d96e:	1a8a      	subs	r2, r1, r2
 800d970:	b292      	uxth	r2, r2
 800d972:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	8919      	ldrh	r1, [r3, #8]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	8b3a      	ldrh	r2, [r7, #24]
 800d980:	1a8a      	subs	r2, r1, r2
 800d982:	b292      	uxth	r2, r2
 800d984:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	68d2      	ldr	r2, [r2, #12]
 800d98e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	741a      	strb	r2, [r3, #16]
 800d998:	2200      	movs	r2, #0
 800d99a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	68da      	ldr	r2, [r3, #12]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	7a9b      	ldrb	r3, [r3, #10]
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <tcp_output_segment+0x158>
 800d9ac:	2318      	movs	r3, #24
 800d9ae:	e000      	b.n	800d9b2 <tcp_output_segment+0x15a>
 800d9b0:	2314      	movs	r3, #20
 800d9b2:	4413      	add	r3, r2
 800d9b4:	69fa      	ldr	r2, [r7, #28]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d006      	beq.n	800d9c8 <tcp_output_segment+0x170>
 800d9ba:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <tcp_output_segment+0x1a4>)
 800d9bc:	f240 621c 	movw	r2, #1564	; 0x61c
 800d9c0:	4914      	ldr	r1, [pc, #80]	; (800da14 <tcp_output_segment+0x1bc>)
 800d9c2:	4810      	ldr	r0, [pc, #64]	; (800da04 <tcp_output_segment+0x1ac>)
 800d9c4:	f003 fb74 	bl	80110b0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6858      	ldr	r0, [r3, #4]
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	1d1c      	adds	r4, r3, #4
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	7add      	ldrb	r5, [r3, #11]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	7a9b      	ldrb	r3, [r3, #10]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	9202      	str	r2, [sp, #8]
 800d9de:	2206      	movs	r2, #6
 800d9e0:	9201      	str	r2, [sp, #4]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	f002 fa34 	bl	800fe54 <ip4_output_if>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d9f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3720      	adds	r7, #32
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d9fc:	08013864 	.word	0x08013864
 800da00:	08013e28 	.word	0x08013e28
 800da04:	080138b8 	.word	0x080138b8
 800da08:	08013e48 	.word	0x08013e48
 800da0c:	08013e68 	.word	0x08013e68
 800da10:	20008c28 	.word	0x20008c28
 800da14:	08013e8c 	.word	0x08013e8c

0800da18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800da18:	b5b0      	push	{r4, r5, r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <tcp_rexmit_rto_prepare+0x1c>
 800da26:	4b31      	ldr	r3, [pc, #196]	; (800daec <tcp_rexmit_rto_prepare+0xd4>)
 800da28:	f240 6263 	movw	r2, #1635	; 0x663
 800da2c:	4930      	ldr	r1, [pc, #192]	; (800daf0 <tcp_rexmit_rto_prepare+0xd8>)
 800da2e:	4831      	ldr	r0, [pc, #196]	; (800daf4 <tcp_rexmit_rto_prepare+0xdc>)
 800da30:	f003 fb3e 	bl	80110b0 <iprintf>

  if (pcb->unacked == NULL) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d102      	bne.n	800da42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800da3c:	f06f 0305 	mvn.w	r3, #5
 800da40:	e050      	b.n	800dae4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	e00b      	b.n	800da62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7ff fee4 	bl	800d818 <tcp_output_segment_busy>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800da56:	f06f 0305 	mvn.w	r3, #5
 800da5a:	e043      	b.n	800dae4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1ef      	bne.n	800da4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7ff fed4 	bl	800d818 <tcp_output_segment_busy>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800da76:	f06f 0305 	mvn.w	r3, #5
 800da7a:	e033      	b.n	800dae4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	8b5b      	ldrh	r3, [r3, #26]
 800da96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7f8 fdd1 	bl	800664e <lwip_htonl>
 800daac:	4604      	mov	r4, r0
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	891b      	ldrh	r3, [r3, #8]
 800dab2:	461d      	mov	r5, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	899b      	ldrh	r3, [r3, #12]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f8 fdb1 	bl	8006624 <lwip_htons>
 800dac2:	4603      	mov	r3, r0
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	f003 0303 	and.w	r3, r3, #3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <tcp_rexmit_rto_prepare+0xba>
 800dace:	2301      	movs	r3, #1
 800dad0:	e000      	b.n	800dad4 <tcp_rexmit_rto_prepare+0xbc>
 800dad2:	2300      	movs	r3, #0
 800dad4:	442b      	add	r3, r5
 800dad6:	18e2      	adds	r2, r4, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bdb0      	pop	{r4, r5, r7, pc}
 800daec:	08013864 	.word	0x08013864
 800daf0:	08013ea0 	.word	0x08013ea0
 800daf4:	080138b8 	.word	0x080138b8

0800daf8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <tcp_rexmit_rto_commit+0x1c>
 800db06:	4b0d      	ldr	r3, [pc, #52]	; (800db3c <tcp_rexmit_rto_commit+0x44>)
 800db08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800db0c:	490c      	ldr	r1, [pc, #48]	; (800db40 <tcp_rexmit_rto_commit+0x48>)
 800db0e:	480d      	ldr	r0, [pc, #52]	; (800db44 <tcp_rexmit_rto_commit+0x4c>)
 800db10:	f003 face 	bl	80110b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db1a:	2bff      	cmp	r3, #255	; 0xff
 800db1c:	d007      	beq.n	800db2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db24:	3301      	adds	r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff fc7e 	bl	800d430 <tcp_output>
}
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	08013864 	.word	0x08013864
 800db40:	08013ec4 	.word	0x08013ec4
 800db44:	080138b8 	.word	0x080138b8

0800db48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <tcp_rexmit_rto+0x1c>
 800db56:	4b0a      	ldr	r3, [pc, #40]	; (800db80 <tcp_rexmit_rto+0x38>)
 800db58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800db5c:	4909      	ldr	r1, [pc, #36]	; (800db84 <tcp_rexmit_rto+0x3c>)
 800db5e:	480a      	ldr	r0, [pc, #40]	; (800db88 <tcp_rexmit_rto+0x40>)
 800db60:	f003 faa6 	bl	80110b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff57 	bl	800da18 <tcp_rexmit_rto_prepare>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff ffc1 	bl	800daf8 <tcp_rexmit_rto_commit>
  }
}
 800db76:	bf00      	nop
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	08013864 	.word	0x08013864
 800db84:	08013ee8 	.word	0x08013ee8
 800db88:	080138b8 	.word	0x080138b8

0800db8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <tcp_rexmit+0x1c>
 800db9a:	4b2f      	ldr	r3, [pc, #188]	; (800dc58 <tcp_rexmit+0xcc>)
 800db9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800dba0:	492e      	ldr	r1, [pc, #184]	; (800dc5c <tcp_rexmit+0xd0>)
 800dba2:	482f      	ldr	r0, [pc, #188]	; (800dc60 <tcp_rexmit+0xd4>)
 800dba4:	f003 fa84 	bl	80110b0 <iprintf>

  if (pcb->unacked == NULL) {
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800dbb0:	f06f 0305 	mvn.w	r3, #5
 800dbb4:	e04c      	b.n	800dc50 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800dbbc:	68b8      	ldr	r0, [r7, #8]
 800dbbe:	f7ff fe2b 	bl	800d818 <tcp_output_segment_busy>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dbc8:	f06f 0305 	mvn.w	r3, #5
 800dbcc:	e040      	b.n	800dc50 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	336c      	adds	r3, #108	; 0x6c
 800dbda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbdc:	e002      	b.n	800dbe4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d011      	beq.n	800dc10 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7f8 fd2a 	bl	800664e <lwip_htonl>
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7f8 fd23 	bl	800664e <lwip_htonl>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dbe6      	blt.n	800dbde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	68ba      	ldr	r2, [r7, #8]
 800dc1c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d103      	bne.n	800dc2e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc34:	2bff      	cmp	r3, #255	; 0xff
 800dc36:	d007      	beq.n	800dc48 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc3e:	3301      	adds	r3, #1
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd90      	pop	{r4, r7, pc}
 800dc58:	08013864 	.word	0x08013864
 800dc5c:	08013f04 	.word	0x08013f04
 800dc60:	080138b8 	.word	0x080138b8

0800dc64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <tcp_rexmit_fast+0x1c>
 800dc72:	4b2a      	ldr	r3, [pc, #168]	; (800dd1c <tcp_rexmit_fast+0xb8>)
 800dc74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dc78:	4929      	ldr	r1, [pc, #164]	; (800dd20 <tcp_rexmit_fast+0xbc>)
 800dc7a:	482a      	ldr	r0, [pc, #168]	; (800dd24 <tcp_rexmit_fast+0xc0>)
 800dc7c:	f003 fa18 	bl	80110b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d045      	beq.n	800dd14 <tcp_rexmit_fast+0xb0>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	8b5b      	ldrh	r3, [r3, #26]
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d13f      	bne.n	800dd14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7ff ff79 	bl	800db8c <tcp_rexmit>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d139      	bne.n	800dd14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcac:	4293      	cmp	r3, r2
 800dcae:	bf28      	it	cs
 800dcb0:	4613      	movcs	r3, r2
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	da00      	bge.n	800dcba <tcp_rexmit_fast+0x56>
 800dcb8:	3301      	adds	r3, #1
 800dcba:	105b      	asrs	r3, r3, #1
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dcca:	461a      	mov	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d206      	bcs.n	800dce4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcda:	005b      	lsls	r3, r3, #1
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcee:	4619      	mov	r1, r3
 800dcf0:	0049      	lsls	r1, r1, #1
 800dcf2:	440b      	add	r3, r1
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4413      	add	r3, r2
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	8b5b      	ldrh	r3, [r3, #26]
 800dd04:	f043 0304 	orr.w	r3, r3, #4
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	08013864 	.word	0x08013864
 800dd20:	08013f1c 	.word	0x08013f1c
 800dd24:	080138b8 	.word	0x080138b8

0800dd28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	607b      	str	r3, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	817b      	strh	r3, [r7, #10]
 800dd36:	4613      	mov	r3, r2
 800dd38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dd3a:	897a      	ldrh	r2, [r7, #10]
 800dd3c:	893b      	ldrh	r3, [r7, #8]
 800dd3e:	4413      	add	r3, r2
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	3314      	adds	r3, #20
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	2022      	movs	r0, #34	; 0x22
 800dd4e:	f7f9 fd19 	bl	8007784 <pbuf_alloc>
 800dd52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d04d      	beq.n	800ddf6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dd5a:	897b      	ldrh	r3, [r7, #10]
 800dd5c:	3313      	adds	r3, #19
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	8952      	ldrh	r2, [r2, #10]
 800dd62:	4293      	cmp	r3, r2
 800dd64:	db06      	blt.n	800dd74 <tcp_output_alloc_header_common+0x4c>
 800dd66:	4b26      	ldr	r3, [pc, #152]	; (800de00 <tcp_output_alloc_header_common+0xd8>)
 800dd68:	f240 7223 	movw	r2, #1827	; 0x723
 800dd6c:	4925      	ldr	r1, [pc, #148]	; (800de04 <tcp_output_alloc_header_common+0xdc>)
 800dd6e:	4826      	ldr	r0, [pc, #152]	; (800de08 <tcp_output_alloc_header_common+0xe0>)
 800dd70:	f003 f99e 	bl	80110b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dd7a:	8c3b      	ldrh	r3, [r7, #32]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7f8 fc51 	bl	8006624 <lwip_htons>
 800dd82:	4603      	mov	r3, r0
 800dd84:	461a      	mov	r2, r3
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dd8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7f8 fc49 	bl	8006624 <lwip_htons>
 800dd92:	4603      	mov	r3, r0
 800dd94:	461a      	mov	r2, r3
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7f8 fc54 	bl	800664e <lwip_htonl>
 800dda6:	4602      	mov	r2, r0
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ddac:	897b      	ldrh	r3, [r7, #10]
 800ddae:	089b      	lsrs	r3, r3, #2
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	3305      	adds	r3, #5
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	031b      	lsls	r3, r3, #12
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f8 fc2d 	bl	8006624 <lwip_htons>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ddd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f8 fc25 	bl	8006624 <lwip_htons>
 800ddda:	4603      	mov	r3, r0
 800dddc:	461a      	mov	r2, r3
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2200      	movs	r2, #0
 800dde6:	741a      	strb	r2, [r3, #16]
 800dde8:	2200      	movs	r2, #0
 800ddea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	749a      	strb	r2, [r3, #18]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ddf6:	697b      	ldr	r3, [r7, #20]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3718      	adds	r7, #24
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	08013864 	.word	0x08013864
 800de04:	08013f3c 	.word	0x08013f3c
 800de08:	080138b8 	.word	0x080138b8

0800de0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800de0c:	b5b0      	push	{r4, r5, r7, lr}
 800de0e:	b08a      	sub	sp, #40	; 0x28
 800de10:	af04      	add	r7, sp, #16
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	607b      	str	r3, [r7, #4]
 800de16:	460b      	mov	r3, r1
 800de18:	817b      	strh	r3, [r7, #10]
 800de1a:	4613      	mov	r3, r2
 800de1c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d106      	bne.n	800de32 <tcp_output_alloc_header+0x26>
 800de24:	4b15      	ldr	r3, [pc, #84]	; (800de7c <tcp_output_alloc_header+0x70>)
 800de26:	f240 7242 	movw	r2, #1858	; 0x742
 800de2a:	4915      	ldr	r1, [pc, #84]	; (800de80 <tcp_output_alloc_header+0x74>)
 800de2c:	4815      	ldr	r0, [pc, #84]	; (800de84 <tcp_output_alloc_header+0x78>)
 800de2e:	f003 f93f 	bl	80110b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	8adb      	ldrh	r3, [r3, #22]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	8b12      	ldrh	r2, [r2, #24]
 800de3e:	68f9      	ldr	r1, [r7, #12]
 800de40:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800de42:	893d      	ldrh	r5, [r7, #8]
 800de44:	897c      	ldrh	r4, [r7, #10]
 800de46:	9103      	str	r1, [sp, #12]
 800de48:	2110      	movs	r1, #16
 800de4a:	9102      	str	r1, [sp, #8]
 800de4c:	9201      	str	r2, [sp, #4]
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	462a      	mov	r2, r5
 800de54:	4621      	mov	r1, r4
 800de56:	f7ff ff67 	bl	800dd28 <tcp_output_alloc_header_common>
 800de5a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d006      	beq.n	800de70 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800de6a:	441a      	add	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800de70:	697b      	ldr	r3, [r7, #20]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bdb0      	pop	{r4, r5, r7, pc}
 800de7a:	bf00      	nop
 800de7c:	08013864 	.word	0x08013864
 800de80:	08013f6c 	.word	0x08013f6c
 800de84:	080138b8 	.word	0x080138b8

0800de88 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4611      	mov	r1, r2
 800de94:	461a      	mov	r2, r3
 800de96:	460b      	mov	r3, r1
 800de98:	71fb      	strb	r3, [r7, #7]
 800de9a:	4613      	mov	r3, r2
 800de9c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d106      	bne.n	800deb6 <tcp_output_fill_options+0x2e>
 800dea8:	4b12      	ldr	r3, [pc, #72]	; (800def4 <tcp_output_fill_options+0x6c>)
 800deaa:	f240 7256 	movw	r2, #1878	; 0x756
 800deae:	4912      	ldr	r1, [pc, #72]	; (800def8 <tcp_output_fill_options+0x70>)
 800deb0:	4812      	ldr	r0, [pc, #72]	; (800defc <tcp_output_fill_options+0x74>)
 800deb2:	f003 f8fd 	bl	80110b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	3314      	adds	r3, #20
 800dec0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dec2:	8bfb      	ldrh	r3, [r7, #30]
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	461a      	mov	r2, r3
 800dec8:	79fb      	ldrb	r3, [r7, #7]
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	4413      	add	r3, r2
 800ded2:	3314      	adds	r3, #20
 800ded4:	69ba      	ldr	r2, [r7, #24]
 800ded6:	4413      	add	r3, r2
 800ded8:	697a      	ldr	r2, [r7, #20]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d006      	beq.n	800deec <tcp_output_fill_options+0x64>
 800dede:	4b05      	ldr	r3, [pc, #20]	; (800def4 <tcp_output_fill_options+0x6c>)
 800dee0:	f240 7275 	movw	r2, #1909	; 0x775
 800dee4:	4906      	ldr	r1, [pc, #24]	; (800df00 <tcp_output_fill_options+0x78>)
 800dee6:	4805      	ldr	r0, [pc, #20]	; (800defc <tcp_output_fill_options+0x74>)
 800dee8:	f003 f8e2 	bl	80110b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800deec:	bf00      	nop
 800deee:	3720      	adds	r7, #32
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08013864 	.word	0x08013864
 800def8:	08013f94 	.word	0x08013f94
 800defc:	080138b8 	.word	0x080138b8
 800df00:	08013e8c 	.word	0x08013e8c

0800df04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08a      	sub	sp, #40	; 0x28
 800df08:	af04      	add	r7, sp, #16
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <tcp_output_control_segment+0x22>
 800df18:	4b1c      	ldr	r3, [pc, #112]	; (800df8c <tcp_output_control_segment+0x88>)
 800df1a:	f240 7287 	movw	r2, #1927	; 0x787
 800df1e:	491c      	ldr	r1, [pc, #112]	; (800df90 <tcp_output_control_segment+0x8c>)
 800df20:	481c      	ldr	r0, [pc, #112]	; (800df94 <tcp_output_control_segment+0x90>)
 800df22:	f003 f8c5 	bl	80110b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7fe fae8 	bl	800c500 <tcp_route>
 800df30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800df38:	23fc      	movs	r3, #252	; 0xfc
 800df3a:	75fb      	strb	r3, [r7, #23]
 800df3c:	e01c      	b.n	800df78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d006      	beq.n	800df52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	7adb      	ldrb	r3, [r3, #11]
 800df48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	7a9b      	ldrb	r3, [r3, #10]
 800df4e:	757b      	strb	r3, [r7, #21]
 800df50:	e003      	b.n	800df5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800df52:	23ff      	movs	r3, #255	; 0xff
 800df54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800df5a:	7dba      	ldrb	r2, [r7, #22]
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	9302      	str	r3, [sp, #8]
 800df60:	2306      	movs	r3, #6
 800df62:	9301      	str	r3, [sp, #4]
 800df64:	7d7b      	ldrb	r3, [r7, #21]
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	4613      	mov	r3, r2
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	68b8      	ldr	r0, [r7, #8]
 800df70:	f001 ff70 	bl	800fe54 <ip4_output_if>
 800df74:	4603      	mov	r3, r0
 800df76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800df78:	68b8      	ldr	r0, [r7, #8]
 800df7a:	f7f9 fee7 	bl	8007d4c <pbuf_free>
  return err;
 800df7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	08013864 	.word	0x08013864
 800df90:	08013fbc 	.word	0x08013fbc
 800df94:	080138b8 	.word	0x080138b8

0800df98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800df98:	b590      	push	{r4, r7, lr}
 800df9a:	b08b      	sub	sp, #44	; 0x2c
 800df9c:	af04      	add	r7, sp, #16
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d106      	bne.n	800dfba <tcp_rst+0x22>
 800dfac:	4b1f      	ldr	r3, [pc, #124]	; (800e02c <tcp_rst+0x94>)
 800dfae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dfb2:	491f      	ldr	r1, [pc, #124]	; (800e030 <tcp_rst+0x98>)
 800dfb4:	481f      	ldr	r0, [pc, #124]	; (800e034 <tcp_rst+0x9c>)
 800dfb6:	f003 f87b 	bl	80110b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d106      	bne.n	800dfce <tcp_rst+0x36>
 800dfc0:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <tcp_rst+0x94>)
 800dfc2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dfc6:	491c      	ldr	r1, [pc, #112]	; (800e038 <tcp_rst+0xa0>)
 800dfc8:	481a      	ldr	r0, [pc, #104]	; (800e034 <tcp_rst+0x9c>)
 800dfca:	f003 f871 	bl	80110b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfce:	2300      	movs	r3, #0
 800dfd0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dfd2:	f246 0308 	movw	r3, #24584	; 0x6008
 800dfd6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	b29c      	uxth	r4, r3
 800dfdc:	68b8      	ldr	r0, [r7, #8]
 800dfde:	f7f8 fb36 	bl	800664e <lwip_htonl>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	8abb      	ldrh	r3, [r7, #20]
 800dfe6:	9303      	str	r3, [sp, #12]
 800dfe8:	2314      	movs	r3, #20
 800dfea:	9302      	str	r3, [sp, #8]
 800dfec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4613      	mov	r3, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	4621      	mov	r1, r4
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7ff fe94 	bl	800dd28 <tcp_output_alloc_header_common>
 800e000:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00c      	beq.n	800e022 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e008:	7dfb      	ldrb	r3, [r7, #23]
 800e00a:	2200      	movs	r2, #0
 800e00c:	6939      	ldr	r1, [r7, #16]
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7ff ff3a 	bl	800de88 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	6939      	ldr	r1, [r7, #16]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff ff72 	bl	800df04 <tcp_output_control_segment>
 800e020:	e000      	b.n	800e024 <tcp_rst+0x8c>
    return;
 800e022:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e024:	371c      	adds	r7, #28
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	08013864 	.word	0x08013864
 800e030:	08013fe8 	.word	0x08013fe8
 800e034:	080138b8 	.word	0x080138b8
 800e038:	08014004 	.word	0x08014004

0800e03c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e03c:	b590      	push	{r4, r7, lr}
 800e03e:	b087      	sub	sp, #28
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d106      	bne.n	800e060 <tcp_send_empty_ack+0x24>
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <tcp_send_empty_ack+0xb8>)
 800e054:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e058:	4927      	ldr	r1, [pc, #156]	; (800e0f8 <tcp_send_empty_ack+0xbc>)
 800e05a:	4828      	ldr	r0, [pc, #160]	; (800e0fc <tcp_send_empty_ack+0xc0>)
 800e05c:	f003 f828 	bl	80110b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	b2db      	uxtb	r3, r3
 800e066:	f003 0304 	and.w	r3, r3, #4
 800e06a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e06c:	7d7b      	ldrb	r3, [r7, #21]
 800e06e:	b29c      	uxth	r4, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e074:	4618      	mov	r0, r3
 800e076:	f7f8 faea 	bl	800664e <lwip_htonl>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2200      	movs	r2, #0
 800e07e:	4621      	mov	r1, r4
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff fec3 	bl	800de0c <tcp_output_alloc_header>
 800e086:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d109      	bne.n	800e0a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	8b5b      	ldrh	r3, [r3, #26]
 800e092:	f043 0303 	orr.w	r3, r3, #3
 800e096:	b29a      	uxth	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e09c:	f06f 0301 	mvn.w	r3, #1
 800e0a0:	e023      	b.n	800e0ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e0a2:	7dbb      	ldrb	r3, [r7, #22]
 800e0a4:	7dfa      	ldrb	r2, [r7, #23]
 800e0a6:	6939      	ldr	r1, [r7, #16]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff feed 	bl	800de88 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	6939      	ldr	r1, [r7, #16]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7ff ff24 	bl	800df04 <tcp_output_control_segment>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d007      	beq.n	800e0d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	8b5b      	ldrh	r3, [r3, #26]
 800e0cc:	f043 0303 	orr.w	r3, r3, #3
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	835a      	strh	r2, [r3, #26]
 800e0d6:	e006      	b.n	800e0e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8b5b      	ldrh	r3, [r3, #26]
 800e0dc:	f023 0303 	bic.w	r3, r3, #3
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd90      	pop	{r4, r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	08013864 	.word	0x08013864
 800e0f8:	08014020 	.word	0x08014020
 800e0fc:	080138b8 	.word	0x080138b8

0800e100 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b087      	sub	sp, #28
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e108:	2300      	movs	r3, #0
 800e10a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <tcp_keepalive+0x20>
 800e112:	4b18      	ldr	r3, [pc, #96]	; (800e174 <tcp_keepalive+0x74>)
 800e114:	f640 0224 	movw	r2, #2084	; 0x824
 800e118:	4917      	ldr	r1, [pc, #92]	; (800e178 <tcp_keepalive+0x78>)
 800e11a:	4818      	ldr	r0, [pc, #96]	; (800e17c <tcp_keepalive+0x7c>)
 800e11c:	f002 ffc8 	bl	80110b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	b29c      	uxth	r4, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e128:	3b01      	subs	r3, #1
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f8 fa8f 	bl	800664e <lwip_htonl>
 800e130:	4603      	mov	r3, r0
 800e132:	2200      	movs	r2, #0
 800e134:	4621      	mov	r1, r4
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff fe68 	bl	800de0c <tcp_output_alloc_header>
 800e13c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	e010      	b.n	800e16c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	2200      	movs	r2, #0
 800e14e:	6939      	ldr	r1, [r7, #16]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff fe99 	bl	800de88 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3304      	adds	r3, #4
 800e15c:	6939      	ldr	r1, [r7, #16]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fed0 	bl	800df04 <tcp_output_control_segment>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	bd90      	pop	{r4, r7, pc}
 800e174:	08013864 	.word	0x08013864
 800e178:	08014040 	.word	0x08014040
 800e17c:	080138b8 	.word	0x080138b8

0800e180 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e180:	b590      	push	{r4, r7, lr}
 800e182:	b08b      	sub	sp, #44	; 0x2c
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e188:	2300      	movs	r3, #0
 800e18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d106      	bne.n	800e1a2 <tcp_zero_window_probe+0x22>
 800e194:	4b4c      	ldr	r3, [pc, #304]	; (800e2c8 <tcp_zero_window_probe+0x148>)
 800e196:	f640 024f 	movw	r2, #2127	; 0x84f
 800e19a:	494c      	ldr	r1, [pc, #304]	; (800e2cc <tcp_zero_window_probe+0x14c>)
 800e19c:	484c      	ldr	r0, [pc, #304]	; (800e2d0 <tcp_zero_window_probe+0x150>)
 800e19e:	f002 ff87 	bl	80110b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	e086      	b.n	800e2c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e1b8:	2bff      	cmp	r3, #255	; 0xff
 800e1ba:	d007      	beq.n	800e1cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	899b      	ldrh	r3, [r3, #12]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f8 fa25 	bl	8006624 <lwip_htons>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d005      	beq.n	800e1f2 <tcp_zero_window_probe+0x72>
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	891b      	ldrh	r3, [r3, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <tcp_zero_window_probe+0x72>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <tcp_zero_window_probe+0x74>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e1f6:	7ffb      	ldrb	r3, [r7, #31]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	bf0c      	ite	eq
 800e1fc:	2301      	moveq	r3, #1
 800e1fe:	2300      	movne	r3, #0
 800e200:	b2db      	uxtb	r3, r3
 800e202:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e208:	b299      	uxth	r1, r3
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	8bba      	ldrh	r2, [r7, #28]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fdfa 	bl	800de0c <tcp_output_alloc_header>
 800e218:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e220:	f04f 33ff 	mov.w	r3, #4294967295
 800e224:	e04c      	b.n	800e2c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e22c:	7ffb      	ldrb	r3, [r7, #31]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d011      	beq.n	800e256 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	899b      	ldrh	r3, [r3, #12]
 800e236:	b29b      	uxth	r3, r3
 800e238:	b21b      	sxth	r3, r3
 800e23a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e23e:	b21c      	sxth	r4, r3
 800e240:	2011      	movs	r0, #17
 800e242:	f7f8 f9ef 	bl	8006624 <lwip_htons>
 800e246:	4603      	mov	r3, r0
 800e248:	b21b      	sxth	r3, r3
 800e24a:	4323      	orrs	r3, r4
 800e24c:	b21b      	sxth	r3, r3
 800e24e:	b29a      	uxth	r2, r3
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	819a      	strh	r2, [r3, #12]
 800e254:	e010      	b.n	800e278 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	3314      	adds	r3, #20
 800e25c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	6858      	ldr	r0, [r3, #4]
 800e262:	6a3b      	ldr	r3, [r7, #32]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	891a      	ldrh	r2, [r3, #8]
 800e268:	6a3b      	ldr	r3, [r7, #32]
 800e26a:	891b      	ldrh	r3, [r3, #8]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2201      	movs	r2, #1
 800e272:	6939      	ldr	r1, [r7, #16]
 800e274:	f7f9 ff54 	bl	8008120 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f8 f9e5 	bl	800664e <lwip_htonl>
 800e284:	4603      	mov	r3, r0
 800e286:	3301      	adds	r3, #1
 800e288:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	da02      	bge.n	800e29c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	69b9      	ldr	r1, [r7, #24]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff fdef 	bl	800de88 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	69b9      	ldr	r1, [r7, #24]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7ff fe26 	bl	800df04 <tcp_output_control_segment>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e2bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	372c      	adds	r7, #44	; 0x2c
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd90      	pop	{r4, r7, pc}
 800e2c8:	08013864 	.word	0x08013864
 800e2cc:	0801405c 	.word	0x0801405c
 800e2d0:	080138b8 	.word	0x080138b8

0800e2d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e2dc:	f7fa f80e 	bl	80082fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e2e0:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <tcpip_tcp_timer+0x38>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d103      	bne.n	800e2f0 <tcpip_tcp_timer+0x1c>
 800e2e8:	4b09      	ldr	r3, [pc, #36]	; (800e310 <tcpip_tcp_timer+0x3c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	4908      	ldr	r1, [pc, #32]	; (800e314 <tcpip_tcp_timer+0x40>)
 800e2f4:	20fa      	movs	r0, #250	; 0xfa
 800e2f6:	f000 f8f3 	bl	800e4e0 <sys_timeout>
 800e2fa:	e003      	b.n	800e304 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e2fc:	4b06      	ldr	r3, [pc, #24]	; (800e318 <tcpip_tcp_timer+0x44>)
 800e2fe:	2200      	movs	r2, #0
 800e300:	601a      	str	r2, [r3, #0]
  }
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20008c34 	.word	0x20008c34
 800e310:	20008c38 	.word	0x20008c38
 800e314:	0800e2d5 	.word	0x0800e2d5
 800e318:	20008c80 	.word	0x20008c80

0800e31c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e320:	4b0a      	ldr	r3, [pc, #40]	; (800e34c <tcp_timer_needed+0x30>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10f      	bne.n	800e348 <tcp_timer_needed+0x2c>
 800e328:	4b09      	ldr	r3, [pc, #36]	; (800e350 <tcp_timer_needed+0x34>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d103      	bne.n	800e338 <tcp_timer_needed+0x1c>
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <tcp_timer_needed+0x38>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d007      	beq.n	800e348 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e338:	4b04      	ldr	r3, [pc, #16]	; (800e34c <tcp_timer_needed+0x30>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e33e:	2200      	movs	r2, #0
 800e340:	4905      	ldr	r1, [pc, #20]	; (800e358 <tcp_timer_needed+0x3c>)
 800e342:	20fa      	movs	r0, #250	; 0xfa
 800e344:	f000 f8cc 	bl	800e4e0 <sys_timeout>
  }
}
 800e348:	bf00      	nop
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20008c80 	.word	0x20008c80
 800e350:	20008c34 	.word	0x20008c34
 800e354:	20008c38 	.word	0x20008c38
 800e358:	0800e2d5 	.word	0x0800e2d5

0800e35c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e368:	2006      	movs	r0, #6
 800e36a:	f7f8 fe09 	bl	8006f80 <memp_malloc>
 800e36e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d109      	bne.n	800e38a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d151      	bne.n	800e420 <sys_timeout_abs+0xc4>
 800e37c:	4b2a      	ldr	r3, [pc, #168]	; (800e428 <sys_timeout_abs+0xcc>)
 800e37e:	22be      	movs	r2, #190	; 0xbe
 800e380:	492a      	ldr	r1, [pc, #168]	; (800e42c <sys_timeout_abs+0xd0>)
 800e382:	482b      	ldr	r0, [pc, #172]	; (800e430 <sys_timeout_abs+0xd4>)
 800e384:	f002 fe94 	bl	80110b0 <iprintf>
    return;
 800e388:	e04a      	b.n	800e420 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e3a2:	4b24      	ldr	r3, [pc, #144]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d103      	bne.n	800e3b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e3aa:	4a22      	ldr	r2, [pc, #136]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	6013      	str	r3, [r2, #0]
    return;
 800e3b0:	e037      	b.n	800e422 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	4b1f      	ldr	r3, [pc, #124]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	0fdb      	lsrs	r3, r3, #31
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d007      	beq.n	800e3da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e3ca:	4b1a      	ldr	r3, [pc, #104]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e3d2:	4a18      	ldr	r2, [pc, #96]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	e023      	b.n	800e422 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <sys_timeout_abs+0xd8>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	617b      	str	r3, [r7, #20]
 800e3e0:	e01a      	b.n	800e418 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00b      	beq.n	800e402 <sys_timeout_abs+0xa6>
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	1ad3      	subs	r3, r2, r3
 800e3f6:	0fdb      	lsrs	r3, r3, #31
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d007      	beq.n	800e412 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	601a      	str	r2, [r3, #0]
        break;
 800e410:	e007      	b.n	800e422 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1e1      	bne.n	800e3e2 <sys_timeout_abs+0x86>
 800e41e:	e000      	b.n	800e422 <sys_timeout_abs+0xc6>
    return;
 800e420:	bf00      	nop
      }
    }
  }
}
 800e422:	3718      	adds	r7, #24
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	08014080 	.word	0x08014080
 800e42c:	080140b4 	.word	0x080140b4
 800e430:	080140f4 	.word	0x080140f4
 800e434:	20008c78 	.word	0x20008c78

0800e438 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	4798      	blx	r3

  now = sys_now();
 800e44a:	f7f6 ffef 	bl	800542c <sys_now>
 800e44e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	4b0f      	ldr	r3, [pc, #60]	; (800e494 <lwip_cyclic_timer+0x5c>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4413      	add	r3, r2
 800e45a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	0fdb      	lsrs	r3, r3, #31
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d009      	beq.n	800e482 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	4413      	add	r3, r2
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	4907      	ldr	r1, [pc, #28]	; (800e498 <lwip_cyclic_timer+0x60>)
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7ff ff6e 	bl	800e35c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e480:	e004      	b.n	800e48c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4904      	ldr	r1, [pc, #16]	; (800e498 <lwip_cyclic_timer+0x60>)
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7ff ff68 	bl	800e35c <sys_timeout_abs>
}
 800e48c:	bf00      	nop
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20008c7c 	.word	0x20008c7c
 800e498:	0800e439 	.word	0x0800e439

0800e49c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	607b      	str	r3, [r7, #4]
 800e4a6:	e00e      	b.n	800e4c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e4a8:	4a0b      	ldr	r2, [pc, #44]	; (800e4d8 <sys_timeouts_init+0x3c>)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	4a08      	ldr	r2, [pc, #32]	; (800e4d8 <sys_timeouts_init+0x3c>)
 800e4b6:	4413      	add	r3, r2
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	4908      	ldr	r1, [pc, #32]	; (800e4dc <sys_timeouts_init+0x40>)
 800e4bc:	f000 f810 	bl	800e4e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	607b      	str	r3, [r7, #4]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d9ed      	bls.n	800e4a8 <sys_timeouts_init+0xc>
  }
}
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	080155f8 	.word	0x080155f8
 800e4dc:	0800e439 	.word	0x0800e439

0800e4e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f2:	d306      	bcc.n	800e502 <sys_timeout+0x22>
 800e4f4:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <sys_timeout+0x40>)
 800e4f6:	f240 1229 	movw	r2, #297	; 0x129
 800e4fa:	490a      	ldr	r1, [pc, #40]	; (800e524 <sys_timeout+0x44>)
 800e4fc:	480a      	ldr	r0, [pc, #40]	; (800e528 <sys_timeout+0x48>)
 800e4fe:	f002 fdd7 	bl	80110b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e502:	f7f6 ff93 	bl	800542c <sys_now>
 800e506:	4602      	mov	r2, r0
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	4413      	add	r3, r2
 800e50c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	68b9      	ldr	r1, [r7, #8]
 800e512:	6978      	ldr	r0, [r7, #20]
 800e514:	f7ff ff22 	bl	800e35c <sys_timeout_abs>
#endif
}
 800e518:	bf00      	nop
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	08014080 	.word	0x08014080
 800e524:	0801411c 	.word	0x0801411c
 800e528:	080140f4 	.word	0x080140f4

0800e52c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e532:	f7f6 ff7b 	bl	800542c <sys_now>
 800e536:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e538:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <sys_check_timeouts+0x78>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <sys_check_timeouts+0x1a>
 800e542:	f7f9 f8c9 	bl	80076d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e546:	4b18      	ldr	r3, [pc, #96]	; (800e5a8 <sys_check_timeouts+0x7c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d022      	beq.n	800e598 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	0fdb      	lsrs	r3, r3, #31
 800e55c:	f003 0301 	and.w	r3, r3, #1
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d11a      	bne.n	800e59c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a0f      	ldr	r2, [pc, #60]	; (800e5a8 <sys_check_timeouts+0x7c>)
 800e56c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	4a0b      	ldr	r2, [pc, #44]	; (800e5ac <sys_check_timeouts+0x80>)
 800e580:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e582:	68b9      	ldr	r1, [r7, #8]
 800e584:	2006      	movs	r0, #6
 800e586:	f7f8 fd6b 	bl	8007060 <memp_free>
    if (handler != NULL) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d0d3      	beq.n	800e538 <sys_check_timeouts+0xc>
      handler(arg);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6838      	ldr	r0, [r7, #0]
 800e594:	4798      	blx	r3
  do {
 800e596:	e7cf      	b.n	800e538 <sys_check_timeouts+0xc>
      return;
 800e598:	bf00      	nop
 800e59a:	e000      	b.n	800e59e <sys_check_timeouts+0x72>
      return;
 800e59c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20008c25 	.word	0x20008c25
 800e5a8:	20008c78 	.word	0x20008c78
 800e5ac:	20008c7c 	.word	0x20008c7c

0800e5b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e5b4:	f002 fc7c 	bl	8010eb0 <rand>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	4b01      	ldr	r3, [pc, #4]	; (800e5d0 <udp_init+0x20>)
 800e5ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5cc:	bf00      	nop
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	20000028 	.word	0x20000028

0800e5d4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d105      	bne.n	800e5f4 <udp_input_local_match+0x20>
 800e5e8:	4b27      	ldr	r3, [pc, #156]	; (800e688 <udp_input_local_match+0xb4>)
 800e5ea:	2287      	movs	r2, #135	; 0x87
 800e5ec:	4927      	ldr	r1, [pc, #156]	; (800e68c <udp_input_local_match+0xb8>)
 800e5ee:	4828      	ldr	r0, [pc, #160]	; (800e690 <udp_input_local_match+0xbc>)
 800e5f0:	f002 fd5e 	bl	80110b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d105      	bne.n	800e606 <udp_input_local_match+0x32>
 800e5fa:	4b23      	ldr	r3, [pc, #140]	; (800e688 <udp_input_local_match+0xb4>)
 800e5fc:	2288      	movs	r2, #136	; 0x88
 800e5fe:	4925      	ldr	r1, [pc, #148]	; (800e694 <udp_input_local_match+0xc0>)
 800e600:	4823      	ldr	r0, [pc, #140]	; (800e690 <udp_input_local_match+0xbc>)
 800e602:	f002 fd55 	bl	80110b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	7a1b      	ldrb	r3, [r3, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00b      	beq.n	800e626 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	7a1a      	ldrb	r2, [r3, #8]
 800e612:	4b21      	ldr	r3, [pc, #132]	; (800e698 <udp_input_local_match+0xc4>)
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e61a:	3301      	adds	r3, #1
 800e61c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e61e:	429a      	cmp	r2, r3
 800e620:	d001      	beq.n	800e626 <udp_input_local_match+0x52>
    return 0;
 800e622:	2300      	movs	r3, #0
 800e624:	e02b      	b.n	800e67e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e626:	79fb      	ldrb	r3, [r7, #7]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d018      	beq.n	800e65e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d013      	beq.n	800e65a <udp_input_local_match+0x86>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00f      	beq.n	800e65a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e63a:	4b17      	ldr	r3, [pc, #92]	; (800e698 <udp_input_local_match+0xc4>)
 800e63c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e642:	d00a      	beq.n	800e65a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	4b13      	ldr	r3, [pc, #76]	; (800e698 <udp_input_local_match+0xc4>)
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	405a      	eors	r2, r3
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	3308      	adds	r3, #8
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e656:	2b00      	cmp	r3, #0
 800e658:	d110      	bne.n	800e67c <udp_input_local_match+0xa8>
          return 1;
 800e65a:	2301      	movs	r3, #1
 800e65c:	e00f      	b.n	800e67e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d009      	beq.n	800e678 <udp_input_local_match+0xa4>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d005      	beq.n	800e678 <udp_input_local_match+0xa4>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	4b09      	ldr	r3, [pc, #36]	; (800e698 <udp_input_local_match+0xc4>)
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	429a      	cmp	r2, r3
 800e676:	d101      	bne.n	800e67c <udp_input_local_match+0xa8>
        return 1;
 800e678:	2301      	movs	r3, #1
 800e67a:	e000      	b.n	800e67e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	08014168 	.word	0x08014168
 800e68c:	08014198 	.word	0x08014198
 800e690:	080141bc 	.word	0x080141bc
 800e694:	080141e4 	.word	0x080141e4
 800e698:	200056b8 	.word	0x200056b8

0800e69c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e69c:	b590      	push	{r4, r7, lr}
 800e69e:	b08d      	sub	sp, #52	; 0x34
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d105      	bne.n	800e6bc <udp_input+0x20>
 800e6b0:	4b7c      	ldr	r3, [pc, #496]	; (800e8a4 <udp_input+0x208>)
 800e6b2:	22cf      	movs	r2, #207	; 0xcf
 800e6b4:	497c      	ldr	r1, [pc, #496]	; (800e8a8 <udp_input+0x20c>)
 800e6b6:	487d      	ldr	r0, [pc, #500]	; (800e8ac <udp_input+0x210>)
 800e6b8:	f002 fcfa 	bl	80110b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d105      	bne.n	800e6ce <udp_input+0x32>
 800e6c2:	4b78      	ldr	r3, [pc, #480]	; (800e8a4 <udp_input+0x208>)
 800e6c4:	22d0      	movs	r2, #208	; 0xd0
 800e6c6:	497a      	ldr	r1, [pc, #488]	; (800e8b0 <udp_input+0x214>)
 800e6c8:	4878      	ldr	r0, [pc, #480]	; (800e8ac <udp_input+0x210>)
 800e6ca:	f002 fcf1 	bl	80110b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	2b07      	cmp	r3, #7
 800e6d4:	d803      	bhi.n	800e6de <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7f9 fb38 	bl	8007d4c <pbuf_free>
    goto end;
 800e6dc:	e0de      	b.n	800e89c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e6e4:	4b73      	ldr	r3, [pc, #460]	; (800e8b4 <udp_input+0x218>)
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	4a72      	ldr	r2, [pc, #456]	; (800e8b4 <udp_input+0x218>)
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 fc88 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f7 ff90 	bl	8006624 <lwip_htons>
 800e704:	4603      	mov	r3, r0
 800e706:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	885b      	ldrh	r3, [r3, #2]
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f7 ff88 	bl	8006624 <lwip_htons>
 800e714:	4603      	mov	r3, r0
 800e716:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e718:	2300      	movs	r3, #0
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e720:	2300      	movs	r3, #0
 800e722:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e724:	4b64      	ldr	r3, [pc, #400]	; (800e8b8 <udp_input+0x21c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	627b      	str	r3, [r7, #36]	; 0x24
 800e72a:	e054      	b.n	800e7d6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	8a5b      	ldrh	r3, [r3, #18]
 800e730:	89fa      	ldrh	r2, [r7, #14]
 800e732:	429a      	cmp	r2, r3
 800e734:	d14a      	bne.n	800e7cc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e736:	7cfb      	ldrb	r3, [r7, #19]
 800e738:	461a      	mov	r2, r3
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e73e:	f7ff ff49 	bl	800e5d4 <udp_input_local_match>
 800e742:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e744:	2b00      	cmp	r3, #0
 800e746:	d041      	beq.n	800e7cc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	7c1b      	ldrb	r3, [r3, #16]
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	d11d      	bne.n	800e790 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d102      	bne.n	800e760 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	e017      	b.n	800e790 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e760:	7cfb      	ldrb	r3, [r7, #19]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d014      	beq.n	800e790 <udp_input+0xf4>
 800e766:	4b53      	ldr	r3, [pc, #332]	; (800e8b4 <udp_input+0x218>)
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d10f      	bne.n	800e790 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	3304      	adds	r3, #4
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d008      	beq.n	800e790 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	3304      	adds	r3, #4
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d101      	bne.n	800e790 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	8a9b      	ldrh	r3, [r3, #20]
 800e794:	8a3a      	ldrh	r2, [r7, #16]
 800e796:	429a      	cmp	r2, r3
 800e798:	d118      	bne.n	800e7cc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d005      	beq.n	800e7ae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	4b43      	ldr	r3, [pc, #268]	; (800e8b4 <udp_input+0x218>)
 800e7a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d10e      	bne.n	800e7cc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d014      	beq.n	800e7de <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e7bc:	4b3e      	ldr	r3, [pc, #248]	; (800e8b8 <udp_input+0x21c>)
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e7c4:	4a3c      	ldr	r2, [pc, #240]	; (800e8b8 <udp_input+0x21c>)
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e7ca:	e008      	b.n	800e7de <udp_input+0x142>
      }
    }

    prev = pcb;
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1a7      	bne.n	800e72c <udp_input+0x90>
 800e7dc:	e000      	b.n	800e7e0 <udp_input+0x144>
        break;
 800e7de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <udp_input+0x14e>
    pcb = uncon_pcb;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <udp_input+0x15a>
    for_us = 1;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	76fb      	strb	r3, [r7, #27]
 800e7f4:	e00a      	b.n	800e80c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	4b2d      	ldr	r3, [pc, #180]	; (800e8b4 <udp_input+0x218>)
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	429a      	cmp	r2, r3
 800e802:	bf0c      	ite	eq
 800e804:	2301      	moveq	r3, #1
 800e806:	2300      	movne	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e80c:	7efb      	ldrb	r3, [r7, #27]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d041      	beq.n	800e896 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e812:	2108      	movs	r1, #8
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7f9 fa13 	bl	8007c40 <pbuf_remove_header>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e820:	4b20      	ldr	r3, [pc, #128]	; (800e8a4 <udp_input+0x208>)
 800e822:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e826:	4925      	ldr	r1, [pc, #148]	; (800e8bc <udp_input+0x220>)
 800e828:	4820      	ldr	r0, [pc, #128]	; (800e8ac <udp_input+0x210>)
 800e82a:	f002 fc41 	bl	80110b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7f9 fa8c 	bl	8007d4c <pbuf_free>
      goto end;
 800e834:	e032      	b.n	800e89c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d012      	beq.n	800e862 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00a      	beq.n	800e85a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	699c      	ldr	r4, [r3, #24]
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	69d8      	ldr	r0, [r3, #28]
 800e84c:	8a3b      	ldrh	r3, [r7, #16]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	4b1b      	ldr	r3, [pc, #108]	; (800e8c0 <udp_input+0x224>)
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e856:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e858:	e021      	b.n	800e89e <udp_input+0x202>
        pbuf_free(p);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f9 fa76 	bl	8007d4c <pbuf_free>
        goto end;
 800e860:	e01c      	b.n	800e89c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e862:	7cfb      	ldrb	r3, [r7, #19]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d112      	bne.n	800e88e <udp_input+0x1f2>
 800e868:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <udp_input+0x218>)
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e870:	2be0      	cmp	r3, #224	; 0xe0
 800e872:	d00c      	beq.n	800e88e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e874:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <udp_input+0x218>)
 800e876:	899b      	ldrh	r3, [r3, #12]
 800e878:	3308      	adds	r3, #8
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	b21b      	sxth	r3, r3
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7f9 fa50 	bl	8007d26 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e886:	2103      	movs	r1, #3
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 f89b 	bl	800f9c4 <icmp_dest_unreach>
      pbuf_free(p);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7f9 fa5c 	bl	8007d4c <pbuf_free>
  return;
 800e894:	e003      	b.n	800e89e <udp_input+0x202>
    pbuf_free(p);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7f9 fa58 	bl	8007d4c <pbuf_free>
  return;
 800e89c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e89e:	372c      	adds	r7, #44	; 0x2c
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd90      	pop	{r4, r7, pc}
 800e8a4:	08014168 	.word	0x08014168
 800e8a8:	0801420c 	.word	0x0801420c
 800e8ac:	080141bc 	.word	0x080141bc
 800e8b0:	08014224 	.word	0x08014224
 800e8b4:	200056b8 	.word	0x200056b8
 800e8b8:	20008c84 	.word	0x20008c84
 800e8bc:	08014240 	.word	0x08014240
 800e8c0:	200056c8 	.word	0x200056c8

0800e8c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d01e      	beq.n	800e912 <udp_netif_ip_addr_changed+0x4e>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d01a      	beq.n	800e912 <udp_netif_ip_addr_changed+0x4e>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d017      	beq.n	800e912 <udp_netif_ip_addr_changed+0x4e>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d013      	beq.n	800e912 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e8ea:	4b0d      	ldr	r3, [pc, #52]	; (800e920 <udp_netif_ip_addr_changed+0x5c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e00c      	b.n	800e90c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d103      	bne.n	800e906 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1ef      	bne.n	800e8f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e912:	bf00      	nop
 800e914:	3714      	adds	r7, #20
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	20008c84 	.word	0x20008c84

0800e924 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e92c:	4915      	ldr	r1, [pc, #84]	; (800e984 <etharp_free_entry+0x60>)
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	4613      	mov	r3, r2
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	4413      	add	r3, r2
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	440b      	add	r3, r1
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d013      	beq.n	800e968 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e940:	4910      	ldr	r1, [pc, #64]	; (800e984 <etharp_free_entry+0x60>)
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	4613      	mov	r3, r2
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	4413      	add	r3, r2
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	440b      	add	r3, r1
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4618      	mov	r0, r3
 800e952:	f7f9 f9fb 	bl	8007d4c <pbuf_free>
    arp_table[i].q = NULL;
 800e956:	490b      	ldr	r1, [pc, #44]	; (800e984 <etharp_free_entry+0x60>)
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	4613      	mov	r3, r2
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	4413      	add	r3, r2
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	440b      	add	r3, r1
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e968:	4906      	ldr	r1, [pc, #24]	; (800e984 <etharp_free_entry+0x60>)
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	4613      	mov	r3, r2
 800e96e:	005b      	lsls	r3, r3, #1
 800e970:	4413      	add	r3, r2
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	440b      	add	r3, r1
 800e976:	3314      	adds	r3, #20
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	20008c88 	.word	0x20008c88

0800e988 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e98e:	2300      	movs	r3, #0
 800e990:	607b      	str	r3, [r7, #4]
 800e992:	e096      	b.n	800eac2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e994:	494f      	ldr	r1, [pc, #316]	; (800ead4 <etharp_tmr+0x14c>)
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	3314      	adds	r3, #20
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e9a8:	78fb      	ldrb	r3, [r7, #3]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 8086 	beq.w	800eabc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e9b0:	4948      	ldr	r1, [pc, #288]	; (800ead4 <etharp_tmr+0x14c>)
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	4413      	add	r3, r2
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	440b      	add	r3, r1
 800e9be:	3312      	adds	r3, #18
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	b298      	uxth	r0, r3
 800e9c6:	4943      	ldr	r1, [pc, #268]	; (800ead4 <etharp_tmr+0x14c>)
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	4413      	add	r3, r2
 800e9d0:	00db      	lsls	r3, r3, #3
 800e9d2:	440b      	add	r3, r1
 800e9d4:	3312      	adds	r3, #18
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9da:	493e      	ldr	r1, [pc, #248]	; (800ead4 <etharp_tmr+0x14c>)
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4413      	add	r3, r2
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	440b      	add	r3, r1
 800e9e8:	3312      	adds	r3, #18
 800e9ea:	881b      	ldrh	r3, [r3, #0]
 800e9ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e9f0:	d215      	bcs.n	800ea1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e9f2:	4938      	ldr	r1, [pc, #224]	; (800ead4 <etharp_tmr+0x14c>)
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	4413      	add	r3, r2
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	440b      	add	r3, r1
 800ea00:	3314      	adds	r3, #20
 800ea02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d10e      	bne.n	800ea26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ea08:	4932      	ldr	r1, [pc, #200]	; (800ead4 <etharp_tmr+0x14c>)
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	4413      	add	r3, r2
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	440b      	add	r3, r1
 800ea16:	3312      	adds	r3, #18
 800ea18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ea1a:	2b04      	cmp	r3, #4
 800ea1c:	d903      	bls.n	800ea26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff ff80 	bl	800e924 <etharp_free_entry>
 800ea24:	e04a      	b.n	800eabc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ea26:	492b      	ldr	r1, [pc, #172]	; (800ead4 <etharp_tmr+0x14c>)
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	4413      	add	r3, r2
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	440b      	add	r3, r1
 800ea34:	3314      	adds	r3, #20
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d10a      	bne.n	800ea52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ea3c:	4925      	ldr	r1, [pc, #148]	; (800ead4 <etharp_tmr+0x14c>)
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	4613      	mov	r3, r2
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	4413      	add	r3, r2
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	440b      	add	r3, r1
 800ea4a:	3314      	adds	r3, #20
 800ea4c:	2204      	movs	r2, #4
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	e034      	b.n	800eabc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ea52:	4920      	ldr	r1, [pc, #128]	; (800ead4 <etharp_tmr+0x14c>)
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	4613      	mov	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	4413      	add	r3, r2
 800ea5c:	00db      	lsls	r3, r3, #3
 800ea5e:	440b      	add	r3, r1
 800ea60:	3314      	adds	r3, #20
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	2b04      	cmp	r3, #4
 800ea66:	d10a      	bne.n	800ea7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ea68:	491a      	ldr	r1, [pc, #104]	; (800ead4 <etharp_tmr+0x14c>)
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	4413      	add	r3, r2
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	440b      	add	r3, r1
 800ea76:	3314      	adds	r3, #20
 800ea78:	2202      	movs	r2, #2
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	e01e      	b.n	800eabc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea7e:	4915      	ldr	r1, [pc, #84]	; (800ead4 <etharp_tmr+0x14c>)
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	4613      	mov	r3, r2
 800ea84:	005b      	lsls	r3, r3, #1
 800ea86:	4413      	add	r3, r2
 800ea88:	00db      	lsls	r3, r3, #3
 800ea8a:	440b      	add	r3, r1
 800ea8c:	3314      	adds	r3, #20
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d113      	bne.n	800eabc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ea94:	490f      	ldr	r1, [pc, #60]	; (800ead4 <etharp_tmr+0x14c>)
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4613      	mov	r3, r2
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	4413      	add	r3, r2
 800ea9e:	00db      	lsls	r3, r3, #3
 800eaa0:	440b      	add	r3, r1
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	4413      	add	r3, r2
 800eaae:	00db      	lsls	r3, r3, #3
 800eab0:	4a08      	ldr	r2, [pc, #32]	; (800ead4 <etharp_tmr+0x14c>)
 800eab2:	4413      	add	r3, r2
 800eab4:	3304      	adds	r3, #4
 800eab6:	4619      	mov	r1, r3
 800eab8:	f000 fe6e 	bl	800f798 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3301      	adds	r3, #1
 800eac0:	607b      	str	r3, [r7, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b09      	cmp	r3, #9
 800eac6:	f77f af65 	ble.w	800e994 <etharp_tmr+0xc>
      }
    }
  }
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	20008c88 	.word	0x20008c88

0800ead8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08a      	sub	sp, #40	; 0x28
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	460b      	mov	r3, r1
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eae6:	230a      	movs	r3, #10
 800eae8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eaea:	230a      	movs	r3, #10
 800eaec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eaee:	230a      	movs	r3, #10
 800eaf0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eaf6:	230a      	movs	r3, #10
 800eaf8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	83bb      	strh	r3, [r7, #28]
 800eafe:	2300      	movs	r3, #0
 800eb00:	837b      	strh	r3, [r7, #26]
 800eb02:	2300      	movs	r3, #0
 800eb04:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb06:	2300      	movs	r3, #0
 800eb08:	843b      	strh	r3, [r7, #32]
 800eb0a:	e0ae      	b.n	800ec6a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800eb0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb10:	49a6      	ldr	r1, [pc, #664]	; (800edac <etharp_find_entry+0x2d4>)
 800eb12:	4613      	mov	r3, r2
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	4413      	add	r3, r2
 800eb18:	00db      	lsls	r3, r3, #3
 800eb1a:	440b      	add	r3, r1
 800eb1c:	3314      	adds	r3, #20
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800eb22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb26:	2b0a      	cmp	r3, #10
 800eb28:	d105      	bne.n	800eb36 <etharp_find_entry+0x5e>
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800eb30:	8c3b      	ldrh	r3, [r7, #32]
 800eb32:	847b      	strh	r3, [r7, #34]	; 0x22
 800eb34:	e095      	b.n	800ec62 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f000 8092 	beq.w	800ec62 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d009      	beq.n	800eb58 <etharp_find_entry+0x80>
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d806      	bhi.n	800eb58 <etharp_find_entry+0x80>
 800eb4a:	4b99      	ldr	r3, [pc, #612]	; (800edb0 <etharp_find_entry+0x2d8>)
 800eb4c:	f240 1223 	movw	r2, #291	; 0x123
 800eb50:	4998      	ldr	r1, [pc, #608]	; (800edb4 <etharp_find_entry+0x2dc>)
 800eb52:	4899      	ldr	r0, [pc, #612]	; (800edb8 <etharp_find_entry+0x2e0>)
 800eb54:	f002 faac 	bl	80110b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d020      	beq.n	800eba0 <etharp_find_entry+0xc8>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6819      	ldr	r1, [r3, #0]
 800eb62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb66:	4891      	ldr	r0, [pc, #580]	; (800edac <etharp_find_entry+0x2d4>)
 800eb68:	4613      	mov	r3, r2
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	4413      	add	r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	4403      	add	r3, r0
 800eb72:	3304      	adds	r3, #4
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4299      	cmp	r1, r3
 800eb78:	d112      	bne.n	800eba0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00c      	beq.n	800eb9a <etharp_find_entry+0xc2>
 800eb80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb84:	4989      	ldr	r1, [pc, #548]	; (800edac <etharp_find_entry+0x2d4>)
 800eb86:	4613      	mov	r3, r2
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	4413      	add	r3, r2
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	440b      	add	r3, r1
 800eb90:	3308      	adds	r3, #8
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d102      	bne.n	800eba0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eb9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb9e:	e100      	b.n	800eda2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eba0:	7dfb      	ldrb	r3, [r7, #23]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d140      	bne.n	800ec28 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebaa:	4980      	ldr	r1, [pc, #512]	; (800edac <etharp_find_entry+0x2d4>)
 800ebac:	4613      	mov	r3, r2
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	4413      	add	r3, r2
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	440b      	add	r3, r1
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01a      	beq.n	800ebf2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ebbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebc0:	497a      	ldr	r1, [pc, #488]	; (800edac <etharp_find_entry+0x2d4>)
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	4413      	add	r3, r2
 800ebc8:	00db      	lsls	r3, r3, #3
 800ebca:	440b      	add	r3, r1
 800ebcc:	3312      	adds	r3, #18
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	8bba      	ldrh	r2, [r7, #28]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d845      	bhi.n	800ec62 <etharp_find_entry+0x18a>
            old_queue = i;
 800ebd6:	8c3b      	ldrh	r3, [r7, #32]
 800ebd8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ebda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebde:	4973      	ldr	r1, [pc, #460]	; (800edac <etharp_find_entry+0x2d4>)
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	4413      	add	r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	440b      	add	r3, r1
 800ebea:	3312      	adds	r3, #18
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	83bb      	strh	r3, [r7, #28]
 800ebf0:	e037      	b.n	800ec62 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ebf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebf6:	496d      	ldr	r1, [pc, #436]	; (800edac <etharp_find_entry+0x2d4>)
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	4413      	add	r3, r2
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	440b      	add	r3, r1
 800ec02:	3312      	adds	r3, #18
 800ec04:	881b      	ldrh	r3, [r3, #0]
 800ec06:	8b7a      	ldrh	r2, [r7, #26]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d82a      	bhi.n	800ec62 <etharp_find_entry+0x18a>
            old_pending = i;
 800ec0c:	8c3b      	ldrh	r3, [r7, #32]
 800ec0e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ec10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec14:	4965      	ldr	r1, [pc, #404]	; (800edac <etharp_find_entry+0x2d4>)
 800ec16:	4613      	mov	r3, r2
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	4413      	add	r3, r2
 800ec1c:	00db      	lsls	r3, r3, #3
 800ec1e:	440b      	add	r3, r1
 800ec20:	3312      	adds	r3, #18
 800ec22:	881b      	ldrh	r3, [r3, #0]
 800ec24:	837b      	strh	r3, [r7, #26]
 800ec26:	e01c      	b.n	800ec62 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ec28:	7dfb      	ldrb	r3, [r7, #23]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d919      	bls.n	800ec62 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ec2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec32:	495e      	ldr	r1, [pc, #376]	; (800edac <etharp_find_entry+0x2d4>)
 800ec34:	4613      	mov	r3, r2
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	4413      	add	r3, r2
 800ec3a:	00db      	lsls	r3, r3, #3
 800ec3c:	440b      	add	r3, r1
 800ec3e:	3312      	adds	r3, #18
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	8b3a      	ldrh	r2, [r7, #24]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d80c      	bhi.n	800ec62 <etharp_find_entry+0x18a>
            old_stable = i;
 800ec48:	8c3b      	ldrh	r3, [r7, #32]
 800ec4a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ec4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec50:	4956      	ldr	r1, [pc, #344]	; (800edac <etharp_find_entry+0x2d4>)
 800ec52:	4613      	mov	r3, r2
 800ec54:	005b      	lsls	r3, r3, #1
 800ec56:	4413      	add	r3, r2
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	440b      	add	r3, r1
 800ec5c:	3312      	adds	r3, #18
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec62:	8c3b      	ldrh	r3, [r7, #32]
 800ec64:	3301      	adds	r3, #1
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	843b      	strh	r3, [r7, #32]
 800ec6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec6e:	2b09      	cmp	r3, #9
 800ec70:	f77f af4c 	ble.w	800eb0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ec74:	7afb      	ldrb	r3, [r7, #11]
 800ec76:	f003 0302 	and.w	r3, r3, #2
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d108      	bne.n	800ec90 <etharp_find_entry+0x1b8>
 800ec7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec82:	2b0a      	cmp	r3, #10
 800ec84:	d107      	bne.n	800ec96 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ec86:	7afb      	ldrb	r3, [r7, #11]
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d102      	bne.n	800ec96 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ec90:	f04f 33ff 	mov.w	r3, #4294967295
 800ec94:	e085      	b.n	800eda2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ec96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec9a:	2b09      	cmp	r3, #9
 800ec9c:	dc02      	bgt.n	800eca4 <etharp_find_entry+0x1cc>
    i = empty;
 800ec9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eca0:	843b      	strh	r3, [r7, #32]
 800eca2:	e039      	b.n	800ed18 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800eca4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800eca8:	2b09      	cmp	r3, #9
 800ecaa:	dc14      	bgt.n	800ecd6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ecac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ecb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecb4:	493d      	ldr	r1, [pc, #244]	; (800edac <etharp_find_entry+0x2d4>)
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	005b      	lsls	r3, r3, #1
 800ecba:	4413      	add	r3, r2
 800ecbc:	00db      	lsls	r3, r3, #3
 800ecbe:	440b      	add	r3, r1
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d018      	beq.n	800ecf8 <etharp_find_entry+0x220>
 800ecc6:	4b3a      	ldr	r3, [pc, #232]	; (800edb0 <etharp_find_entry+0x2d8>)
 800ecc8:	f240 126d 	movw	r2, #365	; 0x16d
 800eccc:	493b      	ldr	r1, [pc, #236]	; (800edbc <etharp_find_entry+0x2e4>)
 800ecce:	483a      	ldr	r0, [pc, #232]	; (800edb8 <etharp_find_entry+0x2e0>)
 800ecd0:	f002 f9ee 	bl	80110b0 <iprintf>
 800ecd4:	e010      	b.n	800ecf8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ecd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	dc02      	bgt.n	800ece4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ecde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ece0:	843b      	strh	r3, [r7, #32]
 800ece2:	e009      	b.n	800ecf8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ece4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ece8:	2b09      	cmp	r3, #9
 800ecea:	dc02      	bgt.n	800ecf2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ecec:	8bfb      	ldrh	r3, [r7, #30]
 800ecee:	843b      	strh	r3, [r7, #32]
 800ecf0:	e002      	b.n	800ecf8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ecf2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf6:	e054      	b.n	800eda2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ecf8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	dd06      	ble.n	800ed0e <etharp_find_entry+0x236>
 800ed00:	4b2b      	ldr	r3, [pc, #172]	; (800edb0 <etharp_find_entry+0x2d8>)
 800ed02:	f240 127f 	movw	r2, #383	; 0x17f
 800ed06:	492e      	ldr	r1, [pc, #184]	; (800edc0 <etharp_find_entry+0x2e8>)
 800ed08:	482b      	ldr	r0, [pc, #172]	; (800edb8 <etharp_find_entry+0x2e0>)
 800ed0a:	f002 f9d1 	bl	80110b0 <iprintf>
    etharp_free_entry(i);
 800ed0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff fe06 	bl	800e924 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ed18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed1c:	2b09      	cmp	r3, #9
 800ed1e:	dd06      	ble.n	800ed2e <etharp_find_entry+0x256>
 800ed20:	4b23      	ldr	r3, [pc, #140]	; (800edb0 <etharp_find_entry+0x2d8>)
 800ed22:	f240 1283 	movw	r2, #387	; 0x183
 800ed26:	4926      	ldr	r1, [pc, #152]	; (800edc0 <etharp_find_entry+0x2e8>)
 800ed28:	4823      	ldr	r0, [pc, #140]	; (800edb8 <etharp_find_entry+0x2e0>)
 800ed2a:	f002 f9c1 	bl	80110b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ed2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed32:	491e      	ldr	r1, [pc, #120]	; (800edac <etharp_find_entry+0x2d4>)
 800ed34:	4613      	mov	r3, r2
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	4413      	add	r3, r2
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	440b      	add	r3, r1
 800ed3e:	3314      	adds	r3, #20
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d006      	beq.n	800ed54 <etharp_find_entry+0x27c>
 800ed46:	4b1a      	ldr	r3, [pc, #104]	; (800edb0 <etharp_find_entry+0x2d8>)
 800ed48:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ed4c:	491d      	ldr	r1, [pc, #116]	; (800edc4 <etharp_find_entry+0x2ec>)
 800ed4e:	481a      	ldr	r0, [pc, #104]	; (800edb8 <etharp_find_entry+0x2e0>)
 800ed50:	f002 f9ae 	bl	80110b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00b      	beq.n	800ed72 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ed5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6819      	ldr	r1, [r3, #0]
 800ed62:	4812      	ldr	r0, [pc, #72]	; (800edac <etharp_find_entry+0x2d4>)
 800ed64:	4613      	mov	r3, r2
 800ed66:	005b      	lsls	r3, r3, #1
 800ed68:	4413      	add	r3, r2
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	4403      	add	r3, r0
 800ed6e:	3304      	adds	r3, #4
 800ed70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ed72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed76:	490d      	ldr	r1, [pc, #52]	; (800edac <etharp_find_entry+0x2d4>)
 800ed78:	4613      	mov	r3, r2
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	4413      	add	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	440b      	add	r3, r1
 800ed82:	3312      	adds	r3, #18
 800ed84:	2200      	movs	r2, #0
 800ed86:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ed88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed8c:	4907      	ldr	r1, [pc, #28]	; (800edac <etharp_find_entry+0x2d4>)
 800ed8e:	4613      	mov	r3, r2
 800ed90:	005b      	lsls	r3, r3, #1
 800ed92:	4413      	add	r3, r2
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	440b      	add	r3, r1
 800ed98:	3308      	adds	r3, #8
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ed9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3728      	adds	r7, #40	; 0x28
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	20008c88 	.word	0x20008c88
 800edb0:	080144cc 	.word	0x080144cc
 800edb4:	08014504 	.word	0x08014504
 800edb8:	08014544 	.word	0x08014544
 800edbc:	0801456c 	.word	0x0801456c
 800edc0:	08014584 	.word	0x08014584
 800edc4:	08014598 	.word	0x08014598

0800edc8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af02      	add	r7, sp, #8
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eddc:	2b06      	cmp	r3, #6
 800edde:	d006      	beq.n	800edee <etharp_update_arp_entry+0x26>
 800ede0:	4b48      	ldr	r3, [pc, #288]	; (800ef04 <etharp_update_arp_entry+0x13c>)
 800ede2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ede6:	4948      	ldr	r1, [pc, #288]	; (800ef08 <etharp_update_arp_entry+0x140>)
 800ede8:	4848      	ldr	r0, [pc, #288]	; (800ef0c <etharp_update_arp_entry+0x144>)
 800edea:	f002 f961 	bl	80110b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d012      	beq.n	800ee1a <etharp_update_arp_entry+0x52>
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00e      	beq.n	800ee1a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68f9      	ldr	r1, [r7, #12]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f001 f8fe 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800ee08:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d105      	bne.n	800ee1a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee16:	2be0      	cmp	r3, #224	; 0xe0
 800ee18:	d102      	bne.n	800ee20 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ee1a:	f06f 030f 	mvn.w	r3, #15
 800ee1e:	e06c      	b.n	800eefa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ee20:	78fb      	ldrb	r3, [r7, #3]
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	4619      	mov	r1, r3
 800ee26:	68b8      	ldr	r0, [r7, #8]
 800ee28:	f7ff fe56 	bl	800ead8 <etharp_find_entry>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ee30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	da02      	bge.n	800ee3e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ee38:	8afb      	ldrh	r3, [r7, #22]
 800ee3a:	b25b      	sxtb	r3, r3
 800ee3c:	e05d      	b.n	800eefa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ee3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee42:	4933      	ldr	r1, [pc, #204]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800ee44:	4613      	mov	r3, r2
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	4413      	add	r3, r2
 800ee4a:	00db      	lsls	r3, r3, #3
 800ee4c:	440b      	add	r3, r1
 800ee4e:	3314      	adds	r3, #20
 800ee50:	2202      	movs	r2, #2
 800ee52:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ee54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee58:	492d      	ldr	r1, [pc, #180]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	4413      	add	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	440b      	add	r3, r1
 800ee64:	3308      	adds	r3, #8
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ee6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4413      	add	r3, r2
 800ee74:	00db      	lsls	r3, r3, #3
 800ee76:	3308      	adds	r3, #8
 800ee78:	4a25      	ldr	r2, [pc, #148]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800ee7a:	4413      	add	r3, r2
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	2206      	movs	r2, #6
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f002 fa0d 	bl	80112a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ee88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee8c:	4920      	ldr	r1, [pc, #128]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	00db      	lsls	r3, r3, #3
 800ee96:	440b      	add	r3, r1
 800ee98:	3312      	adds	r3, #18
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ee9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eea2:	491b      	ldr	r1, [pc, #108]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800eea4:	4613      	mov	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	4413      	add	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	440b      	add	r3, r1
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d021      	beq.n	800eef8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800eeb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eeb8:	4915      	ldr	r1, [pc, #84]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800eeba:	4613      	mov	r3, r2
 800eebc:	005b      	lsls	r3, r3, #1
 800eebe:	4413      	add	r3, r2
 800eec0:	00db      	lsls	r3, r3, #3
 800eec2:	440b      	add	r3, r1
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800eec8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eecc:	4910      	ldr	r1, [pc, #64]	; (800ef10 <etharp_update_arp_entry+0x148>)
 800eece:	4613      	mov	r3, r2
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	4413      	add	r3, r2
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	440b      	add	r3, r1
 800eed8:	2200      	movs	r2, #0
 800eeda:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800eee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6939      	ldr	r1, [r7, #16]
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f001 ff97 	bl	8010e20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800eef2:	6938      	ldr	r0, [r7, #16]
 800eef4:	f7f8 ff2a 	bl	8007d4c <pbuf_free>
  }
  return ERR_OK;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	080144cc 	.word	0x080144cc
 800ef08:	080145c4 	.word	0x080145c4
 800ef0c:	08014544 	.word	0x08014544
 800ef10:	20008c88 	.word	0x20008c88

0800ef14 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	60fb      	str	r3, [r7, #12]
 800ef20:	e01e      	b.n	800ef60 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ef22:	4913      	ldr	r1, [pc, #76]	; (800ef70 <etharp_cleanup_netif+0x5c>)
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	4613      	mov	r3, r2
 800ef28:	005b      	lsls	r3, r3, #1
 800ef2a:	4413      	add	r3, r2
 800ef2c:	00db      	lsls	r3, r3, #3
 800ef2e:	440b      	add	r3, r1
 800ef30:	3314      	adds	r3, #20
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ef36:	7afb      	ldrb	r3, [r7, #11]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00e      	beq.n	800ef5a <etharp_cleanup_netif+0x46>
 800ef3c:	490c      	ldr	r1, [pc, #48]	; (800ef70 <etharp_cleanup_netif+0x5c>)
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	4613      	mov	r3, r2
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	4413      	add	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	440b      	add	r3, r1
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d102      	bne.n	800ef5a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f7ff fce5 	bl	800e924 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b09      	cmp	r3, #9
 800ef64:	dddd      	ble.n	800ef22 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	20008c88 	.word	0x20008c88

0800ef74 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ef74:	b5b0      	push	{r4, r5, r7, lr}
 800ef76:	b08a      	sub	sp, #40	; 0x28
 800ef78:	af04      	add	r7, sp, #16
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d107      	bne.n	800ef94 <etharp_input+0x20>
 800ef84:	4b3d      	ldr	r3, [pc, #244]	; (800f07c <etharp_input+0x108>)
 800ef86:	f240 228a 	movw	r2, #650	; 0x28a
 800ef8a:	493d      	ldr	r1, [pc, #244]	; (800f080 <etharp_input+0x10c>)
 800ef8c:	483d      	ldr	r0, [pc, #244]	; (800f084 <etharp_input+0x110>)
 800ef8e:	f002 f88f 	bl	80110b0 <iprintf>
 800ef92:	e06f      	b.n	800f074 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	881b      	ldrh	r3, [r3, #0]
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efa4:	d10c      	bne.n	800efc0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800efaa:	2b06      	cmp	r3, #6
 800efac:	d108      	bne.n	800efc0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800efb2:	2b04      	cmp	r3, #4
 800efb4:	d104      	bne.n	800efc0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	885b      	ldrh	r3, [r3, #2]
 800efba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800efbc:	2b08      	cmp	r3, #8
 800efbe:	d003      	beq.n	800efc8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7f8 fec3 	bl	8007d4c <pbuf_free>
    return;
 800efc6:	e055      	b.n	800f074 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	330e      	adds	r3, #14
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	3318      	adds	r3, #24
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	3304      	adds	r3, #4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <etharp_input+0x74>
    for_us = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	75fb      	strb	r3, [r7, #23]
 800efe6:	e009      	b.n	800effc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	3304      	adds	r3, #4
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	bf0c      	ite	eq
 800eff4:	2301      	moveq	r3, #1
 800eff6:	2300      	movne	r3, #0
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f103 0208 	add.w	r2, r3, #8
 800f002:	7dfb      	ldrb	r3, [r7, #23]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <etharp_input+0x98>
 800f008:	2301      	movs	r3, #1
 800f00a:	e000      	b.n	800f00e <etharp_input+0x9a>
 800f00c:	2302      	movs	r3, #2
 800f00e:	f107 010c 	add.w	r1, r7, #12
 800f012:	6838      	ldr	r0, [r7, #0]
 800f014:	f7ff fed8 	bl	800edc8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	88db      	ldrh	r3, [r3, #6]
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f022:	d003      	beq.n	800f02c <etharp_input+0xb8>
 800f024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f028:	d01e      	beq.n	800f068 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f02a:	e020      	b.n	800f06e <etharp_input+0xfa>
      if (for_us) {
 800f02c:	7dfb      	ldrb	r3, [r7, #23]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01c      	beq.n	800f06c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f048:	693a      	ldr	r2, [r7, #16]
 800f04a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f04c:	2102      	movs	r1, #2
 800f04e:	9103      	str	r1, [sp, #12]
 800f050:	f107 010c 	add.w	r1, r7, #12
 800f054:	9102      	str	r1, [sp, #8]
 800f056:	9201      	str	r2, [sp, #4]
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	462b      	mov	r3, r5
 800f05c:	4622      	mov	r2, r4
 800f05e:	4601      	mov	r1, r0
 800f060:	6838      	ldr	r0, [r7, #0]
 800f062:	f000 faeb 	bl	800f63c <etharp_raw>
      break;
 800f066:	e001      	b.n	800f06c <etharp_input+0xf8>
      break;
 800f068:	bf00      	nop
 800f06a:	e000      	b.n	800f06e <etharp_input+0xfa>
      break;
 800f06c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7f8 fe6c 	bl	8007d4c <pbuf_free>
}
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bdb0      	pop	{r4, r5, r7, pc}
 800f07a:	bf00      	nop
 800f07c:	080144cc 	.word	0x080144cc
 800f080:	0801461c 	.word	0x0801461c
 800f084:	08014544 	.word	0x08014544

0800f088 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4613      	mov	r3, r2
 800f094:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f096:	79fa      	ldrb	r2, [r7, #7]
 800f098:	4944      	ldr	r1, [pc, #272]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f09a:	4613      	mov	r3, r2
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4413      	add	r3, r2
 800f0a0:	00db      	lsls	r3, r3, #3
 800f0a2:	440b      	add	r3, r1
 800f0a4:	3314      	adds	r3, #20
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d806      	bhi.n	800f0ba <etharp_output_to_arp_index+0x32>
 800f0ac:	4b40      	ldr	r3, [pc, #256]	; (800f1b0 <etharp_output_to_arp_index+0x128>)
 800f0ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f0b2:	4940      	ldr	r1, [pc, #256]	; (800f1b4 <etharp_output_to_arp_index+0x12c>)
 800f0b4:	4840      	ldr	r0, [pc, #256]	; (800f1b8 <etharp_output_to_arp_index+0x130>)
 800f0b6:	f001 fffb 	bl	80110b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f0ba:	79fa      	ldrb	r2, [r7, #7]
 800f0bc:	493b      	ldr	r1, [pc, #236]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f0be:	4613      	mov	r3, r2
 800f0c0:	005b      	lsls	r3, r3, #1
 800f0c2:	4413      	add	r3, r2
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	440b      	add	r3, r1
 800f0c8:	3314      	adds	r3, #20
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d153      	bne.n	800f178 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f0d0:	79fa      	ldrb	r2, [r7, #7]
 800f0d2:	4936      	ldr	r1, [pc, #216]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	4413      	add	r3, r2
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	440b      	add	r3, r1
 800f0de:	3312      	adds	r3, #18
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f0e6:	d919      	bls.n	800f11c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f0e8:	79fa      	ldrb	r2, [r7, #7]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	4413      	add	r3, r2
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	4a2e      	ldr	r2, [pc, #184]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f000 fb4c 	bl	800f798 <etharp_request>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d138      	bne.n	800f178 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f106:	79fa      	ldrb	r2, [r7, #7]
 800f108:	4928      	ldr	r1, [pc, #160]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f10a:	4613      	mov	r3, r2
 800f10c:	005b      	lsls	r3, r3, #1
 800f10e:	4413      	add	r3, r2
 800f110:	00db      	lsls	r3, r3, #3
 800f112:	440b      	add	r3, r1
 800f114:	3314      	adds	r3, #20
 800f116:	2203      	movs	r2, #3
 800f118:	701a      	strb	r2, [r3, #0]
 800f11a:	e02d      	b.n	800f178 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f11c:	79fa      	ldrb	r2, [r7, #7]
 800f11e:	4923      	ldr	r1, [pc, #140]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f120:	4613      	mov	r3, r2
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	4413      	add	r3, r2
 800f126:	00db      	lsls	r3, r3, #3
 800f128:	440b      	add	r3, r1
 800f12a:	3312      	adds	r3, #18
 800f12c:	881b      	ldrh	r3, [r3, #0]
 800f12e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f132:	d321      	bcc.n	800f178 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f134:	79fa      	ldrb	r2, [r7, #7]
 800f136:	4613      	mov	r3, r2
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	4413      	add	r3, r2
 800f13c:	00db      	lsls	r3, r3, #3
 800f13e:	4a1b      	ldr	r2, [pc, #108]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f140:	4413      	add	r3, r2
 800f142:	1d19      	adds	r1, r3, #4
 800f144:	79fa      	ldrb	r2, [r7, #7]
 800f146:	4613      	mov	r3, r2
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	4413      	add	r3, r2
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	3308      	adds	r3, #8
 800f150:	4a16      	ldr	r2, [pc, #88]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f152:	4413      	add	r3, r2
 800f154:	3304      	adds	r3, #4
 800f156:	461a      	mov	r2, r3
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 fafb 	bl	800f754 <etharp_request_dst>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d109      	bne.n	800f178 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f164:	79fa      	ldrb	r2, [r7, #7]
 800f166:	4911      	ldr	r1, [pc, #68]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f168:	4613      	mov	r3, r2
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	4413      	add	r3, r2
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	440b      	add	r3, r1
 800f172:	3314      	adds	r3, #20
 800f174:	2203      	movs	r2, #3
 800f176:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f17e:	79fa      	ldrb	r2, [r7, #7]
 800f180:	4613      	mov	r3, r2
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	4413      	add	r3, r2
 800f186:	00db      	lsls	r3, r3, #3
 800f188:	3308      	adds	r3, #8
 800f18a:	4a08      	ldr	r2, [pc, #32]	; (800f1ac <etharp_output_to_arp_index+0x124>)
 800f18c:	4413      	add	r3, r2
 800f18e:	3304      	adds	r3, #4
 800f190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f194:	9200      	str	r2, [sp, #0]
 800f196:	460a      	mov	r2, r1
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f001 fe40 	bl	8010e20 <ethernet_output>
 800f1a0:	4603      	mov	r3, r0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20008c88 	.word	0x20008c88
 800f1b0:	080144cc 	.word	0x080144cc
 800f1b4:	0801463c 	.word	0x0801463c
 800f1b8:	08014544 	.word	0x08014544

0800f1bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08a      	sub	sp, #40	; 0x28
 800f1c0:	af02      	add	r7, sp, #8
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <etharp_output+0x24>
 800f1d2:	4b73      	ldr	r3, [pc, #460]	; (800f3a0 <etharp_output+0x1e4>)
 800f1d4:	f240 321e 	movw	r2, #798	; 0x31e
 800f1d8:	4972      	ldr	r1, [pc, #456]	; (800f3a4 <etharp_output+0x1e8>)
 800f1da:	4873      	ldr	r0, [pc, #460]	; (800f3a8 <etharp_output+0x1ec>)
 800f1dc:	f001 ff68 	bl	80110b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <etharp_output+0x38>
 800f1e6:	4b6e      	ldr	r3, [pc, #440]	; (800f3a0 <etharp_output+0x1e4>)
 800f1e8:	f240 321f 	movw	r2, #799	; 0x31f
 800f1ec:	496f      	ldr	r1, [pc, #444]	; (800f3ac <etharp_output+0x1f0>)
 800f1ee:	486e      	ldr	r0, [pc, #440]	; (800f3a8 <etharp_output+0x1ec>)
 800f1f0:	f001 ff5e 	bl	80110b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d106      	bne.n	800f208 <etharp_output+0x4c>
 800f1fa:	4b69      	ldr	r3, [pc, #420]	; (800f3a0 <etharp_output+0x1e4>)
 800f1fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f200:	496b      	ldr	r1, [pc, #428]	; (800f3b0 <etharp_output+0x1f4>)
 800f202:	4869      	ldr	r0, [pc, #420]	; (800f3a8 <etharp_output+0x1ec>)
 800f204:	f001 ff54 	bl	80110b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	68f9      	ldr	r1, [r7, #12]
 800f20e:	4618      	mov	r0, r3
 800f210:	f000 fef8 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d002      	beq.n	800f220 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f21a:	4b66      	ldr	r3, [pc, #408]	; (800f3b4 <etharp_output+0x1f8>)
 800f21c:	61fb      	str	r3, [r7, #28]
 800f21e:	e0af      	b.n	800f380 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f228:	2be0      	cmp	r3, #224	; 0xe0
 800f22a:	d118      	bne.n	800f25e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f22c:	2301      	movs	r3, #1
 800f22e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f230:	2300      	movs	r3, #0
 800f232:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f234:	235e      	movs	r3, #94	; 0x5e
 800f236:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3301      	adds	r3, #1
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f242:	b2db      	uxtb	r3, r3
 800f244:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	3302      	adds	r3, #2
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	3303      	adds	r3, #3
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f256:	f107 0310 	add.w	r3, r7, #16
 800f25a:	61fb      	str	r3, [r7, #28]
 800f25c:	e090      	b.n	800f380 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	3304      	adds	r3, #4
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	405a      	eors	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	3308      	adds	r3, #8
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4013      	ands	r3, r2
 800f272:	2b00      	cmp	r3, #0
 800f274:	d012      	beq.n	800f29c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f27c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f280:	4293      	cmp	r3, r2
 800f282:	d00b      	beq.n	800f29c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	330c      	adds	r3, #12
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	330c      	adds	r3, #12
 800f292:	61bb      	str	r3, [r7, #24]
 800f294:	e002      	b.n	800f29c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f296:	f06f 0303 	mvn.w	r3, #3
 800f29a:	e07d      	b.n	800f398 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f29c:	4b46      	ldr	r3, [pc, #280]	; (800f3b8 <etharp_output+0x1fc>)
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4a46      	ldr	r2, [pc, #280]	; (800f3bc <etharp_output+0x200>)
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	440b      	add	r3, r1
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	4413      	add	r3, r2
 800f2ae:	3314      	adds	r3, #20
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d925      	bls.n	800f302 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f2b6:	4b40      	ldr	r3, [pc, #256]	; (800f3b8 <etharp_output+0x1fc>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4a3f      	ldr	r2, [pc, #252]	; (800f3bc <etharp_output+0x200>)
 800f2be:	460b      	mov	r3, r1
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	440b      	add	r3, r1
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	4413      	add	r3, r2
 800f2c8:	3308      	adds	r3, #8
 800f2ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d117      	bne.n	800f302 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	4b38      	ldr	r3, [pc, #224]	; (800f3b8 <etharp_output+0x1fc>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	4618      	mov	r0, r3
 800f2dc:	4937      	ldr	r1, [pc, #220]	; (800f3bc <etharp_output+0x200>)
 800f2de:	4603      	mov	r3, r0
 800f2e0:	005b      	lsls	r3, r3, #1
 800f2e2:	4403      	add	r3, r0
 800f2e4:	00db      	lsls	r3, r3, #3
 800f2e6:	440b      	add	r3, r1
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d108      	bne.n	800f302 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f2f0:	4b31      	ldr	r3, [pc, #196]	; (800f3b8 <etharp_output+0x1fc>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f7ff fec5 	bl	800f088 <etharp_output_to_arp_index>
 800f2fe:	4603      	mov	r3, r0
 800f300:	e04a      	b.n	800f398 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f302:	2300      	movs	r3, #0
 800f304:	75fb      	strb	r3, [r7, #23]
 800f306:	e031      	b.n	800f36c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f308:	7dfa      	ldrb	r2, [r7, #23]
 800f30a:	492c      	ldr	r1, [pc, #176]	; (800f3bc <etharp_output+0x200>)
 800f30c:	4613      	mov	r3, r2
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	4413      	add	r3, r2
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	440b      	add	r3, r1
 800f316:	3314      	adds	r3, #20
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d923      	bls.n	800f366 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f31e:	7dfa      	ldrb	r2, [r7, #23]
 800f320:	4926      	ldr	r1, [pc, #152]	; (800f3bc <etharp_output+0x200>)
 800f322:	4613      	mov	r3, r2
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	4413      	add	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	440b      	add	r3, r1
 800f32c:	3308      	adds	r3, #8
 800f32e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	429a      	cmp	r2, r3
 800f334:	d117      	bne.n	800f366 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	6819      	ldr	r1, [r3, #0]
 800f33a:	7dfa      	ldrb	r2, [r7, #23]
 800f33c:	481f      	ldr	r0, [pc, #124]	; (800f3bc <etharp_output+0x200>)
 800f33e:	4613      	mov	r3, r2
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	4413      	add	r3, r2
 800f344:	00db      	lsls	r3, r3, #3
 800f346:	4403      	add	r3, r0
 800f348:	3304      	adds	r3, #4
 800f34a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f34c:	4299      	cmp	r1, r3
 800f34e:	d10a      	bne.n	800f366 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f350:	4a19      	ldr	r2, [pc, #100]	; (800f3b8 <etharp_output+0x1fc>)
 800f352:	7dfb      	ldrb	r3, [r7, #23]
 800f354:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f356:	7dfb      	ldrb	r3, [r7, #23]
 800f358:	461a      	mov	r2, r3
 800f35a:	68b9      	ldr	r1, [r7, #8]
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f7ff fe93 	bl	800f088 <etharp_output_to_arp_index>
 800f362:	4603      	mov	r3, r0
 800f364:	e018      	b.n	800f398 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f366:	7dfb      	ldrb	r3, [r7, #23]
 800f368:	3301      	adds	r3, #1
 800f36a:	75fb      	strb	r3, [r7, #23]
 800f36c:	7dfb      	ldrb	r3, [r7, #23]
 800f36e:	2b09      	cmp	r3, #9
 800f370:	d9ca      	bls.n	800f308 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	69b9      	ldr	r1, [r7, #24]
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f000 f822 	bl	800f3c0 <etharp_query>
 800f37c:	4603      	mov	r3, r0
 800f37e:	e00b      	b.n	800f398 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	68b9      	ldr	r1, [r7, #8]
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f001 fd45 	bl	8010e20 <ethernet_output>
 800f396:	4603      	mov	r3, r0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3720      	adds	r7, #32
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	080144cc 	.word	0x080144cc
 800f3a4:	0801461c 	.word	0x0801461c
 800f3a8:	08014544 	.word	0x08014544
 800f3ac:	0801466c 	.word	0x0801466c
 800f3b0:	0801460c 	.word	0x0801460c
 800f3b4:	08015614 	.word	0x08015614
 800f3b8:	20008d78 	.word	0x20008d78
 800f3bc:	20008c88 	.word	0x20008c88

0800f3c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08c      	sub	sp, #48	; 0x30
 800f3c4:	af02      	add	r7, sp, #8
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	3326      	adds	r3, #38	; 0x26
 800f3d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f3d2:	23ff      	movs	r3, #255	; 0xff
 800f3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68f9      	ldr	r1, [r7, #12]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 fe0e 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d10c      	bne.n	800f408 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3f6:	2be0      	cmp	r3, #224	; 0xe0
 800f3f8:	d006      	beq.n	800f408 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d102      	bne.n	800f40e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f408:	f06f 030f 	mvn.w	r3, #15
 800f40c:	e101      	b.n	800f612 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	2101      	movs	r1, #1
 800f412:	68b8      	ldr	r0, [r7, #8]
 800f414:	f7ff fb60 	bl	800ead8 <etharp_find_entry>
 800f418:	4603      	mov	r3, r0
 800f41a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f41c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f420:	2b00      	cmp	r3, #0
 800f422:	da02      	bge.n	800f42a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f424:	8a7b      	ldrh	r3, [r7, #18]
 800f426:	b25b      	sxtb	r3, r3
 800f428:	e0f3      	b.n	800f612 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f42a:	8a7b      	ldrh	r3, [r7, #18]
 800f42c:	2b7e      	cmp	r3, #126	; 0x7e
 800f42e:	d906      	bls.n	800f43e <etharp_query+0x7e>
 800f430:	4b7a      	ldr	r3, [pc, #488]	; (800f61c <etharp_query+0x25c>)
 800f432:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f436:	497a      	ldr	r1, [pc, #488]	; (800f620 <etharp_query+0x260>)
 800f438:	487a      	ldr	r0, [pc, #488]	; (800f624 <etharp_query+0x264>)
 800f43a:	f001 fe39 	bl	80110b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f43e:	8a7b      	ldrh	r3, [r7, #18]
 800f440:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f442:	7c7a      	ldrb	r2, [r7, #17]
 800f444:	4978      	ldr	r1, [pc, #480]	; (800f628 <etharp_query+0x268>)
 800f446:	4613      	mov	r3, r2
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	4413      	add	r3, r2
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	440b      	add	r3, r1
 800f450:	3314      	adds	r3, #20
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d115      	bne.n	800f484 <etharp_query+0xc4>
    is_new_entry = 1;
 800f458:	2301      	movs	r3, #1
 800f45a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f45c:	7c7a      	ldrb	r2, [r7, #17]
 800f45e:	4972      	ldr	r1, [pc, #456]	; (800f628 <etharp_query+0x268>)
 800f460:	4613      	mov	r3, r2
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	4413      	add	r3, r2
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	440b      	add	r3, r1
 800f46a:	3314      	adds	r3, #20
 800f46c:	2201      	movs	r2, #1
 800f46e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f470:	7c7a      	ldrb	r2, [r7, #17]
 800f472:	496d      	ldr	r1, [pc, #436]	; (800f628 <etharp_query+0x268>)
 800f474:	4613      	mov	r3, r2
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	4413      	add	r3, r2
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	440b      	add	r3, r1
 800f47e:	3308      	adds	r3, #8
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f484:	7c7a      	ldrb	r2, [r7, #17]
 800f486:	4968      	ldr	r1, [pc, #416]	; (800f628 <etharp_query+0x268>)
 800f488:	4613      	mov	r3, r2
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	440b      	add	r3, r1
 800f492:	3314      	adds	r3, #20
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d011      	beq.n	800f4be <etharp_query+0xfe>
 800f49a:	7c7a      	ldrb	r2, [r7, #17]
 800f49c:	4962      	ldr	r1, [pc, #392]	; (800f628 <etharp_query+0x268>)
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	440b      	add	r3, r1
 800f4a8:	3314      	adds	r3, #20
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d806      	bhi.n	800f4be <etharp_query+0xfe>
 800f4b0:	4b5a      	ldr	r3, [pc, #360]	; (800f61c <etharp_query+0x25c>)
 800f4b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f4b6:	495d      	ldr	r1, [pc, #372]	; (800f62c <etharp_query+0x26c>)
 800f4b8:	485a      	ldr	r0, [pc, #360]	; (800f624 <etharp_query+0x264>)
 800f4ba:	f001 fdf9 	bl	80110b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f4be:	6a3b      	ldr	r3, [r7, #32]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d102      	bne.n	800f4ca <etharp_query+0x10a>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10c      	bne.n	800f4e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 f963 	bl	800f798 <etharp_request>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d102      	bne.n	800f4e4 <etharp_query+0x124>
      return result;
 800f4de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4e2:	e096      	b.n	800f612 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <etharp_query+0x138>
 800f4ea:	4b4c      	ldr	r3, [pc, #304]	; (800f61c <etharp_query+0x25c>)
 800f4ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f4f0:	494f      	ldr	r1, [pc, #316]	; (800f630 <etharp_query+0x270>)
 800f4f2:	484c      	ldr	r0, [pc, #304]	; (800f624 <etharp_query+0x264>)
 800f4f4:	f001 fddc 	bl	80110b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f4f8:	7c7a      	ldrb	r2, [r7, #17]
 800f4fa:	494b      	ldr	r1, [pc, #300]	; (800f628 <etharp_query+0x268>)
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	005b      	lsls	r3, r3, #1
 800f500:	4413      	add	r3, r2
 800f502:	00db      	lsls	r3, r3, #3
 800f504:	440b      	add	r3, r1
 800f506:	3314      	adds	r3, #20
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d917      	bls.n	800f53e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f50e:	4a49      	ldr	r2, [pc, #292]	; (800f634 <etharp_query+0x274>)
 800f510:	7c7b      	ldrb	r3, [r7, #17]
 800f512:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f514:	7c7a      	ldrb	r2, [r7, #17]
 800f516:	4613      	mov	r3, r2
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	4413      	add	r3, r2
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	3308      	adds	r3, #8
 800f520:	4a41      	ldr	r2, [pc, #260]	; (800f628 <etharp_query+0x268>)
 800f522:	4413      	add	r3, r2
 800f524:	3304      	adds	r3, #4
 800f526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f52a:	9200      	str	r2, [sp, #0]
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	6879      	ldr	r1, [r7, #4]
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f001 fc75 	bl	8010e20 <ethernet_output>
 800f536:	4603      	mov	r3, r0
 800f538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f53c:	e067      	b.n	800f60e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f53e:	7c7a      	ldrb	r2, [r7, #17]
 800f540:	4939      	ldr	r1, [pc, #228]	; (800f628 <etharp_query+0x268>)
 800f542:	4613      	mov	r3, r2
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	4413      	add	r3, r2
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	440b      	add	r3, r1
 800f54c:	3314      	adds	r3, #20
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d15c      	bne.n	800f60e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f554:	2300      	movs	r3, #0
 800f556:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f55c:	e01c      	b.n	800f598 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	895a      	ldrh	r2, [r3, #10]
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	891b      	ldrh	r3, [r3, #8]
 800f566:	429a      	cmp	r2, r3
 800f568:	d10a      	bne.n	800f580 <etharp_query+0x1c0>
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d006      	beq.n	800f580 <etharp_query+0x1c0>
 800f572:	4b2a      	ldr	r3, [pc, #168]	; (800f61c <etharp_query+0x25c>)
 800f574:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f578:	492f      	ldr	r1, [pc, #188]	; (800f638 <etharp_query+0x278>)
 800f57a:	482a      	ldr	r0, [pc, #168]	; (800f624 <etharp_query+0x264>)
 800f57c:	f001 fd98 	bl	80110b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	7b1b      	ldrb	r3, [r3, #12]
 800f584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <etharp_query+0x1d2>
        copy_needed = 1;
 800f58c:	2301      	movs	r3, #1
 800f58e:	61bb      	str	r3, [r7, #24]
        break;
 800f590:	e005      	b.n	800f59e <etharp_query+0x1de>
      }
      p = p->next;
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1df      	bne.n	800f55e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d007      	beq.n	800f5b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f5aa:	200e      	movs	r0, #14
 800f5ac:	f7f8 fe2a 	bl	8008204 <pbuf_clone>
 800f5b0:	61f8      	str	r0, [r7, #28]
 800f5b2:	e004      	b.n	800f5be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f5b8:	69f8      	ldr	r0, [r7, #28]
 800f5ba:	f7f8 fc67 	bl	8007e8c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d021      	beq.n	800f608 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f5c4:	7c7a      	ldrb	r2, [r7, #17]
 800f5c6:	4918      	ldr	r1, [pc, #96]	; (800f628 <etharp_query+0x268>)
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	005b      	lsls	r3, r3, #1
 800f5cc:	4413      	add	r3, r2
 800f5ce:	00db      	lsls	r3, r3, #3
 800f5d0:	440b      	add	r3, r1
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00a      	beq.n	800f5ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f5d8:	7c7a      	ldrb	r2, [r7, #17]
 800f5da:	4913      	ldr	r1, [pc, #76]	; (800f628 <etharp_query+0x268>)
 800f5dc:	4613      	mov	r3, r2
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	4413      	add	r3, r2
 800f5e2:	00db      	lsls	r3, r3, #3
 800f5e4:	440b      	add	r3, r1
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7f8 fbaf 	bl	8007d4c <pbuf_free>
      }
      arp_table[i].q = p;
 800f5ee:	7c7a      	ldrb	r2, [r7, #17]
 800f5f0:	490d      	ldr	r1, [pc, #52]	; (800f628 <etharp_query+0x268>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4413      	add	r3, r2
 800f5f8:	00db      	lsls	r3, r3, #3
 800f5fa:	440b      	add	r3, r1
 800f5fc:	69fa      	ldr	r2, [r7, #28]
 800f5fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f606:	e002      	b.n	800f60e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f608:	23ff      	movs	r3, #255	; 0xff
 800f60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f60e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f612:	4618      	mov	r0, r3
 800f614:	3728      	adds	r7, #40	; 0x28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	080144cc 	.word	0x080144cc
 800f620:	08014678 	.word	0x08014678
 800f624:	08014544 	.word	0x08014544
 800f628:	20008c88 	.word	0x20008c88
 800f62c:	08014688 	.word	0x08014688
 800f630:	0801466c 	.word	0x0801466c
 800f634:	20008d78 	.word	0x20008d78
 800f638:	080146b0 	.word	0x080146b0

0800f63c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08a      	sub	sp, #40	; 0x28
 800f640:	af02      	add	r7, sp, #8
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d106      	bne.n	800f662 <etharp_raw+0x26>
 800f654:	4b3a      	ldr	r3, [pc, #232]	; (800f740 <etharp_raw+0x104>)
 800f656:	f240 4257 	movw	r2, #1111	; 0x457
 800f65a:	493a      	ldr	r1, [pc, #232]	; (800f744 <etharp_raw+0x108>)
 800f65c:	483a      	ldr	r0, [pc, #232]	; (800f748 <etharp_raw+0x10c>)
 800f65e:	f001 fd27 	bl	80110b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f662:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f666:	211c      	movs	r1, #28
 800f668:	200e      	movs	r0, #14
 800f66a:	f7f8 f88b 	bl	8007784 <pbuf_alloc>
 800f66e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d102      	bne.n	800f67c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f676:	f04f 33ff 	mov.w	r3, #4294967295
 800f67a:	e05d      	b.n	800f738 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	895b      	ldrh	r3, [r3, #10]
 800f680:	2b1b      	cmp	r3, #27
 800f682:	d806      	bhi.n	800f692 <etharp_raw+0x56>
 800f684:	4b2e      	ldr	r3, [pc, #184]	; (800f740 <etharp_raw+0x104>)
 800f686:	f240 4262 	movw	r2, #1122	; 0x462
 800f68a:	4930      	ldr	r1, [pc, #192]	; (800f74c <etharp_raw+0x110>)
 800f68c:	482e      	ldr	r0, [pc, #184]	; (800f748 <etharp_raw+0x10c>)
 800f68e:	f001 fd0f 	bl	80110b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f698:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7f6 ffc2 	bl	8006624 <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f6ae:	2b06      	cmp	r3, #6
 800f6b0:	d006      	beq.n	800f6c0 <etharp_raw+0x84>
 800f6b2:	4b23      	ldr	r3, [pc, #140]	; (800f740 <etharp_raw+0x104>)
 800f6b4:	f240 4269 	movw	r2, #1129	; 0x469
 800f6b8:	4925      	ldr	r1, [pc, #148]	; (800f750 <etharp_raw+0x114>)
 800f6ba:	4823      	ldr	r0, [pc, #140]	; (800f748 <etharp_raw+0x10c>)
 800f6bc:	f001 fcf8 	bl	80110b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	2206      	movs	r2, #6
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f001 fdea 	bl	80112a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	3312      	adds	r3, #18
 800f6d2:	2206      	movs	r2, #6
 800f6d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f001 fde3 	bl	80112a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	330e      	adds	r3, #14
 800f6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6e2:	6812      	ldr	r2, [r2, #0]
 800f6e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	3318      	adds	r3, #24
 800f6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ec:	6812      	ldr	r2, [r2, #0]
 800f6ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	701a      	strb	r2, [r3, #0]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f042 0201 	orr.w	r2, r2, #1
 800f6fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	2200      	movs	r2, #0
 800f702:	f042 0208 	orr.w	r2, r2, #8
 800f706:	709a      	strb	r2, [r3, #2]
 800f708:	2200      	movs	r2, #0
 800f70a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	2206      	movs	r2, #6
 800f710:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2204      	movs	r2, #4
 800f716:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f718:	f640 0306 	movw	r3, #2054	; 0x806
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	69b9      	ldr	r1, [r7, #24]
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f001 fb7b 	bl	8010e20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f72a:	69b8      	ldr	r0, [r7, #24]
 800f72c:	f7f8 fb0e 	bl	8007d4c <pbuf_free>
  p = NULL;
 800f730:	2300      	movs	r3, #0
 800f732:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f734:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3720      	adds	r7, #32
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	080144cc 	.word	0x080144cc
 800f744:	0801461c 	.word	0x0801461c
 800f748:	08014544 	.word	0x08014544
 800f74c:	080146cc 	.word	0x080146cc
 800f750:	08014700 	.word	0x08014700

0800f754 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af04      	add	r7, sp, #16
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f770:	2201      	movs	r2, #1
 800f772:	9203      	str	r2, [sp, #12]
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	9202      	str	r2, [sp, #8]
 800f778:	4a06      	ldr	r2, [pc, #24]	; (800f794 <etharp_request_dst+0x40>)
 800f77a:	9201      	str	r2, [sp, #4]
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4603      	mov	r3, r0
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f7ff ff5a 	bl	800f63c <etharp_raw>
 800f788:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	0801561c 	.word	0x0801561c

0800f798 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f7a2:	4a05      	ldr	r2, [pc, #20]	; (800f7b8 <etharp_request+0x20>)
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff ffd4 	bl	800f754 <etharp_request_dst>
 800f7ac:	4603      	mov	r3, r0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	08015614 	.word	0x08015614

0800f7bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b08e      	sub	sp, #56	; 0x38
 800f7c0:	af04      	add	r7, sp, #16
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f7c6:	4b79      	ldr	r3, [pc, #484]	; (800f9ac <icmp_input+0x1f0>)
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	f003 030f 	and.w	r3, r3, #15
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f7dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7de:	2b13      	cmp	r3, #19
 800f7e0:	f240 80cd 	bls.w	800f97e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	895b      	ldrh	r3, [r3, #10]
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	f240 80ca 	bls.w	800f982 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f7f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 80b7 	beq.w	800f970 <icmp_input+0x1b4>
 800f802:	2b08      	cmp	r3, #8
 800f804:	f040 80b7 	bne.w	800f976 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f808:	4b69      	ldr	r3, [pc, #420]	; (800f9b0 <icmp_input+0x1f4>)
 800f80a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f80c:	4b67      	ldr	r3, [pc, #412]	; (800f9ac <icmp_input+0x1f0>)
 800f80e:	695b      	ldr	r3, [r3, #20]
 800f810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f814:	2be0      	cmp	r3, #224	; 0xe0
 800f816:	f000 80bb 	beq.w	800f990 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f81a:	4b64      	ldr	r3, [pc, #400]	; (800f9ac <icmp_input+0x1f0>)
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	4a63      	ldr	r2, [pc, #396]	; (800f9ac <icmp_input+0x1f0>)
 800f820:	6812      	ldr	r2, [r2, #0]
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f000 fbed 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f040 80b1 	bne.w	800f994 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	891b      	ldrh	r3, [r3, #8]
 800f836:	2b07      	cmp	r3, #7
 800f838:	f240 80a5 	bls.w	800f986 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f83c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f83e:	330e      	adds	r3, #14
 800f840:	4619      	mov	r1, r3
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7f8 f9ec 	bl	8007c20 <pbuf_add_header>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d04b      	beq.n	800f8e6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	891a      	ldrh	r2, [r3, #8]
 800f852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f854:	4413      	add	r3, r2
 800f856:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	891b      	ldrh	r3, [r3, #8]
 800f85c:	8b7a      	ldrh	r2, [r7, #26]
 800f85e:	429a      	cmp	r2, r3
 800f860:	f0c0 809a 	bcc.w	800f998 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f864:	8b7b      	ldrh	r3, [r7, #26]
 800f866:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f86a:	4619      	mov	r1, r3
 800f86c:	200e      	movs	r0, #14
 800f86e:	f7f7 ff89 	bl	8007784 <pbuf_alloc>
 800f872:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 8090 	beq.w	800f99c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	895b      	ldrh	r3, [r3, #10]
 800f880:	461a      	mov	r2, r3
 800f882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f884:	3308      	adds	r3, #8
 800f886:	429a      	cmp	r2, r3
 800f888:	d203      	bcs.n	800f892 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f88a:	6978      	ldr	r0, [r7, #20]
 800f88c:	f7f8 fa5e 	bl	8007d4c <pbuf_free>
          goto icmperr;
 800f890:	e085      	b.n	800f99e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f89a:	4618      	mov	r0, r3
 800f89c:	f001 fd01 	bl	80112a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6978      	ldr	r0, [r7, #20]
 800f8a6:	f7f8 f9cb 	bl	8007c40 <pbuf_remove_header>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d009      	beq.n	800f8c4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f8b0:	4b40      	ldr	r3, [pc, #256]	; (800f9b4 <icmp_input+0x1f8>)
 800f8b2:	22b6      	movs	r2, #182	; 0xb6
 800f8b4:	4940      	ldr	r1, [pc, #256]	; (800f9b8 <icmp_input+0x1fc>)
 800f8b6:	4841      	ldr	r0, [pc, #260]	; (800f9bc <icmp_input+0x200>)
 800f8b8:	f001 fbfa 	bl	80110b0 <iprintf>
          pbuf_free(r);
 800f8bc:	6978      	ldr	r0, [r7, #20]
 800f8be:	f7f8 fa45 	bl	8007d4c <pbuf_free>
          goto icmperr;
 800f8c2:	e06c      	b.n	800f99e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	6978      	ldr	r0, [r7, #20]
 800f8c8:	f7f8 fb58 	bl	8007f7c <pbuf_copy>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d003      	beq.n	800f8da <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f8d2:	6978      	ldr	r0, [r7, #20]
 800f8d4:	f7f8 fa3a 	bl	8007d4c <pbuf_free>
          goto icmperr;
 800f8d8:	e061      	b.n	800f99e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7f8 fa36 	bl	8007d4c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	607b      	str	r3, [r7, #4]
 800f8e4:	e00f      	b.n	800f906 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f8e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8e8:	330e      	adds	r3, #14
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7f8 f9a7 	bl	8007c40 <pbuf_remove_header>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d006      	beq.n	800f906 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f8f8:	4b2e      	ldr	r3, [pc, #184]	; (800f9b4 <icmp_input+0x1f8>)
 800f8fa:	22c7      	movs	r2, #199	; 0xc7
 800f8fc:	4930      	ldr	r1, [pc, #192]	; (800f9c0 <icmp_input+0x204>)
 800f8fe:	482f      	ldr	r0, [pc, #188]	; (800f9bc <icmp_input+0x200>)
 800f900:	f001 fbd6 	bl	80110b0 <iprintf>
          goto icmperr;
 800f904:	e04b      	b.n	800f99e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f90c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7f8 f985 	bl	8007c20 <pbuf_add_header>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d12b      	bne.n	800f974 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f92a:	4b20      	ldr	r3, [pc, #128]	; (800f9ac <icmp_input+0x1f0>)
 800f92c:	691a      	ldr	r2, [r3, #16]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2200      	movs	r2, #0
 800f936:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	2200      	movs	r2, #0
 800f93c:	709a      	strb	r2, [r3, #2]
 800f93e:	2200      	movs	r2, #0
 800f940:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	22ff      	movs	r2, #255	; 0xff
 800f946:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2200      	movs	r2, #0
 800f94c:	729a      	strb	r2, [r3, #10]
 800f94e:	2200      	movs	r2, #0
 800f950:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	9302      	str	r3, [sp, #8]
 800f956:	2301      	movs	r3, #1
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	2300      	movs	r3, #0
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	23ff      	movs	r3, #255	; 0xff
 800f960:	2200      	movs	r2, #0
 800f962:	69f9      	ldr	r1, [r7, #28]
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fa75 	bl	800fe54 <ip4_output_if>
 800f96a:	4603      	mov	r3, r0
 800f96c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f96e:	e001      	b.n	800f974 <icmp_input+0x1b8>
      break;
 800f970:	bf00      	nop
 800f972:	e000      	b.n	800f976 <icmp_input+0x1ba>
      break;
 800f974:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7f8 f9e8 	bl	8007d4c <pbuf_free>
  return;
 800f97c:	e013      	b.n	800f9a6 <icmp_input+0x1ea>
    goto lenerr;
 800f97e:	bf00      	nop
 800f980:	e002      	b.n	800f988 <icmp_input+0x1cc>
    goto lenerr;
 800f982:	bf00      	nop
 800f984:	e000      	b.n	800f988 <icmp_input+0x1cc>
        goto lenerr;
 800f986:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7f8 f9df 	bl	8007d4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f98e:	e00a      	b.n	800f9a6 <icmp_input+0x1ea>
        goto icmperr;
 800f990:	bf00      	nop
 800f992:	e004      	b.n	800f99e <icmp_input+0x1e2>
        goto icmperr;
 800f994:	bf00      	nop
 800f996:	e002      	b.n	800f99e <icmp_input+0x1e2>
          goto icmperr;
 800f998:	bf00      	nop
 800f99a:	e000      	b.n	800f99e <icmp_input+0x1e2>
          goto icmperr;
 800f99c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7f8 f9d4 	bl	8007d4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f9a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f9a6:	3728      	adds	r7, #40	; 0x28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	200056b8 	.word	0x200056b8
 800f9b0:	200056cc 	.word	0x200056cc
 800f9b4:	08014744 	.word	0x08014744
 800f9b8:	0801477c 	.word	0x0801477c
 800f9bc:	080147b4 	.word	0x080147b4
 800f9c0:	080147dc 	.word	0x080147dc

0800f9c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	2103      	movs	r1, #3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f814 	bl	800fa04 <icmp_send_response>
}
 800f9dc:	bf00      	nop
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	210b      	movs	r1, #11
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f804 	bl	800fa04 <icmp_send_response>
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08c      	sub	sp, #48	; 0x30
 800fa08:	af04      	add	r7, sp, #16
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
 800fa10:	4613      	mov	r3, r2
 800fa12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fa14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa18:	2124      	movs	r1, #36	; 0x24
 800fa1a:	2022      	movs	r0, #34	; 0x22
 800fa1c:	f7f7 feb2 	bl	8007784 <pbuf_alloc>
 800fa20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d04c      	beq.n	800fac2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	895b      	ldrh	r3, [r3, #10]
 800fa2c:	2b23      	cmp	r3, #35	; 0x23
 800fa2e:	d806      	bhi.n	800fa3e <icmp_send_response+0x3a>
 800fa30:	4b26      	ldr	r3, [pc, #152]	; (800facc <icmp_send_response+0xc8>)
 800fa32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fa36:	4926      	ldr	r1, [pc, #152]	; (800fad0 <icmp_send_response+0xcc>)
 800fa38:	4826      	ldr	r0, [pc, #152]	; (800fad4 <icmp_send_response+0xd0>)
 800fa3a:	f001 fb39 	bl	80110b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	78fa      	ldrb	r2, [r7, #3]
 800fa4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	78ba      	ldrb	r2, [r7, #2]
 800fa54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	711a      	strb	r2, [r3, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2200      	movs	r2, #0
 800fa64:	719a      	strb	r2, [r3, #6]
 800fa66:	2200      	movs	r2, #0
 800fa68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	f103 0008 	add.w	r0, r3, #8
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	221c      	movs	r2, #28
 800fa78:	4619      	mov	r1, r3
 800fa7a:	f001 fc12 	bl	80112a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa84:	f107 030c 	add.w	r3, r7, #12
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 f825 	bl	800fad8 <ip4_route>
 800fa8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d011      	beq.n	800faba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	709a      	strb	r2, [r3, #2]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800faa0:	f107 020c 	add.w	r2, r7, #12
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	9302      	str	r3, [sp, #8]
 800faa8:	2301      	movs	r3, #1
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	2300      	movs	r3, #0
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	23ff      	movs	r3, #255	; 0xff
 800fab2:	2100      	movs	r1, #0
 800fab4:	69f8      	ldr	r0, [r7, #28]
 800fab6:	f000 f9cd 	bl	800fe54 <ip4_output_if>
  }
  pbuf_free(q);
 800faba:	69f8      	ldr	r0, [r7, #28]
 800fabc:	f7f8 f946 	bl	8007d4c <pbuf_free>
 800fac0:	e000      	b.n	800fac4 <icmp_send_response+0xc0>
    return;
 800fac2:	bf00      	nop
}
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	08014744 	.word	0x08014744
 800fad0:	08014810 	.word	0x08014810
 800fad4:	080147b4 	.word	0x080147b4

0800fad8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fae0:	4b33      	ldr	r3, [pc, #204]	; (800fbb0 <ip4_route+0xd8>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	60fb      	str	r3, [r7, #12]
 800fae6:	e036      	b.n	800fb56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d02b      	beq.n	800fb50 <ip4_route+0x78>
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fafe:	089b      	lsrs	r3, r3, #2
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d022      	beq.n	800fb50 <ip4_route+0x78>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d01d      	beq.n	800fb50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	405a      	eors	r2, r3
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3308      	adds	r3, #8
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4013      	ands	r3, r2
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	e038      	b.n	800fba2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d108      	bne.n	800fb50 <ip4_route+0x78>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	330c      	adds	r3, #12
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d101      	bne.n	800fb50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	e028      	b.n	800fba2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	60fb      	str	r3, [r7, #12]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1c5      	bne.n	800fae8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb5c:	4b15      	ldr	r3, [pc, #84]	; (800fbb4 <ip4_route+0xdc>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d01a      	beq.n	800fb9a <ip4_route+0xc2>
 800fb64:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <ip4_route+0xdc>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d012      	beq.n	800fb9a <ip4_route+0xc2>
 800fb74:	4b0f      	ldr	r3, [pc, #60]	; (800fbb4 <ip4_route+0xdc>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb7c:	f003 0304 	and.w	r3, r3, #4
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00a      	beq.n	800fb9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb84:	4b0b      	ldr	r3, [pc, #44]	; (800fbb4 <ip4_route+0xdc>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3304      	adds	r3, #4
 800fb8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	2b7f      	cmp	r3, #127	; 0x7f
 800fb98:	d101      	bne.n	800fb9e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e001      	b.n	800fba2 <ip4_route+0xca>
  }

  return netif_default;
 800fb9e:	4b05      	ldr	r3, [pc, #20]	; (800fbb4 <ip4_route+0xdc>)
 800fba0:	681b      	ldr	r3, [r3, #0]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	20008c1c 	.word	0x20008c1c
 800fbb4:	20008c20 	.word	0x20008c20

0800fbb8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbc6:	f003 0301 	and.w	r3, r3, #1
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d016      	beq.n	800fbfe <ip4_input_accept+0x46>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d011      	beq.n	800fbfe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbda:	4b0b      	ldr	r3, [pc, #44]	; (800fc08 <ip4_input_accept+0x50>)
 800fbdc:	695a      	ldr	r2, [r3, #20]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d008      	beq.n	800fbfa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fbe8:	4b07      	ldr	r3, [pc, #28]	; (800fc08 <ip4_input_accept+0x50>)
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	6879      	ldr	r1, [r7, #4]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 fa08 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800fbf4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e000      	b.n	800fc00 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	200056b8 	.word	0x200056b8

0800fc0c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	091b      	lsrs	r3, r3, #4
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	2b04      	cmp	r3, #4
 800fc26:	d004      	beq.n	800fc32 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7f8 f88f 	bl	8007d4c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e107      	b.n	800fe42 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	f003 030f 	and.w	r3, r3, #15
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f6 fceb 	bl	8006624 <lwip_htons>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	891b      	ldrh	r3, [r3, #8]
 800fc56:	89ba      	ldrh	r2, [r7, #12]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d204      	bcs.n	800fc66 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fc5c:	89bb      	ldrh	r3, [r7, #12]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7f7 feed 	bl	8007a40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	895b      	ldrh	r3, [r3, #10]
 800fc6a:	89fa      	ldrh	r2, [r7, #14]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d807      	bhi.n	800fc80 <ip4_input+0x74>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	891b      	ldrh	r3, [r3, #8]
 800fc74:	89ba      	ldrh	r2, [r7, #12]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d802      	bhi.n	800fc80 <ip4_input+0x74>
 800fc7a:	89fb      	ldrh	r3, [r7, #14]
 800fc7c:	2b13      	cmp	r3, #19
 800fc7e:	d804      	bhi.n	800fc8a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7f8 f863 	bl	8007d4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	e0db      	b.n	800fe42 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	4a6f      	ldr	r2, [pc, #444]	; (800fe4c <ip4_input+0x240>)
 800fc90:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	4a6d      	ldr	r2, [pc, #436]	; (800fe4c <ip4_input+0x240>)
 800fc98:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc9a:	4b6c      	ldr	r3, [pc, #432]	; (800fe4c <ip4_input+0x240>)
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fca2:	2be0      	cmp	r3, #224	; 0xe0
 800fca4:	d112      	bne.n	800fccc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcac:	f003 0301 	and.w	r3, r3, #1
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <ip4_input+0xba>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	3304      	adds	r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <ip4_input+0xba>
      netif = inp;
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	613b      	str	r3, [r7, #16]
 800fcc4:	e02a      	b.n	800fd1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	613b      	str	r3, [r7, #16]
 800fcca:	e027      	b.n	800fd1c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fccc:	6838      	ldr	r0, [r7, #0]
 800fcce:	f7ff ff73 	bl	800fbb8 <ip4_input_accept>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <ip4_input+0xd2>
      netif = inp;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	613b      	str	r3, [r7, #16]
 800fcdc:	e01e      	b.n	800fd1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800fcde:	2300      	movs	r3, #0
 800fce0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fce2:	4b5a      	ldr	r3, [pc, #360]	; (800fe4c <ip4_input+0x240>)
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b7f      	cmp	r3, #127	; 0x7f
 800fcea:	d017      	beq.n	800fd1c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fcec:	4b58      	ldr	r3, [pc, #352]	; (800fe50 <ip4_input+0x244>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	613b      	str	r3, [r7, #16]
 800fcf2:	e00e      	b.n	800fd12 <ip4_input+0x106>
          if (netif == inp) {
 800fcf4:	693a      	ldr	r2, [r7, #16]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d006      	beq.n	800fd0a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fcfc:	6938      	ldr	r0, [r7, #16]
 800fcfe:	f7ff ff5b 	bl	800fbb8 <ip4_input_accept>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d108      	bne.n	800fd1a <ip4_input+0x10e>
 800fd08:	e000      	b.n	800fd0c <ip4_input+0x100>
            continue;
 800fd0a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	613b      	str	r3, [r7, #16]
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1ed      	bne.n	800fcf4 <ip4_input+0xe8>
 800fd18:	e000      	b.n	800fd1c <ip4_input+0x110>
            break;
 800fd1a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd1c:	4b4b      	ldr	r3, [pc, #300]	; (800fe4c <ip4_input+0x240>)
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 f96e 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d105      	bne.n	800fd3a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fd2e:	4b47      	ldr	r3, [pc, #284]	; (800fe4c <ip4_input+0x240>)
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd36:	2be0      	cmp	r3, #224	; 0xe0
 800fd38:	d104      	bne.n	800fd44 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f7f8 f806 	bl	8007d4c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e07e      	b.n	800fe42 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d104      	bne.n	800fd54 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7f7 fffe 	bl	8007d4c <pbuf_free>
    return ERR_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	e076      	b.n	800fe42 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	88db      	ldrh	r3, [r3, #6]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fd60:	4013      	ands	r3, r2
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00b      	beq.n	800fd7e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fc92 	bl	8010690 <ip4_reass>
 800fd6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d101      	bne.n	800fd78 <ip4_input+0x16c>
      return ERR_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	e064      	b.n	800fe42 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fd7e:	4a33      	ldr	r2, [pc, #204]	; (800fe4c <ip4_input+0x240>)
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fd84:	4a31      	ldr	r2, [pc, #196]	; (800fe4c <ip4_input+0x240>)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fd8a:	4a30      	ldr	r2, [pc, #192]	; (800fe4c <ip4_input+0x240>)
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	f003 030f 	and.w	r3, r3, #15
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	4b2a      	ldr	r3, [pc, #168]	; (800fe4c <ip4_input+0x240>)
 800fda2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fda4:	89fb      	ldrh	r3, [r7, #14]
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7f7 ff49 	bl	8007c40 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	7a5b      	ldrb	r3, [r3, #9]
 800fdb2:	2b11      	cmp	r3, #17
 800fdb4:	d006      	beq.n	800fdc4 <ip4_input+0x1b8>
 800fdb6:	2b11      	cmp	r3, #17
 800fdb8:	dc13      	bgt.n	800fde2 <ip4_input+0x1d6>
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d00c      	beq.n	800fdd8 <ip4_input+0x1cc>
 800fdbe:	2b06      	cmp	r3, #6
 800fdc0:	d005      	beq.n	800fdce <ip4_input+0x1c2>
 800fdc2:	e00e      	b.n	800fde2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fdc4:	6839      	ldr	r1, [r7, #0]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7fe fc68 	bl	800e69c <udp_input>
        break;
 800fdcc:	e026      	b.n	800fe1c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7fa f889 	bl	8009ee8 <tcp_input>
        break;
 800fdd6:	e021      	b.n	800fe1c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff fcee 	bl	800f7bc <icmp_input>
        break;
 800fde0:	e01c      	b.n	800fe1c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fde2:	4b1a      	ldr	r3, [pc, #104]	; (800fe4c <ip4_input+0x240>)
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	6939      	ldr	r1, [r7, #16]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f90b 	bl	8010004 <ip4_addr_isbroadcast_u32>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d10f      	bne.n	800fe14 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdf4:	4b15      	ldr	r3, [pc, #84]	; (800fe4c <ip4_input+0x240>)
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdfc:	2be0      	cmp	r3, #224	; 0xe0
 800fdfe:	d009      	beq.n	800fe14 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fe00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7f7 ff8d 	bl	8007d26 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fe0c:	2102      	movs	r1, #2
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fdd8 	bl	800f9c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7f7 ff99 	bl	8007d4c <pbuf_free>
        break;
 800fe1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fe1c:	4b0b      	ldr	r3, [pc, #44]	; (800fe4c <ip4_input+0x240>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fe22:	4b0a      	ldr	r3, [pc, #40]	; (800fe4c <ip4_input+0x240>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fe28:	4b08      	ldr	r3, [pc, #32]	; (800fe4c <ip4_input+0x240>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fe2e:	4b07      	ldr	r3, [pc, #28]	; (800fe4c <ip4_input+0x240>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fe34:	4b05      	ldr	r3, [pc, #20]	; (800fe4c <ip4_input+0x240>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fe3a:	4b04      	ldr	r3, [pc, #16]	; (800fe4c <ip4_input+0x240>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	200056b8 	.word	0x200056b8
 800fe50:	20008c1c 	.word	0x20008c1c

0800fe54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08a      	sub	sp, #40	; 0x28
 800fe58:	af04      	add	r7, sp, #16
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d009      	beq.n	800fe80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <ip4_output_if+0x26>
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d102      	bne.n	800fe80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	3304      	adds	r3, #4
 800fe7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fe80:	78fa      	ldrb	r2, [r7, #3]
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	9302      	str	r3, [sp, #8]
 800fe86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	4613      	mov	r3, r2
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	6979      	ldr	r1, [r7, #20]
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 f805 	bl	800fea8 <ip4_output_if_src>
 800fe9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3718      	adds	r7, #24
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
 800feb4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	7b9b      	ldrb	r3, [r3, #14]
 800feba:	2b01      	cmp	r3, #1
 800febc:	d006      	beq.n	800fecc <ip4_output_if_src+0x24>
 800febe:	4b4b      	ldr	r3, [pc, #300]	; (800ffec <ip4_output_if_src+0x144>)
 800fec0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fec4:	494a      	ldr	r1, [pc, #296]	; (800fff0 <ip4_output_if_src+0x148>)
 800fec6:	484b      	ldr	r0, [pc, #300]	; (800fff4 <ip4_output_if_src+0x14c>)
 800fec8:	f001 f8f2 	bl	80110b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d060      	beq.n	800ff94 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fed2:	2314      	movs	r3, #20
 800fed4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fed6:	2114      	movs	r1, #20
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7f7 fea1 	bl	8007c20 <pbuf_add_header>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fee4:	f06f 0301 	mvn.w	r3, #1
 800fee8:	e07c      	b.n	800ffe4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	895b      	ldrh	r3, [r3, #10]
 800fef4:	2b13      	cmp	r3, #19
 800fef6:	d806      	bhi.n	800ff06 <ip4_output_if_src+0x5e>
 800fef8:	4b3c      	ldr	r3, [pc, #240]	; (800ffec <ip4_output_if_src+0x144>)
 800fefa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fefe:	493e      	ldr	r1, [pc, #248]	; (800fff8 <ip4_output_if_src+0x150>)
 800ff00:	483c      	ldr	r0, [pc, #240]	; (800fff4 <ip4_output_if_src+0x14c>)
 800ff02:	f001 f8d5 	bl	80110b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	78fa      	ldrb	r2, [r7, #3]
 800ff0a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ff12:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ff1c:	8b7b      	ldrh	r3, [r7, #26]
 800ff1e:	089b      	lsrs	r3, r3, #2
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ff34:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	891b      	ldrh	r3, [r3, #8]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f6 fb72 	bl	8006624 <lwip_htons>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	719a      	strb	r2, [r3, #6]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff52:	4b2a      	ldr	r3, [pc, #168]	; (800fffc <ip4_output_if_src+0x154>)
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7f6 fb64 	bl	8006624 <lwip_htons>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ff64:	4b25      	ldr	r3, [pc, #148]	; (800fffc <ip4_output_if_src+0x154>)
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	4b23      	ldr	r3, [pc, #140]	; (800fffc <ip4_output_if_src+0x154>)
 800ff6e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d104      	bne.n	800ff80 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ff76:	4b22      	ldr	r3, [pc, #136]	; (8010000 <ip4_output_if_src+0x158>)
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	e003      	b.n	800ff88 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	729a      	strb	r2, [r3, #10]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	72da      	strb	r2, [r3, #11]
 800ff92:	e00f      	b.n	800ffb4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	895b      	ldrh	r3, [r3, #10]
 800ff98:	2b13      	cmp	r3, #19
 800ff9a:	d802      	bhi.n	800ffa2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ff9c:	f06f 0301 	mvn.w	r3, #1
 800ffa0:	e020      	b.n	800ffe4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ffae:	f107 0314 	add.w	r3, r7, #20
 800ffb2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00c      	beq.n	800ffd6 <ip4_output_if_src+0x12e>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	891a      	ldrh	r2, [r3, #8]
 800ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d906      	bls.n	800ffd6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f000 fd53 	bl	8010a78 <ip4_frag>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	e006      	b.n	800ffe4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd8:	695b      	ldr	r3, [r3, #20]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	68f9      	ldr	r1, [r7, #12]
 800ffde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffe0:	4798      	blx	r3
 800ffe2:	4603      	mov	r3, r0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3720      	adds	r7, #32
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	0801483c 	.word	0x0801483c
 800fff0:	08014870 	.word	0x08014870
 800fff4:	0801487c 	.word	0x0801487c
 800fff8:	080148a4 	.word	0x080148a4
 800fffc:	20008d7a 	.word	0x20008d7a
 8010000:	08015610 	.word	0x08015610

08010004 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d002      	beq.n	8010020 <ip4_addr_isbroadcast_u32+0x1c>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d101      	bne.n	8010024 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010020:	2301      	movs	r3, #1
 8010022:	e02a      	b.n	801007a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010032:	2300      	movs	r3, #0
 8010034:	e021      	b.n	801007a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	3304      	adds	r3, #4
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	429a      	cmp	r2, r3
 8010040:	d101      	bne.n	8010046 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010042:	2300      	movs	r3, #0
 8010044:	e019      	b.n	801007a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010046:	68fa      	ldr	r2, [r7, #12]
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	3304      	adds	r3, #4
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	405a      	eors	r2, r3
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	3308      	adds	r3, #8
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4013      	ands	r3, r2
 8010058:	2b00      	cmp	r3, #0
 801005a:	d10d      	bne.n	8010078 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	3308      	adds	r3, #8
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	43da      	mvns	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	3308      	adds	r3, #8
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010070:	429a      	cmp	r2, r3
 8010072:	d101      	bne.n	8010078 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010074:	2301      	movs	r3, #1
 8010076:	e000      	b.n	801007a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010078:	2300      	movs	r3, #0
  }
}
 801007a:	4618      	mov	r0, r3
 801007c:	3714      	adds	r7, #20
 801007e:	46bd      	mov	sp, r7
 8010080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010084:	4770      	bx	lr
	...

08010088 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801008e:	2300      	movs	r3, #0
 8010090:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010092:	4b12      	ldr	r3, [pc, #72]	; (80100dc <ip_reass_tmr+0x54>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010098:	e018      	b.n	80100cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	7fdb      	ldrb	r3, [r3, #31]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00b      	beq.n	80100ba <ip_reass_tmr+0x32>
      r->timer--;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	7fdb      	ldrb	r3, [r3, #31]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	60fb      	str	r3, [r7, #12]
 80100b8:	e008      	b.n	80100cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80100c4:	68b9      	ldr	r1, [r7, #8]
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f000 f80a 	bl	80100e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e3      	bne.n	801009a <ip_reass_tmr+0x12>
    }
  }
}
 80100d2:	bf00      	nop
 80100d4:	bf00      	nop
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20008d7c 	.word	0x20008d7c

080100e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d105      	bne.n	8010102 <ip_reass_free_complete_datagram+0x22>
 80100f6:	4b45      	ldr	r3, [pc, #276]	; (801020c <ip_reass_free_complete_datagram+0x12c>)
 80100f8:	22ab      	movs	r2, #171	; 0xab
 80100fa:	4945      	ldr	r1, [pc, #276]	; (8010210 <ip_reass_free_complete_datagram+0x130>)
 80100fc:	4845      	ldr	r0, [pc, #276]	; (8010214 <ip_reass_free_complete_datagram+0x134>)
 80100fe:	f000 ffd7 	bl	80110b0 <iprintf>
  if (prev != NULL) {
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00a      	beq.n	801011e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	429a      	cmp	r2, r3
 8010110:	d005      	beq.n	801011e <ip_reass_free_complete_datagram+0x3e>
 8010112:	4b3e      	ldr	r3, [pc, #248]	; (801020c <ip_reass_free_complete_datagram+0x12c>)
 8010114:	22ad      	movs	r2, #173	; 0xad
 8010116:	4940      	ldr	r1, [pc, #256]	; (8010218 <ip_reass_free_complete_datagram+0x138>)
 8010118:	483e      	ldr	r0, [pc, #248]	; (8010214 <ip_reass_free_complete_datagram+0x134>)
 801011a:	f000 ffc9 	bl	80110b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	889b      	ldrh	r3, [r3, #4]
 801012a:	b29b      	uxth	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d12a      	bne.n	8010186 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	6858      	ldr	r0, [r3, #4]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	3308      	adds	r3, #8
 8010146:	2214      	movs	r2, #20
 8010148:	4619      	mov	r1, r3
 801014a:	f001 f8aa 	bl	80112a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801014e:	2101      	movs	r1, #1
 8010150:	69b8      	ldr	r0, [r7, #24]
 8010152:	f7ff fc47 	bl	800f9e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010156:	69b8      	ldr	r0, [r7, #24]
 8010158:	f7f7 fe80 	bl	8007e5c <pbuf_clen>
 801015c:	4603      	mov	r3, r0
 801015e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010160:	8bfa      	ldrh	r2, [r7, #30]
 8010162:	8a7b      	ldrh	r3, [r7, #18]
 8010164:	4413      	add	r3, r2
 8010166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801016a:	db05      	blt.n	8010178 <ip_reass_free_complete_datagram+0x98>
 801016c:	4b27      	ldr	r3, [pc, #156]	; (801020c <ip_reass_free_complete_datagram+0x12c>)
 801016e:	22bc      	movs	r2, #188	; 0xbc
 8010170:	492a      	ldr	r1, [pc, #168]	; (801021c <ip_reass_free_complete_datagram+0x13c>)
 8010172:	4828      	ldr	r0, [pc, #160]	; (8010214 <ip_reass_free_complete_datagram+0x134>)
 8010174:	f000 ff9c 	bl	80110b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010178:	8bfa      	ldrh	r2, [r7, #30]
 801017a:	8a7b      	ldrh	r3, [r7, #18]
 801017c:	4413      	add	r3, r2
 801017e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010180:	69b8      	ldr	r0, [r7, #24]
 8010182:	f7f7 fde3 	bl	8007d4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801018c:	e01f      	b.n	80101ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f7f7 fe5c 	bl	8007e5c <pbuf_clen>
 80101a4:	4603      	mov	r3, r0
 80101a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80101a8:	8bfa      	ldrh	r2, [r7, #30]
 80101aa:	8a7b      	ldrh	r3, [r7, #18]
 80101ac:	4413      	add	r3, r2
 80101ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101b2:	db05      	blt.n	80101c0 <ip_reass_free_complete_datagram+0xe0>
 80101b4:	4b15      	ldr	r3, [pc, #84]	; (801020c <ip_reass_free_complete_datagram+0x12c>)
 80101b6:	22cc      	movs	r2, #204	; 0xcc
 80101b8:	4918      	ldr	r1, [pc, #96]	; (801021c <ip_reass_free_complete_datagram+0x13c>)
 80101ba:	4816      	ldr	r0, [pc, #88]	; (8010214 <ip_reass_free_complete_datagram+0x134>)
 80101bc:	f000 ff78 	bl	80110b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101c0:	8bfa      	ldrh	r2, [r7, #30]
 80101c2:	8a7b      	ldrh	r3, [r7, #18]
 80101c4:	4413      	add	r3, r2
 80101c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f7f7 fdbf 	bl	8007d4c <pbuf_free>
  while (p != NULL) {
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d1dc      	bne.n	801018e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80101d4:	6839      	ldr	r1, [r7, #0]
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f8c2 	bl	8010360 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80101dc:	4b10      	ldr	r3, [pc, #64]	; (8010220 <ip_reass_free_complete_datagram+0x140>)
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	8bfa      	ldrh	r2, [r7, #30]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d905      	bls.n	80101f2 <ip_reass_free_complete_datagram+0x112>
 80101e6:	4b09      	ldr	r3, [pc, #36]	; (801020c <ip_reass_free_complete_datagram+0x12c>)
 80101e8:	22d2      	movs	r2, #210	; 0xd2
 80101ea:	490e      	ldr	r1, [pc, #56]	; (8010224 <ip_reass_free_complete_datagram+0x144>)
 80101ec:	4809      	ldr	r0, [pc, #36]	; (8010214 <ip_reass_free_complete_datagram+0x134>)
 80101ee:	f000 ff5f 	bl	80110b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80101f2:	4b0b      	ldr	r3, [pc, #44]	; (8010220 <ip_reass_free_complete_datagram+0x140>)
 80101f4:	881a      	ldrh	r2, [r3, #0]
 80101f6:	8bfb      	ldrh	r3, [r7, #30]
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	4b08      	ldr	r3, [pc, #32]	; (8010220 <ip_reass_free_complete_datagram+0x140>)
 80101fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010200:	8bfb      	ldrh	r3, [r7, #30]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3720      	adds	r7, #32
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	080148d4 	.word	0x080148d4
 8010210:	08014910 	.word	0x08014910
 8010214:	0801491c 	.word	0x0801491c
 8010218:	08014944 	.word	0x08014944
 801021c:	08014958 	.word	0x08014958
 8010220:	20008d80 	.word	0x20008d80
 8010224:	08014978 	.word	0x08014978

08010228 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08a      	sub	sp, #40	; 0x28
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010236:	2300      	movs	r3, #0
 8010238:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801023a:	2300      	movs	r3, #0
 801023c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010246:	4b28      	ldr	r3, [pc, #160]	; (80102e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801024c:	e030      	b.n	80102b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	695a      	ldr	r2, [r3, #20]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	429a      	cmp	r2, r3
 8010258:	d10c      	bne.n	8010274 <ip_reass_remove_oldest_datagram+0x4c>
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	699a      	ldr	r2, [r3, #24]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	429a      	cmp	r2, r3
 8010264:	d106      	bne.n	8010274 <ip_reass_remove_oldest_datagram+0x4c>
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	899a      	ldrh	r2, [r3, #12]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	889b      	ldrh	r3, [r3, #4]
 801026e:	b29b      	uxth	r3, r3
 8010270:	429a      	cmp	r2, r3
 8010272:	d014      	beq.n	801029e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	3301      	adds	r3, #1
 8010278:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801027a:	6a3b      	ldr	r3, [r7, #32]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d104      	bne.n	801028a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	61bb      	str	r3, [r7, #24]
 8010288:	e009      	b.n	801029e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	7fda      	ldrb	r2, [r3, #31]
 801028e:	6a3b      	ldr	r3, [r7, #32]
 8010290:	7fdb      	ldrb	r3, [r3, #31]
 8010292:	429a      	cmp	r2, r3
 8010294:	d803      	bhi.n	801029e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d001      	beq.n	80102aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80102aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1cb      	bne.n	801024e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d008      	beq.n	80102ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80102bc:	69b9      	ldr	r1, [r7, #24]
 80102be:	6a38      	ldr	r0, [r7, #32]
 80102c0:	f7ff ff0e 	bl	80100e0 <ip_reass_free_complete_datagram>
 80102c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80102c6:	697a      	ldr	r2, [r7, #20]
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	4413      	add	r3, r2
 80102cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	da02      	bge.n	80102dc <ip_reass_remove_oldest_datagram+0xb4>
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	dcac      	bgt.n	8010236 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80102dc:	697b      	ldr	r3, [r7, #20]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3728      	adds	r7, #40	; 0x28
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	20008d7c 	.word	0x20008d7c

080102ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80102f6:	2004      	movs	r0, #4
 80102f8:	f7f6 fe42 	bl	8006f80 <memp_malloc>
 80102fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d110      	bne.n	8010326 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010304:	6839      	ldr	r1, [r7, #0]
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff ff8e 	bl	8010228 <ip_reass_remove_oldest_datagram>
 801030c:	4602      	mov	r2, r0
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	4293      	cmp	r3, r2
 8010312:	dc03      	bgt.n	801031c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010314:	2004      	movs	r0, #4
 8010316:	f7f6 fe33 	bl	8006f80 <memp_malloc>
 801031a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	e016      	b.n	8010354 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010326:	2220      	movs	r2, #32
 8010328:	2100      	movs	r1, #0
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f000 ff25 	bl	801117a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	220f      	movs	r2, #15
 8010334:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010336:	4b09      	ldr	r3, [pc, #36]	; (801035c <ip_reass_enqueue_new_datagram+0x70>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801033e:	4a07      	ldr	r2, [pc, #28]	; (801035c <ip_reass_enqueue_new_datagram+0x70>)
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	3308      	adds	r3, #8
 8010348:	2214      	movs	r2, #20
 801034a:	6879      	ldr	r1, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	f000 ffa8 	bl	80112a2 <memcpy>
  return ipr;
 8010352:	68fb      	ldr	r3, [r7, #12]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20008d7c 	.word	0x20008d7c

08010360 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801036a:	4b10      	ldr	r3, [pc, #64]	; (80103ac <ip_reass_dequeue_datagram+0x4c>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	429a      	cmp	r2, r3
 8010372:	d104      	bne.n	801037e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a0c      	ldr	r2, [pc, #48]	; (80103ac <ip_reass_dequeue_datagram+0x4c>)
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	e00d      	b.n	801039a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d106      	bne.n	8010392 <ip_reass_dequeue_datagram+0x32>
 8010384:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <ip_reass_dequeue_datagram+0x50>)
 8010386:	f240 1245 	movw	r2, #325	; 0x145
 801038a:	490a      	ldr	r1, [pc, #40]	; (80103b4 <ip_reass_dequeue_datagram+0x54>)
 801038c:	480a      	ldr	r0, [pc, #40]	; (80103b8 <ip_reass_dequeue_datagram+0x58>)
 801038e:	f000 fe8f 	bl	80110b0 <iprintf>
    prev->next = ipr->next;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	2004      	movs	r0, #4
 801039e:	f7f6 fe5f 	bl	8007060 <memp_free>
}
 80103a2:	bf00      	nop
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	20008d7c 	.word	0x20008d7c
 80103b0:	080148d4 	.word	0x080148d4
 80103b4:	0801499c 	.word	0x0801499c
 80103b8:	0801491c 	.word	0x0801491c

080103bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08c      	sub	sp, #48	; 0x30
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80103cc:	2301      	movs	r3, #1
 80103ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	885b      	ldrh	r3, [r3, #2]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f6 f921 	bl	8006624 <lwip_htons>
 80103e2:	4603      	mov	r3, r0
 80103e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	f003 030f 	and.w	r3, r3, #15
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80103f4:	7e7b      	ldrb	r3, [r7, #25]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	8b7a      	ldrh	r2, [r7, #26]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d202      	bcs.n	8010404 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80103fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010402:	e135      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010404:	7e7b      	ldrb	r3, [r7, #25]
 8010406:	b29b      	uxth	r3, r3
 8010408:	8b7a      	ldrh	r2, [r7, #26]
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	88db      	ldrh	r3, [r3, #6]
 8010412:	b29b      	uxth	r3, r3
 8010414:	4618      	mov	r0, r3
 8010416:	f7f6 f905 	bl	8006624 <lwip_htons>
 801041a:	4603      	mov	r3, r0
 801041c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010420:	b29b      	uxth	r3, r3
 8010422:	00db      	lsls	r3, r3, #3
 8010424:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042e:	2200      	movs	r2, #0
 8010430:	701a      	strb	r2, [r3, #0]
 8010432:	2200      	movs	r2, #0
 8010434:	705a      	strb	r2, [r3, #1]
 8010436:	2200      	movs	r2, #0
 8010438:	709a      	strb	r2, [r3, #2]
 801043a:	2200      	movs	r2, #0
 801043c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010440:	8afa      	ldrh	r2, [r7, #22]
 8010442:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010444:	8afa      	ldrh	r2, [r7, #22]
 8010446:	8b7b      	ldrh	r3, [r7, #26]
 8010448:	4413      	add	r3, r2
 801044a:	b29a      	uxth	r2, r3
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	88db      	ldrh	r3, [r3, #6]
 8010454:	b29b      	uxth	r3, r3
 8010456:	8afa      	ldrh	r2, [r7, #22]
 8010458:	429a      	cmp	r2, r3
 801045a:	d902      	bls.n	8010462 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801045c:	f04f 33ff 	mov.w	r3, #4294967295
 8010460:	e106      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
 8010468:	e068      	b.n	801053c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	889b      	ldrh	r3, [r3, #4]
 8010474:	b29a      	uxth	r2, r3
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	889b      	ldrh	r3, [r3, #4]
 801047a:	b29b      	uxth	r3, r3
 801047c:	429a      	cmp	r2, r3
 801047e:	d235      	bcs.n	80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010484:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010488:	2b00      	cmp	r3, #0
 801048a:	d020      	beq.n	80104ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	889b      	ldrh	r3, [r3, #4]
 8010490:	b29a      	uxth	r2, r3
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	88db      	ldrh	r3, [r3, #6]
 8010496:	b29b      	uxth	r3, r3
 8010498:	429a      	cmp	r2, r3
 801049a:	d307      	bcc.n	80104ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	88db      	ldrh	r3, [r3, #6]
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	889b      	ldrh	r3, [r3, #4]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d902      	bls.n	80104b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104ac:	f04f 33ff 	mov.w	r3, #4294967295
 80104b0:	e0de      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80104b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b4:	68ba      	ldr	r2, [r7, #8]
 80104b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80104b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ba:	88db      	ldrh	r3, [r3, #6]
 80104bc:	b29a      	uxth	r2, r3
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c0:	889b      	ldrh	r3, [r3, #4]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d03d      	beq.n	8010544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80104cc:	e03a      	b.n	8010544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80104ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d0:	88db      	ldrh	r3, [r3, #6]
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	889b      	ldrh	r3, [r3, #4]
 80104d8:	b29b      	uxth	r3, r3
 80104da:	429a      	cmp	r2, r3
 80104dc:	d902      	bls.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104de:	f04f 33ff 	mov.w	r3, #4294967295
 80104e2:	e0c5      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	605a      	str	r2, [r3, #4]
      break;
 80104ea:	e02b      	b.n	8010544 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	889b      	ldrh	r3, [r3, #4]
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	889b      	ldrh	r3, [r3, #4]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d102      	bne.n	8010502 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010500:	e0b6      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010504:	889b      	ldrh	r3, [r3, #4]
 8010506:	b29a      	uxth	r2, r3
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	88db      	ldrh	r3, [r3, #6]
 801050c:	b29b      	uxth	r3, r3
 801050e:	429a      	cmp	r2, r3
 8010510:	d202      	bcs.n	8010518 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010512:	f04f 33ff 	mov.w	r3, #4294967295
 8010516:	e0ab      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	2b00      	cmp	r3, #0
 801051c:	d009      	beq.n	8010532 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010520:	88db      	ldrh	r3, [r3, #6]
 8010522:	b29a      	uxth	r2, r3
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	889b      	ldrh	r3, [r3, #4]
 8010528:	b29b      	uxth	r3, r3
 801052a:	429a      	cmp	r2, r3
 801052c:	d001      	beq.n	8010532 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053e:	2b00      	cmp	r3, #0
 8010540:	d193      	bne.n	801046a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010542:	e000      	b.n	8010546 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010544:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010548:	2b00      	cmp	r3, #0
 801054a:	d12d      	bne.n	80105a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	2b00      	cmp	r3, #0
 8010550:	d01c      	beq.n	801058c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010554:	88db      	ldrh	r3, [r3, #6]
 8010556:	b29a      	uxth	r2, r3
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	889b      	ldrh	r3, [r3, #4]
 801055c:	b29b      	uxth	r3, r3
 801055e:	429a      	cmp	r2, r3
 8010560:	d906      	bls.n	8010570 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010562:	4b45      	ldr	r3, [pc, #276]	; (8010678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010564:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010568:	4944      	ldr	r1, [pc, #272]	; (801067c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801056a:	4845      	ldr	r0, [pc, #276]	; (8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801056c:	f000 fda0 	bl	80110b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	88db      	ldrh	r3, [r3, #6]
 801057a:	b29a      	uxth	r2, r3
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	889b      	ldrh	r3, [r3, #4]
 8010580:	b29b      	uxth	r3, r3
 8010582:	429a      	cmp	r2, r3
 8010584:	d010      	beq.n	80105a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010586:	2300      	movs	r3, #0
 8010588:	623b      	str	r3, [r7, #32]
 801058a:	e00d      	b.n	80105a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d006      	beq.n	80105a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010594:	4b38      	ldr	r3, [pc, #224]	; (8010678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010596:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801059a:	493a      	ldr	r1, [pc, #232]	; (8010684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801059c:	4838      	ldr	r0, [pc, #224]	; (8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801059e:	f000 fd87 	bl	80110b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d105      	bne.n	80105ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	7f9b      	ldrb	r3, [r3, #30]
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d059      	beq.n	801066e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d04f      	beq.n	8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d006      	beq.n	80105d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	889b      	ldrh	r3, [r3, #4]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	623b      	str	r3, [r7, #32]
 80105da:	e041      	b.n	8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80105dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80105e6:	e012      	b.n	801060e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	88db      	ldrh	r3, [r3, #6]
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	889b      	ldrh	r3, [r3, #4]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d002      	beq.n	8010604 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	623b      	str	r3, [r7, #32]
            break;
 8010602:	e007      	b.n	8010614 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e9      	bne.n	80105e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010614:	6a3b      	ldr	r3, [r7, #32]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d022      	beq.n	8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d106      	bne.n	8010630 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010622:	4b15      	ldr	r3, [pc, #84]	; (8010678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010624:	f240 12df 	movw	r2, #479	; 0x1df
 8010628:	4917      	ldr	r1, [pc, #92]	; (8010688 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801062a:	4815      	ldr	r0, [pc, #84]	; (8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801062c:	f000 fd40 	bl	80110b0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010638:	429a      	cmp	r2, r3
 801063a:	d106      	bne.n	801064a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801063c:	4b0e      	ldr	r3, [pc, #56]	; (8010678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801063e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010642:	4911      	ldr	r1, [pc, #68]	; (8010688 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010644:	480e      	ldr	r0, [pc, #56]	; (8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010646:	f000 fd33 	bl	80110b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d006      	beq.n	8010660 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010652:	4b09      	ldr	r3, [pc, #36]	; (8010678 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010654:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010658:	490c      	ldr	r1, [pc, #48]	; (801068c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801065a:	4809      	ldr	r0, [pc, #36]	; (8010680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801065c:	f000 fd28 	bl	80110b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	2b00      	cmp	r3, #0
 8010664:	bf14      	ite	ne
 8010666:	2301      	movne	r3, #1
 8010668:	2300      	moveq	r3, #0
 801066a:	b2db      	uxtb	r3, r3
 801066c:	e000      	b.n	8010670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3730      	adds	r7, #48	; 0x30
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	080148d4 	.word	0x080148d4
 801067c:	080149b8 	.word	0x080149b8
 8010680:	0801491c 	.word	0x0801491c
 8010684:	080149d8 	.word	0x080149d8
 8010688:	08014a10 	.word	0x08014a10
 801068c:	08014a20 	.word	0x08014a20

08010690 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b08e      	sub	sp, #56	; 0x38
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 030f 	and.w	r3, r3, #15
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	2b14      	cmp	r3, #20
 80106ae:	f040 8171 	bne.w	8010994 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80106b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b4:	88db      	ldrh	r3, [r3, #6]
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f5 ffb3 	bl	8006624 <lwip_htons>
 80106be:	4603      	mov	r3, r0
 80106c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	885b      	ldrh	r3, [r3, #2]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f5 ffa7 	bl	8006624 <lwip_htons>
 80106d6:	4603      	mov	r3, r0
 80106d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 030f 	and.w	r3, r3, #15
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80106ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80106f2:	429a      	cmp	r2, r3
 80106f4:	f0c0 8150 	bcc.w	8010998 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80106f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7f7 fba9 	bl	8007e5c <pbuf_clen>
 801070a:	4603      	mov	r3, r0
 801070c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801070e:	4b8c      	ldr	r3, [pc, #560]	; (8010940 <ip4_reass+0x2b0>)
 8010710:	881b      	ldrh	r3, [r3, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	8c3b      	ldrh	r3, [r7, #32]
 8010716:	4413      	add	r3, r2
 8010718:	2b0a      	cmp	r3, #10
 801071a:	dd10      	ble.n	801073e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801071c:	8c3b      	ldrh	r3, [r7, #32]
 801071e:	4619      	mov	r1, r3
 8010720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010722:	f7ff fd81 	bl	8010228 <ip_reass_remove_oldest_datagram>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	f000 8137 	beq.w	801099c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801072e:	4b84      	ldr	r3, [pc, #528]	; (8010940 <ip4_reass+0x2b0>)
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	461a      	mov	r2, r3
 8010734:	8c3b      	ldrh	r3, [r7, #32]
 8010736:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010738:	2b0a      	cmp	r3, #10
 801073a:	f300 812f 	bgt.w	801099c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801073e:	4b81      	ldr	r3, [pc, #516]	; (8010944 <ip4_reass+0x2b4>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	633b      	str	r3, [r7, #48]	; 0x30
 8010744:	e015      	b.n	8010772 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010748:	695a      	ldr	r2, [r3, #20]
 801074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	429a      	cmp	r2, r3
 8010750:	d10c      	bne.n	801076c <ip4_reass+0xdc>
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	699a      	ldr	r2, [r3, #24]
 8010756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010758:	691b      	ldr	r3, [r3, #16]
 801075a:	429a      	cmp	r2, r3
 801075c:	d106      	bne.n	801076c <ip4_reass+0xdc>
 801075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010760:	899a      	ldrh	r2, [r3, #12]
 8010762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010764:	889b      	ldrh	r3, [r3, #4]
 8010766:	b29b      	uxth	r3, r3
 8010768:	429a      	cmp	r2, r3
 801076a:	d006      	beq.n	801077a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	633b      	str	r3, [r7, #48]	; 0x30
 8010772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1e6      	bne.n	8010746 <ip4_reass+0xb6>
 8010778:	e000      	b.n	801077c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801077a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077e:	2b00      	cmp	r3, #0
 8010780:	d109      	bne.n	8010796 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010782:	8c3b      	ldrh	r3, [r7, #32]
 8010784:	4619      	mov	r1, r3
 8010786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010788:	f7ff fdb0 	bl	80102ec <ip_reass_enqueue_new_datagram>
 801078c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	2b00      	cmp	r3, #0
 8010792:	d11c      	bne.n	80107ce <ip4_reass+0x13e>
      goto nullreturn;
 8010794:	e105      	b.n	80109a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	88db      	ldrh	r3, [r3, #6]
 801079a:	b29b      	uxth	r3, r3
 801079c:	4618      	mov	r0, r3
 801079e:	f7f5 ff41 	bl	8006624 <lwip_htons>
 80107a2:	4603      	mov	r3, r0
 80107a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d110      	bne.n	80107ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	89db      	ldrh	r3, [r3, #14]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7f5 ff37 	bl	8006624 <lwip_htons>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d006      	beq.n	80107ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80107c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c2:	3308      	adds	r3, #8
 80107c4:	2214      	movs	r2, #20
 80107c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107c8:	4618      	mov	r0, r3
 80107ca:	f000 fd6a 	bl	80112a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	88db      	ldrh	r3, [r3, #6]
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f003 0320 	and.w	r3, r3, #32
 80107d8:	2b00      	cmp	r3, #0
 80107da:	bf0c      	ite	eq
 80107dc:	2301      	moveq	r3, #1
 80107de:	2300      	movne	r3, #0
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00e      	beq.n	8010808 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80107ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107ee:	4413      	add	r3, r2
 80107f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80107f2:	8b7a      	ldrh	r2, [r7, #26]
 80107f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107f6:	429a      	cmp	r2, r3
 80107f8:	f0c0 80a0 	bcc.w	801093c <ip4_reass+0x2ac>
 80107fc:	8b7b      	ldrh	r3, [r7, #26]
 80107fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010802:	4293      	cmp	r3, r2
 8010804:	f200 809a 	bhi.w	801093c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010808:	69fa      	ldr	r2, [r7, #28]
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801080e:	f7ff fdd5 	bl	80103bc <ip_reass_chain_frag_into_datagram_and_validate>
 8010812:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081a:	f000 809b 	beq.w	8010954 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801081e:	4b48      	ldr	r3, [pc, #288]	; (8010940 <ip4_reass+0x2b0>)
 8010820:	881a      	ldrh	r2, [r3, #0]
 8010822:	8c3b      	ldrh	r3, [r7, #32]
 8010824:	4413      	add	r3, r2
 8010826:	b29a      	uxth	r2, r3
 8010828:	4b45      	ldr	r3, [pc, #276]	; (8010940 <ip4_reass+0x2b0>)
 801082a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00d      	beq.n	801084e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010832:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010836:	4413      	add	r3, r2
 8010838:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	8a7a      	ldrh	r2, [r7, #18]
 801083e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	7f9b      	ldrb	r3, [r3, #30]
 8010844:	f043 0301 	orr.w	r3, r3, #1
 8010848:	b2da      	uxtb	r2, r3
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d171      	bne.n	8010938 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	8b9b      	ldrh	r3, [r3, #28]
 8010858:	3314      	adds	r3, #20
 801085a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	3308      	adds	r3, #8
 8010872:	2214      	movs	r2, #20
 8010874:	4619      	mov	r1, r3
 8010876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010878:	f000 fd13 	bl	80112a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801087c:	8a3b      	ldrh	r3, [r7, #16]
 801087e:	4618      	mov	r0, r3
 8010880:	f7f5 fed0 	bl	8006624 <lwip_htons>
 8010884:	4603      	mov	r3, r0
 8010886:	461a      	mov	r2, r3
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	2200      	movs	r2, #0
 8010890:	719a      	strb	r2, [r3, #6]
 8010892:	2200      	movs	r2, #0
 8010894:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	2200      	movs	r2, #0
 801089a:	729a      	strb	r2, [r3, #10]
 801089c:	2200      	movs	r2, #0
 801089e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80108a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80108a6:	e00d      	b.n	80108c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80108a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80108ae:	2114      	movs	r1, #20
 80108b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80108b2:	f7f7 f9c5 	bl	8007c40 <pbuf_remove_header>
      pbuf_cat(p, r);
 80108b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7f7 fb09 	bl	8007ed0 <pbuf_cat>
      r = iprh->next_pbuf;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80108c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1ee      	bne.n	80108a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80108ca:	4b1e      	ldr	r3, [pc, #120]	; (8010944 <ip4_reass+0x2b4>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d102      	bne.n	80108da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80108d4:	2300      	movs	r3, #0
 80108d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d8:	e010      	b.n	80108fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108da:	4b1a      	ldr	r3, [pc, #104]	; (8010944 <ip4_reass+0x2b4>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108e0:	e007      	b.n	80108f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d006      	beq.n	80108fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1f4      	bne.n	80108e2 <ip4_reass+0x252>
 80108f8:	e000      	b.n	80108fc <ip4_reass+0x26c>
          break;
 80108fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80108fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010900:	f7ff fd2e 	bl	8010360 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7f7 faa9 	bl	8007e5c <pbuf_clen>
 801090a:	4603      	mov	r3, r0
 801090c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801090e:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <ip4_reass+0x2b0>)
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	8c3a      	ldrh	r2, [r7, #32]
 8010914:	429a      	cmp	r2, r3
 8010916:	d906      	bls.n	8010926 <ip4_reass+0x296>
 8010918:	4b0b      	ldr	r3, [pc, #44]	; (8010948 <ip4_reass+0x2b8>)
 801091a:	f240 229b 	movw	r2, #667	; 0x29b
 801091e:	490b      	ldr	r1, [pc, #44]	; (801094c <ip4_reass+0x2bc>)
 8010920:	480b      	ldr	r0, [pc, #44]	; (8010950 <ip4_reass+0x2c0>)
 8010922:	f000 fbc5 	bl	80110b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010926:	4b06      	ldr	r3, [pc, #24]	; (8010940 <ip4_reass+0x2b0>)
 8010928:	881a      	ldrh	r2, [r3, #0]
 801092a:	8c3b      	ldrh	r3, [r7, #32]
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	b29a      	uxth	r2, r3
 8010930:	4b03      	ldr	r3, [pc, #12]	; (8010940 <ip4_reass+0x2b0>)
 8010932:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	e038      	b.n	80109aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	e036      	b.n	80109aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801093c:	bf00      	nop
 801093e:	e00a      	b.n	8010956 <ip4_reass+0x2c6>
 8010940:	20008d80 	.word	0x20008d80
 8010944:	20008d7c 	.word	0x20008d7c
 8010948:	080148d4 	.word	0x080148d4
 801094c:	08014a44 	.word	0x08014a44
 8010950:	0801491c 	.word	0x0801491c
    goto nullreturn_ipr;
 8010954:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	2b00      	cmp	r3, #0
 801095a:	d106      	bne.n	801096a <ip4_reass+0x2da>
 801095c:	4b15      	ldr	r3, [pc, #84]	; (80109b4 <ip4_reass+0x324>)
 801095e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010962:	4915      	ldr	r1, [pc, #84]	; (80109b8 <ip4_reass+0x328>)
 8010964:	4815      	ldr	r0, [pc, #84]	; (80109bc <ip4_reass+0x32c>)
 8010966:	f000 fba3 	bl	80110b0 <iprintf>
  if (ipr->p == NULL) {
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d116      	bne.n	80109a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010972:	4b13      	ldr	r3, [pc, #76]	; (80109c0 <ip4_reass+0x330>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010978:	429a      	cmp	r2, r3
 801097a:	d006      	beq.n	801098a <ip4_reass+0x2fa>
 801097c:	4b0d      	ldr	r3, [pc, #52]	; (80109b4 <ip4_reass+0x324>)
 801097e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010982:	4910      	ldr	r1, [pc, #64]	; (80109c4 <ip4_reass+0x334>)
 8010984:	480d      	ldr	r0, [pc, #52]	; (80109bc <ip4_reass+0x32c>)
 8010986:	f000 fb93 	bl	80110b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801098a:	2100      	movs	r1, #0
 801098c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801098e:	f7ff fce7 	bl	8010360 <ip_reass_dequeue_datagram>
 8010992:	e006      	b.n	80109a2 <ip4_reass+0x312>
    goto nullreturn;
 8010994:	bf00      	nop
 8010996:	e004      	b.n	80109a2 <ip4_reass+0x312>
    goto nullreturn;
 8010998:	bf00      	nop
 801099a:	e002      	b.n	80109a2 <ip4_reass+0x312>
      goto nullreturn;
 801099c:	bf00      	nop
 801099e:	e000      	b.n	80109a2 <ip4_reass+0x312>
  }

nullreturn:
 80109a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7f7 f9d2 	bl	8007d4c <pbuf_free>
  return NULL;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3738      	adds	r7, #56	; 0x38
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	080148d4 	.word	0x080148d4
 80109b8:	08014a60 	.word	0x08014a60
 80109bc:	0801491c 	.word	0x0801491c
 80109c0:	20008d7c 	.word	0x20008d7c
 80109c4:	08014a6c 	.word	0x08014a6c

080109c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80109cc:	2005      	movs	r0, #5
 80109ce:	f7f6 fad7 	bl	8006f80 <memp_malloc>
 80109d2:	4603      	mov	r3, r0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80109e6:	4b07      	ldr	r3, [pc, #28]	; (8010a04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80109e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80109ec:	4906      	ldr	r1, [pc, #24]	; (8010a08 <ip_frag_free_pbuf_custom_ref+0x30>)
 80109ee:	4807      	ldr	r0, [pc, #28]	; (8010a0c <ip_frag_free_pbuf_custom_ref+0x34>)
 80109f0:	f000 fb5e 	bl	80110b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80109f4:	6879      	ldr	r1, [r7, #4]
 80109f6:	2005      	movs	r0, #5
 80109f8:	f7f6 fb32 	bl	8007060 <memp_free>
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	080148d4 	.word	0x080148d4
 8010a08:	08014a8c 	.word	0x08014a8c
 8010a0c:	0801491c 	.word	0x0801491c

08010a10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <ipfrag_free_pbuf_custom+0x20>
 8010a22:	4b11      	ldr	r3, [pc, #68]	; (8010a68 <ipfrag_free_pbuf_custom+0x58>)
 8010a24:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010a28:	4910      	ldr	r1, [pc, #64]	; (8010a6c <ipfrag_free_pbuf_custom+0x5c>)
 8010a2a:	4811      	ldr	r0, [pc, #68]	; (8010a70 <ipfrag_free_pbuf_custom+0x60>)
 8010a2c:	f000 fb40 	bl	80110b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d006      	beq.n	8010a46 <ipfrag_free_pbuf_custom+0x36>
 8010a38:	4b0b      	ldr	r3, [pc, #44]	; (8010a68 <ipfrag_free_pbuf_custom+0x58>)
 8010a3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010a3e:	490d      	ldr	r1, [pc, #52]	; (8010a74 <ipfrag_free_pbuf_custom+0x64>)
 8010a40:	480b      	ldr	r0, [pc, #44]	; (8010a70 <ipfrag_free_pbuf_custom+0x60>)
 8010a42:	f000 fb35 	bl	80110b0 <iprintf>
  if (pcr->original != NULL) {
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	695b      	ldr	r3, [r3, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	695b      	ldr	r3, [r3, #20]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f7 f97a 	bl	8007d4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7ff ffbd 	bl	80109d8 <ip_frag_free_pbuf_custom_ref>
}
 8010a5e:	bf00      	nop
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	080148d4 	.word	0x080148d4
 8010a6c:	08014a98 	.word	0x08014a98
 8010a70:	0801491c 	.word	0x0801491c
 8010a74:	08014aa4 	.word	0x08014aa4

08010a78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b094      	sub	sp, #80	; 0x50
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010a84:	2300      	movs	r3, #0
 8010a86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a8e:	3b14      	subs	r3, #20
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	da00      	bge.n	8010a96 <ip4_frag+0x1e>
 8010a94:	3307      	adds	r3, #7
 8010a96:	10db      	asrs	r3, r3, #3
 8010a98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010a9a:	2314      	movs	r3, #20
 8010a9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	f003 030f 	and.w	r3, r3, #15
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b14      	cmp	r3, #20
 8010ab8:	d002      	beq.n	8010ac0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010aba:	f06f 0305 	mvn.w	r3, #5
 8010abe:	e110      	b.n	8010ce2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	895b      	ldrh	r3, [r3, #10]
 8010ac4:	2b13      	cmp	r3, #19
 8010ac6:	d809      	bhi.n	8010adc <ip4_frag+0x64>
 8010ac8:	4b88      	ldr	r3, [pc, #544]	; (8010cec <ip4_frag+0x274>)
 8010aca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010ace:	4988      	ldr	r1, [pc, #544]	; (8010cf0 <ip4_frag+0x278>)
 8010ad0:	4888      	ldr	r0, [pc, #544]	; (8010cf4 <ip4_frag+0x27c>)
 8010ad2:	f000 faed 	bl	80110b0 <iprintf>
 8010ad6:	f06f 0305 	mvn.w	r3, #5
 8010ada:	e102      	b.n	8010ce2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	88db      	ldrh	r3, [r3, #6]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f5 fd9e 	bl	8006624 <lwip_htons>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010aec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010af2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010af6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010afc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	891b      	ldrh	r3, [r3, #8]
 8010b02:	3b14      	subs	r3, #20
 8010b04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010b08:	e0e1      	b.n	8010cce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010b0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b14:	4293      	cmp	r3, r2
 8010b16:	bf28      	it	cs
 8010b18:	4613      	movcs	r3, r2
 8010b1a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010b1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b20:	2114      	movs	r1, #20
 8010b22:	200e      	movs	r0, #14
 8010b24:	f7f6 fe2e 	bl	8007784 <pbuf_alloc>
 8010b28:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 80d5 	beq.w	8010cdc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	895b      	ldrh	r3, [r3, #10]
 8010b36:	2b13      	cmp	r3, #19
 8010b38:	d806      	bhi.n	8010b48 <ip4_frag+0xd0>
 8010b3a:	4b6c      	ldr	r3, [pc, #432]	; (8010cec <ip4_frag+0x274>)
 8010b3c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010b40:	496d      	ldr	r1, [pc, #436]	; (8010cf8 <ip4_frag+0x280>)
 8010b42:	486c      	ldr	r0, [pc, #432]	; (8010cf4 <ip4_frag+0x27c>)
 8010b44:	f000 fab4 	bl	80110b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	2214      	movs	r2, #20
 8010b4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 fba6 	bl	80112a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010b62:	e064      	b.n	8010c2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	895a      	ldrh	r2, [r3, #10]
 8010b68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	895b      	ldrh	r3, [r3, #10]
 8010b72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d906      	bls.n	8010b86 <ip4_frag+0x10e>
 8010b78:	4b5c      	ldr	r3, [pc, #368]	; (8010cec <ip4_frag+0x274>)
 8010b7a:	f240 322d 	movw	r2, #813	; 0x32d
 8010b7e:	495f      	ldr	r1, [pc, #380]	; (8010cfc <ip4_frag+0x284>)
 8010b80:	485c      	ldr	r0, [pc, #368]	; (8010cf4 <ip4_frag+0x27c>)
 8010b82:	f000 fa95 	bl	80110b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010b86:	8bfa      	ldrh	r2, [r7, #30]
 8010b88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	bf28      	it	cs
 8010b90:	4613      	movcs	r3, r2
 8010b92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d105      	bne.n	8010baa <ip4_frag+0x132>
        poff = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	60fb      	str	r3, [r7, #12]
        continue;
 8010ba8:	e041      	b.n	8010c2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010baa:	f7ff ff0d 	bl	80109c8 <ip_frag_alloc_pbuf_custom_ref>
 8010bae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d103      	bne.n	8010bbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bb8:	f7f7 f8c8 	bl	8007d4c <pbuf_free>
        goto memerr;
 8010bbc:	e08f      	b.n	8010cde <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010bbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010bc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010bcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010bd0:	9201      	str	r2, [sp, #4]
 8010bd2:	9300      	str	r3, [sp, #0]
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2241      	movs	r2, #65	; 0x41
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f7f6 fefd 	bl	80079d8 <pbuf_alloced_custom>
 8010bde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010be6:	69b8      	ldr	r0, [r7, #24]
 8010be8:	f7ff fef6 	bl	80109d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bee:	f7f7 f8ad 	bl	8007d4c <pbuf_free>
        goto memerr;
 8010bf2:	e074      	b.n	8010cde <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f7f7 f949 	bl	8007e8c <pbuf_ref>
      pcr->original = p;
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	4a3f      	ldr	r2, [pc, #252]	; (8010d00 <ip4_frag+0x288>)
 8010c04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010c06:	6979      	ldr	r1, [r7, #20]
 8010c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c0a:	f7f7 f961 	bl	8007ed0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010c0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010c12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010c1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d004      	beq.n	8010c2e <ip4_frag+0x1b6>
        poff = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010c2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d196      	bne.n	8010b64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c3c:	4413      	add	r3, r2
 8010c3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c44:	f1a3 0213 	sub.w	r2, r3, #19
 8010c48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	bfcc      	ite	gt
 8010c50:	2301      	movgt	r3, #1
 8010c52:	2300      	movle	r3, #0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010c58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c60:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010c62:	6a3b      	ldr	r3, [r7, #32]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <ip4_frag+0x1f6>
 8010c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d003      	beq.n	8010c76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010c74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7f5 fcd3 	bl	8006624 <lwip_htons>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	461a      	mov	r2, r3
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c88:	3314      	adds	r3, #20
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f5 fcc9 	bl	8006624 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461a      	mov	r2, r3
 8010c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	729a      	strb	r2, [r3, #10]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cb2:	f7f7 f84b 	bl	8007d4c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010cb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cbc:	1ad3      	subs	r3, r2, r3
 8010cbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010cc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010cc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010cc8:	4413      	add	r3, r2
 8010cca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010cce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f47f af19 	bne.w	8010b0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e002      	b.n	8010ce2 <ip4_frag+0x26a>
      goto memerr;
 8010cdc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3748      	adds	r7, #72	; 0x48
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	080148d4 	.word	0x080148d4
 8010cf0:	08014ab0 	.word	0x08014ab0
 8010cf4:	0801491c 	.word	0x0801491c
 8010cf8:	08014acc 	.word	0x08014acc
 8010cfc:	08014aec 	.word	0x08014aec
 8010d00:	08010a11 	.word	0x08010a11

08010d04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010d0e:	230e      	movs	r3, #14
 8010d10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	895b      	ldrh	r3, [r3, #10]
 8010d16:	2b0e      	cmp	r3, #14
 8010d18:	d96e      	bls.n	8010df8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	7bdb      	ldrb	r3, [r3, #15]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d106      	bne.n	8010d30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d28:	3301      	adds	r3, #1
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	7b1a      	ldrb	r2, [r3, #12]
 8010d3a:	7b5b      	ldrb	r3, [r3, #13]
 8010d3c:	021b      	lsls	r3, r3, #8
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f003 0301 	and.w	r3, r3, #1
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d023      	beq.n	8010d96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d10f      	bne.n	8010d76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	785b      	ldrb	r3, [r3, #1]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d11b      	bne.n	8010d96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d62:	2b5e      	cmp	r3, #94	; 0x5e
 8010d64:	d117      	bne.n	8010d96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7b5b      	ldrb	r3, [r3, #13]
 8010d6a:	f043 0310 	orr.w	r3, r3, #16
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	735a      	strb	r2, [r3, #13]
 8010d74:	e00f      	b.n	8010d96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2206      	movs	r2, #6
 8010d7a:	4928      	ldr	r1, [pc, #160]	; (8010e1c <ethernet_input+0x118>)
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 f9ec 	bl	801115a <memcmp>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d106      	bne.n	8010d96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	7b5b      	ldrb	r3, [r3, #13]
 8010d8c:	f043 0308 	orr.w	r3, r3, #8
 8010d90:	b2da      	uxtb	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010d96:	89fb      	ldrh	r3, [r7, #14]
 8010d98:	2b08      	cmp	r3, #8
 8010d9a:	d003      	beq.n	8010da4 <ethernet_input+0xa0>
 8010d9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010da0:	d014      	beq.n	8010dcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010da2:	e032      	b.n	8010e0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010daa:	f003 0308 	and.w	r3, r3, #8
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d024      	beq.n	8010dfc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010db2:	8afb      	ldrh	r3, [r7, #22]
 8010db4:	4619      	mov	r1, r3
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7f6 ff42 	bl	8007c40 <pbuf_remove_header>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d11e      	bne.n	8010e00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010dc2:	6839      	ldr	r1, [r7, #0]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7fe ff21 	bl	800fc0c <ip4_input>
      break;
 8010dca:	e013      	b.n	8010df4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dd2:	f003 0308 	and.w	r3, r3, #8
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d014      	beq.n	8010e04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010dda:	8afb      	ldrh	r3, [r7, #22]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7f6 ff2e 	bl	8007c40 <pbuf_remove_header>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10e      	bne.n	8010e08 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010dea:	6839      	ldr	r1, [r7, #0]
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7fe f8c1 	bl	800ef74 <etharp_input>
      break;
 8010df2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010df4:	2300      	movs	r3, #0
 8010df6:	e00c      	b.n	8010e12 <ethernet_input+0x10e>
    goto free_and_return;
 8010df8:	bf00      	nop
 8010dfa:	e006      	b.n	8010e0a <ethernet_input+0x106>
        goto free_and_return;
 8010dfc:	bf00      	nop
 8010dfe:	e004      	b.n	8010e0a <ethernet_input+0x106>
        goto free_and_return;
 8010e00:	bf00      	nop
 8010e02:	e002      	b.n	8010e0a <ethernet_input+0x106>
        goto free_and_return;
 8010e04:	bf00      	nop
 8010e06:	e000      	b.n	8010e0a <ethernet_input+0x106>
        goto free_and_return;
 8010e08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7f6 ff9e 	bl	8007d4c <pbuf_free>
  return ERR_OK;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3718      	adds	r7, #24
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08015614 	.word	0x08015614

08010e20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e2e:	8c3b      	ldrh	r3, [r7, #32]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7f5 fbf7 	bl	8006624 <lwip_htons>
 8010e36:	4603      	mov	r3, r0
 8010e38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e3a:	210e      	movs	r1, #14
 8010e3c:	68b8      	ldr	r0, [r7, #8]
 8010e3e:	f7f6 feef 	bl	8007c20 <pbuf_add_header>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d125      	bne.n	8010e94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	8afa      	ldrh	r2, [r7, #22]
 8010e52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	2206      	movs	r2, #6
 8010e58:	6839      	ldr	r1, [r7, #0]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f000 fa21 	bl	80112a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	3306      	adds	r3, #6
 8010e64:	2206      	movs	r2, #6
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 fa1a 	bl	80112a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e74:	2b06      	cmp	r3, #6
 8010e76:	d006      	beq.n	8010e86 <ethernet_output+0x66>
 8010e78:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <ethernet_output+0x84>)
 8010e7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010e7e:	490a      	ldr	r1, [pc, #40]	; (8010ea8 <ethernet_output+0x88>)
 8010e80:	480a      	ldr	r0, [pc, #40]	; (8010eac <ethernet_output+0x8c>)
 8010e82:	f000 f915 	bl	80110b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	4798      	blx	r3
 8010e90:	4603      	mov	r3, r0
 8010e92:	e002      	b.n	8010e9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010e94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010e96:	f06f 0301 	mvn.w	r3, #1
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	08014afc 	.word	0x08014afc
 8010ea8:	08014b34 	.word	0x08014b34
 8010eac:	08014b68 	.word	0x08014b68

08010eb0 <rand>:
 8010eb0:	4b16      	ldr	r3, [pc, #88]	; (8010f0c <rand+0x5c>)
 8010eb2:	b510      	push	{r4, lr}
 8010eb4:	681c      	ldr	r4, [r3, #0]
 8010eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010eb8:	b9b3      	cbnz	r3, 8010ee8 <rand+0x38>
 8010eba:	2018      	movs	r0, #24
 8010ebc:	f000 fa6a 	bl	8011394 <malloc>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	6320      	str	r0, [r4, #48]	; 0x30
 8010ec4:	b920      	cbnz	r0, 8010ed0 <rand+0x20>
 8010ec6:	4b12      	ldr	r3, [pc, #72]	; (8010f10 <rand+0x60>)
 8010ec8:	4812      	ldr	r0, [pc, #72]	; (8010f14 <rand+0x64>)
 8010eca:	2152      	movs	r1, #82	; 0x52
 8010ecc:	f000 f9f8 	bl	80112c0 <__assert_func>
 8010ed0:	4911      	ldr	r1, [pc, #68]	; (8010f18 <rand+0x68>)
 8010ed2:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <rand+0x6c>)
 8010ed4:	e9c0 1300 	strd	r1, r3, [r0]
 8010ed8:	4b11      	ldr	r3, [pc, #68]	; (8010f20 <rand+0x70>)
 8010eda:	6083      	str	r3, [r0, #8]
 8010edc:	230b      	movs	r3, #11
 8010ede:	8183      	strh	r3, [r0, #12]
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010eea:	480e      	ldr	r0, [pc, #56]	; (8010f24 <rand+0x74>)
 8010eec:	690b      	ldr	r3, [r1, #16]
 8010eee:	694c      	ldr	r4, [r1, #20]
 8010ef0:	4a0d      	ldr	r2, [pc, #52]	; (8010f28 <rand+0x78>)
 8010ef2:	4358      	muls	r0, r3
 8010ef4:	fb02 0004 	mla	r0, r2, r4, r0
 8010ef8:	fba3 3202 	umull	r3, r2, r3, r2
 8010efc:	3301      	adds	r3, #1
 8010efe:	eb40 0002 	adc.w	r0, r0, r2
 8010f02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010f06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010f0a:	bd10      	pop	{r4, pc}
 8010f0c:	20000084 	.word	0x20000084
 8010f10:	08015622 	.word	0x08015622
 8010f14:	08015639 	.word	0x08015639
 8010f18:	abcd330e 	.word	0xabcd330e
 8010f1c:	e66d1234 	.word	0xe66d1234
 8010f20:	0005deec 	.word	0x0005deec
 8010f24:	5851f42d 	.word	0x5851f42d
 8010f28:	4c957f2d 	.word	0x4c957f2d

08010f2c <std>:
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	4604      	mov	r4, r0
 8010f32:	e9c0 3300 	strd	r3, r3, [r0]
 8010f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f3a:	6083      	str	r3, [r0, #8]
 8010f3c:	8181      	strh	r1, [r0, #12]
 8010f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010f40:	81c2      	strh	r2, [r0, #14]
 8010f42:	6183      	str	r3, [r0, #24]
 8010f44:	4619      	mov	r1, r3
 8010f46:	2208      	movs	r2, #8
 8010f48:	305c      	adds	r0, #92	; 0x5c
 8010f4a:	f000 f916 	bl	801117a <memset>
 8010f4e:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <std+0x58>)
 8010f50:	6263      	str	r3, [r4, #36]	; 0x24
 8010f52:	4b0d      	ldr	r3, [pc, #52]	; (8010f88 <std+0x5c>)
 8010f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f56:	4b0d      	ldr	r3, [pc, #52]	; (8010f8c <std+0x60>)
 8010f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f5a:	4b0d      	ldr	r3, [pc, #52]	; (8010f90 <std+0x64>)
 8010f5c:	6323      	str	r3, [r4, #48]	; 0x30
 8010f5e:	4b0d      	ldr	r3, [pc, #52]	; (8010f94 <std+0x68>)
 8010f60:	6224      	str	r4, [r4, #32]
 8010f62:	429c      	cmp	r4, r3
 8010f64:	d006      	beq.n	8010f74 <std+0x48>
 8010f66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010f6a:	4294      	cmp	r4, r2
 8010f6c:	d002      	beq.n	8010f74 <std+0x48>
 8010f6e:	33d0      	adds	r3, #208	; 0xd0
 8010f70:	429c      	cmp	r4, r3
 8010f72:	d105      	bne.n	8010f80 <std+0x54>
 8010f74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f7c:	f000 b98e 	b.w	801129c <__retarget_lock_init_recursive>
 8010f80:	bd10      	pop	{r4, pc}
 8010f82:	bf00      	nop
 8010f84:	080110d5 	.word	0x080110d5
 8010f88:	080110f7 	.word	0x080110f7
 8010f8c:	0801112f 	.word	0x0801112f
 8010f90:	08011153 	.word	0x08011153
 8010f94:	20008d84 	.word	0x20008d84

08010f98 <stdio_exit_handler>:
 8010f98:	4a02      	ldr	r2, [pc, #8]	; (8010fa4 <stdio_exit_handler+0xc>)
 8010f9a:	4903      	ldr	r1, [pc, #12]	; (8010fa8 <stdio_exit_handler+0x10>)
 8010f9c:	4803      	ldr	r0, [pc, #12]	; (8010fac <stdio_exit_handler+0x14>)
 8010f9e:	f000 b869 	b.w	8011074 <_fwalk_sglue>
 8010fa2:	bf00      	nop
 8010fa4:	2000002c 	.word	0x2000002c
 8010fa8:	08011bb1 	.word	0x08011bb1
 8010fac:	20000038 	.word	0x20000038

08010fb0 <cleanup_stdio>:
 8010fb0:	6841      	ldr	r1, [r0, #4]
 8010fb2:	4b0c      	ldr	r3, [pc, #48]	; (8010fe4 <cleanup_stdio+0x34>)
 8010fb4:	4299      	cmp	r1, r3
 8010fb6:	b510      	push	{r4, lr}
 8010fb8:	4604      	mov	r4, r0
 8010fba:	d001      	beq.n	8010fc0 <cleanup_stdio+0x10>
 8010fbc:	f000 fdf8 	bl	8011bb0 <_fflush_r>
 8010fc0:	68a1      	ldr	r1, [r4, #8]
 8010fc2:	4b09      	ldr	r3, [pc, #36]	; (8010fe8 <cleanup_stdio+0x38>)
 8010fc4:	4299      	cmp	r1, r3
 8010fc6:	d002      	beq.n	8010fce <cleanup_stdio+0x1e>
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f000 fdf1 	bl	8011bb0 <_fflush_r>
 8010fce:	68e1      	ldr	r1, [r4, #12]
 8010fd0:	4b06      	ldr	r3, [pc, #24]	; (8010fec <cleanup_stdio+0x3c>)
 8010fd2:	4299      	cmp	r1, r3
 8010fd4:	d004      	beq.n	8010fe0 <cleanup_stdio+0x30>
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fdc:	f000 bde8 	b.w	8011bb0 <_fflush_r>
 8010fe0:	bd10      	pop	{r4, pc}
 8010fe2:	bf00      	nop
 8010fe4:	20008d84 	.word	0x20008d84
 8010fe8:	20008dec 	.word	0x20008dec
 8010fec:	20008e54 	.word	0x20008e54

08010ff0 <global_stdio_init.part.0>:
 8010ff0:	b510      	push	{r4, lr}
 8010ff2:	4b0b      	ldr	r3, [pc, #44]	; (8011020 <global_stdio_init.part.0+0x30>)
 8010ff4:	4c0b      	ldr	r4, [pc, #44]	; (8011024 <global_stdio_init.part.0+0x34>)
 8010ff6:	4a0c      	ldr	r2, [pc, #48]	; (8011028 <global_stdio_init.part.0+0x38>)
 8010ff8:	601a      	str	r2, [r3, #0]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	2104      	movs	r1, #4
 8011000:	f7ff ff94 	bl	8010f2c <std>
 8011004:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011008:	2201      	movs	r2, #1
 801100a:	2109      	movs	r1, #9
 801100c:	f7ff ff8e 	bl	8010f2c <std>
 8011010:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011014:	2202      	movs	r2, #2
 8011016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801101a:	2112      	movs	r1, #18
 801101c:	f7ff bf86 	b.w	8010f2c <std>
 8011020:	20008ebc 	.word	0x20008ebc
 8011024:	20008d84 	.word	0x20008d84
 8011028:	08010f99 	.word	0x08010f99

0801102c <__sfp_lock_acquire>:
 801102c:	4801      	ldr	r0, [pc, #4]	; (8011034 <__sfp_lock_acquire+0x8>)
 801102e:	f000 b936 	b.w	801129e <__retarget_lock_acquire_recursive>
 8011032:	bf00      	nop
 8011034:	20008ec5 	.word	0x20008ec5

08011038 <__sfp_lock_release>:
 8011038:	4801      	ldr	r0, [pc, #4]	; (8011040 <__sfp_lock_release+0x8>)
 801103a:	f000 b931 	b.w	80112a0 <__retarget_lock_release_recursive>
 801103e:	bf00      	nop
 8011040:	20008ec5 	.word	0x20008ec5

08011044 <__sinit>:
 8011044:	b510      	push	{r4, lr}
 8011046:	4604      	mov	r4, r0
 8011048:	f7ff fff0 	bl	801102c <__sfp_lock_acquire>
 801104c:	6a23      	ldr	r3, [r4, #32]
 801104e:	b11b      	cbz	r3, 8011058 <__sinit+0x14>
 8011050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011054:	f7ff bff0 	b.w	8011038 <__sfp_lock_release>
 8011058:	4b04      	ldr	r3, [pc, #16]	; (801106c <__sinit+0x28>)
 801105a:	6223      	str	r3, [r4, #32]
 801105c:	4b04      	ldr	r3, [pc, #16]	; (8011070 <__sinit+0x2c>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d1f5      	bne.n	8011050 <__sinit+0xc>
 8011064:	f7ff ffc4 	bl	8010ff0 <global_stdio_init.part.0>
 8011068:	e7f2      	b.n	8011050 <__sinit+0xc>
 801106a:	bf00      	nop
 801106c:	08010fb1 	.word	0x08010fb1
 8011070:	20008ebc 	.word	0x20008ebc

08011074 <_fwalk_sglue>:
 8011074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011078:	4607      	mov	r7, r0
 801107a:	4688      	mov	r8, r1
 801107c:	4614      	mov	r4, r2
 801107e:	2600      	movs	r6, #0
 8011080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011084:	f1b9 0901 	subs.w	r9, r9, #1
 8011088:	d505      	bpl.n	8011096 <_fwalk_sglue+0x22>
 801108a:	6824      	ldr	r4, [r4, #0]
 801108c:	2c00      	cmp	r4, #0
 801108e:	d1f7      	bne.n	8011080 <_fwalk_sglue+0xc>
 8011090:	4630      	mov	r0, r6
 8011092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011096:	89ab      	ldrh	r3, [r5, #12]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d907      	bls.n	80110ac <_fwalk_sglue+0x38>
 801109c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110a0:	3301      	adds	r3, #1
 80110a2:	d003      	beq.n	80110ac <_fwalk_sglue+0x38>
 80110a4:	4629      	mov	r1, r5
 80110a6:	4638      	mov	r0, r7
 80110a8:	47c0      	blx	r8
 80110aa:	4306      	orrs	r6, r0
 80110ac:	3568      	adds	r5, #104	; 0x68
 80110ae:	e7e9      	b.n	8011084 <_fwalk_sglue+0x10>

080110b0 <iprintf>:
 80110b0:	b40f      	push	{r0, r1, r2, r3}
 80110b2:	b507      	push	{r0, r1, r2, lr}
 80110b4:	4906      	ldr	r1, [pc, #24]	; (80110d0 <iprintf+0x20>)
 80110b6:	ab04      	add	r3, sp, #16
 80110b8:	6808      	ldr	r0, [r1, #0]
 80110ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80110be:	6881      	ldr	r1, [r0, #8]
 80110c0:	9301      	str	r3, [sp, #4]
 80110c2:	f000 fa45 	bl	8011550 <_vfiprintf_r>
 80110c6:	b003      	add	sp, #12
 80110c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110cc:	b004      	add	sp, #16
 80110ce:	4770      	bx	lr
 80110d0:	20000084 	.word	0x20000084

080110d4 <__sread>:
 80110d4:	b510      	push	{r4, lr}
 80110d6:	460c      	mov	r4, r1
 80110d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110dc:	f000 f896 	bl	801120c <_read_r>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	bfab      	itete	ge
 80110e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80110e6:	89a3      	ldrhlt	r3, [r4, #12]
 80110e8:	181b      	addge	r3, r3, r0
 80110ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80110ee:	bfac      	ite	ge
 80110f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80110f2:	81a3      	strhlt	r3, [r4, #12]
 80110f4:	bd10      	pop	{r4, pc}

080110f6 <__swrite>:
 80110f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110fa:	461f      	mov	r7, r3
 80110fc:	898b      	ldrh	r3, [r1, #12]
 80110fe:	05db      	lsls	r3, r3, #23
 8011100:	4605      	mov	r5, r0
 8011102:	460c      	mov	r4, r1
 8011104:	4616      	mov	r6, r2
 8011106:	d505      	bpl.n	8011114 <__swrite+0x1e>
 8011108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801110c:	2302      	movs	r3, #2
 801110e:	2200      	movs	r2, #0
 8011110:	f000 f86a 	bl	80111e8 <_lseek_r>
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801111a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801111e:	81a3      	strh	r3, [r4, #12]
 8011120:	4632      	mov	r2, r6
 8011122:	463b      	mov	r3, r7
 8011124:	4628      	mov	r0, r5
 8011126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801112a:	f000 b881 	b.w	8011230 <_write_r>

0801112e <__sseek>:
 801112e:	b510      	push	{r4, lr}
 8011130:	460c      	mov	r4, r1
 8011132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011136:	f000 f857 	bl	80111e8 <_lseek_r>
 801113a:	1c43      	adds	r3, r0, #1
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	bf15      	itete	ne
 8011140:	6560      	strne	r0, [r4, #84]	; 0x54
 8011142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801114a:	81a3      	strheq	r3, [r4, #12]
 801114c:	bf18      	it	ne
 801114e:	81a3      	strhne	r3, [r4, #12]
 8011150:	bd10      	pop	{r4, pc}

08011152 <__sclose>:
 8011152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011156:	f000 b837 	b.w	80111c8 <_close_r>

0801115a <memcmp>:
 801115a:	b510      	push	{r4, lr}
 801115c:	3901      	subs	r1, #1
 801115e:	4402      	add	r2, r0
 8011160:	4290      	cmp	r0, r2
 8011162:	d101      	bne.n	8011168 <memcmp+0xe>
 8011164:	2000      	movs	r0, #0
 8011166:	e005      	b.n	8011174 <memcmp+0x1a>
 8011168:	7803      	ldrb	r3, [r0, #0]
 801116a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801116e:	42a3      	cmp	r3, r4
 8011170:	d001      	beq.n	8011176 <memcmp+0x1c>
 8011172:	1b18      	subs	r0, r3, r4
 8011174:	bd10      	pop	{r4, pc}
 8011176:	3001      	adds	r0, #1
 8011178:	e7f2      	b.n	8011160 <memcmp+0x6>

0801117a <memset>:
 801117a:	4402      	add	r2, r0
 801117c:	4603      	mov	r3, r0
 801117e:	4293      	cmp	r3, r2
 8011180:	d100      	bne.n	8011184 <memset+0xa>
 8011182:	4770      	bx	lr
 8011184:	f803 1b01 	strb.w	r1, [r3], #1
 8011188:	e7f9      	b.n	801117e <memset+0x4>

0801118a <strchr>:
 801118a:	b2c9      	uxtb	r1, r1
 801118c:	4603      	mov	r3, r0
 801118e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011192:	b11a      	cbz	r2, 801119c <strchr+0x12>
 8011194:	428a      	cmp	r2, r1
 8011196:	d1f9      	bne.n	801118c <strchr+0x2>
 8011198:	4618      	mov	r0, r3
 801119a:	4770      	bx	lr
 801119c:	2900      	cmp	r1, #0
 801119e:	bf18      	it	ne
 80111a0:	2300      	movne	r3, #0
 80111a2:	e7f9      	b.n	8011198 <strchr+0xe>

080111a4 <strncmp>:
 80111a4:	b510      	push	{r4, lr}
 80111a6:	b16a      	cbz	r2, 80111c4 <strncmp+0x20>
 80111a8:	3901      	subs	r1, #1
 80111aa:	1884      	adds	r4, r0, r2
 80111ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d103      	bne.n	80111c0 <strncmp+0x1c>
 80111b8:	42a0      	cmp	r0, r4
 80111ba:	d001      	beq.n	80111c0 <strncmp+0x1c>
 80111bc:	2a00      	cmp	r2, #0
 80111be:	d1f5      	bne.n	80111ac <strncmp+0x8>
 80111c0:	1ad0      	subs	r0, r2, r3
 80111c2:	bd10      	pop	{r4, pc}
 80111c4:	4610      	mov	r0, r2
 80111c6:	e7fc      	b.n	80111c2 <strncmp+0x1e>

080111c8 <_close_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	4d06      	ldr	r5, [pc, #24]	; (80111e4 <_close_r+0x1c>)
 80111cc:	2300      	movs	r3, #0
 80111ce:	4604      	mov	r4, r0
 80111d0:	4608      	mov	r0, r1
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	f7ef fde1 	bl	8000d9a <_close>
 80111d8:	1c43      	adds	r3, r0, #1
 80111da:	d102      	bne.n	80111e2 <_close_r+0x1a>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	b103      	cbz	r3, 80111e2 <_close_r+0x1a>
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	bd38      	pop	{r3, r4, r5, pc}
 80111e4:	20008ec0 	.word	0x20008ec0

080111e8 <_lseek_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d07      	ldr	r5, [pc, #28]	; (8011208 <_lseek_r+0x20>)
 80111ec:	4604      	mov	r4, r0
 80111ee:	4608      	mov	r0, r1
 80111f0:	4611      	mov	r1, r2
 80111f2:	2200      	movs	r2, #0
 80111f4:	602a      	str	r2, [r5, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	f7ef fdf6 	bl	8000de8 <_lseek>
 80111fc:	1c43      	adds	r3, r0, #1
 80111fe:	d102      	bne.n	8011206 <_lseek_r+0x1e>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	b103      	cbz	r3, 8011206 <_lseek_r+0x1e>
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	bd38      	pop	{r3, r4, r5, pc}
 8011208:	20008ec0 	.word	0x20008ec0

0801120c <_read_r>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4d07      	ldr	r5, [pc, #28]	; (801122c <_read_r+0x20>)
 8011210:	4604      	mov	r4, r0
 8011212:	4608      	mov	r0, r1
 8011214:	4611      	mov	r1, r2
 8011216:	2200      	movs	r2, #0
 8011218:	602a      	str	r2, [r5, #0]
 801121a:	461a      	mov	r2, r3
 801121c:	f7ef fd84 	bl	8000d28 <_read>
 8011220:	1c43      	adds	r3, r0, #1
 8011222:	d102      	bne.n	801122a <_read_r+0x1e>
 8011224:	682b      	ldr	r3, [r5, #0]
 8011226:	b103      	cbz	r3, 801122a <_read_r+0x1e>
 8011228:	6023      	str	r3, [r4, #0]
 801122a:	bd38      	pop	{r3, r4, r5, pc}
 801122c:	20008ec0 	.word	0x20008ec0

08011230 <_write_r>:
 8011230:	b538      	push	{r3, r4, r5, lr}
 8011232:	4d07      	ldr	r5, [pc, #28]	; (8011250 <_write_r+0x20>)
 8011234:	4604      	mov	r4, r0
 8011236:	4608      	mov	r0, r1
 8011238:	4611      	mov	r1, r2
 801123a:	2200      	movs	r2, #0
 801123c:	602a      	str	r2, [r5, #0]
 801123e:	461a      	mov	r2, r3
 8011240:	f7ef fd8f 	bl	8000d62 <_write>
 8011244:	1c43      	adds	r3, r0, #1
 8011246:	d102      	bne.n	801124e <_write_r+0x1e>
 8011248:	682b      	ldr	r3, [r5, #0]
 801124a:	b103      	cbz	r3, 801124e <_write_r+0x1e>
 801124c:	6023      	str	r3, [r4, #0]
 801124e:	bd38      	pop	{r3, r4, r5, pc}
 8011250:	20008ec0 	.word	0x20008ec0

08011254 <__libc_init_array>:
 8011254:	b570      	push	{r4, r5, r6, lr}
 8011256:	4d0d      	ldr	r5, [pc, #52]	; (801128c <__libc_init_array+0x38>)
 8011258:	4c0d      	ldr	r4, [pc, #52]	; (8011290 <__libc_init_array+0x3c>)
 801125a:	1b64      	subs	r4, r4, r5
 801125c:	10a4      	asrs	r4, r4, #2
 801125e:	2600      	movs	r6, #0
 8011260:	42a6      	cmp	r6, r4
 8011262:	d109      	bne.n	8011278 <__libc_init_array+0x24>
 8011264:	4d0b      	ldr	r5, [pc, #44]	; (8011294 <__libc_init_array+0x40>)
 8011266:	4c0c      	ldr	r4, [pc, #48]	; (8011298 <__libc_init_array+0x44>)
 8011268:	f000 fe52 	bl	8011f10 <_init>
 801126c:	1b64      	subs	r4, r4, r5
 801126e:	10a4      	asrs	r4, r4, #2
 8011270:	2600      	movs	r6, #0
 8011272:	42a6      	cmp	r6, r4
 8011274:	d105      	bne.n	8011282 <__libc_init_array+0x2e>
 8011276:	bd70      	pop	{r4, r5, r6, pc}
 8011278:	f855 3b04 	ldr.w	r3, [r5], #4
 801127c:	4798      	blx	r3
 801127e:	3601      	adds	r6, #1
 8011280:	e7ee      	b.n	8011260 <__libc_init_array+0xc>
 8011282:	f855 3b04 	ldr.w	r3, [r5], #4
 8011286:	4798      	blx	r3
 8011288:	3601      	adds	r6, #1
 801128a:	e7f2      	b.n	8011272 <__libc_init_array+0x1e>
 801128c:	08015708 	.word	0x08015708
 8011290:	08015708 	.word	0x08015708
 8011294:	08015708 	.word	0x08015708
 8011298:	0801570c 	.word	0x0801570c

0801129c <__retarget_lock_init_recursive>:
 801129c:	4770      	bx	lr

0801129e <__retarget_lock_acquire_recursive>:
 801129e:	4770      	bx	lr

080112a0 <__retarget_lock_release_recursive>:
 80112a0:	4770      	bx	lr

080112a2 <memcpy>:
 80112a2:	440a      	add	r2, r1
 80112a4:	4291      	cmp	r1, r2
 80112a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80112aa:	d100      	bne.n	80112ae <memcpy+0xc>
 80112ac:	4770      	bx	lr
 80112ae:	b510      	push	{r4, lr}
 80112b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112b8:	4291      	cmp	r1, r2
 80112ba:	d1f9      	bne.n	80112b0 <memcpy+0xe>
 80112bc:	bd10      	pop	{r4, pc}
	...

080112c0 <__assert_func>:
 80112c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112c2:	4614      	mov	r4, r2
 80112c4:	461a      	mov	r2, r3
 80112c6:	4b09      	ldr	r3, [pc, #36]	; (80112ec <__assert_func+0x2c>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4605      	mov	r5, r0
 80112cc:	68d8      	ldr	r0, [r3, #12]
 80112ce:	b14c      	cbz	r4, 80112e4 <__assert_func+0x24>
 80112d0:	4b07      	ldr	r3, [pc, #28]	; (80112f0 <__assert_func+0x30>)
 80112d2:	9100      	str	r1, [sp, #0]
 80112d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112d8:	4906      	ldr	r1, [pc, #24]	; (80112f4 <__assert_func+0x34>)
 80112da:	462b      	mov	r3, r5
 80112dc:	f000 fc90 	bl	8011c00 <fiprintf>
 80112e0:	f000 fd46 	bl	8011d70 <abort>
 80112e4:	4b04      	ldr	r3, [pc, #16]	; (80112f8 <__assert_func+0x38>)
 80112e6:	461c      	mov	r4, r3
 80112e8:	e7f3      	b.n	80112d2 <__assert_func+0x12>
 80112ea:	bf00      	nop
 80112ec:	20000084 	.word	0x20000084
 80112f0:	08015691 	.word	0x08015691
 80112f4:	0801569e 	.word	0x0801569e
 80112f8:	080156cc 	.word	0x080156cc

080112fc <_free_r>:
 80112fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112fe:	2900      	cmp	r1, #0
 8011300:	d044      	beq.n	801138c <_free_r+0x90>
 8011302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011306:	9001      	str	r0, [sp, #4]
 8011308:	2b00      	cmp	r3, #0
 801130a:	f1a1 0404 	sub.w	r4, r1, #4
 801130e:	bfb8      	it	lt
 8011310:	18e4      	addlt	r4, r4, r3
 8011312:	f000 f8e7 	bl	80114e4 <__malloc_lock>
 8011316:	4a1e      	ldr	r2, [pc, #120]	; (8011390 <_free_r+0x94>)
 8011318:	9801      	ldr	r0, [sp, #4]
 801131a:	6813      	ldr	r3, [r2, #0]
 801131c:	b933      	cbnz	r3, 801132c <_free_r+0x30>
 801131e:	6063      	str	r3, [r4, #4]
 8011320:	6014      	str	r4, [r2, #0]
 8011322:	b003      	add	sp, #12
 8011324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011328:	f000 b8e2 	b.w	80114f0 <__malloc_unlock>
 801132c:	42a3      	cmp	r3, r4
 801132e:	d908      	bls.n	8011342 <_free_r+0x46>
 8011330:	6825      	ldr	r5, [r4, #0]
 8011332:	1961      	adds	r1, r4, r5
 8011334:	428b      	cmp	r3, r1
 8011336:	bf01      	itttt	eq
 8011338:	6819      	ldreq	r1, [r3, #0]
 801133a:	685b      	ldreq	r3, [r3, #4]
 801133c:	1949      	addeq	r1, r1, r5
 801133e:	6021      	streq	r1, [r4, #0]
 8011340:	e7ed      	b.n	801131e <_free_r+0x22>
 8011342:	461a      	mov	r2, r3
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	b10b      	cbz	r3, 801134c <_free_r+0x50>
 8011348:	42a3      	cmp	r3, r4
 801134a:	d9fa      	bls.n	8011342 <_free_r+0x46>
 801134c:	6811      	ldr	r1, [r2, #0]
 801134e:	1855      	adds	r5, r2, r1
 8011350:	42a5      	cmp	r5, r4
 8011352:	d10b      	bne.n	801136c <_free_r+0x70>
 8011354:	6824      	ldr	r4, [r4, #0]
 8011356:	4421      	add	r1, r4
 8011358:	1854      	adds	r4, r2, r1
 801135a:	42a3      	cmp	r3, r4
 801135c:	6011      	str	r1, [r2, #0]
 801135e:	d1e0      	bne.n	8011322 <_free_r+0x26>
 8011360:	681c      	ldr	r4, [r3, #0]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	6053      	str	r3, [r2, #4]
 8011366:	440c      	add	r4, r1
 8011368:	6014      	str	r4, [r2, #0]
 801136a:	e7da      	b.n	8011322 <_free_r+0x26>
 801136c:	d902      	bls.n	8011374 <_free_r+0x78>
 801136e:	230c      	movs	r3, #12
 8011370:	6003      	str	r3, [r0, #0]
 8011372:	e7d6      	b.n	8011322 <_free_r+0x26>
 8011374:	6825      	ldr	r5, [r4, #0]
 8011376:	1961      	adds	r1, r4, r5
 8011378:	428b      	cmp	r3, r1
 801137a:	bf04      	itt	eq
 801137c:	6819      	ldreq	r1, [r3, #0]
 801137e:	685b      	ldreq	r3, [r3, #4]
 8011380:	6063      	str	r3, [r4, #4]
 8011382:	bf04      	itt	eq
 8011384:	1949      	addeq	r1, r1, r5
 8011386:	6021      	streq	r1, [r4, #0]
 8011388:	6054      	str	r4, [r2, #4]
 801138a:	e7ca      	b.n	8011322 <_free_r+0x26>
 801138c:	b003      	add	sp, #12
 801138e:	bd30      	pop	{r4, r5, pc}
 8011390:	20008ec8 	.word	0x20008ec8

08011394 <malloc>:
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <malloc+0xc>)
 8011396:	4601      	mov	r1, r0
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	f000 b823 	b.w	80113e4 <_malloc_r>
 801139e:	bf00      	nop
 80113a0:	20000084 	.word	0x20000084

080113a4 <sbrk_aligned>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	4e0e      	ldr	r6, [pc, #56]	; (80113e0 <sbrk_aligned+0x3c>)
 80113a8:	460c      	mov	r4, r1
 80113aa:	6831      	ldr	r1, [r6, #0]
 80113ac:	4605      	mov	r5, r0
 80113ae:	b911      	cbnz	r1, 80113b6 <sbrk_aligned+0x12>
 80113b0:	f000 fcce 	bl	8011d50 <_sbrk_r>
 80113b4:	6030      	str	r0, [r6, #0]
 80113b6:	4621      	mov	r1, r4
 80113b8:	4628      	mov	r0, r5
 80113ba:	f000 fcc9 	bl	8011d50 <_sbrk_r>
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	d00a      	beq.n	80113d8 <sbrk_aligned+0x34>
 80113c2:	1cc4      	adds	r4, r0, #3
 80113c4:	f024 0403 	bic.w	r4, r4, #3
 80113c8:	42a0      	cmp	r0, r4
 80113ca:	d007      	beq.n	80113dc <sbrk_aligned+0x38>
 80113cc:	1a21      	subs	r1, r4, r0
 80113ce:	4628      	mov	r0, r5
 80113d0:	f000 fcbe 	bl	8011d50 <_sbrk_r>
 80113d4:	3001      	adds	r0, #1
 80113d6:	d101      	bne.n	80113dc <sbrk_aligned+0x38>
 80113d8:	f04f 34ff 	mov.w	r4, #4294967295
 80113dc:	4620      	mov	r0, r4
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	20008ecc 	.word	0x20008ecc

080113e4 <_malloc_r>:
 80113e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	1ccd      	adds	r5, r1, #3
 80113ea:	f025 0503 	bic.w	r5, r5, #3
 80113ee:	3508      	adds	r5, #8
 80113f0:	2d0c      	cmp	r5, #12
 80113f2:	bf38      	it	cc
 80113f4:	250c      	movcc	r5, #12
 80113f6:	2d00      	cmp	r5, #0
 80113f8:	4607      	mov	r7, r0
 80113fa:	db01      	blt.n	8011400 <_malloc_r+0x1c>
 80113fc:	42a9      	cmp	r1, r5
 80113fe:	d905      	bls.n	801140c <_malloc_r+0x28>
 8011400:	230c      	movs	r3, #12
 8011402:	603b      	str	r3, [r7, #0]
 8011404:	2600      	movs	r6, #0
 8011406:	4630      	mov	r0, r6
 8011408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801140c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80114e0 <_malloc_r+0xfc>
 8011410:	f000 f868 	bl	80114e4 <__malloc_lock>
 8011414:	f8d8 3000 	ldr.w	r3, [r8]
 8011418:	461c      	mov	r4, r3
 801141a:	bb5c      	cbnz	r4, 8011474 <_malloc_r+0x90>
 801141c:	4629      	mov	r1, r5
 801141e:	4638      	mov	r0, r7
 8011420:	f7ff ffc0 	bl	80113a4 <sbrk_aligned>
 8011424:	1c43      	adds	r3, r0, #1
 8011426:	4604      	mov	r4, r0
 8011428:	d155      	bne.n	80114d6 <_malloc_r+0xf2>
 801142a:	f8d8 4000 	ldr.w	r4, [r8]
 801142e:	4626      	mov	r6, r4
 8011430:	2e00      	cmp	r6, #0
 8011432:	d145      	bne.n	80114c0 <_malloc_r+0xdc>
 8011434:	2c00      	cmp	r4, #0
 8011436:	d048      	beq.n	80114ca <_malloc_r+0xe6>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	4631      	mov	r1, r6
 801143c:	4638      	mov	r0, r7
 801143e:	eb04 0903 	add.w	r9, r4, r3
 8011442:	f000 fc85 	bl	8011d50 <_sbrk_r>
 8011446:	4581      	cmp	r9, r0
 8011448:	d13f      	bne.n	80114ca <_malloc_r+0xe6>
 801144a:	6821      	ldr	r1, [r4, #0]
 801144c:	1a6d      	subs	r5, r5, r1
 801144e:	4629      	mov	r1, r5
 8011450:	4638      	mov	r0, r7
 8011452:	f7ff ffa7 	bl	80113a4 <sbrk_aligned>
 8011456:	3001      	adds	r0, #1
 8011458:	d037      	beq.n	80114ca <_malloc_r+0xe6>
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	442b      	add	r3, r5
 801145e:	6023      	str	r3, [r4, #0]
 8011460:	f8d8 3000 	ldr.w	r3, [r8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d038      	beq.n	80114da <_malloc_r+0xf6>
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	42a2      	cmp	r2, r4
 801146c:	d12b      	bne.n	80114c6 <_malloc_r+0xe2>
 801146e:	2200      	movs	r2, #0
 8011470:	605a      	str	r2, [r3, #4]
 8011472:	e00f      	b.n	8011494 <_malloc_r+0xb0>
 8011474:	6822      	ldr	r2, [r4, #0]
 8011476:	1b52      	subs	r2, r2, r5
 8011478:	d41f      	bmi.n	80114ba <_malloc_r+0xd6>
 801147a:	2a0b      	cmp	r2, #11
 801147c:	d917      	bls.n	80114ae <_malloc_r+0xca>
 801147e:	1961      	adds	r1, r4, r5
 8011480:	42a3      	cmp	r3, r4
 8011482:	6025      	str	r5, [r4, #0]
 8011484:	bf18      	it	ne
 8011486:	6059      	strne	r1, [r3, #4]
 8011488:	6863      	ldr	r3, [r4, #4]
 801148a:	bf08      	it	eq
 801148c:	f8c8 1000 	streq.w	r1, [r8]
 8011490:	5162      	str	r2, [r4, r5]
 8011492:	604b      	str	r3, [r1, #4]
 8011494:	4638      	mov	r0, r7
 8011496:	f104 060b 	add.w	r6, r4, #11
 801149a:	f000 f829 	bl	80114f0 <__malloc_unlock>
 801149e:	f026 0607 	bic.w	r6, r6, #7
 80114a2:	1d23      	adds	r3, r4, #4
 80114a4:	1af2      	subs	r2, r6, r3
 80114a6:	d0ae      	beq.n	8011406 <_malloc_r+0x22>
 80114a8:	1b9b      	subs	r3, r3, r6
 80114aa:	50a3      	str	r3, [r4, r2]
 80114ac:	e7ab      	b.n	8011406 <_malloc_r+0x22>
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	6862      	ldr	r2, [r4, #4]
 80114b2:	d1dd      	bne.n	8011470 <_malloc_r+0x8c>
 80114b4:	f8c8 2000 	str.w	r2, [r8]
 80114b8:	e7ec      	b.n	8011494 <_malloc_r+0xb0>
 80114ba:	4623      	mov	r3, r4
 80114bc:	6864      	ldr	r4, [r4, #4]
 80114be:	e7ac      	b.n	801141a <_malloc_r+0x36>
 80114c0:	4634      	mov	r4, r6
 80114c2:	6876      	ldr	r6, [r6, #4]
 80114c4:	e7b4      	b.n	8011430 <_malloc_r+0x4c>
 80114c6:	4613      	mov	r3, r2
 80114c8:	e7cc      	b.n	8011464 <_malloc_r+0x80>
 80114ca:	230c      	movs	r3, #12
 80114cc:	603b      	str	r3, [r7, #0]
 80114ce:	4638      	mov	r0, r7
 80114d0:	f000 f80e 	bl	80114f0 <__malloc_unlock>
 80114d4:	e797      	b.n	8011406 <_malloc_r+0x22>
 80114d6:	6025      	str	r5, [r4, #0]
 80114d8:	e7dc      	b.n	8011494 <_malloc_r+0xb0>
 80114da:	605b      	str	r3, [r3, #4]
 80114dc:	deff      	udf	#255	; 0xff
 80114de:	bf00      	nop
 80114e0:	20008ec8 	.word	0x20008ec8

080114e4 <__malloc_lock>:
 80114e4:	4801      	ldr	r0, [pc, #4]	; (80114ec <__malloc_lock+0x8>)
 80114e6:	f7ff beda 	b.w	801129e <__retarget_lock_acquire_recursive>
 80114ea:	bf00      	nop
 80114ec:	20008ec4 	.word	0x20008ec4

080114f0 <__malloc_unlock>:
 80114f0:	4801      	ldr	r0, [pc, #4]	; (80114f8 <__malloc_unlock+0x8>)
 80114f2:	f7ff bed5 	b.w	80112a0 <__retarget_lock_release_recursive>
 80114f6:	bf00      	nop
 80114f8:	20008ec4 	.word	0x20008ec4

080114fc <__sfputc_r>:
 80114fc:	6893      	ldr	r3, [r2, #8]
 80114fe:	3b01      	subs	r3, #1
 8011500:	2b00      	cmp	r3, #0
 8011502:	b410      	push	{r4}
 8011504:	6093      	str	r3, [r2, #8]
 8011506:	da08      	bge.n	801151a <__sfputc_r+0x1e>
 8011508:	6994      	ldr	r4, [r2, #24]
 801150a:	42a3      	cmp	r3, r4
 801150c:	db01      	blt.n	8011512 <__sfputc_r+0x16>
 801150e:	290a      	cmp	r1, #10
 8011510:	d103      	bne.n	801151a <__sfputc_r+0x1e>
 8011512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011516:	f000 bb85 	b.w	8011c24 <__swbuf_r>
 801151a:	6813      	ldr	r3, [r2, #0]
 801151c:	1c58      	adds	r0, r3, #1
 801151e:	6010      	str	r0, [r2, #0]
 8011520:	7019      	strb	r1, [r3, #0]
 8011522:	4608      	mov	r0, r1
 8011524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011528:	4770      	bx	lr

0801152a <__sfputs_r>:
 801152a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152c:	4606      	mov	r6, r0
 801152e:	460f      	mov	r7, r1
 8011530:	4614      	mov	r4, r2
 8011532:	18d5      	adds	r5, r2, r3
 8011534:	42ac      	cmp	r4, r5
 8011536:	d101      	bne.n	801153c <__sfputs_r+0x12>
 8011538:	2000      	movs	r0, #0
 801153a:	e007      	b.n	801154c <__sfputs_r+0x22>
 801153c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011540:	463a      	mov	r2, r7
 8011542:	4630      	mov	r0, r6
 8011544:	f7ff ffda 	bl	80114fc <__sfputc_r>
 8011548:	1c43      	adds	r3, r0, #1
 801154a:	d1f3      	bne.n	8011534 <__sfputs_r+0xa>
 801154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011550 <_vfiprintf_r>:
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	460d      	mov	r5, r1
 8011556:	b09d      	sub	sp, #116	; 0x74
 8011558:	4614      	mov	r4, r2
 801155a:	4698      	mov	r8, r3
 801155c:	4606      	mov	r6, r0
 801155e:	b118      	cbz	r0, 8011568 <_vfiprintf_r+0x18>
 8011560:	6a03      	ldr	r3, [r0, #32]
 8011562:	b90b      	cbnz	r3, 8011568 <_vfiprintf_r+0x18>
 8011564:	f7ff fd6e 	bl	8011044 <__sinit>
 8011568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801156a:	07d9      	lsls	r1, r3, #31
 801156c:	d405      	bmi.n	801157a <_vfiprintf_r+0x2a>
 801156e:	89ab      	ldrh	r3, [r5, #12]
 8011570:	059a      	lsls	r2, r3, #22
 8011572:	d402      	bmi.n	801157a <_vfiprintf_r+0x2a>
 8011574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011576:	f7ff fe92 	bl	801129e <__retarget_lock_acquire_recursive>
 801157a:	89ab      	ldrh	r3, [r5, #12]
 801157c:	071b      	lsls	r3, r3, #28
 801157e:	d501      	bpl.n	8011584 <_vfiprintf_r+0x34>
 8011580:	692b      	ldr	r3, [r5, #16]
 8011582:	b99b      	cbnz	r3, 80115ac <_vfiprintf_r+0x5c>
 8011584:	4629      	mov	r1, r5
 8011586:	4630      	mov	r0, r6
 8011588:	f000 fb8a 	bl	8011ca0 <__swsetup_r>
 801158c:	b170      	cbz	r0, 80115ac <_vfiprintf_r+0x5c>
 801158e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011590:	07dc      	lsls	r4, r3, #31
 8011592:	d504      	bpl.n	801159e <_vfiprintf_r+0x4e>
 8011594:	f04f 30ff 	mov.w	r0, #4294967295
 8011598:	b01d      	add	sp, #116	; 0x74
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159e:	89ab      	ldrh	r3, [r5, #12]
 80115a0:	0598      	lsls	r0, r3, #22
 80115a2:	d4f7      	bmi.n	8011594 <_vfiprintf_r+0x44>
 80115a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115a6:	f7ff fe7b 	bl	80112a0 <__retarget_lock_release_recursive>
 80115aa:	e7f3      	b.n	8011594 <_vfiprintf_r+0x44>
 80115ac:	2300      	movs	r3, #0
 80115ae:	9309      	str	r3, [sp, #36]	; 0x24
 80115b0:	2320      	movs	r3, #32
 80115b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80115ba:	2330      	movs	r3, #48	; 0x30
 80115bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011770 <_vfiprintf_r+0x220>
 80115c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115c4:	f04f 0901 	mov.w	r9, #1
 80115c8:	4623      	mov	r3, r4
 80115ca:	469a      	mov	sl, r3
 80115cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115d0:	b10a      	cbz	r2, 80115d6 <_vfiprintf_r+0x86>
 80115d2:	2a25      	cmp	r2, #37	; 0x25
 80115d4:	d1f9      	bne.n	80115ca <_vfiprintf_r+0x7a>
 80115d6:	ebba 0b04 	subs.w	fp, sl, r4
 80115da:	d00b      	beq.n	80115f4 <_vfiprintf_r+0xa4>
 80115dc:	465b      	mov	r3, fp
 80115de:	4622      	mov	r2, r4
 80115e0:	4629      	mov	r1, r5
 80115e2:	4630      	mov	r0, r6
 80115e4:	f7ff ffa1 	bl	801152a <__sfputs_r>
 80115e8:	3001      	adds	r0, #1
 80115ea:	f000 80a9 	beq.w	8011740 <_vfiprintf_r+0x1f0>
 80115ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115f0:	445a      	add	r2, fp
 80115f2:	9209      	str	r2, [sp, #36]	; 0x24
 80115f4:	f89a 3000 	ldrb.w	r3, [sl]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f000 80a1 	beq.w	8011740 <_vfiprintf_r+0x1f0>
 80115fe:	2300      	movs	r3, #0
 8011600:	f04f 32ff 	mov.w	r2, #4294967295
 8011604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011608:	f10a 0a01 	add.w	sl, sl, #1
 801160c:	9304      	str	r3, [sp, #16]
 801160e:	9307      	str	r3, [sp, #28]
 8011610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011614:	931a      	str	r3, [sp, #104]	; 0x68
 8011616:	4654      	mov	r4, sl
 8011618:	2205      	movs	r2, #5
 801161a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161e:	4854      	ldr	r0, [pc, #336]	; (8011770 <_vfiprintf_r+0x220>)
 8011620:	f7ee fe26 	bl	8000270 <memchr>
 8011624:	9a04      	ldr	r2, [sp, #16]
 8011626:	b9d8      	cbnz	r0, 8011660 <_vfiprintf_r+0x110>
 8011628:	06d1      	lsls	r1, r2, #27
 801162a:	bf44      	itt	mi
 801162c:	2320      	movmi	r3, #32
 801162e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011632:	0713      	lsls	r3, r2, #28
 8011634:	bf44      	itt	mi
 8011636:	232b      	movmi	r3, #43	; 0x2b
 8011638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801163c:	f89a 3000 	ldrb.w	r3, [sl]
 8011640:	2b2a      	cmp	r3, #42	; 0x2a
 8011642:	d015      	beq.n	8011670 <_vfiprintf_r+0x120>
 8011644:	9a07      	ldr	r2, [sp, #28]
 8011646:	4654      	mov	r4, sl
 8011648:	2000      	movs	r0, #0
 801164a:	f04f 0c0a 	mov.w	ip, #10
 801164e:	4621      	mov	r1, r4
 8011650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011654:	3b30      	subs	r3, #48	; 0x30
 8011656:	2b09      	cmp	r3, #9
 8011658:	d94d      	bls.n	80116f6 <_vfiprintf_r+0x1a6>
 801165a:	b1b0      	cbz	r0, 801168a <_vfiprintf_r+0x13a>
 801165c:	9207      	str	r2, [sp, #28]
 801165e:	e014      	b.n	801168a <_vfiprintf_r+0x13a>
 8011660:	eba0 0308 	sub.w	r3, r0, r8
 8011664:	fa09 f303 	lsl.w	r3, r9, r3
 8011668:	4313      	orrs	r3, r2
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	46a2      	mov	sl, r4
 801166e:	e7d2      	b.n	8011616 <_vfiprintf_r+0xc6>
 8011670:	9b03      	ldr	r3, [sp, #12]
 8011672:	1d19      	adds	r1, r3, #4
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	9103      	str	r1, [sp, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	bfbb      	ittet	lt
 801167c:	425b      	neglt	r3, r3
 801167e:	f042 0202 	orrlt.w	r2, r2, #2
 8011682:	9307      	strge	r3, [sp, #28]
 8011684:	9307      	strlt	r3, [sp, #28]
 8011686:	bfb8      	it	lt
 8011688:	9204      	strlt	r2, [sp, #16]
 801168a:	7823      	ldrb	r3, [r4, #0]
 801168c:	2b2e      	cmp	r3, #46	; 0x2e
 801168e:	d10c      	bne.n	80116aa <_vfiprintf_r+0x15a>
 8011690:	7863      	ldrb	r3, [r4, #1]
 8011692:	2b2a      	cmp	r3, #42	; 0x2a
 8011694:	d134      	bne.n	8011700 <_vfiprintf_r+0x1b0>
 8011696:	9b03      	ldr	r3, [sp, #12]
 8011698:	1d1a      	adds	r2, r3, #4
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	9203      	str	r2, [sp, #12]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	bfb8      	it	lt
 80116a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80116a6:	3402      	adds	r4, #2
 80116a8:	9305      	str	r3, [sp, #20]
 80116aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011780 <_vfiprintf_r+0x230>
 80116ae:	7821      	ldrb	r1, [r4, #0]
 80116b0:	2203      	movs	r2, #3
 80116b2:	4650      	mov	r0, sl
 80116b4:	f7ee fddc 	bl	8000270 <memchr>
 80116b8:	b138      	cbz	r0, 80116ca <_vfiprintf_r+0x17a>
 80116ba:	9b04      	ldr	r3, [sp, #16]
 80116bc:	eba0 000a 	sub.w	r0, r0, sl
 80116c0:	2240      	movs	r2, #64	; 0x40
 80116c2:	4082      	lsls	r2, r0
 80116c4:	4313      	orrs	r3, r2
 80116c6:	3401      	adds	r4, #1
 80116c8:	9304      	str	r3, [sp, #16]
 80116ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ce:	4829      	ldr	r0, [pc, #164]	; (8011774 <_vfiprintf_r+0x224>)
 80116d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116d4:	2206      	movs	r2, #6
 80116d6:	f7ee fdcb 	bl	8000270 <memchr>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d03f      	beq.n	801175e <_vfiprintf_r+0x20e>
 80116de:	4b26      	ldr	r3, [pc, #152]	; (8011778 <_vfiprintf_r+0x228>)
 80116e0:	bb1b      	cbnz	r3, 801172a <_vfiprintf_r+0x1da>
 80116e2:	9b03      	ldr	r3, [sp, #12]
 80116e4:	3307      	adds	r3, #7
 80116e6:	f023 0307 	bic.w	r3, r3, #7
 80116ea:	3308      	adds	r3, #8
 80116ec:	9303      	str	r3, [sp, #12]
 80116ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f0:	443b      	add	r3, r7
 80116f2:	9309      	str	r3, [sp, #36]	; 0x24
 80116f4:	e768      	b.n	80115c8 <_vfiprintf_r+0x78>
 80116f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116fa:	460c      	mov	r4, r1
 80116fc:	2001      	movs	r0, #1
 80116fe:	e7a6      	b.n	801164e <_vfiprintf_r+0xfe>
 8011700:	2300      	movs	r3, #0
 8011702:	3401      	adds	r4, #1
 8011704:	9305      	str	r3, [sp, #20]
 8011706:	4619      	mov	r1, r3
 8011708:	f04f 0c0a 	mov.w	ip, #10
 801170c:	4620      	mov	r0, r4
 801170e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011712:	3a30      	subs	r2, #48	; 0x30
 8011714:	2a09      	cmp	r2, #9
 8011716:	d903      	bls.n	8011720 <_vfiprintf_r+0x1d0>
 8011718:	2b00      	cmp	r3, #0
 801171a:	d0c6      	beq.n	80116aa <_vfiprintf_r+0x15a>
 801171c:	9105      	str	r1, [sp, #20]
 801171e:	e7c4      	b.n	80116aa <_vfiprintf_r+0x15a>
 8011720:	fb0c 2101 	mla	r1, ip, r1, r2
 8011724:	4604      	mov	r4, r0
 8011726:	2301      	movs	r3, #1
 8011728:	e7f0      	b.n	801170c <_vfiprintf_r+0x1bc>
 801172a:	ab03      	add	r3, sp, #12
 801172c:	9300      	str	r3, [sp, #0]
 801172e:	462a      	mov	r2, r5
 8011730:	4b12      	ldr	r3, [pc, #72]	; (801177c <_vfiprintf_r+0x22c>)
 8011732:	a904      	add	r1, sp, #16
 8011734:	4630      	mov	r0, r6
 8011736:	f3af 8000 	nop.w
 801173a:	4607      	mov	r7, r0
 801173c:	1c78      	adds	r0, r7, #1
 801173e:	d1d6      	bne.n	80116ee <_vfiprintf_r+0x19e>
 8011740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011742:	07d9      	lsls	r1, r3, #31
 8011744:	d405      	bmi.n	8011752 <_vfiprintf_r+0x202>
 8011746:	89ab      	ldrh	r3, [r5, #12]
 8011748:	059a      	lsls	r2, r3, #22
 801174a:	d402      	bmi.n	8011752 <_vfiprintf_r+0x202>
 801174c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801174e:	f7ff fda7 	bl	80112a0 <__retarget_lock_release_recursive>
 8011752:	89ab      	ldrh	r3, [r5, #12]
 8011754:	065b      	lsls	r3, r3, #25
 8011756:	f53f af1d 	bmi.w	8011594 <_vfiprintf_r+0x44>
 801175a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801175c:	e71c      	b.n	8011598 <_vfiprintf_r+0x48>
 801175e:	ab03      	add	r3, sp, #12
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	462a      	mov	r2, r5
 8011764:	4b05      	ldr	r3, [pc, #20]	; (801177c <_vfiprintf_r+0x22c>)
 8011766:	a904      	add	r1, sp, #16
 8011768:	4630      	mov	r0, r6
 801176a:	f000 f879 	bl	8011860 <_printf_i>
 801176e:	e7e4      	b.n	801173a <_vfiprintf_r+0x1ea>
 8011770:	080156cd 	.word	0x080156cd
 8011774:	080156d7 	.word	0x080156d7
 8011778:	00000000 	.word	0x00000000
 801177c:	0801152b 	.word	0x0801152b
 8011780:	080156d3 	.word	0x080156d3

08011784 <_printf_common>:
 8011784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011788:	4616      	mov	r6, r2
 801178a:	4699      	mov	r9, r3
 801178c:	688a      	ldr	r2, [r1, #8]
 801178e:	690b      	ldr	r3, [r1, #16]
 8011790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011794:	4293      	cmp	r3, r2
 8011796:	bfb8      	it	lt
 8011798:	4613      	movlt	r3, r2
 801179a:	6033      	str	r3, [r6, #0]
 801179c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117a0:	4607      	mov	r7, r0
 80117a2:	460c      	mov	r4, r1
 80117a4:	b10a      	cbz	r2, 80117aa <_printf_common+0x26>
 80117a6:	3301      	adds	r3, #1
 80117a8:	6033      	str	r3, [r6, #0]
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	0699      	lsls	r1, r3, #26
 80117ae:	bf42      	ittt	mi
 80117b0:	6833      	ldrmi	r3, [r6, #0]
 80117b2:	3302      	addmi	r3, #2
 80117b4:	6033      	strmi	r3, [r6, #0]
 80117b6:	6825      	ldr	r5, [r4, #0]
 80117b8:	f015 0506 	ands.w	r5, r5, #6
 80117bc:	d106      	bne.n	80117cc <_printf_common+0x48>
 80117be:	f104 0a19 	add.w	sl, r4, #25
 80117c2:	68e3      	ldr	r3, [r4, #12]
 80117c4:	6832      	ldr	r2, [r6, #0]
 80117c6:	1a9b      	subs	r3, r3, r2
 80117c8:	42ab      	cmp	r3, r5
 80117ca:	dc26      	bgt.n	801181a <_printf_common+0x96>
 80117cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117d0:	1e13      	subs	r3, r2, #0
 80117d2:	6822      	ldr	r2, [r4, #0]
 80117d4:	bf18      	it	ne
 80117d6:	2301      	movne	r3, #1
 80117d8:	0692      	lsls	r2, r2, #26
 80117da:	d42b      	bmi.n	8011834 <_printf_common+0xb0>
 80117dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117e0:	4649      	mov	r1, r9
 80117e2:	4638      	mov	r0, r7
 80117e4:	47c0      	blx	r8
 80117e6:	3001      	adds	r0, #1
 80117e8:	d01e      	beq.n	8011828 <_printf_common+0xa4>
 80117ea:	6823      	ldr	r3, [r4, #0]
 80117ec:	6922      	ldr	r2, [r4, #16]
 80117ee:	f003 0306 	and.w	r3, r3, #6
 80117f2:	2b04      	cmp	r3, #4
 80117f4:	bf02      	ittt	eq
 80117f6:	68e5      	ldreq	r5, [r4, #12]
 80117f8:	6833      	ldreq	r3, [r6, #0]
 80117fa:	1aed      	subeq	r5, r5, r3
 80117fc:	68a3      	ldr	r3, [r4, #8]
 80117fe:	bf0c      	ite	eq
 8011800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011804:	2500      	movne	r5, #0
 8011806:	4293      	cmp	r3, r2
 8011808:	bfc4      	itt	gt
 801180a:	1a9b      	subgt	r3, r3, r2
 801180c:	18ed      	addgt	r5, r5, r3
 801180e:	2600      	movs	r6, #0
 8011810:	341a      	adds	r4, #26
 8011812:	42b5      	cmp	r5, r6
 8011814:	d11a      	bne.n	801184c <_printf_common+0xc8>
 8011816:	2000      	movs	r0, #0
 8011818:	e008      	b.n	801182c <_printf_common+0xa8>
 801181a:	2301      	movs	r3, #1
 801181c:	4652      	mov	r2, sl
 801181e:	4649      	mov	r1, r9
 8011820:	4638      	mov	r0, r7
 8011822:	47c0      	blx	r8
 8011824:	3001      	adds	r0, #1
 8011826:	d103      	bne.n	8011830 <_printf_common+0xac>
 8011828:	f04f 30ff 	mov.w	r0, #4294967295
 801182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011830:	3501      	adds	r5, #1
 8011832:	e7c6      	b.n	80117c2 <_printf_common+0x3e>
 8011834:	18e1      	adds	r1, r4, r3
 8011836:	1c5a      	adds	r2, r3, #1
 8011838:	2030      	movs	r0, #48	; 0x30
 801183a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801183e:	4422      	add	r2, r4
 8011840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011848:	3302      	adds	r3, #2
 801184a:	e7c7      	b.n	80117dc <_printf_common+0x58>
 801184c:	2301      	movs	r3, #1
 801184e:	4622      	mov	r2, r4
 8011850:	4649      	mov	r1, r9
 8011852:	4638      	mov	r0, r7
 8011854:	47c0      	blx	r8
 8011856:	3001      	adds	r0, #1
 8011858:	d0e6      	beq.n	8011828 <_printf_common+0xa4>
 801185a:	3601      	adds	r6, #1
 801185c:	e7d9      	b.n	8011812 <_printf_common+0x8e>
	...

08011860 <_printf_i>:
 8011860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011864:	7e0f      	ldrb	r7, [r1, #24]
 8011866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011868:	2f78      	cmp	r7, #120	; 0x78
 801186a:	4691      	mov	r9, r2
 801186c:	4680      	mov	r8, r0
 801186e:	460c      	mov	r4, r1
 8011870:	469a      	mov	sl, r3
 8011872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011876:	d807      	bhi.n	8011888 <_printf_i+0x28>
 8011878:	2f62      	cmp	r7, #98	; 0x62
 801187a:	d80a      	bhi.n	8011892 <_printf_i+0x32>
 801187c:	2f00      	cmp	r7, #0
 801187e:	f000 80d4 	beq.w	8011a2a <_printf_i+0x1ca>
 8011882:	2f58      	cmp	r7, #88	; 0x58
 8011884:	f000 80c0 	beq.w	8011a08 <_printf_i+0x1a8>
 8011888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801188c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011890:	e03a      	b.n	8011908 <_printf_i+0xa8>
 8011892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011896:	2b15      	cmp	r3, #21
 8011898:	d8f6      	bhi.n	8011888 <_printf_i+0x28>
 801189a:	a101      	add	r1, pc, #4	; (adr r1, 80118a0 <_printf_i+0x40>)
 801189c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118a0:	080118f9 	.word	0x080118f9
 80118a4:	0801190d 	.word	0x0801190d
 80118a8:	08011889 	.word	0x08011889
 80118ac:	08011889 	.word	0x08011889
 80118b0:	08011889 	.word	0x08011889
 80118b4:	08011889 	.word	0x08011889
 80118b8:	0801190d 	.word	0x0801190d
 80118bc:	08011889 	.word	0x08011889
 80118c0:	08011889 	.word	0x08011889
 80118c4:	08011889 	.word	0x08011889
 80118c8:	08011889 	.word	0x08011889
 80118cc:	08011a11 	.word	0x08011a11
 80118d0:	08011939 	.word	0x08011939
 80118d4:	080119cb 	.word	0x080119cb
 80118d8:	08011889 	.word	0x08011889
 80118dc:	08011889 	.word	0x08011889
 80118e0:	08011a33 	.word	0x08011a33
 80118e4:	08011889 	.word	0x08011889
 80118e8:	08011939 	.word	0x08011939
 80118ec:	08011889 	.word	0x08011889
 80118f0:	08011889 	.word	0x08011889
 80118f4:	080119d3 	.word	0x080119d3
 80118f8:	682b      	ldr	r3, [r5, #0]
 80118fa:	1d1a      	adds	r2, r3, #4
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	602a      	str	r2, [r5, #0]
 8011900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011908:	2301      	movs	r3, #1
 801190a:	e09f      	b.n	8011a4c <_printf_i+0x1ec>
 801190c:	6820      	ldr	r0, [r4, #0]
 801190e:	682b      	ldr	r3, [r5, #0]
 8011910:	0607      	lsls	r7, r0, #24
 8011912:	f103 0104 	add.w	r1, r3, #4
 8011916:	6029      	str	r1, [r5, #0]
 8011918:	d501      	bpl.n	801191e <_printf_i+0xbe>
 801191a:	681e      	ldr	r6, [r3, #0]
 801191c:	e003      	b.n	8011926 <_printf_i+0xc6>
 801191e:	0646      	lsls	r6, r0, #25
 8011920:	d5fb      	bpl.n	801191a <_printf_i+0xba>
 8011922:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011926:	2e00      	cmp	r6, #0
 8011928:	da03      	bge.n	8011932 <_printf_i+0xd2>
 801192a:	232d      	movs	r3, #45	; 0x2d
 801192c:	4276      	negs	r6, r6
 801192e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011932:	485a      	ldr	r0, [pc, #360]	; (8011a9c <_printf_i+0x23c>)
 8011934:	230a      	movs	r3, #10
 8011936:	e012      	b.n	801195e <_printf_i+0xfe>
 8011938:	682b      	ldr	r3, [r5, #0]
 801193a:	6820      	ldr	r0, [r4, #0]
 801193c:	1d19      	adds	r1, r3, #4
 801193e:	6029      	str	r1, [r5, #0]
 8011940:	0605      	lsls	r5, r0, #24
 8011942:	d501      	bpl.n	8011948 <_printf_i+0xe8>
 8011944:	681e      	ldr	r6, [r3, #0]
 8011946:	e002      	b.n	801194e <_printf_i+0xee>
 8011948:	0641      	lsls	r1, r0, #25
 801194a:	d5fb      	bpl.n	8011944 <_printf_i+0xe4>
 801194c:	881e      	ldrh	r6, [r3, #0]
 801194e:	4853      	ldr	r0, [pc, #332]	; (8011a9c <_printf_i+0x23c>)
 8011950:	2f6f      	cmp	r7, #111	; 0x6f
 8011952:	bf0c      	ite	eq
 8011954:	2308      	moveq	r3, #8
 8011956:	230a      	movne	r3, #10
 8011958:	2100      	movs	r1, #0
 801195a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801195e:	6865      	ldr	r5, [r4, #4]
 8011960:	60a5      	str	r5, [r4, #8]
 8011962:	2d00      	cmp	r5, #0
 8011964:	bfa2      	ittt	ge
 8011966:	6821      	ldrge	r1, [r4, #0]
 8011968:	f021 0104 	bicge.w	r1, r1, #4
 801196c:	6021      	strge	r1, [r4, #0]
 801196e:	b90e      	cbnz	r6, 8011974 <_printf_i+0x114>
 8011970:	2d00      	cmp	r5, #0
 8011972:	d04b      	beq.n	8011a0c <_printf_i+0x1ac>
 8011974:	4615      	mov	r5, r2
 8011976:	fbb6 f1f3 	udiv	r1, r6, r3
 801197a:	fb03 6711 	mls	r7, r3, r1, r6
 801197e:	5dc7      	ldrb	r7, [r0, r7]
 8011980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011984:	4637      	mov	r7, r6
 8011986:	42bb      	cmp	r3, r7
 8011988:	460e      	mov	r6, r1
 801198a:	d9f4      	bls.n	8011976 <_printf_i+0x116>
 801198c:	2b08      	cmp	r3, #8
 801198e:	d10b      	bne.n	80119a8 <_printf_i+0x148>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	07de      	lsls	r6, r3, #31
 8011994:	d508      	bpl.n	80119a8 <_printf_i+0x148>
 8011996:	6923      	ldr	r3, [r4, #16]
 8011998:	6861      	ldr	r1, [r4, #4]
 801199a:	4299      	cmp	r1, r3
 801199c:	bfde      	ittt	le
 801199e:	2330      	movle	r3, #48	; 0x30
 80119a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80119a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80119a8:	1b52      	subs	r2, r2, r5
 80119aa:	6122      	str	r2, [r4, #16]
 80119ac:	f8cd a000 	str.w	sl, [sp]
 80119b0:	464b      	mov	r3, r9
 80119b2:	aa03      	add	r2, sp, #12
 80119b4:	4621      	mov	r1, r4
 80119b6:	4640      	mov	r0, r8
 80119b8:	f7ff fee4 	bl	8011784 <_printf_common>
 80119bc:	3001      	adds	r0, #1
 80119be:	d14a      	bne.n	8011a56 <_printf_i+0x1f6>
 80119c0:	f04f 30ff 	mov.w	r0, #4294967295
 80119c4:	b004      	add	sp, #16
 80119c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	f043 0320 	orr.w	r3, r3, #32
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	4833      	ldr	r0, [pc, #204]	; (8011aa0 <_printf_i+0x240>)
 80119d4:	2778      	movs	r7, #120	; 0x78
 80119d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80119da:	6823      	ldr	r3, [r4, #0]
 80119dc:	6829      	ldr	r1, [r5, #0]
 80119de:	061f      	lsls	r7, r3, #24
 80119e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80119e4:	d402      	bmi.n	80119ec <_printf_i+0x18c>
 80119e6:	065f      	lsls	r7, r3, #25
 80119e8:	bf48      	it	mi
 80119ea:	b2b6      	uxthmi	r6, r6
 80119ec:	07df      	lsls	r7, r3, #31
 80119ee:	bf48      	it	mi
 80119f0:	f043 0320 	orrmi.w	r3, r3, #32
 80119f4:	6029      	str	r1, [r5, #0]
 80119f6:	bf48      	it	mi
 80119f8:	6023      	strmi	r3, [r4, #0]
 80119fa:	b91e      	cbnz	r6, 8011a04 <_printf_i+0x1a4>
 80119fc:	6823      	ldr	r3, [r4, #0]
 80119fe:	f023 0320 	bic.w	r3, r3, #32
 8011a02:	6023      	str	r3, [r4, #0]
 8011a04:	2310      	movs	r3, #16
 8011a06:	e7a7      	b.n	8011958 <_printf_i+0xf8>
 8011a08:	4824      	ldr	r0, [pc, #144]	; (8011a9c <_printf_i+0x23c>)
 8011a0a:	e7e4      	b.n	80119d6 <_printf_i+0x176>
 8011a0c:	4615      	mov	r5, r2
 8011a0e:	e7bd      	b.n	801198c <_printf_i+0x12c>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	6826      	ldr	r6, [r4, #0]
 8011a14:	6961      	ldr	r1, [r4, #20]
 8011a16:	1d18      	adds	r0, r3, #4
 8011a18:	6028      	str	r0, [r5, #0]
 8011a1a:	0635      	lsls	r5, r6, #24
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	d501      	bpl.n	8011a24 <_printf_i+0x1c4>
 8011a20:	6019      	str	r1, [r3, #0]
 8011a22:	e002      	b.n	8011a2a <_printf_i+0x1ca>
 8011a24:	0670      	lsls	r0, r6, #25
 8011a26:	d5fb      	bpl.n	8011a20 <_printf_i+0x1c0>
 8011a28:	8019      	strh	r1, [r3, #0]
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	6123      	str	r3, [r4, #16]
 8011a2e:	4615      	mov	r5, r2
 8011a30:	e7bc      	b.n	80119ac <_printf_i+0x14c>
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	1d1a      	adds	r2, r3, #4
 8011a36:	602a      	str	r2, [r5, #0]
 8011a38:	681d      	ldr	r5, [r3, #0]
 8011a3a:	6862      	ldr	r2, [r4, #4]
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f7ee fc16 	bl	8000270 <memchr>
 8011a44:	b108      	cbz	r0, 8011a4a <_printf_i+0x1ea>
 8011a46:	1b40      	subs	r0, r0, r5
 8011a48:	6060      	str	r0, [r4, #4]
 8011a4a:	6863      	ldr	r3, [r4, #4]
 8011a4c:	6123      	str	r3, [r4, #16]
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a54:	e7aa      	b.n	80119ac <_printf_i+0x14c>
 8011a56:	6923      	ldr	r3, [r4, #16]
 8011a58:	462a      	mov	r2, r5
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	47d0      	blx	sl
 8011a60:	3001      	adds	r0, #1
 8011a62:	d0ad      	beq.n	80119c0 <_printf_i+0x160>
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	079b      	lsls	r3, r3, #30
 8011a68:	d413      	bmi.n	8011a92 <_printf_i+0x232>
 8011a6a:	68e0      	ldr	r0, [r4, #12]
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	4298      	cmp	r0, r3
 8011a70:	bfb8      	it	lt
 8011a72:	4618      	movlt	r0, r3
 8011a74:	e7a6      	b.n	80119c4 <_printf_i+0x164>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4632      	mov	r2, r6
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	47d0      	blx	sl
 8011a80:	3001      	adds	r0, #1
 8011a82:	d09d      	beq.n	80119c0 <_printf_i+0x160>
 8011a84:	3501      	adds	r5, #1
 8011a86:	68e3      	ldr	r3, [r4, #12]
 8011a88:	9903      	ldr	r1, [sp, #12]
 8011a8a:	1a5b      	subs	r3, r3, r1
 8011a8c:	42ab      	cmp	r3, r5
 8011a8e:	dcf2      	bgt.n	8011a76 <_printf_i+0x216>
 8011a90:	e7eb      	b.n	8011a6a <_printf_i+0x20a>
 8011a92:	2500      	movs	r5, #0
 8011a94:	f104 0619 	add.w	r6, r4, #25
 8011a98:	e7f5      	b.n	8011a86 <_printf_i+0x226>
 8011a9a:	bf00      	nop
 8011a9c:	080156de 	.word	0x080156de
 8011aa0:	080156ef 	.word	0x080156ef

08011aa4 <__sflush_r>:
 8011aa4:	898a      	ldrh	r2, [r1, #12]
 8011aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aaa:	4605      	mov	r5, r0
 8011aac:	0710      	lsls	r0, r2, #28
 8011aae:	460c      	mov	r4, r1
 8011ab0:	d458      	bmi.n	8011b64 <__sflush_r+0xc0>
 8011ab2:	684b      	ldr	r3, [r1, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	dc05      	bgt.n	8011ac4 <__sflush_r+0x20>
 8011ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	dc02      	bgt.n	8011ac4 <__sflush_r+0x20>
 8011abe:	2000      	movs	r0, #0
 8011ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ac6:	2e00      	cmp	r6, #0
 8011ac8:	d0f9      	beq.n	8011abe <__sflush_r+0x1a>
 8011aca:	2300      	movs	r3, #0
 8011acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ad0:	682f      	ldr	r7, [r5, #0]
 8011ad2:	6a21      	ldr	r1, [r4, #32]
 8011ad4:	602b      	str	r3, [r5, #0]
 8011ad6:	d032      	beq.n	8011b3e <__sflush_r+0x9a>
 8011ad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	075a      	lsls	r2, r3, #29
 8011ade:	d505      	bpl.n	8011aec <__sflush_r+0x48>
 8011ae0:	6863      	ldr	r3, [r4, #4]
 8011ae2:	1ac0      	subs	r0, r0, r3
 8011ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ae6:	b10b      	cbz	r3, 8011aec <__sflush_r+0x48>
 8011ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011aea:	1ac0      	subs	r0, r0, r3
 8011aec:	2300      	movs	r3, #0
 8011aee:	4602      	mov	r2, r0
 8011af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011af2:	6a21      	ldr	r1, [r4, #32]
 8011af4:	4628      	mov	r0, r5
 8011af6:	47b0      	blx	r6
 8011af8:	1c43      	adds	r3, r0, #1
 8011afa:	89a3      	ldrh	r3, [r4, #12]
 8011afc:	d106      	bne.n	8011b0c <__sflush_r+0x68>
 8011afe:	6829      	ldr	r1, [r5, #0]
 8011b00:	291d      	cmp	r1, #29
 8011b02:	d82b      	bhi.n	8011b5c <__sflush_r+0xb8>
 8011b04:	4a29      	ldr	r2, [pc, #164]	; (8011bac <__sflush_r+0x108>)
 8011b06:	410a      	asrs	r2, r1
 8011b08:	07d6      	lsls	r6, r2, #31
 8011b0a:	d427      	bmi.n	8011b5c <__sflush_r+0xb8>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	6062      	str	r2, [r4, #4]
 8011b10:	04d9      	lsls	r1, r3, #19
 8011b12:	6922      	ldr	r2, [r4, #16]
 8011b14:	6022      	str	r2, [r4, #0]
 8011b16:	d504      	bpl.n	8011b22 <__sflush_r+0x7e>
 8011b18:	1c42      	adds	r2, r0, #1
 8011b1a:	d101      	bne.n	8011b20 <__sflush_r+0x7c>
 8011b1c:	682b      	ldr	r3, [r5, #0]
 8011b1e:	b903      	cbnz	r3, 8011b22 <__sflush_r+0x7e>
 8011b20:	6560      	str	r0, [r4, #84]	; 0x54
 8011b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b24:	602f      	str	r7, [r5, #0]
 8011b26:	2900      	cmp	r1, #0
 8011b28:	d0c9      	beq.n	8011abe <__sflush_r+0x1a>
 8011b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	d002      	beq.n	8011b38 <__sflush_r+0x94>
 8011b32:	4628      	mov	r0, r5
 8011b34:	f7ff fbe2 	bl	80112fc <_free_r>
 8011b38:	2000      	movs	r0, #0
 8011b3a:	6360      	str	r0, [r4, #52]	; 0x34
 8011b3c:	e7c0      	b.n	8011ac0 <__sflush_r+0x1c>
 8011b3e:	2301      	movs	r3, #1
 8011b40:	4628      	mov	r0, r5
 8011b42:	47b0      	blx	r6
 8011b44:	1c41      	adds	r1, r0, #1
 8011b46:	d1c8      	bne.n	8011ada <__sflush_r+0x36>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d0c5      	beq.n	8011ada <__sflush_r+0x36>
 8011b4e:	2b1d      	cmp	r3, #29
 8011b50:	d001      	beq.n	8011b56 <__sflush_r+0xb2>
 8011b52:	2b16      	cmp	r3, #22
 8011b54:	d101      	bne.n	8011b5a <__sflush_r+0xb6>
 8011b56:	602f      	str	r7, [r5, #0]
 8011b58:	e7b1      	b.n	8011abe <__sflush_r+0x1a>
 8011b5a:	89a3      	ldrh	r3, [r4, #12]
 8011b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b60:	81a3      	strh	r3, [r4, #12]
 8011b62:	e7ad      	b.n	8011ac0 <__sflush_r+0x1c>
 8011b64:	690f      	ldr	r7, [r1, #16]
 8011b66:	2f00      	cmp	r7, #0
 8011b68:	d0a9      	beq.n	8011abe <__sflush_r+0x1a>
 8011b6a:	0793      	lsls	r3, r2, #30
 8011b6c:	680e      	ldr	r6, [r1, #0]
 8011b6e:	bf08      	it	eq
 8011b70:	694b      	ldreq	r3, [r1, #20]
 8011b72:	600f      	str	r7, [r1, #0]
 8011b74:	bf18      	it	ne
 8011b76:	2300      	movne	r3, #0
 8011b78:	eba6 0807 	sub.w	r8, r6, r7
 8011b7c:	608b      	str	r3, [r1, #8]
 8011b7e:	f1b8 0f00 	cmp.w	r8, #0
 8011b82:	dd9c      	ble.n	8011abe <__sflush_r+0x1a>
 8011b84:	6a21      	ldr	r1, [r4, #32]
 8011b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b88:	4643      	mov	r3, r8
 8011b8a:	463a      	mov	r2, r7
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	47b0      	blx	r6
 8011b90:	2800      	cmp	r0, #0
 8011b92:	dc06      	bgt.n	8011ba2 <__sflush_r+0xfe>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b9a:	81a3      	strh	r3, [r4, #12]
 8011b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba0:	e78e      	b.n	8011ac0 <__sflush_r+0x1c>
 8011ba2:	4407      	add	r7, r0
 8011ba4:	eba8 0800 	sub.w	r8, r8, r0
 8011ba8:	e7e9      	b.n	8011b7e <__sflush_r+0xda>
 8011baa:	bf00      	nop
 8011bac:	dfbffffe 	.word	0xdfbffffe

08011bb0 <_fflush_r>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	690b      	ldr	r3, [r1, #16]
 8011bb4:	4605      	mov	r5, r0
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	b913      	cbnz	r3, 8011bc0 <_fflush_r+0x10>
 8011bba:	2500      	movs	r5, #0
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	bd38      	pop	{r3, r4, r5, pc}
 8011bc0:	b118      	cbz	r0, 8011bca <_fflush_r+0x1a>
 8011bc2:	6a03      	ldr	r3, [r0, #32]
 8011bc4:	b90b      	cbnz	r3, 8011bca <_fflush_r+0x1a>
 8011bc6:	f7ff fa3d 	bl	8011044 <__sinit>
 8011bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d0f3      	beq.n	8011bba <_fflush_r+0xa>
 8011bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011bd4:	07d0      	lsls	r0, r2, #31
 8011bd6:	d404      	bmi.n	8011be2 <_fflush_r+0x32>
 8011bd8:	0599      	lsls	r1, r3, #22
 8011bda:	d402      	bmi.n	8011be2 <_fflush_r+0x32>
 8011bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bde:	f7ff fb5e 	bl	801129e <__retarget_lock_acquire_recursive>
 8011be2:	4628      	mov	r0, r5
 8011be4:	4621      	mov	r1, r4
 8011be6:	f7ff ff5d 	bl	8011aa4 <__sflush_r>
 8011bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bec:	07da      	lsls	r2, r3, #31
 8011bee:	4605      	mov	r5, r0
 8011bf0:	d4e4      	bmi.n	8011bbc <_fflush_r+0xc>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	059b      	lsls	r3, r3, #22
 8011bf6:	d4e1      	bmi.n	8011bbc <_fflush_r+0xc>
 8011bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bfa:	f7ff fb51 	bl	80112a0 <__retarget_lock_release_recursive>
 8011bfe:	e7dd      	b.n	8011bbc <_fflush_r+0xc>

08011c00 <fiprintf>:
 8011c00:	b40e      	push	{r1, r2, r3}
 8011c02:	b503      	push	{r0, r1, lr}
 8011c04:	4601      	mov	r1, r0
 8011c06:	ab03      	add	r3, sp, #12
 8011c08:	4805      	ldr	r0, [pc, #20]	; (8011c20 <fiprintf+0x20>)
 8011c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0e:	6800      	ldr	r0, [r0, #0]
 8011c10:	9301      	str	r3, [sp, #4]
 8011c12:	f7ff fc9d 	bl	8011550 <_vfiprintf_r>
 8011c16:	b002      	add	sp, #8
 8011c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c1c:	b003      	add	sp, #12
 8011c1e:	4770      	bx	lr
 8011c20:	20000084 	.word	0x20000084

08011c24 <__swbuf_r>:
 8011c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c26:	460e      	mov	r6, r1
 8011c28:	4614      	mov	r4, r2
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	b118      	cbz	r0, 8011c36 <__swbuf_r+0x12>
 8011c2e:	6a03      	ldr	r3, [r0, #32]
 8011c30:	b90b      	cbnz	r3, 8011c36 <__swbuf_r+0x12>
 8011c32:	f7ff fa07 	bl	8011044 <__sinit>
 8011c36:	69a3      	ldr	r3, [r4, #24]
 8011c38:	60a3      	str	r3, [r4, #8]
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	071a      	lsls	r2, r3, #28
 8011c3e:	d525      	bpl.n	8011c8c <__swbuf_r+0x68>
 8011c40:	6923      	ldr	r3, [r4, #16]
 8011c42:	b31b      	cbz	r3, 8011c8c <__swbuf_r+0x68>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	6922      	ldr	r2, [r4, #16]
 8011c48:	1a98      	subs	r0, r3, r2
 8011c4a:	6963      	ldr	r3, [r4, #20]
 8011c4c:	b2f6      	uxtb	r6, r6
 8011c4e:	4283      	cmp	r3, r0
 8011c50:	4637      	mov	r7, r6
 8011c52:	dc04      	bgt.n	8011c5e <__swbuf_r+0x3a>
 8011c54:	4621      	mov	r1, r4
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7ff ffaa 	bl	8011bb0 <_fflush_r>
 8011c5c:	b9e0      	cbnz	r0, 8011c98 <__swbuf_r+0x74>
 8011c5e:	68a3      	ldr	r3, [r4, #8]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	60a3      	str	r3, [r4, #8]
 8011c64:	6823      	ldr	r3, [r4, #0]
 8011c66:	1c5a      	adds	r2, r3, #1
 8011c68:	6022      	str	r2, [r4, #0]
 8011c6a:	701e      	strb	r6, [r3, #0]
 8011c6c:	6962      	ldr	r2, [r4, #20]
 8011c6e:	1c43      	adds	r3, r0, #1
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d004      	beq.n	8011c7e <__swbuf_r+0x5a>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	07db      	lsls	r3, r3, #31
 8011c78:	d506      	bpl.n	8011c88 <__swbuf_r+0x64>
 8011c7a:	2e0a      	cmp	r6, #10
 8011c7c:	d104      	bne.n	8011c88 <__swbuf_r+0x64>
 8011c7e:	4621      	mov	r1, r4
 8011c80:	4628      	mov	r0, r5
 8011c82:	f7ff ff95 	bl	8011bb0 <_fflush_r>
 8011c86:	b938      	cbnz	r0, 8011c98 <__swbuf_r+0x74>
 8011c88:	4638      	mov	r0, r7
 8011c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4628      	mov	r0, r5
 8011c90:	f000 f806 	bl	8011ca0 <__swsetup_r>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d0d5      	beq.n	8011c44 <__swbuf_r+0x20>
 8011c98:	f04f 37ff 	mov.w	r7, #4294967295
 8011c9c:	e7f4      	b.n	8011c88 <__swbuf_r+0x64>
	...

08011ca0 <__swsetup_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4b2a      	ldr	r3, [pc, #168]	; (8011d4c <__swsetup_r+0xac>)
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	6818      	ldr	r0, [r3, #0]
 8011ca8:	460c      	mov	r4, r1
 8011caa:	b118      	cbz	r0, 8011cb4 <__swsetup_r+0x14>
 8011cac:	6a03      	ldr	r3, [r0, #32]
 8011cae:	b90b      	cbnz	r3, 8011cb4 <__swsetup_r+0x14>
 8011cb0:	f7ff f9c8 	bl	8011044 <__sinit>
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cba:	0718      	lsls	r0, r3, #28
 8011cbc:	d422      	bmi.n	8011d04 <__swsetup_r+0x64>
 8011cbe:	06d9      	lsls	r1, r3, #27
 8011cc0:	d407      	bmi.n	8011cd2 <__swsetup_r+0x32>
 8011cc2:	2309      	movs	r3, #9
 8011cc4:	602b      	str	r3, [r5, #0]
 8011cc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011cca:	81a3      	strh	r3, [r4, #12]
 8011ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd0:	e034      	b.n	8011d3c <__swsetup_r+0x9c>
 8011cd2:	0758      	lsls	r0, r3, #29
 8011cd4:	d512      	bpl.n	8011cfc <__swsetup_r+0x5c>
 8011cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cd8:	b141      	cbz	r1, 8011cec <__swsetup_r+0x4c>
 8011cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cde:	4299      	cmp	r1, r3
 8011ce0:	d002      	beq.n	8011ce8 <__swsetup_r+0x48>
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	f7ff fb0a 	bl	80112fc <_free_r>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	6363      	str	r3, [r4, #52]	; 0x34
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011cf2:	81a3      	strh	r3, [r4, #12]
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	6063      	str	r3, [r4, #4]
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	6023      	str	r3, [r4, #0]
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	f043 0308 	orr.w	r3, r3, #8
 8011d02:	81a3      	strh	r3, [r4, #12]
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	b94b      	cbnz	r3, 8011d1c <__swsetup_r+0x7c>
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d12:	d003      	beq.n	8011d1c <__swsetup_r+0x7c>
 8011d14:	4621      	mov	r1, r4
 8011d16:	4628      	mov	r0, r5
 8011d18:	f000 f857 	bl	8011dca <__smakebuf_r>
 8011d1c:	89a0      	ldrh	r0, [r4, #12]
 8011d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d22:	f010 0301 	ands.w	r3, r0, #1
 8011d26:	d00a      	beq.n	8011d3e <__swsetup_r+0x9e>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	60a3      	str	r3, [r4, #8]
 8011d2c:	6963      	ldr	r3, [r4, #20]
 8011d2e:	425b      	negs	r3, r3
 8011d30:	61a3      	str	r3, [r4, #24]
 8011d32:	6923      	ldr	r3, [r4, #16]
 8011d34:	b943      	cbnz	r3, 8011d48 <__swsetup_r+0xa8>
 8011d36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d3a:	d1c4      	bne.n	8011cc6 <__swsetup_r+0x26>
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	0781      	lsls	r1, r0, #30
 8011d40:	bf58      	it	pl
 8011d42:	6963      	ldrpl	r3, [r4, #20]
 8011d44:	60a3      	str	r3, [r4, #8]
 8011d46:	e7f4      	b.n	8011d32 <__swsetup_r+0x92>
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e7f7      	b.n	8011d3c <__swsetup_r+0x9c>
 8011d4c:	20000084 	.word	0x20000084

08011d50 <_sbrk_r>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	4d06      	ldr	r5, [pc, #24]	; (8011d6c <_sbrk_r+0x1c>)
 8011d54:	2300      	movs	r3, #0
 8011d56:	4604      	mov	r4, r0
 8011d58:	4608      	mov	r0, r1
 8011d5a:	602b      	str	r3, [r5, #0]
 8011d5c:	f7ef f852 	bl	8000e04 <_sbrk>
 8011d60:	1c43      	adds	r3, r0, #1
 8011d62:	d102      	bne.n	8011d6a <_sbrk_r+0x1a>
 8011d64:	682b      	ldr	r3, [r5, #0]
 8011d66:	b103      	cbz	r3, 8011d6a <_sbrk_r+0x1a>
 8011d68:	6023      	str	r3, [r4, #0]
 8011d6a:	bd38      	pop	{r3, r4, r5, pc}
 8011d6c:	20008ec0 	.word	0x20008ec0

08011d70 <abort>:
 8011d70:	b508      	push	{r3, lr}
 8011d72:	2006      	movs	r0, #6
 8011d74:	f000 f88e 	bl	8011e94 <raise>
 8011d78:	2001      	movs	r0, #1
 8011d7a:	f7ee ffcb 	bl	8000d14 <_exit>

08011d7e <__swhatbuf_r>:
 8011d7e:	b570      	push	{r4, r5, r6, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d86:	2900      	cmp	r1, #0
 8011d88:	b096      	sub	sp, #88	; 0x58
 8011d8a:	4615      	mov	r5, r2
 8011d8c:	461e      	mov	r6, r3
 8011d8e:	da0d      	bge.n	8011dac <__swhatbuf_r+0x2e>
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011d96:	f04f 0100 	mov.w	r1, #0
 8011d9a:	bf0c      	ite	eq
 8011d9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011da0:	2340      	movne	r3, #64	; 0x40
 8011da2:	2000      	movs	r0, #0
 8011da4:	6031      	str	r1, [r6, #0]
 8011da6:	602b      	str	r3, [r5, #0]
 8011da8:	b016      	add	sp, #88	; 0x58
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	466a      	mov	r2, sp
 8011dae:	f000 f879 	bl	8011ea4 <_fstat_r>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	dbec      	blt.n	8011d90 <__swhatbuf_r+0x12>
 8011db6:	9901      	ldr	r1, [sp, #4]
 8011db8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011dbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011dc0:	4259      	negs	r1, r3
 8011dc2:	4159      	adcs	r1, r3
 8011dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dc8:	e7eb      	b.n	8011da2 <__swhatbuf_r+0x24>

08011dca <__smakebuf_r>:
 8011dca:	898b      	ldrh	r3, [r1, #12]
 8011dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dce:	079d      	lsls	r5, r3, #30
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	d507      	bpl.n	8011de6 <__smakebuf_r+0x1c>
 8011dd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011dda:	6023      	str	r3, [r4, #0]
 8011ddc:	6123      	str	r3, [r4, #16]
 8011dde:	2301      	movs	r3, #1
 8011de0:	6163      	str	r3, [r4, #20]
 8011de2:	b002      	add	sp, #8
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	ab01      	add	r3, sp, #4
 8011de8:	466a      	mov	r2, sp
 8011dea:	f7ff ffc8 	bl	8011d7e <__swhatbuf_r>
 8011dee:	9900      	ldr	r1, [sp, #0]
 8011df0:	4605      	mov	r5, r0
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff faf6 	bl	80113e4 <_malloc_r>
 8011df8:	b948      	cbnz	r0, 8011e0e <__smakebuf_r+0x44>
 8011dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dfe:	059a      	lsls	r2, r3, #22
 8011e00:	d4ef      	bmi.n	8011de2 <__smakebuf_r+0x18>
 8011e02:	f023 0303 	bic.w	r3, r3, #3
 8011e06:	f043 0302 	orr.w	r3, r3, #2
 8011e0a:	81a3      	strh	r3, [r4, #12]
 8011e0c:	e7e3      	b.n	8011dd6 <__smakebuf_r+0xc>
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	6020      	str	r0, [r4, #0]
 8011e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e16:	81a3      	strh	r3, [r4, #12]
 8011e18:	9b00      	ldr	r3, [sp, #0]
 8011e1a:	6163      	str	r3, [r4, #20]
 8011e1c:	9b01      	ldr	r3, [sp, #4]
 8011e1e:	6120      	str	r0, [r4, #16]
 8011e20:	b15b      	cbz	r3, 8011e3a <__smakebuf_r+0x70>
 8011e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e26:	4630      	mov	r0, r6
 8011e28:	f000 f84e 	bl	8011ec8 <_isatty_r>
 8011e2c:	b128      	cbz	r0, 8011e3a <__smakebuf_r+0x70>
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	f023 0303 	bic.w	r3, r3, #3
 8011e34:	f043 0301 	orr.w	r3, r3, #1
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	89a3      	ldrh	r3, [r4, #12]
 8011e3c:	431d      	orrs	r5, r3
 8011e3e:	81a5      	strh	r5, [r4, #12]
 8011e40:	e7cf      	b.n	8011de2 <__smakebuf_r+0x18>

08011e42 <_raise_r>:
 8011e42:	291f      	cmp	r1, #31
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4604      	mov	r4, r0
 8011e48:	460d      	mov	r5, r1
 8011e4a:	d904      	bls.n	8011e56 <_raise_r+0x14>
 8011e4c:	2316      	movs	r3, #22
 8011e4e:	6003      	str	r3, [r0, #0]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	bd38      	pop	{r3, r4, r5, pc}
 8011e56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011e58:	b112      	cbz	r2, 8011e60 <_raise_r+0x1e>
 8011e5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e5e:	b94b      	cbnz	r3, 8011e74 <_raise_r+0x32>
 8011e60:	4620      	mov	r0, r4
 8011e62:	f000 f853 	bl	8011f0c <_getpid_r>
 8011e66:	462a      	mov	r2, r5
 8011e68:	4601      	mov	r1, r0
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e70:	f000 b83a 	b.w	8011ee8 <_kill_r>
 8011e74:	2b01      	cmp	r3, #1
 8011e76:	d00a      	beq.n	8011e8e <_raise_r+0x4c>
 8011e78:	1c59      	adds	r1, r3, #1
 8011e7a:	d103      	bne.n	8011e84 <_raise_r+0x42>
 8011e7c:	2316      	movs	r3, #22
 8011e7e:	6003      	str	r3, [r0, #0]
 8011e80:	2001      	movs	r0, #1
 8011e82:	e7e7      	b.n	8011e54 <_raise_r+0x12>
 8011e84:	2400      	movs	r4, #0
 8011e86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	4798      	blx	r3
 8011e8e:	2000      	movs	r0, #0
 8011e90:	e7e0      	b.n	8011e54 <_raise_r+0x12>
	...

08011e94 <raise>:
 8011e94:	4b02      	ldr	r3, [pc, #8]	; (8011ea0 <raise+0xc>)
 8011e96:	4601      	mov	r1, r0
 8011e98:	6818      	ldr	r0, [r3, #0]
 8011e9a:	f7ff bfd2 	b.w	8011e42 <_raise_r>
 8011e9e:	bf00      	nop
 8011ea0:	20000084 	.word	0x20000084

08011ea4 <_fstat_r>:
 8011ea4:	b538      	push	{r3, r4, r5, lr}
 8011ea6:	4d07      	ldr	r5, [pc, #28]	; (8011ec4 <_fstat_r+0x20>)
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	4604      	mov	r4, r0
 8011eac:	4608      	mov	r0, r1
 8011eae:	4611      	mov	r1, r2
 8011eb0:	602b      	str	r3, [r5, #0]
 8011eb2:	f7ee ff7e 	bl	8000db2 <_fstat>
 8011eb6:	1c43      	adds	r3, r0, #1
 8011eb8:	d102      	bne.n	8011ec0 <_fstat_r+0x1c>
 8011eba:	682b      	ldr	r3, [r5, #0]
 8011ebc:	b103      	cbz	r3, 8011ec0 <_fstat_r+0x1c>
 8011ebe:	6023      	str	r3, [r4, #0]
 8011ec0:	bd38      	pop	{r3, r4, r5, pc}
 8011ec2:	bf00      	nop
 8011ec4:	20008ec0 	.word	0x20008ec0

08011ec8 <_isatty_r>:
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	4d06      	ldr	r5, [pc, #24]	; (8011ee4 <_isatty_r+0x1c>)
 8011ecc:	2300      	movs	r3, #0
 8011ece:	4604      	mov	r4, r0
 8011ed0:	4608      	mov	r0, r1
 8011ed2:	602b      	str	r3, [r5, #0]
 8011ed4:	f7ee ff7d 	bl	8000dd2 <_isatty>
 8011ed8:	1c43      	adds	r3, r0, #1
 8011eda:	d102      	bne.n	8011ee2 <_isatty_r+0x1a>
 8011edc:	682b      	ldr	r3, [r5, #0]
 8011ede:	b103      	cbz	r3, 8011ee2 <_isatty_r+0x1a>
 8011ee0:	6023      	str	r3, [r4, #0]
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	20008ec0 	.word	0x20008ec0

08011ee8 <_kill_r>:
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	4d07      	ldr	r5, [pc, #28]	; (8011f08 <_kill_r+0x20>)
 8011eec:	2300      	movs	r3, #0
 8011eee:	4604      	mov	r4, r0
 8011ef0:	4608      	mov	r0, r1
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	602b      	str	r3, [r5, #0]
 8011ef6:	f7ee fefb 	bl	8000cf0 <_kill>
 8011efa:	1c43      	adds	r3, r0, #1
 8011efc:	d102      	bne.n	8011f04 <_kill_r+0x1c>
 8011efe:	682b      	ldr	r3, [r5, #0]
 8011f00:	b103      	cbz	r3, 8011f04 <_kill_r+0x1c>
 8011f02:	6023      	str	r3, [r4, #0]
 8011f04:	bd38      	pop	{r3, r4, r5, pc}
 8011f06:	bf00      	nop
 8011f08:	20008ec0 	.word	0x20008ec0

08011f0c <_getpid_r>:
 8011f0c:	f7ee bee8 	b.w	8000ce0 <_getpid>

08011f10 <_init>:
 8011f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f12:	bf00      	nop
 8011f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f16:	bc08      	pop	{r3}
 8011f18:	469e      	mov	lr, r3
 8011f1a:	4770      	bx	lr

08011f1c <_fini>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	bf00      	nop
 8011f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f22:	bc08      	pop	{r3}
 8011f24:	469e      	mov	lr, r3
 8011f26:	4770      	bx	lr
