
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015df0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000310c  08015ff0  08015ff0  00025ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080190fc  080190fc  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  080190fc  080190fc  000290fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019104  08019104  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019104  08019104  00029104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019108  08019108  00029108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801910c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08019188  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08019228  0003011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d4e8  200001bc  080192c8  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d6a4  080192c8  0003d6a4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301ea  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002ff87  00000000  00000000  0003022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007988  00000000  00000000  000601b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021e0  00000000  00000000  00067b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001aba  00000000  00000000  00069d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011236  00000000  00000000  0006b7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036d18  00000000  00000000  0007ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001192ad  00000000  00000000  000b3728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009440  00000000  00000000  001cc9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001d5e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001bc 	.word	0x200001bc
 800021c:	00000000 	.word	0x00000000
 8000220:	08015fd8 	.word	0x08015fd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c0 	.word	0x200001c0
 800023c:	08015fd8 	.word	0x08015fd8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbd3 	bl	8000d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81a 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8e8 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f888 	bl	8000700 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f8b6 	bl	8000760 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f4:	f004 fb8c 	bl	8004d10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x34>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x38>)
 80005fe:	f004 fc19 	bl	8004e34 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <main+0x3c>)
 8000606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f004 fbb6 	bl	8004d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
 800060e:	bf00      	nop
 8000610:	08018ea0 	.word	0x08018ea0
 8000614:	08000901 	.word	0x08000901
 8000618:	20000768 	.word	0x20000768

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f014 fdd1 	bl	80151d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f001 ff50 	bl	80024e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <SystemClock_Config+0xdc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xdc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a25      	ldr	r2, [pc, #148]	; (80006fc <SystemClock_Config+0xe0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xe0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000690:	2360      	movs	r3, #96	; 0x60
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 ff7d 	bl	80025a4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f930 	bl	8000914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b4:	f001 ff26 	bl	8002504 <HAL_PWREx_EnableOverDrive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006be:	f000 f929 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2103      	movs	r1, #3
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa0e 	bl	8002b00 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ea:	f000 f913 	bl	8000914 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART3_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000744:	f003 f82a 	bl	800379c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8e1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001d8 	.word	0x200001d8
 800075c:	40004800 	.word	0x40004800

08000760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800076a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2206      	movs	r2, #6
 8000770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2201      	movs	r2, #1
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	f001 fd55 	bl	8002252 <HAL_PCD_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f8b1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000260 	.word	0x20000260

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a46      	ldr	r2, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a40      	ldr	r2, [pc, #256]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a3a      	ldr	r2, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a34      	ldr	r2, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x138>)
 800086a:	f001 fcd9 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_GPIO_Init+0x13c>)
 8000874:	f001 fcd4 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <MX_GPIO_Init+0x140>)
 8000890:	f001 fb1a 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0x138>)
 80008ae:	f001 fb0b 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0x13c>)
 80008ca:	f001 fafd 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 faf1 	bl	8001ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40020800 	.word	0x40020800

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 fea4 	bl	8004654 <MX_LWIP_Init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f004 fb37 	bl	8004f80 <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDefaultTask+0xc>

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fb52 	bl	8001006 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ae      	sub	sp, #184	; 0xb8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2290      	movs	r2, #144	; 0x90
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f014 fc1e 	bl	80151d2 <memset>
  if(huart->Instance==USART3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13c      	bne.n	8000a1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 facc 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ba:	f7ff ffab 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0xbc>)
 8000a16:	f001 fa57 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	37b8      	adds	r7, #184	; 0xb8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2290      	movs	r2, #144	; 0x90
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f014 fbbe 	bl	80151d2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5e:	d159      	bne.n	8000b14 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fa6b 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a7c:	f7ff ff4a 	bl	8000914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <HAL_PCD_MspInit+0xf0>)
 8000ac0:	f001 fa02 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4810      	ldr	r0, [pc, #64]	; (8000b20 <HAL_PCD_MspInit+0xf0>)
 8000ae0:	f001 f9f2 	bl	8001ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	6353      	str	r3, [r2, #52]	; 0x34
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	37b8      	adds	r7, #184	; 0xb8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f956 	bl	8000e04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b58:	f006 fed0 	bl	80078fc <xTaskGetSchedulerState>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d001      	beq.n	8000b66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b62:	f007 fdb1 	bl	80086c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <ETH_IRQHandler+0x10>)
 8000b72:	f000 fce7 	bl	8001544 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20005178 	.word	0x20005178

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_kill>:

int _kill(int pid, int sig)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <_kill+0x20>)
 8000b9c:	2216      	movs	r2, #22
 8000b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000d694 	.word	0x2000d694

08000bb4 <_exit>:

void _exit (int status)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffe5 	bl	8000b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc6:	e7fe      	b.n	8000bc6 <_exit+0x12>

08000bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d205      	bcs.n	8000ce0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <_sbrk+0x6c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20080000 	.word	0x20080000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	2000076c 	.word	0x2000076c
 8000d0c:	2000d6a8 	.word	0x2000d6a8
 8000d10:	2000d694 	.word	0x2000d694

08000d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f014 fad9 	bl	801531c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc37 	bl	80005dc <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d7c:	0801910c 	.word	0x0801910c
  ldr r2, =_sbss
 8000d80:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8000d84:	2000d6a4 	.word	0x2000d6a4

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>

08000d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f92e 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d94:	200f      	movs	r0, #15
 8000d96:	f000 f805 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fdc1 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f93b 	bl	800103e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f911 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000770 	.word	0x20000770

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000770 	.word	0x20000770

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	05fa0000 	.word	0x05fa0000

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff47 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff5c 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffb0 	bl	8000fac <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e06a      	b.n	8001140 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2223      	movs	r2, #35	; 0x23
 8001078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f867 	bl	8001150 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_ETH_Init+0xf0>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <HAL_ETH_Init+0xf0>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_ETH_Init+0xf0>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_ETH_Init+0xf4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a2b      	ldr	r2, [pc, #172]	; (800114c <HAL_ETH_Init+0xf4>)
 80010a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <HAL_ETH_Init+0xf4>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4927      	ldr	r1, [pc, #156]	; (800114c <HAL_ETH_Init+0xf4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_ETH_Init+0xf4>)
 80010b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d0:	f7ff feac 	bl	8000e2c <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010d6:	e011      	b.n	80010fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010d8:	f7ff fea8 	bl	8000e2c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e6:	d909      	bls.n	80010fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2204      	movs	r2, #4
 80010ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	22e0      	movs	r2, #224	; 0xe0
 80010f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e021      	b.n	8001140 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1e4      	bne.n	80010d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fc36 	bl	8001980 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fcdd 	bl	8001ad4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fd33 	bl	8001b86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fc9b 	bl	8001a64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2210      	movs	r2, #16
 800113a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800

08001150 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e045      	b.n	8001214 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800118e:	2b23      	cmp	r3, #35	; 0x23
 8001190:	d13f      	bne.n	8001212 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800119a:	2201      	movs	r2, #1
 800119c:	6839      	ldr	r1, [r7, #0]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fd5e 	bl	8001c60 <ETH_Prepare_Tx_Descriptors>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b0:	f043 0202 	orr.w	r2, r3, #2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e02a      	b.n	8001214 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d904      	bls.n	80011e0 <HAL_ETH_Transmit_IT+0x7c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	1f1a      	subs	r2, r3, #4
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00d      	beq.n	800120e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fa:	461a      	mov	r2, r3
 80011fc:	2304      	movs	r3, #4
 80011fe:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001208:	461a      	mov	r2, r3
 800120a:	2300      	movs	r3, #0
 800120c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
  }
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0a8      	b.n	800139a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800124e:	2b23      	cmp	r3, #35	; 0x23
 8001250:	d001      	beq.n	8001256 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0a1      	b.n	800139a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	3212      	adds	r2, #18
 8001262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800126c:	f1c3 0304 	rsb	r3, r3, #4
 8001270:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001272:	e06a      	b.n	800134a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	69da      	ldr	r2, [r3, #28]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <HAL_ETH_ReadData+0x88>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d040      	beq.n	8001326 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012d8:	3b04      	subs	r3, #4
 80012da:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001300:	461a      	mov	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	b29b      	uxth	r3, r3
 8001306:	f003 fcaf 	bl	8004c68 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	441a      	add	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d902      	bls.n	8001338 <HAL_ETH_ReadData+0x11c>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b04      	subs	r3, #4
 8001336:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	3212      	adds	r2, #18
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800134e:	2b00      	cmp	r3, #0
 8001350:	db06      	blt.n	8001360 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	429a      	cmp	r2, r3
 8001358:	d202      	bcs.n	8001360 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d089      	beq.n	8001274 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	441a      	add	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f815 	bl	80013a4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d108      	bne.n	8001398 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80013b0:	2301      	movs	r3, #1
 80013b2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	3212      	adds	r2, #18
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ca:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80013cc:	e040      	b.n	8001450 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d112      	bne.n	80013fc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fc14 	bl	8004c08 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	74fb      	strb	r3, [r7, #19]
 80013ea:	e007      	b.n	80013fc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	461a      	mov	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	461a      	mov	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d026      	beq.n	8001450 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <ETH_UpdateDescriptor+0xe4>)
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	e003      	b.n	800141a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001418:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800141a:	f3bf 8f5f 	dmb	sy
}
 800141e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d902      	bls.n	800143e <ETH_UpdateDescriptor+0x9a>
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3b04      	subs	r3, #4
 800143c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	3212      	adds	r2, #18
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	617b      	str	r3, [r7, #20]
      desccount--;
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3b01      	subs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <ETH_UpdateDescriptor+0xb8>
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1b8      	bne.n	80013ce <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	429a      	cmp	r2, r3
 8001464:	d00c      	beq.n	8001480 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146e:	461a      	mov	r2, r3
 8001470:	2300      	movs	r3, #0
 8001472:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	80004600 	.word	0x80004600

0800148c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3318      	adds	r3, #24
 8001498:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80014aa:	e03f      	b.n	800152c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	3304      	adds	r3, #4
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	3301      	adds	r3, #1
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d028      	beq.n	800152c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68d9      	ldr	r1, [r3, #12]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db1b      	blt.n	8001528 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	3304      	adds	r3, #4
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fbf5 	bl	8004cec <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3304      	adds	r3, #4
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	3301      	adds	r3, #1
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
 8001526:	e001      	b.n	800152c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_ETH_ReleaseTxPacket+0xac>
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1b9      	bne.n	80014ac <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	d112      	bne.n	8001584 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d109      	bne.n	8001584 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	461a      	mov	r2, r3
 800157a:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_ETH_IRQHandler+0x178>)
 800157c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f003 f91c 	bl	80047bc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d113      	bne.n	80015be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10a      	bne.n	80015be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	461a      	mov	r2, r3
 80015b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80015b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f003 f90f 	bl	80047dc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d0:	d14c      	bne.n	800166c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015e4:	d142      	bne.n	800166c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ec:	f043 0208 	orr.w	r2, r3, #8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001608:	d11a      	bne.n	8001640 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_ETH_IRQHandler+0x17c>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001634:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	22e0      	movs	r2, #224	; 0xe0
 800163a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800163e:	e012      	b.n	8001666 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	f248 6380 	movw	r3, #34432	; 0x8680
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165e:	461a      	mov	r2, r3
 8001660:	f248 6380 	movw	r3, #34432	; 0x8680
 8001664:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f003 f8c8 	bl	80047fc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b08      	cmp	r3, #8
 8001678:	d10e      	bne.n	8001698 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f81c 	bl	80016c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_ETH_IRQHandler+0x180>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_ETH_IRQHandler+0x180>)
 80016a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f815 	bl	80016dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	00010040 	.word	0x00010040
 80016c0:	007e2000 	.word	0x007e2000
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4b51      	ldr	r3, [pc, #324]	; (8001868 <ETH_SetMACConfig+0x15c>)
 8001722:	4013      	ands	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	7c1b      	ldrb	r3, [r3, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <ETH_SetMACConfig+0x28>
 800172e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001732:	e000      	b.n	8001736 <ETH_SetMACConfig+0x2a>
 8001734:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	7c5b      	ldrb	r3, [r3, #17]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <ETH_SetMACConfig+0x38>
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	e000      	b.n	8001746 <ETH_SetMACConfig+0x3a>
 8001744:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001746:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800174c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7fdb      	ldrb	r3, [r3, #31]
 8001752:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001754:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800175a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	7f92      	ldrb	r2, [r2, #30]
 8001760:	2a00      	cmp	r2, #0
 8001762:	d102      	bne.n	800176a <ETH_SetMACConfig+0x5e>
 8001764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001768:	e000      	b.n	800176c <ETH_SetMACConfig+0x60>
 800176a:	2200      	movs	r2, #0
                        macconf->Speed |
 800176c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	7f1b      	ldrb	r3, [r3, #28]
 8001772:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001774:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800177a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001782:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	f892 2020 	ldrb.w	r2, [r2, #32]
 800178a:	2a00      	cmp	r2, #0
 800178c:	d102      	bne.n	8001794 <ETH_SetMACConfig+0x88>
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	e000      	b.n	8001796 <ETH_SetMACConfig+0x8a>
 8001794:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001796:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	7bdb      	ldrb	r3, [r3, #15]
 800179c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800179e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017ae:	4313      	orrs	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff fb3c 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d101      	bne.n	80017fa <ETH_SetMACConfig+0xee>
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	e000      	b.n	80017fc <ETH_SetMACConfig+0xf0>
 80017fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800180a:	2a01      	cmp	r2, #1
 800180c:	d101      	bne.n	8001812 <ETH_SetMACConfig+0x106>
 800180e:	2208      	movs	r2, #8
 8001810:	e000      	b.n	8001814 <ETH_SetMACConfig+0x108>
 8001812:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001814:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800181c:	2a01      	cmp	r2, #1
 800181e:	d101      	bne.n	8001824 <ETH_SetMACConfig+0x118>
 8001820:	2204      	movs	r2, #4
 8001822:	e000      	b.n	8001826 <ETH_SetMACConfig+0x11a>
 8001824:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800182e:	2a01      	cmp	r2, #1
 8001830:	d101      	bne.n	8001836 <ETH_SetMACConfig+0x12a>
 8001832:	2202      	movs	r2, #2
 8001834:	e000      	b.n	8001838 <ETH_SetMACConfig+0x12c>
 8001836:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001838:	4313      	orrs	r3, r2
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff faf7 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	619a      	str	r2, [r3, #24]
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	ff20810f 	.word	0xff20810f

0800186c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <ETH_SetDMAConfig+0x110>)
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	7b1b      	ldrb	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <ETH_SetDMAConfig+0x2c>
 8001892:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001896:	e000      	b.n	800189a <ETH_SetDMAConfig+0x2e>
 8001898:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7b5b      	ldrb	r3, [r3, #13]
 800189e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	7f52      	ldrb	r2, [r2, #29]
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d102      	bne.n	80018b0 <ETH_SetDMAConfig+0x44>
 80018aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018ae:	e000      	b.n	80018b2 <ETH_SetDMAConfig+0x46>
 80018b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7b9b      	ldrb	r3, [r3, #14]
 80018b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	7f1b      	ldrb	r3, [r3, #28]
 80018c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7f9b      	ldrb	r3, [r3, #30]
 80018ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018e0:	4313      	orrs	r3, r2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff fa9e 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001910:	461a      	mov	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	791b      	ldrb	r3, [r3, #4]
 800191a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001920:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001926:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800192c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001934:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001936:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800193e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001944:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001952:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff fa6f 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	f8de3f23 	.word	0xf8de3f23

08001980 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a6      	sub	sp, #152	; 0x98
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019bc:	2300      	movs	r3, #0
 80019be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fe86 	bl	800170c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff08 	bl	800186c <ETH_SetDMAConfig>
}
 8001a5c:	bf00      	nop
 8001a5e:	3798      	adds	r7, #152	; 0x98
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3305      	adds	r3, #5
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	3204      	adds	r2, #4
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <ETH_MACAddressConfig+0x68>)
 8001a86:	4413      	add	r3, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3303      	adds	r3, #3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	061a      	lsls	r2, r3, #24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <ETH_MACAddressConfig+0x6c>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	6013      	str	r3, [r2, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40028040 	.word	0x40028040
 8001ad0:	40028044 	.word	0x40028044

08001ad4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e03e      	b.n	8001b60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	3206      	adds	r2, #6
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d80c      	bhi.n	8001b44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e004      	b.n	8001b4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d9bd      	bls.n	8001ae2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	611a      	str	r2, [r3, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e046      	b.n	8001c22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6919      	ldr	r1, [r3, #16]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001bd8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	3212      	adds	r2, #18
 8001bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d80c      	bhi.n	8001c12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6919      	ldr	r1, [r3, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	e004      	b.n	8001c1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d9b5      	bls.n	8001b94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	60da      	str	r2, [r3, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08d      	sub	sp, #52	; 0x34
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3318      	adds	r3, #24
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ca2:	d007      	beq.n	8001cb4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	3304      	adds	r3, #4
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0ff      	b.n	8001eb8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	3301      	adds	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	6852      	ldr	r2, [r2, #4]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001d3a:	f3bf 8f5f 	dmb	sy
}
 8001d3e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001d4c:	e082      	b.n	8001e54 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e005      	b.n	8001d7a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d902      	bls.n	8001d8c <ETH_Prepare_Tx_Descriptors+0x12c>
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	3b04      	subs	r3, #4
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dae:	d007      	beq.n	8001dc0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	3304      	adds	r3, #4
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d029      	beq.n	8001e14 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	e019      	b.n	8001e08 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8001dd4:	f3bf 8f5f 	dmb	sy
}
 8001dd8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	3301      	adds	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d902      	bls.n	8001df8 <ETH_Prepare_Tx_Descriptors+0x198>
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	3b04      	subs	r3, #4
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	3301      	adds	r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3e1      	bcc.n	8001dd4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	e051      	b.n	8001eb8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	3301      	adds	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	6852      	ldr	r2, [r2, #4]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e42:	f3bf 8f5f 	dmb	sy
}
 8001e46:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f af78 	bne.w	8001d4e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e005      	b.n	8001e7e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8e:	6979      	ldr	r1, [r7, #20]
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	3304      	adds	r3, #4
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e9e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	4413      	add	r3, r2
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001eb2:	b662      	cpsie	i
}
 8001eb4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3734      	adds	r7, #52	; 0x34
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	ffffe000 	.word	0xffffe000

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e175      	b.n	80021d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8164 	bne.w	80021ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x56>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80be 	beq.w	80021ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_GPIO_Init+0x324>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a65      	ldr	r2, [pc, #404]	; (80021ec <HAL_GPIO_Init+0x324>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_GPIO_Init+0x324>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800206a:	4a61      	ldr	r2, [pc, #388]	; (80021f0 <HAL_GPIO_Init+0x328>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d037      	beq.n	8002106 <HAL_GPIO_Init+0x23e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_GPIO_Init+0x330>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d031      	beq.n	8002102 <HAL_GPIO_Init+0x23a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_GPIO_Init+0x334>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x236>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a55      	ldr	r2, [pc, #340]	; (8002200 <HAL_GPIO_Init+0x338>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x232>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a54      	ldr	r2, [pc, #336]	; (8002204 <HAL_GPIO_Init+0x33c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a53      	ldr	r2, [pc, #332]	; (8002208 <HAL_GPIO_Init+0x340>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x22a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_GPIO_Init+0x344>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_GPIO_Init+0x348>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x34c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4f      	ldr	r2, [pc, #316]	; (8002218 <HAL_GPIO_Init+0x350>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020de:	2309      	movs	r3, #9
 80020e0:	e012      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020e2:	230a      	movs	r3, #10
 80020e4:	e010      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020e6:	2308      	movs	r3, #8
 80020e8:	e00e      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00c      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00a      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x240>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x240>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x240>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	; (80021f0 <HAL_GPIO_Init+0x328>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_GPIO_Init+0x354>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_GPIO_Init+0x354>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_GPIO_Init+0x354>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_GPIO_Init+0x354>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_GPIO_Init+0x354>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <HAL_GPIO_Init+0x354>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_GPIO_Init+0x354>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_GPIO_Init+0x354>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f ae86 	bls.w	8001ee8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40022000 	.word	0x40022000
 8002218:	40022400 	.word	0x40022400
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002254:	b08f      	sub	sp, #60	; 0x3c
 8002256:	af0a      	add	r7, sp, #40	; 0x28
 8002258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e116      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fbd6 	bl	8000a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 ff3a 	bl	800411c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	687e      	ldr	r6, [r7, #4]
 80022b0:	466d      	mov	r5, sp
 80022b2:	f106 0410 	add.w	r4, r6, #16
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c6:	1d33      	adds	r3, r6, #4
 80022c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f001 fece 	bl	800406c <USB_CoreInit>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0d7      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 ff28 	bl	800413e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e04a      	b.n	800238a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	333d      	adds	r3, #61	; 0x3d
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	333c      	adds	r3, #60	; 0x3c
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	b298      	uxth	r0, r3
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3344      	adds	r3, #68	; 0x44
 8002330:	4602      	mov	r2, r0
 8002332:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3340      	adds	r3, #64	; 0x40
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3348      	adds	r3, #72	; 0x48
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	334c      	adds	r3, #76	; 0x4c
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3354      	adds	r3, #84	; 0x54
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3af      	bcc.n	80022f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e044      	b.n	8002424 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d3b5      	bcc.n	800239a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	687e      	ldr	r6, [r7, #4]
 8002436:	466d      	mov	r5, sp
 8002438:	f106 0410 	add.w	r4, r6, #16
 800243c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002448:	e885 0003 	stmia.w	r5, {r0, r1}
 800244c:	1d33      	adds	r3, r6, #4
 800244e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f001 fec1 	bl	80041d8 <USB_DevInit>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e014      	b.n	8002492 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f80b 	bl	800249c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f87f 	bl	800458e <USB_DevDisconnect>

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800249c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	10000003 	.word	0x10000003

080024e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_PWREx_EnableOverDrive+0x98>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002532:	f7fe fc7b 	bl	8000e2c <HAL_GetTick>
 8002536:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002538:	e009      	b.n	800254e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800253a:	f7fe fc77 	bl	8000e2c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002548:	d901      	bls.n	800254e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e022      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d1ee      	bne.n	800253a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002566:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7fe fc60 	bl	8000e2c <HAL_GetTick>
 800256c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256e:	e009      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002570:	f7fe fc5c 	bl	8000e2c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257e:	d901      	bls.n	8002584 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e007      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002590:	d1ee      	bne.n	8002570 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e29b      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d4:	4b93      	ldr	r3, [pc, #588]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x130>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e275      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x7a>
 8002610:	4b84      	ldr	r3, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a83      	ldr	r2, [pc, #524]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x9c>
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b7c      	ldr	r3, [pc, #496]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xc0>
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fbd2 	bl	8000e2c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fbce 	bl	8000e2c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e229      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fbbe 	bl	8000e2c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fbba 	bl	8000e2c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e215      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b57      	ldr	r3, [pc, #348]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x110>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d069      	beq.n	80027b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1e9      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	493d      	ldr	r1, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e040      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b39      	ldr	r3, [pc, #228]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a38      	ldr	r2, [pc, #224]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fb70 	bl	8000e2c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fb6c 	bl	8000e2c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1c7      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4929      	ldr	r1, [pc, #164]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	e018      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fb4c 	bl	8000e2c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fb48 	bl	8000e2c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1a3      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d038      	beq.n	8002834 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fb29 	bl	8000e2c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7fe fb25 	bl	8000e2c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e180      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x23a>
 80027fc:	e01a      	b.n	8002834 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fb0f 	bl	8000e2c <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fb0b 	bl	8000e2c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d903      	bls.n	8002828 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e166      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
 8002824:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a4 	beq.w	800298a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a88      	ldr	r2, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286a:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002876:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7f      	ldr	r2, [pc, #508]	; (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe fad3 	bl	8000e2c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe facf 	bl	8000e2c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e12a      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289c:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCC_OscConfig+0x4d4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x31a>
 80028b0:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x33c>
 80028c6:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x35e>
 80028e8:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a5e      	ldr	r2, [pc, #376]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fa83 	bl	8000e2c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fa7f 	bl	8000e2c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x386>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fa6d 	bl	8000e2c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fa69 	bl	8000e2c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0c2      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a3c      	ldr	r2, [pc, #240]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ae 	beq.w	8002af0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d06d      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d14b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa3a 	bl	8000e2c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fa36 	bl	8000e2c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e091      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	071b      	lsls	r3, r3, #28
 8002a06:	491b      	ldr	r1, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fa08 	bl	8000e2c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fa04 	bl	8000e2c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e05f      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x47c>
 8002a3e:	e057      	b.n	8002af0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f9ee 	bl	8000e2c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe f9ea 	bl	8000e2c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e045      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4b0>
 8002a72:	e03d      	b.n	8002af0 <HAL_RCC_OscConfig+0x54c>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_RCC_OscConfig+0x558>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d030      	beq.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d129      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d122      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d119      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10f      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d0      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	4965      	ldr	r1, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d040      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d115      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e073      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4936      	ldr	r1, [pc, #216]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf4:	f7fe f91a 	bl	8000e2c <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7fe f916 	bl	8000e2c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e053      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d210      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	4922      	ldr	r1, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1cc>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe f876 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08018ec4 	.word	0x08018ec4
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	; 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de8:	f7fd fa7a 	bl	80002e0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd fa20 	bl	80002e0 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08018ed4 	.word	0x08018ed4

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffdc 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08018ed4 	.word	0x08018ed4

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f74:	4b69      	ldr	r3, [pc, #420]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a68      	ldr	r2, [pc, #416]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f7e:	6093      	str	r3, [r2, #8]
 8002f80:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	4964      	ldr	r1, [pc, #400]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d017      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	4959      	ldr	r1, [pc, #356]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc4:	d101      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fe2:	4b4e      	ldr	r3, [pc, #312]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	494a      	ldr	r1, [pc, #296]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 808b 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b3a      	ldr	r3, [pc, #232]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a39      	ldr	r2, [pc, #228]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
 800303c:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a34      	ldr	r2, [pc, #208]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd feea 	bl	8000e2c <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305c:	f7fd fee6 	bl	8000e2c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e38f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d035      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	429a      	cmp	r2, r3
 8003096:	d02e      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a1a      	ldr	r2, [pc, #104]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d114      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd feae 	bl	8000e2c <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fd feaa 	bl	8000e2c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e351      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003102:	d111      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003112:	400b      	ands	r3, r1
 8003114:	4901      	ldr	r1, [pc, #4]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
 800311a:	e00b      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	0ffffcff 	.word	0x0ffffcff
 8003128:	4bac      	ldr	r3, [pc, #688]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4aab      	ldr	r2, [pc, #684]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	4ba9      	ldr	r3, [pc, #676]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	49a6      	ldr	r1, [pc, #664]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	4313      	orrs	r3, r2
 8003144:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003152:	4ba2      	ldr	r3, [pc, #648]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	4aa0      	ldr	r2, [pc, #640]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003162:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	499b      	ldr	r1, [pc, #620]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003180:	4b96      	ldr	r3, [pc, #600]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318e:	4993      	ldr	r1, [pc, #588]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	498a      	ldr	r1, [pc, #552]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c4:	4b85      	ldr	r3, [pc, #532]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	4982      	ldr	r1, [pc, #520]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031e6:	4b7d      	ldr	r3, [pc, #500]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4979      	ldr	r1, [pc, #484]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003208:	4b74      	ldr	r3, [pc, #464]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4971      	ldr	r1, [pc, #452]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f023 020c 	bic.w	r2, r3, #12
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003238:	4968      	ldr	r1, [pc, #416]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324c:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	4960      	ldr	r1, [pc, #384]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	4957      	ldr	r1, [pc, #348]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003290:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	494f      	ldr	r1, [pc, #316]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	4946      	ldr	r1, [pc, #280]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	493e      	ldr	r1, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003318:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003348:	4924      	ldr	r1, [pc, #144]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	4914      	ldr	r1, [pc, #80]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ac:	490b      	ldr	r1, [pc, #44]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d0:	4902      	ldr	r1, [pc, #8]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d8:	e002      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ec:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	4986      	ldr	r1, [pc, #536]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003410:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003416:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003420:	497d      	ldr	r1, [pc, #500]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d006      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80d6 	beq.w	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800343c:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd fcf0 	bl	8000e2c <HAL_GetTick>
 800344c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003450:	f7fd fcec 	bl	8000e2c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e195      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d021      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003496:	0e1b      	lsrs	r3, r3, #24
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	019a      	lsls	r2, r3, #6
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	4958      	ldr	r1, [pc, #352]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e8:	d129      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fe:	0f1b      	lsrs	r3, r3, #28
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	493e      	ldr	r1, [pc, #248]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003526:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352c:	f023 021f 	bic.w	r2, r3, #31
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	3b01      	subs	r3, #1
 8003536:	4938      	ldr	r1, [pc, #224]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01d      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003550:	0e1b      	lsrs	r3, r3, #24
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003558:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355e:	0f1b      	lsrs	r3, r3, #28
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	019a      	lsls	r2, r3, #6
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	4926      	ldr	r1, [pc, #152]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d011      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	019a      	lsls	r2, r3, #6
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c2:	f7fd fc33 	bl	8000e2c <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ca:	f7fd fc2f 	bl	8000e2c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b64      	cmp	r3, #100	; 0x64
 80035d6:	d901      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0d8      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	f040 80ce 	bne.w	800378c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fc:	f7fd fc16 	bl	8000e2c <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003602:	e00b      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003604:	f7fd fc12 	bl	8000e2c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d904      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0bb      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800361c:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003628:	d0ec      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02e      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	0f1b      	lsrs	r3, r3, #28
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	019a      	lsls	r2, r3, #6
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	071b      	lsls	r3, r3, #28
 8003686:	4944      	ldr	r1, [pc, #272]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	493d      	ldr	r1, [pc, #244]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d022      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036bc:	d11d      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	0e1b      	lsrs	r3, r3, #24
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	431a      	orrs	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	4929      	ldr	r1, [pc, #164]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	0e1b      	lsrs	r3, r3, #24
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	019a      	lsls	r2, r3, #6
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	4917      	ldr	r1, [pc, #92]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	4911      	ldr	r1, [pc, #68]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fb62 	bl	8000e2c <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800376c:	f7fd fb5e 	bl	8000e2c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e007      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378a:	d1ef      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e040      	b.n	8003830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd f8d6 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f82c 	bl	8003838 <UART_SetConfig>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa84 	bl	8003d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb0b 	bl	8003e44 <UART_CheckIdleState>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4ba6      	ldr	r3, [pc, #664]	; (8003afc <UART_SetConfig+0x2c4>)
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	430b      	orrs	r3, r1
 800386e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a94      	ldr	r2, [pc, #592]	; (8003b00 <UART_SetConfig+0x2c8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d120      	bne.n	80038f6 <UART_SetConfig+0xbe>
 80038b4:	4b93      	ldr	r3, [pc, #588]	; (8003b04 <UART_SetConfig+0x2cc>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d816      	bhi.n	80038f0 <UART_SetConfig+0xb8>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x90>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e5 	.word	0x080038e5
 80038d0:	080038df 	.word	0x080038df
 80038d4:	080038eb 	.word	0x080038eb
 80038d8:	2301      	movs	r3, #1
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e150      	b.n	8003b80 <UART_SetConfig+0x348>
 80038de:	2302      	movs	r3, #2
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e14d      	b.n	8003b80 <UART_SetConfig+0x348>
 80038e4:	2304      	movs	r3, #4
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e14a      	b.n	8003b80 <UART_SetConfig+0x348>
 80038ea:	2308      	movs	r3, #8
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e147      	b.n	8003b80 <UART_SetConfig+0x348>
 80038f0:	2310      	movs	r3, #16
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e144      	b.n	8003b80 <UART_SetConfig+0x348>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a83      	ldr	r2, [pc, #524]	; (8003b08 <UART_SetConfig+0x2d0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d132      	bne.n	8003966 <UART_SetConfig+0x12e>
 8003900:	4b80      	ldr	r3, [pc, #512]	; (8003b04 <UART_SetConfig+0x2cc>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d828      	bhi.n	8003960 <UART_SetConfig+0x128>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0xdc>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003949 	.word	0x08003949
 8003918:	08003961 	.word	0x08003961
 800391c:	08003961 	.word	0x08003961
 8003920:	08003961 	.word	0x08003961
 8003924:	08003955 	.word	0x08003955
 8003928:	08003961 	.word	0x08003961
 800392c:	08003961 	.word	0x08003961
 8003930:	08003961 	.word	0x08003961
 8003934:	0800394f 	.word	0x0800394f
 8003938:	08003961 	.word	0x08003961
 800393c:	08003961 	.word	0x08003961
 8003940:	08003961 	.word	0x08003961
 8003944:	0800395b 	.word	0x0800395b
 8003948:	2300      	movs	r3, #0
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e118      	b.n	8003b80 <UART_SetConfig+0x348>
 800394e:	2302      	movs	r3, #2
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e115      	b.n	8003b80 <UART_SetConfig+0x348>
 8003954:	2304      	movs	r3, #4
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e112      	b.n	8003b80 <UART_SetConfig+0x348>
 800395a:	2308      	movs	r3, #8
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e10f      	b.n	8003b80 <UART_SetConfig+0x348>
 8003960:	2310      	movs	r3, #16
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e10c      	b.n	8003b80 <UART_SetConfig+0x348>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a68      	ldr	r2, [pc, #416]	; (8003b0c <UART_SetConfig+0x2d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d120      	bne.n	80039b2 <UART_SetConfig+0x17a>
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <UART_SetConfig+0x2cc>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800397a:	2b30      	cmp	r3, #48	; 0x30
 800397c:	d013      	beq.n	80039a6 <UART_SetConfig+0x16e>
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d814      	bhi.n	80039ac <UART_SetConfig+0x174>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d009      	beq.n	800399a <UART_SetConfig+0x162>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d810      	bhi.n	80039ac <UART_SetConfig+0x174>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <UART_SetConfig+0x15c>
 800398e:	2b10      	cmp	r3, #16
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x168>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x174>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e0f2      	b.n	8003b80 <UART_SetConfig+0x348>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e0ef      	b.n	8003b80 <UART_SetConfig+0x348>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e0ec      	b.n	8003b80 <UART_SetConfig+0x348>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e0e9      	b.n	8003b80 <UART_SetConfig+0x348>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e0e6      	b.n	8003b80 <UART_SetConfig+0x348>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a56      	ldr	r2, [pc, #344]	; (8003b10 <UART_SetConfig+0x2d8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d120      	bne.n	80039fe <UART_SetConfig+0x1c6>
 80039bc:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <UART_SetConfig+0x2cc>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039c6:	2bc0      	cmp	r3, #192	; 0xc0
 80039c8:	d013      	beq.n	80039f2 <UART_SetConfig+0x1ba>
 80039ca:	2bc0      	cmp	r3, #192	; 0xc0
 80039cc:	d814      	bhi.n	80039f8 <UART_SetConfig+0x1c0>
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d009      	beq.n	80039e6 <UART_SetConfig+0x1ae>
 80039d2:	2b80      	cmp	r3, #128	; 0x80
 80039d4:	d810      	bhi.n	80039f8 <UART_SetConfig+0x1c0>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <UART_SetConfig+0x1a8>
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d006      	beq.n	80039ec <UART_SetConfig+0x1b4>
 80039de:	e00b      	b.n	80039f8 <UART_SetConfig+0x1c0>
 80039e0:	2300      	movs	r3, #0
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e0cc      	b.n	8003b80 <UART_SetConfig+0x348>
 80039e6:	2302      	movs	r3, #2
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e0c9      	b.n	8003b80 <UART_SetConfig+0x348>
 80039ec:	2304      	movs	r3, #4
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e0c6      	b.n	8003b80 <UART_SetConfig+0x348>
 80039f2:	2308      	movs	r3, #8
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e0c3      	b.n	8003b80 <UART_SetConfig+0x348>
 80039f8:	2310      	movs	r3, #16
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e0c0      	b.n	8003b80 <UART_SetConfig+0x348>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a44      	ldr	r2, [pc, #272]	; (8003b14 <UART_SetConfig+0x2dc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d125      	bne.n	8003a54 <UART_SetConfig+0x21c>
 8003a08:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <UART_SetConfig+0x2cc>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a16:	d017      	beq.n	8003a48 <UART_SetConfig+0x210>
 8003a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1c:	d817      	bhi.n	8003a4e <UART_SetConfig+0x216>
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a22:	d00b      	beq.n	8003a3c <UART_SetConfig+0x204>
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d811      	bhi.n	8003a4e <UART_SetConfig+0x216>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <UART_SetConfig+0x1fe>
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d006      	beq.n	8003a42 <UART_SetConfig+0x20a>
 8003a34:	e00b      	b.n	8003a4e <UART_SetConfig+0x216>
 8003a36:	2300      	movs	r3, #0
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e0a1      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e09e      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a42:	2304      	movs	r3, #4
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e09b      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a48:	2308      	movs	r3, #8
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e098      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a4e:	2310      	movs	r3, #16
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e095      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <UART_SetConfig+0x2e0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d125      	bne.n	8003aaa <UART_SetConfig+0x272>
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <UART_SetConfig+0x2cc>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6c:	d017      	beq.n	8003a9e <UART_SetConfig+0x266>
 8003a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a72:	d817      	bhi.n	8003aa4 <UART_SetConfig+0x26c>
 8003a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a78:	d00b      	beq.n	8003a92 <UART_SetConfig+0x25a>
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d811      	bhi.n	8003aa4 <UART_SetConfig+0x26c>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0x254>
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d006      	beq.n	8003a98 <UART_SetConfig+0x260>
 8003a8a:	e00b      	b.n	8003aa4 <UART_SetConfig+0x26c>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e076      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e073      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e070      	b.n	8003b80 <UART_SetConfig+0x348>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e06d      	b.n	8003b80 <UART_SetConfig+0x348>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e06a      	b.n	8003b80 <UART_SetConfig+0x348>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <UART_SetConfig+0x2e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d138      	bne.n	8003b26 <UART_SetConfig+0x2ee>
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <UART_SetConfig+0x2cc>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac2:	d017      	beq.n	8003af4 <UART_SetConfig+0x2bc>
 8003ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac8:	d82a      	bhi.n	8003b20 <UART_SetConfig+0x2e8>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d00b      	beq.n	8003ae8 <UART_SetConfig+0x2b0>
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad4:	d824      	bhi.n	8003b20 <UART_SetConfig+0x2e8>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <UART_SetConfig+0x2aa>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ade:	d006      	beq.n	8003aee <UART_SetConfig+0x2b6>
 8003ae0:	e01e      	b.n	8003b20 <UART_SetConfig+0x2e8>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e04b      	b.n	8003b80 <UART_SetConfig+0x348>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e048      	b.n	8003b80 <UART_SetConfig+0x348>
 8003aee:	2304      	movs	r3, #4
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e045      	b.n	8003b80 <UART_SetConfig+0x348>
 8003af4:	2308      	movs	r3, #8
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e042      	b.n	8003b80 <UART_SetConfig+0x348>
 8003afa:	bf00      	nop
 8003afc:	efff69f3 	.word	0xefff69f3
 8003b00:	40011000 	.word	0x40011000
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40004400 	.word	0x40004400
 8003b0c:	40004800 	.word	0x40004800
 8003b10:	40004c00 	.word	0x40004c00
 8003b14:	40005000 	.word	0x40005000
 8003b18:	40011400 	.word	0x40011400
 8003b1c:	40007800 	.word	0x40007800
 8003b20:	2310      	movs	r3, #16
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e02c      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a72      	ldr	r2, [pc, #456]	; (8003cf4 <UART_SetConfig+0x4bc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d125      	bne.n	8003b7c <UART_SetConfig+0x344>
 8003b30:	4b71      	ldr	r3, [pc, #452]	; (8003cf8 <UART_SetConfig+0x4c0>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b3e:	d017      	beq.n	8003b70 <UART_SetConfig+0x338>
 8003b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b44:	d817      	bhi.n	8003b76 <UART_SetConfig+0x33e>
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d00b      	beq.n	8003b64 <UART_SetConfig+0x32c>
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d811      	bhi.n	8003b76 <UART_SetConfig+0x33e>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <UART_SetConfig+0x326>
 8003b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5a:	d006      	beq.n	8003b6a <UART_SetConfig+0x332>
 8003b5c:	e00b      	b.n	8003b76 <UART_SetConfig+0x33e>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e00d      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b64:	2302      	movs	r3, #2
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e00a      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e007      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b70:	2308      	movs	r3, #8
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e004      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b76:	2310      	movs	r3, #16
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e001      	b.n	8003b80 <UART_SetConfig+0x348>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	d15b      	bne.n	8003c42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d828      	bhi.n	8003be2 <UART_SetConfig+0x3aa>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0x360>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bc5 	.word	0x08003bc5
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003be3 	.word	0x08003be3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003be3 	.word	0x08003be3
 8003bb4:	08003be3 	.word	0x08003be3
 8003bb8:	08003bdb 	.word	0x08003bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7ff f99e 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8003bc0:	61b8      	str	r0, [r7, #24]
        break;
 8003bc2:	e013      	b.n	8003bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7ff f9ae 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	61b8      	str	r0, [r7, #24]
        break;
 8003bca:	e00f      	b.n	8003bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <UART_SetConfig+0x4c4>)
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e00c      	b.n	8003bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7ff f881 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8003bd6:	61b8      	str	r0, [r7, #24]
        break;
 8003bd8:	e008      	b.n	8003bec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bde:	61bb      	str	r3, [r7, #24]
        break;
 8003be0:	e004      	b.n	8003bec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d074      	beq.n	8003cdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	005a      	lsls	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b0f      	cmp	r3, #15
 8003c0c:	d916      	bls.n	8003c3c <UART_SetConfig+0x404>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d212      	bcs.n	8003c3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f023 030f 	bic.w	r3, r3, #15
 8003c1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	e04f      	b.n	8003cdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	77bb      	strb	r3, [r7, #30]
 8003c40:	e04c      	b.n	8003cdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d828      	bhi.n	8003c9a <UART_SetConfig+0x462>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x418>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c9b 	.word	0x08003c9b
 8003c60:	08003c8b 	.word	0x08003c8b
 8003c64:	08003c9b 	.word	0x08003c9b
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	08003c93 	.word	0x08003c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff f942 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8003c78:	61b8      	str	r0, [r7, #24]
        break;
 8003c7a:	e013      	b.n	8003ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c7c:	f7ff f952 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003c80:	61b8      	str	r0, [r7, #24]
        break;
 8003c82:	e00f      	b.n	8003ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <UART_SetConfig+0x4c4>)
 8003c86:	61bb      	str	r3, [r7, #24]
        break;
 8003c88:	e00c      	b.n	8003ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7ff f825 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8003c8e:	61b8      	str	r0, [r7, #24]
        break;
 8003c90:	e008      	b.n	8003ca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	61bb      	str	r3, [r7, #24]
        break;
 8003c98:	e004      	b.n	8003ca4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	085a      	lsrs	r2, r3, #1
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d909      	bls.n	8003cd8 <UART_SetConfig+0x4a0>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cca:	d205      	bcs.n	8003cd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	e001      	b.n	8003cdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ce8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40007c00 	.word	0x40007c00
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	00f42400 	.word	0x00f42400

08003d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01a      	beq.n	8003e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfe:	d10a      	bne.n	8003e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  }
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e54:	f7fc ffea 	bl	8000e2c <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10e      	bne.n	8003e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f831 	bl	8003ede <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e027      	b.n	8003ed6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d10e      	bne.n	8003eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f81b 	bl	8003ede <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e011      	b.n	8003ed6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b09c      	sub	sp, #112	; 0x70
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eee:	e0a7      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	f000 80a3 	beq.w	8004040 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fc ff97 	bl	8000e2c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d13f      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f24:	667b      	str	r3, [r7, #100]	; 0x64
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e6      	bne.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e5      	bne.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e068      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d050      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d148      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	66bb      	str	r3, [r7, #104]	; 0x68
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800400a:	623a      	str	r2, [r7, #32]
 800400c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	61bb      	str	r3, [r7, #24]
   return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e010      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69da      	ldr	r2, [r3, #28]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	429a      	cmp	r2, r3
 800405c:	f43f af48 	beq.w	8003ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3770      	adds	r7, #112	; 0x70
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800406c:	b084      	sub	sp, #16
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	f107 001c 	add.w	r0, r7, #28
 800407a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	d120      	bne.n	80040c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4b20      	ldr	r3, [pc, #128]	; (8004118 <USB_CoreInit+0xac>)
 8004096:	4013      	ands	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa96 	bl	80045ec <USB_CoreReset>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e010      	b.n	80040e8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa8a 	bl	80045ec <USB_CoreReset>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d10b      	bne.n	8004106 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f043 0206 	orr.w	r2, r3, #6
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004112:	b004      	add	sp, #16
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	ffbdffbf 	.word	0xffbdffbf

0800411c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 0201 	bic.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d115      	bne.n	800418c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800416c:	2001      	movs	r0, #1
 800416e:	f7fc fe69 	bl	8000e44 <HAL_Delay>
      ms++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fa29 	bl	80045d0 <USB_GetMode>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d01e      	beq.n	80041c2 <USB_SetCurrentMode+0x84>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b31      	cmp	r3, #49	; 0x31
 8004188:	d9f0      	bls.n	800416c <USB_SetCurrentMode+0x2e>
 800418a:	e01a      	b.n	80041c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d115      	bne.n	80041be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800419e:	2001      	movs	r0, #1
 80041a0:	f7fc fe50 	bl	8000e44 <HAL_Delay>
      ms++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa10 	bl	80045d0 <USB_GetMode>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <USB_SetCurrentMode+0x84>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b31      	cmp	r3, #49	; 0x31
 80041ba:	d9f0      	bls.n	800419e <USB_SetCurrentMode+0x60>
 80041bc:	e001      	b.n	80041c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e005      	b.n	80041ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b32      	cmp	r3, #50	; 0x32
 80041c6:	d101      	bne.n	80041cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d8:	b084      	sub	sp, #16
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e009      	b.n	800420c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3340      	adds	r3, #64	; 0x40
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3301      	adds	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b0e      	cmp	r3, #14
 8004210:	d9f2      	bls.n	80041f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11c      	bne.n	8004252 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e005      	b.n	800425e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004264:	461a      	mov	r2, r3
 8004266:	2300      	movs	r3, #0
 8004268:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	4619      	mov	r1, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	461a      	mov	r2, r3
 800427a:	680b      	ldr	r3, [r1, #0]
 800427c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10c      	bne.n	800429e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800428a:	2100      	movs	r1, #0
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f965 	bl	800455c <USB_SetDevSpeed>
 8004292:	e008      	b.n	80042a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004294:	2101      	movs	r1, #1
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f960 	bl	800455c <USB_SetDevSpeed>
 800429c:	e003      	b.n	80042a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800429e:	2103      	movs	r1, #3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f95b 	bl	800455c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042a6:	2110      	movs	r1, #16
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8f3 	bl	8004494 <USB_FlushTxFifo>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f91f 	bl	80044fc <USB_FlushRxFifo>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	461a      	mov	r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e043      	b.n	800437a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004308:	d118      	bne.n	800433c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e013      	b.n	800434e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e008      	b.n	800434e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	461a      	mov	r2, r3
 800435c:	2300      	movs	r3, #0
 800435e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	461a      	mov	r2, r3
 800436e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004372:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3301      	adds	r3, #1
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3b7      	bcc.n	80042f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e043      	b.n	8004410 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439e:	d118      	bne.n	80043d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e013      	b.n	80043e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	e008      	b.n	80043e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f0:	461a      	mov	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004408:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3301      	adds	r3, #1
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d3b7      	bcc.n	8004388 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <USB_DevInit+0x2b4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f043 0208 	orr.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <USB_DevInit+0x2b8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800447c:	7dfb      	ldrb	r3, [r7, #23]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004488:	b004      	add	sp, #16
 800448a:	4770      	bx	lr
 800448c:	803c3800 	.word	0x803c3800
 8004490:	40000004 	.word	0x40000004

08004494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <USB_FlushTxFifo+0x64>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e01b      	b.n	80044ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	daf2      	bge.n	80044a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <USB_FlushTxFifo+0x64>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e006      	b.n	80044ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d0f0      	beq.n	80044cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	00030d40 	.word	0x00030d40

080044fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a11      	ldr	r2, [pc, #68]	; (8004558 <USB_FlushRxFifo+0x5c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e018      	b.n	800454c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	daf2      	bge.n	8004508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2210      	movs	r2, #16
 800452a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <USB_FlushRxFifo+0x5c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e006      	b.n	800454c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d0f0      	beq.n	800452c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	00030d40 	.word	0x00030d40

0800455c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0301 	and.w	r3, r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <USB_CoreReset+0x64>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e01b      	b.n	8004642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	daf2      	bge.n	80045f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <USB_CoreReset+0x64>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e006      	b.n	8004642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d0f0      	beq.n	8004622 <USB_CoreReset+0x36>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	00030d40 	.word	0x00030d40

08004654 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af04      	add	r7, sp, #16
  GATEWAY_ADDRESS[0] = 192;
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <MX_LWIP_Init+0xcc>)
 800465c:	22c0      	movs	r2, #192	; 0xc0
 800465e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004660:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <MX_LWIP_Init+0xcc>)
 8004662:	22a8      	movs	r2, #168	; 0xa8
 8004664:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <MX_LWIP_Init+0xcc>)
 8004668:	2201      	movs	r2, #1
 800466a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800466c:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <MX_LWIP_Init+0xcc>)
 800466e:	2201      	movs	r2, #1
 8004670:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <MX_LWIP_Init+0xd0>)
 8004674:	22ff      	movs	r2, #255	; 0xff
 8004676:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <MX_LWIP_Init+0xd0>)
 800467a:	22ff      	movs	r2, #255	; 0xff
 800467c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <MX_LWIP_Init+0xd0>)
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <MX_LWIP_Init+0xd0>)
 8004686:	2200      	movs	r2, #0
 8004688:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800468a:	2100      	movs	r1, #0
 800468c:	2000      	movs	r0, #0
 800468e:	f004 fbed 	bl	8008e6c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <MX_LWIP_Init+0xd4>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004698:	4b24      	ldr	r3, [pc, #144]	; (800472c <MX_LWIP_Init+0xd8>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <MX_LWIP_Init+0xdc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  //netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
  netif_add(&gnetif, &ipaddr, &NETMASK_ADDRESS, &GATEWAY_ADDRESS, NULL, &ethernetif_init, &tcpip_input);
 80046a4:	4b23      	ldr	r3, [pc, #140]	; (8004734 <MX_LWIP_Init+0xe0>)
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <MX_LWIP_Init+0xe4>)
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <MX_LWIP_Init+0xcc>)
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <MX_LWIP_Init+0xd0>)
 80046b4:	491c      	ldr	r1, [pc, #112]	; (8004728 <MX_LWIP_Init+0xd4>)
 80046b6:	4821      	ldr	r0, [pc, #132]	; (800473c <MX_LWIP_Init+0xe8>)
 80046b8:	f005 f9a2 	bl	8009a00 <netif_add>
  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80046bc:	481f      	ldr	r0, [pc, #124]	; (800473c <MX_LWIP_Init+0xe8>)
 80046be:	f005 fb59 	bl	8009d74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <MX_LWIP_Init+0xe8>)
 80046c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <MX_LWIP_Init+0x88>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80046d4:	4819      	ldr	r0, [pc, #100]	; (800473c <MX_LWIP_Init+0xe8>)
 80046d6:	f005 fb5d 	bl	8009d94 <netif_set_up>
 80046da:	e002      	b.n	80046e2 <MX_LWIP_Init+0x8e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80046dc:	4817      	ldr	r0, [pc, #92]	; (800473c <MX_LWIP_Init+0xe8>)
 80046de:	f005 fbc5 	bl	8009e6c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80046e2:	4917      	ldr	r1, [pc, #92]	; (8004740 <MX_LWIP_Init+0xec>)
 80046e4:	4815      	ldr	r0, [pc, #84]	; (800473c <MX_LWIP_Init+0xe8>)
 80046e6:	f005 fbf3 	bl	8009ed0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80046ea:	2224      	movs	r2, #36	; 0x24
 80046ec:	2100      	movs	r1, #0
 80046ee:	4815      	ldr	r0, [pc, #84]	; (8004744 <MX_LWIP_Init+0xf0>)
 80046f0:	f010 fd6f 	bl	80151d2 <memset>
  attributes.name = "EthLink";
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <MX_LWIP_Init+0xf0>)
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <MX_LWIP_Init+0xf4>)
 80046f8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <MX_LWIP_Init+0xf0>)
 80046fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004700:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <MX_LWIP_Init+0xf0>)
 8004704:	2210      	movs	r2, #16
 8004706:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <MX_LWIP_Init+0xf0>)
 800470a:	490c      	ldr	r1, [pc, #48]	; (800473c <MX_LWIP_Init+0xe8>)
 800470c:	480f      	ldr	r0, [pc, #60]	; (800474c <MX_LWIP_Init+0xf8>)
 800470e:	f000 fb91 	bl	8004e34 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004712:	480a      	ldr	r0, [pc, #40]	; (800473c <MX_LWIP_Init+0xe8>)
 8004714:	f00c fd44 	bl	80111a0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200007e0 	.word	0x200007e0
 8004724:	200007dc 	.word	0x200007dc
 8004728:	200007ac 	.word	0x200007ac
 800472c:	200007b0 	.word	0x200007b0
 8004730:	200007b4 	.word	0x200007b4
 8004734:	08008da9 	.word	0x08008da9
 8004738:	08004b4d 	.word	0x08004b4d
 800473c:	20000774 	.word	0x20000774
 8004740:	08004751 	.word	0x08004751
 8004744:	200007b8 	.word	0x200007b8
 8004748:	08015ffc 	.word	0x08015ffc
 800474c:	08004bf7 	.word	0x08004bf7

08004750 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <SCB_InvalidateDCache_by_Addr>:
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004776:	2320      	movs	r3, #32
 8004778:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800477a:	f3bf 8f4f 	dsb	sy
}
 800477e:	bf00      	nop
    while (op_size > 0) {
 8004780:	e00b      	b.n	800479a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004782:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	dcf0      	bgt.n	8004782 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80047a0:	f3bf 8f4f 	dsb	sy
}
 80047a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047a6:	f3bf 8f6f 	isb	sy
}
 80047aa:	bf00      	nop
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <HAL_ETH_RxCpltCallback+0x1c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fe51 	bl	8005470 <osSemaphoreRelease>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20005170 	.word	0x20005170

080047dc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_ETH_TxCpltCallback+0x1c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fe41 	bl	8005470 <osSemaphoreRelease>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20005174 	.word	0x20005174

080047fc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fc ff73 	bl	80016f0 <HAL_ETH_GetDMAError>
 800480a:	4603      	mov	r3, r0
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d104      	bne.n	800481e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_ETH_ErrorCallback+0x2c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe29 	bl	8005470 <osSemaphoreRelease>
  }
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20005170 	.word	0x20005170

0800482c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800483a:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <low_level_init+0x148>)
 800483c:	4a4e      	ldr	r2, [pc, #312]	; (8004978 <low_level_init+0x14c>)
 800483e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004840:	2300      	movs	r3, #0
 8004842:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004848:	23e1      	movs	r3, #225	; 0xe1
 800484a:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800484c:	2300      	movs	r3, #0
 800484e:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004850:	2300      	movs	r3, #0
 8004852:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004854:	2300      	movs	r3, #0
 8004856:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004858:	4a46      	ldr	r2, [pc, #280]	; (8004974 <low_level_init+0x148>)
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004860:	4b44      	ldr	r3, [pc, #272]	; (8004974 <low_level_init+0x148>)
 8004862:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004866:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004868:	4b42      	ldr	r3, [pc, #264]	; (8004974 <low_level_init+0x148>)
 800486a:	4a44      	ldr	r2, [pc, #272]	; (800497c <low_level_init+0x150>)
 800486c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <low_level_init+0x148>)
 8004870:	4a43      	ldr	r2, [pc, #268]	; (8004980 <low_level_init+0x154>)
 8004872:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004874:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <low_level_init+0x148>)
 8004876:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800487a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800487c:	483d      	ldr	r0, [pc, #244]	; (8004974 <low_level_init+0x148>)
 800487e:	f7fc fbeb 	bl	8001058 <HAL_ETH_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004888:	2238      	movs	r2, #56	; 0x38
 800488a:	2100      	movs	r1, #0
 800488c:	483d      	ldr	r0, [pc, #244]	; (8004984 <low_level_init+0x158>)
 800488e:	f010 fca0 	bl	80151d2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <low_level_init+0x158>)
 8004894:	2221      	movs	r2, #33	; 0x21
 8004896:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004898:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <low_level_init+0x158>)
 800489a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800489e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <low_level_init+0x158>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80048a6:	4838      	ldr	r0, [pc, #224]	; (8004988 <low_level_init+0x15c>)
 80048a8:	f004 ff64 	bl	8009774 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2206      	movs	r2, #6
 80048b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048b4:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <low_level_init+0x148>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <low_level_init+0x148>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	785a      	ldrb	r2, [r3, #1]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <low_level_init+0x148>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	789a      	ldrb	r2, [r3, #2]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <low_level_init+0x148>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	78da      	ldrb	r2, [r3, #3]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <low_level_init+0x148>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	791a      	ldrb	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80048f0:	4b20      	ldr	r3, [pc, #128]	; (8004974 <low_level_init+0x148>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	795a      	ldrb	r2, [r3, #5]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800490a:	f043 030a 	orr.w	r3, r3, #10
 800490e:	b2da      	uxtb	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004916:	2200      	movs	r2, #0
 8004918:	2101      	movs	r1, #1
 800491a:	2001      	movs	r0, #1
 800491c:	f000 fca6 	bl	800526c <osSemaphoreNew>
 8004920:	4603      	mov	r3, r0
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <low_level_init+0x160>)
 8004924:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004926:	2200      	movs	r2, #0
 8004928:	2101      	movs	r1, #1
 800492a:	2001      	movs	r0, #1
 800492c:	f000 fc9e 	bl	800526c <osSemaphoreNew>
 8004930:	4603      	mov	r3, r0
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <low_level_init+0x164>)
 8004934:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004936:	f107 0310 	add.w	r3, r7, #16
 800493a:	2224      	movs	r2, #36	; 0x24
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f010 fc47 	bl	80151d2 <memset>
  attributes.name = "EthIf";
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <low_level_init+0x168>)
 8004946:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004948:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 800494e:	2330      	movs	r3, #48	; 0x30
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	461a      	mov	r2, r3
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	480f      	ldr	r0, [pc, #60]	; (8004998 <low_level_init+0x16c>)
 800495c:	f000 fa6a 	bl	8004e34 <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8004960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8004968:	f7fb ffd4 	bl	8000914 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800496c:	bf00      	nop
 800496e:	3738      	adds	r7, #56	; 0x38
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20005178 	.word	0x20005178
 8004978:	40028000 	.word	0x40028000
 800497c:	2000011c 	.word	0x2000011c
 8004980:	2000007c 	.word	0x2000007c
 8004984:	20005228 	.word	0x20005228
 8004988:	08018edc 	.word	0x08018edc
 800498c:	20005170 	.word	0x20005170
 8004990:	20005174 	.word	0x20005174
 8004994:	08016004 	.word	0x08016004
 8004998:	08004af9 	.word	0x08004af9

0800499c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b092      	sub	sp, #72	; 0x48
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80049b4:	f107 030c 	add.w	r3, r7, #12
 80049b8:	2230      	movs	r2, #48	; 0x30
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f010 fc08 	bl	80151d2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	2230      	movs	r2, #48	; 0x30
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f010 fc01 	bl	80151d2 <memset>

  for(q = p; q != NULL; q = q->next)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
 80049d4:	e045      	b.n	8004a62 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80049d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d902      	bls.n	80049e2 <low_level_output+0x46>
      return ERR_IF;
 80049dc:	f06f 030b 	mvn.w	r3, #11
 80049e0:	e065      	b.n	8004aae <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80049e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	3348      	adds	r3, #72	; 0x48
 80049f2:	443b      	add	r3, r7
 80049f4:	3b3c      	subs	r3, #60	; 0x3c
 80049f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80049f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fa:	895b      	ldrh	r3, [r3, #10]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	3348      	adds	r3, #72	; 0x48
 8004a0a:	443b      	add	r3, r7
 8004a0c:	3b38      	subs	r3, #56	; 0x38
 8004a0e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	f107 000c 	add.w	r0, r7, #12
 8004a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a20:	460b      	mov	r3, r1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	440b      	add	r3, r1
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	18c1      	adds	r1, r0, r3
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	3348      	adds	r3, #72	; 0x48
 8004a34:	443b      	add	r3, r7
 8004a36:	3b34      	subs	r3, #52	; 0x34
 8004a38:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a44:	4613      	mov	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3348      	adds	r3, #72	; 0x48
 8004a4e:	443b      	add	r3, r7
 8004a50:	3b34      	subs	r3, #52	; 0x34
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a58:	3301      	adds	r3, #1
 8004a5a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
 8004a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1b6      	bne.n	80049d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	891b      	ldrh	r3, [r3, #8]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <low_level_output+0x11c>)
 8004a70:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <low_level_output+0x11c>)
 8004a74:	f107 030c 	add.w	r3, r7, #12
 8004a78:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004a7a:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <low_level_output+0x11c>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004a80:	6838      	ldr	r0, [r7, #0]
 8004a82:	f005 fe79 	bl	800a778 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004a86:	490c      	ldr	r1, [pc, #48]	; (8004ab8 <low_level_output+0x11c>)
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <low_level_output+0x120>)
 8004a8a:	f7fc fb6b 	bl	8001164 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004a8e:	bf00      	nop
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <low_level_output+0x124>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fc83 	bl	80053a4 <osSemaphoreAcquire>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f5      	bne.n	8004a90 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004aa4:	4805      	ldr	r0, [pc, #20]	; (8004abc <low_level_output+0x120>)
 8004aa6:	f7fc fcf1 	bl	800148c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004aaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3748      	adds	r7, #72	; 0x48
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20005228 	.word	0x20005228
 8004abc:	20005178 	.word	0x20005178
 8004ac0:	20005174 	.word	0x20005174

08004ac4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <low_level_input+0x2c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4619      	mov	r1, r3
 8004ade:	4805      	ldr	r0, [pc, #20]	; (8004af4 <low_level_input+0x30>)
 8004ae0:	f7fc fb9c 	bl	800121c <HAL_ETH_ReadData>
  }

  return p;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	2000516c 	.word	0x2000516c
 8004af4:	20005178 	.word	0x20005178

08004af8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <ethernetif_input+0x50>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fc47 	bl	80053a4 <osSemaphoreAcquire>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f5      	bne.n	8004b08 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f7ff ffd1 	bl	8004ac4 <low_level_input>
 8004b22:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	4798      	blx	r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f005 fd76 	bl	800a62c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ea      	bne.n	8004b1c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b46:	e7df      	b.n	8004b08 <ethernetif_input+0x10>
 8004b48:	20005170 	.word	0x20005170

08004b4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <ethernetif_init+0x1c>
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <ethernetif_init+0x48>)
 8004b5c:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8004b60:	490d      	ldr	r1, [pc, #52]	; (8004b98 <ethernetif_init+0x4c>)
 8004b62:	480e      	ldr	r0, [pc, #56]	; (8004b9c <ethernetif_init+0x50>)
 8004b64:	f010 fad0 	bl	8015108 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2273      	movs	r2, #115	; 0x73
 8004b6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2274      	movs	r2, #116	; 0x74
 8004b74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <ethernetif_init+0x54>)
 8004b7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <ethernetif_init+0x58>)
 8004b82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fe51 	bl	800482c <low_level_init>

  return ERR_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	0801600c 	.word	0x0801600c
 8004b98:	08016028 	.word	0x08016028
 8004b9c:	08016038 	.word	0x08016038
 8004ba0:	08012ff5 	.word	0x08012ff5
 8004ba4:	0800499d 	.word	0x0800499d

08004ba8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	4809      	ldr	r0, [pc, #36]	; (8004bdc <pbuf_free_custom+0x34>)
 8004bb8:	f004 fecc 	bl	8009954 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <pbuf_free_custom+0x38>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <pbuf_free_custom+0x38>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <pbuf_free_custom+0x3c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fc4e 	bl	8005470 <osSemaphoreRelease>
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08018edc 	.word	0x08018edc
 8004be0:	2000516c 	.word	0x2000516c
 8004be4:	20005170 	.word	0x20005170

08004be8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bec:	f7fc f91e 	bl	8000e2c <HAL_GetTick>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004bfe:	2064      	movs	r0, #100	; 0x64
 8004c00:	f000 f9be 	bl	8004f80 <osDelay>
 8004c04:	e7fb      	b.n	8004bfe <ethernet_link_thread+0x8>
	...

08004c08 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004c10:	4812      	ldr	r0, [pc, #72]	; (8004c5c <HAL_ETH_RxAllocateCallback+0x54>)
 8004c12:	f004 fe2b 	bl	800986c <memp_malloc_pool>
 8004c16:	60f8      	str	r0, [r7, #12]
  if (p)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d014      	beq.n	8004c48 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f103 0220 	add.w	r2, r3, #32
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a0d      	ldr	r2, [pc, #52]	; (8004c60 <HAL_ETH_RxAllocateCallback+0x58>)
 8004c2c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004c36:	9201      	str	r2, [sp, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2241      	movs	r2, #65	; 0x41
 8004c3e:	2100      	movs	r1, #0
 8004c40:	2000      	movs	r0, #0
 8004c42:	f005 fb39 	bl	800a2b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004c46:	e005      	b.n	8004c54 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08018edc 	.word	0x08018edc
 8004c60:	08004ba9 	.word	0x08004ba9
 8004c64:	2000516c 	.word	0x2000516c

08004c68 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3b20      	subs	r3, #32
 8004c86:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2200      	movs	r2, #0
 8004c92:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e003      	b.n	8004cb2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e009      	b.n	8004cd4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	891a      	ldrh	r2, [r3, #8]
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f2      	bne.n	8004cc0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fd40 	bl	8004764 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004ce4:	bf00      	nop
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f005 fc99 	bl	800a62c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d16:	f3ef 8305 	mrs	r3, IPSR
 8004d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10f      	bne.n	8004d42 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	607b      	str	r3, [r7, #4]
  return(result);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d32:	603b      	str	r3, [r7, #0]
  return(result);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <osKernelInitialize+0x3a>
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <osKernelInitialize+0x64>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d103      	bne.n	8004d4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004d42:	f06f 0305 	mvn.w	r3, #5
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e00c      	b.n	8004d64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <osKernelInitialize+0x64>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <osKernelInitialize+0x64>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e002      	b.n	8004d64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20005260 	.word	0x20005260

08004d78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7e:	f3ef 8305 	mrs	r3, IPSR
 8004d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <osKernelStart+0x3a>
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <osKernelStart+0x68>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d103      	bne.n	8004db2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004daa:	f06f 0305 	mvn.w	r3, #5
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e010      	b.n	8004dd4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <osKernelStart+0x68>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d109      	bne.n	8004dce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dba:	f7ff ffa2 	bl	8004d02 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <osKernelStart+0x68>)
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004dc4:	f002 f906 	bl	8006fd4 <vTaskStartScheduler>
      stat = osOK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20005260 	.word	0x20005260

08004de4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dea:	f3ef 8305 	mrs	r3, IPSR
 8004dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004df0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e02:	f3ef 8311 	mrs	r3, BASEPRI
 8004e06:	603b      	str	r3, [r7, #0]
  return(result);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <osKernelGetTickCount+0x3a>
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <osKernelGetTickCount+0x4c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004e16:	f002 fa0f 	bl	8007238 <xTaskGetTickCountFromISR>
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	e002      	b.n	8004e24 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004e1e:	f002 f9fb 	bl	8007218 <xTaskGetTickCount>
 8004e22:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20005260 	.word	0x20005260

08004e34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b090      	sub	sp, #64	; 0x40
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e44:	f3ef 8305 	mrs	r3, IPSR
 8004e48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e4a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 808f 	bne.w	8004f70 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e62:	617b      	str	r3, [r7, #20]
  return(result);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <osThreadNew+0x3e>
 8004e6a:	4b44      	ldr	r3, [pc, #272]	; (8004f7c <osThreadNew+0x148>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d07e      	beq.n	8004f70 <osThreadNew+0x13c>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d07b      	beq.n	8004f70 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004e7c:	2318      	movs	r3, #24
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d045      	beq.n	8004f1c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <osThreadNew+0x6a>
        name = attr->name;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <osThreadNew+0x90>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2b38      	cmp	r3, #56	; 0x38
 8004eb6:	d805      	bhi.n	8004ec4 <osThreadNew+0x90>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <osThreadNew+0x94>
        return (NULL);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e054      	b.n	8004f72 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00e      	beq.n	8004efe <osThreadNew+0xca>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2ba7      	cmp	r3, #167	; 0xa7
 8004ee6:	d90a      	bls.n	8004efe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <osThreadNew+0xca>
        mem = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	623b      	str	r3, [r7, #32]
 8004efc:	e010      	b.n	8004f20 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10c      	bne.n	8004f20 <osThreadNew+0xec>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <osThreadNew+0xec>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <osThreadNew+0xec>
          mem = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	e001      	b.n	8004f20 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d110      	bne.n	8004f48 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f2e:	9202      	str	r2, [sp, #8]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f001 fe53 	bl	8006be8 <xTaskCreateStatic>
 8004f42:	4603      	mov	r3, r0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e013      	b.n	8004f70 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d110      	bne.n	8004f70 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	f107 0310 	add.w	r3, r7, #16
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f001 fea4 	bl	8006cae <xTaskCreate>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <osThreadNew+0x13c>
          hTask = NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f70:	693b      	ldr	r3, [r7, #16]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3730      	adds	r7, #48	; 0x30
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20005260 	.word	0x20005260

08004f80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f88:	f3ef 8305 	mrs	r3, IPSR
 8004f8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10f      	bne.n	8004fb4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f94:	f3ef 8310 	mrs	r3, PRIMASK
 8004f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <osDelay+0x3c>
 8004fac:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <osDelay+0x58>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d103      	bne.n	8004fbc <osDelay+0x3c>
    stat = osErrorISR;
 8004fb4:	f06f 0305 	mvn.w	r3, #5
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e007      	b.n	8004fcc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <osDelay+0x4c>
      vTaskDelay(ticks);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 ffce 	bl	8006f68 <vTaskDelay>
    }
  }

  return (stat);
 8004fcc:	697b      	ldr	r3, [r7, #20]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20005260 	.word	0x20005260

08004fdc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe8:	f3ef 8305 	mrs	r3, IPSR
 8004fec:	613b      	str	r3, [r7, #16]
  return(result);
 8004fee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 8085 	bne.w	8005100 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005002:	f3ef 8311 	mrs	r3, BASEPRI
 8005006:	60bb      	str	r3, [r7, #8]
  return(result);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <osMutexNew+0x3a>
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <osMutexNew+0x130>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d074      	beq.n	8005100 <osMutexNew+0x124>
    if (attr != NULL) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <osMutexNew+0x48>
      type = attr->attr_bits;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	e001      	b.n	8005028 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <osMutexNew+0x5c>
      rmtx = 1U;
 8005032:	2301      	movs	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e001      	b.n	800503c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d15c      	bne.n	8005100 <osMutexNew+0x124>
      mem = -1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d015      	beq.n	800507e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <osMutexNew+0x8c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b4f      	cmp	r3, #79	; 0x4f
 8005060:	d902      	bls.n	8005068 <osMutexNew+0x8c>
          mem = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e00c      	b.n	8005082 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <osMutexNew+0xa6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <osMutexNew+0xa6>
            mem = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e001      	b.n	8005082 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d112      	bne.n	80050ae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4619      	mov	r1, r3
 8005094:	2004      	movs	r0, #4
 8005096:	f000 fe1a 	bl	8005cce <xQueueCreateMutexStatic>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24
 800509c:	e016      	b.n	80050cc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4619      	mov	r1, r3
 80050a4:	2001      	movs	r0, #1
 80050a6:	f000 fe12 	bl	8005cce <xQueueCreateMutexStatic>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24
 80050ac:	e00e      	b.n	80050cc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80050ba:	2004      	movs	r0, #4
 80050bc:	f000 fdef 	bl	8005c9e <xQueueCreateMutex>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24
 80050c2:	e003      	b.n	80050cc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80050c4:	2001      	movs	r0, #1
 80050c6:	f000 fdea 	bl	8005c9e <xQueueCreateMutex>
 80050ca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <osMutexNew+0x110>
        if (attr != NULL) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <osMutexNew+0x104>
          name = attr->name;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e001      	b.n	80050e4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e8:	f001 fcf6 	bl	8006ad8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <osMutexNew+0x124>
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005102:	4618      	mov	r0, r3
 8005104:	3728      	adds	r7, #40	; 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20005260 	.word	0x20005260

08005110 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	613b      	str	r3, [r7, #16]
  return(result);
 8005134:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513a:	f3ef 8310 	mrs	r3, PRIMASK
 800513e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005146:	f3ef 8311 	mrs	r3, BASEPRI
 800514a:	60bb      	str	r3, [r7, #8]
  return(result);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <osMutexAcquire+0x52>
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <osMutexAcquire+0xb8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d103      	bne.n	8005162 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800515a:	f06f 0305 	mvn.w	r3, #5
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e02c      	b.n	80051bc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005168:	f06f 0303 	mvn.w	r3, #3
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e025      	b.n	80051bc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	69b8      	ldr	r0, [r7, #24]
 800517a:	f000 fdf9 	bl	8005d70 <xQueueTakeMutexRecursive>
 800517e:	4603      	mov	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d01b      	beq.n	80051bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800518a:	f06f 0301 	mvn.w	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e014      	b.n	80051bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005192:	f06f 0302 	mvn.w	r3, #2
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e010      	b.n	80051bc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	69b8      	ldr	r0, [r7, #24]
 800519e:	f001 f9b3 	bl	8006508 <xQueueSemaphoreTake>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d009      	beq.n	80051bc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80051ae:	f06f 0301 	mvn.w	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e002      	b.n	80051bc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80051b6:	f06f 0302 	mvn.w	r3, #2
 80051ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051bc:	69fb      	ldr	r3, [r7, #28]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20005260 	.word	0x20005260

080051cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	613b      	str	r3, [r7, #16]
  return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10f      	bne.n	8005214 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f4:	f3ef 8310 	mrs	r3, PRIMASK
 80051f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005200:	f3ef 8311 	mrs	r3, BASEPRI
 8005204:	60bb      	str	r3, [r7, #8]
  return(result);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <osMutexRelease+0x50>
 800520c:	4b16      	ldr	r3, [pc, #88]	; (8005268 <osMutexRelease+0x9c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d103      	bne.n	800521c <osMutexRelease+0x50>
    stat = osErrorISR;
 8005214:	f06f 0305 	mvn.w	r3, #5
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e01f      	b.n	800525c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005222:	f06f 0303 	mvn.w	r3, #3
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e018      	b.n	800525c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005230:	69b8      	ldr	r0, [r7, #24]
 8005232:	f000 fd67 	bl	8005d04 <xQueueGiveMutexRecursive>
 8005236:	4603      	mov	r3, r0
 8005238:	2b01      	cmp	r3, #1
 800523a:	d00f      	beq.n	800525c <osMutexRelease+0x90>
        stat = osErrorResource;
 800523c:	f06f 0302 	mvn.w	r3, #2
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e00b      	b.n	800525c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005244:	2300      	movs	r3, #0
 8005246:	2200      	movs	r2, #0
 8005248:	2100      	movs	r1, #0
 800524a:	69b8      	ldr	r0, [r7, #24]
 800524c:	f000 fe3a 	bl	8005ec4 <xQueueGenericSend>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d002      	beq.n	800525c <osMutexRelease+0x90>
        stat = osErrorResource;
 8005256:	f06f 0302 	mvn.w	r3, #2
 800525a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800525c:	69fb      	ldr	r3, [r7, #28]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20005260 	.word	0x20005260

0800526c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	; 0x30
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527c:	f3ef 8305 	mrs	r3, IPSR
 8005280:	61bb      	str	r3, [r7, #24]
  return(result);
 8005282:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005284:	2b00      	cmp	r3, #0
 8005286:	f040 8086 	bne.w	8005396 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	617b      	str	r3, [r7, #20]
  return(result);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005296:	f3ef 8311 	mrs	r3, BASEPRI
 800529a:	613b      	str	r3, [r7, #16]
  return(result);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <osSemaphoreNew+0x3e>
 80052a2:	4b3f      	ldr	r3, [pc, #252]	; (80053a0 <osSemaphoreNew+0x134>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d075      	beq.n	8005396 <osSemaphoreNew+0x12a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d072      	beq.n	8005396 <osSemaphoreNew+0x12a>
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d86e      	bhi.n	8005396 <osSemaphoreNew+0x12a>
    mem = -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <osSemaphoreNew+0x6e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b4f      	cmp	r3, #79	; 0x4f
 80052d2:	d902      	bls.n	80052da <osSemaphoreNew+0x6e>
        mem = 1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	e00c      	b.n	80052f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <osSemaphoreNew+0x88>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <osSemaphoreNew+0x88>
          mem = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	e001      	b.n	80052f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d04c      	beq.n	8005396 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d128      	bne.n	8005354 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10a      	bne.n	800531e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2203      	movs	r2, #3
 800530e:	9200      	str	r2, [sp, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	2100      	movs	r1, #0
 8005314:	2001      	movs	r0, #1
 8005316:	f000 fbc1 	bl	8005a9c <xQueueGenericCreateStatic>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
 800531c:	e005      	b.n	800532a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800531e:	2203      	movs	r2, #3
 8005320:	2100      	movs	r1, #0
 8005322:	2001      	movs	r0, #1
 8005324:	f000 fc3c 	bl	8005ba0 <xQueueGenericCreate>
 8005328:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d022      	beq.n	8005376 <osSemaphoreNew+0x10a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01f      	beq.n	8005376 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	2100      	movs	r1, #0
 800533c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533e:	f000 fdc1 	bl	8005ec4 <xQueueGenericSend>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d016      	beq.n	8005376 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800534a:	f001 fa77 	bl	800683c <vQueueDelete>
            hSemaphore = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	e010      	b.n	8005376 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d108      	bne.n	800536c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	461a      	mov	r2, r3
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fd3c 	bl	8005de0 <xQueueCreateCountingSemaphoreStatic>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24
 800536a:	e004      	b.n	8005376 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fd71 	bl	8005e56 <xQueueCreateCountingSemaphore>
 8005374:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e001      	b.n	800538e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800538e:	69f9      	ldr	r1, [r7, #28]
 8005390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005392:	f001 fba1 	bl	8006ad8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20005260 	.word	0x20005260

080053a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80053bc:	f06f 0303 	mvn.w	r3, #3
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	e04b      	b.n	800545c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c4:	f3ef 8305 	mrs	r3, IPSR
 80053c8:	617b      	str	r3, [r7, #20]
  return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10f      	bne.n	80053f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d0:	f3ef 8310 	mrs	r3, PRIMASK
 80053d4:	613b      	str	r3, [r7, #16]
  return(result);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053dc:	f3ef 8311 	mrs	r3, BASEPRI
 80053e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d026      	beq.n	8005436 <osSemaphoreAcquire+0x92>
 80053e8:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <osSemaphoreAcquire+0xc4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d122      	bne.n	8005436 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80053f6:	f06f 0303 	mvn.w	r3, #3
 80053fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80053fc:	e02d      	b.n	800545a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	461a      	mov	r2, r3
 8005408:	2100      	movs	r1, #0
 800540a:	69b8      	ldr	r0, [r7, #24]
 800540c:	f001 f990 	bl	8006730 <xQueueReceiveFromISR>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d003      	beq.n	800541e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005416:	f06f 0302 	mvn.w	r3, #2
 800541a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800541c:	e01d      	b.n	800545a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01a      	beq.n	800545a <osSemaphoreAcquire+0xb6>
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <osSemaphoreAcquire+0xc8>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005434:	e011      	b.n	800545a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	69b8      	ldr	r0, [r7, #24]
 800543a:	f001 f865 	bl	8006508 <xQueueSemaphoreTake>
 800543e:	4603      	mov	r3, r0
 8005440:	2b01      	cmp	r3, #1
 8005442:	d00b      	beq.n	800545c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800544a:	f06f 0301 	mvn.w	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	e004      	b.n	800545c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005452:	f06f 0302 	mvn.w	r3, #2
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e000      	b.n	800545c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800545a:	bf00      	nop
      }
    }
  }

  return (stat);
 800545c:	69fb      	ldr	r3, [r7, #28]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20005260 	.word	0x20005260
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005486:	f06f 0303 	mvn.w	r3, #3
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e03e      	b.n	800550c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548e:	f3ef 8305 	mrs	r3, IPSR
 8005492:	617b      	str	r3, [r7, #20]
  return(result);
 8005494:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549a:	f3ef 8310 	mrs	r3, PRIMASK
 800549e:	613b      	str	r3, [r7, #16]
  return(result);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a6:	f3ef 8311 	mrs	r3, BASEPRI
 80054aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01e      	beq.n	80054f0 <osSemaphoreRelease+0x80>
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <osSemaphoreRelease+0xa8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11a      	bne.n	80054f0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4619      	mov	r1, r3
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f000 fea3 	bl	8006210 <xQueueGiveFromISR>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d003      	beq.n	80054d8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80054d0:	f06f 0302 	mvn.w	r3, #2
 80054d4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80054d6:	e018      	b.n	800550a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d015      	beq.n	800550a <osSemaphoreRelease+0x9a>
 80054de:	4b0f      	ldr	r3, [pc, #60]	; (800551c <osSemaphoreRelease+0xac>)
 80054e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80054ee:	e00c      	b.n	800550a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80054f0:	2300      	movs	r3, #0
 80054f2:	2200      	movs	r2, #0
 80054f4:	2100      	movs	r1, #0
 80054f6:	69b8      	ldr	r0, [r7, #24]
 80054f8:	f000 fce4 	bl	8005ec4 <xQueueGenericSend>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d004      	beq.n	800550c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005502:	f06f 0302 	mvn.w	r3, #2
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e000      	b.n	800550c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800550a:	bf00      	nop
    }
  }

  return (stat);
 800550c:	69fb      	ldr	r3, [r7, #28]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20005260 	.word	0x20005260
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005530:	f3ef 8305 	mrs	r3, IPSR
 8005534:	61bb      	str	r3, [r7, #24]
  return(result);
 8005536:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005538:	2b00      	cmp	r3, #0
 800553a:	d16f      	bne.n	800561c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553c:	f3ef 8310 	mrs	r3, PRIMASK
 8005540:	617b      	str	r3, [r7, #20]
  return(result);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005548:	f3ef 8311 	mrs	r3, BASEPRI
 800554c:	613b      	str	r3, [r7, #16]
  return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <osMessageQueueNew+0x3c>
 8005554:	4b34      	ldr	r3, [pc, #208]	; (8005628 <osMessageQueueNew+0x108>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d05f      	beq.n	800561c <osMessageQueueNew+0xfc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d05c      	beq.n	800561c <osMessageQueueNew+0xfc>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d059      	beq.n	800561c <osMessageQueueNew+0xfc>
    mem = -1;
 8005568:	f04f 33ff 	mov.w	r3, #4294967295
 800556c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d029      	beq.n	80055c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d012      	beq.n	80055a2 <osMessageQueueNew+0x82>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b4f      	cmp	r3, #79	; 0x4f
 8005582:	d90e      	bls.n	80055a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <osMessageQueueNew+0x82>
        mem = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	e014      	b.n	80055cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d110      	bne.n	80055cc <osMessageQueueNew+0xac>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10c      	bne.n	80055cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d108      	bne.n	80055cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <osMessageQueueNew+0xac>
          mem = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	e001      	b.n	80055cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10b      	bne.n	80055ea <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2100      	movs	r1, #0
 80055dc:	9100      	str	r1, [sp, #0]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fa5b 	bl	8005a9c <xQueueGenericCreateStatic>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24
 80055e8:	e008      	b.n	80055fc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80055f0:	2200      	movs	r2, #0
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fad3 	bl	8005ba0 <xQueueGenericCreate>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	e001      	b.n	8005614 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005618:	f001 fa5e 	bl	8006ad8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20005260 	.word	0x20005260

0800562c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005644:	f3ef 8305 	mrs	r3, IPSR
 8005648:	61fb      	str	r3, [r7, #28]
  return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005650:	f3ef 8310 	mrs	r3, PRIMASK
 8005654:	61bb      	str	r3, [r7, #24]
  return(result);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800565c:	f3ef 8311 	mrs	r3, BASEPRI
 8005660:	617b      	str	r3, [r7, #20]
  return(result);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02c      	beq.n	80056c2 <osMessageQueuePut+0x96>
 8005668:	4b28      	ldr	r3, [pc, #160]	; (800570c <osMessageQueuePut+0xe0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d128      	bne.n	80056c2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <osMessageQueuePut+0x56>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <osMessageQueuePut+0x56>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005682:	f06f 0303 	mvn.w	r3, #3
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005688:	e039      	b.n	80056fe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800568e:	f107 0210 	add.w	r2, r7, #16
 8005692:	2300      	movs	r3, #0
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	6a38      	ldr	r0, [r7, #32]
 8005698:	f000 fd1a 	bl	80060d0 <xQueueGenericSendFromISR>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d003      	beq.n	80056aa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80056a2:	f06f 0302 	mvn.w	r3, #2
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056a8:	e029      	b.n	80056fe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d026      	beq.n	80056fe <osMessageQueuePut+0xd2>
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <osMessageQueuePut+0xe4>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056c0:	e01d      	b.n	80056fe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <osMessageQueuePut+0xa2>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80056ce:	f06f 0303 	mvn.w	r3, #3
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
 80056d4:	e014      	b.n	8005700 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80056d6:	2300      	movs	r3, #0
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	6a38      	ldr	r0, [r7, #32]
 80056de:	f000 fbf1 	bl	8005ec4 <xQueueGenericSend>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d00b      	beq.n	8005700 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80056ee:	f06f 0301 	mvn.w	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	e004      	b.n	8005700 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80056f6:	f06f 0302 	mvn.w	r3, #2
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e000      	b.n	8005700 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005702:	4618      	mov	r0, r3
 8005704:	3728      	adds	r7, #40	; 0x28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20005260 	.word	0x20005260
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005730:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	61bb      	str	r3, [r7, #24]
  return(result);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005742:	f3ef 8311 	mrs	r3, BASEPRI
 8005746:	617b      	str	r3, [r7, #20]
  return(result);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02c      	beq.n	80057a8 <osMessageQueueGet+0x94>
 800574e:	4b28      	ldr	r3, [pc, #160]	; (80057f0 <osMessageQueueGet+0xdc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d128      	bne.n	80057a8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <osMessageQueueGet+0x54>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <osMessageQueueGet+0x54>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005768:	f06f 0303 	mvn.w	r3, #3
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800576e:	e038      	b.n	80057e2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005774:	f107 0310 	add.w	r3, r7, #16
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	6a38      	ldr	r0, [r7, #32]
 800577e:	f000 ffd7 	bl	8006730 <xQueueReceiveFromISR>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005788:	f06f 0302 	mvn.w	r3, #2
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800578e:	e028      	b.n	80057e2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d025      	beq.n	80057e2 <osMessageQueueGet+0xce>
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <osMessageQueueGet+0xe0>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057a6:	e01c      	b.n	80057e2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <osMessageQueueGet+0xa0>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80057b4:	f06f 0303 	mvn.w	r3, #3
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	e013      	b.n	80057e4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	6a38      	ldr	r0, [r7, #32]
 80057c2:	f000 fdbb 	bl	800633c <xQueueReceive>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d00b      	beq.n	80057e4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80057d2:	f06f 0301 	mvn.w	r3, #1
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	e004      	b.n	80057e4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80057da:	f06f 0302 	mvn.w	r3, #2
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
 80057e0:	e000      	b.n	80057e4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3728      	adds	r7, #40	; 0x28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20005260 	.word	0x20005260
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <vApplicationGetIdleTaskMemory+0x2c>)
 8005808:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a06      	ldr	r2, [pc, #24]	; (8005828 <vApplicationGetIdleTaskMemory+0x30>)
 800580e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20005264 	.word	0x20005264
 8005828:	2000530c 	.word	0x2000530c

0800582c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a07      	ldr	r2, [pc, #28]	; (8005858 <vApplicationGetTimerTaskMemory+0x2c>)
 800583c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a06      	ldr	r2, [pc, #24]	; (800585c <vApplicationGetTimerTaskMemory+0x30>)
 8005842:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	2000550c 	.word	0x2000550c
 800585c:	200055b4 	.word	0x200055b4

08005860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f103 0208 	add.w	r2, r3, #8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f103 0208 	add.w	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f103 0208 	add.w	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d103      	bne.n	8005922 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e00c      	b.n	800593c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3308      	adds	r3, #8
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e002      	b.n	8005930 <vListInsert+0x2e>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	d2f6      	bcs.n	800592a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6892      	ldr	r2, [r2, #8]
 800598a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6852      	ldr	r2, [r2, #4]
 8005994:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d103      	bne.n	80059a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1e5a      	subs	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80059f6:	f002 fdd1 	bl	800859c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	441a      	add	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	3b01      	subs	r3, #1
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	22ff      	movs	r2, #255	; 0xff
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	22ff      	movs	r2, #255	; 0xff
 8005a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d114      	bne.n	8005a76 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3310      	adds	r3, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fd75 	bl	8007548 <xTaskRemoveFromEventList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <xQueueGenericReset+0xd0>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e009      	b.n	8005a8a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3310      	adds	r3, #16
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fef0 	bl	8005860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff feeb 	bl	8005860 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a8a:	f002 fdbb 	bl	8008604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a8e:	2301      	movs	r3, #1
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	b672      	cpsid	i
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	b662      	cpsie	i
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10c      	bne.n	8005aea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	b672      	cpsid	i
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	b662      	cpsie	i
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <xQueueGenericCreateStatic+0x5a>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <xQueueGenericCreateStatic+0x5e>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <xQueueGenericCreateStatic+0x60>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10c      	bne.n	8005b1a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	b672      	cpsid	i
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	b662      	cpsie	i
 8005b14:	623b      	str	r3, [r7, #32]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xQueueGenericCreateStatic+0x8a>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <xQueueGenericCreateStatic+0x8e>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <xQueueGenericCreateStatic+0x90>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10c      	bne.n	8005b4a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	b672      	cpsid	i
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	b662      	cpsie	i
 8005b44:	61fb      	str	r3, [r7, #28]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b4a:	2350      	movs	r3, #80	; 0x50
 8005b4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b50      	cmp	r3, #80	; 0x50
 8005b52:	d00c      	beq.n	8005b6e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	b672      	cpsid	i
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	b662      	cpsie	i
 8005b68:	61bb      	str	r3, [r7, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f847 	bl	8005c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	; 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <xQueueGenericCreate+0x2e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	b672      	cpsid	i
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	b662      	cpsie	i
 8005bc8:	613b      	str	r3, [r7, #16]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e004      	b.n	8005be4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3350      	adds	r3, #80	; 0x50
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 fe03 	bl	80087f4 <pvPortMalloc>
 8005bee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3350      	adds	r3, #80	; 0x50
 8005bfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c08:	79fa      	ldrb	r2, [r7, #7]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f805 	bl	8005c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c52:	2101      	movs	r1, #1
 8005c54:	69b8      	ldr	r0, [r7, #24]
 8005c56:	f7ff feb7 	bl	80059c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f917 	bl	8005ec4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	f7ff ff72 	bl	8005ba0 <xQueueGenericCreate>
 8005cbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ffd3 	bl	8005c6a <prvInitialiseMutex>

		return xNewQueue;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b088      	sub	sp, #32
 8005cd2:	af02      	add	r7, sp, #8
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	6039      	str	r1, [r7, #0]
 8005cd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	6939      	ldr	r1, [r7, #16]
 8005cec:	6978      	ldr	r0, [r7, #20]
 8005cee:	f7ff fed5 	bl	8005a9c <xQueueGenericCreateStatic>
 8005cf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff ffb8 	bl	8005c6a <prvInitialiseMutex>

		return xNewQueue;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
	}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10c      	bne.n	8005d30 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	b672      	cpsid	i
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	b662      	cpsie	i
 8005d2a:	60fb      	str	r3, [r7, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	689c      	ldr	r4, [r3, #8]
 8005d34:	f001 fdd2 	bl	80078dc <xTaskGetCurrentTaskHandle>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d111      	bne.n	8005d62 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005d50:	2300      	movs	r3, #0
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f000 f8b4 	bl	8005ec4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e001      	b.n	8005d66 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005d66:	697b      	ldr	r3, [r7, #20]
	}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}

08005d70 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	b672      	cpsid	i
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	b662      	cpsie	i
 8005d98:	60fb      	str	r3, [r7, #12]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	689c      	ldr	r4, [r3, #8]
 8005da2:	f001 fd9b 	bl	80078dc <xTaskGetCurrentTaskHandle>
 8005da6:	4603      	mov	r3, r0
 8005da8:	429c      	cmp	r4, r3
 8005daa:	d107      	bne.n	8005dbc <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e00c      	b.n	8005dd6 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6938      	ldr	r0, [r7, #16]
 8005dc0:	f000 fba2 	bl	8006508 <xQueueSemaphoreTake>
 8005dc4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd90      	pop	{r4, r7, pc}

08005de0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	61bb      	str	r3, [r7, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d90c      	bls.n	8005e2e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	b672      	cpsid	i
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	b662      	cpsie	i
 8005e28:	617b      	str	r3, [r7, #20]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e2e:	2302      	movs	r3, #2
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff fe2f 	bl	8005a9c <xQueueGenericCreateStatic>
 8005e3e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
	}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10c      	bne.n	8005e80 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	b672      	cpsid	i
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	b662      	cpsie	i
 8005e7a:	613b      	str	r3, [r7, #16]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d90c      	bls.n	8005ea2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	b672      	cpsid	i
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	b662      	cpsie	i
 8005e9c:	60fb      	str	r3, [r7, #12]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fe7a 	bl	8005ba0 <xQueueGenericCreate>
 8005eac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005eba:	697b      	ldr	r3, [r7, #20]
	}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	; 0x38
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10c      	bne.n	8005efa <xQueueGenericSend+0x36>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	b672      	cpsid	i
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <xQueueGenericSend+0x44>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <xQueueGenericSend+0x48>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <xQueueGenericSend+0x4a>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10c      	bne.n	8005f2c <xQueueGenericSend+0x68>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <xQueueGenericSend+0x76>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <xQueueGenericSend+0x7a>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericSend+0x7c>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10c      	bne.n	8005f5e <xQueueGenericSend+0x9a>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	623b      	str	r3, [r7, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5e:	f001 fccd 	bl	80078fc <xTaskGetSchedulerState>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <xQueueGenericSend+0xaa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericSend+0xae>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericSend+0xb0>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10c      	bne.n	8005f92 <xQueueGenericSend+0xce>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	b672      	cpsid	i
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	b662      	cpsie	i
 8005f8c:	61fb      	str	r3, [r7, #28]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f92:	f002 fb03 	bl	800859c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <xQueueGenericSend+0xe4>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d129      	bne.n	8005ffc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fae:	f000 fc82 	bl	80068b6 <prvCopyDataToQueue>
 8005fb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d010      	beq.n	8005fde <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	3324      	adds	r3, #36	; 0x24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fac1 	bl	8007548 <xTaskRemoveFromEventList>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d013      	beq.n	8005ff4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fcc:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <xQueueGenericSend+0x208>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	e00a      	b.n	8005ff4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <xQueueGenericSend+0x208>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ff4:	f002 fb06 	bl	8008604 <vPortExitCritical>
				return pdPASS;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e063      	b.n	80060c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006002:	f002 faff 	bl	8008604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006006:	2300      	movs	r3, #0
 8006008:	e05c      	b.n	80060c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	4618      	mov	r0, r3
 8006016:	f001 fafd 	bl	8007614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800601a:	2301      	movs	r3, #1
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601e:	f002 faf1 	bl	8008604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006022:	f001 f84b 	bl	80070bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006026:	f002 fab9 	bl	800859c <vPortEnterCritical>
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006030:	b25b      	sxtb	r3, r3
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d103      	bne.n	8006040 <xQueueGenericSend+0x17c>
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006046:	b25b      	sxtb	r3, r3
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d103      	bne.n	8006056 <xQueueGenericSend+0x192>
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006056:	f002 fad5 	bl	8008604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800605a:	1d3a      	adds	r2, r7, #4
 800605c:	f107 0314 	add.w	r3, r7, #20
 8006060:	4611      	mov	r1, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f001 faec 	bl	8007640 <xTaskCheckForTimeOut>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d124      	bne.n	80060b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800606e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006070:	f000 fd19 	bl	8006aa6 <prvIsQueueFull>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	3310      	adds	r3, #16
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fa0c 	bl	80074a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608a:	f000 fca4 	bl	80069d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800608e:	f001 f823 	bl	80070d8 <xTaskResumeAll>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	f47f af7c 	bne.w	8005f92 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <xQueueGenericSend+0x208>)
 800609c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	e772      	b.n	8005f92 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ae:	f000 fc92 	bl	80069d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060b2:	f001 f811 	bl	80070d8 <xTaskResumeAll>
 80060b6:	e76c      	b.n	8005f92 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ba:	f000 fc8c 	bl	80069d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060be:	f001 f80b 	bl	80070d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3738      	adds	r7, #56	; 0x38
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10c      	bne.n	8006102 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	b672      	cpsid	i
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	b662      	cpsie	i
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <xQueueGenericSendFromISR+0x40>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <xQueueGenericSendFromISR+0x44>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <xQueueGenericSendFromISR+0x46>
 8006114:	2300      	movs	r3, #0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10c      	bne.n	8006134 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	b672      	cpsid	i
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	b662      	cpsie	i
 800612e:	623b      	str	r3, [r7, #32]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <xQueueGenericSendFromISR+0x72>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <xQueueGenericSendFromISR+0x76>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSendFromISR+0x78>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10c      	bne.n	8006166 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	b672      	cpsid	i
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	b662      	cpsie	i
 8006160:	61fb      	str	r3, [r7, #28]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006166:	f002 fb01 	bl	800876c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800616a:	f3ef 8211 	mrs	r2, BASEPRI
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	b672      	cpsid	i
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	b662      	cpsie	i
 8006182:	61ba      	str	r2, [r7, #24]
 8006184:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006186:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <xQueueGenericSendFromISR+0xcc>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d12c      	bne.n	80061f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ac:	f000 fb83 	bl	80068b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d112      	bne.n	80061e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f9be 	bl	8007548 <xTaskRemoveFromEventList>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e007      	b.n	80061f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061e4:	3301      	adds	r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	b25a      	sxtb	r2, r3
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061f4:	e001      	b.n	80061fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006208:	4618      	mov	r0, r3
 800620a:	3738      	adds	r7, #56	; 0x38
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	; 0x38
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	b672      	cpsid	i
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	b662      	cpsie	i
 800625a:	61fb      	str	r3, [r7, #28]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <xQueueGiveFromISR+0x60>
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <xQueueGiveFromISR+0x64>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <xQueueGiveFromISR+0x66>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10c      	bne.n	8006294 <xQueueGiveFromISR+0x84>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	b672      	cpsid	i
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	b662      	cpsie	i
 800628e:	61bb      	str	r3, [r7, #24]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006294:	f002 fa6a 	bl	800876c <vPortValidateInterruptPriority>
	__asm volatile
 8006298:	f3ef 8211 	mrs	r2, BASEPRI
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	b672      	cpsid	i
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	b662      	cpsie	i
 80062b0:	617a      	str	r2, [r7, #20]
 80062b2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d22b      	bcs.n	8006320 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d112      	bne.n	800630a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f929 	bl	8007548 <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e007      	b.n	800631a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800630a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630e:	3301      	adds	r3, #1
 8006310:	b2db      	uxtb	r3, r3
 8006312:	b25a      	sxtb	r2, r3
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800631a:	2301      	movs	r3, #1
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	e001      	b.n	8006324 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006320:	2300      	movs	r3, #0
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f383 8811 	msr	BASEPRI, r3
}
 800632e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006332:	4618      	mov	r0, r3
 8006334:	3738      	adds	r7, #56	; 0x38
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08c      	sub	sp, #48	; 0x30
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006348:	2300      	movs	r3, #0
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10c      	bne.n	8006370 <xQueueReceive+0x34>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	623b      	str	r3, [r7, #32]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <xQueueReceive+0x42>
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <xQueueReceive+0x46>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <xQueueReceive+0x48>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <xQueueReceive+0x66>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	61fb      	str	r3, [r7, #28]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a2:	f001 faab 	bl	80078fc <xTaskGetSchedulerState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xQueueReceive+0x76>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xQueueReceive+0x7a>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueReceive+0x7c>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <xQueueReceive+0x9a>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	b672      	cpsid	i
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	b662      	cpsie	i
 80063d0:	61bb      	str	r3, [r7, #24]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d6:	f002 f8e1 	bl	800859c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01f      	beq.n	8006426 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ea:	f000 face 	bl	800698a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00f      	beq.n	800641e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	3310      	adds	r3, #16
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f8a0 	bl	8007548 <xTaskRemoveFromEventList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800640e:	4b3d      	ldr	r3, [pc, #244]	; (8006504 <xQueueReceive+0x1c8>)
 8006410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800641e:	f002 f8f1 	bl	8008604 <vPortExitCritical>
				return pdPASS;
 8006422:	2301      	movs	r3, #1
 8006424:	e069      	b.n	80064fa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d103      	bne.n	8006434 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800642c:	f002 f8ea 	bl	8008604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006430:	2300      	movs	r3, #0
 8006432:	e062      	b.n	80064fa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800643a:	f107 0310 	add.w	r3, r7, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f001 f8e8 	bl	8007614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006448:	f002 f8dc 	bl	8008604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800644c:	f000 fe36 	bl	80070bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006450:	f002 f8a4 	bl	800859c <vPortEnterCritical>
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800645a:	b25b      	sxtb	r3, r3
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d103      	bne.n	800646a <xQueueReceive+0x12e>
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006470:	b25b      	sxtb	r3, r3
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d103      	bne.n	8006480 <xQueueReceive+0x144>
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006480:	f002 f8c0 	bl	8008604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006484:	1d3a      	adds	r2, r7, #4
 8006486:	f107 0310 	add.w	r3, r7, #16
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f8d7 	bl	8007640 <xTaskCheckForTimeOut>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d123      	bne.n	80064e0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649a:	f000 faee 	bl	8006a7a <prvIsQueueEmpty>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d017      	beq.n	80064d4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fff7 	bl	80074a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b4:	f000 fa8f 	bl	80069d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b8:	f000 fe0e 	bl	80070d8 <xTaskResumeAll>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d189      	bne.n	80063d6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <xQueueReceive+0x1c8>)
 80064c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	e780      	b.n	80063d6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d6:	f000 fa7e 	bl	80069d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064da:	f000 fdfd 	bl	80070d8 <xTaskResumeAll>
 80064de:	e77a      	b.n	80063d6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e2:	f000 fa78 	bl	80069d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e6:	f000 fdf7 	bl	80070d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ec:	f000 fac5 	bl	8006a7a <prvIsQueueEmpty>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f43f af6f 	beq.w	80063d6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08e      	sub	sp, #56	; 0x38
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800651a:	2300      	movs	r3, #0
 800651c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10c      	bne.n	800653e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	b672      	cpsid	i
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	b662      	cpsie	i
 8006538:	623b      	str	r3, [r7, #32]
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00c      	beq.n	8006560 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	b672      	cpsid	i
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	b662      	cpsie	i
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006560:	f001 f9cc 	bl	80078fc <xTaskGetSchedulerState>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <xQueueSemaphoreTake+0x68>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <xQueueSemaphoreTake+0x6c>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <xQueueSemaphoreTake+0x6e>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10c      	bne.n	8006594 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	b672      	cpsid	i
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	b662      	cpsie	i
 800658e:	61bb      	str	r3, [r7, #24]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006594:	f002 f802 	bl	800859c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d024      	beq.n	80065ee <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065b4:	f001 fb20 	bl	8007bf8 <pvTaskIncrementMutexHeldCount>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00f      	beq.n	80065e6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	3310      	adds	r3, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ffbc 	bl	8007548 <xTaskRemoveFromEventList>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065d6:	4b55      	ldr	r3, [pc, #340]	; (800672c <xQueueSemaphoreTake+0x224>)
 80065d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065e6:	f002 f80d 	bl	8008604 <vPortExitCritical>
				return pdPASS;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e099      	b.n	8006722 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d113      	bne.n	800661c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00c      	beq.n	8006614 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006614:	f001 fff6 	bl	8008604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006618:	2300      	movs	r3, #0
 800661a:	e082      	b.n	8006722 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fff4 	bl	8007614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006630:	f001 ffe8 	bl	8008604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006634:	f000 fd42 	bl	80070bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006638:	f001 ffb0 	bl	800859c <vPortEnterCritical>
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006642:	b25b      	sxtb	r3, r3
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <xQueueSemaphoreTake+0x14a>
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d103      	bne.n	8006668 <xQueueSemaphoreTake+0x160>
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006668:	f001 ffcc 	bl	8008604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666c:	463a      	mov	r2, r7
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 ffe3 	bl	8007640 <xTaskCheckForTimeOut>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d132      	bne.n	80066e6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006682:	f000 f9fa 	bl	8006a7a <prvIsQueueEmpty>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d026      	beq.n	80066da <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006694:	f001 ff82 	bl	800859c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f94b 	bl	8007938 <xTaskPriorityInherit>
 80066a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066a4:	f001 ffae 	bl	8008604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fef5 	bl	80074a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b8:	f000 f98d 	bl	80069d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066bc:	f000 fd0c 	bl	80070d8 <xTaskResumeAll>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f47f af66 	bne.w	8006594 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80066c8:	4b18      	ldr	r3, [pc, #96]	; (800672c <xQueueSemaphoreTake+0x224>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	e75c      	b.n	8006594 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066dc:	f000 f97b 	bl	80069d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066e0:	f000 fcfa 	bl	80070d8 <xTaskResumeAll>
 80066e4:	e756      	b.n	8006594 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e8:	f000 f975 	bl	80069d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ec:	f000 fcf4 	bl	80070d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f2:	f000 f9c2 	bl	8006a7a <prvIsQueueEmpty>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f43f af4b 	beq.w	8006594 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006704:	f001 ff4a 	bl	800859c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800670a:	f000 f8bc 	bl	8006886 <prvGetDisinheritPriorityAfterTimeout>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f001 f9e8 	bl	8007aec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800671c:	f001 ff72 	bl	8008604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006722:	4618      	mov	r0, r3
 8006724:	3738      	adds	r7, #56	; 0x38
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10c      	bne.n	8006760 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	b672      	cpsid	i
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	b662      	cpsie	i
 800675a:	623b      	str	r3, [r7, #32]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <xQueueReceiveFromISR+0x3e>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <xQueueReceiveFromISR+0x42>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueReceiveFromISR+0x44>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	b672      	cpsid	i
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	b662      	cpsie	i
 800678c:	61fb      	str	r3, [r7, #28]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006792:	f001 ffeb 	bl	800876c <vPortValidateInterruptPriority>
	__asm volatile
 8006796:	f3ef 8211 	mrs	r2, BASEPRI
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	b672      	cpsid	i
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	b662      	cpsie	i
 80067ae:	61ba      	str	r2, [r7, #24]
 80067b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d02f      	beq.n	8006822 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d0:	f000 f8db 	bl	800698a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	1e5a      	subs	r2, r3, #1
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d112      	bne.n	800680c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	3310      	adds	r3, #16
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fea8 	bl	8007548 <xTaskRemoveFromEventList>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00e      	beq.n	800681c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e007      	b.n	800681c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800680c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006810:	3301      	adds	r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	b25a      	sxtb	r2, r3
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800681c:	2301      	movs	r3, #1
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	e001      	b.n	8006826 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	613b      	str	r3, [r7, #16]
	__asm volatile
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f383 8811 	msr	BASEPRI, r3
}
 8006830:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006834:	4618      	mov	r0, r3
 8006836:	3738      	adds	r7, #56	; 0x38
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10c      	bne.n	8006868 <vQueueDelete+0x2c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	b672      	cpsid	i
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	b662      	cpsie	i
 8006862:	60bb      	str	r3, [r7, #8]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f95f 	bl	8006b2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f002 f885 	bl	8008988 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e001      	b.n	80068a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068a8:	68fb      	ldr	r3, [r7, #12]
	}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d14d      	bne.n	8006978 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f891 	bl	8007a08 <xTaskPriorityDisinherit>
 80068e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
 80068ee:	e043      	b.n	8006978 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d119      	bne.n	800692a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6858      	ldr	r0, [r3, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	461a      	mov	r2, r3
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	f00e fd32 	bl	801536a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	d32b      	bcc.n	8006978 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	e026      	b.n	8006978 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68d8      	ldr	r0, [r3, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	461a      	mov	r2, r3
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	f00e fd18 	bl	801536a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	425b      	negs	r3, r3
 8006944:	441a      	add	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d207      	bcs.n	8006966 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	425b      	negs	r3, r3
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d105      	bne.n	8006978 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	3b01      	subs	r3, #1
 8006976:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006980:	697b      	ldr	r3, [r7, #20]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d018      	beq.n	80069ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d303      	bcc.n	80069be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68d9      	ldr	r1, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	461a      	mov	r2, r3
 80069c8:	6838      	ldr	r0, [r7, #0]
 80069ca:	f00e fcce 	bl	801536a <memcpy>
	}
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069de:	f001 fddd 	bl	800859c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ea:	e011      	b.n	8006a10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d012      	beq.n	8006a1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fda5 	bl	8007548 <xTaskRemoveFromEventList>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a04:	f000 fe82 	bl	800770c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dce9      	bgt.n	80069ec <prvUnlockQueue+0x16>
 8006a18:	e000      	b.n	8006a1c <prvUnlockQueue+0x46>
					break;
 8006a1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	22ff      	movs	r2, #255	; 0xff
 8006a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a24:	f001 fdee 	bl	8008604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a28:	f001 fdb8 	bl	800859c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a34:	e011      	b.n	8006a5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d012      	beq.n	8006a64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3310      	adds	r3, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fd80 	bl	8007548 <xTaskRemoveFromEventList>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a4e:	f000 fe5d 	bl	800770c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dce9      	bgt.n	8006a36 <prvUnlockQueue+0x60>
 8006a62:	e000      	b.n	8006a66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	22ff      	movs	r2, #255	; 0xff
 8006a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 fdc9 	bl	8008604 <vPortExitCritical>
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a82:	f001 fd8b 	bl	800859c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e001      	b.n	8006a98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a98:	f001 fdb4 	bl	8008604 <vPortExitCritical>

	return xReturn;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aae:	f001 fd75 	bl	800859c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d102      	bne.n	8006ac4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e001      	b.n	8006ac8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ac8:	f001 fd9c 	bl	8008604 <vPortExitCritical>

	return xReturn;
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e014      	b.n	8006b12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ae8:	4a0f      	ldr	r2, [pc, #60]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006af4:	490c      	ldr	r1, [pc, #48]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006afe:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <vQueueAddToRegistry+0x50>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4413      	add	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b0a:	e006      	b.n	8006b1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b07      	cmp	r3, #7
 8006b16:	d9e7      	bls.n	8006ae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	200059b4 	.word	0x200059b4

08006b2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e016      	b.n	8006b68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <vQueueUnregisterQueue+0x50>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	4413      	add	r3, r2
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d10b      	bne.n	8006b62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <vQueueUnregisterQueue+0x50>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b54:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <vQueueUnregisterQueue+0x50>)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	605a      	str	r2, [r3, #4]
				break;
 8006b60:	e006      	b.n	8006b70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b07      	cmp	r3, #7
 8006b6c:	d9e5      	bls.n	8006b3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	200059b4 	.word	0x200059b4

08006b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b90:	f001 fd04 	bl	800859c <vPortEnterCritical>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d103      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x2a>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	b25b      	sxtb	r3, r3
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d103      	bne.n	8006bc0 <vQueueWaitForMessageRestricted+0x40>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc0:	f001 fd20 	bl	8008604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fc89 	bl	80074ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff fefb 	bl	80069d6 <prvUnlockQueue>
	}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	b672      	cpsid	i
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	b662      	cpsie	i
 8006c10:	623b      	str	r3, [r7, #32]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10c      	bne.n	8006c36 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	b672      	cpsid	i
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	b662      	cpsie	i
 8006c30:	61fb      	str	r3, [r7, #28]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c36:	23a8      	movs	r3, #168	; 0xa8
 8006c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2ba8      	cmp	r3, #168	; 0xa8
 8006c3e:	d00c      	beq.n	8006c5a <xTaskCreateStatic+0x72>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	61bb      	str	r3, [r7, #24]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01e      	beq.n	8006ca0 <xTaskCreateStatic+0xb8>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01b      	beq.n	8006ca0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	9302      	str	r3, [sp, #8]
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f850 	bl	8006d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c9a:	f000 f8f5 	bl	8006e88 <prvAddNewTaskToReadyList>
 8006c9e:	e001      	b.n	8006ca4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ca4:	697b      	ldr	r3, [r7, #20]
	}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	; 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b08c      	sub	sp, #48	; 0x30
 8006cb2:	af04      	add	r7, sp, #16
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fd96 	bl	80087f4 <pvPortMalloc>
 8006cc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cd0:	20a8      	movs	r0, #168	; 0xa8
 8006cd2:	f001 fd8f 	bl	80087f4 <pvPortMalloc>
 8006cd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce4:	e005      	b.n	8006cf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ce6:	6978      	ldr	r0, [r7, #20]
 8006ce8:	f001 fe4e 	bl	8008988 <vPortFree>
 8006cec:	e001      	b.n	8006cf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d017      	beq.n	8006d28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	2300      	movs	r3, #0
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f80e 	bl	8006d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d1c:	69f8      	ldr	r0, [r7, #28]
 8006d1e:	f000 f8b3 	bl	8006e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e002      	b.n	8006d2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	21a5      	movs	r1, #165	; 0xa5
 8006d52:	f00e fa3e 	bl	80151d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d60:	440b      	add	r3, r1
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	b672      	cpsid	i
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	b662      	cpsie	i
 8006d8e:	617b      	str	r3, [r7, #20]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01f      	beq.n	8006dda <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	e012      	b.n	8006dc6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	7819      	ldrb	r1, [r3, #0]
 8006da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	3334      	adds	r3, #52	; 0x34
 8006db0:	460a      	mov	r2, r1
 8006db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2b0f      	cmp	r3, #15
 8006dca:	d9e9      	bls.n	8006da0 <prvInitialiseNewTask+0x68>
 8006dcc:	e000      	b.n	8006dd0 <prvInitialiseNewTask+0x98>
			{
				break;
 8006dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd8:	e003      	b.n	8006de2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b37      	cmp	r3, #55	; 0x37
 8006de6:	d901      	bls.n	8006dec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006de8:	2337      	movs	r3, #55	; 0x37
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fd4c 	bl	80058a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	3318      	adds	r3, #24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fd47 	bl	80058a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	3354      	adds	r3, #84	; 0x54
 8006e3c:	224c      	movs	r2, #76	; 0x4c
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f00e f9c6 	bl	80151d2 <memset>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <prvInitialiseNewTask+0x144>)
 8006e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	4a0c      	ldr	r2, [pc, #48]	; (8006e80 <prvInitialiseNewTask+0x148>)
 8006e50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <prvInitialiseNewTask+0x14c>)
 8006e56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	69b8      	ldr	r0, [r7, #24]
 8006e5e:	f001 fa8f 	bl	8008380 <pxPortInitialiseStack>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e74:	bf00      	nop
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	2000d558 	.word	0x2000d558
 8006e80:	2000d5c0 	.word	0x2000d5c0
 8006e84:	2000d628 	.word	0x2000d628

08006e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e90:	f001 fb84 	bl	800859c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e94:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	; (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ea6:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eac:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d110      	bne.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006eb4:	f000 fc4e 	bl	8007754 <prvInitialiseTaskLists>
 8006eb8:	e00d      	b.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006eba:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <prvAddNewTaskToReadyList+0xcc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ec2:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d802      	bhi.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ed6:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <prvAddNewTaskToReadyList+0xd4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <prvAddNewTaskToReadyList+0x74>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <prvAddNewTaskToReadyList+0xd4>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <prvAddNewTaskToReadyList+0xd8>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fe fcd1 	bl	80058ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f18:	f001 fb74 	bl	8008604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <prvAddNewTaskToReadyList+0xcc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d207      	bcs.n	8006f42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f32:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <prvAddNewTaskToReadyList+0xdc>)
 8006f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20005ec8 	.word	0x20005ec8
 8006f50:	200059f4 	.word	0x200059f4
 8006f54:	20005ed4 	.word	0x20005ed4
 8006f58:	20005ee4 	.word	0x20005ee4
 8006f5c:	20005ed0 	.word	0x20005ed0
 8006f60:	200059f8 	.word	0x200059f8
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d019      	beq.n	8006fae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <vTaskDelay+0x64>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <vTaskDelay+0x34>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	b672      	cpsid	i
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	b662      	cpsie	i
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006f9c:	f000 f88e 	bl	80070bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fe3c 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fa8:	f000 f896 	bl	80070d8 <xTaskResumeAll>
 8006fac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <vTaskDelay+0x68>)
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fc4:	bf00      	nop
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20005ef0 	.word	0x20005ef0
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	1d39      	adds	r1, r7, #4
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fc04 	bl	80057f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	9202      	str	r2, [sp, #8]
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	2300      	movs	r3, #0
 8007000:	460a      	mov	r2, r1
 8007002:	4926      	ldr	r1, [pc, #152]	; (800709c <vTaskStartScheduler+0xc8>)
 8007004:	4826      	ldr	r0, [pc, #152]	; (80070a0 <vTaskStartScheduler+0xcc>)
 8007006:	f7ff fdef 	bl	8006be8 <xTaskCreateStatic>
 800700a:	4603      	mov	r3, r0
 800700c:	4a25      	ldr	r2, [pc, #148]	; (80070a4 <vTaskStartScheduler+0xd0>)
 800700e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007010:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <vTaskStartScheduler+0xd0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007018:	2301      	movs	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e001      	b.n	8007022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d102      	bne.n	800702e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007028:	f000 fe4e 	bl	8007cc8 <xTimerCreateTimerTask>
 800702c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11d      	bne.n	8007070 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	b672      	cpsid	i
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	b662      	cpsie	i
 8007048:	613b      	str	r3, [r7, #16]
}
 800704a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <vTaskStartScheduler+0xd4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3354      	adds	r3, #84	; 0x54
 8007052:	4a16      	ldr	r2, [pc, #88]	; (80070ac <vTaskStartScheduler+0xd8>)
 8007054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <vTaskStartScheduler+0xdc>)
 8007058:	f04f 32ff 	mov.w	r2, #4294967295
 800705c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800705e:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <vTaskStartScheduler+0xe0>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007064:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <vTaskStartScheduler+0xe4>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800706a:	f001 fa19 	bl	80084a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800706e:	e010      	b.n	8007092 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d10c      	bne.n	8007092 <vTaskStartScheduler+0xbe>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	60fb      	str	r3, [r7, #12]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <vTaskStartScheduler+0xbc>
}
 8007092:	bf00      	nop
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	08016060 	.word	0x08016060
 80070a0:	08007725 	.word	0x08007725
 80070a4:	20005eec 	.word	0x20005eec
 80070a8:	200059f4 	.word	0x200059f4
 80070ac:	20000078 	.word	0x20000078
 80070b0:	20005ee8 	.word	0x20005ee8
 80070b4:	20005ed4 	.word	0x20005ed4
 80070b8:	20005ecc 	.word	0x20005ecc

080070bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070c0:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <vTaskSuspendAll+0x18>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a03      	ldr	r2, [pc, #12]	; (80070d4 <vTaskSuspendAll+0x18>)
 80070c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80070ca:	bf00      	nop
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	20005ef0 	.word	0x20005ef0

080070d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070e6:	4b43      	ldr	r3, [pc, #268]	; (80071f4 <xTaskResumeAll+0x11c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10c      	bne.n	8007108 <xTaskResumeAll+0x30>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	b672      	cpsid	i
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	b662      	cpsie	i
 8007102:	603b      	str	r3, [r7, #0]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007108:	f001 fa48 	bl	800859c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800710c:	4b39      	ldr	r3, [pc, #228]	; (80071f4 <xTaskResumeAll+0x11c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3b01      	subs	r3, #1
 8007112:	4a38      	ldr	r2, [pc, #224]	; (80071f4 <xTaskResumeAll+0x11c>)
 8007114:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007116:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <xTaskResumeAll+0x11c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d162      	bne.n	80071e4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <xTaskResumeAll+0x120>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d05e      	beq.n	80071e4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007126:	e02f      	b.n	8007188 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007128:	4b34      	ldr	r3, [pc, #208]	; (80071fc <xTaskResumeAll+0x124>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3318      	adds	r3, #24
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fc1d 	bl	8005974 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3304      	adds	r3, #4
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fc18 	bl	8005974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b2d      	ldr	r3, [pc, #180]	; (8007200 <xTaskResumeAll+0x128>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d903      	bls.n	8007158 <xTaskResumeAll+0x80>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <xTaskResumeAll+0x128>)
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a27      	ldr	r2, [pc, #156]	; (8007204 <xTaskResumeAll+0x12c>)
 8007166:	441a      	add	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fe fba3 	bl	80058ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	4b23      	ldr	r3, [pc, #140]	; (8007208 <xTaskResumeAll+0x130>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	429a      	cmp	r2, r3
 8007180:	d302      	bcc.n	8007188 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007182:	4b22      	ldr	r3, [pc, #136]	; (800720c <xTaskResumeAll+0x134>)
 8007184:	2201      	movs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007188:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <xTaskResumeAll+0x124>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1cb      	bne.n	8007128 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007196:	f000 fb81 	bl	800789c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800719a:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <xTaskResumeAll+0x138>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d010      	beq.n	80071c8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071a6:	f000 f859 	bl	800725c <xTaskIncrementTick>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80071b0:	4b16      	ldr	r3, [pc, #88]	; (800720c <xTaskResumeAll+0x134>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f1      	bne.n	80071a6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <xTaskResumeAll+0x138>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <xTaskResumeAll+0x134>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <xTaskResumeAll+0x13c>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071e4:	f001 fa0e 	bl	8008604 <vPortExitCritical>

	return xAlreadyYielded;
 80071e8:	68bb      	ldr	r3, [r7, #8]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20005ef0 	.word	0x20005ef0
 80071f8:	20005ec8 	.word	0x20005ec8
 80071fc:	20005e88 	.word	0x20005e88
 8007200:	20005ed0 	.word	0x20005ed0
 8007204:	200059f8 	.word	0x200059f8
 8007208:	200059f4 	.word	0x200059f4
 800720c:	20005edc 	.word	0x20005edc
 8007210:	20005ed8 	.word	0x20005ed8
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <xTaskGetTickCount+0x1c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007224:	687b      	ldr	r3, [r7, #4]
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20005ecc 	.word	0x20005ecc

08007238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800723e:	f001 fa95 	bl	800876c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <xTaskGetTickCountFromISR+0x20>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800724c:	683b      	ldr	r3, [r7, #0]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20005ecc 	.word	0x20005ecc

0800725c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007266:	4b50      	ldr	r3, [pc, #320]	; (80073a8 <xTaskIncrementTick+0x14c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 808b 	bne.w	8007386 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007270:	4b4e      	ldr	r3, [pc, #312]	; (80073ac <xTaskIncrementTick+0x150>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3301      	adds	r3, #1
 8007276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007278:	4a4c      	ldr	r2, [pc, #304]	; (80073ac <xTaskIncrementTick+0x150>)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d122      	bne.n	80072ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007284:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <xTaskIncrementTick+0x154>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00c      	beq.n	80072a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	603b      	str	r3, [r7, #0]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <xTaskIncrementTick+0x4a>
 80072a8:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <xTaskIncrementTick+0x154>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	4b41      	ldr	r3, [pc, #260]	; (80073b4 <xTaskIncrementTick+0x158>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a3f      	ldr	r2, [pc, #252]	; (80073b0 <xTaskIncrementTick+0x154>)
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	4a3f      	ldr	r2, [pc, #252]	; (80073b4 <xTaskIncrementTick+0x158>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	4b3e      	ldr	r3, [pc, #248]	; (80073b8 <xTaskIncrementTick+0x15c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a3d      	ldr	r2, [pc, #244]	; (80073b8 <xTaskIncrementTick+0x15c>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	f000 fae9 	bl	800789c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072ca:	4b3c      	ldr	r3, [pc, #240]	; (80073bc <xTaskIncrementTick+0x160>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d349      	bcc.n	8007368 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072d4:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <xTaskIncrementTick+0x154>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <xTaskIncrementTick+0x160>)
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295
 80072e4:	601a      	str	r2, [r3, #0]
					break;
 80072e6:	e03f      	b.n	8007368 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	4b31      	ldr	r3, [pc, #196]	; (80073b0 <xTaskIncrementTick+0x154>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d203      	bcs.n	8007308 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007300:	4a2e      	ldr	r2, [pc, #184]	; (80073bc <xTaskIncrementTick+0x160>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007306:	e02f      	b.n	8007368 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fb31 	bl	8005974 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3318      	adds	r3, #24
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fb28 	bl	8005974 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <xTaskIncrementTick+0x164>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	429a      	cmp	r2, r3
 800732e:	d903      	bls.n	8007338 <xTaskIncrementTick+0xdc>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	4a22      	ldr	r2, [pc, #136]	; (80073c0 <xTaskIncrementTick+0x164>)
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <xTaskIncrementTick+0x168>)
 8007346:	441a      	add	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f7fe fab3 	bl	80058ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <xTaskIncrementTick+0x16c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	429a      	cmp	r2, r3
 8007360:	d3b8      	bcc.n	80072d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007362:	2301      	movs	r3, #1
 8007364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007366:	e7b5      	b.n	80072d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007368:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <xTaskIncrementTick+0x16c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4915      	ldr	r1, [pc, #84]	; (80073c4 <xTaskIncrementTick+0x168>)
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d907      	bls.n	8007390 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e004      	b.n	8007390 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007386:	4b11      	ldr	r3, [pc, #68]	; (80073cc <xTaskIncrementTick+0x170>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	4a0f      	ldr	r2, [pc, #60]	; (80073cc <xTaskIncrementTick+0x170>)
 800738e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <xTaskIncrementTick+0x174>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800739c:	697b      	ldr	r3, [r7, #20]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20005ef0 	.word	0x20005ef0
 80073ac:	20005ecc 	.word	0x20005ecc
 80073b0:	20005e80 	.word	0x20005e80
 80073b4:	20005e84 	.word	0x20005e84
 80073b8:	20005ee0 	.word	0x20005ee0
 80073bc:	20005ee8 	.word	0x20005ee8
 80073c0:	20005ed0 	.word	0x20005ed0
 80073c4:	200059f8 	.word	0x200059f8
 80073c8:	200059f4 	.word	0x200059f4
 80073cc:	20005ed8 	.word	0x20005ed8
 80073d0:	20005edc 	.word	0x20005edc

080073d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073da:	4b2b      	ldr	r3, [pc, #172]	; (8007488 <vTaskSwitchContext+0xb4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073e2:	4b2a      	ldr	r3, [pc, #168]	; (800748c <vTaskSwitchContext+0xb8>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073e8:	e048      	b.n	800747c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80073ea:	4b28      	ldr	r3, [pc, #160]	; (800748c <vTaskSwitchContext+0xb8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <vTaskSwitchContext+0xbc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e012      	b.n	800741e <vTaskSwitchContext+0x4a>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10c      	bne.n	8007418 <vTaskSwitchContext+0x44>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	b672      	cpsid	i
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	b662      	cpsie	i
 8007412:	607b      	str	r3, [r7, #4]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <vTaskSwitchContext+0x42>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3b01      	subs	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	491d      	ldr	r1, [pc, #116]	; (8007494 <vTaskSwitchContext+0xc0>)
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0e2      	beq.n	80073f8 <vTaskSwitchContext+0x24>
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4a15      	ldr	r2, [pc, #84]	; (8007494 <vTaskSwitchContext+0xc0>)
 800743e:	4413      	add	r3, r2
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	3308      	adds	r3, #8
 8007454:	429a      	cmp	r2, r3
 8007456:	d104      	bne.n	8007462 <vTaskSwitchContext+0x8e>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4a0b      	ldr	r2, [pc, #44]	; (8007498 <vTaskSwitchContext+0xc4>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4a08      	ldr	r2, [pc, #32]	; (8007490 <vTaskSwitchContext+0xbc>)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007472:	4b09      	ldr	r3, [pc, #36]	; (8007498 <vTaskSwitchContext+0xc4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3354      	adds	r3, #84	; 0x54
 8007478:	4a08      	ldr	r2, [pc, #32]	; (800749c <vTaskSwitchContext+0xc8>)
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20005ef0 	.word	0x20005ef0
 800748c:	20005edc 	.word	0x20005edc
 8007490:	20005ed0 	.word	0x20005ed0
 8007494:	200059f8 	.word	0x200059f8
 8007498:	200059f4 	.word	0x200059f4
 800749c:	20000078 	.word	0x20000078

080074a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10c      	bne.n	80074ca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	b672      	cpsid	i
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	b662      	cpsie	i
 80074c4:	60fb      	str	r3, [r7, #12]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ca:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <vTaskPlaceOnEventList+0x48>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3318      	adds	r3, #24
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fe fa15 	bl	8005902 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074d8:	2101      	movs	r1, #1
 80074da:	6838      	ldr	r0, [r7, #0]
 80074dc:	f000 fba0 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	200059f4 	.word	0x200059f4

080074ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10c      	bne.n	8007518 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	b672      	cpsid	i
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	b662      	cpsie	i
 8007512:	617b      	str	r3, [r7, #20]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007518:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <vTaskPlaceOnEventListRestricted+0x58>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3318      	adds	r3, #24
 800751e:	4619      	mov	r1, r3
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7fe f9ca 	bl	80058ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
 8007530:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f000 fb73 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
	}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	200059f4 	.word	0x200059f4

08007548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10c      	bne.n	8007578 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	b672      	cpsid	i
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	b662      	cpsie	i
 8007572:	60fb      	str	r3, [r7, #12]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3318      	adds	r3, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe f9f9 	bl	8005974 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007582:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <xTaskRemoveFromEventList+0xb4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11d      	bne.n	80075c6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3304      	adds	r3, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe f9f0 	bl	8005974 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007598:	4b19      	ldr	r3, [pc, #100]	; (8007600 <xTaskRemoveFromEventList+0xb8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d903      	bls.n	80075a8 <xTaskRemoveFromEventList+0x60>
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	4a16      	ldr	r2, [pc, #88]	; (8007600 <xTaskRemoveFromEventList+0xb8>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4a13      	ldr	r2, [pc, #76]	; (8007604 <xTaskRemoveFromEventList+0xbc>)
 80075b6:	441a      	add	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f7fe f97b 	bl	80058ba <vListInsertEnd>
 80075c4:	e005      	b.n	80075d2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3318      	adds	r3, #24
 80075ca:	4619      	mov	r1, r3
 80075cc:	480e      	ldr	r0, [pc, #56]	; (8007608 <xTaskRemoveFromEventList+0xc0>)
 80075ce:	f7fe f974 	bl	80058ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d6:	4b0d      	ldr	r3, [pc, #52]	; (800760c <xTaskRemoveFromEventList+0xc4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d905      	bls.n	80075ec <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075e4:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <xTaskRemoveFromEventList+0xc8>)
 80075e6:	2201      	movs	r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e001      	b.n	80075f0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075f0:	697b      	ldr	r3, [r7, #20]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20005ef0 	.word	0x20005ef0
 8007600:	20005ed0 	.word	0x20005ed0
 8007604:	200059f8 	.word	0x200059f8
 8007608:	20005e88 	.word	0x20005e88
 800760c:	200059f4 	.word	0x200059f4
 8007610:	20005edc 	.word	0x20005edc

08007614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <vTaskInternalSetTimeOutState+0x24>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007624:	4b05      	ldr	r3, [pc, #20]	; (800763c <vTaskInternalSetTimeOutState+0x28>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	20005ee0 	.word	0x20005ee0
 800763c:	20005ecc 	.word	0x20005ecc

08007640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10c      	bne.n	800766a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	b672      	cpsid	i
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	b662      	cpsie	i
 8007664:	613b      	str	r3, [r7, #16]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10c      	bne.n	800768a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	60fb      	str	r3, [r7, #12]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800768a:	f000 ff87 	bl	800859c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <xTaskCheckForTimeOut+0xc4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d102      	bne.n	80076ae <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e023      	b.n	80076f6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b15      	ldr	r3, [pc, #84]	; (8007708 <xTaskCheckForTimeOut+0xc8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d007      	beq.n	80076ca <xTaskCheckForTimeOut+0x8a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d302      	bcc.n	80076ca <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e015      	b.n	80076f6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d20b      	bcs.n	80076ec <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff ff97 	bl	8007614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	e004      	b.n	80076f6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076f6:	f000 ff85 	bl	8008604 <vPortExitCritical>

	return xReturn;
 80076fa:	69fb      	ldr	r3, [r7, #28]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20005ecc 	.word	0x20005ecc
 8007708:	20005ee0 	.word	0x20005ee0

0800770c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <vTaskMissedYield+0x14>)
 8007712:	2201      	movs	r2, #1
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	20005edc 	.word	0x20005edc

08007724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800772c:	f000 f852 	bl	80077d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007730:	4b06      	ldr	r3, [pc, #24]	; (800774c <prvIdleTask+0x28>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d9f9      	bls.n	800772c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <prvIdleTask+0x2c>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007748:	e7f0      	b.n	800772c <prvIdleTask+0x8>
 800774a:	bf00      	nop
 800774c:	200059f8 	.word	0x200059f8
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	e00c      	b.n	800777a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4a12      	ldr	r2, [pc, #72]	; (80077b4 <prvInitialiseTaskLists+0x60>)
 800776c:	4413      	add	r3, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f876 	bl	8005860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b37      	cmp	r3, #55	; 0x37
 800777e:	d9ef      	bls.n	8007760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007780:	480d      	ldr	r0, [pc, #52]	; (80077b8 <prvInitialiseTaskLists+0x64>)
 8007782:	f7fe f86d 	bl	8005860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007786:	480d      	ldr	r0, [pc, #52]	; (80077bc <prvInitialiseTaskLists+0x68>)
 8007788:	f7fe f86a 	bl	8005860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800778c:	480c      	ldr	r0, [pc, #48]	; (80077c0 <prvInitialiseTaskLists+0x6c>)
 800778e:	f7fe f867 	bl	8005860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007792:	480c      	ldr	r0, [pc, #48]	; (80077c4 <prvInitialiseTaskLists+0x70>)
 8007794:	f7fe f864 	bl	8005860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007798:	480b      	ldr	r0, [pc, #44]	; (80077c8 <prvInitialiseTaskLists+0x74>)
 800779a:	f7fe f861 	bl	8005860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <prvInitialiseTaskLists+0x78>)
 80077a0:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <prvInitialiseTaskLists+0x64>)
 80077a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <prvInitialiseTaskLists+0x7c>)
 80077a6:	4a05      	ldr	r2, [pc, #20]	; (80077bc <prvInitialiseTaskLists+0x68>)
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	200059f8 	.word	0x200059f8
 80077b8:	20005e58 	.word	0x20005e58
 80077bc:	20005e6c 	.word	0x20005e6c
 80077c0:	20005e88 	.word	0x20005e88
 80077c4:	20005e9c 	.word	0x20005e9c
 80077c8:	20005eb4 	.word	0x20005eb4
 80077cc:	20005e80 	.word	0x20005e80
 80077d0:	20005e84 	.word	0x20005e84

080077d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077da:	e019      	b.n	8007810 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077dc:	f000 fede 	bl	800859c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <prvCheckTasksWaitingTermination+0x50>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fe f8c1 	bl	8005974 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <prvCheckTasksWaitingTermination+0x54>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4a0b      	ldr	r2, [pc, #44]	; (8007828 <prvCheckTasksWaitingTermination+0x54>)
 80077fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <prvCheckTasksWaitingTermination+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3b01      	subs	r3, #1
 8007802:	4a0a      	ldr	r2, [pc, #40]	; (800782c <prvCheckTasksWaitingTermination+0x58>)
 8007804:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007806:	f000 fefd 	bl	8008604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f810 	bl	8007830 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <prvCheckTasksWaitingTermination+0x58>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e1      	bne.n	80077dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20005e9c 	.word	0x20005e9c
 8007828:	20005ec8 	.word	0x20005ec8
 800782c:	20005eb0 	.word	0x20005eb0

08007830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3354      	adds	r3, #84	; 0x54
 800783c:	4618      	mov	r0, r3
 800783e:	f00d fce1 	bl	8015204 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007848:	2b00      	cmp	r3, #0
 800784a:	d108      	bne.n	800785e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f899 	bl	8008988 <vPortFree>
				vPortFree( pxTCB );
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f896 	bl	8008988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800785c:	e01a      	b.n	8007894 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007864:	2b01      	cmp	r3, #1
 8007866:	d103      	bne.n	8007870 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f88d 	bl	8008988 <vPortFree>
	}
 800786e:	e011      	b.n	8007894 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007876:	2b02      	cmp	r3, #2
 8007878:	d00c      	beq.n	8007894 <prvDeleteTCB+0x64>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	b672      	cpsid	i
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	b662      	cpsie	i
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <prvDeleteTCB+0x62>
	}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078b4:	e008      	b.n	80078c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078c6:	6013      	str	r3, [r2, #0]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	20005e80 	.word	0x20005e80
 80078d8:	20005ee8 	.word	0x20005ee8

080078dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078e8:	687b      	ldr	r3, [r7, #4]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	200059f4 	.word	0x200059f4

080078fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007902:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <xTaskGetSchedulerState+0x34>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800790a:	2301      	movs	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	e008      	b.n	8007922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <xTaskGetSchedulerState+0x38>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007918:	2302      	movs	r3, #2
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	e001      	b.n	8007922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007922:	687b      	ldr	r3, [r7, #4]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20005ed4 	.word	0x20005ed4
 8007934:	20005ef0 	.word	0x20005ef0

08007938 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d051      	beq.n	80079f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <xTaskPriorityInherit+0xc4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	429a      	cmp	r2, r3
 800795a:	d241      	bcs.n	80079e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	db06      	blt.n	8007972 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007964:	4b25      	ldr	r3, [pc, #148]	; (80079fc <xTaskPriorityInherit+0xc4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6959      	ldr	r1, [r3, #20]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <xTaskPriorityInherit+0xc8>)
 8007984:	4413      	add	r3, r2
 8007986:	4299      	cmp	r1, r3
 8007988:	d122      	bne.n	80079d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	3304      	adds	r3, #4
 800798e:	4618      	mov	r0, r3
 8007990:	f7fd fff0 	bl	8005974 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <xTaskPriorityInherit+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	4b18      	ldr	r3, [pc, #96]	; (8007a04 <xTaskPriorityInherit+0xcc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d903      	bls.n	80079b2 <xTaskPriorityInherit+0x7a>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <xTaskPriorityInherit+0xcc>)
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <xTaskPriorityInherit+0xc8>)
 80079c0:	441a      	add	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4619      	mov	r1, r3
 80079c8:	4610      	mov	r0, r2
 80079ca:	f7fd ff76 	bl	80058ba <vListInsertEnd>
 80079ce:	e004      	b.n	80079da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <xTaskPriorityInherit+0xc4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e008      	b.n	80079f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <xTaskPriorityInherit+0xc4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d201      	bcs.n	80079f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079f2:	68fb      	ldr	r3, [r7, #12]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200059f4 	.word	0x200059f4
 8007a00:	200059f8 	.word	0x200059f8
 8007a04:	20005ed0 	.word	0x20005ed0

08007a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d05a      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a1e:	4b30      	ldr	r3, [pc, #192]	; (8007ae0 <xTaskPriorityDisinherit+0xd8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d00c      	beq.n	8007a42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10c      	bne.n	8007a64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	b672      	cpsid	i
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	b662      	cpsie	i
 8007a5e:	60bb      	str	r3, [r7, #8]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	1e5a      	subs	r2, r3, #1
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d02c      	beq.n	8007ad4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d128      	bne.n	8007ad4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd ff74 	bl	8005974 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <xTaskPriorityDisinherit+0xdc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d903      	bls.n	8007ab4 <xTaskPriorityDisinherit+0xac>
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	; (8007ae4 <xTaskPriorityDisinherit+0xdc>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <xTaskPriorityDisinherit+0xe0>)
 8007ac2:	441a      	add	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fd fef5 	bl	80058ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad4:	697b      	ldr	r3, [r7, #20]
	}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200059f4 	.word	0x200059f4
 8007ae4:	20005ed0 	.word	0x20005ed0
 8007ae8:	200059f8 	.word	0x200059f8

08007aec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d06e      	beq.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10c      	bne.n	8007b26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d902      	bls.n	8007b36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	e002      	b.n	8007b3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d04d      	beq.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d148      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b50:	4b26      	ldr	r3, [pc, #152]	; (8007bec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d10c      	bne.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	b672      	cpsid	i
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	b662      	cpsie	i
 8007b6e:	60bb      	str	r3, [r7, #8]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db04      	blt.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6959      	ldr	r1, [r3, #20]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	d11c      	bne.n	8007be2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd fee1 	bl	8005974 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fd fe6c 	bl	80058ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be2:	bf00      	nop
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200059f4 	.word	0x200059f4
 8007bf0:	200059f8 	.word	0x200059f8
 8007bf4:	20005ed0 	.word	0x20005ed0

08007bf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bfc:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007c10:	681b      	ldr	r3, [r3, #0]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	200059f4 	.word	0x200059f4

08007c20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c2a:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c30:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fe9c 	bl	8005974 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d10a      	bne.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c54:	f7fd fe31 	bl	80058ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c58:	e026      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d209      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7fd fe3f 	bl	8005902 <vListInsert>
}
 8007c84:	e010      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c86:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7fd fe35 	bl	8005902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d202      	bcs.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca2:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6013      	str	r3, [r2, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20005ecc 	.word	0x20005ecc
 8007cb4:	200059f4 	.word	0x200059f4
 8007cb8:	20005eb4 	.word	0x20005eb4
 8007cbc:	20005e84 	.word	0x20005e84
 8007cc0:	20005e80 	.word	0x20005e80
 8007cc4:	20005ee8 	.word	0x20005ee8

08007cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cd2:	f000 fb15 	bl	8008300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTimerCreateTimerTask+0x84>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d021      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	f107 0108 	add.w	r1, r7, #8
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fd9b 	bl	800582c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2302      	movs	r3, #2
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	460a      	mov	r2, r1
 8007d08:	4911      	ldr	r1, [pc, #68]	; (8007d50 <xTimerCreateTimerTask+0x88>)
 8007d0a:	4812      	ldr	r0, [pc, #72]	; (8007d54 <xTimerCreateTimerTask+0x8c>)
 8007d0c:	f7fe ff6c 	bl	8006be8 <xTaskCreateStatic>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d16:	4b10      	ldr	r3, [pc, #64]	; (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10c      	bne.n	8007d42 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	b672      	cpsid	i
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	b662      	cpsie	i
 8007d3c:	613b      	str	r3, [r7, #16]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20005f24 	.word	0x20005f24
 8007d50:	08016068 	.word	0x08016068
 8007d54:	08007e99 	.word	0x08007e99
 8007d58:	20005f28 	.word	0x20005f28

08007d5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	; 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10c      	bne.n	8007d8e <xTimerGenericCommand+0x32>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	b672      	cpsid	i
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	b662      	cpsie	i
 8007d88:	623b      	str	r3, [r7, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <xTimerGenericCommand+0x9c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02a      	beq.n	8007dec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	dc18      	bgt.n	8007dda <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007da8:	f7ff fda8 	bl	80078fc <xTaskGetSchedulerState>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d109      	bne.n	8007dc6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007db2:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <xTimerGenericCommand+0x9c>)
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	f107 0110 	add.w	r1, r7, #16
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dbe:	f7fe f881 	bl	8005ec4 <xQueueGenericSend>
 8007dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8007dc4:	e012      	b.n	8007dec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <xTimerGenericCommand+0x9c>)
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f107 0110 	add.w	r1, r7, #16
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f7fe f877 	bl	8005ec4 <xQueueGenericSend>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8007dd8:	e008      	b.n	8007dec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dda:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <xTimerGenericCommand+0x9c>)
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f107 0110 	add.w	r1, r7, #16
 8007de2:	2300      	movs	r3, #0
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	f7fe f973 	bl	80060d0 <xQueueGenericSendFromISR>
 8007dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3728      	adds	r7, #40	; 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20005f24 	.word	0x20005f24

08007dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <prvProcessExpiredTimer+0x98>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fd fdad 	bl	8005974 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d024      	beq.n	8007e72 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	18d1      	adds	r1, r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	6978      	ldr	r0, [r7, #20]
 8007e36:	f000 f8d3 	bl	8007fe0 <prvInsertTimerInActiveList>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d021      	beq.n	8007e84 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e40:	2300      	movs	r3, #0
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6978      	ldr	r0, [r7, #20]
 8007e4c:	f7ff ff86 	bl	8007d5c <xTimerGenericCommand>
 8007e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d115      	bne.n	8007e84 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	b672      	cpsid	i
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	b662      	cpsie	i
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	6978      	ldr	r0, [r7, #20]
 8007e8a:	4798      	blx	r3
}
 8007e8c:	bf00      	nop
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20005f1c 	.word	0x20005f1c

08007e98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 f857 	bl	8007f58 <prvGetNextExpireTime>
 8007eaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f803 	bl	8007ebc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007eb6:	f000 f8d5 	bl	8008064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eba:	e7f1      	b.n	8007ea0 <prvTimerTask+0x8>

08007ebc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ec6:	f7ff f8f9 	bl	80070bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f866 	bl	8007fa0 <prvSampleTimeNow>
 8007ed4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d130      	bne.n	8007f3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d806      	bhi.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eea:	f7ff f8f5 	bl	80070d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ff83 	bl	8007dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ef6:	e024      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007efe:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <prvProcessTimerOrBlockTask+0x90>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <prvProcessTimerOrBlockTask+0x50>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <prvProcessTimerOrBlockTask+0x52>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <prvProcessTimerOrBlockTask+0x94>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f7fe fe2f 	bl	8006b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f22:	f7ff f8d9 	bl	80070d8 <xTaskResumeAll>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvProcessTimerOrBlockTask+0x98>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
}
 8007f3c:	e001      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f3e:	f7ff f8cb 	bl	80070d8 <xTaskResumeAll>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20005f20 	.word	0x20005f20
 8007f50:	20005f24 	.word	0x20005f24
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f60:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <prvGetNextExpireTime+0x44>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <prvGetNextExpireTime+0x16>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e000      	b.n	8007f70 <prvGetNextExpireTime+0x18>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <prvGetNextExpireTime+0x44>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e001      	b.n	8007f8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20005f1c 	.word	0x20005f1c

08007fa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fa8:	f7ff f936 	bl	8007218 <xTaskGetTickCount>
 8007fac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <prvSampleTimeNow+0x3c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d205      	bcs.n	8007fc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fb8:	f000 f93c 	bl	8008234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fca:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvSampleTimeNow+0x3c>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20005f2c 	.word	0x20005f2c

08007fe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d812      	bhi.n	800802c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e01b      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800801a:	4b10      	ldr	r3, [pc, #64]	; (800805c <prvInsertTimerInActiveList+0x7c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f7fd fc6c 	bl	8005902 <vListInsert>
 800802a:	e012      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d206      	bcs.n	8008042 <prvInsertTimerInActiveList+0x62>
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e007      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <prvInsertTimerInActiveList+0x80>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fd fc58 	bl	8005902 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20005f20 	.word	0x20005f20
 8008060:	20005f1c 	.word	0x20005f1c

08008064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	e0d0      	b.n	800820e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da1a      	bge.n	80080a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	3304      	adds	r3, #4
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10c      	bne.n	8008098 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	61fb      	str	r3, [r7, #28]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809e:	6850      	ldr	r0, [r2, #4]
 80080a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a2:	6892      	ldr	r2, [r2, #8]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f2c0 80af 	blt.w	800820e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	3304      	adds	r3, #4
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fd fc57 	bl	8005974 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080c6:	463b      	mov	r3, r7
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff ff69 	bl	8007fa0 <prvSampleTimeNow>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	f200 809a 	bhi.w	800820c <prvProcessReceivedCommands+0x1a8>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <prvProcessReceivedCommands+0x7c>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008109 	.word	0x08008109
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008109 	.word	0x08008109
 80080ec:	08008181 	.word	0x08008181
 80080f0:	08008195 	.word	0x08008195
 80080f4:	080081e3 	.word	0x080081e3
 80080f8:	08008109 	.word	0x08008109
 80080fc:	08008109 	.word	0x08008109
 8008100:	08008181 	.word	0x08008181
 8008104:	08008195 	.word	0x08008195
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	b2da      	uxtb	r2, r3
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	18d1      	adds	r1, r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008128:	f7ff ff5a 	bl	8007fe0 <prvInsertTimerInActiveList>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d06d      	beq.n	800820e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008138:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d062      	beq.n	800820e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	441a      	add	r2, r3
 8008150:	2300      	movs	r3, #0
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	2100      	movs	r1, #0
 8008158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815a:	f7ff fdff 	bl	8007d5c <xTimerGenericCommand>
 800815e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d153      	bne.n	800820e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	b672      	cpsid	i
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	b662      	cpsie	i
 800817a:	61bb      	str	r3, [r7, #24]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008192:	e03c      	b.n	800820e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10c      	bne.n	80081ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	b672      	cpsid	i
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	b662      	cpsie	i
 80081c8:	617b      	str	r3, [r7, #20]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	18d1      	adds	r1, r2, r3
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081dc:	f7ff ff00 	bl	8007fe0 <prvInsertTimerInActiveList>
					break;
 80081e0:	e015      	b.n	800820e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d103      	bne.n	80081f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80081f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f2:	f000 fbc9 	bl	8008988 <vPortFree>
 80081f6:	e00a      	b.n	800820e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800820a:	e000      	b.n	800820e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800820c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <prvProcessReceivedCommands+0x1cc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	1d39      	adds	r1, r7, #4
 8008214:	2200      	movs	r2, #0
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe f890 	bl	800633c <xQueueReceive>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	f47f af24 	bne.w	800806c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20005f24 	.word	0x20005f24

08008234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800823a:	e04a      	b.n	80082d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800823c:	4b2e      	ldr	r3, [pc, #184]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008246:	4b2c      	ldr	r3, [pc, #176]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fd fb8d 	bl	8005974 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d030      	beq.n	80082d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	d90e      	bls.n	80082a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828e:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fd fb32 	bl	8005902 <vListInsert>
 800829e:	e018      	b.n	80082d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082a0:	2300      	movs	r3, #0
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7ff fd56 	bl	8007d5c <xTimerGenericCommand>
 80082b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10c      	bne.n	80082d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	b672      	cpsid	i
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	b662      	cpsie	i
 80082cc:	603b      	str	r3, [r7, #0]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1af      	bne.n	800823c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <prvSwitchTimerLists+0xc8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a04      	ldr	r2, [pc, #16]	; (80082f8 <prvSwitchTimerLists+0xc4>)
 80082e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082ea:	4a04      	ldr	r2, [pc, #16]	; (80082fc <prvSwitchTimerLists+0xc8>)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	6013      	str	r3, [r2, #0]
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20005f1c 	.word	0x20005f1c
 80082fc:	20005f20 	.word	0x20005f20

08008300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008306:	f000 f949 	bl	800859c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <prvCheckForValidListAndQueue+0x60>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d120      	bne.n	8008354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008312:	4814      	ldr	r0, [pc, #80]	; (8008364 <prvCheckForValidListAndQueue+0x64>)
 8008314:	f7fd faa4 	bl	8005860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008318:	4813      	ldr	r0, [pc, #76]	; (8008368 <prvCheckForValidListAndQueue+0x68>)
 800831a:	f7fd faa1 	bl	8005860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800831e:	4b13      	ldr	r3, [pc, #76]	; (800836c <prvCheckForValidListAndQueue+0x6c>)
 8008320:	4a10      	ldr	r2, [pc, #64]	; (8008364 <prvCheckForValidListAndQueue+0x64>)
 8008322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <prvCheckForValidListAndQueue+0x70>)
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <prvCheckForValidListAndQueue+0x68>)
 8008328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800832a:	2300      	movs	r3, #0
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4b11      	ldr	r3, [pc, #68]	; (8008374 <prvCheckForValidListAndQueue+0x74>)
 8008330:	4a11      	ldr	r2, [pc, #68]	; (8008378 <prvCheckForValidListAndQueue+0x78>)
 8008332:	2110      	movs	r1, #16
 8008334:	200a      	movs	r0, #10
 8008336:	f7fd fbb1 	bl	8005a9c <xQueueGenericCreateStatic>
 800833a:	4603      	mov	r3, r0
 800833c:	4a08      	ldr	r2, [pc, #32]	; (8008360 <prvCheckForValidListAndQueue+0x60>)
 800833e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <prvCheckForValidListAndQueue+0x60>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <prvCheckForValidListAndQueue+0x60>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	490b      	ldr	r1, [pc, #44]	; (800837c <prvCheckForValidListAndQueue+0x7c>)
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fbc2 	bl	8006ad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008354:	f000 f956 	bl	8008604 <vPortExitCritical>
}
 8008358:	bf00      	nop
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20005f24 	.word	0x20005f24
 8008364:	20005ef4 	.word	0x20005ef4
 8008368:	20005f08 	.word	0x20005f08
 800836c:	20005f1c 	.word	0x20005f1c
 8008370:	20005f20 	.word	0x20005f20
 8008374:	20005fd0 	.word	0x20005fd0
 8008378:	20005f30 	.word	0x20005f30
 800837c:	08016070 	.word	0x08016070

08008380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b04      	subs	r3, #4
 8008390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083b0:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <pxPortInitialiseStack+0x64>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b14      	subs	r3, #20
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f06f 0202 	mvn.w	r2, #2
 80083ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3b20      	subs	r3, #32
 80083d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	080083e9 	.word	0x080083e9

080083e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <prvTaskExitError+0x5c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d00c      	beq.n	8008416 <prvTaskExitError+0x2e>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <prvTaskExitError+0x2c>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	b672      	cpsid	i
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	b662      	cpsie	i
 800842a:	60bb      	str	r3, [r7, #8]
}
 800842c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800842e:	bf00      	nop
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0fc      	beq.n	8008430 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	2000000c 	.word	0x2000000c
	...

08008450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	200059f4 	.word	0x200059f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <prvPortStartFirstTask+0x24>)
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f380 8808 	msr	MSP, r0
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8814 	msr	CONTROL, r0
 800848a:	b662      	cpsie	i
 800848c:	b661      	cpsie	f
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	df00      	svc	0
 8008498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800849a:	bf00      	nop
 800849c:	e000ed08 	.word	0xe000ed08

080084a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <xPortStartScheduler+0xe4>)
 80084a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <xPortStartScheduler+0xe8>)
 80084cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ce:	4b2f      	ldr	r3, [pc, #188]	; (800858c <xPortStartScheduler+0xec>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084d4:	e009      	b.n	80084ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084d6:	4b2d      	ldr	r3, [pc, #180]	; (800858c <xPortStartScheduler+0xec>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a2b      	ldr	r2, [pc, #172]	; (800858c <xPortStartScheduler+0xec>)
 80084de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b80      	cmp	r3, #128	; 0x80
 80084f4:	d0ef      	beq.n	80084d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084f6:	4b25      	ldr	r3, [pc, #148]	; (800858c <xPortStartScheduler+0xec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1c3 0307 	rsb	r3, r3, #7
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d00c      	beq.n	800851c <xPortStartScheduler+0x7c>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	60bb      	str	r3, [r7, #8]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <xPortStartScheduler+0xec>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <xPortStartScheduler+0xec>)
 8008524:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008526:	4b19      	ldr	r3, [pc, #100]	; (800858c <xPortStartScheduler+0xec>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800852e:	4a17      	ldr	r2, [pc, #92]	; (800858c <xPortStartScheduler+0xec>)
 8008530:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <xPortStartScheduler+0xf0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <xPortStartScheduler+0xf0>)
 8008540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008544:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <xPortStartScheduler+0xf0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a11      	ldr	r2, [pc, #68]	; (8008590 <xPortStartScheduler+0xf0>)
 800854c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008550:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008552:	f000 f8dd 	bl	8008710 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <xPortStartScheduler+0xf4>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800855c:	f000 f8fc 	bl	8008758 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <xPortStartScheduler+0xf8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <xPortStartScheduler+0xf8>)
 8008566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800856a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800856c:	f7ff ff84 	bl	8008478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008570:	f7fe ff30 	bl	80073d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008574:	f7ff ff38 	bl	80083e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000e400 	.word	0xe000e400
 8008588:	20006020 	.word	0x20006020
 800858c:	20006024 	.word	0x20006024
 8008590:	e000ed20 	.word	0xe000ed20
 8008594:	2000000c 	.word	0x2000000c
 8008598:	e000ef34 	.word	0xe000ef34

0800859c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ba:	4b10      	ldr	r3, [pc, #64]	; (80085fc <vPortEnterCritical+0x60>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <vPortEnterCritical+0x60>)
 80085c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <vPortEnterCritical+0x60>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d111      	bne.n	80085f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <vPortEnterCritical+0x64>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00c      	beq.n	80085f0 <vPortEnterCritical+0x54>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	603b      	str	r3, [r7, #0]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <vPortEnterCritical+0x52>
	}
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	2000000c 	.word	0x2000000c
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <vPortExitCritical+0x54>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10c      	bne.n	800862c <vPortExitCritical+0x28>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	607b      	str	r3, [r7, #4]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <vPortExitCritical+0x54>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3b01      	subs	r3, #1
 8008632:	4a09      	ldr	r2, [pc, #36]	; (8008658 <vPortExitCritical+0x54>)
 8008634:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <vPortExitCritical+0x54>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <vPortExitCritical+0x46>
 800863e:	2300      	movs	r3, #0
 8008640:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f383 8811 	msr	BASEPRI, r3
}
 8008648:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000000c 	.word	0x2000000c
 800865c:	00000000 	.word	0x00000000

08008660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008660:	f3ef 8009 	mrs	r0, PSP
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <pxCurrentTCBConst>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f01e 0f10 	tst.w	lr, #16
 8008670:	bf08      	it	eq
 8008672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008684:	b672      	cpsid	i
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	b662      	cpsie	i
 8008694:	f7fe fe9e 	bl	80073d4 <vTaskSwitchContext>
 8008698:	f04f 0000 	mov.w	r0, #0
 800869c:	f380 8811 	msr	BASEPRI, r0
 80086a0:	bc09      	pop	{r0, r3}
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	f01e 0f10 	tst.w	lr, #16
 80086ae:	bf08      	it	eq
 80086b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086b4:	f380 8809 	msr	PSP, r0
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <pxCurrentTCBConst>:
 80086c0:	200059f4 	.word	0x200059f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086e6:	f7fe fdb9 	bl	800725c <xTaskIncrementTick>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <xPortSysTickHandler+0x44>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f383 8811 	msr	BASEPRI, r3
}
 8008702:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800871a:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <vPortSetupTimerInterrupt+0x38>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <vPortSetupTimerInterrupt+0x3c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0a      	ldr	r2, [pc, #40]	; (8008750 <vPortSetupTimerInterrupt+0x40>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	4a09      	ldr	r2, [pc, #36]	; (8008754 <vPortSetupTimerInterrupt+0x44>)
 800872e:	3b01      	subs	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
}
 8008738:	bf00      	nop
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	e000e010 	.word	0xe000e010
 8008748:	e000e018 	.word	0xe000e018
 800874c:	20000000 	.word	0x20000000
 8008750:	10624dd3 	.word	0x10624dd3
 8008754:	e000e014 	.word	0xe000e014

08008758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008758:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008768 <vPortEnableVFP+0x10>
 800875c:	6801      	ldr	r1, [r0, #0]
 800875e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008762:	6001      	str	r1, [r0, #0]
 8008764:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008766:	bf00      	nop
 8008768:	e000ed88 	.word	0xe000ed88

0800876c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008772:	f3ef 8305 	mrs	r3, IPSR
 8008776:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d916      	bls.n	80087ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800877e:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <vPortValidateInterruptPriority+0x78>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008788:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <vPortValidateInterruptPriority+0x7c>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	7afa      	ldrb	r2, [r7, #11]
 800878e:	429a      	cmp	r2, r3
 8008790:	d20c      	bcs.n	80087ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	607b      	str	r3, [r7, #4]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <vPortValidateInterruptPriority+0x80>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <vPortValidateInterruptPriority+0x84>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d90c      	bls.n	80087d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	b672      	cpsid	i
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	b662      	cpsie	i
 80087d0:	603b      	str	r3, [r7, #0]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <vPortValidateInterruptPriority+0x68>
	}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	e000e3f0 	.word	0xe000e3f0
 80087e8:	20006020 	.word	0x20006020
 80087ec:	e000ed0c 	.word	0xe000ed0c
 80087f0:	20006024 	.word	0x20006024

080087f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008800:	f7fe fc5c 	bl	80070bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008804:	4b5b      	ldr	r3, [pc, #364]	; (8008974 <pvPortMalloc+0x180>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800880c:	f000 f91a 	bl	8008a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008810:	4b59      	ldr	r3, [pc, #356]	; (8008978 <pvPortMalloc+0x184>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4013      	ands	r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 8092 	bne.w	8008942 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01f      	beq.n	8008864 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008824:	2208      	movs	r2, #8
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d016      	beq.n	8008864 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f023 0307 	bic.w	r3, r3, #7
 800883c:	3308      	adds	r3, #8
 800883e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00c      	beq.n	8008864 <pvPortMalloc+0x70>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	617b      	str	r3, [r7, #20]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d06b      	beq.n	8008942 <pvPortMalloc+0x14e>
 800886a:	4b44      	ldr	r3, [pc, #272]	; (800897c <pvPortMalloc+0x188>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d866      	bhi.n	8008942 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008874:	4b42      	ldr	r3, [pc, #264]	; (8008980 <pvPortMalloc+0x18c>)
 8008876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008878:	4b41      	ldr	r3, [pc, #260]	; (8008980 <pvPortMalloc+0x18c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800887e:	e004      	b.n	800888a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d903      	bls.n	800889c <pvPortMalloc+0xa8>
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1f1      	bne.n	8008880 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800889c:	4b35      	ldr	r3, [pc, #212]	; (8008974 <pvPortMalloc+0x180>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d04d      	beq.n	8008942 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2208      	movs	r2, #8
 80088ac:	4413      	add	r3, r2
 80088ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	2308      	movs	r3, #8
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d921      	bls.n	800890c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4413      	add	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <pvPortMalloc+0x100>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	b672      	cpsid	i
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	b662      	cpsie	i
 80088ee:	613b      	str	r3, [r7, #16]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	1ad2      	subs	r2, r2, r3
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008906:	69b8      	ldr	r0, [r7, #24]
 8008908:	f000 f8fe 	bl	8008b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800890c:	4b1b      	ldr	r3, [pc, #108]	; (800897c <pvPortMalloc+0x188>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	4a19      	ldr	r2, [pc, #100]	; (800897c <pvPortMalloc+0x188>)
 8008918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800891a:	4b18      	ldr	r3, [pc, #96]	; (800897c <pvPortMalloc+0x188>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4b19      	ldr	r3, [pc, #100]	; (8008984 <pvPortMalloc+0x190>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d203      	bcs.n	800892e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008926:	4b15      	ldr	r3, [pc, #84]	; (800897c <pvPortMalloc+0x188>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a16      	ldr	r2, [pc, #88]	; (8008984 <pvPortMalloc+0x190>)
 800892c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	4b11      	ldr	r3, [pc, #68]	; (8008978 <pvPortMalloc+0x184>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	431a      	orrs	r2, r3
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008942:	f7fe fbc9 	bl	80070d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00c      	beq.n	800896a <pvPortMalloc+0x176>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	b672      	cpsid	i
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	b662      	cpsie	i
 8008964:	60fb      	str	r3, [r7, #12]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <pvPortMalloc+0x174>
	return pvReturn;
 800896a:	69fb      	ldr	r3, [r7, #28]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3728      	adds	r7, #40	; 0x28
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20009c30 	.word	0x20009c30
 8008978:	20009c3c 	.word	0x20009c3c
 800897c:	20009c34 	.word	0x20009c34
 8008980:	20009c28 	.word	0x20009c28
 8008984:	20009c38 	.word	0x20009c38

08008988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d04c      	beq.n	8008a34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800899a:	2308      	movs	r3, #8
 800899c:	425b      	negs	r3, r3
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4413      	add	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	4b23      	ldr	r3, [pc, #140]	; (8008a3c <vPortFree+0xb4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4013      	ands	r3, r2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10c      	bne.n	80089d0 <vPortFree+0x48>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	b672      	cpsid	i
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	b662      	cpsie	i
 80089ca:	60fb      	str	r3, [r7, #12]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00c      	beq.n	80089f2 <vPortFree+0x6a>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	b672      	cpsid	i
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	b662      	cpsie	i
 80089ec:	60bb      	str	r3, [r7, #8]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <vPortFree+0xb4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d019      	beq.n	8008a34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d115      	bne.n	8008a34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <vPortFree+0xb4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	401a      	ands	r2, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a18:	f7fe fb50 	bl	80070bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <vPortFree+0xb8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	4a06      	ldr	r2, [pc, #24]	; (8008a40 <vPortFree+0xb8>)
 8008a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a2a:	6938      	ldr	r0, [r7, #16]
 8008a2c:	f000 f86c 	bl	8008b08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a30:	f7fe fb52 	bl	80070d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a34:	bf00      	nop
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20009c3c 	.word	0x20009c3c
 8008a40:	20009c34 	.word	0x20009c34

08008a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <prvHeapInit+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3307      	adds	r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <prvHeapInit+0xac>)
 8008a74:	4413      	add	r3, r2
 8008a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a7c:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <prvHeapInit+0xb0>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a82:	4b1c      	ldr	r3, [pc, #112]	; (8008af4 <prvHeapInit+0xb0>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a90:	2208      	movs	r2, #8
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0307 	bic.w	r3, r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <prvHeapInit+0xb4>)
 8008aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <prvHeapInit+0xb4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aae:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <prvHeapInit+0xb4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvHeapInit+0xb4>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <prvHeapInit+0xb8>)
 8008ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a09      	ldr	r2, [pc, #36]	; (8008b00 <prvHeapInit+0xbc>)
 8008ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <prvHeapInit+0xc0>)
 8008ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20006028 	.word	0x20006028
 8008af4:	20009c28 	.word	0x20009c28
 8008af8:	20009c30 	.word	0x20009c30
 8008afc:	20009c38 	.word	0x20009c38
 8008b00:	20009c34 	.word	0x20009c34
 8008b04:	20009c3c 	.word	0x20009c3c

08008b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <prvInsertBlockIntoFreeList+0xac>)
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e002      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x14>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d8f7      	bhi.n	8008b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d108      	bne.n	8008b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	441a      	add	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d118      	bne.n	8008b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d00d      	beq.n	8008b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	441a      	add	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e008      	b.n	8008b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e003      	b.n	8008b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d002      	beq.n	8008ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20009c28 	.word	0x20009c28
 8008bb8:	20009c30 	.word	0x20009c30

08008bbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008bc6:	f007 fa79 	bl	80100bc <sys_timeouts_sleeptime>
 8008bca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d10b      	bne.n	8008bec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008bd4:	4813      	ldr	r0, [pc, #76]	; (8008c24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008bd6:	f00c f94c 	bl	8014e72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f00c f8d4 	bl	8014d8c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008be4:	480f      	ldr	r0, [pc, #60]	; (8008c24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008be6:	f00c f935 	bl	8014e54 <sys_mutex_lock>
    return;
 8008bea:	e018      	b.n	8008c1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008bf2:	f007 fa29 	bl	8010048 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008bf6:	e7e6      	b.n	8008bc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008bf8:	480a      	ldr	r0, [pc, #40]	; (8008c24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008bfa:	f00c f93a 	bl	8014e72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f00c f8c2 	bl	8014d8c <sys_arch_mbox_fetch>
 8008c08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008c0a:	4806      	ldr	r0, [pc, #24]	; (8008c24 <tcpip_timeouts_mbox_fetch+0x68>)
 8008c0c:	f00c f922 	bl	8014e54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d102      	bne.n	8008c1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008c18:	f007 fa16 	bl	8010048 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008c1c:	e7d3      	b.n	8008bc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20009c4c 	.word	0x20009c4c

08008c28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008c30:	4810      	ldr	r0, [pc, #64]	; (8008c74 <tcpip_thread+0x4c>)
 8008c32:	f00c f90f 	bl	8014e54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <tcpip_thread+0x50>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <tcpip_thread+0x50>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <tcpip_thread+0x54>)
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	4610      	mov	r0, r2
 8008c48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	4619      	mov	r1, r3
 8008c50:	480b      	ldr	r0, [pc, #44]	; (8008c80 <tcpip_thread+0x58>)
 8008c52:	f7ff ffb3 	bl	8008bbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <tcpip_thread+0x5c>)
 8008c5e:	2291      	movs	r2, #145	; 0x91
 8008c60:	4909      	ldr	r1, [pc, #36]	; (8008c88 <tcpip_thread+0x60>)
 8008c62:	480a      	ldr	r0, [pc, #40]	; (8008c8c <tcpip_thread+0x64>)
 8008c64:	f00c fa50 	bl	8015108 <iprintf>
      continue;
 8008c68:	e003      	b.n	8008c72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f80f 	bl	8008c90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008c72:	e7ea      	b.n	8008c4a <tcpip_thread+0x22>
 8008c74:	20009c4c 	.word	0x20009c4c
 8008c78:	20009c40 	.word	0x20009c40
 8008c7c:	20009c44 	.word	0x20009c44
 8008c80:	20009c48 	.word	0x20009c48
 8008c84:	08016078 	.word	0x08016078
 8008c88:	080160a8 	.word	0x080160a8
 8008c8c:	080160c8 	.word	0x080160c8

08008c90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d026      	beq.n	8008cee <tcpip_thread_handle_msg+0x5e>
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	dc2b      	bgt.n	8008cfc <tcpip_thread_handle_msg+0x6c>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <tcpip_thread_handle_msg+0x1e>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d015      	beq.n	8008cd8 <tcpip_thread_handle_msg+0x48>
 8008cac:	e026      	b.n	8008cfc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6850      	ldr	r0, [r2, #4]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6892      	ldr	r2, [r2, #8]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4798      	blx	r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fcaf 	bl	800a62c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	2009      	movs	r0, #9
 8008cd2:	f000 fe63 	bl	800999c <memp_free>
      break;
 8008cd6:	e018      	b.n	8008d0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6892      	ldr	r2, [r2, #8]
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	2008      	movs	r0, #8
 8008ce8:	f000 fe58 	bl	800999c <memp_free>
      break;
 8008cec:	e00d      	b.n	8008d0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6892      	ldr	r2, [r2, #8]
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4798      	blx	r3
      break;
 8008cfa:	e006      	b.n	8008d0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <tcpip_thread_handle_msg+0x84>)
 8008cfe:	22cf      	movs	r2, #207	; 0xcf
 8008d00:	4905      	ldr	r1, [pc, #20]	; (8008d18 <tcpip_thread_handle_msg+0x88>)
 8008d02:	4806      	ldr	r0, [pc, #24]	; (8008d1c <tcpip_thread_handle_msg+0x8c>)
 8008d04:	f00c fa00 	bl	8015108 <iprintf>
      break;
 8008d08:	bf00      	nop
  }
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	08016078 	.word	0x08016078
 8008d18:	080160a8 	.word	0x080160a8
 8008d1c:	080160c8 	.word	0x080160c8

08008d20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008d2c:	481a      	ldr	r0, [pc, #104]	; (8008d98 <tcpip_inpkt+0x78>)
 8008d2e:	f00c f85e 	bl	8014dee <sys_mbox_valid>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <tcpip_inpkt+0x24>
 8008d38:	4b18      	ldr	r3, [pc, #96]	; (8008d9c <tcpip_inpkt+0x7c>)
 8008d3a:	22fc      	movs	r2, #252	; 0xfc
 8008d3c:	4918      	ldr	r1, [pc, #96]	; (8008da0 <tcpip_inpkt+0x80>)
 8008d3e:	4819      	ldr	r0, [pc, #100]	; (8008da4 <tcpip_inpkt+0x84>)
 8008d40:	f00c f9e2 	bl	8015108 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008d44:	2009      	movs	r0, #9
 8008d46:	f000 fdb3 	bl	80098b0 <memp_malloc>
 8008d4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	e01a      	b.n	8008d8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008d70:	6979      	ldr	r1, [r7, #20]
 8008d72:	4809      	ldr	r0, [pc, #36]	; (8008d98 <tcpip_inpkt+0x78>)
 8008d74:	f00b fff0 	bl	8014d58 <sys_mbox_trypost>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d006      	beq.n	8008d8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008d7e:	6979      	ldr	r1, [r7, #20]
 8008d80:	2009      	movs	r0, #9
 8008d82:	f000 fe0b 	bl	800999c <memp_free>
    return ERR_MEM;
 8008d86:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8a:	e000      	b.n	8008d8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008d8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20009c48 	.word	0x20009c48
 8008d9c:	08016078 	.word	0x08016078
 8008da0:	080160f0 	.word	0x080160f0
 8008da4:	080160c8 	.word	0x080160c8

08008da8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008db8:	f003 0318 	and.w	r3, r3, #24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008dc0:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <tcpip_input+0x3c>)
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ffab 	bl	8008d20 <tcpip_inpkt>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	e005      	b.n	8008dda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008dce:	4a06      	ldr	r2, [pc, #24]	; (8008de8 <tcpip_input+0x40>)
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ffa4 	bl	8008d20 <tcpip_inpkt>
 8008dd8:	4603      	mov	r3, r0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	08014b79 	.word	0x08014b79
 8008de8:	08013a45 	.word	0x08013a45

08008dec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008df6:	4819      	ldr	r0, [pc, #100]	; (8008e5c <tcpip_try_callback+0x70>)
 8008df8:	f00b fff9 	bl	8014dee <sys_mbox_valid>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <tcpip_try_callback+0x24>
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <tcpip_try_callback+0x74>)
 8008e04:	f240 125d 	movw	r2, #349	; 0x15d
 8008e08:	4916      	ldr	r1, [pc, #88]	; (8008e64 <tcpip_try_callback+0x78>)
 8008e0a:	4817      	ldr	r0, [pc, #92]	; (8008e68 <tcpip_try_callback+0x7c>)
 8008e0c:	f00c f97c 	bl	8015108 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008e10:	2008      	movs	r0, #8
 8008e12:	f000 fd4d 	bl	80098b0 <memp_malloc>
 8008e16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	e017      	b.n	8008e54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <tcpip_try_callback+0x70>)
 8008e3a:	f00b ff8d 	bl	8014d58 <sys_mbox_trypost>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	2008      	movs	r0, #8
 8008e48:	f000 fda8 	bl	800999c <memp_free>
    return ERR_MEM;
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	e000      	b.n	8008e54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20009c48 	.word	0x20009c48
 8008e60:	08016078 	.word	0x08016078
 8008e64:	080160f0 	.word	0x080160f0
 8008e68:	080160c8 	.word	0x080160c8

08008e6c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008e76:	f000 f871 	bl	8008f5c <lwip_init>

  tcpip_init_done = initfunc;
 8008e7a:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <tcpip_init+0x6c>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008e80:	4a16      	ldr	r2, [pc, #88]	; (8008edc <tcpip_init+0x70>)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008e86:	2106      	movs	r1, #6
 8008e88:	4815      	ldr	r0, [pc, #84]	; (8008ee0 <tcpip_init+0x74>)
 8008e8a:	f00b ff4b 	bl	8014d24 <sys_mbox_new>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008e94:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <tcpip_init+0x78>)
 8008e96:	f240 2261 	movw	r2, #609	; 0x261
 8008e9a:	4913      	ldr	r1, [pc, #76]	; (8008ee8 <tcpip_init+0x7c>)
 8008e9c:	4813      	ldr	r0, [pc, #76]	; (8008eec <tcpip_init+0x80>)
 8008e9e:	f00c f933 	bl	8015108 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008ea2:	4813      	ldr	r0, [pc, #76]	; (8008ef0 <tcpip_init+0x84>)
 8008ea4:	f00b ffc0 	bl	8014e28 <sys_mutex_new>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d006      	beq.n	8008ebc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <tcpip_init+0x78>)
 8008eb0:	f240 2265 	movw	r2, #613	; 0x265
 8008eb4:	490f      	ldr	r1, [pc, #60]	; (8008ef4 <tcpip_init+0x88>)
 8008eb6:	480d      	ldr	r0, [pc, #52]	; (8008eec <tcpip_init+0x80>)
 8008eb8:	f00c f926 	bl	8015108 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008ebc:	2318      	movs	r3, #24
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	490c      	ldr	r1, [pc, #48]	; (8008ef8 <tcpip_init+0x8c>)
 8008ec8:	480c      	ldr	r0, [pc, #48]	; (8008efc <tcpip_init+0x90>)
 8008eca:	f00b ffdf 	bl	8014e8c <sys_thread_new>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20009c40 	.word	0x20009c40
 8008edc:	20009c44 	.word	0x20009c44
 8008ee0:	20009c48 	.word	0x20009c48
 8008ee4:	08016078 	.word	0x08016078
 8008ee8:	08016100 	.word	0x08016100
 8008eec:	080160c8 	.word	0x080160c8
 8008ef0:	20009c4c 	.word	0x20009c4c
 8008ef4:	08016124 	.word	0x08016124
 8008ef8:	08008c29 	.word	0x08008c29
 8008efc:	08016148 	.word	0x08016148

08008f00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	b21a      	sxth	r2, r3
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	b21b      	sxth	r3, r3
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	b21b      	sxth	r3, r3
 8008f1c:	b29b      	uxth	r3, r3
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	061a      	lsls	r2, r3, #24
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	0e1b      	lsrs	r3, r3, #24
 8008f4e:	4313      	orrs	r3, r2
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008f66:	f00b ff53 	bl	8014e10 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008f6a:	f000 f8d5 	bl	8009118 <mem_init>
  memp_init();
 8008f6e:	f000 fc31 	bl	80097d4 <memp_init>
  pbuf_init();
  netif_init();
 8008f72:	f000 fd3d 	bl	80099f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008f76:	f007 f8d9 	bl	801012c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008f7a:	f001 fe01 	bl	800ab80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008f7e:	f007 f81b 	bl	800ffb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008f96:	4b05      	ldr	r3, [pc, #20]	; (8008fac <ptr_to_mem+0x20>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	4413      	add	r3, r2
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	2000a2bc 	.word	0x2000a2bc

08008fb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <mem_to_ptr+0x20>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	b29b      	uxth	r3, r3
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	2000a2bc 	.word	0x2000a2bc

08008fd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008fd4:	b590      	push	{r4, r7, lr}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008fdc:	4b45      	ldr	r3, [pc, #276]	; (80090f4 <plug_holes+0x120>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d206      	bcs.n	8008ff4 <plug_holes+0x20>
 8008fe6:	4b44      	ldr	r3, [pc, #272]	; (80090f8 <plug_holes+0x124>)
 8008fe8:	f240 12df 	movw	r2, #479	; 0x1df
 8008fec:	4943      	ldr	r1, [pc, #268]	; (80090fc <plug_holes+0x128>)
 8008fee:	4844      	ldr	r0, [pc, #272]	; (8009100 <plug_holes+0x12c>)
 8008ff0:	f00c f88a 	bl	8015108 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008ff4:	4b43      	ldr	r3, [pc, #268]	; (8009104 <plug_holes+0x130>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d306      	bcc.n	800900c <plug_holes+0x38>
 8008ffe:	4b3e      	ldr	r3, [pc, #248]	; (80090f8 <plug_holes+0x124>)
 8009000:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009004:	4940      	ldr	r1, [pc, #256]	; (8009108 <plug_holes+0x134>)
 8009006:	483e      	ldr	r0, [pc, #248]	; (8009100 <plug_holes+0x12c>)
 8009008:	f00c f87e 	bl	8015108 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	791b      	ldrb	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <plug_holes+0x4e>
 8009014:	4b38      	ldr	r3, [pc, #224]	; (80090f8 <plug_holes+0x124>)
 8009016:	f240 12e1 	movw	r2, #481	; 0x1e1
 800901a:	493c      	ldr	r1, [pc, #240]	; (800910c <plug_holes+0x138>)
 800901c:	4838      	ldr	r0, [pc, #224]	; (8009100 <plug_holes+0x12c>)
 800901e:	f00c f873 	bl	8015108 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800902a:	d906      	bls.n	800903a <plug_holes+0x66>
 800902c:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <plug_holes+0x124>)
 800902e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009032:	4937      	ldr	r1, [pc, #220]	; (8009110 <plug_holes+0x13c>)
 8009034:	4832      	ldr	r0, [pc, #200]	; (8009100 <plug_holes+0x12c>)
 8009036:	f00c f867 	bl	8015108 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff ffa4 	bl	8008f8c <ptr_to_mem>
 8009044:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d024      	beq.n	8009098 <plug_holes+0xc4>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	791b      	ldrb	r3, [r3, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d120      	bne.n	8009098 <plug_holes+0xc4>
 8009056:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <plug_holes+0x130>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	429a      	cmp	r2, r3
 800905e:	d01b      	beq.n	8009098 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009060:	4b2c      	ldr	r3, [pc, #176]	; (8009114 <plug_holes+0x140>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	429a      	cmp	r2, r3
 8009068:	d102      	bne.n	8009070 <plug_holes+0x9c>
      lfree = mem;
 800906a:	4a2a      	ldr	r2, [pc, #168]	; (8009114 <plug_holes+0x140>)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	881a      	ldrh	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009080:	d00a      	beq.n	8009098 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff ff80 	bl	8008f8c <ptr_to_mem>
 800908c:	4604      	mov	r4, r0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff ff8e 	bl	8008fb0 <mem_to_ptr>
 8009094:	4603      	mov	r3, r0
 8009096:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff75 	bl	8008f8c <ptr_to_mem>
 80090a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d01f      	beq.n	80090ec <plug_holes+0x118>
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11b      	bne.n	80090ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80090b4:	4b17      	ldr	r3, [pc, #92]	; (8009114 <plug_holes+0x140>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d102      	bne.n	80090c4 <plug_holes+0xf0>
      lfree = pmem;
 80090be:	4a15      	ldr	r2, [pc, #84]	; (8009114 <plug_holes+0x140>)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	881a      	ldrh	r2, [r3, #0]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090d4:	d00a      	beq.n	80090ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff ff56 	bl	8008f8c <ptr_to_mem>
 80090e0:	4604      	mov	r4, r0
 80090e2:	68b8      	ldr	r0, [r7, #8]
 80090e4:	f7ff ff64 	bl	8008fb0 <mem_to_ptr>
 80090e8:	4603      	mov	r3, r0
 80090ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80090ec:	bf00      	nop
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}
 80090f4:	2000a2bc 	.word	0x2000a2bc
 80090f8:	08016158 	.word	0x08016158
 80090fc:	08016188 	.word	0x08016188
 8009100:	080161a0 	.word	0x080161a0
 8009104:	2000a2c0 	.word	0x2000a2c0
 8009108:	080161c8 	.word	0x080161c8
 800910c:	080161e4 	.word	0x080161e4
 8009110:	08016200 	.word	0x08016200
 8009114:	2000a2c8 	.word	0x2000a2c8

08009118 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800911e:	4b1f      	ldr	r3, [pc, #124]	; (800919c <mem_init+0x84>)
 8009120:	3303      	adds	r3, #3
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	461a      	mov	r2, r3
 8009128:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <mem_init+0x88>)
 800912a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800912c:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <mem_init+0x88>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009138:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009146:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800914a:	f7ff ff1f 	bl	8008f8c <ptr_to_mem>
 800914e:	4603      	mov	r3, r0
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <mem_init+0x8c>)
 8009152:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009154:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <mem_init+0x8c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2201      	movs	r2, #1
 800915a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800915c:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <mem_init+0x8c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009164:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <mem_init+0x8c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800916e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <mem_init+0x88>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a0c      	ldr	r2, [pc, #48]	; (80091a8 <mem_init+0x90>)
 8009176:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009178:	480c      	ldr	r0, [pc, #48]	; (80091ac <mem_init+0x94>)
 800917a:	f00b fe55 	bl	8014e28 <sys_mutex_new>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d006      	beq.n	8009192 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009184:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <mem_init+0x98>)
 8009186:	f240 221f 	movw	r2, #543	; 0x21f
 800918a:	490a      	ldr	r1, [pc, #40]	; (80091b4 <mem_init+0x9c>)
 800918c:	480a      	ldr	r0, [pc, #40]	; (80091b8 <mem_init+0xa0>)
 800918e:	f00b ffbb 	bl	8015108 <iprintf>
  }
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20009c68 	.word	0x20009c68
 80091a0:	2000a2bc 	.word	0x2000a2bc
 80091a4:	2000a2c0 	.word	0x2000a2c0
 80091a8:	2000a2c8 	.word	0x2000a2c8
 80091ac:	2000a2c4 	.word	0x2000a2c4
 80091b0:	08016158 	.word	0x08016158
 80091b4:	0801622c 	.word	0x0801622c
 80091b8:	080161a0 	.word	0x080161a0

080091bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fef3 	bl	8008fb0 <mem_to_ptr>
 80091ca:	4603      	mov	r3, r0
 80091cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff feda 	bl	8008f8c <ptr_to_mem>
 80091d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fed4 	bl	8008f8c <ptr_to_mem>
 80091e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091ee:	d818      	bhi.n	8009222 <mem_link_valid+0x66>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	885b      	ldrh	r3, [r3, #2]
 80091f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091f8:	d813      	bhi.n	8009222 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80091fe:	8afa      	ldrh	r2, [r7, #22]
 8009200:	429a      	cmp	r2, r3
 8009202:	d004      	beq.n	800920e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	8afa      	ldrh	r2, [r7, #22]
 800920a:	429a      	cmp	r2, r3
 800920c:	d109      	bne.n	8009222 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800920e:	4b08      	ldr	r3, [pc, #32]	; (8009230 <mem_link_valid+0x74>)
 8009210:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	429a      	cmp	r2, r3
 8009216:	d006      	beq.n	8009226 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	885b      	ldrh	r3, [r3, #2]
 800921c:	8afa      	ldrh	r2, [r7, #22]
 800921e:	429a      	cmp	r2, r3
 8009220:	d001      	beq.n	8009226 <mem_link_valid+0x6a>
    return 0;
 8009222:	2300      	movs	r3, #0
 8009224:	e000      	b.n	8009228 <mem_link_valid+0x6c>
  }
  return 1;
 8009226:	2301      	movs	r3, #1
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	2000a2c0 	.word	0x2000a2c0

08009234 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d070      	beq.n	8009324 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00d      	beq.n	8009268 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800924c:	4b37      	ldr	r3, [pc, #220]	; (800932c <mem_free+0xf8>)
 800924e:	f240 2273 	movw	r2, #627	; 0x273
 8009252:	4937      	ldr	r1, [pc, #220]	; (8009330 <mem_free+0xfc>)
 8009254:	4837      	ldr	r0, [pc, #220]	; (8009334 <mem_free+0x100>)
 8009256:	f00b ff57 	bl	8015108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800925a:	f00b fe37 	bl	8014ecc <sys_arch_protect>
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f00b fe41 	bl	8014ee8 <sys_arch_unprotect>
    return;
 8009266:	e05e      	b.n	8009326 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3b08      	subs	r3, #8
 800926c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800926e:	4b32      	ldr	r3, [pc, #200]	; (8009338 <mem_free+0x104>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d306      	bcc.n	8009286 <mem_free+0x52>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f103 020c 	add.w	r2, r3, #12
 800927e:	4b2f      	ldr	r3, [pc, #188]	; (800933c <mem_free+0x108>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d90d      	bls.n	80092a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009286:	4b29      	ldr	r3, [pc, #164]	; (800932c <mem_free+0xf8>)
 8009288:	f240 227f 	movw	r2, #639	; 0x27f
 800928c:	492c      	ldr	r1, [pc, #176]	; (8009340 <mem_free+0x10c>)
 800928e:	4829      	ldr	r0, [pc, #164]	; (8009334 <mem_free+0x100>)
 8009290:	f00b ff3a 	bl	8015108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009294:	f00b fe1a 	bl	8014ecc <sys_arch_protect>
 8009298:	6138      	str	r0, [r7, #16]
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f00b fe24 	bl	8014ee8 <sys_arch_unprotect>
    return;
 80092a0:	e041      	b.n	8009326 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80092a2:	4828      	ldr	r0, [pc, #160]	; (8009344 <mem_free+0x110>)
 80092a4:	f00b fdd6 	bl	8014e54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d110      	bne.n	80092d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80092b0:	4b1e      	ldr	r3, [pc, #120]	; (800932c <mem_free+0xf8>)
 80092b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80092b6:	4924      	ldr	r1, [pc, #144]	; (8009348 <mem_free+0x114>)
 80092b8:	481e      	ldr	r0, [pc, #120]	; (8009334 <mem_free+0x100>)
 80092ba:	f00b ff25 	bl	8015108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80092be:	4821      	ldr	r0, [pc, #132]	; (8009344 <mem_free+0x110>)
 80092c0:	f00b fdd7 	bl	8014e72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80092c4:	f00b fe02 	bl	8014ecc <sys_arch_protect>
 80092c8:	6178      	str	r0, [r7, #20]
 80092ca:	6978      	ldr	r0, [r7, #20]
 80092cc:	f00b fe0c 	bl	8014ee8 <sys_arch_unprotect>
    return;
 80092d0:	e029      	b.n	8009326 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80092d2:	69f8      	ldr	r0, [r7, #28]
 80092d4:	f7ff ff72 	bl	80091bc <mem_link_valid>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d110      	bne.n	8009300 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80092de:	4b13      	ldr	r3, [pc, #76]	; (800932c <mem_free+0xf8>)
 80092e0:	f240 2295 	movw	r2, #661	; 0x295
 80092e4:	4919      	ldr	r1, [pc, #100]	; (800934c <mem_free+0x118>)
 80092e6:	4813      	ldr	r0, [pc, #76]	; (8009334 <mem_free+0x100>)
 80092e8:	f00b ff0e 	bl	8015108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80092ec:	4815      	ldr	r0, [pc, #84]	; (8009344 <mem_free+0x110>)
 80092ee:	f00b fdc0 	bl	8014e72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80092f2:	f00b fdeb 	bl	8014ecc <sys_arch_protect>
 80092f6:	61b8      	str	r0, [r7, #24]
 80092f8:	69b8      	ldr	r0, [r7, #24]
 80092fa:	f00b fdf5 	bl	8014ee8 <sys_arch_unprotect>
    return;
 80092fe:	e012      	b.n	8009326 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2200      	movs	r2, #0
 8009304:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009306:	4b12      	ldr	r3, [pc, #72]	; (8009350 <mem_free+0x11c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	429a      	cmp	r2, r3
 800930e:	d202      	bcs.n	8009316 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009310:	4a0f      	ldr	r2, [pc, #60]	; (8009350 <mem_free+0x11c>)
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009316:	69f8      	ldr	r0, [r7, #28]
 8009318:	f7ff fe5c 	bl	8008fd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800931c:	4809      	ldr	r0, [pc, #36]	; (8009344 <mem_free+0x110>)
 800931e:	f00b fda8 	bl	8014e72 <sys_mutex_unlock>
 8009322:	e000      	b.n	8009326 <mem_free+0xf2>
    return;
 8009324:	bf00      	nop
}
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	08016158 	.word	0x08016158
 8009330:	08016248 	.word	0x08016248
 8009334:	080161a0 	.word	0x080161a0
 8009338:	2000a2bc 	.word	0x2000a2bc
 800933c:	2000a2c0 	.word	0x2000a2c0
 8009340:	0801626c 	.word	0x0801626c
 8009344:	2000a2c4 	.word	0x2000a2c4
 8009348:	08016288 	.word	0x08016288
 800934c:	080162b0 	.word	0x080162b0
 8009350:	2000a2c8 	.word	0x2000a2c8

08009354 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009360:	887b      	ldrh	r3, [r7, #2]
 8009362:	3303      	adds	r3, #3
 8009364:	b29b      	uxth	r3, r3
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800936c:	8bfb      	ldrh	r3, [r7, #30]
 800936e:	2b0b      	cmp	r3, #11
 8009370:	d801      	bhi.n	8009376 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009372:	230c      	movs	r3, #12
 8009374:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009376:	8bfb      	ldrh	r3, [r7, #30]
 8009378:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800937c:	d803      	bhi.n	8009386 <mem_trim+0x32>
 800937e:	8bfa      	ldrh	r2, [r7, #30]
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	429a      	cmp	r2, r3
 8009384:	d201      	bcs.n	800938a <mem_trim+0x36>
    return NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	e0d8      	b.n	800953c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800938a:	4b6e      	ldr	r3, [pc, #440]	; (8009544 <mem_trim+0x1f0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d304      	bcc.n	800939e <mem_trim+0x4a>
 8009394:	4b6c      	ldr	r3, [pc, #432]	; (8009548 <mem_trim+0x1f4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	d306      	bcc.n	80093ac <mem_trim+0x58>
 800939e:	4b6b      	ldr	r3, [pc, #428]	; (800954c <mem_trim+0x1f8>)
 80093a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80093a4:	496a      	ldr	r1, [pc, #424]	; (8009550 <mem_trim+0x1fc>)
 80093a6:	486b      	ldr	r0, [pc, #428]	; (8009554 <mem_trim+0x200>)
 80093a8:	f00b feae 	bl	8015108 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80093ac:	4b65      	ldr	r3, [pc, #404]	; (8009544 <mem_trim+0x1f0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d304      	bcc.n	80093c0 <mem_trim+0x6c>
 80093b6:	4b64      	ldr	r3, [pc, #400]	; (8009548 <mem_trim+0x1f4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d307      	bcc.n	80093d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80093c0:	f00b fd84 	bl	8014ecc <sys_arch_protect>
 80093c4:	60b8      	str	r0, [r7, #8]
 80093c6:	68b8      	ldr	r0, [r7, #8]
 80093c8:	f00b fd8e 	bl	8014ee8 <sys_arch_unprotect>
    return rmem;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	e0b5      	b.n	800953c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3b08      	subs	r3, #8
 80093d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80093d6:	69b8      	ldr	r0, [r7, #24]
 80093d8:	f7ff fdea 	bl	8008fb0 <mem_to_ptr>
 80093dc:	4603      	mov	r3, r0
 80093de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	8afb      	ldrh	r3, [r7, #22]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	3b08      	subs	r3, #8
 80093ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80093ee:	8bfa      	ldrh	r2, [r7, #30]
 80093f0:	8abb      	ldrh	r3, [r7, #20]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d906      	bls.n	8009404 <mem_trim+0xb0>
 80093f6:	4b55      	ldr	r3, [pc, #340]	; (800954c <mem_trim+0x1f8>)
 80093f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80093fc:	4956      	ldr	r1, [pc, #344]	; (8009558 <mem_trim+0x204>)
 80093fe:	4855      	ldr	r0, [pc, #340]	; (8009554 <mem_trim+0x200>)
 8009400:	f00b fe82 	bl	8015108 <iprintf>
  if (newsize > size) {
 8009404:	8bfa      	ldrh	r2, [r7, #30]
 8009406:	8abb      	ldrh	r3, [r7, #20]
 8009408:	429a      	cmp	r2, r3
 800940a:	d901      	bls.n	8009410 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	e095      	b.n	800953c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009410:	8bfa      	ldrh	r2, [r7, #30]
 8009412:	8abb      	ldrh	r3, [r7, #20]
 8009414:	429a      	cmp	r2, r3
 8009416:	d101      	bne.n	800941c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	e08f      	b.n	800953c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800941c:	484f      	ldr	r0, [pc, #316]	; (800955c <mem_trim+0x208>)
 800941e:	f00b fd19 	bl	8014e54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff fdb0 	bl	8008f8c <ptr_to_mem>
 800942c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d13f      	bne.n	80094b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800943e:	d106      	bne.n	800944e <mem_trim+0xfa>
 8009440:	4b42      	ldr	r3, [pc, #264]	; (800954c <mem_trim+0x1f8>)
 8009442:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009446:	4946      	ldr	r1, [pc, #280]	; (8009560 <mem_trim+0x20c>)
 8009448:	4842      	ldr	r0, [pc, #264]	; (8009554 <mem_trim+0x200>)
 800944a:	f00b fe5d 	bl	8015108 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009454:	8afa      	ldrh	r2, [r7, #22]
 8009456:	8bfb      	ldrh	r3, [r7, #30]
 8009458:	4413      	add	r3, r2
 800945a:	b29b      	uxth	r3, r3
 800945c:	3308      	adds	r3, #8
 800945e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009460:	4b40      	ldr	r3, [pc, #256]	; (8009564 <mem_trim+0x210>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	d106      	bne.n	8009478 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800946a:	89fb      	ldrh	r3, [r7, #14]
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fd8d 	bl	8008f8c <ptr_to_mem>
 8009472:	4603      	mov	r3, r0
 8009474:	4a3b      	ldr	r2, [pc, #236]	; (8009564 <mem_trim+0x210>)
 8009476:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009478:	89fb      	ldrh	r3, [r7, #14]
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fd86 	bl	8008f8c <ptr_to_mem>
 8009480:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2200      	movs	r2, #0
 8009486:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	89ba      	ldrh	r2, [r7, #12]
 800948c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	8afa      	ldrh	r2, [r7, #22]
 8009492:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	89fa      	ldrh	r2, [r7, #14]
 8009498:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094a2:	d047      	beq.n	8009534 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff fd6f 	bl	8008f8c <ptr_to_mem>
 80094ae:	4602      	mov	r2, r0
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	8053      	strh	r3, [r2, #2]
 80094b4:	e03e      	b.n	8009534 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80094b6:	8bfb      	ldrh	r3, [r7, #30]
 80094b8:	f103 0214 	add.w	r2, r3, #20
 80094bc:	8abb      	ldrh	r3, [r7, #20]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d838      	bhi.n	8009534 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80094c2:	8afa      	ldrh	r2, [r7, #22]
 80094c4:	8bfb      	ldrh	r3, [r7, #30]
 80094c6:	4413      	add	r3, r2
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3308      	adds	r3, #8
 80094cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094d6:	d106      	bne.n	80094e6 <mem_trim+0x192>
 80094d8:	4b1c      	ldr	r3, [pc, #112]	; (800954c <mem_trim+0x1f8>)
 80094da:	f240 3216 	movw	r2, #790	; 0x316
 80094de:	4920      	ldr	r1, [pc, #128]	; (8009560 <mem_trim+0x20c>)
 80094e0:	481c      	ldr	r0, [pc, #112]	; (8009554 <mem_trim+0x200>)
 80094e2:	f00b fe11 	bl	8015108 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80094e6:	89fb      	ldrh	r3, [r7, #14]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff fd4f 	bl	8008f8c <ptr_to_mem>
 80094ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80094f0:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <mem_trim+0x210>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d202      	bcs.n	8009500 <mem_trim+0x1ac>
      lfree = mem2;
 80094fa:	4a1a      	ldr	r2, [pc, #104]	; (8009564 <mem_trim+0x210>)
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2200      	movs	r2, #0
 8009504:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	881a      	ldrh	r2, [r3, #0]
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	8afa      	ldrh	r2, [r7, #22]
 8009512:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	89fa      	ldrh	r2, [r7, #14]
 8009518:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009522:	d007      	beq.n	8009534 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff fd2f 	bl	8008f8c <ptr_to_mem>
 800952e:	4602      	mov	r2, r0
 8009530:	89fb      	ldrh	r3, [r7, #14]
 8009532:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009534:	4809      	ldr	r0, [pc, #36]	; (800955c <mem_trim+0x208>)
 8009536:	f00b fc9c 	bl	8014e72 <sys_mutex_unlock>
  return rmem;
 800953a:	687b      	ldr	r3, [r7, #4]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	2000a2bc 	.word	0x2000a2bc
 8009548:	2000a2c0 	.word	0x2000a2c0
 800954c:	08016158 	.word	0x08016158
 8009550:	080162e4 	.word	0x080162e4
 8009554:	080161a0 	.word	0x080161a0
 8009558:	080162fc 	.word	0x080162fc
 800955c:	2000a2c4 	.word	0x2000a2c4
 8009560:	0801631c 	.word	0x0801631c
 8009564:	2000a2c8 	.word	0x2000a2c8

08009568 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <mem_malloc+0x14>
    return NULL;
 8009578:	2300      	movs	r3, #0
 800957a:	e0e2      	b.n	8009742 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800957c:	88fb      	ldrh	r3, [r7, #6]
 800957e:	3303      	adds	r3, #3
 8009580:	b29b      	uxth	r3, r3
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009588:	8bbb      	ldrh	r3, [r7, #28]
 800958a:	2b0b      	cmp	r3, #11
 800958c:	d801      	bhi.n	8009592 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800958e:	230c      	movs	r3, #12
 8009590:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009592:	8bbb      	ldrh	r3, [r7, #28]
 8009594:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009598:	d803      	bhi.n	80095a2 <mem_malloc+0x3a>
 800959a:	8bba      	ldrh	r2, [r7, #28]
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d201      	bcs.n	80095a6 <mem_malloc+0x3e>
    return NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e0cd      	b.n	8009742 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80095a6:	4869      	ldr	r0, [pc, #420]	; (800974c <mem_malloc+0x1e4>)
 80095a8:	f00b fc54 	bl	8014e54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80095ac:	4b68      	ldr	r3, [pc, #416]	; (8009750 <mem_malloc+0x1e8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff fcfd 	bl	8008fb0 <mem_to_ptr>
 80095b6:	4603      	mov	r3, r0
 80095b8:	83fb      	strh	r3, [r7, #30]
 80095ba:	e0b7      	b.n	800972c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80095bc:	8bfb      	ldrh	r3, [r7, #30]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fce4 	bl	8008f8c <ptr_to_mem>
 80095c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 80a7 	bne.w	800971e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	8bfb      	ldrh	r3, [r7, #30]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	f1a3 0208 	sub.w	r2, r3, #8
 80095de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80095e0:	429a      	cmp	r2, r3
 80095e2:	f0c0 809c 	bcc.w	800971e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	8bfb      	ldrh	r3, [r7, #30]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	f1a3 0208 	sub.w	r2, r3, #8
 80095f4:	8bbb      	ldrh	r3, [r7, #28]
 80095f6:	3314      	adds	r3, #20
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d333      	bcc.n	8009664 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80095fc:	8bfa      	ldrh	r2, [r7, #30]
 80095fe:	8bbb      	ldrh	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	b29b      	uxth	r3, r3
 8009604:	3308      	adds	r3, #8
 8009606:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009608:	8a7b      	ldrh	r3, [r7, #18]
 800960a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800960e:	d106      	bne.n	800961e <mem_malloc+0xb6>
 8009610:	4b50      	ldr	r3, [pc, #320]	; (8009754 <mem_malloc+0x1ec>)
 8009612:	f240 3287 	movw	r2, #903	; 0x387
 8009616:	4950      	ldr	r1, [pc, #320]	; (8009758 <mem_malloc+0x1f0>)
 8009618:	4850      	ldr	r0, [pc, #320]	; (800975c <mem_malloc+0x1f4>)
 800961a:	f00b fd75 	bl	8015108 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800961e:	8a7b      	ldrh	r3, [r7, #18]
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff fcb3 	bl	8008f8c <ptr_to_mem>
 8009626:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	881a      	ldrh	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8bfa      	ldrh	r2, [r7, #30]
 800963a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	8a7a      	ldrh	r2, [r7, #18]
 8009640:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009650:	d00b      	beq.n	800966a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fc98 	bl	8008f8c <ptr_to_mem>
 800965c:	4602      	mov	r2, r0
 800965e:	8a7b      	ldrh	r3, [r7, #18]
 8009660:	8053      	strh	r3, [r2, #2]
 8009662:	e002      	b.n	800966a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2201      	movs	r2, #1
 8009668:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800966a:	4b39      	ldr	r3, [pc, #228]	; (8009750 <mem_malloc+0x1e8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	429a      	cmp	r2, r3
 8009672:	d127      	bne.n	80096c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009674:	4b36      	ldr	r3, [pc, #216]	; (8009750 <mem_malloc+0x1e8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800967a:	e005      	b.n	8009688 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fc83 	bl	8008f8c <ptr_to_mem>
 8009686:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	791b      	ldrb	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <mem_malloc+0x132>
 8009690:	4b33      	ldr	r3, [pc, #204]	; (8009760 <mem_malloc+0x1f8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	429a      	cmp	r2, r3
 8009698:	d1f0      	bne.n	800967c <mem_malloc+0x114>
          }
          lfree = cur;
 800969a:	4a2d      	ldr	r2, [pc, #180]	; (8009750 <mem_malloc+0x1e8>)
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80096a0:	4b2b      	ldr	r3, [pc, #172]	; (8009750 <mem_malloc+0x1e8>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <mem_malloc+0x1f8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d00b      	beq.n	80096c4 <mem_malloc+0x15c>
 80096ac:	4b28      	ldr	r3, [pc, #160]	; (8009750 <mem_malloc+0x1e8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <mem_malloc+0x15c>
 80096b6:	4b27      	ldr	r3, [pc, #156]	; (8009754 <mem_malloc+0x1ec>)
 80096b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80096bc:	4929      	ldr	r1, [pc, #164]	; (8009764 <mem_malloc+0x1fc>)
 80096be:	4827      	ldr	r0, [pc, #156]	; (800975c <mem_malloc+0x1f4>)
 80096c0:	f00b fd22 	bl	8015108 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80096c4:	4821      	ldr	r0, [pc, #132]	; (800974c <mem_malloc+0x1e4>)
 80096c6:	f00b fbd4 	bl	8014e72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80096ca:	8bba      	ldrh	r2, [r7, #28]
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	3308      	adds	r3, #8
 80096d2:	4a23      	ldr	r2, [pc, #140]	; (8009760 <mem_malloc+0x1f8>)
 80096d4:	6812      	ldr	r2, [r2, #0]
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d906      	bls.n	80096e8 <mem_malloc+0x180>
 80096da:	4b1e      	ldr	r3, [pc, #120]	; (8009754 <mem_malloc+0x1ec>)
 80096dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80096e0:	4921      	ldr	r1, [pc, #132]	; (8009768 <mem_malloc+0x200>)
 80096e2:	481e      	ldr	r0, [pc, #120]	; (800975c <mem_malloc+0x1f4>)
 80096e4:	f00b fd10 	bl	8015108 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d006      	beq.n	8009700 <mem_malloc+0x198>
 80096f2:	4b18      	ldr	r3, [pc, #96]	; (8009754 <mem_malloc+0x1ec>)
 80096f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80096f8:	491c      	ldr	r1, [pc, #112]	; (800976c <mem_malloc+0x204>)
 80096fa:	4818      	ldr	r0, [pc, #96]	; (800975c <mem_malloc+0x1f4>)
 80096fc:	f00b fd04 	bl	8015108 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d006      	beq.n	8009718 <mem_malloc+0x1b0>
 800970a:	4b12      	ldr	r3, [pc, #72]	; (8009754 <mem_malloc+0x1ec>)
 800970c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009710:	4917      	ldr	r1, [pc, #92]	; (8009770 <mem_malloc+0x208>)
 8009712:	4812      	ldr	r0, [pc, #72]	; (800975c <mem_malloc+0x1f4>)
 8009714:	f00b fcf8 	bl	8015108 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	3308      	adds	r3, #8
 800971c:	e011      	b.n	8009742 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800971e:	8bfb      	ldrh	r3, [r7, #30]
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff fc33 	bl	8008f8c <ptr_to_mem>
 8009726:	4603      	mov	r3, r0
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800972c:	8bfa      	ldrh	r2, [r7, #30]
 800972e:	8bbb      	ldrh	r3, [r7, #28]
 8009730:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009734:	429a      	cmp	r2, r3
 8009736:	f4ff af41 	bcc.w	80095bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800973a:	4804      	ldr	r0, [pc, #16]	; (800974c <mem_malloc+0x1e4>)
 800973c:	f00b fb99 	bl	8014e72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3720      	adds	r7, #32
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	2000a2c4 	.word	0x2000a2c4
 8009750:	2000a2c8 	.word	0x2000a2c8
 8009754:	08016158 	.word	0x08016158
 8009758:	0801631c 	.word	0x0801631c
 800975c:	080161a0 	.word	0x080161a0
 8009760:	2000a2c0 	.word	0x2000a2c0
 8009764:	08016330 	.word	0x08016330
 8009768:	0801634c 	.word	0x0801634c
 800976c:	0801637c 	.word	0x0801637c
 8009770:	080163ac 	.word	0x080163ac

08009774 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	3303      	adds	r3, #3
 800978a:	f023 0303 	bic.w	r3, r3, #3
 800978e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e011      	b.n	80097ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	461a      	mov	r2, r3
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	461a      	mov	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4293      	cmp	r3, r2
 80097c4:	dbe7      	blt.n	8009796 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80097da:	2300      	movs	r3, #0
 80097dc:	80fb      	strh	r3, [r7, #6]
 80097de:	e009      	b.n	80097f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	4a08      	ldr	r2, [pc, #32]	; (8009804 <memp_init+0x30>)
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff ffc3 	bl	8009774 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	3301      	adds	r3, #1
 80097f2:	80fb      	strh	r3, [r7, #6]
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	2b0c      	cmp	r3, #12
 80097f8:	d9f2      	bls.n	80097e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	08018f84 	.word	0x08018f84

08009808 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009810:	f00b fb5c 	bl	8014ecc <sys_arch_protect>
 8009814:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d015      	beq.n	8009850 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f003 0303 	and.w	r3, r3, #3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <do_memp_malloc_pool+0x3e>
 8009838:	4b09      	ldr	r3, [pc, #36]	; (8009860 <do_memp_malloc_pool+0x58>)
 800983a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800983e:	4909      	ldr	r1, [pc, #36]	; (8009864 <do_memp_malloc_pool+0x5c>)
 8009840:	4809      	ldr	r0, [pc, #36]	; (8009868 <do_memp_malloc_pool+0x60>)
 8009842:	f00b fc61 	bl	8015108 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f00b fb4e 	bl	8014ee8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	e003      	b.n	8009858 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f00b fb49 	bl	8014ee8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	080163d0 	.word	0x080163d0
 8009864:	08016400 	.word	0x08016400
 8009868:	08016424 	.word	0x08016424

0800986c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <memp_malloc_pool+0x1c>
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <memp_malloc_pool+0x38>)
 800987c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009880:	4909      	ldr	r1, [pc, #36]	; (80098a8 <memp_malloc_pool+0x3c>)
 8009882:	480a      	ldr	r0, [pc, #40]	; (80098ac <memp_malloc_pool+0x40>)
 8009884:	f00b fc40 	bl	8015108 <iprintf>
  if (desc == NULL) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <memp_malloc_pool+0x26>
    return NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	e003      	b.n	800989a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ffb8 	bl	8009808 <do_memp_malloc_pool>
 8009898:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	080163d0 	.word	0x080163d0
 80098a8:	0801644c 	.word	0x0801644c
 80098ac:	08016424 	.word	0x08016424

080098b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	2b0c      	cmp	r3, #12
 80098be:	d908      	bls.n	80098d2 <memp_malloc+0x22>
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <memp_malloc+0x3c>)
 80098c2:	f240 1257 	movw	r2, #343	; 0x157
 80098c6:	490a      	ldr	r1, [pc, #40]	; (80098f0 <memp_malloc+0x40>)
 80098c8:	480a      	ldr	r0, [pc, #40]	; (80098f4 <memp_malloc+0x44>)
 80098ca:	f00b fc1d 	bl	8015108 <iprintf>
 80098ce:	2300      	movs	r3, #0
 80098d0:	e008      	b.n	80098e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	4a08      	ldr	r2, [pc, #32]	; (80098f8 <memp_malloc+0x48>)
 80098d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff ff94 	bl	8009808 <do_memp_malloc_pool>
 80098e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	080163d0 	.word	0x080163d0
 80098f0:	08016460 	.word	0x08016460
 80098f4:	08016424 	.word	0x08016424
 80098f8:	08018f84 	.word	0x08018f84

080098fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d006      	beq.n	800991e <do_memp_free_pool+0x22>
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <do_memp_free_pool+0x4c>)
 8009912:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009916:	490d      	ldr	r1, [pc, #52]	; (800994c <do_memp_free_pool+0x50>)
 8009918:	480d      	ldr	r0, [pc, #52]	; (8009950 <do_memp_free_pool+0x54>)
 800991a:	f00b fbf5 	bl	8015108 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009922:	f00b fad3 	bl	8014ecc <sys_arch_protect>
 8009926:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800993a:	68b8      	ldr	r0, [r7, #8]
 800993c:	f00b fad4 	bl	8014ee8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009940:	bf00      	nop
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	080163d0 	.word	0x080163d0
 800994c:	08016480 	.word	0x08016480
 8009950:	08016424 	.word	0x08016424

08009954 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <memp_free_pool+0x1e>
 8009964:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <memp_free_pool+0x3c>)
 8009966:	f240 1295 	movw	r2, #405	; 0x195
 800996a:	490a      	ldr	r1, [pc, #40]	; (8009994 <memp_free_pool+0x40>)
 800996c:	480a      	ldr	r0, [pc, #40]	; (8009998 <memp_free_pool+0x44>)
 800996e:	f00b fbcb 	bl	8015108 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <memp_free_pool+0x34>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ffbb 	bl	80098fc <do_memp_free_pool>
 8009986:	e000      	b.n	800998a <memp_free_pool+0x36>
    return;
 8009988:	bf00      	nop
}
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	080163d0 	.word	0x080163d0
 8009994:	0801644c 	.word	0x0801644c
 8009998:	08016424 	.word	0x08016424

0800999c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	2b0c      	cmp	r3, #12
 80099ac:	d907      	bls.n	80099be <memp_free+0x22>
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <memp_free+0x44>)
 80099b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80099b4:	490b      	ldr	r1, [pc, #44]	; (80099e4 <memp_free+0x48>)
 80099b6:	480c      	ldr	r0, [pc, #48]	; (80099e8 <memp_free+0x4c>)
 80099b8:	f00b fba6 	bl	8015108 <iprintf>
 80099bc:	e00c      	b.n	80099d8 <memp_free+0x3c>

  if (mem == NULL) {
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <memp_free+0x50>)
 80099c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff ff94 	bl	80098fc <do_memp_free_pool>
 80099d4:	e000      	b.n	80099d8 <memp_free+0x3c>
    return;
 80099d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	080163d0 	.word	0x080163d0
 80099e4:	080164a0 	.word	0x080164a0
 80099e8:	08016424 	.word	0x08016424
 80099ec:	08018f84 	.word	0x08018f84

080099f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80099f4:	bf00      	nop
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d108      	bne.n	8009a26 <netif_add+0x26>
 8009a14:	4b5b      	ldr	r3, [pc, #364]	; (8009b84 <netif_add+0x184>)
 8009a16:	f240 1227 	movw	r2, #295	; 0x127
 8009a1a:	495b      	ldr	r1, [pc, #364]	; (8009b88 <netif_add+0x188>)
 8009a1c:	485b      	ldr	r0, [pc, #364]	; (8009b8c <netif_add+0x18c>)
 8009a1e:	f00b fb73 	bl	8015108 <iprintf>
 8009a22:	2300      	movs	r3, #0
 8009a24:	e0a9      	b.n	8009b7a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d108      	bne.n	8009a3e <netif_add+0x3e>
 8009a2c:	4b55      	ldr	r3, [pc, #340]	; (8009b84 <netif_add+0x184>)
 8009a2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009a32:	4957      	ldr	r1, [pc, #348]	; (8009b90 <netif_add+0x190>)
 8009a34:	4855      	ldr	r0, [pc, #340]	; (8009b8c <netif_add+0x18c>)
 8009a36:	f00b fb67 	bl	8015108 <iprintf>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e09d      	b.n	8009b7a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009a44:	4b53      	ldr	r3, [pc, #332]	; (8009b94 <netif_add+0x194>)
 8009a46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009a4e:	4b51      	ldr	r3, [pc, #324]	; (8009b94 <netif_add+0x194>)
 8009a50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009a58:	4b4e      	ldr	r3, [pc, #312]	; (8009b94 <netif_add+0x194>)
 8009a5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4a49      	ldr	r2, [pc, #292]	; (8009b98 <netif_add+0x198>)
 8009a72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	2204      	movs	r2, #4
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f00b fba1 	bl	80151d2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a3a      	ldr	r2, [r7, #32]
 8009a9a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009a9c:	4b3f      	ldr	r3, [pc, #252]	; (8009b9c <netif_add+0x19c>)
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aaa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f914 	bl	8009ce0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <netif_add+0xc8>
    return NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e058      	b.n	8009b7a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ace:	2bff      	cmp	r3, #255	; 0xff
 8009ad0:	d103      	bne.n	8009ada <netif_add+0xda>
        netif->num = 0;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009ade:	4b30      	ldr	r3, [pc, #192]	; (8009ba0 <netif_add+0x1a0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	e02b      	b.n	8009b3e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d106      	bne.n	8009afc <netif_add+0xfc>
 8009aee:	4b25      	ldr	r3, [pc, #148]	; (8009b84 <netif_add+0x184>)
 8009af0:	f240 128b 	movw	r2, #395	; 0x18b
 8009af4:	492b      	ldr	r1, [pc, #172]	; (8009ba4 <netif_add+0x1a4>)
 8009af6:	4825      	ldr	r0, [pc, #148]	; (8009b8c <netif_add+0x18c>)
 8009af8:	f00b fb06 	bl	8015108 <iprintf>
        num_netifs++;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	3301      	adds	r3, #1
 8009b00:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2bff      	cmp	r3, #255	; 0xff
 8009b06:	dd06      	ble.n	8009b16 <netif_add+0x116>
 8009b08:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <netif_add+0x184>)
 8009b0a:	f240 128d 	movw	r2, #397	; 0x18d
 8009b0e:	4926      	ldr	r1, [pc, #152]	; (8009ba8 <netif_add+0x1a8>)
 8009b10:	481e      	ldr	r0, [pc, #120]	; (8009b8c <netif_add+0x18c>)
 8009b12:	f00b faf9 	bl	8015108 <iprintf>
        if (netif2->num == netif->num) {
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d108      	bne.n	8009b38 <netif_add+0x138>
          netif->num++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8009b36:	e005      	b.n	8009b44 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1d0      	bne.n	8009ae6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1be      	bne.n	8009ac8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b50:	2bfe      	cmp	r3, #254	; 0xfe
 8009b52:	d103      	bne.n	8009b5c <netif_add+0x15c>
    netif_num = 0;
 8009b54:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <netif_add+0x19c>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	e006      	b.n	8009b6a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b62:	3301      	adds	r3, #1
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <netif_add+0x19c>)
 8009b68:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <netif_add+0x1a0>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009b72:	4a0b      	ldr	r2, [pc, #44]	; (8009ba0 <netif_add+0x1a0>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009b78:	68fb      	ldr	r3, [r7, #12]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	080164bc 	.word	0x080164bc
 8009b88:	08016550 	.word	0x08016550
 8009b8c:	0801650c 	.word	0x0801650c
 8009b90:	0801656c 	.word	0x0801656c
 8009b94:	08019008 	.word	0x08019008
 8009b98:	08009ef3 	.word	0x08009ef3
 8009b9c:	2000d3c0 	.word	0x2000d3c0
 8009ba0:	2000d3b8 	.word	0x2000d3b8
 8009ba4:	08016590 	.word	0x08016590
 8009ba8:	080165a4 	.word	0x080165a4

08009bac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f002 fb29 	bl	800c210 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f006 ff3f 	bl	8010a44 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <netif_do_set_ipaddr+0x20>
 8009be2:	4b1d      	ldr	r3, [pc, #116]	; (8009c58 <netif_do_set_ipaddr+0x88>)
 8009be4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009be8:	491c      	ldr	r1, [pc, #112]	; (8009c5c <netif_do_set_ipaddr+0x8c>)
 8009bea:	481d      	ldr	r0, [pc, #116]	; (8009c60 <netif_do_set_ipaddr+0x90>)
 8009bec:	f00b fa8c 	bl	8015108 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <netif_do_set_ipaddr+0x34>
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <netif_do_set_ipaddr+0x88>)
 8009bf8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009bfc:	4917      	ldr	r1, [pc, #92]	; (8009c5c <netif_do_set_ipaddr+0x8c>)
 8009bfe:	4818      	ldr	r0, [pc, #96]	; (8009c60 <netif_do_set_ipaddr+0x90>)
 8009c00:	f00b fa82 	bl	8015108 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d01c      	beq.n	8009c4c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009c22:	f107 0314 	add.w	r3, r7, #20
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ffbf 	bl	8009bac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <netif_do_set_ipaddr+0x6a>
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	e000      	b.n	8009c3c <netif_do_set_ipaddr+0x6c>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c40:	2101      	movs	r1, #1
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 f8d2 	bl	8009dec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e000      	b.n	8009c4e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	080164bc 	.word	0x080164bc
 8009c5c:	080165d4 	.word	0x080165d4
 8009c60:	0801650c 	.word	0x0801650c

08009c64 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3308      	adds	r3, #8
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d00a      	beq.n	8009c94 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <netif_do_set_netmask+0x26>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	e000      	b.n	8009c8c <netif_do_set_netmask+0x28>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	330c      	adds	r3, #12
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d00a      	beq.n	8009cd2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <netif_do_set_gw+0x26>
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	e000      	b.n	8009cca <netif_do_set_gw+0x28>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009cfc:	4b1c      	ldr	r3, [pc, #112]	; (8009d70 <netif_set_addr+0x90>)
 8009cfe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <netif_set_addr+0x90>)
 8009d08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009d10:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <netif_set_addr+0x90>)
 8009d12:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <netif_set_addr+0x42>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <netif_set_addr+0x46>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <netif_set_addr+0x48>
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d006      	beq.n	8009d3e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	461a      	mov	r2, r3
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff ff49 	bl	8009bd0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff ff8e 	bl	8009c64 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff ffa8 	bl	8009ca2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009d58:	f107 0310 	add.w	r3, r7, #16
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7ff ff35 	bl	8009bd0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009d66:	bf00      	nop
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	08019008 	.word	0x08019008

08009d74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009d7c:	4a04      	ldr	r2, [pc, #16]	; (8009d90 <netif_set_default+0x1c>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	2000d3bc 	.word	0x2000d3bc

08009d94 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d107      	bne.n	8009db2 <netif_set_up+0x1e>
 8009da2:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <netif_set_up+0x4c>)
 8009da4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009da8:	490e      	ldr	r1, [pc, #56]	; (8009de4 <netif_set_up+0x50>)
 8009daa:	480f      	ldr	r0, [pc, #60]	; (8009de8 <netif_set_up+0x54>)
 8009dac:	f00b f9ac 	bl	8015108 <iprintf>
 8009db0:	e013      	b.n	8009dda <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10c      	bne.n	8009dda <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009dd2:	2103      	movs	r1, #3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f809 	bl	8009dec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	080164bc 	.word	0x080164bc
 8009de4:	08016644 	.word	0x08016644
 8009de8:	0801650c 	.word	0x0801650c

08009dec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <netif_issue_reports+0x20>
 8009dfe:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <netif_issue_reports+0x74>)
 8009e00:	f240 326d 	movw	r2, #877	; 0x36d
 8009e04:	4917      	ldr	r1, [pc, #92]	; (8009e64 <netif_issue_reports+0x78>)
 8009e06:	4818      	ldr	r0, [pc, #96]	; (8009e68 <netif_issue_reports+0x7c>)
 8009e08:	f00b f97e 	bl	8015108 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d01e      	beq.n	8009e58 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e20:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d017      	beq.n	8009e58 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d013      	beq.n	8009e5a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3304      	adds	r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00e      	beq.n	8009e5a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f009 fbbd 	bl	80135d0 <etharp_request>
 8009e56:	e000      	b.n	8009e5a <netif_issue_reports+0x6e>
    return;
 8009e58:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	080164bc 	.word	0x080164bc
 8009e64:	08016660 	.word	0x08016660
 8009e68:	0801650c 	.word	0x0801650c

08009e6c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d107      	bne.n	8009e8a <netif_set_down+0x1e>
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <netif_set_down+0x58>)
 8009e7c:	f240 329b 	movw	r2, #923	; 0x39b
 8009e80:	4911      	ldr	r1, [pc, #68]	; (8009ec8 <netif_set_down+0x5c>)
 8009e82:	4812      	ldr	r0, [pc, #72]	; (8009ecc <netif_set_down+0x60>)
 8009e84:	f00b f940 	bl	8015108 <iprintf>
 8009e88:	e019      	b.n	8009ebe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d012      	beq.n	8009ebe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e9e:	f023 0301 	bic.w	r3, r3, #1
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f008 ff43 	bl	8012d44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	080164bc 	.word	0x080164bc
 8009ec8:	08016684 	.word	0x08016684
 8009ecc:	0801650c 	.word	0x0801650c

08009ed0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	61da      	str	r2, [r3, #28]
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009efe:	f06f 030b 	mvn.w	r3, #11
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d013      	beq.n	8009f48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009f20:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <netif_get_by_index+0x48>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	e00c      	b.n	8009f42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f2e:	3301      	adds	r3, #1
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	79fa      	ldrb	r2, [r7, #7]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d101      	bne.n	8009f3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	e006      	b.n	8009f4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1ef      	bne.n	8009f28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	2000d3b8 	.word	0x2000d3b8

08009f5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009f62:	f00a ffb3 	bl	8014ecc <sys_arch_protect>
 8009f66:	6038      	str	r0, [r7, #0]
 8009f68:	4b0d      	ldr	r3, [pc, #52]	; (8009fa0 <pbuf_free_ooseq+0x44>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	6838      	ldr	r0, [r7, #0]
 8009f70:	f00a ffba 	bl	8014ee8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f74:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <pbuf_free_ooseq+0x48>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	e00a      	b.n	8009f92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f002 f981 	bl	800c28c <tcp_free_ooseq>
      return;
 8009f8a:	e005      	b.n	8009f98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f1      	bne.n	8009f7c <pbuf_free_ooseq+0x20>
    }
  }
}
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000d3c1 	.word	0x2000d3c1
 8009fa4:	2000d3d0 	.word	0x2000d3d0

08009fa8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009fb0:	f7ff ffd4 	bl	8009f5c <pbuf_free_ooseq>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009fc2:	f00a ff83 	bl	8014ecc <sys_arch_protect>
 8009fc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <pbuf_pool_is_empty+0x4c>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009fce:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <pbuf_pool_is_empty+0x4c>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f00a ff87 	bl	8014ee8 <sys_arch_unprotect>

  if (!queued) {
 8009fda:	78fb      	ldrb	r3, [r7, #3]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10f      	bne.n	800a000 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	480a      	ldr	r0, [pc, #40]	; (800a00c <pbuf_pool_is_empty+0x50>)
 8009fe4:	f7fe ff02 	bl	8008dec <tcpip_try_callback>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <pbuf_pool_is_empty+0x44>
 8009fee:	f00a ff6d 	bl	8014ecc <sys_arch_protect>
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	4b04      	ldr	r3, [pc, #16]	; (800a008 <pbuf_pool_is_empty+0x4c>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f00a ff74 	bl	8014ee8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	2000d3c1 	.word	0x2000d3c1
 800a00c:	08009fa9 	.word	0x08009fa9

0800a010 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4611      	mov	r1, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	460b      	mov	r3, r1
 800a020:	80fb      	strh	r3, [r7, #6]
 800a022:	4613      	mov	r3, r2
 800a024:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	88fa      	ldrh	r2, [r7, #6]
 800a036:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	88ba      	ldrh	r2, [r7, #4]
 800a03c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a03e:	8b3b      	ldrh	r3, [r7, #24]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	7f3a      	ldrb	r2, [r7, #28]
 800a04a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	73da      	strb	r2, [r3, #15]
}
 800a058:	bf00      	nop
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af02      	add	r7, sp, #8
 800a06a:	4603      	mov	r3, r0
 800a06c:	71fb      	strb	r3, [r7, #7]
 800a06e:	460b      	mov	r3, r1
 800a070:	80bb      	strh	r3, [r7, #4]
 800a072:	4613      	mov	r3, r2
 800a074:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a07a:	887b      	ldrh	r3, [r7, #2]
 800a07c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a080:	d07f      	beq.n	800a182 <pbuf_alloc+0x11e>
 800a082:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a086:	f300 80c8 	bgt.w	800a21a <pbuf_alloc+0x1b6>
 800a08a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a08e:	d010      	beq.n	800a0b2 <pbuf_alloc+0x4e>
 800a090:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a094:	f300 80c1 	bgt.w	800a21a <pbuf_alloc+0x1b6>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d002      	beq.n	800a0a2 <pbuf_alloc+0x3e>
 800a09c:	2b41      	cmp	r3, #65	; 0x41
 800a09e:	f040 80bc 	bne.w	800a21a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a0a2:	887a      	ldrh	r2, [r7, #2]
 800a0a4:	88bb      	ldrh	r3, [r7, #4]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	f000 f8d1 	bl	800a250 <pbuf_alloc_reference>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a0b0:	e0bd      	b.n	800a22e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a0ba:	88bb      	ldrh	r3, [r7, #4]
 800a0bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a0be:	200c      	movs	r0, #12
 800a0c0:	f7ff fbf6 	bl	80098b0 <memp_malloc>
 800a0c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d109      	bne.n	800a0e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a0cc:	f7ff ff76 	bl	8009fbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800a0d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0d8:	f000 faa8 	bl	800a62c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e0a7      	b.n	800a230 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a0e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0e2:	3303      	adds	r3, #3
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f023 0303 	bic.w	r3, r3, #3
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	8b7a      	ldrh	r2, [r7, #26]
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	bf28      	it	cs
 800a0f8:	4613      	movcs	r3, r2
 800a0fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a0fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0fe:	3310      	adds	r3, #16
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	4413      	add	r3, r2
 800a104:	3303      	adds	r3, #3
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	4618      	mov	r0, r3
 800a10c:	89f9      	ldrh	r1, [r7, #14]
 800a10e:	8b7a      	ldrh	r2, [r7, #26]
 800a110:	2300      	movs	r3, #0
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	887b      	ldrh	r3, [r7, #2]
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	460b      	mov	r3, r1
 800a11a:	4601      	mov	r1, r0
 800a11c:	6938      	ldr	r0, [r7, #16]
 800a11e:	f7ff ff77 	bl	800a010 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d006      	beq.n	800a13c <pbuf_alloc+0xd8>
 800a12e:	4b42      	ldr	r3, [pc, #264]	; (800a238 <pbuf_alloc+0x1d4>)
 800a130:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a134:	4941      	ldr	r1, [pc, #260]	; (800a23c <pbuf_alloc+0x1d8>)
 800a136:	4842      	ldr	r0, [pc, #264]	; (800a240 <pbuf_alloc+0x1dc>)
 800a138:	f00a ffe6 	bl	8015108 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a13c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a13e:	3303      	adds	r3, #3
 800a140:	f023 0303 	bic.w	r3, r3, #3
 800a144:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a148:	d106      	bne.n	800a158 <pbuf_alloc+0xf4>
 800a14a:	4b3b      	ldr	r3, [pc, #236]	; (800a238 <pbuf_alloc+0x1d4>)
 800a14c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a150:	493c      	ldr	r1, [pc, #240]	; (800a244 <pbuf_alloc+0x1e0>)
 800a152:	483b      	ldr	r0, [pc, #236]	; (800a240 <pbuf_alloc+0x1dc>)
 800a154:	f00a ffd8 	bl	8015108 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
 800a162:	e002      	b.n	800a16a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a16e:	8b7a      	ldrh	r2, [r7, #26]
 800a170:	89fb      	ldrh	r3, [r7, #14]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a17a:	8b7b      	ldrh	r3, [r7, #26]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d19e      	bne.n	800a0be <pbuf_alloc+0x5a>
      break;
 800a180:	e055      	b.n	800a22e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a182:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a184:	3303      	adds	r3, #3
 800a186:	b29b      	uxth	r3, r3
 800a188:	f023 0303 	bic.w	r3, r3, #3
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	88bb      	ldrh	r3, [r7, #4]
 800a190:	3303      	adds	r3, #3
 800a192:	b29b      	uxth	r3, r3
 800a194:	f023 0303 	bic.w	r3, r3, #3
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4413      	add	r3, r2
 800a19c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a19e:	8b3b      	ldrh	r3, [r7, #24]
 800a1a0:	3310      	adds	r3, #16
 800a1a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a1a4:	8b3a      	ldrh	r2, [r7, #24]
 800a1a6:	88bb      	ldrh	r3, [r7, #4]
 800a1a8:	3303      	adds	r3, #3
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d306      	bcc.n	800a1c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a1b2:	8afa      	ldrh	r2, [r7, #22]
 800a1b4:	88bb      	ldrh	r3, [r7, #4]
 800a1b6:	3303      	adds	r3, #3
 800a1b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d201      	bcs.n	800a1c4 <pbuf_alloc+0x160>
        return NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e035      	b.n	800a230 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a1c4:	8afb      	ldrh	r3, [r7, #22]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f9ce 	bl	8009568 <mem_malloc>
 800a1cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <pbuf_alloc+0x174>
        return NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e02b      	b.n	800a230 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a1d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1da:	3310      	adds	r3, #16
 800a1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1de:	4413      	add	r3, r2
 800a1e0:	3303      	adds	r3, #3
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	88b9      	ldrh	r1, [r7, #4]
 800a1ea:	88ba      	ldrh	r2, [r7, #4]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	887b      	ldrh	r3, [r7, #2]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1fa:	f7ff ff09 	bl	800a010 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d010      	beq.n	800a22c <pbuf_alloc+0x1c8>
 800a20a:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <pbuf_alloc+0x1d4>)
 800a20c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a210:	490d      	ldr	r1, [pc, #52]	; (800a248 <pbuf_alloc+0x1e4>)
 800a212:	480b      	ldr	r0, [pc, #44]	; (800a240 <pbuf_alloc+0x1dc>)
 800a214:	f00a ff78 	bl	8015108 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a218:	e008      	b.n	800a22c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <pbuf_alloc+0x1d4>)
 800a21c:	f240 1227 	movw	r2, #295	; 0x127
 800a220:	490a      	ldr	r1, [pc, #40]	; (800a24c <pbuf_alloc+0x1e8>)
 800a222:	4807      	ldr	r0, [pc, #28]	; (800a240 <pbuf_alloc+0x1dc>)
 800a224:	f00a ff70 	bl	8015108 <iprintf>
      return NULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	e001      	b.n	800a230 <pbuf_alloc+0x1cc>
      break;
 800a22c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a230:	4618      	mov	r0, r3
 800a232:	3728      	adds	r7, #40	; 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	080166ec 	.word	0x080166ec
 800a23c:	0801671c 	.word	0x0801671c
 800a240:	0801674c 	.word	0x0801674c
 800a244:	08016774 	.word	0x08016774
 800a248:	080167a8 	.word	0x080167a8
 800a24c:	080167d4 	.word	0x080167d4

0800a250 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af02      	add	r7, sp, #8
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	807b      	strh	r3, [r7, #2]
 800a25c:	4613      	mov	r3, r2
 800a25e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a260:	883b      	ldrh	r3, [r7, #0]
 800a262:	2b41      	cmp	r3, #65	; 0x41
 800a264:	d009      	beq.n	800a27a <pbuf_alloc_reference+0x2a>
 800a266:	883b      	ldrh	r3, [r7, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d006      	beq.n	800a27a <pbuf_alloc_reference+0x2a>
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <pbuf_alloc_reference+0x5c>)
 800a26e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a272:	490f      	ldr	r1, [pc, #60]	; (800a2b0 <pbuf_alloc_reference+0x60>)
 800a274:	480f      	ldr	r0, [pc, #60]	; (800a2b4 <pbuf_alloc_reference+0x64>)
 800a276:	f00a ff47 	bl	8015108 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a27a:	200b      	movs	r0, #11
 800a27c:	f7ff fb18 	bl	80098b0 <memp_malloc>
 800a280:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	e00b      	b.n	800a2a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a28c:	8879      	ldrh	r1, [r7, #2]
 800a28e:	887a      	ldrh	r2, [r7, #2]
 800a290:	2300      	movs	r3, #0
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	883b      	ldrh	r3, [r7, #0]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	460b      	mov	r3, r1
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff feb7 	bl	800a010 <pbuf_init_alloced_pbuf>
  return p;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	080166ec 	.word	0x080166ec
 800a2b0:	080167f0 	.word	0x080167f0
 800a2b4:	0801674c 	.word	0x0801674c

0800a2b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	607b      	str	r3, [r7, #4]
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	81bb      	strh	r3, [r7, #12]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a2d0:	8a7b      	ldrh	r3, [r7, #18]
 800a2d2:	3303      	adds	r3, #3
 800a2d4:	f023 0203 	bic.w	r2, r3, #3
 800a2d8:	89bb      	ldrh	r3, [r7, #12]
 800a2da:	441a      	add	r2, r3
 800a2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d901      	bls.n	800a2e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e018      	b.n	800a318 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a2ec:	8a7b      	ldrh	r3, [r7, #18]
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	6a3a      	ldr	r2, [r7, #32]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	e001      	b.n	800a300 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	89b9      	ldrh	r1, [r7, #12]
 800a304:	89ba      	ldrh	r2, [r7, #12]
 800a306:	2302      	movs	r3, #2
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	897b      	ldrh	r3, [r7, #10]
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	460b      	mov	r3, r1
 800a310:	6979      	ldr	r1, [r7, #20]
 800a312:	f7ff fe7d 	bl	800a010 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a316:	687b      	ldr	r3, [r7, #4]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <pbuf_realloc+0x20>
 800a332:	4b3a      	ldr	r3, [pc, #232]	; (800a41c <pbuf_realloc+0xfc>)
 800a334:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a338:	4939      	ldr	r1, [pc, #228]	; (800a420 <pbuf_realloc+0x100>)
 800a33a:	483a      	ldr	r0, [pc, #232]	; (800a424 <pbuf_realloc+0x104>)
 800a33c:	f00a fee4 	bl	8015108 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	891b      	ldrh	r3, [r3, #8]
 800a344:	887a      	ldrh	r2, [r7, #2]
 800a346:	429a      	cmp	r2, r3
 800a348:	d263      	bcs.n	800a412 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	891a      	ldrh	r2, [r3, #8]
 800a34e:	887b      	ldrh	r3, [r7, #2]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a354:	887b      	ldrh	r3, [r7, #2]
 800a356:	817b      	strh	r3, [r7, #10]
  q = p;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a35c:	e018      	b.n	800a390 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	895b      	ldrh	r3, [r3, #10]
 800a362:	897a      	ldrh	r2, [r7, #10]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	891a      	ldrh	r2, [r3, #8]
 800a36c:	893b      	ldrh	r3, [r7, #8]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	b29a      	uxth	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <pbuf_realloc+0x70>
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <pbuf_realloc+0xfc>)
 800a384:	f240 12af 	movw	r2, #431	; 0x1af
 800a388:	4927      	ldr	r1, [pc, #156]	; (800a428 <pbuf_realloc+0x108>)
 800a38a:	4826      	ldr	r0, [pc, #152]	; (800a424 <pbuf_realloc+0x104>)
 800a38c:	f00a febc 	bl	8015108 <iprintf>
  while (rem_len > q->len) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	895b      	ldrh	r3, [r3, #10]
 800a394:	897a      	ldrh	r2, [r7, #10]
 800a396:	429a      	cmp	r2, r3
 800a398:	d8e1      	bhi.n	800a35e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	7b1b      	ldrb	r3, [r3, #12]
 800a39e:	f003 030f 	and.w	r3, r3, #15
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d121      	bne.n	800a3ea <pbuf_realloc+0xca>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	895b      	ldrh	r3, [r3, #10]
 800a3aa:	897a      	ldrh	r2, [r7, #10]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d01c      	beq.n	800a3ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	7b5b      	ldrb	r3, [r3, #13]
 800a3b4:	f003 0302 	and.w	r3, r3, #2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d116      	bne.n	800a3ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	897b      	ldrh	r3, [r7, #10]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7fe ffc0 	bl	8009354 <mem_trim>
 800a3d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <pbuf_realloc+0xca>
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <pbuf_realloc+0xfc>)
 800a3de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a3e2:	4912      	ldr	r1, [pc, #72]	; (800a42c <pbuf_realloc+0x10c>)
 800a3e4:	480f      	ldr	r0, [pc, #60]	; (800a424 <pbuf_realloc+0x104>)
 800a3e6:	f00a fe8f 	bl	8015108 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	897a      	ldrh	r2, [r7, #10]
 800a3ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	895a      	ldrh	r2, [r3, #10]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 f911 	bl	800a62c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e000      	b.n	800a414 <pbuf_realloc+0xf4>
    return;
 800a412:	bf00      	nop

}
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	080166ec 	.word	0x080166ec
 800a420:	08016804 	.word	0x08016804
 800a424:	0801674c 	.word	0x0801674c
 800a428:	0801681c 	.word	0x0801681c
 800a42c:	08016834 	.word	0x08016834

0800a430 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <pbuf_add_header_impl+0x22>
 800a444:	4b2b      	ldr	r3, [pc, #172]	; (800a4f4 <pbuf_add_header_impl+0xc4>)
 800a446:	f240 12df 	movw	r2, #479	; 0x1df
 800a44a:	492b      	ldr	r1, [pc, #172]	; (800a4f8 <pbuf_add_header_impl+0xc8>)
 800a44c:	482b      	ldr	r0, [pc, #172]	; (800a4fc <pbuf_add_header_impl+0xcc>)
 800a44e:	f00a fe5b 	bl	8015108 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <pbuf_add_header_impl+0x30>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45e:	d301      	bcc.n	800a464 <pbuf_add_header_impl+0x34>
    return 1;
 800a460:	2301      	movs	r3, #1
 800a462:	e043      	b.n	800a4ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <pbuf_add_header_impl+0x3e>
    return 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	e03e      	b.n	800a4ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	891a      	ldrh	r2, [r3, #8]
 800a476:	8a7b      	ldrh	r3, [r7, #18]
 800a478:	4413      	add	r3, r2
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	8a7a      	ldrh	r2, [r7, #18]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d901      	bls.n	800a486 <pbuf_add_header_impl+0x56>
    return 1;
 800a482:	2301      	movs	r3, #1
 800a484:	e032      	b.n	800a4ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	7b1b      	ldrb	r3, [r3, #12]
 800a48a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a48c:	8a3b      	ldrh	r3, [r7, #16]
 800a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00c      	beq.n	800a4b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	425b      	negs	r3, r3
 800a49e:	4413      	add	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d20d      	bcs.n	800a4c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e01d      	b.n	800a4ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	425b      	negs	r3, r3
 800a4be:	4413      	add	r3, r2
 800a4c0:	617b      	str	r3, [r7, #20]
 800a4c2:	e001      	b.n	800a4c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e011      	b.n	800a4ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	895a      	ldrh	r2, [r3, #10]
 800a4d2:	8a7b      	ldrh	r3, [r7, #18]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	891a      	ldrh	r2, [r3, #8]
 800a4e0:	8a7b      	ldrh	r3, [r7, #18]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	080166ec 	.word	0x080166ec
 800a4f8:	08016850 	.word	0x08016850
 800a4fc:	0801674c 	.word	0x0801674c

0800a500 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a50a:	2200      	movs	r2, #0
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff ff8e 	bl	800a430 <pbuf_add_header_impl>
 800a514:	4603      	mov	r3, r0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d106      	bne.n	800a53e <pbuf_remove_header+0x1e>
 800a530:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <pbuf_remove_header+0x94>)
 800a532:	f240 224b 	movw	r2, #587	; 0x24b
 800a536:	4920      	ldr	r1, [pc, #128]	; (800a5b8 <pbuf_remove_header+0x98>)
 800a538:	4820      	ldr	r0, [pc, #128]	; (800a5bc <pbuf_remove_header+0x9c>)
 800a53a:	f00a fde5 	bl	8015108 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <pbuf_remove_header+0x2c>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54a:	d301      	bcc.n	800a550 <pbuf_remove_header+0x30>
    return 1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e02c      	b.n	800a5aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <pbuf_remove_header+0x3a>
    return 0;
 800a556:	2300      	movs	r3, #0
 800a558:	e027      	b.n	800a5aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	895b      	ldrh	r3, [r3, #10]
 800a562:	89fa      	ldrh	r2, [r7, #14]
 800a564:	429a      	cmp	r2, r3
 800a566:	d908      	bls.n	800a57a <pbuf_remove_header+0x5a>
 800a568:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <pbuf_remove_header+0x94>)
 800a56a:	f240 2255 	movw	r2, #597	; 0x255
 800a56e:	4914      	ldr	r1, [pc, #80]	; (800a5c0 <pbuf_remove_header+0xa0>)
 800a570:	4812      	ldr	r0, [pc, #72]	; (800a5bc <pbuf_remove_header+0x9c>)
 800a572:	f00a fdc9 	bl	8015108 <iprintf>
 800a576:	2301      	movs	r3, #1
 800a578:	e017      	b.n	800a5aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	441a      	add	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	895a      	ldrh	r2, [r3, #10]
 800a590:	89fb      	ldrh	r3, [r7, #14]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	b29a      	uxth	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	891a      	ldrh	r2, [r3, #8]
 800a59e:	89fb      	ldrh	r3, [r7, #14]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	080166ec 	.word	0x080166ec
 800a5b8:	08016850 	.word	0x08016850
 800a5bc:	0801674c 	.word	0x0801674c
 800a5c0:	0801685c 	.word	0x0801685c

0800a5c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	807b      	strh	r3, [r7, #2]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a5d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da08      	bge.n	800a5ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a5dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff ff9b 	bl	800a520 <pbuf_remove_header>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	e007      	b.n	800a5fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a5ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5f2:	787a      	ldrb	r2, [r7, #1]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff ff1a 	bl	800a430 <pbuf_add_header_impl>
 800a5fc:	4603      	mov	r3, r0
  }
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a616:	2201      	movs	r2, #1
 800a618:	4619      	mov	r1, r3
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7ff ffd2 	bl	800a5c4 <pbuf_header_impl>
 800a620:	4603      	mov	r3, r0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <pbuf_free+0x22>
 800a640:	4b3b      	ldr	r3, [pc, #236]	; (800a730 <pbuf_free+0x104>)
 800a642:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a646:	493b      	ldr	r1, [pc, #236]	; (800a734 <pbuf_free+0x108>)
 800a648:	483b      	ldr	r0, [pc, #236]	; (800a738 <pbuf_free+0x10c>)
 800a64a:	f00a fd5d 	bl	8015108 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	e069      	b.n	800a726 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a656:	e062      	b.n	800a71e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a658:	f00a fc38 	bl	8014ecc <sys_arch_protect>
 800a65c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	7b9b      	ldrb	r3, [r3, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <pbuf_free+0x48>
 800a666:	4b32      	ldr	r3, [pc, #200]	; (800a730 <pbuf_free+0x104>)
 800a668:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a66c:	4933      	ldr	r1, [pc, #204]	; (800a73c <pbuf_free+0x110>)
 800a66e:	4832      	ldr	r0, [pc, #200]	; (800a738 <pbuf_free+0x10c>)
 800a670:	f00a fd4a 	bl	8015108 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7b9b      	ldrb	r3, [r3, #14]
 800a678:	3b01      	subs	r3, #1
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	739a      	strb	r2, [r3, #14]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7b9b      	ldrb	r3, [r3, #14]
 800a684:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a686:	69b8      	ldr	r0, [r7, #24]
 800a688:	f00a fc2e 	bl	8014ee8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a68c:	7dfb      	ldrb	r3, [r7, #23]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d143      	bne.n	800a71a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	7b1b      	ldrb	r3, [r3, #12]
 800a69c:	f003 030f 	and.w	r3, r3, #15
 800a6a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	7b5b      	ldrb	r3, [r3, #13]
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d011      	beq.n	800a6d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <pbuf_free+0x9c>
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <pbuf_free+0x104>)
 800a6bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a6c0:	491f      	ldr	r1, [pc, #124]	; (800a740 <pbuf_free+0x114>)
 800a6c2:	481d      	ldr	r0, [pc, #116]	; (800a738 <pbuf_free+0x10c>)
 800a6c4:	f00a fd20 	bl	8015108 <iprintf>
        pc->custom_free_function(p);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
 800a6d0:	e01d      	b.n	800a70e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d104      	bne.n	800a6e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	200c      	movs	r0, #12
 800a6dc:	f7ff f95e 	bl	800999c <memp_free>
 800a6e0:	e015      	b.n	800a70e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d104      	bne.n	800a6f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	200b      	movs	r0, #11
 800a6ec:	f7ff f956 	bl	800999c <memp_free>
 800a6f0:	e00d      	b.n	800a70e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d103      	bne.n	800a700 <pbuf_free+0xd4>
          mem_free(p);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7fe fd9b 	bl	8009234 <mem_free>
 800a6fe:	e006      	b.n	800a70e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <pbuf_free+0x104>)
 800a702:	f240 320f 	movw	r2, #783	; 0x30f
 800a706:	490f      	ldr	r1, [pc, #60]	; (800a744 <pbuf_free+0x118>)
 800a708:	480b      	ldr	r0, [pc, #44]	; (800a738 <pbuf_free+0x10c>)
 800a70a:	f00a fcfd 	bl	8015108 <iprintf>
        }
      }
      count++;
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
 800a710:	3301      	adds	r3, #1
 800a712:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	e001      	b.n	800a71e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d199      	bne.n	800a658 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a724:	7ffb      	ldrb	r3, [r7, #31]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3720      	adds	r7, #32
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	080166ec 	.word	0x080166ec
 800a734:	08016850 	.word	0x08016850
 800a738:	0801674c 	.word	0x0801674c
 800a73c:	0801687c 	.word	0x0801687c
 800a740:	08016894 	.word	0x08016894
 800a744:	080168b8 	.word	0x080168b8

0800a748 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a754:	e005      	b.n	800a762 <pbuf_clen+0x1a>
    ++len;
 800a756:	89fb      	ldrh	r3, [r7, #14]
 800a758:	3301      	adds	r3, #1
 800a75a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1f6      	bne.n	800a756 <pbuf_clen+0xe>
  }
  return len;
 800a768:	89fb      	ldrh	r3, [r7, #14]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a786:	f00a fba1 	bl	8014ecc <sys_arch_protect>
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7b9b      	ldrb	r3, [r3, #14]
 800a790:	3301      	adds	r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	739a      	strb	r2, [r3, #14]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f00a fba5 	bl	8014ee8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	7b9b      	ldrb	r3, [r3, #14]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <pbuf_ref+0x3c>
 800a7a6:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <pbuf_ref+0x44>)
 800a7a8:	f240 3242 	movw	r2, #834	; 0x342
 800a7ac:	4904      	ldr	r1, [pc, #16]	; (800a7c0 <pbuf_ref+0x48>)
 800a7ae:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <pbuf_ref+0x4c>)
 800a7b0:	f00a fcaa 	bl	8015108 <iprintf>
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	080166ec 	.word	0x080166ec
 800a7c0:	080168cc 	.word	0x080168cc
 800a7c4:	0801674c 	.word	0x0801674c

0800a7c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <pbuf_cat+0x16>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <pbuf_cat+0x26>
 800a7de:	4b20      	ldr	r3, [pc, #128]	; (800a860 <pbuf_cat+0x98>)
 800a7e0:	f240 3259 	movw	r2, #857	; 0x359
 800a7e4:	491f      	ldr	r1, [pc, #124]	; (800a864 <pbuf_cat+0x9c>)
 800a7e6:	4820      	ldr	r0, [pc, #128]	; (800a868 <pbuf_cat+0xa0>)
 800a7e8:	f00a fc8e 	bl	8015108 <iprintf>
 800a7ec:	e034      	b.n	800a858 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e00a      	b.n	800a80a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	891a      	ldrh	r2, [r3, #8]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	891b      	ldrh	r3, [r3, #8]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f0      	bne.n	800a7f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	891a      	ldrh	r2, [r3, #8]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	895b      	ldrh	r3, [r3, #10]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d006      	beq.n	800a82c <pbuf_cat+0x64>
 800a81e:	4b10      	ldr	r3, [pc, #64]	; (800a860 <pbuf_cat+0x98>)
 800a820:	f240 3262 	movw	r2, #866	; 0x362
 800a824:	4911      	ldr	r1, [pc, #68]	; (800a86c <pbuf_cat+0xa4>)
 800a826:	4810      	ldr	r0, [pc, #64]	; (800a868 <pbuf_cat+0xa0>)
 800a828:	f00a fc6e 	bl	8015108 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d006      	beq.n	800a842 <pbuf_cat+0x7a>
 800a834:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <pbuf_cat+0x98>)
 800a836:	f240 3263 	movw	r2, #867	; 0x363
 800a83a:	490d      	ldr	r1, [pc, #52]	; (800a870 <pbuf_cat+0xa8>)
 800a83c:	480a      	ldr	r0, [pc, #40]	; (800a868 <pbuf_cat+0xa0>)
 800a83e:	f00a fc63 	bl	8015108 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	891a      	ldrh	r2, [r3, #8]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	891b      	ldrh	r3, [r3, #8]
 800a84a:	4413      	add	r3, r2
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	080166ec 	.word	0x080166ec
 800a864:	080168e0 	.word	0x080168e0
 800a868:	0801674c 	.word	0x0801674c
 800a86c:	08016918 	.word	0x08016918
 800a870:	08016948 	.word	0x08016948

0800a874 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff ffa1 	bl	800a7c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a886:	6838      	ldr	r0, [r7, #0]
 800a888:	f7ff ff76 	bl	800a778 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d008      	beq.n	800a8be <pbuf_copy+0x2a>
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <pbuf_copy+0x2a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	891a      	ldrh	r2, [r3, #8]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	891b      	ldrh	r3, [r3, #8]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d209      	bcs.n	800a8d2 <pbuf_copy+0x3e>
 800a8be:	4b57      	ldr	r3, [pc, #348]	; (800aa1c <pbuf_copy+0x188>)
 800a8c0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a8c4:	4956      	ldr	r1, [pc, #344]	; (800aa20 <pbuf_copy+0x18c>)
 800a8c6:	4857      	ldr	r0, [pc, #348]	; (800aa24 <pbuf_copy+0x190>)
 800a8c8:	f00a fc1e 	bl	8015108 <iprintf>
 800a8cc:	f06f 030f 	mvn.w	r3, #15
 800a8d0:	e09f      	b.n	800aa12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	895b      	ldrh	r3, [r3, #10]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	895b      	ldrh	r3, [r3, #10]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1acb      	subs	r3, r1, r3
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d306      	bcc.n	800a8f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	895b      	ldrh	r3, [r3, #10]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	e005      	b.n	800a904 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	895b      	ldrh	r3, [r3, #10]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	18d0      	adds	r0, r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4619      	mov	r1, r3
 800a918:	f00a fd27 	bl	801536a <memcpy>
    offset_to += len;
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	4413      	add	r3, r2
 800a922:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	895b      	ldrh	r3, [r3, #10]
 800a930:	461a      	mov	r2, r3
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	4293      	cmp	r3, r2
 800a936:	d906      	bls.n	800a946 <pbuf_copy+0xb2>
 800a938:	4b38      	ldr	r3, [pc, #224]	; (800aa1c <pbuf_copy+0x188>)
 800a93a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a93e:	493a      	ldr	r1, [pc, #232]	; (800aa28 <pbuf_copy+0x194>)
 800a940:	4838      	ldr	r0, [pc, #224]	; (800aa24 <pbuf_copy+0x190>)
 800a942:	f00a fbe1 	bl	8015108 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	895b      	ldrh	r3, [r3, #10]
 800a94a:	461a      	mov	r2, r3
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4293      	cmp	r3, r2
 800a950:	d906      	bls.n	800a960 <pbuf_copy+0xcc>
 800a952:	4b32      	ldr	r3, [pc, #200]	; (800aa1c <pbuf_copy+0x188>)
 800a954:	f240 32da 	movw	r2, #986	; 0x3da
 800a958:	4934      	ldr	r1, [pc, #208]	; (800aa2c <pbuf_copy+0x198>)
 800a95a:	4832      	ldr	r0, [pc, #200]	; (800aa24 <pbuf_copy+0x190>)
 800a95c:	f00a fbd4 	bl	8015108 <iprintf>
    if (offset_from >= p_from->len) {
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	895b      	ldrh	r3, [r3, #10]
 800a964:	461a      	mov	r2, r3
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	4293      	cmp	r3, r2
 800a96a:	d304      	bcc.n	800a976 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	895b      	ldrh	r3, [r3, #10]
 800a97a:	461a      	mov	r2, r3
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	4293      	cmp	r3, r2
 800a980:	d114      	bne.n	800a9ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <pbuf_copy+0x118>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <pbuf_copy+0x118>
 800a998:	4b20      	ldr	r3, [pc, #128]	; (800aa1c <pbuf_copy+0x188>)
 800a99a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a99e:	4924      	ldr	r1, [pc, #144]	; (800aa30 <pbuf_copy+0x19c>)
 800a9a0:	4820      	ldr	r0, [pc, #128]	; (800aa24 <pbuf_copy+0x190>)
 800a9a2:	f00a fbb1 	bl	8015108 <iprintf>
 800a9a6:	f06f 030f 	mvn.w	r3, #15
 800a9aa:	e032      	b.n	800aa12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d013      	beq.n	800a9da <pbuf_copy+0x146>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	895a      	ldrh	r2, [r3, #10]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	891b      	ldrh	r3, [r3, #8]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d10d      	bne.n	800a9da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <pbuf_copy+0x146>
 800a9c6:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <pbuf_copy+0x188>)
 800a9c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a9cc:	4919      	ldr	r1, [pc, #100]	; (800aa34 <pbuf_copy+0x1a0>)
 800a9ce:	4815      	ldr	r0, [pc, #84]	; (800aa24 <pbuf_copy+0x190>)
 800a9d0:	f00a fb9a 	bl	8015108 <iprintf>
 800a9d4:	f06f 0305 	mvn.w	r3, #5
 800a9d8:	e01b      	b.n	800aa12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d013      	beq.n	800aa08 <pbuf_copy+0x174>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	895a      	ldrh	r2, [r3, #10]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d10d      	bne.n	800aa08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d009      	beq.n	800aa08 <pbuf_copy+0x174>
 800a9f4:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <pbuf_copy+0x188>)
 800a9f6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a9fa:	490e      	ldr	r1, [pc, #56]	; (800aa34 <pbuf_copy+0x1a0>)
 800a9fc:	4809      	ldr	r0, [pc, #36]	; (800aa24 <pbuf_copy+0x190>)
 800a9fe:	f00a fb83 	bl	8015108 <iprintf>
 800aa02:	f06f 0305 	mvn.w	r3, #5
 800aa06:	e004      	b.n	800aa12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f47f af61 	bne.w	800a8d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	080166ec 	.word	0x080166ec
 800aa20:	08016994 	.word	0x08016994
 800aa24:	0801674c 	.word	0x0801674c
 800aa28:	080169c4 	.word	0x080169c4
 800aa2c:	080169dc 	.word	0x080169dc
 800aa30:	080169f8 	.word	0x080169f8
 800aa34:	08016a08 	.word	0x08016a08

0800aa38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4611      	mov	r1, r2
 800aa44:	461a      	mov	r2, r3
 800aa46:	460b      	mov	r3, r1
 800aa48:	80fb      	strh	r3, [r7, #6]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d108      	bne.n	800aa6e <pbuf_copy_partial+0x36>
 800aa5c:	4b2b      	ldr	r3, [pc, #172]	; (800ab0c <pbuf_copy_partial+0xd4>)
 800aa5e:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa62:	492b      	ldr	r1, [pc, #172]	; (800ab10 <pbuf_copy_partial+0xd8>)
 800aa64:	482b      	ldr	r0, [pc, #172]	; (800ab14 <pbuf_copy_partial+0xdc>)
 800aa66:	f00a fb4f 	bl	8015108 <iprintf>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e04a      	b.n	800ab04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d108      	bne.n	800aa86 <pbuf_copy_partial+0x4e>
 800aa74:	4b25      	ldr	r3, [pc, #148]	; (800ab0c <pbuf_copy_partial+0xd4>)
 800aa76:	f240 420b 	movw	r2, #1035	; 0x40b
 800aa7a:	4927      	ldr	r1, [pc, #156]	; (800ab18 <pbuf_copy_partial+0xe0>)
 800aa7c:	4825      	ldr	r0, [pc, #148]	; (800ab14 <pbuf_copy_partial+0xdc>)
 800aa7e:	f00a fb43 	bl	8015108 <iprintf>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e03e      	b.n	800ab04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	61fb      	str	r3, [r7, #28]
 800aa8a:	e034      	b.n	800aaf6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800aa8c:	88bb      	ldrh	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <pbuf_copy_partial+0x70>
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	895b      	ldrh	r3, [r3, #10]
 800aa96:	88ba      	ldrh	r2, [r7, #4]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d305      	bcc.n	800aaa8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	895b      	ldrh	r3, [r3, #10]
 800aaa0:	88ba      	ldrh	r2, [r7, #4]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	80bb      	strh	r3, [r7, #4]
 800aaa6:	e023      	b.n	800aaf0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	895a      	ldrh	r2, [r3, #10]
 800aaac:	88bb      	ldrh	r3, [r7, #4]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800aab2:	8b3a      	ldrh	r2, [r7, #24]
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d901      	bls.n	800aabe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aabe:	8b7b      	ldrh	r3, [r7, #26]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	18d0      	adds	r0, r2, r3
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	88bb      	ldrh	r3, [r7, #4]
 800aaca:	4413      	add	r3, r2
 800aacc:	8b3a      	ldrh	r2, [r7, #24]
 800aace:	4619      	mov	r1, r3
 800aad0:	f00a fc4b 	bl	801536a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aad4:	8afa      	ldrh	r2, [r7, #22]
 800aad6:	8b3b      	ldrh	r3, [r7, #24]
 800aad8:	4413      	add	r3, r2
 800aada:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800aadc:	8b7a      	ldrh	r2, [r7, #26]
 800aade:	8b3b      	ldrh	r3, [r7, #24]
 800aae0:	4413      	add	r3, r2
 800aae2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800aae4:	88fa      	ldrh	r2, [r7, #6]
 800aae6:	8b3b      	ldrh	r3, [r7, #24]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <pbuf_copy_partial+0xca>
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1c4      	bne.n	800aa8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ab02:	8afb      	ldrh	r3, [r7, #22]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	080166ec 	.word	0x080166ec
 800ab10:	08016a34 	.word	0x08016a34
 800ab14:	0801674c 	.word	0x0801674c
 800ab18:	08016a54 	.word	0x08016a54

0800ab1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	603a      	str	r2, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	8919      	ldrh	r1, [r3, #8]
 800ab30:	88ba      	ldrh	r2, [r7, #4]
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fa95 	bl	800a064 <pbuf_alloc>
 800ab3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <pbuf_clone+0x2a>
    return NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e011      	b.n	800ab6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7ff fea3 	bl	800a894 <pbuf_copy>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ab52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d006      	beq.n	800ab68 <pbuf_clone+0x4c>
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <pbuf_clone+0x58>)
 800ab5c:	f240 5224 	movw	r2, #1316	; 0x524
 800ab60:	4905      	ldr	r1, [pc, #20]	; (800ab78 <pbuf_clone+0x5c>)
 800ab62:	4806      	ldr	r0, [pc, #24]	; (800ab7c <pbuf_clone+0x60>)
 800ab64:	f00a fad0 	bl	8015108 <iprintf>
  return q;
 800ab68:	68fb      	ldr	r3, [r7, #12]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	080166ec 	.word	0x080166ec
 800ab78:	08016b60 	.word	0x08016b60
 800ab7c:	0801674c 	.word	0x0801674c

0800ab80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ab84:	f00a f9c0 	bl	8014f08 <rand>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	4b01      	ldr	r3, [pc, #4]	; (800aba0 <tcp_init+0x20>)
 800ab9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ab9c:	bf00      	nop
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20000010 	.word	0x20000010

0800aba4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7d1b      	ldrb	r3, [r3, #20]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d105      	bne.n	800abc0 <tcp_free+0x1c>
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <tcp_free+0x2c>)
 800abb6:	22d4      	movs	r2, #212	; 0xd4
 800abb8:	4906      	ldr	r1, [pc, #24]	; (800abd4 <tcp_free+0x30>)
 800abba:	4807      	ldr	r0, [pc, #28]	; (800abd8 <tcp_free+0x34>)
 800abbc:	f00a faa4 	bl	8015108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	2001      	movs	r0, #1
 800abc4:	f7fe feea 	bl	800999c <memp_free>
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	08016bec 	.word	0x08016bec
 800abd4:	08016c1c 	.word	0x08016c1c
 800abd8:	08016c30 	.word	0x08016c30

0800abdc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d105      	bne.n	800abf8 <tcp_free_listen+0x1c>
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <tcp_free_listen+0x2c>)
 800abee:	22df      	movs	r2, #223	; 0xdf
 800abf0:	4906      	ldr	r1, [pc, #24]	; (800ac0c <tcp_free_listen+0x30>)
 800abf2:	4807      	ldr	r0, [pc, #28]	; (800ac10 <tcp_free_listen+0x34>)
 800abf4:	f00a fa88 	bl	8015108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	2002      	movs	r0, #2
 800abfc:	f7fe fece 	bl	800999c <memp_free>
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	08016bec 	.word	0x08016bec
 800ac0c:	08016c58 	.word	0x08016c58
 800ac10:	08016c30 	.word	0x08016c30

0800ac14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ac18:	f000 fea2 	bl	800b960 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ac1c:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <tcp_tmr+0x28>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <tcp_tmr+0x28>)
 800ac26:	701a      	strb	r2, [r3, #0]
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <tcp_tmr+0x28>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ac34:	f000 fb54 	bl	800b2e0 <tcp_slowtmr>
  }
}
 800ac38:	bf00      	nop
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	2000d3d9 	.word	0x2000d3d9

0800ac40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d105      	bne.n	800ac5c <tcp_remove_listener+0x1c>
 800ac50:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <tcp_remove_listener+0x48>)
 800ac52:	22ff      	movs	r2, #255	; 0xff
 800ac54:	490d      	ldr	r1, [pc, #52]	; (800ac8c <tcp_remove_listener+0x4c>)
 800ac56:	480e      	ldr	r0, [pc, #56]	; (800ac90 <tcp_remove_listener+0x50>)
 800ac58:	f00a fa56 	bl	8015108 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e00a      	b.n	800ac78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d102      	bne.n	800ac72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f1      	bne.n	800ac62 <tcp_remove_listener+0x22>
    }
  }
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	08016bec 	.word	0x08016bec
 800ac8c:	08016c74 	.word	0x08016c74
 800ac90:	08016c30 	.word	0x08016c30

0800ac94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <tcp_listen_closed+0x1c>
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <tcp_listen_closed+0x60>)
 800aca4:	f240 1211 	movw	r2, #273	; 0x111
 800aca8:	4913      	ldr	r1, [pc, #76]	; (800acf8 <tcp_listen_closed+0x64>)
 800acaa:	4814      	ldr	r0, [pc, #80]	; (800acfc <tcp_listen_closed+0x68>)
 800acac:	f00a fa2c 	bl	8015108 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7d1b      	ldrb	r3, [r3, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d006      	beq.n	800acc6 <tcp_listen_closed+0x32>
 800acb8:	4b0e      	ldr	r3, [pc, #56]	; (800acf4 <tcp_listen_closed+0x60>)
 800acba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800acbe:	4910      	ldr	r1, [pc, #64]	; (800ad00 <tcp_listen_closed+0x6c>)
 800acc0:	480e      	ldr	r0, [pc, #56]	; (800acfc <tcp_listen_closed+0x68>)
 800acc2:	f00a fa21 	bl	8015108 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800acc6:	2301      	movs	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	e00b      	b.n	800ace4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800accc:	4a0d      	ldr	r2, [pc, #52]	; (800ad04 <tcp_listen_closed+0x70>)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff ffb1 	bl	800ac40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d9f0      	bls.n	800accc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800acea:	bf00      	nop
 800acec:	bf00      	nop
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	08016bec 	.word	0x08016bec
 800acf8:	08016c9c 	.word	0x08016c9c
 800acfc:	08016c30 	.word	0x08016c30
 800ad00:	08016ca8 	.word	0x08016ca8
 800ad04:	08018fd0 	.word	0x08018fd0

0800ad08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ad08:	b5b0      	push	{r4, r5, r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <tcp_close_shutdown+0x20>
 800ad1a:	4b63      	ldr	r3, [pc, #396]	; (800aea8 <tcp_close_shutdown+0x1a0>)
 800ad1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ad20:	4962      	ldr	r1, [pc, #392]	; (800aeac <tcp_close_shutdown+0x1a4>)
 800ad22:	4863      	ldr	r0, [pc, #396]	; (800aeb0 <tcp_close_shutdown+0x1a8>)
 800ad24:	f00a f9f0 	bl	8015108 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ad28:	78fb      	ldrb	r3, [r7, #3]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d066      	beq.n	800adfc <tcp_close_shutdown+0xf4>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	7d1b      	ldrb	r3, [r3, #20]
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d003      	beq.n	800ad3e <tcp_close_shutdown+0x36>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7d1b      	ldrb	r3, [r3, #20]
 800ad3a:	2b07      	cmp	r3, #7
 800ad3c:	d15e      	bne.n	800adfc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d104      	bne.n	800ad50 <tcp_close_shutdown+0x48>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ad4e:	d055      	beq.n	800adfc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8b5b      	ldrh	r3, [r3, #26]
 800ad54:	f003 0310 	and.w	r3, r3, #16
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <tcp_close_shutdown+0x62>
 800ad5c:	4b52      	ldr	r3, [pc, #328]	; (800aea8 <tcp_close_shutdown+0x1a0>)
 800ad5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ad62:	4954      	ldr	r1, [pc, #336]	; (800aeb4 <tcp_close_shutdown+0x1ac>)
 800ad64:	4852      	ldr	r0, [pc, #328]	; (800aeb0 <tcp_close_shutdown+0x1a8>)
 800ad66:	f00a f9cf 	bl	8015108 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad72:	687d      	ldr	r5, [r7, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	8ad2      	ldrh	r2, [r2, #22]
 800ad7c:	6879      	ldr	r1, [r7, #4]
 800ad7e:	8b09      	ldrh	r1, [r1, #24]
 800ad80:	9102      	str	r1, [sp, #8]
 800ad82:	9201      	str	r2, [sp, #4]
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	462b      	mov	r3, r5
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f004 fe91 	bl	800fab4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 f8c6 	bl	800bf24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ad98:	4b47      	ldr	r3, [pc, #284]	; (800aeb8 <tcp_close_shutdown+0x1b0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d105      	bne.n	800adae <tcp_close_shutdown+0xa6>
 800ada2:	4b45      	ldr	r3, [pc, #276]	; (800aeb8 <tcp_close_shutdown+0x1b0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	4a43      	ldr	r2, [pc, #268]	; (800aeb8 <tcp_close_shutdown+0x1b0>)
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	e013      	b.n	800add6 <tcp_close_shutdown+0xce>
 800adae:	4b42      	ldr	r3, [pc, #264]	; (800aeb8 <tcp_close_shutdown+0x1b0>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e00c      	b.n	800add0 <tcp_close_shutdown+0xc8>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d104      	bne.n	800adca <tcp_close_shutdown+0xc2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	60da      	str	r2, [r3, #12]
 800adc8:	e005      	b.n	800add6 <tcp_close_shutdown+0xce>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1ef      	bne.n	800adb6 <tcp_close_shutdown+0xae>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	60da      	str	r2, [r3, #12]
 800addc:	4b37      	ldr	r3, [pc, #220]	; (800aebc <tcp_close_shutdown+0x1b4>)
 800adde:	2201      	movs	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ade2:	4b37      	ldr	r3, [pc, #220]	; (800aec0 <tcp_close_shutdown+0x1b8>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d102      	bne.n	800adf2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800adec:	f003 fd5e 	bl	800e8ac <tcp_trigger_input_pcb_close>
 800adf0:	e002      	b.n	800adf8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff fed6 	bl	800aba4 <tcp_free>
      }
      return ERR_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	e050      	b.n	800ae9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7d1b      	ldrb	r3, [r3, #20]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d03b      	beq.n	800ae7c <tcp_close_shutdown+0x174>
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	dc44      	bgt.n	800ae92 <tcp_close_shutdown+0x18a>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <tcp_close_shutdown+0x10a>
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d02a      	beq.n	800ae66 <tcp_close_shutdown+0x15e>
 800ae10:	e03f      	b.n	800ae92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	8adb      	ldrh	r3, [r3, #22]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d021      	beq.n	800ae5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae1a:	4b2a      	ldr	r3, [pc, #168]	; (800aec4 <tcp_close_shutdown+0x1bc>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d105      	bne.n	800ae30 <tcp_close_shutdown+0x128>
 800ae24:	4b27      	ldr	r3, [pc, #156]	; (800aec4 <tcp_close_shutdown+0x1bc>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	4a26      	ldr	r2, [pc, #152]	; (800aec4 <tcp_close_shutdown+0x1bc>)
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	e013      	b.n	800ae58 <tcp_close_shutdown+0x150>
 800ae30:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <tcp_close_shutdown+0x1bc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	e00c      	b.n	800ae52 <tcp_close_shutdown+0x14a>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d104      	bne.n	800ae4c <tcp_close_shutdown+0x144>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	60da      	str	r2, [r3, #12]
 800ae4a:	e005      	b.n	800ae58 <tcp_close_shutdown+0x150>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	60bb      	str	r3, [r7, #8]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1ef      	bne.n	800ae38 <tcp_close_shutdown+0x130>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fea0 	bl	800aba4 <tcp_free>
      break;
 800ae64:	e01a      	b.n	800ae9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff ff14 	bl	800ac94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	4816      	ldr	r0, [pc, #88]	; (800aec8 <tcp_close_shutdown+0x1c0>)
 800ae70:	f001 f8a8 	bl	800bfc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff feb1 	bl	800abdc <tcp_free_listen>
      break;
 800ae7a:	e00f      	b.n	800ae9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	480e      	ldr	r0, [pc, #56]	; (800aeb8 <tcp_close_shutdown+0x1b0>)
 800ae80:	f001 f8a0 	bl	800bfc4 <tcp_pcb_remove>
 800ae84:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <tcp_close_shutdown+0x1b4>)
 800ae86:	2201      	movs	r2, #1
 800ae88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fe8a 	bl	800aba4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ae90:	e004      	b.n	800ae9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f81a 	bl	800aecc <tcp_close_shutdown_fin>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	e000      	b.n	800ae9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bdb0      	pop	{r4, r5, r7, pc}
 800aea6:	bf00      	nop
 800aea8:	08016bec 	.word	0x08016bec
 800aeac:	08016cc0 	.word	0x08016cc0
 800aeb0:	08016c30 	.word	0x08016c30
 800aeb4:	08016ce0 	.word	0x08016ce0
 800aeb8:	2000d3d0 	.word	0x2000d3d0
 800aebc:	2000d3d8 	.word	0x2000d3d8
 800aec0:	2000d410 	.word	0x2000d410
 800aec4:	2000d3c8 	.word	0x2000d3c8
 800aec8:	2000d3cc 	.word	0x2000d3cc

0800aecc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <tcp_close_shutdown_fin+0x1c>
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <tcp_close_shutdown_fin+0xc8>)
 800aedc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800aee0:	492d      	ldr	r1, [pc, #180]	; (800af98 <tcp_close_shutdown_fin+0xcc>)
 800aee2:	482e      	ldr	r0, [pc, #184]	; (800af9c <tcp_close_shutdown_fin+0xd0>)
 800aee4:	f00a f910 	bl	8015108 <iprintf>

  switch (pcb->state) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	2b07      	cmp	r3, #7
 800aeee:	d020      	beq.n	800af32 <tcp_close_shutdown_fin+0x66>
 800aef0:	2b07      	cmp	r3, #7
 800aef2:	dc2b      	bgt.n	800af4c <tcp_close_shutdown_fin+0x80>
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d002      	beq.n	800aefe <tcp_close_shutdown_fin+0x32>
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	d00d      	beq.n	800af18 <tcp_close_shutdown_fin+0x4c>
 800aefc:	e026      	b.n	800af4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f003 fee6 	bl	800ecd0 <tcp_send_fin>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800af08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d11f      	bne.n	800af50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2205      	movs	r2, #5
 800af14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af16:	e01b      	b.n	800af50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f003 fed9 	bl	800ecd0 <tcp_send_fin>
 800af1e:	4603      	mov	r3, r0
 800af20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800af22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d114      	bne.n	800af54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2205      	movs	r2, #5
 800af2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af30:	e010      	b.n	800af54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f003 fecc 	bl	800ecd0 <tcp_send_fin>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800af3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d109      	bne.n	800af58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2209      	movs	r2, #9
 800af48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af4a:	e005      	b.n	800af58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e01c      	b.n	800af8a <tcp_close_shutdown_fin+0xbe>
      break;
 800af50:	bf00      	nop
 800af52:	e002      	b.n	800af5a <tcp_close_shutdown_fin+0x8e>
      break;
 800af54:	bf00      	nop
 800af56:	e000      	b.n	800af5a <tcp_close_shutdown_fin+0x8e>
      break;
 800af58:	bf00      	nop
  }

  if (err == ERR_OK) {
 800af5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f003 fff2 	bl	800ef4c <tcp_output>
 800af68:	e00d      	b.n	800af86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800af6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d108      	bne.n	800af86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	8b5b      	ldrh	r3, [r3, #26]
 800af78:	f043 0308 	orr.w	r3, r3, #8
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	e001      	b.n	800af8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800af86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	08016bec 	.word	0x08016bec
 800af98:	08016c9c 	.word	0x08016c9c
 800af9c:	08016c30 	.word	0x08016c30

0800afa0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d109      	bne.n	800afc2 <tcp_close+0x22>
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <tcp_close+0x4c>)
 800afb0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800afb4:	490e      	ldr	r1, [pc, #56]	; (800aff0 <tcp_close+0x50>)
 800afb6:	480f      	ldr	r0, [pc, #60]	; (800aff4 <tcp_close+0x54>)
 800afb8:	f00a f8a6 	bl	8015108 <iprintf>
 800afbc:	f06f 030f 	mvn.w	r3, #15
 800afc0:	e00f      	b.n	800afe2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	7d1b      	ldrb	r3, [r3, #20]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d006      	beq.n	800afd8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	8b5b      	ldrh	r3, [r3, #26]
 800afce:	f043 0310 	orr.w	r3, r3, #16
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800afd8:	2101      	movs	r1, #1
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fe94 	bl	800ad08 <tcp_close_shutdown>
 800afe0:	4603      	mov	r3, r0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	08016bec 	.word	0x08016bec
 800aff0:	08016cfc 	.word	0x08016cfc
 800aff4:	08016c30 	.word	0x08016c30

0800aff8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08e      	sub	sp, #56	; 0x38
 800affc:	af04      	add	r7, sp, #16
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d107      	bne.n	800b018 <tcp_abandon+0x20>
 800b008:	4b52      	ldr	r3, [pc, #328]	; (800b154 <tcp_abandon+0x15c>)
 800b00a:	f240 223d 	movw	r2, #573	; 0x23d
 800b00e:	4952      	ldr	r1, [pc, #328]	; (800b158 <tcp_abandon+0x160>)
 800b010:	4852      	ldr	r0, [pc, #328]	; (800b15c <tcp_abandon+0x164>)
 800b012:	f00a f879 	bl	8015108 <iprintf>
 800b016:	e099      	b.n	800b14c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	7d1b      	ldrb	r3, [r3, #20]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d106      	bne.n	800b02e <tcp_abandon+0x36>
 800b020:	4b4c      	ldr	r3, [pc, #304]	; (800b154 <tcp_abandon+0x15c>)
 800b022:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b026:	494e      	ldr	r1, [pc, #312]	; (800b160 <tcp_abandon+0x168>)
 800b028:	484c      	ldr	r0, [pc, #304]	; (800b15c <tcp_abandon+0x164>)
 800b02a:	f00a f86d 	bl	8015108 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7d1b      	ldrb	r3, [r3, #20]
 800b032:	2b0a      	cmp	r3, #10
 800b034:	d107      	bne.n	800b046 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	484a      	ldr	r0, [pc, #296]	; (800b164 <tcp_abandon+0x16c>)
 800b03a:	f000 ffc3 	bl	800bfc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fdb0 	bl	800aba4 <tcp_free>
 800b044:	e082      	b.n	800b14c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b052:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b060:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7d1b      	ldrb	r3, [r3, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d126      	bne.n	800b0be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	8adb      	ldrh	r3, [r3, #22]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d02e      	beq.n	800b0d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b078:	4b3b      	ldr	r3, [pc, #236]	; (800b168 <tcp_abandon+0x170>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d105      	bne.n	800b08e <tcp_abandon+0x96>
 800b082:	4b39      	ldr	r3, [pc, #228]	; (800b168 <tcp_abandon+0x170>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	4a37      	ldr	r2, [pc, #220]	; (800b168 <tcp_abandon+0x170>)
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	e013      	b.n	800b0b6 <tcp_abandon+0xbe>
 800b08e:	4b36      	ldr	r3, [pc, #216]	; (800b168 <tcp_abandon+0x170>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e00c      	b.n	800b0b0 <tcp_abandon+0xb8>
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d104      	bne.n	800b0aa <tcp_abandon+0xb2>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	60da      	str	r2, [r3, #12]
 800b0a8:	e005      	b.n	800b0b6 <tcp_abandon+0xbe>
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1ef      	bne.n	800b096 <tcp_abandon+0x9e>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	60da      	str	r2, [r3, #12]
 800b0bc:	e00b      	b.n	800b0d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	8adb      	ldrh	r3, [r3, #22]
 800b0c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	4828      	ldr	r0, [pc, #160]	; (800b16c <tcp_abandon+0x174>)
 800b0cc:	f000 ff7a 	bl	800bfc4 <tcp_pcb_remove>
 800b0d0:	4b27      	ldr	r3, [pc, #156]	; (800b170 <tcp_abandon+0x178>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d004      	beq.n	800b0e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fd1c 	bl	800bb20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 fd13 	bl	800bb20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d004      	beq.n	800b10c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fd0a 	bl	800bb20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00e      	beq.n	800b130 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3304      	adds	r3, #4
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	8b12      	ldrh	r2, [r2, #24]
 800b11c:	9202      	str	r2, [sp, #8]
 800b11e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b120:	9201      	str	r2, [sp, #4]
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	460b      	mov	r3, r1
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f004 fcc2 	bl	800fab4 <tcp_rst>
    }
    last_state = pcb->state;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7d1b      	ldrb	r3, [r3, #20]
 800b134:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff fd34 	bl	800aba4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d004      	beq.n	800b14c <tcp_abandon+0x154>
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f06f 010c 	mvn.w	r1, #12
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	4798      	blx	r3
  }
}
 800b14c:	3728      	adds	r7, #40	; 0x28
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	08016bec 	.word	0x08016bec
 800b158:	08016d30 	.word	0x08016d30
 800b15c:	08016c30 	.word	0x08016c30
 800b160:	08016d4c 	.word	0x08016d4c
 800b164:	2000d3d4 	.word	0x2000d3d4
 800b168:	2000d3c8 	.word	0x2000d3c8
 800b16c:	2000d3d0 	.word	0x2000d3d0
 800b170:	2000d3d8 	.word	0x2000d3d8

0800b174 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b17c:	2101      	movs	r1, #1
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff ff3a 	bl	800aff8 <tcp_abandon>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <tcp_update_rcv_ann_wnd+0x1c>
 800b19a:	4b25      	ldr	r3, [pc, #148]	; (800b230 <tcp_update_rcv_ann_wnd+0xa4>)
 800b19c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b1a0:	4924      	ldr	r1, [pc, #144]	; (800b234 <tcp_update_rcv_ann_wnd+0xa8>)
 800b1a2:	4825      	ldr	r0, [pc, #148]	; (800b238 <tcp_update_rcv_ann_wnd+0xac>)
 800b1a4:	f009 ffb0 	bl	8015108 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b1b0:	4413      	add	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b1bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b1c0:	bf28      	it	cs
 800b1c2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b1c6:	b292      	uxth	r2, r2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	db08      	blt.n	800b1e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	e020      	b.n	800b226 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	dd03      	ble.n	800b1fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1f8:	e014      	b.n	800b224 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b20c:	d306      	bcc.n	800b21c <tcp_update_rcv_ann_wnd+0x90>
 800b20e:	4b08      	ldr	r3, [pc, #32]	; (800b230 <tcp_update_rcv_ann_wnd+0xa4>)
 800b210:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b214:	4909      	ldr	r1, [pc, #36]	; (800b23c <tcp_update_rcv_ann_wnd+0xb0>)
 800b216:	4808      	ldr	r0, [pc, #32]	; (800b238 <tcp_update_rcv_ann_wnd+0xac>)
 800b218:	f009 ff76 	bl	8015108 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b224:	2300      	movs	r3, #0
  }
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	08016bec 	.word	0x08016bec
 800b234:	08016e48 	.word	0x08016e48
 800b238:	08016c30 	.word	0x08016c30
 800b23c:	08016e6c 	.word	0x08016e6c

0800b240 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d107      	bne.n	800b262 <tcp_recved+0x22>
 800b252:	4b1f      	ldr	r3, [pc, #124]	; (800b2d0 <tcp_recved+0x90>)
 800b254:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b258:	491e      	ldr	r1, [pc, #120]	; (800b2d4 <tcp_recved+0x94>)
 800b25a:	481f      	ldr	r0, [pc, #124]	; (800b2d8 <tcp_recved+0x98>)
 800b25c:	f009 ff54 	bl	8015108 <iprintf>
 800b260:	e032      	b.n	800b2c8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7d1b      	ldrb	r3, [r3, #20]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d106      	bne.n	800b278 <tcp_recved+0x38>
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <tcp_recved+0x90>)
 800b26c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b270:	491a      	ldr	r1, [pc, #104]	; (800b2dc <tcp_recved+0x9c>)
 800b272:	4819      	ldr	r0, [pc, #100]	; (800b2d8 <tcp_recved+0x98>)
 800b274:	f009 ff48 	bl	8015108 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b27c:	887b      	ldrh	r3, [r7, #2]
 800b27e:	4413      	add	r3, r2
 800b280:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b282:	89fb      	ldrh	r3, [r7, #14]
 800b284:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b288:	d804      	bhi.n	800b294 <tcp_recved+0x54>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28e:	89fa      	ldrh	r2, [r7, #14]
 800b290:	429a      	cmp	r2, r3
 800b292:	d204      	bcs.n	800b29e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b29a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b29c:	e002      	b.n	800b2a4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	89fa      	ldrh	r2, [r7, #14]
 800b2a2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7ff ff71 	bl	800b18c <tcp_update_rcv_ann_wnd>
 800b2aa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b2b2:	d309      	bcc.n	800b2c8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8b5b      	ldrh	r3, [r3, #26]
 800b2b8:	f043 0302 	orr.w	r3, r3, #2
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f003 fe42 	bl	800ef4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	08016bec 	.word	0x08016bec
 800b2d4:	08016e88 	.word	0x08016e88
 800b2d8:	08016c30 	.word	0x08016c30
 800b2dc:	08016ea0 	.word	0x08016ea0

0800b2e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b2e0:	b5b0      	push	{r4, r5, r7, lr}
 800b2e2:	b090      	sub	sp, #64	; 0x40
 800b2e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b2ec:	4b94      	ldr	r3, [pc, #592]	; (800b540 <tcp_slowtmr+0x260>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4a93      	ldr	r2, [pc, #588]	; (800b540 <tcp_slowtmr+0x260>)
 800b2f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b2f6:	4b93      	ldr	r3, [pc, #588]	; (800b544 <tcp_slowtmr+0x264>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	4b91      	ldr	r3, [pc, #580]	; (800b544 <tcp_slowtmr+0x264>)
 800b300:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b306:	4b90      	ldr	r3, [pc, #576]	; (800b548 <tcp_slowtmr+0x268>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b30c:	e29d      	b.n	800b84a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	7d1b      	ldrb	r3, [r3, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <tcp_slowtmr+0x44>
 800b316:	4b8d      	ldr	r3, [pc, #564]	; (800b54c <tcp_slowtmr+0x26c>)
 800b318:	f240 42be 	movw	r2, #1214	; 0x4be
 800b31c:	498c      	ldr	r1, [pc, #560]	; (800b550 <tcp_slowtmr+0x270>)
 800b31e:	488d      	ldr	r0, [pc, #564]	; (800b554 <tcp_slowtmr+0x274>)
 800b320:	f009 fef2 	bl	8015108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	7d1b      	ldrb	r3, [r3, #20]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d106      	bne.n	800b33a <tcp_slowtmr+0x5a>
 800b32c:	4b87      	ldr	r3, [pc, #540]	; (800b54c <tcp_slowtmr+0x26c>)
 800b32e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b332:	4989      	ldr	r1, [pc, #548]	; (800b558 <tcp_slowtmr+0x278>)
 800b334:	4887      	ldr	r0, [pc, #540]	; (800b554 <tcp_slowtmr+0x274>)
 800b336:	f009 fee7 	bl	8015108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	7d1b      	ldrb	r3, [r3, #20]
 800b33e:	2b0a      	cmp	r3, #10
 800b340:	d106      	bne.n	800b350 <tcp_slowtmr+0x70>
 800b342:	4b82      	ldr	r3, [pc, #520]	; (800b54c <tcp_slowtmr+0x26c>)
 800b344:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b348:	4984      	ldr	r1, [pc, #528]	; (800b55c <tcp_slowtmr+0x27c>)
 800b34a:	4882      	ldr	r0, [pc, #520]	; (800b554 <tcp_slowtmr+0x274>)
 800b34c:	f009 fedc 	bl	8015108 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	7f9a      	ldrb	r2, [r3, #30]
 800b354:	4b7b      	ldr	r3, [pc, #492]	; (800b544 <tcp_slowtmr+0x264>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d105      	bne.n	800b368 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b366:	e270      	b.n	800b84a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b368:	4b76      	ldr	r3, [pc, #472]	; (800b544 <tcp_slowtmr+0x264>)
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d10a      	bne.n	800b39a <tcp_slowtmr+0xba>
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b38a:	2b05      	cmp	r3, #5
 800b38c:	d905      	bls.n	800b39a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b392:	3301      	adds	r3, #1
 800b394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b398:	e11e      	b.n	800b5d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3a0:	2b0b      	cmp	r3, #11
 800b3a2:	d905      	bls.n	800b3b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3ae:	e113      	b.n	800b5d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d075      	beq.n	800b4a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d006      	beq.n	800b3d0 <tcp_slowtmr+0xf0>
 800b3c2:	4b62      	ldr	r3, [pc, #392]	; (800b54c <tcp_slowtmr+0x26c>)
 800b3c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b3c8:	4965      	ldr	r1, [pc, #404]	; (800b560 <tcp_slowtmr+0x280>)
 800b3ca:	4862      	ldr	r0, [pc, #392]	; (800b554 <tcp_slowtmr+0x274>)
 800b3cc:	f009 fe9c 	bl	8015108 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <tcp_slowtmr+0x106>
 800b3d8:	4b5c      	ldr	r3, [pc, #368]	; (800b54c <tcp_slowtmr+0x26c>)
 800b3da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b3de:	4961      	ldr	r1, [pc, #388]	; (800b564 <tcp_slowtmr+0x284>)
 800b3e0:	485c      	ldr	r0, [pc, #368]	; (800b554 <tcp_slowtmr+0x274>)
 800b3e2:	f009 fe91 	bl	8015108 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b3ec:	2b0b      	cmp	r3, #11
 800b3ee:	d905      	bls.n	800b3fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3fa:	e0ed      	b.n	800b5d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b402:	3b01      	subs	r3, #1
 800b404:	4a58      	ldr	r2, [pc, #352]	; (800b568 <tcp_slowtmr+0x288>)
 800b406:	5cd3      	ldrb	r3, [r2, r3]
 800b408:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b410:	7c7a      	ldrb	r2, [r7, #17]
 800b412:	429a      	cmp	r2, r3
 800b414:	d907      	bls.n	800b426 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b41c:	3301      	adds	r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b42c:	7c7a      	ldrb	r2, [r7, #17]
 800b42e:	429a      	cmp	r2, r3
 800b430:	f200 80d2 	bhi.w	800b5d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b434:	2301      	movs	r3, #1
 800b436:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d108      	bne.n	800b454 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b444:	f004 fc2a 	bl	800fc9c <tcp_zero_window_probe>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d014      	beq.n	800b478 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b44e:	2300      	movs	r3, #0
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	e011      	b.n	800b478 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b45a:	4619      	mov	r1, r3
 800b45c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b45e:	f003 faef 	bl	800ea40 <tcp_split_unsent_seg>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d107      	bne.n	800b478 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b46a:	f003 fd6f 	bl	800ef4c <tcp_output>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 80ac 	beq.w	800b5d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b48e:	2b06      	cmp	r3, #6
 800b490:	f200 80a2 	bhi.w	800b5d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b4a4:	e098      	b.n	800b5d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	db0f      	blt.n	800b4d0 <tcp_slowtmr+0x1f0>
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d008      	beq.n	800b4d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	db7b      	blt.n	800b5d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4e2:	f004 f827 	bl	800f534 <tcp_rexmit_rto_prepare>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <tcp_slowtmr+0x21c>
 800b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d171      	bne.n	800b5d8 <tcp_slowtmr+0x2f8>
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d06d      	beq.n	800b5d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	7d1b      	ldrb	r3, [r3, #20]
 800b500:	2b02      	cmp	r3, #2
 800b502:	d03a      	beq.n	800b57a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b50a:	2b0c      	cmp	r3, #12
 800b50c:	bf28      	it	cs
 800b50e:	230c      	movcs	r3, #12
 800b510:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b518:	10db      	asrs	r3, r3, #3
 800b51a:	b21b      	sxth	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b524:	4413      	add	r3, r2
 800b526:	7efa      	ldrb	r2, [r7, #27]
 800b528:	4910      	ldr	r1, [pc, #64]	; (800b56c <tcp_slowtmr+0x28c>)
 800b52a:	5c8a      	ldrb	r2, [r1, r2]
 800b52c:	4093      	lsls	r3, r2
 800b52e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b536:	4293      	cmp	r3, r2
 800b538:	dc1a      	bgt.n	800b570 <tcp_slowtmr+0x290>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	b21a      	sxth	r2, r3
 800b53e:	e019      	b.n	800b574 <tcp_slowtmr+0x294>
 800b540:	2000d3c4 	.word	0x2000d3c4
 800b544:	2000d3da 	.word	0x2000d3da
 800b548:	2000d3d0 	.word	0x2000d3d0
 800b54c:	08016bec 	.word	0x08016bec
 800b550:	08016f30 	.word	0x08016f30
 800b554:	08016c30 	.word	0x08016c30
 800b558:	08016f5c 	.word	0x08016f5c
 800b55c:	08016f88 	.word	0x08016f88
 800b560:	08016fb8 	.word	0x08016fb8
 800b564:	08016fec 	.word	0x08016fec
 800b568:	08018fc8 	.word	0x08018fc8
 800b56c:	08018fb8 	.word	0x08018fb8
 800b570:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	2200      	movs	r2, #0
 800b57e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b58c:	4293      	cmp	r3, r2
 800b58e:	bf28      	it	cs
 800b590:	4613      	movcs	r3, r2
 800b592:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b594:	8a7b      	ldrh	r3, [r7, #18]
 800b596:	085b      	lsrs	r3, r3, #1
 800b598:	b29a      	uxth	r2, r3
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d206      	bcs.n	800b5c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b5d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d4:	f004 f81e 	bl	800f614 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	7d1b      	ldrb	r3, [r3, #20]
 800b5dc:	2b06      	cmp	r3, #6
 800b5de:	d111      	bne.n	800b604 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f003 0310 	and.w	r3, r3, #16
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5ec:	4b9c      	ldr	r3, [pc, #624]	; (800b860 <tcp_slowtmr+0x580>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b28      	cmp	r3, #40	; 0x28
 800b5f8:	d904      	bls.n	800b604 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5fe:	3301      	adds	r3, #1
 800b600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	7a5b      	ldrb	r3, [r3, #9]
 800b608:	f003 0308 	and.w	r3, r3, #8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d04a      	beq.n	800b6a6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b614:	2b04      	cmp	r3, #4
 800b616:	d003      	beq.n	800b620 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b61c:	2b07      	cmp	r3, #7
 800b61e:	d142      	bne.n	800b6a6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b620:	4b8f      	ldr	r3, [pc, #572]	; (800b860 <tcp_slowtmr+0x580>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b630:	4b8c      	ldr	r3, [pc, #560]	; (800b864 <tcp_slowtmr+0x584>)
 800b632:	440b      	add	r3, r1
 800b634:	498c      	ldr	r1, [pc, #560]	; (800b868 <tcp_slowtmr+0x588>)
 800b636:	fba1 1303 	umull	r1, r3, r1, r3
 800b63a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d90a      	bls.n	800b656 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b644:	3301      	adds	r3, #1
 800b646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b64a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b64e:	3301      	adds	r3, #1
 800b650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b654:	e027      	b.n	800b6a6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b656:	4b82      	ldr	r3, [pc, #520]	; (800b860 <tcp_slowtmr+0x580>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b66c:	4618      	mov	r0, r3
 800b66e:	4b7f      	ldr	r3, [pc, #508]	; (800b86c <tcp_slowtmr+0x58c>)
 800b670:	fb00 f303 	mul.w	r3, r0, r3
 800b674:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b676:	497c      	ldr	r1, [pc, #496]	; (800b868 <tcp_slowtmr+0x588>)
 800b678:	fba1 1303 	umull	r1, r3, r1, r3
 800b67c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b67e:	429a      	cmp	r2, r3
 800b680:	d911      	bls.n	800b6a6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b684:	f004 faca 	bl	800fc1c <tcp_keepalive>
 800b688:	4603      	mov	r3, r0
 800b68a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b68e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b692:	2b00      	cmp	r3, #0
 800b694:	d107      	bne.n	800b6a6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b69c:	3301      	adds	r3, #1
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d011      	beq.n	800b6d2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b6ae:	4b6c      	ldr	r3, [pc, #432]	; (800b860 <tcp_slowtmr+0x580>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	1ad2      	subs	r2, r2, r3
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b6be:	4619      	mov	r1, r3
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	440b      	add	r3, r1
 800b6c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d302      	bcc.n	800b6d2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b6cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6ce:	f000 fddd 	bl	800c28c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	7d1b      	ldrb	r3, [r3, #20]
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d10b      	bne.n	800b6f2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6da:	4b61      	ldr	r3, [pc, #388]	; (800b860 <tcp_slowtmr+0x580>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b28      	cmp	r3, #40	; 0x28
 800b6e6:	d904      	bls.n	800b6f2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	7d1b      	ldrb	r3, [r3, #20]
 800b6f6:	2b09      	cmp	r3, #9
 800b6f8:	d10b      	bne.n	800b712 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b6fa:	4b59      	ldr	r3, [pc, #356]	; (800b860 <tcp_slowtmr+0x580>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2bf0      	cmp	r3, #240	; 0xf0
 800b706:	d904      	bls.n	800b712 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b70c:	3301      	adds	r3, #1
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b716:	2b00      	cmp	r3, #0
 800b718:	d060      	beq.n	800b7dc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b720:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b724:	f000 fbfe 	bl	800bf24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b72e:	4b50      	ldr	r3, [pc, #320]	; (800b870 <tcp_slowtmr+0x590>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b734:	429a      	cmp	r2, r3
 800b736:	d106      	bne.n	800b746 <tcp_slowtmr+0x466>
 800b738:	4b4e      	ldr	r3, [pc, #312]	; (800b874 <tcp_slowtmr+0x594>)
 800b73a:	f240 526d 	movw	r2, #1389	; 0x56d
 800b73e:	494e      	ldr	r1, [pc, #312]	; (800b878 <tcp_slowtmr+0x598>)
 800b740:	484e      	ldr	r0, [pc, #312]	; (800b87c <tcp_slowtmr+0x59c>)
 800b742:	f009 fce1 	bl	8015108 <iprintf>
        prev->next = pcb->next;
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	e00f      	b.n	800b770 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b750:	4b47      	ldr	r3, [pc, #284]	; (800b870 <tcp_slowtmr+0x590>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b756:	429a      	cmp	r2, r3
 800b758:	d006      	beq.n	800b768 <tcp_slowtmr+0x488>
 800b75a:	4b46      	ldr	r3, [pc, #280]	; (800b874 <tcp_slowtmr+0x594>)
 800b75c:	f240 5271 	movw	r2, #1393	; 0x571
 800b760:	4947      	ldr	r1, [pc, #284]	; (800b880 <tcp_slowtmr+0x5a0>)
 800b762:	4846      	ldr	r0, [pc, #280]	; (800b87c <tcp_slowtmr+0x59c>)
 800b764:	f009 fcd0 	bl	8015108 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	4a40      	ldr	r2, [pc, #256]	; (800b870 <tcp_slowtmr+0x590>)
 800b76e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b774:	2b00      	cmp	r3, #0
 800b776:	d013      	beq.n	800b7a0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b780:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	3304      	adds	r3, #4
 800b786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b788:	8ad2      	ldrh	r2, [r2, #22]
 800b78a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b78c:	8b09      	ldrh	r1, [r1, #24]
 800b78e:	9102      	str	r1, [sp, #8]
 800b790:	9201      	str	r2, [sp, #4]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	462b      	mov	r3, r5
 800b796:	4622      	mov	r2, r4
 800b798:	4601      	mov	r1, r0
 800b79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b79c:	f004 f98a 	bl	800fab4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b7b6:	6838      	ldr	r0, [r7, #0]
 800b7b8:	f7ff f9f4 	bl	800aba4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b7bc:	4b31      	ldr	r3, [pc, #196]	; (800b884 <tcp_slowtmr+0x5a4>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d004      	beq.n	800b7d2 <tcp_slowtmr+0x4f2>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f06f 010c 	mvn.w	r1, #12
 800b7ce:	68b8      	ldr	r0, [r7, #8]
 800b7d0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b7d2:	4b2c      	ldr	r3, [pc, #176]	; (800b884 <tcp_slowtmr+0x5a4>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d037      	beq.n	800b84a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800b7da:	e592      	b.n	800b302 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	7f1b      	ldrb	r3, [r3, #28]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	7f1a      	ldrb	r2, [r3, #28]
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	7f5b      	ldrb	r3, [r3, #29]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d325      	bcc.n	800b84a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	2200      	movs	r2, #0
 800b802:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b804:	4b1f      	ldr	r3, [pc, #124]	; (800b884 <tcp_slowtmr+0x5a4>)
 800b806:	2200      	movs	r2, #0
 800b808:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <tcp_slowtmr+0x54c>
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81c:	6912      	ldr	r2, [r2, #16]
 800b81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b820:	4610      	mov	r0, r2
 800b822:	4798      	blx	r3
 800b824:	4603      	mov	r3, r0
 800b826:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b82a:	e002      	b.n	800b832 <tcp_slowtmr+0x552>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b832:	4b14      	ldr	r3, [pc, #80]	; (800b884 <tcp_slowtmr+0x5a4>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d000      	beq.n	800b83c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b83a:	e562      	b.n	800b302 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b83c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b846:	f003 fb81 	bl	800ef4c <tcp_output>
  while (pcb != NULL) {
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f47f ad5e 	bne.w	800b30e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b856:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <tcp_slowtmr+0x5a8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b85c:	e069      	b.n	800b932 <tcp_slowtmr+0x652>
 800b85e:	bf00      	nop
 800b860:	2000d3c4 	.word	0x2000d3c4
 800b864:	000a4cb8 	.word	0x000a4cb8
 800b868:	10624dd3 	.word	0x10624dd3
 800b86c:	000124f8 	.word	0x000124f8
 800b870:	2000d3d0 	.word	0x2000d3d0
 800b874:	08016bec 	.word	0x08016bec
 800b878:	08017024 	.word	0x08017024
 800b87c:	08016c30 	.word	0x08016c30
 800b880:	08017050 	.word	0x08017050
 800b884:	2000d3d8 	.word	0x2000d3d8
 800b888:	2000d3d4 	.word	0x2000d3d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	7d1b      	ldrb	r3, [r3, #20]
 800b890:	2b0a      	cmp	r3, #10
 800b892:	d006      	beq.n	800b8a2 <tcp_slowtmr+0x5c2>
 800b894:	4b2b      	ldr	r3, [pc, #172]	; (800b944 <tcp_slowtmr+0x664>)
 800b896:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b89a:	492b      	ldr	r1, [pc, #172]	; (800b948 <tcp_slowtmr+0x668>)
 800b89c:	482b      	ldr	r0, [pc, #172]	; (800b94c <tcp_slowtmr+0x66c>)
 800b89e:	f009 fc33 	bl	8015108 <iprintf>
    pcb_remove = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b8a8:	4b29      	ldr	r3, [pc, #164]	; (800b950 <tcp_slowtmr+0x670>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2bf0      	cmp	r3, #240	; 0xf0
 800b8b4:	d904      	bls.n	800b8c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b8b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d02f      	beq.n	800b928 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8ca:	f000 fb2b 	bl	800bf24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d010      	beq.n	800b8f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b8d4:	4b1f      	ldr	r3, [pc, #124]	; (800b954 <tcp_slowtmr+0x674>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d106      	bne.n	800b8ec <tcp_slowtmr+0x60c>
 800b8de:	4b19      	ldr	r3, [pc, #100]	; (800b944 <tcp_slowtmr+0x664>)
 800b8e0:	f240 52af 	movw	r2, #1455	; 0x5af
 800b8e4:	491c      	ldr	r1, [pc, #112]	; (800b958 <tcp_slowtmr+0x678>)
 800b8e6:	4819      	ldr	r0, [pc, #100]	; (800b94c <tcp_slowtmr+0x66c>)
 800b8e8:	f009 fc0e 	bl	8015108 <iprintf>
        prev->next = pcb->next;
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	60da      	str	r2, [r3, #12]
 800b8f4:	e00f      	b.n	800b916 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b8f6:	4b17      	ldr	r3, [pc, #92]	; (800b954 <tcp_slowtmr+0x674>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d006      	beq.n	800b90e <tcp_slowtmr+0x62e>
 800b900:	4b10      	ldr	r3, [pc, #64]	; (800b944 <tcp_slowtmr+0x664>)
 800b902:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b906:	4915      	ldr	r1, [pc, #84]	; (800b95c <tcp_slowtmr+0x67c>)
 800b908:	4810      	ldr	r0, [pc, #64]	; (800b94c <tcp_slowtmr+0x66c>)
 800b90a:	f009 fbfd 	bl	8015108 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	4a10      	ldr	r2, [pc, #64]	; (800b954 <tcp_slowtmr+0x674>)
 800b914:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b920:	69f8      	ldr	r0, [r7, #28]
 800b922:	f7ff f93f 	bl	800aba4 <tcp_free>
 800b926:	e004      	b.n	800b932 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1a9      	bne.n	800b88c <tcp_slowtmr+0x5ac>
    }
  }
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3730      	adds	r7, #48	; 0x30
 800b93e:	46bd      	mov	sp, r7
 800b940:	bdb0      	pop	{r4, r5, r7, pc}
 800b942:	bf00      	nop
 800b944:	08016bec 	.word	0x08016bec
 800b948:	0801707c 	.word	0x0801707c
 800b94c:	08016c30 	.word	0x08016c30
 800b950:	2000d3c4 	.word	0x2000d3c4
 800b954:	2000d3d4 	.word	0x2000d3d4
 800b958:	080170ac 	.word	0x080170ac
 800b95c:	080170d4 	.word	0x080170d4

0800b960 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b966:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <tcp_fasttmr+0xbc>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <tcp_fasttmr+0xbc>)
 800b970:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b972:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <tcp_fasttmr+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b978:	e048      	b.n	800ba0c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7f9a      	ldrb	r2, [r3, #30]
 800b97e:	4b27      	ldr	r3, [pc, #156]	; (800ba1c <tcp_fasttmr+0xbc>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d03f      	beq.n	800ba06 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b986:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <tcp_fasttmr+0xbc>)
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	8b5b      	ldrh	r3, [r3, #26]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d010      	beq.n	800b9bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	8b5b      	ldrh	r3, [r3, #26]
 800b99e:	f043 0302 	orr.w	r3, r3, #2
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f003 facf 	bl	800ef4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	8b5b      	ldrh	r3, [r3, #26]
 800b9b2:	f023 0303 	bic.w	r3, r3, #3
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	8b5b      	ldrh	r3, [r3, #26]
 800b9c0:	f003 0308 	and.w	r3, r3, #8
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8b5b      	ldrh	r3, [r3, #26]
 800b9cc:	f023 0308 	bic.w	r3, r3, #8
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7ff fa78 	bl	800aecc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ba24 <tcp_fasttmr+0xc4>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f819 	bl	800ba28 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <tcp_fasttmr+0xc4>)
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d000      	beq.n	800ba00 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b9fe:	e7b8      	b.n	800b972 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	607b      	str	r3, [r7, #4]
 800ba04:	e002      	b.n	800ba0c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1b3      	bne.n	800b97a <tcp_fasttmr+0x1a>
    }
  }
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000d3da 	.word	0x2000d3da
 800ba20:	2000d3d0 	.word	0x2000d3d0
 800ba24:	2000d3d8 	.word	0x2000d3d8

0800ba28 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ba28:	b590      	push	{r4, r7, lr}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <tcp_process_refused_data+0x22>
 800ba36:	4b37      	ldr	r3, [pc, #220]	; (800bb14 <tcp_process_refused_data+0xec>)
 800ba38:	f240 6209 	movw	r2, #1545	; 0x609
 800ba3c:	4936      	ldr	r1, [pc, #216]	; (800bb18 <tcp_process_refused_data+0xf0>)
 800ba3e:	4837      	ldr	r0, [pc, #220]	; (800bb1c <tcp_process_refused_data+0xf4>)
 800ba40:	f009 fb62 	bl	8015108 <iprintf>
 800ba44:	f06f 030f 	mvn.w	r3, #15
 800ba48:	e060      	b.n	800bb0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba4e:	7b5b      	ldrb	r3, [r3, #13]
 800ba50:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba56:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <tcp_process_refused_data+0x58>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6918      	ldr	r0, [r3, #16]
 800ba72:	2300      	movs	r3, #0
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	6879      	ldr	r1, [r7, #4]
 800ba78:	47a0      	blx	r4
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
 800ba7e:	e007      	b.n	800ba90 <tcp_process_refused_data+0x68>
 800ba80:	2300      	movs	r3, #0
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	2000      	movs	r0, #0
 800ba88:	f000 f8a4 	bl	800bbd4 <tcp_recv_null>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ba90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d12a      	bne.n	800baee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	f003 0320 	and.w	r3, r3, #32
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d033      	beq.n	800bb0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800baaa:	d005      	beq.n	800bab8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab0:	3301      	adds	r3, #1
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00b      	beq.n	800bada <tcp_process_refused_data+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6918      	ldr	r0, [r3, #16]
 800bacc:	2300      	movs	r3, #0
 800bace:	2200      	movs	r2, #0
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	47a0      	blx	r4
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]
 800bad8:	e001      	b.n	800bade <tcp_process_refused_data+0xb6>
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae2:	f113 0f0d 	cmn.w	r3, #13
 800bae6:	d110      	bne.n	800bb0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bae8:	f06f 030c 	mvn.w	r3, #12
 800baec:	e00e      	b.n	800bb0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800baee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baf2:	f113 0f0d 	cmn.w	r3, #13
 800baf6:	d102      	bne.n	800bafe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800baf8:	f06f 030c 	mvn.w	r3, #12
 800bafc:	e006      	b.n	800bb0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bb04:	f06f 0304 	mvn.w	r3, #4
 800bb08:	e000      	b.n	800bb0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd90      	pop	{r4, r7, pc}
 800bb14:	08016bec 	.word	0x08016bec
 800bb18:	080170fc 	.word	0x080170fc
 800bb1c:	08016c30 	.word	0x08016c30

0800bb20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bb28:	e007      	b.n	800bb3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f80a 	bl	800bb4a <tcp_seg_free>
    seg = next;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f4      	bne.n	800bb2a <tcp_segs_free+0xa>
  }
}
 800bb40:	bf00      	nop
 800bb42:	bf00      	nop
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b082      	sub	sp, #8
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00c      	beq.n	800bb72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d004      	beq.n	800bb6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fd61 	bl	800a62c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	2003      	movs	r0, #3
 800bb6e:	f7fd ff15 	bl	800999c <memp_free>
  }
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <tcp_seg_copy+0x1c>
 800bb8a:	4b0f      	ldr	r3, [pc, #60]	; (800bbc8 <tcp_seg_copy+0x4c>)
 800bb8c:	f240 6282 	movw	r2, #1666	; 0x682
 800bb90:	490e      	ldr	r1, [pc, #56]	; (800bbcc <tcp_seg_copy+0x50>)
 800bb92:	480f      	ldr	r0, [pc, #60]	; (800bbd0 <tcp_seg_copy+0x54>)
 800bb94:	f009 fab8 	bl	8015108 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bb98:	2003      	movs	r0, #3
 800bb9a:	f7fd fe89 	bl	80098b0 <memp_malloc>
 800bb9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <tcp_seg_copy+0x2e>
    return NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	e00a      	b.n	800bbc0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bbaa:	2210      	movs	r2, #16
 800bbac:	6879      	ldr	r1, [r7, #4]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f009 fbdb 	bl	801536a <memcpy>
  pbuf_ref(cseg->p);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe fddd 	bl	800a778 <pbuf_ref>
  return cseg;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	08016bec 	.word	0x08016bec
 800bbcc:	08017140 	.word	0x08017140
 800bbd0:	08016c30 	.word	0x08016c30

0800bbd4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d109      	bne.n	800bbfc <tcp_recv_null+0x28>
 800bbe8:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <tcp_recv_null+0x60>)
 800bbea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bbee:	4912      	ldr	r1, [pc, #72]	; (800bc38 <tcp_recv_null+0x64>)
 800bbf0:	4812      	ldr	r0, [pc, #72]	; (800bc3c <tcp_recv_null+0x68>)
 800bbf2:	f009 fa89 	bl	8015108 <iprintf>
 800bbf6:	f06f 030f 	mvn.w	r3, #15
 800bbfa:	e016      	b.n	800bc2a <tcp_recv_null+0x56>

  if (p != NULL) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	891b      	ldrh	r3, [r3, #8]
 800bc06:	4619      	mov	r1, r3
 800bc08:	68b8      	ldr	r0, [r7, #8]
 800bc0a:	f7ff fb19 	bl	800b240 <tcp_recved>
    pbuf_free(p);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fe fd0c 	bl	800a62c <pbuf_free>
 800bc14:	e008      	b.n	800bc28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bc16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d104      	bne.n	800bc28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bc1e:	68b8      	ldr	r0, [r7, #8]
 800bc20:	f7ff f9be 	bl	800afa0 <tcp_close>
 800bc24:	4603      	mov	r3, r0
 800bc26:	e000      	b.n	800bc2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	08016bec 	.word	0x08016bec
 800bc38:	0801715c 	.word	0x0801715c
 800bc3c:	08016c30 	.word	0x08016c30

0800bc40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bc4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	db01      	blt.n	800bc56 <tcp_kill_prio+0x16>
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	e000      	b.n	800bc58 <tcp_kill_prio+0x18>
 800bc56:	237f      	movs	r3, #127	; 0x7f
 800bc58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bc5a:	7afb      	ldrb	r3, [r7, #11]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d034      	beq.n	800bcca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6e:	4b19      	ldr	r3, [pc, #100]	; (800bcd4 <tcp_kill_prio+0x94>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	617b      	str	r3, [r7, #20]
 800bc74:	e01f      	b.n	800bcb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	7d5b      	ldrb	r3, [r3, #21]
 800bc7a:	7afa      	ldrb	r2, [r7, #11]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d80c      	bhi.n	800bc9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bc84:	7afa      	ldrb	r2, [r7, #11]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d112      	bne.n	800bcb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <tcp_kill_prio+0x98>)
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d80a      	bhi.n	800bcb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <tcp_kill_prio+0x98>)
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	7d5b      	ldrb	r3, [r3, #21]
 800bcae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1dc      	bne.n	800bc76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d004      	beq.n	800bccc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bcc2:	6938      	ldr	r0, [r7, #16]
 800bcc4:	f7ff fa56 	bl	800b174 <tcp_abort>
 800bcc8:	e000      	b.n	800bccc <tcp_kill_prio+0x8c>
    return;
 800bcca:	bf00      	nop
  }
}
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	2000d3d0 	.word	0x2000d3d0
 800bcd8:	2000d3c4 	.word	0x2000d3c4

0800bcdc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d009      	beq.n	800bd00 <tcp_kill_state+0x24>
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	d006      	beq.n	800bd00 <tcp_kill_state+0x24>
 800bcf2:	4b1a      	ldr	r3, [pc, #104]	; (800bd5c <tcp_kill_state+0x80>)
 800bcf4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bcf8:	4919      	ldr	r1, [pc, #100]	; (800bd60 <tcp_kill_state+0x84>)
 800bcfa:	481a      	ldr	r0, [pc, #104]	; (800bd64 <tcp_kill_state+0x88>)
 800bcfc:	f009 fa04 	bl	8015108 <iprintf>

  inactivity = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bd04:	2300      	movs	r3, #0
 800bd06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd08:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <tcp_kill_state+0x8c>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e017      	b.n	800bd40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	7d1b      	ldrb	r3, [r3, #20]
 800bd14:	79fa      	ldrb	r2, [r7, #7]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d10f      	bne.n	800bd3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd1a:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <tcp_kill_state+0x90>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d807      	bhi.n	800bd3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bd2a:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <tcp_kill_state+0x90>)
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e4      	bne.n	800bd10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	6938      	ldr	r0, [r7, #16]
 800bd50:	f7ff f952 	bl	800aff8 <tcp_abandon>
  }
}
 800bd54:	bf00      	nop
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	08016bec 	.word	0x08016bec
 800bd60:	08017178 	.word	0x08017178
 800bd64:	08016c30 	.word	0x08016c30
 800bd68:	2000d3d0 	.word	0x2000d3d0
 800bd6c:	2000d3c4 	.word	0x2000d3c4

0800bd70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd7e:	4b12      	ldr	r3, [pc, #72]	; (800bdc8 <tcp_kill_timewait+0x58>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e012      	b.n	800bdac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd86:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <tcp_kill_timewait+0x5c>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d807      	bhi.n	800bda6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bd96:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <tcp_kill_timewait+0x5c>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e9      	bne.n	800bd86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bdb8:	68b8      	ldr	r0, [r7, #8]
 800bdba:	f7ff f9db 	bl	800b174 <tcp_abort>
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	2000d3d4 	.word	0x2000d3d4
 800bdcc:	2000d3c4 	.word	0x2000d3c4

0800bdd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bdd6:	4b10      	ldr	r3, [pc, #64]	; (800be18 <tcp_handle_closepend+0x48>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bddc:	e014      	b.n	800be08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8b5b      	ldrh	r3, [r3, #26]
 800bde8:	f003 0308 	and.w	r3, r3, #8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8b5b      	ldrh	r3, [r3, #26]
 800bdf4:	f023 0308 	bic.w	r3, r3, #8
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff f864 	bl	800aecc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1e7      	bne.n	800bdde <tcp_handle_closepend+0xe>
  }
}
 800be0e:	bf00      	nop
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	2000d3d0 	.word	0x2000d3d0

0800be1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be26:	2001      	movs	r0, #1
 800be28:	f7fd fd42 	bl	80098b0 <memp_malloc>
 800be2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d126      	bne.n	800be82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800be34:	f7ff ffcc 	bl	800bdd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800be38:	f7ff ff9a 	bl	800bd70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be3c:	2001      	movs	r0, #1
 800be3e:	f7fd fd37 	bl	80098b0 <memp_malloc>
 800be42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d11b      	bne.n	800be82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800be4a:	2009      	movs	r0, #9
 800be4c:	f7ff ff46 	bl	800bcdc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be50:	2001      	movs	r0, #1
 800be52:	f7fd fd2d 	bl	80098b0 <memp_malloc>
 800be56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d111      	bne.n	800be82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800be5e:	2008      	movs	r0, #8
 800be60:	f7ff ff3c 	bl	800bcdc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be64:	2001      	movs	r0, #1
 800be66:	f7fd fd23 	bl	80098b0 <memp_malloc>
 800be6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d107      	bne.n	800be82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff fee3 	bl	800bc40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800be7a:	2001      	movs	r0, #1
 800be7c:	f7fd fd18 	bl	80098b0 <memp_malloc>
 800be80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d03f      	beq.n	800bf08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800be88:	229c      	movs	r2, #156	; 0x9c
 800be8a:	2100      	movs	r1, #0
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f009 f9a0 	bl	80151d2 <memset>
    pcb->prio = prio;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	79fa      	ldrb	r2, [r7, #7]
 800be96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800be9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bea8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	22ff      	movs	r2, #255	; 0xff
 800beb6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bebe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2206      	movs	r2, #6
 800bec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2206      	movs	r2, #6
 800becc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2201      	movs	r2, #1
 800beda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bede:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <tcp_alloc+0xf8>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <tcp_alloc+0xfc>)
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bef4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <tcp_alloc+0x100>)
 800befc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4a07      	ldr	r2, [pc, #28]	; (800bf20 <tcp_alloc+0x104>)
 800bf04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	2000d3c4 	.word	0x2000d3c4
 800bf18:	2000d3da 	.word	0x2000d3da
 800bf1c:	0800bbd5 	.word	0x0800bbd5
 800bf20:	006ddd00 	.word	0x006ddd00

0800bf24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d107      	bne.n	800bf42 <tcp_pcb_purge+0x1e>
 800bf32:	4b21      	ldr	r3, [pc, #132]	; (800bfb8 <tcp_pcb_purge+0x94>)
 800bf34:	f640 0251 	movw	r2, #2129	; 0x851
 800bf38:	4920      	ldr	r1, [pc, #128]	; (800bfbc <tcp_pcb_purge+0x98>)
 800bf3a:	4821      	ldr	r0, [pc, #132]	; (800bfc0 <tcp_pcb_purge+0x9c>)
 800bf3c:	f009 f8e4 	bl	8015108 <iprintf>
 800bf40:	e037      	b.n	800bfb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7d1b      	ldrb	r3, [r3, #20]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d033      	beq.n	800bfb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bf4e:	2b0a      	cmp	r3, #10
 800bf50:	d02f      	beq.n	800bfb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d02b      	beq.n	800bfb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fb60 	bl	800a62c <pbuf_free>
      pcb->refused_data = NULL;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f986 	bl	800c28c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff fdc7 	bl	800bb20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fdc2 	bl	800bb20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08016bec 	.word	0x08016bec
 800bfbc:	08017238 	.word	0x08017238
 800bfc0:	08016c30 	.word	0x08016c30

0800bfc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <tcp_pcb_remove+0x1e>
 800bfd4:	4b3e      	ldr	r3, [pc, #248]	; (800c0d0 <tcp_pcb_remove+0x10c>)
 800bfd6:	f640 0283 	movw	r2, #2179	; 0x883
 800bfda:	493e      	ldr	r1, [pc, #248]	; (800c0d4 <tcp_pcb_remove+0x110>)
 800bfdc:	483e      	ldr	r0, [pc, #248]	; (800c0d8 <tcp_pcb_remove+0x114>)
 800bfde:	f009 f893 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <tcp_pcb_remove+0x32>
 800bfe8:	4b39      	ldr	r3, [pc, #228]	; (800c0d0 <tcp_pcb_remove+0x10c>)
 800bfea:	f640 0284 	movw	r2, #2180	; 0x884
 800bfee:	493b      	ldr	r1, [pc, #236]	; (800c0dc <tcp_pcb_remove+0x118>)
 800bff0:	4839      	ldr	r0, [pc, #228]	; (800c0d8 <tcp_pcb_remove+0x114>)
 800bff2:	f009 f889 	bl	8015108 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d105      	bne.n	800c00c <tcp_pcb_remove+0x48>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	e013      	b.n	800c034 <tcp_pcb_remove+0x70>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e00c      	b.n	800c02e <tcp_pcb_remove+0x6a>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d104      	bne.n	800c028 <tcp_pcb_remove+0x64>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68da      	ldr	r2, [r3, #12]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	60da      	str	r2, [r3, #12]
 800c026:	e005      	b.n	800c034 <tcp_pcb_remove+0x70>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1ef      	bne.n	800c014 <tcp_pcb_remove+0x50>
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2200      	movs	r2, #0
 800c038:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c03a:	6838      	ldr	r0, [r7, #0]
 800c03c:	f7ff ff72 	bl	800bf24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	7d1b      	ldrb	r3, [r3, #20]
 800c044:	2b0a      	cmp	r3, #10
 800c046:	d013      	beq.n	800c070 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d00f      	beq.n	800c070 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	8b5b      	ldrh	r3, [r3, #26]
 800c054:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d009      	beq.n	800c070 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	8b5b      	ldrh	r3, [r3, #26]
 800c060:	f043 0302 	orr.w	r3, r3, #2
 800c064:	b29a      	uxth	r2, r3
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c06a:	6838      	ldr	r0, [r7, #0]
 800c06c:	f002 ff6e 	bl	800ef4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d020      	beq.n	800c0ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <tcp_pcb_remove+0xca>
 800c080:	4b13      	ldr	r3, [pc, #76]	; (800c0d0 <tcp_pcb_remove+0x10c>)
 800c082:	f640 0293 	movw	r2, #2195	; 0x893
 800c086:	4916      	ldr	r1, [pc, #88]	; (800c0e0 <tcp_pcb_remove+0x11c>)
 800c088:	4813      	ldr	r0, [pc, #76]	; (800c0d8 <tcp_pcb_remove+0x114>)
 800c08a:	f009 f83d 	bl	8015108 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c092:	2b00      	cmp	r3, #0
 800c094:	d006      	beq.n	800c0a4 <tcp_pcb_remove+0xe0>
 800c096:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <tcp_pcb_remove+0x10c>)
 800c098:	f640 0294 	movw	r2, #2196	; 0x894
 800c09c:	4911      	ldr	r1, [pc, #68]	; (800c0e4 <tcp_pcb_remove+0x120>)
 800c09e:	480e      	ldr	r0, [pc, #56]	; (800c0d8 <tcp_pcb_remove+0x114>)
 800c0a0:	f009 f832 	bl	8015108 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <tcp_pcb_remove+0xf6>
 800c0ac:	4b08      	ldr	r3, [pc, #32]	; (800c0d0 <tcp_pcb_remove+0x10c>)
 800c0ae:	f640 0296 	movw	r2, #2198	; 0x896
 800c0b2:	490d      	ldr	r1, [pc, #52]	; (800c0e8 <tcp_pcb_remove+0x124>)
 800c0b4:	4808      	ldr	r0, [pc, #32]	; (800c0d8 <tcp_pcb_remove+0x114>)
 800c0b6:	f009 f827 	bl	8015108 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08016bec 	.word	0x08016bec
 800c0d4:	08017254 	.word	0x08017254
 800c0d8:	08016c30 	.word	0x08016c30
 800c0dc:	08017270 	.word	0x08017270
 800c0e0:	08017290 	.word	0x08017290
 800c0e4:	080172a8 	.word	0x080172a8
 800c0e8:	080172c4 	.word	0x080172c4

0800c0ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <tcp_next_iss+0x1c>
 800c0fa:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <tcp_next_iss+0x38>)
 800c0fc:	f640 02af 	movw	r2, #2223	; 0x8af
 800c100:	4909      	ldr	r1, [pc, #36]	; (800c128 <tcp_next_iss+0x3c>)
 800c102:	480a      	ldr	r0, [pc, #40]	; (800c12c <tcp_next_iss+0x40>)
 800c104:	f009 f800 	bl	8015108 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <tcp_next_iss+0x44>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <tcp_next_iss+0x48>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4413      	add	r3, r2
 800c112:	4a07      	ldr	r2, [pc, #28]	; (800c130 <tcp_next_iss+0x44>)
 800c114:	6013      	str	r3, [r2, #0]
  return iss;
 800c116:	4b06      	ldr	r3, [pc, #24]	; (800c130 <tcp_next_iss+0x44>)
 800c118:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	08016bec 	.word	0x08016bec
 800c128:	080172dc 	.word	0x080172dc
 800c12c:	08016c30 	.word	0x08016c30
 800c130:	20000014 	.word	0x20000014
 800c134:	2000d3c4 	.word	0x2000d3c4

0800c138 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d106      	bne.n	800c15a <tcp_eff_send_mss_netif+0x22>
 800c14c:	4b14      	ldr	r3, [pc, #80]	; (800c1a0 <tcp_eff_send_mss_netif+0x68>)
 800c14e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c152:	4914      	ldr	r1, [pc, #80]	; (800c1a4 <tcp_eff_send_mss_netif+0x6c>)
 800c154:	4814      	ldr	r0, [pc, #80]	; (800c1a8 <tcp_eff_send_mss_netif+0x70>)
 800c156:	f008 ffd7 	bl	8015108 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c160:	89fb      	ldrh	r3, [r7, #14]
 800c162:	e019      	b.n	800c198 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c168:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c16a:	8afb      	ldrh	r3, [r7, #22]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d012      	beq.n	800c196 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c170:	2328      	movs	r3, #40	; 0x28
 800c172:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c174:	8afa      	ldrh	r2, [r7, #22]
 800c176:	8abb      	ldrh	r3, [r7, #20]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d904      	bls.n	800c186 <tcp_eff_send_mss_netif+0x4e>
 800c17c:	8afa      	ldrh	r2, [r7, #22]
 800c17e:	8abb      	ldrh	r3, [r7, #20]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	b29b      	uxth	r3, r3
 800c184:	e000      	b.n	800c188 <tcp_eff_send_mss_netif+0x50>
 800c186:	2300      	movs	r3, #0
 800c188:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c18a:	8a7a      	ldrh	r2, [r7, #18]
 800c18c:	89fb      	ldrh	r3, [r7, #14]
 800c18e:	4293      	cmp	r3, r2
 800c190:	bf28      	it	cs
 800c192:	4613      	movcs	r3, r2
 800c194:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c196:	89fb      	ldrh	r3, [r7, #14]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	08016bec 	.word	0x08016bec
 800c1a4:	080172f8 	.word	0x080172f8
 800c1a8:	08016c30 	.word	0x08016c30

0800c1ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d119      	bne.n	800c1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c1c0:	4b10      	ldr	r3, [pc, #64]	; (800c204 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c1c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c1c6:	4910      	ldr	r1, [pc, #64]	; (800c208 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c1c8:	4810      	ldr	r0, [pc, #64]	; (800c20c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c1ca:	f008 ff9d 	bl	8015108 <iprintf>

  while (pcb != NULL) {
 800c1ce:	e011      	b.n	800c1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d108      	bne.n	800c1ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7fe ffc6 	bl	800b174 <tcp_abort>
      pcb = next;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	e002      	b.n	800c1f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1ea      	bne.n	800c1d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	08016bec 	.word	0x08016bec
 800c208:	08017320 	.word	0x08017320
 800c20c:	08016c30 	.word	0x08016c30

0800c210 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d02a      	beq.n	800c276 <tcp_netif_ip_addr_changed+0x66>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d026      	beq.n	800c276 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <tcp_netif_ip_addr_changed+0x70>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff ffbc 	bl	800c1ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <tcp_netif_ip_addr_changed+0x74>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff ffb6 	bl	800c1ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d017      	beq.n	800c276 <tcp_netif_ip_addr_changed+0x66>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d013      	beq.n	800c276 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c24e:	4b0e      	ldr	r3, [pc, #56]	; (800c288 <tcp_netif_ip_addr_changed+0x78>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	e00c      	b.n	800c270 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d103      	bne.n	800c26a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1ef      	bne.n	800c256 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	2000d3d0 	.word	0x2000d3d0
 800c284:	2000d3c8 	.word	0x2000d3c8
 800c288:	2000d3cc 	.word	0x2000d3cc

0800c28c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d007      	beq.n	800c2ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fc3d 	bl	800bb20 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c2b4:	b590      	push	{r4, r7, lr}
 800c2b6:	b08d      	sub	sp, #52	; 0x34
 800c2b8:	af04      	add	r7, sp, #16
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d105      	bne.n	800c2d0 <tcp_input+0x1c>
 800c2c4:	4b9b      	ldr	r3, [pc, #620]	; (800c534 <tcp_input+0x280>)
 800c2c6:	2283      	movs	r2, #131	; 0x83
 800c2c8:	499b      	ldr	r1, [pc, #620]	; (800c538 <tcp_input+0x284>)
 800c2ca:	489c      	ldr	r0, [pc, #624]	; (800c53c <tcp_input+0x288>)
 800c2cc:	f008 ff1c 	bl	8015108 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4a9a      	ldr	r2, [pc, #616]	; (800c540 <tcp_input+0x28c>)
 800c2d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	895b      	ldrh	r3, [r3, #10]
 800c2dc:	2b13      	cmp	r3, #19
 800c2de:	f240 83d1 	bls.w	800ca84 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c2e2:	4b98      	ldr	r3, [pc, #608]	; (800c544 <tcp_input+0x290>)
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	4a97      	ldr	r2, [pc, #604]	; (800c544 <tcp_input+0x290>)
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f007 fdc3 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f040 83c7 	bne.w	800ca88 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c2fa:	4b92      	ldr	r3, [pc, #584]	; (800c544 <tcp_input+0x290>)
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c302:	2be0      	cmp	r3, #224	; 0xe0
 800c304:	f000 83c0 	beq.w	800ca88 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c308:	4b8d      	ldr	r3, [pc, #564]	; (800c540 <tcp_input+0x28c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	4618      	mov	r0, r3
 800c312:	f7fc fdf5 	bl	8008f00 <lwip_htons>
 800c316:	4603      	mov	r3, r0
 800c318:	0b1b      	lsrs	r3, r3, #12
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c322:	7cbb      	ldrb	r3, [r7, #18]
 800c324:	2b13      	cmp	r3, #19
 800c326:	f240 83b1 	bls.w	800ca8c <tcp_input+0x7d8>
 800c32a:	7cbb      	ldrb	r3, [r7, #18]
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	891b      	ldrh	r3, [r3, #8]
 800c332:	429a      	cmp	r2, r3
 800c334:	f200 83aa 	bhi.w	800ca8c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c338:	7cbb      	ldrb	r3, [r7, #18]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	3b14      	subs	r3, #20
 800c33e:	b29a      	uxth	r2, r3
 800c340:	4b81      	ldr	r3, [pc, #516]	; (800c548 <tcp_input+0x294>)
 800c342:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c344:	4b81      	ldr	r3, [pc, #516]	; (800c54c <tcp_input+0x298>)
 800c346:	2200      	movs	r2, #0
 800c348:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	895a      	ldrh	r2, [r3, #10]
 800c34e:	7cbb      	ldrb	r3, [r7, #18]
 800c350:	b29b      	uxth	r3, r3
 800c352:	429a      	cmp	r2, r3
 800c354:	d309      	bcc.n	800c36a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c356:	4b7c      	ldr	r3, [pc, #496]	; (800c548 <tcp_input+0x294>)
 800c358:	881a      	ldrh	r2, [r3, #0]
 800c35a:	4b7d      	ldr	r3, [pc, #500]	; (800c550 <tcp_input+0x29c>)
 800c35c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c35e:	7cbb      	ldrb	r3, [r7, #18]
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7fe f8dc 	bl	800a520 <pbuf_remove_header>
 800c368:	e04e      	b.n	800c408 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d105      	bne.n	800c37e <tcp_input+0xca>
 800c372:	4b70      	ldr	r3, [pc, #448]	; (800c534 <tcp_input+0x280>)
 800c374:	22c2      	movs	r2, #194	; 0xc2
 800c376:	4977      	ldr	r1, [pc, #476]	; (800c554 <tcp_input+0x2a0>)
 800c378:	4870      	ldr	r0, [pc, #448]	; (800c53c <tcp_input+0x288>)
 800c37a:	f008 fec5 	bl	8015108 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c37e:	2114      	movs	r1, #20
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7fe f8cd 	bl	800a520 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	895a      	ldrh	r2, [r3, #10]
 800c38a:	4b71      	ldr	r3, [pc, #452]	; (800c550 <tcp_input+0x29c>)
 800c38c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c38e:	4b6e      	ldr	r3, [pc, #440]	; (800c548 <tcp_input+0x294>)
 800c390:	881a      	ldrh	r2, [r3, #0]
 800c392:	4b6f      	ldr	r3, [pc, #444]	; (800c550 <tcp_input+0x29c>)
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c39a:	4b6d      	ldr	r3, [pc, #436]	; (800c550 <tcp_input+0x29c>)
 800c39c:	881b      	ldrh	r3, [r3, #0]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7fe f8bd 	bl	800a520 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	895b      	ldrh	r3, [r3, #10]
 800c3ac:	8a3a      	ldrh	r2, [r7, #16]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	f200 836e 	bhi.w	800ca90 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	4a64      	ldr	r2, [pc, #400]	; (800c54c <tcp_input+0x298>)
 800c3bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	8a3a      	ldrh	r2, [r7, #16]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe f8aa 	bl	800a520 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	891a      	ldrh	r2, [r3, #8]
 800c3d0:	8a3b      	ldrh	r3, [r7, #16]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	895b      	ldrh	r3, [r3, #10]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d005      	beq.n	800c3ee <tcp_input+0x13a>
 800c3e2:	4b54      	ldr	r3, [pc, #336]	; (800c534 <tcp_input+0x280>)
 800c3e4:	22df      	movs	r2, #223	; 0xdf
 800c3e6:	495c      	ldr	r1, [pc, #368]	; (800c558 <tcp_input+0x2a4>)
 800c3e8:	4854      	ldr	r0, [pc, #336]	; (800c53c <tcp_input+0x288>)
 800c3ea:	f008 fe8d 	bl	8015108 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	891a      	ldrh	r2, [r3, #8]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	891b      	ldrh	r3, [r3, #8]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d005      	beq.n	800c408 <tcp_input+0x154>
 800c3fc:	4b4d      	ldr	r3, [pc, #308]	; (800c534 <tcp_input+0x280>)
 800c3fe:	22e0      	movs	r2, #224	; 0xe0
 800c400:	4956      	ldr	r1, [pc, #344]	; (800c55c <tcp_input+0x2a8>)
 800c402:	484e      	ldr	r0, [pc, #312]	; (800c53c <tcp_input+0x288>)
 800c404:	f008 fe80 	bl	8015108 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c408:	4b4d      	ldr	r3, [pc, #308]	; (800c540 <tcp_input+0x28c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	4a4b      	ldr	r2, [pc, #300]	; (800c540 <tcp_input+0x28c>)
 800c412:	6814      	ldr	r4, [r2, #0]
 800c414:	4618      	mov	r0, r3
 800c416:	f7fc fd73 	bl	8008f00 <lwip_htons>
 800c41a:	4603      	mov	r3, r0
 800c41c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c41e:	4b48      	ldr	r3, [pc, #288]	; (800c540 <tcp_input+0x28c>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	885b      	ldrh	r3, [r3, #2]
 800c424:	b29b      	uxth	r3, r3
 800c426:	4a46      	ldr	r2, [pc, #280]	; (800c540 <tcp_input+0x28c>)
 800c428:	6814      	ldr	r4, [r2, #0]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fc fd68 	bl	8008f00 <lwip_htons>
 800c430:	4603      	mov	r3, r0
 800c432:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c434:	4b42      	ldr	r3, [pc, #264]	; (800c540 <tcp_input+0x28c>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	4a41      	ldr	r2, [pc, #260]	; (800c540 <tcp_input+0x28c>)
 800c43c:	6814      	ldr	r4, [r2, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fc fd73 	bl	8008f2a <lwip_htonl>
 800c444:	4603      	mov	r3, r0
 800c446:	6063      	str	r3, [r4, #4]
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	4a45      	ldr	r2, [pc, #276]	; (800c560 <tcp_input+0x2ac>)
 800c44c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c44e:	4b3c      	ldr	r3, [pc, #240]	; (800c540 <tcp_input+0x28c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	4a3a      	ldr	r2, [pc, #232]	; (800c540 <tcp_input+0x28c>)
 800c456:	6814      	ldr	r4, [r2, #0]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fc fd66 	bl	8008f2a <lwip_htonl>
 800c45e:	4603      	mov	r3, r0
 800c460:	60a3      	str	r3, [r4, #8]
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	4a3f      	ldr	r2, [pc, #252]	; (800c564 <tcp_input+0x2b0>)
 800c466:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c468:	4b35      	ldr	r3, [pc, #212]	; (800c540 <tcp_input+0x28c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	89db      	ldrh	r3, [r3, #14]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	4a33      	ldr	r2, [pc, #204]	; (800c540 <tcp_input+0x28c>)
 800c472:	6814      	ldr	r4, [r2, #0]
 800c474:	4618      	mov	r0, r3
 800c476:	f7fc fd43 	bl	8008f00 <lwip_htons>
 800c47a:	4603      	mov	r3, r0
 800c47c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c47e:	4b30      	ldr	r3, [pc, #192]	; (800c540 <tcp_input+0x28c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	899b      	ldrh	r3, [r3, #12]
 800c484:	b29b      	uxth	r3, r3
 800c486:	4618      	mov	r0, r3
 800c488:	f7fc fd3a 	bl	8008f00 <lwip_htons>
 800c48c:	4603      	mov	r3, r0
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c494:	b2da      	uxtb	r2, r3
 800c496:	4b34      	ldr	r3, [pc, #208]	; (800c568 <tcp_input+0x2b4>)
 800c498:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	891a      	ldrh	r2, [r3, #8]
 800c49e:	4b33      	ldr	r3, [pc, #204]	; (800c56c <tcp_input+0x2b8>)
 800c4a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c4a2:	4b31      	ldr	r3, [pc, #196]	; (800c568 <tcp_input+0x2b4>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 0303 	and.w	r3, r3, #3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00c      	beq.n	800c4c8 <tcp_input+0x214>
    tcplen++;
 800c4ae:	4b2f      	ldr	r3, [pc, #188]	; (800c56c <tcp_input+0x2b8>)
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	4b2d      	ldr	r3, [pc, #180]	; (800c56c <tcp_input+0x2b8>)
 800c4b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	891a      	ldrh	r2, [r3, #8]
 800c4be:	4b2b      	ldr	r3, [pc, #172]	; (800c56c <tcp_input+0x2b8>)
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	f200 82e6 	bhi.w	800ca94 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4cc:	4b28      	ldr	r3, [pc, #160]	; (800c570 <tcp_input+0x2bc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	61fb      	str	r3, [r7, #28]
 800c4d2:	e09d      	b.n	800c610 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	7d1b      	ldrb	r3, [r3, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d105      	bne.n	800c4e8 <tcp_input+0x234>
 800c4dc:	4b15      	ldr	r3, [pc, #84]	; (800c534 <tcp_input+0x280>)
 800c4de:	22fb      	movs	r2, #251	; 0xfb
 800c4e0:	4924      	ldr	r1, [pc, #144]	; (800c574 <tcp_input+0x2c0>)
 800c4e2:	4816      	ldr	r0, [pc, #88]	; (800c53c <tcp_input+0x288>)
 800c4e4:	f008 fe10 	bl	8015108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	7d1b      	ldrb	r3, [r3, #20]
 800c4ec:	2b0a      	cmp	r3, #10
 800c4ee:	d105      	bne.n	800c4fc <tcp_input+0x248>
 800c4f0:	4b10      	ldr	r3, [pc, #64]	; (800c534 <tcp_input+0x280>)
 800c4f2:	22fc      	movs	r2, #252	; 0xfc
 800c4f4:	4920      	ldr	r1, [pc, #128]	; (800c578 <tcp_input+0x2c4>)
 800c4f6:	4811      	ldr	r0, [pc, #68]	; (800c53c <tcp_input+0x288>)
 800c4f8:	f008 fe06 	bl	8015108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	7d1b      	ldrb	r3, [r3, #20]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d105      	bne.n	800c510 <tcp_input+0x25c>
 800c504:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <tcp_input+0x280>)
 800c506:	22fd      	movs	r2, #253	; 0xfd
 800c508:	491c      	ldr	r1, [pc, #112]	; (800c57c <tcp_input+0x2c8>)
 800c50a:	480c      	ldr	r0, [pc, #48]	; (800c53c <tcp_input+0x288>)
 800c50c:	f008 fdfc 	bl	8015108 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	7a1b      	ldrb	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d033      	beq.n	800c580 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	7a1a      	ldrb	r2, [r3, #8]
 800c51c:	4b09      	ldr	r3, [pc, #36]	; (800c544 <tcp_input+0x290>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c524:	3301      	adds	r3, #1
 800c526:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c528:	429a      	cmp	r2, r3
 800c52a:	d029      	beq.n	800c580 <tcp_input+0x2cc>
      prev = pcb;
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	61bb      	str	r3, [r7, #24]
      continue;
 800c530:	e06b      	b.n	800c60a <tcp_input+0x356>
 800c532:	bf00      	nop
 800c534:	08017354 	.word	0x08017354
 800c538:	08017388 	.word	0x08017388
 800c53c:	080173a0 	.word	0x080173a0
 800c540:	2000d3ec 	.word	0x2000d3ec
 800c544:	20009c50 	.word	0x20009c50
 800c548:	2000d3f0 	.word	0x2000d3f0
 800c54c:	2000d3f4 	.word	0x2000d3f4
 800c550:	2000d3f2 	.word	0x2000d3f2
 800c554:	080173c8 	.word	0x080173c8
 800c558:	080173d8 	.word	0x080173d8
 800c55c:	080173e4 	.word	0x080173e4
 800c560:	2000d3fc 	.word	0x2000d3fc
 800c564:	2000d400 	.word	0x2000d400
 800c568:	2000d408 	.word	0x2000d408
 800c56c:	2000d406 	.word	0x2000d406
 800c570:	2000d3d0 	.word	0x2000d3d0
 800c574:	08017404 	.word	0x08017404
 800c578:	0801742c 	.word	0x0801742c
 800c57c:	08017458 	.word	0x08017458
    }

    if (pcb->remote_port == tcphdr->src &&
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	8b1a      	ldrh	r2, [r3, #24]
 800c584:	4b72      	ldr	r3, [pc, #456]	; (800c750 <tcp_input+0x49c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d13a      	bne.n	800c606 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	8ada      	ldrh	r2, [r3, #22]
 800c594:	4b6e      	ldr	r3, [pc, #440]	; (800c750 <tcp_input+0x49c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	885b      	ldrh	r3, [r3, #2]
 800c59a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d132      	bne.n	800c606 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	4b6b      	ldr	r3, [pc, #428]	; (800c754 <tcp_input+0x4a0>)
 800c5a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d12c      	bne.n	800c606 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	4b68      	ldr	r3, [pc, #416]	; (800c754 <tcp_input+0x4a0>)
 800c5b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d126      	bne.n	800c606 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	69fa      	ldr	r2, [r7, #28]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d106      	bne.n	800c5d0 <tcp_input+0x31c>
 800c5c2:	4b65      	ldr	r3, [pc, #404]	; (800c758 <tcp_input+0x4a4>)
 800c5c4:	f240 120d 	movw	r2, #269	; 0x10d
 800c5c8:	4964      	ldr	r1, [pc, #400]	; (800c75c <tcp_input+0x4a8>)
 800c5ca:	4865      	ldr	r0, [pc, #404]	; (800c760 <tcp_input+0x4ac>)
 800c5cc:	f008 fd9c 	bl	8015108 <iprintf>
      if (prev != NULL) {
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <tcp_input+0x338>
        prev->next = pcb->next;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c5de:	4b61      	ldr	r3, [pc, #388]	; (800c764 <tcp_input+0x4b0>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c5e6:	4a5f      	ldr	r2, [pc, #380]	; (800c764 <tcp_input+0x4b0>)
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	69fa      	ldr	r2, [r7, #28]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d111      	bne.n	800c61a <tcp_input+0x366>
 800c5f6:	4b58      	ldr	r3, [pc, #352]	; (800c758 <tcp_input+0x4a4>)
 800c5f8:	f240 1215 	movw	r2, #277	; 0x115
 800c5fc:	495a      	ldr	r1, [pc, #360]	; (800c768 <tcp_input+0x4b4>)
 800c5fe:	4858      	ldr	r0, [pc, #352]	; (800c760 <tcp_input+0x4ac>)
 800c600:	f008 fd82 	bl	8015108 <iprintf>
      break;
 800c604:	e009      	b.n	800c61a <tcp_input+0x366>
    }
    prev = pcb;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	61fb      	str	r3, [r7, #28]
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f47f af5e 	bne.w	800c4d4 <tcp_input+0x220>
 800c618:	e000      	b.n	800c61c <tcp_input+0x368>
      break;
 800c61a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f040 80aa 	bne.w	800c778 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c624:	4b51      	ldr	r3, [pc, #324]	; (800c76c <tcp_input+0x4b8>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	61fb      	str	r3, [r7, #28]
 800c62a:	e03f      	b.n	800c6ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b0a      	cmp	r3, #10
 800c632:	d006      	beq.n	800c642 <tcp_input+0x38e>
 800c634:	4b48      	ldr	r3, [pc, #288]	; (800c758 <tcp_input+0x4a4>)
 800c636:	f240 121f 	movw	r2, #287	; 0x11f
 800c63a:	494d      	ldr	r1, [pc, #308]	; (800c770 <tcp_input+0x4bc>)
 800c63c:	4848      	ldr	r0, [pc, #288]	; (800c760 <tcp_input+0x4ac>)
 800c63e:	f008 fd63 	bl	8015108 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	7a1b      	ldrb	r3, [r3, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	7a1a      	ldrb	r2, [r3, #8]
 800c64e:	4b41      	ldr	r3, [pc, #260]	; (800c754 <tcp_input+0x4a0>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c656:	3301      	adds	r3, #1
 800c658:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d122      	bne.n	800c6a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	8b1a      	ldrh	r2, [r3, #24]
 800c662:	4b3b      	ldr	r3, [pc, #236]	; (800c750 <tcp_input+0x49c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d11b      	bne.n	800c6a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	8ada      	ldrh	r2, [r3, #22]
 800c672:	4b37      	ldr	r3, [pc, #220]	; (800c750 <tcp_input+0x49c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	885b      	ldrh	r3, [r3, #2]
 800c678:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d113      	bne.n	800c6a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	4b34      	ldr	r3, [pc, #208]	; (800c754 <tcp_input+0x4a0>)
 800c684:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c686:	429a      	cmp	r2, r3
 800c688:	d10d      	bne.n	800c6a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4b31      	ldr	r3, [pc, #196]	; (800c754 <tcp_input+0x4a0>)
 800c690:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c692:	429a      	cmp	r2, r3
 800c694:	d107      	bne.n	800c6a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c696:	69f8      	ldr	r0, [r7, #28]
 800c698:	f000 fb56 	bl	800cd48 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7fd ffc5 	bl	800a62c <pbuf_free>
        return;
 800c6a2:	e1fd      	b.n	800caa0 <tcp_input+0x7ec>
        continue;
 800c6a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	61fb      	str	r3, [r7, #28]
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1bc      	bne.n	800c62c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6b6:	4b2f      	ldr	r3, [pc, #188]	; (800c774 <tcp_input+0x4c0>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	e02a      	b.n	800c714 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	7a1b      	ldrb	r3, [r3, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00c      	beq.n	800c6e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	7a1a      	ldrb	r2, [r3, #8]
 800c6ca:	4b22      	ldr	r3, [pc, #136]	; (800c754 <tcp_input+0x4a0>)
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d002      	beq.n	800c6e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	61bb      	str	r3, [r7, #24]
        continue;
 800c6de:	e016      	b.n	800c70e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	8ada      	ldrh	r2, [r3, #22]
 800c6e4:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <tcp_input+0x49c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d10c      	bne.n	800c70a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	4b17      	ldr	r3, [pc, #92]	; (800c754 <tcp_input+0x4a0>)
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d00f      	beq.n	800c71c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00d      	beq.n	800c71e <tcp_input+0x46a>
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d009      	beq.n	800c71e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1d1      	bne.n	800c6be <tcp_input+0x40a>
 800c71a:	e000      	b.n	800c71e <tcp_input+0x46a>
            break;
 800c71c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d029      	beq.n	800c778 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	68da      	ldr	r2, [r3, #12]
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c732:	4b10      	ldr	r3, [pc, #64]	; (800c774 <tcp_input+0x4c0>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c73a:	4a0e      	ldr	r2, [pc, #56]	; (800c774 <tcp_input+0x4c0>)
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c740:	6978      	ldr	r0, [r7, #20]
 800c742:	f000 fa03 	bl	800cb4c <tcp_listen_input>
      }
      pbuf_free(p);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7fd ff70 	bl	800a62c <pbuf_free>
      return;
 800c74c:	e1a8      	b.n	800caa0 <tcp_input+0x7ec>
 800c74e:	bf00      	nop
 800c750:	2000d3ec 	.word	0x2000d3ec
 800c754:	20009c50 	.word	0x20009c50
 800c758:	08017354 	.word	0x08017354
 800c75c:	08017480 	.word	0x08017480
 800c760:	080173a0 	.word	0x080173a0
 800c764:	2000d3d0 	.word	0x2000d3d0
 800c768:	080174ac 	.word	0x080174ac
 800c76c:	2000d3d4 	.word	0x2000d3d4
 800c770:	080174d8 	.word	0x080174d8
 800c774:	2000d3cc 	.word	0x2000d3cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 8158 	beq.w	800ca30 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c780:	4b95      	ldr	r3, [pc, #596]	; (800c9d8 <tcp_input+0x724>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	891a      	ldrh	r2, [r3, #8]
 800c78a:	4b93      	ldr	r3, [pc, #588]	; (800c9d8 <tcp_input+0x724>)
 800c78c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c78e:	4a92      	ldr	r2, [pc, #584]	; (800c9d8 <tcp_input+0x724>)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c794:	4b91      	ldr	r3, [pc, #580]	; (800c9dc <tcp_input+0x728>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a8f      	ldr	r2, [pc, #572]	; (800c9d8 <tcp_input+0x724>)
 800c79a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c79c:	4b90      	ldr	r3, [pc, #576]	; (800c9e0 <tcp_input+0x72c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c7a2:	4b90      	ldr	r3, [pc, #576]	; (800c9e4 <tcp_input+0x730>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c7a8:	4b8f      	ldr	r3, [pc, #572]	; (800c9e8 <tcp_input+0x734>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c7ae:	4b8f      	ldr	r3, [pc, #572]	; (800c9ec <tcp_input+0x738>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 0308 	and.w	r3, r3, #8
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7b5b      	ldrb	r3, [r3, #13]
 800c7be:	f043 0301 	orr.w	r3, r3, #1
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d017      	beq.n	800c800 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7d0:	69f8      	ldr	r0, [r7, #28]
 800c7d2:	f7ff f929 	bl	800ba28 <tcp_process_refused_data>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f113 0f0d 	cmn.w	r3, #13
 800c7dc:	d007      	beq.n	800c7ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7e6:	4b82      	ldr	r3, [pc, #520]	; (800c9f0 <tcp_input+0x73c>)
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d008      	beq.n	800c800 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f040 80e3 	bne.w	800c9be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c7f8:	69f8      	ldr	r0, [r7, #28]
 800c7fa:	f003 f9ad 	bl	800fb58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c7fe:	e0de      	b.n	800c9be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c800:	4a7c      	ldr	r2, [pc, #496]	; (800c9f4 <tcp_input+0x740>)
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c806:	69f8      	ldr	r0, [r7, #28]
 800c808:	f000 fb18 	bl	800ce3c <tcp_process>
 800c80c:	4603      	mov	r3, r0
 800c80e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c810:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c814:	f113 0f0d 	cmn.w	r3, #13
 800c818:	f000 80d3 	beq.w	800c9c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c81c:	4b71      	ldr	r3, [pc, #452]	; (800c9e4 <tcp_input+0x730>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d015      	beq.n	800c854 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d008      	beq.n	800c844 <tcp_input+0x590>
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	6912      	ldr	r2, [r2, #16]
 800c83c:	f06f 010d 	mvn.w	r1, #13
 800c840:	4610      	mov	r0, r2
 800c842:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c844:	69f9      	ldr	r1, [r7, #28]
 800c846:	486c      	ldr	r0, [pc, #432]	; (800c9f8 <tcp_input+0x744>)
 800c848:	f7ff fbbc 	bl	800bfc4 <tcp_pcb_remove>
        tcp_free(pcb);
 800c84c:	69f8      	ldr	r0, [r7, #28]
 800c84e:	f7fe f9a9 	bl	800aba4 <tcp_free>
 800c852:	e0da      	b.n	800ca0a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c858:	4b63      	ldr	r3, [pc, #396]	; (800c9e8 <tcp_input+0x734>)
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01d      	beq.n	800c89c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c860:	4b61      	ldr	r3, [pc, #388]	; (800c9e8 <tcp_input+0x734>)
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00a      	beq.n	800c886 <tcp_input+0x5d2>
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	6910      	ldr	r0, [r2, #16]
 800c87a:	89fa      	ldrh	r2, [r7, #14]
 800c87c:	69f9      	ldr	r1, [r7, #28]
 800c87e:	4798      	blx	r3
 800c880:	4603      	mov	r3, r0
 800c882:	74fb      	strb	r3, [r7, #19]
 800c884:	e001      	b.n	800c88a <tcp_input+0x5d6>
 800c886:	2300      	movs	r3, #0
 800c888:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c88a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c88e:	f113 0f0d 	cmn.w	r3, #13
 800c892:	f000 8098 	beq.w	800c9c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c896:	4b54      	ldr	r3, [pc, #336]	; (800c9e8 <tcp_input+0x734>)
 800c898:	2200      	movs	r2, #0
 800c89a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c89c:	69f8      	ldr	r0, [r7, #28]
 800c89e:	f000 f915 	bl	800cacc <tcp_input_delayed_close>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 8090 	bne.w	800c9ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c8aa:	4b4d      	ldr	r3, [pc, #308]	; (800c9e0 <tcp_input+0x72c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d041      	beq.n	800c936 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <tcp_input+0x614>
 800c8ba:	4b50      	ldr	r3, [pc, #320]	; (800c9fc <tcp_input+0x748>)
 800c8bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c8c0:	494f      	ldr	r1, [pc, #316]	; (800ca00 <tcp_input+0x74c>)
 800c8c2:	4850      	ldr	r0, [pc, #320]	; (800ca04 <tcp_input+0x750>)
 800c8c4:	f008 fc20 	bl	8015108 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	8b5b      	ldrh	r3, [r3, #26]
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d008      	beq.n	800c8e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c8d4:	4b42      	ldr	r3, [pc, #264]	; (800c9e0 <tcp_input+0x72c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fd fea7 	bl	800a62c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c8de:	69f8      	ldr	r0, [r7, #28]
 800c8e0:	f7fe fc48 	bl	800b174 <tcp_abort>
            goto aborted;
 800c8e4:	e091      	b.n	800ca0a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00c      	beq.n	800c90a <tcp_input+0x656>
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	6918      	ldr	r0, [r3, #16]
 800c8fa:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <tcp_input+0x72c>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	2300      	movs	r3, #0
 800c900:	69f9      	ldr	r1, [r7, #28]
 800c902:	47a0      	blx	r4
 800c904:	4603      	mov	r3, r0
 800c906:	74fb      	strb	r3, [r7, #19]
 800c908:	e008      	b.n	800c91c <tcp_input+0x668>
 800c90a:	4b35      	ldr	r3, [pc, #212]	; (800c9e0 <tcp_input+0x72c>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	2300      	movs	r3, #0
 800c910:	69f9      	ldr	r1, [r7, #28]
 800c912:	2000      	movs	r0, #0
 800c914:	f7ff f95e 	bl	800bbd4 <tcp_recv_null>
 800c918:	4603      	mov	r3, r0
 800c91a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c91c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c920:	f113 0f0d 	cmn.w	r3, #13
 800c924:	d053      	beq.n	800c9ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c92e:	4b2c      	ldr	r3, [pc, #176]	; (800c9e0 <tcp_input+0x72c>)
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c936:	4b2b      	ldr	r3, [pc, #172]	; (800c9e4 <tcp_input+0x730>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 0320 	and.w	r3, r3, #32
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d030      	beq.n	800c9a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c946:	2b00      	cmp	r3, #0
 800c948:	d009      	beq.n	800c95e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c94e:	7b5a      	ldrb	r2, [r3, #13]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c954:	f042 0220 	orr.w	r2, r2, #32
 800c958:	b2d2      	uxtb	r2, r2
 800c95a:	735a      	strb	r2, [r3, #13]
 800c95c:	e022      	b.n	800c9a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c962:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c966:	d005      	beq.n	800c974 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96c:	3301      	adds	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <tcp_input+0x6e2>
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	6918      	ldr	r0, [r3, #16]
 800c988:	2300      	movs	r3, #0
 800c98a:	2200      	movs	r2, #0
 800c98c:	69f9      	ldr	r1, [r7, #28]
 800c98e:	47a0      	blx	r4
 800c990:	4603      	mov	r3, r0
 800c992:	74fb      	strb	r3, [r7, #19]
 800c994:	e001      	b.n	800c99a <tcp_input+0x6e6>
 800c996:	2300      	movs	r3, #0
 800c998:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c99a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c99e:	f113 0f0d 	cmn.w	r3, #13
 800c9a2:	d016      	beq.n	800c9d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c9a4:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <tcp_input+0x740>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c9aa:	69f8      	ldr	r0, [r7, #28]
 800c9ac:	f000 f88e 	bl	800cacc <tcp_input_delayed_close>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d128      	bne.n	800ca08 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c9b6:	69f8      	ldr	r0, [r7, #28]
 800c9b8:	f002 fac8 	bl	800ef4c <tcp_output>
 800c9bc:	e025      	b.n	800ca0a <tcp_input+0x756>
        goto aborted;
 800c9be:	bf00      	nop
 800c9c0:	e023      	b.n	800ca0a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c9c2:	bf00      	nop
 800c9c4:	e021      	b.n	800ca0a <tcp_input+0x756>
              goto aborted;
 800c9c6:	bf00      	nop
 800c9c8:	e01f      	b.n	800ca0a <tcp_input+0x756>
          goto aborted;
 800c9ca:	bf00      	nop
 800c9cc:	e01d      	b.n	800ca0a <tcp_input+0x756>
            goto aborted;
 800c9ce:	bf00      	nop
 800c9d0:	e01b      	b.n	800ca0a <tcp_input+0x756>
              goto aborted;
 800c9d2:	bf00      	nop
 800c9d4:	e019      	b.n	800ca0a <tcp_input+0x756>
 800c9d6:	bf00      	nop
 800c9d8:	2000d3dc 	.word	0x2000d3dc
 800c9dc:	2000d3ec 	.word	0x2000d3ec
 800c9e0:	2000d40c 	.word	0x2000d40c
 800c9e4:	2000d409 	.word	0x2000d409
 800c9e8:	2000d404 	.word	0x2000d404
 800c9ec:	2000d408 	.word	0x2000d408
 800c9f0:	2000d406 	.word	0x2000d406
 800c9f4:	2000d410 	.word	0x2000d410
 800c9f8:	2000d3d0 	.word	0x2000d3d0
 800c9fc:	08017354 	.word	0x08017354
 800ca00:	08017508 	.word	0x08017508
 800ca04:	080173a0 	.word	0x080173a0
          goto aborted;
 800ca08:	bf00      	nop
    tcp_input_pcb = NULL;
 800ca0a:	4b27      	ldr	r3, [pc, #156]	; (800caa8 <tcp_input+0x7f4>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ca10:	4b26      	ldr	r3, [pc, #152]	; (800caac <tcp_input+0x7f8>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ca16:	4b26      	ldr	r3, [pc, #152]	; (800cab0 <tcp_input+0x7fc>)
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d03f      	beq.n	800ca9e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ca1e:	4b24      	ldr	r3, [pc, #144]	; (800cab0 <tcp_input+0x7fc>)
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd fe02 	bl	800a62c <pbuf_free>
      inseg.p = NULL;
 800ca28:	4b21      	ldr	r3, [pc, #132]	; (800cab0 <tcp_input+0x7fc>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ca2e:	e036      	b.n	800ca9e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ca30:	4b20      	ldr	r3, [pc, #128]	; (800cab4 <tcp_input+0x800>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	899b      	ldrh	r3, [r3, #12]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fc fa61 	bl	8008f00 <lwip_htons>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	f003 0304 	and.w	r3, r3, #4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d118      	bne.n	800ca7c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca4a:	4b1b      	ldr	r3, [pc, #108]	; (800cab8 <tcp_input+0x804>)
 800ca4c:	6819      	ldr	r1, [r3, #0]
 800ca4e:	4b1b      	ldr	r3, [pc, #108]	; (800cabc <tcp_input+0x808>)
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <tcp_input+0x80c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca5a:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <tcp_input+0x800>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca5e:	885b      	ldrh	r3, [r3, #2]
 800ca60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca62:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <tcp_input+0x800>)
 800ca64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca66:	8812      	ldrh	r2, [r2, #0]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	9202      	str	r2, [sp, #8]
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	4b15      	ldr	r3, [pc, #84]	; (800cac4 <tcp_input+0x810>)
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <tcp_input+0x814>)
 800ca74:	4602      	mov	r2, r0
 800ca76:	2000      	movs	r0, #0
 800ca78:	f003 f81c 	bl	800fab4 <tcp_rst>
    pbuf_free(p);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7fd fdd5 	bl	800a62c <pbuf_free>
  return;
 800ca82:	e00c      	b.n	800ca9e <tcp_input+0x7ea>
    goto dropped;
 800ca84:	bf00      	nop
 800ca86:	e006      	b.n	800ca96 <tcp_input+0x7e2>
    goto dropped;
 800ca88:	bf00      	nop
 800ca8a:	e004      	b.n	800ca96 <tcp_input+0x7e2>
    goto dropped;
 800ca8c:	bf00      	nop
 800ca8e:	e002      	b.n	800ca96 <tcp_input+0x7e2>
      goto dropped;
 800ca90:	bf00      	nop
 800ca92:	e000      	b.n	800ca96 <tcp_input+0x7e2>
      goto dropped;
 800ca94:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7fd fdc8 	bl	800a62c <pbuf_free>
 800ca9c:	e000      	b.n	800caa0 <tcp_input+0x7ec>
  return;
 800ca9e:	bf00      	nop
}
 800caa0:	3724      	adds	r7, #36	; 0x24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd90      	pop	{r4, r7, pc}
 800caa6:	bf00      	nop
 800caa8:	2000d410 	.word	0x2000d410
 800caac:	2000d40c 	.word	0x2000d40c
 800cab0:	2000d3dc 	.word	0x2000d3dc
 800cab4:	2000d3ec 	.word	0x2000d3ec
 800cab8:	2000d400 	.word	0x2000d400
 800cabc:	2000d406 	.word	0x2000d406
 800cac0:	2000d3fc 	.word	0x2000d3fc
 800cac4:	20009c60 	.word	0x20009c60
 800cac8:	20009c64 	.word	0x20009c64

0800cacc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <tcp_input_delayed_close+0x1c>
 800cada:	4b17      	ldr	r3, [pc, #92]	; (800cb38 <tcp_input_delayed_close+0x6c>)
 800cadc:	f240 225a 	movw	r2, #602	; 0x25a
 800cae0:	4916      	ldr	r1, [pc, #88]	; (800cb3c <tcp_input_delayed_close+0x70>)
 800cae2:	4817      	ldr	r0, [pc, #92]	; (800cb40 <tcp_input_delayed_close+0x74>)
 800cae4:	f008 fb10 	bl	8015108 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cae8:	4b16      	ldr	r3, [pc, #88]	; (800cb44 <tcp_input_delayed_close+0x78>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	f003 0310 	and.w	r3, r3, #16
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d01c      	beq.n	800cb2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8b5b      	ldrh	r3, [r3, #26]
 800caf8:	f003 0310 	and.w	r3, r3, #16
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10d      	bne.n	800cb1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d008      	beq.n	800cb1c <tcp_input_delayed_close+0x50>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6912      	ldr	r2, [r2, #16]
 800cb14:	f06f 010e 	mvn.w	r1, #14
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	480a      	ldr	r0, [pc, #40]	; (800cb48 <tcp_input_delayed_close+0x7c>)
 800cb20:	f7ff fa50 	bl	800bfc4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7fe f83d 	bl	800aba4 <tcp_free>
    return 1;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e000      	b.n	800cb30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	08017354 	.word	0x08017354
 800cb3c:	08017524 	.word	0x08017524
 800cb40:	080173a0 	.word	0x080173a0
 800cb44:	2000d409 	.word	0x2000d409
 800cb48:	2000d3d0 	.word	0x2000d3d0

0800cb4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b08b      	sub	sp, #44	; 0x2c
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cb54:	4b6f      	ldr	r3, [pc, #444]	; (800cd14 <tcp_listen_input+0x1c8>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f040 80d2 	bne.w	800cd06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d106      	bne.n	800cb76 <tcp_listen_input+0x2a>
 800cb68:	4b6b      	ldr	r3, [pc, #428]	; (800cd18 <tcp_listen_input+0x1cc>)
 800cb6a:	f240 2281 	movw	r2, #641	; 0x281
 800cb6e:	496b      	ldr	r1, [pc, #428]	; (800cd1c <tcp_listen_input+0x1d0>)
 800cb70:	486b      	ldr	r0, [pc, #428]	; (800cd20 <tcp_listen_input+0x1d4>)
 800cb72:	f008 fac9 	bl	8015108 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cb76:	4b67      	ldr	r3, [pc, #412]	; (800cd14 <tcp_listen_input+0x1c8>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	f003 0310 	and.w	r3, r3, #16
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d019      	beq.n	800cbb6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb82:	4b68      	ldr	r3, [pc, #416]	; (800cd24 <tcp_listen_input+0x1d8>)
 800cb84:	6819      	ldr	r1, [r3, #0]
 800cb86:	4b68      	ldr	r3, [pc, #416]	; (800cd28 <tcp_listen_input+0x1dc>)
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	4b67      	ldr	r3, [pc, #412]	; (800cd2c <tcp_listen_input+0x1e0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb92:	4b67      	ldr	r3, [pc, #412]	; (800cd30 <tcp_listen_input+0x1e4>)
 800cb94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb96:	885b      	ldrh	r3, [r3, #2]
 800cb98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb9a:	4a65      	ldr	r2, [pc, #404]	; (800cd30 <tcp_listen_input+0x1e4>)
 800cb9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	b292      	uxth	r2, r2
 800cba2:	9202      	str	r2, [sp, #8]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	4b63      	ldr	r3, [pc, #396]	; (800cd34 <tcp_listen_input+0x1e8>)
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	4b63      	ldr	r3, [pc, #396]	; (800cd38 <tcp_listen_input+0x1ec>)
 800cbac:	4602      	mov	r2, r0
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f002 ff80 	bl	800fab4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cbb4:	e0a9      	b.n	800cd0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cbb6:	4b57      	ldr	r3, [pc, #348]	; (800cd14 <tcp_listen_input+0x1c8>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 80a3 	beq.w	800cd0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7d5b      	ldrb	r3, [r3, #21]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff f927 	bl	800be1c <tcp_alloc>
 800cbce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d111      	bne.n	800cbfa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	699b      	ldr	r3, [r3, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00a      	beq.n	800cbf4 <tcp_listen_input+0xa8>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	6910      	ldr	r0, [r2, #16]
 800cbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbea:	2100      	movs	r1, #0
 800cbec:	4798      	blx	r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	73bb      	strb	r3, [r7, #14]
      return;
 800cbf2:	e08b      	b.n	800cd0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cbf4:	23f0      	movs	r3, #240	; 0xf0
 800cbf6:	73bb      	strb	r3, [r7, #14]
      return;
 800cbf8:	e088      	b.n	800cd0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cbfa:	4b50      	ldr	r3, [pc, #320]	; (800cd3c <tcp_listen_input+0x1f0>)
 800cbfc:	695a      	ldr	r2, [r3, #20]
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cc02:	4b4e      	ldr	r3, [pc, #312]	; (800cd3c <tcp_listen_input+0x1f0>)
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	8ada      	ldrh	r2, [r3, #22]
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cc12:	4b47      	ldr	r3, [pc, #284]	; (800cd30 <tcp_listen_input+0x1e4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	881b      	ldrh	r3, [r3, #0]
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2203      	movs	r2, #3
 800cc22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cc24:	4b41      	ldr	r3, [pc, #260]	; (800cd2c <tcp_listen_input+0x1e0>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cc36:	6978      	ldr	r0, [r7, #20]
 800cc38:	f7ff fa58 	bl	800c0ec <tcp_next_iss>
 800cc3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cc56:	4b35      	ldr	r3, [pc, #212]	; (800cd2c <tcp_listen_input+0x1e0>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	1e5a      	subs	r2, r3, #1
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7a5b      	ldrb	r3, [r3, #9]
 800cc72:	f003 030c 	and.w	r3, r3, #12
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7a1a      	ldrb	r2, [r3, #8]
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cc84:	4b2e      	ldr	r3, [pc, #184]	; (800cd40 <tcp_listen_input+0x1f4>)
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	60da      	str	r2, [r3, #12]
 800cc8c:	4a2c      	ldr	r2, [pc, #176]	; (800cd40 <tcp_listen_input+0x1f4>)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	6013      	str	r3, [r2, #0]
 800cc92:	f003 f8d1 	bl	800fe38 <tcp_timer_needed>
 800cc96:	4b2b      	ldr	r3, [pc, #172]	; (800cd44 <tcp_listen_input+0x1f8>)
 800cc98:	2201      	movs	r2, #1
 800cc9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cc9c:	6978      	ldr	r0, [r7, #20]
 800cc9e:	f001 fd8f 	bl	800e7c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cca2:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <tcp_listen_input+0x1e4>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	89db      	ldrh	r3, [r3, #14]
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f006 fe23 	bl	8013910 <ip4_route>
 800ccca:	4601      	mov	r1, r0
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f7ff fa30 	bl	800c138 <tcp_eff_send_mss_netif>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	461a      	mov	r2, r3
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cce0:	2112      	movs	r1, #18
 800cce2:	6978      	ldr	r0, [r7, #20]
 800cce4:	f002 f844 	bl	800ed70 <tcp_enqueue_flags>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ccec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d004      	beq.n	800ccfe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	6978      	ldr	r0, [r7, #20]
 800ccf8:	f7fe f97e 	bl	800aff8 <tcp_abandon>
      return;
 800ccfc:	e006      	b.n	800cd0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ccfe:	6978      	ldr	r0, [r7, #20]
 800cd00:	f002 f924 	bl	800ef4c <tcp_output>
  return;
 800cd04:	e001      	b.n	800cd0a <tcp_listen_input+0x1be>
    return;
 800cd06:	bf00      	nop
 800cd08:	e000      	b.n	800cd0c <tcp_listen_input+0x1c0>
  return;
 800cd0a:	bf00      	nop
}
 800cd0c:	371c      	adds	r7, #28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd90      	pop	{r4, r7, pc}
 800cd12:	bf00      	nop
 800cd14:	2000d408 	.word	0x2000d408
 800cd18:	08017354 	.word	0x08017354
 800cd1c:	0801754c 	.word	0x0801754c
 800cd20:	080173a0 	.word	0x080173a0
 800cd24:	2000d400 	.word	0x2000d400
 800cd28:	2000d406 	.word	0x2000d406
 800cd2c:	2000d3fc 	.word	0x2000d3fc
 800cd30:	2000d3ec 	.word	0x2000d3ec
 800cd34:	20009c60 	.word	0x20009c60
 800cd38:	20009c64 	.word	0x20009c64
 800cd3c:	20009c50 	.word	0x20009c50
 800cd40:	2000d3d0 	.word	0x2000d3d0
 800cd44:	2000d3d8 	.word	0x2000d3d8

0800cd48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af04      	add	r7, sp, #16
 800cd4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cd50:	4b2f      	ldr	r3, [pc, #188]	; (800ce10 <tcp_timewait_input+0xc8>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	f003 0304 	and.w	r3, r3, #4
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d153      	bne.n	800ce04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <tcp_timewait_input+0x28>
 800cd62:	4b2c      	ldr	r3, [pc, #176]	; (800ce14 <tcp_timewait_input+0xcc>)
 800cd64:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cd68:	492b      	ldr	r1, [pc, #172]	; (800ce18 <tcp_timewait_input+0xd0>)
 800cd6a:	482c      	ldr	r0, [pc, #176]	; (800ce1c <tcp_timewait_input+0xd4>)
 800cd6c:	f008 f9cc 	bl	8015108 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cd70:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <tcp_timewait_input+0xc8>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 0302 	and.w	r3, r3, #2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d02a      	beq.n	800cdd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cd7c:	4b28      	ldr	r3, [pc, #160]	; (800ce20 <tcp_timewait_input+0xd8>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	db2d      	blt.n	800cde6 <tcp_timewait_input+0x9e>
 800cd8a:	4b25      	ldr	r3, [pc, #148]	; (800ce20 <tcp_timewait_input+0xd8>)
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd96:	440b      	add	r3, r1
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	dc23      	bgt.n	800cde6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd9e:	4b21      	ldr	r3, [pc, #132]	; (800ce24 <tcp_timewait_input+0xdc>)
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	4b21      	ldr	r3, [pc, #132]	; (800ce28 <tcp_timewait_input+0xe0>)
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	4b1d      	ldr	r3, [pc, #116]	; (800ce20 <tcp_timewait_input+0xd8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdae:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <tcp_timewait_input+0xe4>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdb2:	885b      	ldrh	r3, [r3, #2]
 800cdb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdb6:	4a1d      	ldr	r2, [pc, #116]	; (800ce2c <tcp_timewait_input+0xe4>)
 800cdb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdba:	8812      	ldrh	r2, [r2, #0]
 800cdbc:	b292      	uxth	r2, r2
 800cdbe:	9202      	str	r2, [sp, #8]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	4b1b      	ldr	r3, [pc, #108]	; (800ce30 <tcp_timewait_input+0xe8>)
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	4b1b      	ldr	r3, [pc, #108]	; (800ce34 <tcp_timewait_input+0xec>)
 800cdc8:	4602      	mov	r2, r0
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f002 fe72 	bl	800fab4 <tcp_rst>
      return;
 800cdd0:	e01b      	b.n	800ce0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <tcp_timewait_input+0xc8>)
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cdde:	4b16      	ldr	r3, [pc, #88]	; (800ce38 <tcp_timewait_input+0xf0>)
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cde6:	4b10      	ldr	r3, [pc, #64]	; (800ce28 <tcp_timewait_input+0xe0>)
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00c      	beq.n	800ce08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	8b5b      	ldrh	r3, [r3, #26]
 800cdf2:	f043 0302 	orr.w	r3, r3, #2
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f002 f8a5 	bl	800ef4c <tcp_output>
  }
  return;
 800ce02:	e001      	b.n	800ce08 <tcp_timewait_input+0xc0>
    return;
 800ce04:	bf00      	nop
 800ce06:	e000      	b.n	800ce0a <tcp_timewait_input+0xc2>
  return;
 800ce08:	bf00      	nop
}
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	2000d408 	.word	0x2000d408
 800ce14:	08017354 	.word	0x08017354
 800ce18:	0801756c 	.word	0x0801756c
 800ce1c:	080173a0 	.word	0x080173a0
 800ce20:	2000d3fc 	.word	0x2000d3fc
 800ce24:	2000d400 	.word	0x2000d400
 800ce28:	2000d406 	.word	0x2000d406
 800ce2c:	2000d3ec 	.word	0x2000d3ec
 800ce30:	20009c60 	.word	0x20009c60
 800ce34:	20009c64 	.word	0x20009c64
 800ce38:	2000d3c4 	.word	0x2000d3c4

0800ce3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b08d      	sub	sp, #52	; 0x34
 800ce40:	af04      	add	r7, sp, #16
 800ce42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <tcp_process+0x24>
 800ce52:	4b9d      	ldr	r3, [pc, #628]	; (800d0c8 <tcp_process+0x28c>)
 800ce54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ce58:	499c      	ldr	r1, [pc, #624]	; (800d0cc <tcp_process+0x290>)
 800ce5a:	489d      	ldr	r0, [pc, #628]	; (800d0d0 <tcp_process+0x294>)
 800ce5c:	f008 f954 	bl	8015108 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ce60:	4b9c      	ldr	r3, [pc, #624]	; (800d0d4 <tcp_process+0x298>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d04e      	beq.n	800cf0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7d1b      	ldrb	r3, [r3, #20]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d108      	bne.n	800ce86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce78:	4b97      	ldr	r3, [pc, #604]	; (800d0d8 <tcp_process+0x29c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d123      	bne.n	800cec8 <tcp_process+0x8c>
        acceptable = 1;
 800ce80:	2301      	movs	r3, #1
 800ce82:	76fb      	strb	r3, [r7, #27]
 800ce84:	e020      	b.n	800cec8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce8a:	4b94      	ldr	r3, [pc, #592]	; (800d0dc <tcp_process+0x2a0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d102      	bne.n	800ce98 <tcp_process+0x5c>
        acceptable = 1;
 800ce92:	2301      	movs	r3, #1
 800ce94:	76fb      	strb	r3, [r7, #27]
 800ce96:	e017      	b.n	800cec8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce98:	4b90      	ldr	r3, [pc, #576]	; (800d0dc <tcp_process+0x2a0>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	db10      	blt.n	800cec8 <tcp_process+0x8c>
 800cea6:	4b8d      	ldr	r3, [pc, #564]	; (800d0dc <tcp_process+0x2a0>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	6879      	ldr	r1, [r7, #4]
 800ceb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ceb2:	440b      	add	r3, r1
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dc06      	bgt.n	800cec8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	8b5b      	ldrh	r3, [r3, #26]
 800cebe:	f043 0302 	orr.w	r3, r3, #2
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cec8:	7efb      	ldrb	r3, [r7, #27]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d01b      	beq.n	800cf06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7d1b      	ldrb	r3, [r3, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_process+0xa8>
 800ced6:	4b7c      	ldr	r3, [pc, #496]	; (800d0c8 <tcp_process+0x28c>)
 800ced8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cedc:	4980      	ldr	r1, [pc, #512]	; (800d0e0 <tcp_process+0x2a4>)
 800cede:	487c      	ldr	r0, [pc, #496]	; (800d0d0 <tcp_process+0x294>)
 800cee0:	f008 f912 	bl	8015108 <iprintf>
      recv_flags |= TF_RESET;
 800cee4:	4b7f      	ldr	r3, [pc, #508]	; (800d0e4 <tcp_process+0x2a8>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	f043 0308 	orr.w	r3, r3, #8
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	4b7d      	ldr	r3, [pc, #500]	; (800d0e4 <tcp_process+0x2a8>)
 800cef0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	8b5b      	ldrh	r3, [r3, #26]
 800cef6:	f023 0301 	bic.w	r3, r3, #1
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cf00:	f06f 030d 	mvn.w	r3, #13
 800cf04:	e37a      	b.n	800d5fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	e378      	b.n	800d5fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cf0a:	4b72      	ldr	r3, [pc, #456]	; (800d0d4 <tcp_process+0x298>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d010      	beq.n	800cf38 <tcp_process+0xfc>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7d1b      	ldrb	r3, [r3, #20]
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d00c      	beq.n	800cf38 <tcp_process+0xfc>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7d1b      	ldrb	r3, [r3, #20]
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d008      	beq.n	800cf38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	8b5b      	ldrh	r3, [r3, #26]
 800cf2a:	f043 0302 	orr.w	r3, r3, #2
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	e361      	b.n	800d5fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	8b5b      	ldrh	r3, [r3, #26]
 800cf3c:	f003 0310 	and.w	r3, r3, #16
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d103      	bne.n	800cf4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cf44:	4b68      	ldr	r3, [pc, #416]	; (800d0e8 <tcp_process+0x2ac>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f001 fc2f 	bl	800e7c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	7d1b      	ldrb	r3, [r3, #20]
 800cf66:	3b02      	subs	r3, #2
 800cf68:	2b07      	cmp	r3, #7
 800cf6a:	f200 8337 	bhi.w	800d5dc <tcp_process+0x7a0>
 800cf6e:	a201      	add	r2, pc, #4	; (adr r2, 800cf74 <tcp_process+0x138>)
 800cf70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800d1c5 	.word	0x0800d1c5
 800cf7c:	0800d33d 	.word	0x0800d33d
 800cf80:	0800d367 	.word	0x0800d367
 800cf84:	0800d48b 	.word	0x0800d48b
 800cf88:	0800d33d 	.word	0x0800d33d
 800cf8c:	0800d517 	.word	0x0800d517
 800cf90:	0800d5a7 	.word	0x0800d5a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cf94:	4b4f      	ldr	r3, [pc, #316]	; (800d0d4 <tcp_process+0x298>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	f003 0310 	and.w	r3, r3, #16
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80e4 	beq.w	800d16a <tcp_process+0x32e>
 800cfa2:	4b4c      	ldr	r3, [pc, #304]	; (800d0d4 <tcp_process+0x298>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f003 0302 	and.w	r3, r3, #2
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 80dd 	beq.w	800d16a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb4:	1c5a      	adds	r2, r3, #1
 800cfb6:	4b48      	ldr	r3, [pc, #288]	; (800d0d8 <tcp_process+0x29c>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	f040 80d5 	bne.w	800d16a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cfc0:	4b46      	ldr	r3, [pc, #280]	; (800d0dc <tcp_process+0x2a0>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cfd2:	4b41      	ldr	r3, [pc, #260]	; (800d0d8 <tcp_process+0x29c>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cfda:	4b44      	ldr	r3, [pc, #272]	; (800d0ec <tcp_process+0x2b0>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	89db      	ldrh	r3, [r3, #14]
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cff4:	4b39      	ldr	r3, [pc, #228]	; (800d0dc <tcp_process+0x2a0>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	1e5a      	subs	r2, r3, #1
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2204      	movs	r2, #4
 800d002:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3304      	adds	r3, #4
 800d00c:	4618      	mov	r0, r3
 800d00e:	f006 fc7f 	bl	8013910 <ip4_route>
 800d012:	4601      	mov	r1, r0
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3304      	adds	r3, #4
 800d018:	461a      	mov	r2, r3
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7ff f88c 	bl	800c138 <tcp_eff_send_mss_netif>
 800d020:	4603      	mov	r3, r0
 800d022:	461a      	mov	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d02c:	009a      	lsls	r2, r3, #2
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	f241 111c 	movw	r1, #4380	; 0x111c
 800d038:	428b      	cmp	r3, r1
 800d03a:	bf38      	it	cc
 800d03c:	460b      	movcc	r3, r1
 800d03e:	429a      	cmp	r2, r3
 800d040:	d204      	bcs.n	800d04c <tcp_process+0x210>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	b29b      	uxth	r3, r3
 800d04a:	e00d      	b.n	800d068 <tcp_process+0x22c>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	f241 121c 	movw	r2, #4380	; 0x111c
 800d056:	4293      	cmp	r3, r2
 800d058:	d904      	bls.n	800d064 <tcp_process+0x228>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	b29b      	uxth	r3, r3
 800d062:	e001      	b.n	800d068 <tcp_process+0x22c>
 800d064:	f241 131c 	movw	r3, #4380	; 0x111c
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <tcp_process+0x24a>
 800d078:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <tcp_process+0x28c>)
 800d07a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d07e:	491c      	ldr	r1, [pc, #112]	; (800d0f0 <tcp_process+0x2b4>)
 800d080:	4813      	ldr	r0, [pc, #76]	; (800d0d0 <tcp_process+0x294>)
 800d082:	f008 f841 	bl	8015108 <iprintf>
        --pcb->snd_queuelen;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d08c:	3b01      	subs	r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d12a      	bne.n	800d0f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <tcp_process+0x280>
 800d0ae:	4b06      	ldr	r3, [pc, #24]	; (800d0c8 <tcp_process+0x28c>)
 800d0b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d0b4:	490f      	ldr	r1, [pc, #60]	; (800d0f4 <tcp_process+0x2b8>)
 800d0b6:	4806      	ldr	r0, [pc, #24]	; (800d0d0 <tcp_process+0x294>)
 800d0b8:	f008 f826 	bl	8015108 <iprintf>
          pcb->unsent = rseg->next;
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800d0c4:	e01c      	b.n	800d100 <tcp_process+0x2c4>
 800d0c6:	bf00      	nop
 800d0c8:	08017354 	.word	0x08017354
 800d0cc:	0801758c 	.word	0x0801758c
 800d0d0:	080173a0 	.word	0x080173a0
 800d0d4:	2000d408 	.word	0x2000d408
 800d0d8:	2000d400 	.word	0x2000d400
 800d0dc:	2000d3fc 	.word	0x2000d3fc
 800d0e0:	080175a8 	.word	0x080175a8
 800d0e4:	2000d409 	.word	0x2000d409
 800d0e8:	2000d3c4 	.word	0x2000d3c4
 800d0ec:	2000d3ec 	.word	0x2000d3ec
 800d0f0:	080175c8 	.word	0x080175c8
 800d0f4:	080175e0 	.word	0x080175e0
        } else {
          pcb->unacked = rseg->next;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d100:	69f8      	ldr	r0, [r7, #28]
 800d102:	f7fe fd22 	bl	800bb4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d104      	bne.n	800d118 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d114:	861a      	strh	r2, [r3, #48]	; 0x30
 800d116:	e006      	b.n	800d126 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00a      	beq.n	800d146 <tcp_process+0x30a>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	6910      	ldr	r0, [r2, #16]
 800d13a:	2200      	movs	r2, #0
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	4798      	blx	r3
 800d140:	4603      	mov	r3, r0
 800d142:	76bb      	strb	r3, [r7, #26]
 800d144:	e001      	b.n	800d14a <tcp_process+0x30e>
 800d146:	2300      	movs	r3, #0
 800d148:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d14a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d14e:	f113 0f0d 	cmn.w	r3, #13
 800d152:	d102      	bne.n	800d15a <tcp_process+0x31e>
          return ERR_ABRT;
 800d154:	f06f 030c 	mvn.w	r3, #12
 800d158:	e250      	b.n	800d5fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8b5b      	ldrh	r3, [r3, #26]
 800d15e:	f043 0302 	orr.w	r3, r3, #2
 800d162:	b29a      	uxth	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d168:	e23a      	b.n	800d5e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d16a:	4b98      	ldr	r3, [pc, #608]	; (800d3cc <tcp_process+0x590>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f003 0310 	and.w	r3, r3, #16
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 8234 	beq.w	800d5e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d178:	4b95      	ldr	r3, [pc, #596]	; (800d3d0 <tcp_process+0x594>)
 800d17a:	6819      	ldr	r1, [r3, #0]
 800d17c:	4b95      	ldr	r3, [pc, #596]	; (800d3d4 <tcp_process+0x598>)
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	461a      	mov	r2, r3
 800d182:	4b95      	ldr	r3, [pc, #596]	; (800d3d8 <tcp_process+0x59c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d188:	4b94      	ldr	r3, [pc, #592]	; (800d3dc <tcp_process+0x5a0>)
 800d18a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d18c:	885b      	ldrh	r3, [r3, #2]
 800d18e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d190:	4a92      	ldr	r2, [pc, #584]	; (800d3dc <tcp_process+0x5a0>)
 800d192:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d194:	8812      	ldrh	r2, [r2, #0]
 800d196:	b292      	uxth	r2, r2
 800d198:	9202      	str	r2, [sp, #8]
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	4b90      	ldr	r3, [pc, #576]	; (800d3e0 <tcp_process+0x5a4>)
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	4b90      	ldr	r3, [pc, #576]	; (800d3e4 <tcp_process+0x5a8>)
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f002 fc85 	bl	800fab4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1b0:	2b05      	cmp	r3, #5
 800d1b2:	f200 8215 	bhi.w	800d5e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f002 fa51 	bl	800f664 <tcp_rexmit_rto>
      break;
 800d1c2:	e20d      	b.n	800d5e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d1c4:	4b81      	ldr	r3, [pc, #516]	; (800d3cc <tcp_process+0x590>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 0310 	and.w	r3, r3, #16
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80a1 	beq.w	800d314 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1d2:	4b7f      	ldr	r3, [pc, #508]	; (800d3d0 <tcp_process+0x594>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	db7e      	blt.n	800d2e0 <tcp_process+0x4a4>
 800d1e2:	4b7b      	ldr	r3, [pc, #492]	; (800d3d0 <tcp_process+0x594>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dc77      	bgt.n	800d2e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2204      	movs	r2, #4
 800d1f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d102      	bne.n	800d204 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d1fe:	23fa      	movs	r3, #250	; 0xfa
 800d200:	76bb      	strb	r3, [r7, #26]
 800d202:	e01d      	b.n	800d240 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <tcp_process+0x3e0>
 800d20e:	4b76      	ldr	r3, [pc, #472]	; (800d3e8 <tcp_process+0x5ac>)
 800d210:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d214:	4975      	ldr	r1, [pc, #468]	; (800d3ec <tcp_process+0x5b0>)
 800d216:	4876      	ldr	r0, [pc, #472]	; (800d3f0 <tcp_process+0x5b4>)
 800d218:	f007 ff76 	bl	8015108 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <tcp_process+0x400>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	6910      	ldr	r0, [r2, #16]
 800d230:	2200      	movs	r2, #0
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	4798      	blx	r3
 800d236:	4603      	mov	r3, r0
 800d238:	76bb      	strb	r3, [r7, #26]
 800d23a:	e001      	b.n	800d240 <tcp_process+0x404>
 800d23c:	23f0      	movs	r3, #240	; 0xf0
 800d23e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d240:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00a      	beq.n	800d25e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d248:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d24c:	f113 0f0d 	cmn.w	r3, #13
 800d250:	d002      	beq.n	800d258 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7fd ff8e 	bl	800b174 <tcp_abort>
            }
            return ERR_ABRT;
 800d258:	f06f 030c 	mvn.w	r3, #12
 800d25c:	e1ce      	b.n	800d5fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fae0 	bl	800d824 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d264:	4b63      	ldr	r3, [pc, #396]	; (800d3f4 <tcp_process+0x5b8>)
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <tcp_process+0x43c>
            recv_acked--;
 800d26c:	4b61      	ldr	r3, [pc, #388]	; (800d3f4 <tcp_process+0x5b8>)
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	4b5f      	ldr	r3, [pc, #380]	; (800d3f4 <tcp_process+0x5b8>)
 800d276:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d27c:	009a      	lsls	r2, r3, #2
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d282:	005b      	lsls	r3, r3, #1
 800d284:	f241 111c 	movw	r1, #4380	; 0x111c
 800d288:	428b      	cmp	r3, r1
 800d28a:	bf38      	it	cc
 800d28c:	460b      	movcc	r3, r1
 800d28e:	429a      	cmp	r2, r3
 800d290:	d204      	bcs.n	800d29c <tcp_process+0x460>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	b29b      	uxth	r3, r3
 800d29a:	e00d      	b.n	800d2b8 <tcp_process+0x47c>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d904      	bls.n	800d2b4 <tcp_process+0x478>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	e001      	b.n	800d2b8 <tcp_process+0x47c>
 800d2b4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d2be:	4b4e      	ldr	r3, [pc, #312]	; (800d3f8 <tcp_process+0x5bc>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	f003 0320 	and.w	r3, r3, #32
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d037      	beq.n	800d33a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8b5b      	ldrh	r3, [r3, #26]
 800d2ce:	f043 0302 	orr.w	r3, r3, #2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2207      	movs	r2, #7
 800d2dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d2de:	e02c      	b.n	800d33a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2e0:	4b3b      	ldr	r3, [pc, #236]	; (800d3d0 <tcp_process+0x594>)
 800d2e2:	6819      	ldr	r1, [r3, #0]
 800d2e4:	4b3b      	ldr	r3, [pc, #236]	; (800d3d4 <tcp_process+0x598>)
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	4b3b      	ldr	r3, [pc, #236]	; (800d3d8 <tcp_process+0x59c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2f0:	4b3a      	ldr	r3, [pc, #232]	; (800d3dc <tcp_process+0x5a0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2f4:	885b      	ldrh	r3, [r3, #2]
 800d2f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2f8:	4a38      	ldr	r2, [pc, #224]	; (800d3dc <tcp_process+0x5a0>)
 800d2fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2fc:	8812      	ldrh	r2, [r2, #0]
 800d2fe:	b292      	uxth	r2, r2
 800d300:	9202      	str	r2, [sp, #8]
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	4b36      	ldr	r3, [pc, #216]	; (800d3e0 <tcp_process+0x5a4>)
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	4b36      	ldr	r3, [pc, #216]	; (800d3e4 <tcp_process+0x5a8>)
 800d30a:	4602      	mov	r2, r0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 fbd1 	bl	800fab4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d312:	e167      	b.n	800d5e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d314:	4b2d      	ldr	r3, [pc, #180]	; (800d3cc <tcp_process+0x590>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	f003 0302 	and.w	r3, r3, #2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 8161 	beq.w	800d5e4 <tcp_process+0x7a8>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	1e5a      	subs	r2, r3, #1
 800d328:	4b2b      	ldr	r3, [pc, #172]	; (800d3d8 <tcp_process+0x59c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	f040 8159 	bne.w	800d5e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f002 f9b8 	bl	800f6a8 <tcp_rexmit>
      break;
 800d338:	e154      	b.n	800d5e4 <tcp_process+0x7a8>
 800d33a:	e153      	b.n	800d5e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fa71 	bl	800d824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d342:	4b2d      	ldr	r3, [pc, #180]	; (800d3f8 <tcp_process+0x5bc>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 814c 	beq.w	800d5e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	8b5b      	ldrh	r3, [r3, #26]
 800d354:	f043 0302 	orr.w	r3, r3, #2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2207      	movs	r2, #7
 800d362:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d364:	e140      	b.n	800d5e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 fa5c 	bl	800d824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d36c:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <tcp_process+0x5bc>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 0320 	and.w	r3, r3, #32
 800d374:	2b00      	cmp	r3, #0
 800d376:	d071      	beq.n	800d45c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d378:	4b14      	ldr	r3, [pc, #80]	; (800d3cc <tcp_process+0x590>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	f003 0310 	and.w	r3, r3, #16
 800d380:	2b00      	cmp	r3, #0
 800d382:	d060      	beq.n	800d446 <tcp_process+0x60a>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d388:	4b11      	ldr	r3, [pc, #68]	; (800d3d0 <tcp_process+0x594>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d15a      	bne.n	800d446 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d394:	2b00      	cmp	r3, #0
 800d396:	d156      	bne.n	800d446 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8b5b      	ldrh	r3, [r3, #26]
 800d39c:	f043 0302 	orr.w	r3, r3, #2
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f7fe fdbc 	bl	800bf24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d3ac:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <tcp_process+0x5c0>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d105      	bne.n	800d3c2 <tcp_process+0x586>
 800d3b6:	4b11      	ldr	r3, [pc, #68]	; (800d3fc <tcp_process+0x5c0>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	4a0f      	ldr	r2, [pc, #60]	; (800d3fc <tcp_process+0x5c0>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	e02e      	b.n	800d420 <tcp_process+0x5e4>
 800d3c2:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <tcp_process+0x5c0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	617b      	str	r3, [r7, #20]
 800d3c8:	e027      	b.n	800d41a <tcp_process+0x5de>
 800d3ca:	bf00      	nop
 800d3cc:	2000d408 	.word	0x2000d408
 800d3d0:	2000d400 	.word	0x2000d400
 800d3d4:	2000d406 	.word	0x2000d406
 800d3d8:	2000d3fc 	.word	0x2000d3fc
 800d3dc:	2000d3ec 	.word	0x2000d3ec
 800d3e0:	20009c60 	.word	0x20009c60
 800d3e4:	20009c64 	.word	0x20009c64
 800d3e8:	08017354 	.word	0x08017354
 800d3ec:	080175f4 	.word	0x080175f4
 800d3f0:	080173a0 	.word	0x080173a0
 800d3f4:	2000d404 	.word	0x2000d404
 800d3f8:	2000d409 	.word	0x2000d409
 800d3fc:	2000d3d0 	.word	0x2000d3d0
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	429a      	cmp	r2, r3
 800d408:	d104      	bne.n	800d414 <tcp_process+0x5d8>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68da      	ldr	r2, [r3, #12]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	e005      	b.n	800d420 <tcp_process+0x5e4>
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	617b      	str	r3, [r7, #20]
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1ef      	bne.n	800d400 <tcp_process+0x5c4>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	60da      	str	r2, [r3, #12]
 800d426:	4b77      	ldr	r3, [pc, #476]	; (800d604 <tcp_process+0x7c8>)
 800d428:	2201      	movs	r2, #1
 800d42a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	220a      	movs	r2, #10
 800d430:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d432:	4b75      	ldr	r3, [pc, #468]	; (800d608 <tcp_process+0x7cc>)
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	4a73      	ldr	r2, [pc, #460]	; (800d608 <tcp_process+0x7cc>)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	f002 fcfa 	bl	800fe38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d444:	e0d2      	b.n	800d5ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	8b5b      	ldrh	r3, [r3, #26]
 800d44a:	f043 0302 	orr.w	r3, r3, #2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2208      	movs	r2, #8
 800d458:	751a      	strb	r2, [r3, #20]
      break;
 800d45a:	e0c7      	b.n	800d5ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d45c:	4b6b      	ldr	r3, [pc, #428]	; (800d60c <tcp_process+0x7d0>)
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	f003 0310 	and.w	r3, r3, #16
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 80c1 	beq.w	800d5ec <tcp_process+0x7b0>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d46e:	4b68      	ldr	r3, [pc, #416]	; (800d610 <tcp_process+0x7d4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	f040 80ba 	bne.w	800d5ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f040 80b5 	bne.w	800d5ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2206      	movs	r2, #6
 800d486:	751a      	strb	r2, [r3, #20]
      break;
 800d488:	e0b0      	b.n	800d5ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f9ca 	bl	800d824 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d490:	4b60      	ldr	r3, [pc, #384]	; (800d614 <tcp_process+0x7d8>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 80a9 	beq.w	800d5f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	8b5b      	ldrh	r3, [r3, #26]
 800d4a2:	f043 0302 	orr.w	r3, r3, #2
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7fe fd39 	bl	800bf24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d4b2:	4b59      	ldr	r3, [pc, #356]	; (800d618 <tcp_process+0x7dc>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d105      	bne.n	800d4c8 <tcp_process+0x68c>
 800d4bc:	4b56      	ldr	r3, [pc, #344]	; (800d618 <tcp_process+0x7dc>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	4a55      	ldr	r2, [pc, #340]	; (800d618 <tcp_process+0x7dc>)
 800d4c4:	6013      	str	r3, [r2, #0]
 800d4c6:	e013      	b.n	800d4f0 <tcp_process+0x6b4>
 800d4c8:	4b53      	ldr	r3, [pc, #332]	; (800d618 <tcp_process+0x7dc>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	e00c      	b.n	800d4ea <tcp_process+0x6ae>
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d104      	bne.n	800d4e4 <tcp_process+0x6a8>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68da      	ldr	r2, [r3, #12]
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	60da      	str	r2, [r3, #12]
 800d4e2:	e005      	b.n	800d4f0 <tcp_process+0x6b4>
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	613b      	str	r3, [r7, #16]
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1ef      	bne.n	800d4d0 <tcp_process+0x694>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	60da      	str	r2, [r3, #12]
 800d4f6:	4b43      	ldr	r3, [pc, #268]	; (800d604 <tcp_process+0x7c8>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	220a      	movs	r2, #10
 800d500:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d502:	4b41      	ldr	r3, [pc, #260]	; (800d608 <tcp_process+0x7cc>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	60da      	str	r2, [r3, #12]
 800d50a:	4a3f      	ldr	r2, [pc, #252]	; (800d608 <tcp_process+0x7cc>)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	f002 fc92 	bl	800fe38 <tcp_timer_needed>
      }
      break;
 800d514:	e06c      	b.n	800d5f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f984 	bl	800d824 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d51c:	4b3b      	ldr	r3, [pc, #236]	; (800d60c <tcp_process+0x7d0>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	f003 0310 	and.w	r3, r3, #16
 800d524:	2b00      	cmp	r3, #0
 800d526:	d065      	beq.n	800d5f4 <tcp_process+0x7b8>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d52c:	4b38      	ldr	r3, [pc, #224]	; (800d610 <tcp_process+0x7d4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d15f      	bne.n	800d5f4 <tcp_process+0x7b8>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d15b      	bne.n	800d5f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7fe fcf1 	bl	800bf24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d542:	4b35      	ldr	r3, [pc, #212]	; (800d618 <tcp_process+0x7dc>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d105      	bne.n	800d558 <tcp_process+0x71c>
 800d54c:	4b32      	ldr	r3, [pc, #200]	; (800d618 <tcp_process+0x7dc>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	4a31      	ldr	r2, [pc, #196]	; (800d618 <tcp_process+0x7dc>)
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	e013      	b.n	800d580 <tcp_process+0x744>
 800d558:	4b2f      	ldr	r3, [pc, #188]	; (800d618 <tcp_process+0x7dc>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	60fb      	str	r3, [r7, #12]
 800d55e:	e00c      	b.n	800d57a <tcp_process+0x73e>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d104      	bne.n	800d574 <tcp_process+0x738>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68da      	ldr	r2, [r3, #12]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	60da      	str	r2, [r3, #12]
 800d572:	e005      	b.n	800d580 <tcp_process+0x744>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1ef      	bne.n	800d560 <tcp_process+0x724>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	60da      	str	r2, [r3, #12]
 800d586:	4b1f      	ldr	r3, [pc, #124]	; (800d604 <tcp_process+0x7c8>)
 800d588:	2201      	movs	r2, #1
 800d58a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	220a      	movs	r2, #10
 800d590:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d592:	4b1d      	ldr	r3, [pc, #116]	; (800d608 <tcp_process+0x7cc>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60da      	str	r2, [r3, #12]
 800d59a:	4a1b      	ldr	r2, [pc, #108]	; (800d608 <tcp_process+0x7cc>)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	f002 fc4a 	bl	800fe38 <tcp_timer_needed>
      }
      break;
 800d5a4:	e026      	b.n	800d5f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f93c 	bl	800d824 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d5ac:	4b17      	ldr	r3, [pc, #92]	; (800d60c <tcp_process+0x7d0>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01f      	beq.n	800d5f8 <tcp_process+0x7bc>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5bc:	4b14      	ldr	r3, [pc, #80]	; (800d610 <tcp_process+0x7d4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d119      	bne.n	800d5f8 <tcp_process+0x7bc>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d115      	bne.n	800d5f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d5cc:	4b11      	ldr	r3, [pc, #68]	; (800d614 <tcp_process+0x7d8>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f043 0310 	orr.w	r3, r3, #16
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <tcp_process+0x7d8>)
 800d5d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d5da:	e00d      	b.n	800d5f8 <tcp_process+0x7bc>
    default:
      break;
 800d5dc:	bf00      	nop
 800d5de:	e00c      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5e0:	bf00      	nop
 800d5e2:	e00a      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5e4:	bf00      	nop
 800d5e6:	e008      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5e8:	bf00      	nop
 800d5ea:	e006      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5ec:	bf00      	nop
 800d5ee:	e004      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5f0:	bf00      	nop
 800d5f2:	e002      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <tcp_process+0x7be>
      break;
 800d5f8:	bf00      	nop
  }
  return ERR_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3724      	adds	r7, #36	; 0x24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd90      	pop	{r4, r7, pc}
 800d604:	2000d3d8 	.word	0x2000d3d8
 800d608:	2000d3d4 	.word	0x2000d3d4
 800d60c:	2000d408 	.word	0x2000d408
 800d610:	2000d400 	.word	0x2000d400
 800d614:	2000d409 	.word	0x2000d409
 800d618:	2000d3d0 	.word	0x2000d3d0

0800d61c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d61c:	b590      	push	{r4, r7, lr}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <tcp_oos_insert_segment+0x1e>
 800d62c:	4b3b      	ldr	r3, [pc, #236]	; (800d71c <tcp_oos_insert_segment+0x100>)
 800d62e:	f240 421f 	movw	r2, #1055	; 0x41f
 800d632:	493b      	ldr	r1, [pc, #236]	; (800d720 <tcp_oos_insert_segment+0x104>)
 800d634:	483b      	ldr	r0, [pc, #236]	; (800d724 <tcp_oos_insert_segment+0x108>)
 800d636:	f007 fd67 	bl	8015108 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	899b      	ldrh	r3, [r3, #12]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4618      	mov	r0, r3
 800d644:	f7fb fc5c 	bl	8008f00 <lwip_htons>
 800d648:	4603      	mov	r3, r0
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0301 	and.w	r3, r3, #1
 800d650:	2b00      	cmp	r3, #0
 800d652:	d028      	beq.n	800d6a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d654:	6838      	ldr	r0, [r7, #0]
 800d656:	f7fe fa63 	bl	800bb20 <tcp_segs_free>
    next = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	e056      	b.n	800d70e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	899b      	ldrh	r3, [r3, #12]
 800d666:	b29b      	uxth	r3, r3
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fb fc49 	bl	8008f00 <lwip_htons>
 800d66e:	4603      	mov	r3, r0
 800d670:	b2db      	uxtb	r3, r3
 800d672:	f003 0301 	and.w	r3, r3, #1
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00d      	beq.n	800d696 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	899b      	ldrh	r3, [r3, #12]
 800d680:	b29c      	uxth	r4, r3
 800d682:	2001      	movs	r0, #1
 800d684:	f7fb fc3c 	bl	8008f00 <lwip_htons>
 800d688:	4603      	mov	r3, r0
 800d68a:	461a      	mov	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	4322      	orrs	r2, r4
 800d692:	b292      	uxth	r2, r2
 800d694:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f7fe fa52 	bl	800bb4a <tcp_seg_free>
    while (next &&
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00e      	beq.n	800d6ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	891b      	ldrh	r3, [r3, #8]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <tcp_oos_insert_segment+0x10c>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	441a      	add	r2, r3
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	8909      	ldrh	r1, [r1, #8]
 800d6c2:	440b      	add	r3, r1
 800d6c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	daca      	bge.n	800d660 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d01e      	beq.n	800d70e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	891b      	ldrh	r3, [r3, #8]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	4b14      	ldr	r3, [pc, #80]	; (800d728 <tcp_oos_insert_segment+0x10c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	441a      	add	r2, r3
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	dd12      	ble.n	800d70e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <tcp_oos_insert_segment+0x10c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	891b      	ldrh	r3, [r3, #8]
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fc fe09 	bl	800a320 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	601a      	str	r2, [r3, #0]
}
 800d714:	bf00      	nop
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd90      	pop	{r4, r7, pc}
 800d71c:	08017354 	.word	0x08017354
 800d720:	08017614 	.word	0x08017614
 800d724:	080173a0 	.word	0x080173a0
 800d728:	2000d3fc 	.word	0x2000d3fc

0800d72c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d72c:	b5b0      	push	{r4, r5, r7, lr}
 800d72e:	b086      	sub	sp, #24
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d73a:	e03e      	b.n	800d7ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fc fffc 	bl	800a748 <pbuf_clen>
 800d750:	4603      	mov	r3, r0
 800d752:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d75a:	8a7a      	ldrh	r2, [r7, #18]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d906      	bls.n	800d76e <tcp_free_acked_segments+0x42>
 800d760:	4b2a      	ldr	r3, [pc, #168]	; (800d80c <tcp_free_acked_segments+0xe0>)
 800d762:	f240 4257 	movw	r2, #1111	; 0x457
 800d766:	492a      	ldr	r1, [pc, #168]	; (800d810 <tcp_free_acked_segments+0xe4>)
 800d768:	482a      	ldr	r0, [pc, #168]	; (800d814 <tcp_free_acked_segments+0xe8>)
 800d76a:	f007 fccd 	bl	8015108 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d774:	8a7b      	ldrh	r3, [r7, #18]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	b29a      	uxth	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	891a      	ldrh	r2, [r3, #8]
 800d784:	4b24      	ldr	r3, [pc, #144]	; (800d818 <tcp_free_acked_segments+0xec>)
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	4413      	add	r3, r2
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	4b22      	ldr	r3, [pc, #136]	; (800d818 <tcp_free_acked_segments+0xec>)
 800d78e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d790:	6978      	ldr	r0, [r7, #20]
 800d792:	f7fe f9da 	bl	800bb4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00c      	beq.n	800d7ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <tcp_free_acked_segments+0x8e>
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <tcp_free_acked_segments+0x8e>
 800d7ac:	4b17      	ldr	r3, [pc, #92]	; (800d80c <tcp_free_acked_segments+0xe0>)
 800d7ae:	f240 4261 	movw	r2, #1121	; 0x461
 800d7b2:	491a      	ldr	r1, [pc, #104]	; (800d81c <tcp_free_acked_segments+0xf0>)
 800d7b4:	4817      	ldr	r0, [pc, #92]	; (800d814 <tcp_free_acked_segments+0xe8>)
 800d7b6:	f007 fca7 	bl	8015108 <iprintf>
  while (seg_list != NULL &&
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d020      	beq.n	800d802 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fb fbaf 	bl	8008f2a <lwip_htonl>
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	891b      	ldrh	r3, [r3, #8]
 800d7d2:	461d      	mov	r5, r3
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	899b      	ldrh	r3, [r3, #12]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fb fb8f 	bl	8008f00 <lwip_htons>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f003 0303 	and.w	r3, r3, #3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <tcp_free_acked_segments+0xc6>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <tcp_free_acked_segments+0xc8>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	442b      	add	r3, r5
 800d7f6:	18e2      	adds	r2, r4, r3
 800d7f8:	4b09      	ldr	r3, [pc, #36]	; (800d820 <tcp_free_acked_segments+0xf4>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	dd9c      	ble.n	800d73c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d802:	68bb      	ldr	r3, [r7, #8]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3718      	adds	r7, #24
 800d808:	46bd      	mov	sp, r7
 800d80a:	bdb0      	pop	{r4, r5, r7, pc}
 800d80c:	08017354 	.word	0x08017354
 800d810:	0801763c 	.word	0x0801763c
 800d814:	080173a0 	.word	0x080173a0
 800d818:	2000d404 	.word	0x2000d404
 800d81c:	08017664 	.word	0x08017664
 800d820:	2000d400 	.word	0x2000d400

0800d824 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d824:	b5b0      	push	{r4, r5, r7, lr}
 800d826:	b094      	sub	sp, #80	; 0x50
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d106      	bne.n	800d844 <tcp_receive+0x20>
 800d836:	4b91      	ldr	r3, [pc, #580]	; (800da7c <tcp_receive+0x258>)
 800d838:	f240 427b 	movw	r2, #1147	; 0x47b
 800d83c:	4990      	ldr	r1, [pc, #576]	; (800da80 <tcp_receive+0x25c>)
 800d83e:	4891      	ldr	r0, [pc, #580]	; (800da84 <tcp_receive+0x260>)
 800d840:	f007 fc62 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	7d1b      	ldrb	r3, [r3, #20]
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d806      	bhi.n	800d85a <tcp_receive+0x36>
 800d84c:	4b8b      	ldr	r3, [pc, #556]	; (800da7c <tcp_receive+0x258>)
 800d84e:	f240 427c 	movw	r2, #1148	; 0x47c
 800d852:	498d      	ldr	r1, [pc, #564]	; (800da88 <tcp_receive+0x264>)
 800d854:	488b      	ldr	r0, [pc, #556]	; (800da84 <tcp_receive+0x260>)
 800d856:	f007 fc57 	bl	8015108 <iprintf>

  if (flags & TCP_ACK) {
 800d85a:	4b8c      	ldr	r3, [pc, #560]	; (800da8c <tcp_receive+0x268>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 0310 	and.w	r3, r3, #16
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 8264 	beq.w	800dd30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d86e:	461a      	mov	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d874:	4413      	add	r3, r2
 800d876:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d87c:	4b84      	ldr	r3, [pc, #528]	; (800da90 <tcp_receive+0x26c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	db1b      	blt.n	800d8be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d88a:	4b81      	ldr	r3, [pc, #516]	; (800da90 <tcp_receive+0x26c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d88e:	429a      	cmp	r2, r3
 800d890:	d106      	bne.n	800d8a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d896:	4b7f      	ldr	r3, [pc, #508]	; (800da94 <tcp_receive+0x270>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	db0e      	blt.n	800d8be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8a4:	4b7b      	ldr	r3, [pc, #492]	; (800da94 <tcp_receive+0x270>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d125      	bne.n	800d8f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d8ac:	4b7a      	ldr	r3, [pc, #488]	; (800da98 <tcp_receive+0x274>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	89db      	ldrh	r3, [r3, #14]
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d91c      	bls.n	800d8f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d8be:	4b76      	ldr	r3, [pc, #472]	; (800da98 <tcp_receive+0x274>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	89db      	ldrh	r3, [r3, #14]
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d205      	bcs.n	800d8e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d8e8:	4b69      	ldr	r3, [pc, #420]	; (800da90 <tcp_receive+0x26c>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d8f0:	4b68      	ldr	r3, [pc, #416]	; (800da94 <tcp_receive+0x270>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d8f8:	4b66      	ldr	r3, [pc, #408]	; (800da94 <tcp_receive+0x270>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	dc58      	bgt.n	800d9b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d906:	4b65      	ldr	r3, [pc, #404]	; (800da9c <tcp_receive+0x278>)
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d14b      	bne.n	800d9a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d918:	4413      	add	r3, r2
 800d91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d142      	bne.n	800d9a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	db3d      	blt.n	800d9a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d92e:	4b59      	ldr	r3, [pc, #356]	; (800da94 <tcp_receive+0x270>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	429a      	cmp	r2, r3
 800d934:	d137      	bne.n	800d9a6 <tcp_receive+0x182>
              found_dupack = 1;
 800d936:	2301      	movs	r3, #1
 800d938:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d940:	2bff      	cmp	r3, #255	; 0xff
 800d942:	d007      	beq.n	800d954 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d94a:	3301      	adds	r3, #1
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	d91b      	bls.n	800d996 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d968:	4413      	add	r3, r2
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d972:	429a      	cmp	r2, r3
 800d974:	d30a      	bcc.n	800d98c <tcp_receive+0x168>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d980:	4413      	add	r3, r2
 800d982:	b29a      	uxth	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d98a:	e004      	b.n	800d996 <tcp_receive+0x172>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d992:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d902      	bls.n	800d9a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f001 feed 	bl	800f780 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f040 8161 	bne.w	800dc70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9b6:	e15b      	b.n	800dc70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9b8:	4b36      	ldr	r3, [pc, #216]	; (800da94 <tcp_receive+0x270>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f2c0 814e 	blt.w	800dc66 <tcp_receive+0x442>
 800d9ca:	4b32      	ldr	r3, [pc, #200]	; (800da94 <tcp_receive+0x270>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f300 8146 	bgt.w	800dc66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	8b5b      	ldrh	r3, [r3, #26]
 800d9de:	f003 0304 	and.w	r3, r3, #4
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d010      	beq.n	800da08 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	8b5b      	ldrh	r3, [r3, #26]
 800d9ea:	f023 0304 	bic.w	r3, r3, #4
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da16:	10db      	asrs	r3, r3, #3
 800da18:	b21b      	sxth	r3, r3
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da22:	b29b      	uxth	r3, r3
 800da24:	4413      	add	r3, r2
 800da26:	b29b      	uxth	r3, r3
 800da28:	b21a      	sxth	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800da30:	4b18      	ldr	r3, [pc, #96]	; (800da94 <tcp_receive+0x270>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800da48:	4b12      	ldr	r3, [pc, #72]	; (800da94 <tcp_receive+0x270>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7d1b      	ldrb	r3, [r3, #20]
 800da54:	2b03      	cmp	r3, #3
 800da56:	f240 8097 	bls.w	800db88 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da66:	429a      	cmp	r2, r3
 800da68:	d245      	bcs.n	800daf6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8b5b      	ldrh	r3, [r3, #26]
 800da6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da72:	2b00      	cmp	r3, #0
 800da74:	d014      	beq.n	800daa0 <tcp_receive+0x27c>
 800da76:	2301      	movs	r3, #1
 800da78:	e013      	b.n	800daa2 <tcp_receive+0x27e>
 800da7a:	bf00      	nop
 800da7c:	08017354 	.word	0x08017354
 800da80:	08017684 	.word	0x08017684
 800da84:	080173a0 	.word	0x080173a0
 800da88:	080176a0 	.word	0x080176a0
 800da8c:	2000d408 	.word	0x2000d408
 800da90:	2000d3fc 	.word	0x2000d3fc
 800da94:	2000d400 	.word	0x2000d400
 800da98:	2000d3ec 	.word	0x2000d3ec
 800da9c:	2000d406 	.word	0x2000d406
 800daa0:	2302      	movs	r3, #2
 800daa2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800daa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dab0:	fb12 f303 	smulbb	r3, r2, r3
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dab8:	4293      	cmp	r3, r2
 800daba:	bf28      	it	cs
 800dabc:	4613      	movcs	r3, r2
 800dabe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dac8:	4413      	add	r3, r2
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d309      	bcc.n	800daea <tcp_receive+0x2c6>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dadc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dade:	4413      	add	r3, r2
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dae8:	e04e      	b.n	800db88 <tcp_receive+0x364>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800daf4:	e048      	b.n	800db88 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dafc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dafe:	4413      	add	r3, r2
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db08:	429a      	cmp	r2, r3
 800db0a:	d309      	bcc.n	800db20 <tcp_receive+0x2fc>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800db12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db14:	4413      	add	r3, r2
 800db16:	b29a      	uxth	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db1e:	e004      	b.n	800db2a <tcp_receive+0x306>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db36:	429a      	cmp	r2, r3
 800db38:	d326      	bcc.n	800db88 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db5a:	4413      	add	r3, r2
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db64:	429a      	cmp	r2, r3
 800db66:	d30a      	bcc.n	800db7e <tcp_receive+0x35a>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db72:	4413      	add	r3, r2
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db7c:	e004      	b.n	800db88 <tcp_receive+0x364>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db90:	4a98      	ldr	r2, [pc, #608]	; (800ddf4 <tcp_receive+0x5d0>)
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fdca 	bl	800d72c <tcp_free_acked_segments>
 800db98:	4602      	mov	r2, r0
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba6:	4a94      	ldr	r2, [pc, #592]	; (800ddf8 <tcp_receive+0x5d4>)
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fdbf 	bl	800d72c <tcp_free_acked_segments>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbc2:	861a      	strh	r2, [r3, #48]	; 0x30
 800dbc4:	e002      	b.n	800dbcc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d103      	bne.n	800dbe2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dbe8:	4b84      	ldr	r3, [pc, #528]	; (800ddfc <tcp_receive+0x5d8>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	4413      	add	r3, r2
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8b5b      	ldrh	r3, [r3, #26]
 800dbfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d035      	beq.n	800dc6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d118      	bne.n	800dc3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00c      	beq.n	800dc2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fb f983 	bl	8008f2a <lwip_htonl>
 800dc24:	4603      	mov	r3, r0
 800dc26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dc20      	bgt.n	800dc6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	8b5b      	ldrh	r3, [r3, #26]
 800dc30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc3a:	e018      	b.n	800dc6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fb f96e 	bl	8008f2a <lwip_htonl>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	1ae3      	subs	r3, r4, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	dc0b      	bgt.n	800dc6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	8b5b      	ldrh	r3, [r3, #26]
 800dc5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc64:	e003      	b.n	800dc6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f001 ff76 	bl	800fb58 <tcp_send_empty_ack>
 800dc6c:	e000      	b.n	800dc70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d05b      	beq.n	800dd30 <tcp_receive+0x50c>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc7c:	4b60      	ldr	r3, [pc, #384]	; (800de00 <tcp_receive+0x5dc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da54      	bge.n	800dd30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dc86:	4b5f      	ldr	r3, [pc, #380]	; (800de04 <tcp_receive+0x5e0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dc9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dca4:	10db      	asrs	r3, r3, #3
 800dca6:	b21b      	sxth	r3, r3
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dcbe:	4413      	add	r3, r2
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	b21a      	sxth	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dcc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	da05      	bge.n	800dcdc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dcd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dcd4:	425b      	negs	r3, r3
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dcdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dce6:	109b      	asrs	r3, r3, #2
 800dce8:	b21b      	sxth	r3, r3
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dd00:	4413      	add	r3, r2
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	b21a      	sxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd10:	10db      	asrs	r3, r3, #3
 800dd12:	b21b      	sxth	r3, r3
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	4413      	add	r3, r2
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	b21a      	sxth	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dd30:	4b35      	ldr	r3, [pc, #212]	; (800de08 <tcp_receive+0x5e4>)
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 84e2 	beq.w	800e6fe <tcp_receive+0xeda>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7d1b      	ldrb	r3, [r3, #20]
 800dd3e:	2b06      	cmp	r3, #6
 800dd40:	f200 84dd 	bhi.w	800e6fe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd48:	4b30      	ldr	r3, [pc, #192]	; (800de0c <tcp_receive+0x5e8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f2c0 808f 	blt.w	800de74 <tcp_receive+0x650>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd5a:	4b2b      	ldr	r3, [pc, #172]	; (800de08 <tcp_receive+0x5e4>)
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4b2a      	ldr	r3, [pc, #168]	; (800de0c <tcp_receive+0x5e8>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	440b      	add	r3, r1
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	3301      	adds	r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f300 8082 	bgt.w	800de74 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dd70:	4b27      	ldr	r3, [pc, #156]	; (800de10 <tcp_receive+0x5ec>)
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd7a:	4b24      	ldr	r3, [pc, #144]	; (800de0c <tcp_receive+0x5e8>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dd82:	4b23      	ldr	r3, [pc, #140]	; (800de10 <tcp_receive+0x5ec>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <tcp_receive+0x574>
 800dd8a:	4b22      	ldr	r3, [pc, #136]	; (800de14 <tcp_receive+0x5f0>)
 800dd8c:	f240 5294 	movw	r2, #1428	; 0x594
 800dd90:	4921      	ldr	r1, [pc, #132]	; (800de18 <tcp_receive+0x5f4>)
 800dd92:	4822      	ldr	r0, [pc, #136]	; (800de1c <tcp_receive+0x5f8>)
 800dd94:	f007 f9b8 	bl	8015108 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d906      	bls.n	800ddb0 <tcp_receive+0x58c>
 800dda2:	4b1c      	ldr	r3, [pc, #112]	; (800de14 <tcp_receive+0x5f0>)
 800dda4:	f240 5295 	movw	r2, #1429	; 0x595
 800dda8:	491d      	ldr	r1, [pc, #116]	; (800de20 <tcp_receive+0x5fc>)
 800ddaa:	481c      	ldr	r0, [pc, #112]	; (800de1c <tcp_receive+0x5f8>)
 800ddac:	f007 f9ac 	bl	8015108 <iprintf>
      off = (u16_t)off32;
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ddb6:	4b16      	ldr	r3, [pc, #88]	; (800de10 <tcp_receive+0x5ec>)
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	891b      	ldrh	r3, [r3, #8]
 800ddbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d906      	bls.n	800ddd2 <tcp_receive+0x5ae>
 800ddc4:	4b13      	ldr	r3, [pc, #76]	; (800de14 <tcp_receive+0x5f0>)
 800ddc6:	f240 5297 	movw	r2, #1431	; 0x597
 800ddca:	4916      	ldr	r1, [pc, #88]	; (800de24 <tcp_receive+0x600>)
 800ddcc:	4813      	ldr	r0, [pc, #76]	; (800de1c <tcp_receive+0x5f8>)
 800ddce:	f007 f99b 	bl	8015108 <iprintf>
      inseg.len -= off;
 800ddd2:	4b0f      	ldr	r3, [pc, #60]	; (800de10 <tcp_receive+0x5ec>)
 800ddd4:	891a      	ldrh	r2, [r3, #8]
 800ddd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <tcp_receive+0x5ec>)
 800dde0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dde2:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <tcp_receive+0x5ec>)
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	891a      	ldrh	r2, [r3, #8]
 800dde8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ddf0:	e02a      	b.n	800de48 <tcp_receive+0x624>
 800ddf2:	bf00      	nop
 800ddf4:	080176bc 	.word	0x080176bc
 800ddf8:	080176c4 	.word	0x080176c4
 800ddfc:	2000d404 	.word	0x2000d404
 800de00:	2000d400 	.word	0x2000d400
 800de04:	2000d3c4 	.word	0x2000d3c4
 800de08:	2000d406 	.word	0x2000d406
 800de0c:	2000d3fc 	.word	0x2000d3fc
 800de10:	2000d3dc 	.word	0x2000d3dc
 800de14:	08017354 	.word	0x08017354
 800de18:	080176cc 	.word	0x080176cc
 800de1c:	080173a0 	.word	0x080173a0
 800de20:	080176dc 	.word	0x080176dc
 800de24:	080176ec 	.word	0x080176ec
        off -= p->len;
 800de28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de2a:	895b      	ldrh	r3, [r3, #10]
 800de2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800de36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800de3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de3e:	2200      	movs	r2, #0
 800de40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800de42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800de48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de4a:	895b      	ldrh	r3, [r3, #10]
 800de4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de50:	429a      	cmp	r2, r3
 800de52:	d8e9      	bhi.n	800de28 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800de54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de58:	4619      	mov	r1, r3
 800de5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800de5c:	f7fc fb60 	bl	800a520 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de64:	4a91      	ldr	r2, [pc, #580]	; (800e0ac <tcp_receive+0x888>)
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	4b91      	ldr	r3, [pc, #580]	; (800e0b0 <tcp_receive+0x88c>)
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	4a8f      	ldr	r2, [pc, #572]	; (800e0ac <tcp_receive+0x888>)
 800de6e:	6812      	ldr	r2, [r2, #0]
 800de70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800de72:	e00d      	b.n	800de90 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800de74:	4b8d      	ldr	r3, [pc, #564]	; (800e0ac <tcp_receive+0x888>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	da06      	bge.n	800de90 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	8b5b      	ldrh	r3, [r3, #26]
 800de86:	f043 0302 	orr.w	r3, r3, #2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de90:	4b86      	ldr	r3, [pc, #536]	; (800e0ac <tcp_receive+0x888>)
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f2c0 842a 	blt.w	800e6f4 <tcp_receive+0xed0>
 800dea0:	4b82      	ldr	r3, [pc, #520]	; (800e0ac <tcp_receive+0x888>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	6879      	ldr	r1, [r7, #4]
 800deaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800deac:	440b      	add	r3, r1
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	3301      	adds	r3, #1
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f300 841e 	bgt.w	800e6f4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800debc:	4b7b      	ldr	r3, [pc, #492]	; (800e0ac <tcp_receive+0x888>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	f040 829a 	bne.w	800e3fa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dec6:	4b7a      	ldr	r3, [pc, #488]	; (800e0b0 <tcp_receive+0x88c>)
 800dec8:	891c      	ldrh	r4, [r3, #8]
 800deca:	4b79      	ldr	r3, [pc, #484]	; (800e0b0 <tcp_receive+0x88c>)
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	899b      	ldrh	r3, [r3, #12]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fb f814 	bl	8008f00 <lwip_htons>
 800ded8:	4603      	mov	r3, r0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	f003 0303 	and.w	r3, r3, #3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <tcp_receive+0x6c4>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e000      	b.n	800deea <tcp_receive+0x6c6>
 800dee8:	2300      	movs	r3, #0
 800deea:	4423      	add	r3, r4
 800deec:	b29a      	uxth	r2, r3
 800deee:	4b71      	ldr	r3, [pc, #452]	; (800e0b4 <tcp_receive+0x890>)
 800def0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800def6:	4b6f      	ldr	r3, [pc, #444]	; (800e0b4 <tcp_receive+0x890>)
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	429a      	cmp	r2, r3
 800defc:	d275      	bcs.n	800dfea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800defe:	4b6c      	ldr	r3, [pc, #432]	; (800e0b0 <tcp_receive+0x88c>)
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	899b      	ldrh	r3, [r3, #12]
 800df04:	b29b      	uxth	r3, r3
 800df06:	4618      	mov	r0, r3
 800df08:	f7fa fffa 	bl	8008f00 <lwip_htons>
 800df0c:	4603      	mov	r3, r0
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01f      	beq.n	800df58 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800df18:	4b65      	ldr	r3, [pc, #404]	; (800e0b0 <tcp_receive+0x88c>)
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	899b      	ldrh	r3, [r3, #12]
 800df1e:	b29b      	uxth	r3, r3
 800df20:	b21b      	sxth	r3, r3
 800df22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df26:	b21c      	sxth	r4, r3
 800df28:	4b61      	ldr	r3, [pc, #388]	; (800e0b0 <tcp_receive+0x88c>)
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	899b      	ldrh	r3, [r3, #12]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	4618      	mov	r0, r3
 800df32:	f7fa ffe5 	bl	8008f00 <lwip_htons>
 800df36:	4603      	mov	r3, r0
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800df40:	b29b      	uxth	r3, r3
 800df42:	4618      	mov	r0, r3
 800df44:	f7fa ffdc 	bl	8008f00 <lwip_htons>
 800df48:	4603      	mov	r3, r0
 800df4a:	b21b      	sxth	r3, r3
 800df4c:	4323      	orrs	r3, r4
 800df4e:	b21a      	sxth	r2, r3
 800df50:	4b57      	ldr	r3, [pc, #348]	; (800e0b0 <tcp_receive+0x88c>)
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	b292      	uxth	r2, r2
 800df56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df5c:	4b54      	ldr	r3, [pc, #336]	; (800e0b0 <tcp_receive+0x88c>)
 800df5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800df60:	4b53      	ldr	r3, [pc, #332]	; (800e0b0 <tcp_receive+0x88c>)
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	899b      	ldrh	r3, [r3, #12]
 800df66:	b29b      	uxth	r3, r3
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fa ffc9 	bl	8008f00 <lwip_htons>
 800df6e:	4603      	mov	r3, r0
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 0302 	and.w	r3, r3, #2
 800df76:	2b00      	cmp	r3, #0
 800df78:	d005      	beq.n	800df86 <tcp_receive+0x762>
            inseg.len -= 1;
 800df7a:	4b4d      	ldr	r3, [pc, #308]	; (800e0b0 <tcp_receive+0x88c>)
 800df7c:	891b      	ldrh	r3, [r3, #8]
 800df7e:	3b01      	subs	r3, #1
 800df80:	b29a      	uxth	r2, r3
 800df82:	4b4b      	ldr	r3, [pc, #300]	; (800e0b0 <tcp_receive+0x88c>)
 800df84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800df86:	4b4a      	ldr	r3, [pc, #296]	; (800e0b0 <tcp_receive+0x88c>)
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	4a49      	ldr	r2, [pc, #292]	; (800e0b0 <tcp_receive+0x88c>)
 800df8c:	8912      	ldrh	r2, [r2, #8]
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7fc f9c5 	bl	800a320 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800df96:	4b46      	ldr	r3, [pc, #280]	; (800e0b0 <tcp_receive+0x88c>)
 800df98:	891c      	ldrh	r4, [r3, #8]
 800df9a:	4b45      	ldr	r3, [pc, #276]	; (800e0b0 <tcp_receive+0x88c>)
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	899b      	ldrh	r3, [r3, #12]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fa ffac 	bl	8008f00 <lwip_htons>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	f003 0303 	and.w	r3, r3, #3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <tcp_receive+0x794>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <tcp_receive+0x796>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4423      	add	r3, r4
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	4b3d      	ldr	r3, [pc, #244]	; (800e0b4 <tcp_receive+0x890>)
 800dfc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dfc2:	4b3c      	ldr	r3, [pc, #240]	; (800e0b4 <tcp_receive+0x890>)
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	4b38      	ldr	r3, [pc, #224]	; (800e0ac <tcp_receive+0x888>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	441a      	add	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dfd6:	440b      	add	r3, r1
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d006      	beq.n	800dfea <tcp_receive+0x7c6>
 800dfdc:	4b36      	ldr	r3, [pc, #216]	; (800e0b8 <tcp_receive+0x894>)
 800dfde:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800dfe2:	4936      	ldr	r1, [pc, #216]	; (800e0bc <tcp_receive+0x898>)
 800dfe4:	4836      	ldr	r0, [pc, #216]	; (800e0c0 <tcp_receive+0x89c>)
 800dfe6:	f007 f88f 	bl	8015108 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 80e7 	beq.w	800e1c2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dff4:	4b2e      	ldr	r3, [pc, #184]	; (800e0b0 <tcp_receive+0x88c>)
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	899b      	ldrh	r3, [r3, #12]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fa ff7f 	bl	8008f00 <lwip_htons>
 800e002:	4603      	mov	r3, r0
 800e004:	b2db      	uxtb	r3, r3
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d010      	beq.n	800e030 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e00e:	e00a      	b.n	800e026 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e014:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7fd fd92 	bl	800bb4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1f0      	bne.n	800e010 <tcp_receive+0x7ec>
 800e02e:	e0c8      	b.n	800e1c2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e034:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e036:	e052      	b.n	800e0de <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	899b      	ldrh	r3, [r3, #12]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	4618      	mov	r0, r3
 800e042:	f7fa ff5d 	bl	8008f00 <lwip_htons>
 800e046:	4603      	mov	r3, r0
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d03d      	beq.n	800e0ce <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e052:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <tcp_receive+0x88c>)
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	899b      	ldrh	r3, [r3, #12]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fa ff50 	bl	8008f00 <lwip_htons>
 800e060:	4603      	mov	r3, r0
 800e062:	b2db      	uxtb	r3, r3
 800e064:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d130      	bne.n	800e0ce <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <tcp_receive+0x88c>)
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	899b      	ldrh	r3, [r3, #12]
 800e072:	b29c      	uxth	r4, r3
 800e074:	2001      	movs	r0, #1
 800e076:	f7fa ff43 	bl	8008f00 <lwip_htons>
 800e07a:	4603      	mov	r3, r0
 800e07c:	461a      	mov	r2, r3
 800e07e:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <tcp_receive+0x88c>)
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	4322      	orrs	r2, r4
 800e084:	b292      	uxth	r2, r2
 800e086:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e088:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <tcp_receive+0x88c>)
 800e08a:	891c      	ldrh	r4, [r3, #8]
 800e08c:	4b08      	ldr	r3, [pc, #32]	; (800e0b0 <tcp_receive+0x88c>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	899b      	ldrh	r3, [r3, #12]
 800e092:	b29b      	uxth	r3, r3
 800e094:	4618      	mov	r0, r3
 800e096:	f7fa ff33 	bl	8008f00 <lwip_htons>
 800e09a:	4603      	mov	r3, r0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 0303 	and.w	r3, r3, #3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00e      	beq.n	800e0c4 <tcp_receive+0x8a0>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e00d      	b.n	800e0c6 <tcp_receive+0x8a2>
 800e0aa:	bf00      	nop
 800e0ac:	2000d3fc 	.word	0x2000d3fc
 800e0b0:	2000d3dc 	.word	0x2000d3dc
 800e0b4:	2000d406 	.word	0x2000d406
 800e0b8:	08017354 	.word	0x08017354
 800e0bc:	080176fc 	.word	0x080176fc
 800e0c0:	080173a0 	.word	0x080173a0
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4423      	add	r3, r4
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	4b98      	ldr	r3, [pc, #608]	; (800e32c <tcp_receive+0xb08>)
 800e0cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e0d8:	6938      	ldr	r0, [r7, #16]
 800e0da:	f7fd fd36 	bl	800bb4a <tcp_seg_free>
            while (next &&
 800e0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00e      	beq.n	800e102 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e0e4:	4b91      	ldr	r3, [pc, #580]	; (800e32c <tcp_receive+0xb08>)
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4b91      	ldr	r3, [pc, #580]	; (800e330 <tcp_receive+0xb0c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	441a      	add	r2, r3
 800e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e0f8:	8909      	ldrh	r1, [r1, #8]
 800e0fa:	440b      	add	r3, r1
 800e0fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	da9a      	bge.n	800e038 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e104:	2b00      	cmp	r3, #0
 800e106:	d059      	beq.n	800e1bc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e108:	4b88      	ldr	r3, [pc, #544]	; (800e32c <tcp_receive+0xb08>)
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	461a      	mov	r2, r3
 800e10e:	4b88      	ldr	r3, [pc, #544]	; (800e330 <tcp_receive+0xb0c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	441a      	add	r2, r3
 800e114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	dd4d      	ble.n	800e1bc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	b29a      	uxth	r2, r3
 800e128:	4b81      	ldr	r3, [pc, #516]	; (800e330 <tcp_receive+0xb0c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	b29a      	uxth	r2, r3
 800e132:	4b80      	ldr	r3, [pc, #512]	; (800e334 <tcp_receive+0xb10>)
 800e134:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e136:	4b7f      	ldr	r3, [pc, #508]	; (800e334 <tcp_receive+0xb10>)
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	899b      	ldrh	r3, [r3, #12]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fa fede 	bl	8008f00 <lwip_htons>
 800e144:	4603      	mov	r3, r0
 800e146:	b2db      	uxtb	r3, r3
 800e148:	f003 0302 	and.w	r3, r3, #2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <tcp_receive+0x938>
                inseg.len -= 1;
 800e150:	4b78      	ldr	r3, [pc, #480]	; (800e334 <tcp_receive+0xb10>)
 800e152:	891b      	ldrh	r3, [r3, #8]
 800e154:	3b01      	subs	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	4b76      	ldr	r3, [pc, #472]	; (800e334 <tcp_receive+0xb10>)
 800e15a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e15c:	4b75      	ldr	r3, [pc, #468]	; (800e334 <tcp_receive+0xb10>)
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	4a74      	ldr	r2, [pc, #464]	; (800e334 <tcp_receive+0xb10>)
 800e162:	8912      	ldrh	r2, [r2, #8]
 800e164:	4611      	mov	r1, r2
 800e166:	4618      	mov	r0, r3
 800e168:	f7fc f8da 	bl	800a320 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e16c:	4b71      	ldr	r3, [pc, #452]	; (800e334 <tcp_receive+0xb10>)
 800e16e:	891c      	ldrh	r4, [r3, #8]
 800e170:	4b70      	ldr	r3, [pc, #448]	; (800e334 <tcp_receive+0xb10>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	899b      	ldrh	r3, [r3, #12]
 800e176:	b29b      	uxth	r3, r3
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fa fec1 	bl	8008f00 <lwip_htons>
 800e17e:	4603      	mov	r3, r0
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <tcp_receive+0x96a>
 800e18a:	2301      	movs	r3, #1
 800e18c:	e000      	b.n	800e190 <tcp_receive+0x96c>
 800e18e:	2300      	movs	r3, #0
 800e190:	4423      	add	r3, r4
 800e192:	b29a      	uxth	r2, r3
 800e194:	4b65      	ldr	r3, [pc, #404]	; (800e32c <tcp_receive+0xb08>)
 800e196:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e198:	4b64      	ldr	r3, [pc, #400]	; (800e32c <tcp_receive+0xb08>)
 800e19a:	881b      	ldrh	r3, [r3, #0]
 800e19c:	461a      	mov	r2, r3
 800e19e:	4b64      	ldr	r3, [pc, #400]	; (800e330 <tcp_receive+0xb0c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	441a      	add	r2, r3
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d006      	beq.n	800e1bc <tcp_receive+0x998>
 800e1ae:	4b62      	ldr	r3, [pc, #392]	; (800e338 <tcp_receive+0xb14>)
 800e1b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e1b4:	4961      	ldr	r1, [pc, #388]	; (800e33c <tcp_receive+0xb18>)
 800e1b6:	4862      	ldr	r0, [pc, #392]	; (800e340 <tcp_receive+0xb1c>)
 800e1b8:	f006 ffa6 	bl	8015108 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e1c2:	4b5a      	ldr	r3, [pc, #360]	; (800e32c <tcp_receive+0xb08>)
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	4b59      	ldr	r3, [pc, #356]	; (800e330 <tcp_receive+0xb0c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	441a      	add	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1d6:	4b55      	ldr	r3, [pc, #340]	; (800e32c <tcp_receive+0xb08>)
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d206      	bcs.n	800e1ec <tcp_receive+0x9c8>
 800e1de:	4b56      	ldr	r3, [pc, #344]	; (800e338 <tcp_receive+0xb14>)
 800e1e0:	f240 6207 	movw	r2, #1543	; 0x607
 800e1e4:	4957      	ldr	r1, [pc, #348]	; (800e344 <tcp_receive+0xb20>)
 800e1e6:	4856      	ldr	r0, [pc, #344]	; (800e340 <tcp_receive+0xb1c>)
 800e1e8:	f006 ff8e 	bl	8015108 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1f0:	4b4e      	ldr	r3, [pc, #312]	; (800e32c <tcp_receive+0xb08>)
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7fc ffc5 	bl	800b18c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e202:	4b4c      	ldr	r3, [pc, #304]	; (800e334 <tcp_receive+0xb10>)
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	891b      	ldrh	r3, [r3, #8]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d006      	beq.n	800e21a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e20c:	4b49      	ldr	r3, [pc, #292]	; (800e334 <tcp_receive+0xb10>)
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	4a4d      	ldr	r2, [pc, #308]	; (800e348 <tcp_receive+0xb24>)
 800e212:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e214:	4b47      	ldr	r3, [pc, #284]	; (800e334 <tcp_receive+0xb10>)
 800e216:	2200      	movs	r2, #0
 800e218:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e21a:	4b46      	ldr	r3, [pc, #280]	; (800e334 <tcp_receive+0xb10>)
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	899b      	ldrh	r3, [r3, #12]
 800e220:	b29b      	uxth	r3, r3
 800e222:	4618      	mov	r0, r3
 800e224:	f7fa fe6c 	bl	8008f00 <lwip_htons>
 800e228:	4603      	mov	r3, r0
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 0301 	and.w	r3, r3, #1
 800e230:	2b00      	cmp	r3, #0
 800e232:	f000 80b8 	beq.w	800e3a6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e236:	4b45      	ldr	r3, [pc, #276]	; (800e34c <tcp_receive+0xb28>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	f043 0320 	orr.w	r3, r3, #32
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	4b42      	ldr	r3, [pc, #264]	; (800e34c <tcp_receive+0xb28>)
 800e242:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e244:	e0af      	b.n	800e3a6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e24a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4a36      	ldr	r2, [pc, #216]	; (800e330 <tcp_receive+0xb0c>)
 800e256:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	891b      	ldrh	r3, [r3, #8]
 800e25c:	461c      	mov	r4, r3
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	899b      	ldrh	r3, [r3, #12]
 800e264:	b29b      	uxth	r3, r3
 800e266:	4618      	mov	r0, r3
 800e268:	f7fa fe4a 	bl	8008f00 <lwip_htons>
 800e26c:	4603      	mov	r3, r0
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f003 0303 	and.w	r3, r3, #3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <tcp_receive+0xa58>
 800e278:	2301      	movs	r3, #1
 800e27a:	e000      	b.n	800e27e <tcp_receive+0xa5a>
 800e27c:	2300      	movs	r3, #0
 800e27e:	191a      	adds	r2, r3, r4
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	441a      	add	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e28e:	461c      	mov	r4, r3
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	891b      	ldrh	r3, [r3, #8]
 800e294:	461d      	mov	r5, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	899b      	ldrh	r3, [r3, #12]
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fa fe2e 	bl	8008f00 <lwip_htons>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	f003 0303 	and.w	r3, r3, #3
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <tcp_receive+0xa90>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e000      	b.n	800e2b6 <tcp_receive+0xa92>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	442b      	add	r3, r5
 800e2b8:	429c      	cmp	r4, r3
 800e2ba:	d206      	bcs.n	800e2ca <tcp_receive+0xaa6>
 800e2bc:	4b1e      	ldr	r3, [pc, #120]	; (800e338 <tcp_receive+0xb14>)
 800e2be:	f240 622b 	movw	r2, #1579	; 0x62b
 800e2c2:	4923      	ldr	r1, [pc, #140]	; (800e350 <tcp_receive+0xb2c>)
 800e2c4:	481e      	ldr	r0, [pc, #120]	; (800e340 <tcp_receive+0xb1c>)
 800e2c6:	f006 ff1f 	bl	8015108 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	891b      	ldrh	r3, [r3, #8]
 800e2ce:	461c      	mov	r4, r3
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	899b      	ldrh	r3, [r3, #12]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fa fe11 	bl	8008f00 <lwip_htons>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	f003 0303 	and.w	r3, r3, #3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <tcp_receive+0xaca>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e000      	b.n	800e2f0 <tcp_receive+0xacc>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	1919      	adds	r1, r3, r4
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2f6:	b28b      	uxth	r3, r1
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7fc ff43 	bl	800b18c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d028      	beq.n	800e362 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <tcp_receive+0xb24>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d01d      	beq.n	800e354 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e318:	4b0b      	ldr	r3, [pc, #44]	; (800e348 <tcp_receive+0xb24>)
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fc fa50 	bl	800a7c8 <pbuf_cat>
 800e328:	e018      	b.n	800e35c <tcp_receive+0xb38>
 800e32a:	bf00      	nop
 800e32c:	2000d406 	.word	0x2000d406
 800e330:	2000d3fc 	.word	0x2000d3fc
 800e334:	2000d3dc 	.word	0x2000d3dc
 800e338:	08017354 	.word	0x08017354
 800e33c:	08017734 	.word	0x08017734
 800e340:	080173a0 	.word	0x080173a0
 800e344:	08017770 	.word	0x08017770
 800e348:	2000d40c 	.word	0x2000d40c
 800e34c:	2000d409 	.word	0x2000d409
 800e350:	08017790 	.word	0x08017790
            } else {
              recv_data = cseg->p;
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	4a70      	ldr	r2, [pc, #448]	; (800e51c <tcp_receive+0xcf8>)
 800e35a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2200      	movs	r2, #0
 800e360:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fa fdc8 	bl	8008f00 <lwip_htons>
 800e370:	4603      	mov	r3, r0
 800e372:	b2db      	uxtb	r3, r3
 800e374:	f003 0301 	and.w	r3, r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00d      	beq.n	800e398 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e37c:	4b68      	ldr	r3, [pc, #416]	; (800e520 <tcp_receive+0xcfc>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f043 0320 	orr.w	r3, r3, #32
 800e384:	b2da      	uxtb	r2, r3
 800e386:	4b66      	ldr	r3, [pc, #408]	; (800e520 <tcp_receive+0xcfc>)
 800e388:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7d1b      	ldrb	r3, [r3, #20]
 800e38e:	2b04      	cmp	r3, #4
 800e390:	d102      	bne.n	800e398 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2207      	movs	r2, #7
 800e396:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e3a0:	68b8      	ldr	r0, [r7, #8]
 800e3a2:	f7fd fbd2 	bl	800bb4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d008      	beq.n	800e3c0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	f43f af43 	beq.w	800e246 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	8b5b      	ldrh	r3, [r3, #26]
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00e      	beq.n	800e3ea <tcp_receive+0xbc6>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	8b5b      	ldrh	r3, [r3, #26]
 800e3d0:	f023 0301 	bic.w	r3, r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	835a      	strh	r2, [r3, #26]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	8b5b      	ldrh	r3, [r3, #26]
 800e3de:	f043 0302 	orr.w	r3, r3, #2
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e3e8:	e188      	b.n	800e6fc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	8b5b      	ldrh	r3, [r3, #26]
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e3f8:	e180      	b.n	800e6fc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d106      	bne.n	800e410 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e402:	4848      	ldr	r0, [pc, #288]	; (800e524 <tcp_receive+0xd00>)
 800e404:	f7fd fbba 	bl	800bb7c <tcp_seg_copy>
 800e408:	4602      	mov	r2, r0
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	675a      	str	r2, [r3, #116]	; 0x74
 800e40e:	e16d      	b.n	800e6ec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e418:	63bb      	str	r3, [r7, #56]	; 0x38
 800e41a:	e157      	b.n	800e6cc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	4b41      	ldr	r3, [pc, #260]	; (800e528 <tcp_receive+0xd04>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d11d      	bne.n	800e466 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e42a:	4b3e      	ldr	r3, [pc, #248]	; (800e524 <tcp_receive+0xd00>)
 800e42c:	891a      	ldrh	r2, [r3, #8]
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	891b      	ldrh	r3, [r3, #8]
 800e432:	429a      	cmp	r2, r3
 800e434:	f240 814f 	bls.w	800e6d6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e438:	483a      	ldr	r0, [pc, #232]	; (800e524 <tcp_receive+0xd00>)
 800e43a:	f7fd fb9f 	bl	800bb7c <tcp_seg_copy>
 800e43e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 8149 	beq.w	800e6da <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d003      	beq.n	800e456 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	e002      	b.n	800e45c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e45c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e45e:	6978      	ldr	r0, [r7, #20]
 800e460:	f7ff f8dc 	bl	800d61c <tcp_oos_insert_segment>
                }
                break;
 800e464:	e139      	b.n	800e6da <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d117      	bne.n	800e49c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e46c:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <tcp_receive+0xd04>)
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	da57      	bge.n	800e52c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e47c:	4829      	ldr	r0, [pc, #164]	; (800e524 <tcp_receive+0xd00>)
 800e47e:	f7fd fb7d 	bl	800bb7c <tcp_seg_copy>
 800e482:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	2b00      	cmp	r3, #0
 800e488:	f000 8129 	beq.w	800e6de <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	69ba      	ldr	r2, [r7, #24]
 800e490:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e494:	69b8      	ldr	r0, [r7, #24]
 800e496:	f7ff f8c1 	bl	800d61c <tcp_oos_insert_segment>
                  }
                  break;
 800e49a:	e120      	b.n	800e6de <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e49c:	4b22      	ldr	r3, [pc, #136]	; (800e528 <tcp_receive+0xd04>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	db3e      	blt.n	800e52c <tcp_receive+0xd08>
 800e4ae:	4b1e      	ldr	r3, [pc, #120]	; (800e528 <tcp_receive+0xd04>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	dc35      	bgt.n	800e52c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e4c0:	4818      	ldr	r0, [pc, #96]	; (800e524 <tcp_receive+0xd00>)
 800e4c2:	f7fd fb5b 	bl	800bb7c <tcp_seg_copy>
 800e4c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 8109 	beq.w	800e6e2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4d8:	8912      	ldrh	r2, [r2, #8]
 800e4da:	441a      	add	r2, r3
 800e4dc:	4b12      	ldr	r3, [pc, #72]	; (800e528 <tcp_receive+0xd04>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	dd12      	ble.n	800e50c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e4e6:	4b10      	ldr	r3, [pc, #64]	; (800e528 <tcp_receive+0xd04>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e502:	891b      	ldrh	r3, [r3, #8]
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f7fb ff0a 	bl	800a320 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e514:	69f8      	ldr	r0, [r7, #28]
 800e516:	f7ff f881 	bl	800d61c <tcp_oos_insert_segment>
                  }
                  break;
 800e51a:	e0e2      	b.n	800e6e2 <tcp_receive+0xebe>
 800e51c:	2000d40c 	.word	0x2000d40c
 800e520:	2000d409 	.word	0x2000d409
 800e524:	2000d3dc 	.word	0x2000d3dc
 800e528:	2000d3fc 	.word	0x2000d3fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f040 80c6 	bne.w	800e6c6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e53a:	4b80      	ldr	r3, [pc, #512]	; (800e73c <tcp_receive+0xf18>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e546:	2b00      	cmp	r3, #0
 800e548:	f340 80bd 	ble.w	800e6c6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	899b      	ldrh	r3, [r3, #12]
 800e552:	b29b      	uxth	r3, r3
 800e554:	4618      	mov	r0, r3
 800e556:	f7fa fcd3 	bl	8008f00 <lwip_htons>
 800e55a:	4603      	mov	r3, r0
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	2b00      	cmp	r3, #0
 800e564:	f040 80bf 	bne.w	800e6e6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e568:	4875      	ldr	r0, [pc, #468]	; (800e740 <tcp_receive+0xf1c>)
 800e56a:	f7fd fb07 	bl	800bb7c <tcp_seg_copy>
 800e56e:	4602      	mov	r2, r0
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 80b6 	beq.w	800e6ea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e586:	8912      	ldrh	r2, [r2, #8]
 800e588:	441a      	add	r2, r3
 800e58a:	4b6c      	ldr	r3, [pc, #432]	; (800e73c <tcp_receive+0xf18>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	2b00      	cmp	r3, #0
 800e592:	dd12      	ble.n	800e5ba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e594:	4b69      	ldr	r3, [pc, #420]	; (800e73c <tcp_receive+0xf18>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	b29a      	uxth	r2, r3
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	1ad3      	subs	r3, r2, r3
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	891b      	ldrh	r3, [r3, #8]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7fb feb3 	bl	800a320 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e5ba:	4b62      	ldr	r3, [pc, #392]	; (800e744 <tcp_receive+0xf20>)
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	4b5e      	ldr	r3, [pc, #376]	; (800e73c <tcp_receive+0xf18>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	441a      	add	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5ce:	440b      	add	r3, r1
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f340 8089 	ble.w	800e6ea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	899b      	ldrh	r3, [r3, #12]
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fa fc8c 	bl	8008f00 <lwip_htons>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d022      	beq.n	800e63a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	899b      	ldrh	r3, [r3, #12]
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	b21b      	sxth	r3, r3
 800e600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e604:	b21c      	sxth	r4, r3
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	4618      	mov	r0, r3
 800e612:	f7fa fc75 	bl	8008f00 <lwip_htons>
 800e616:	4603      	mov	r3, r0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e620:	b29b      	uxth	r3, r3
 800e622:	4618      	mov	r0, r3
 800e624:	f7fa fc6c 	bl	8008f00 <lwip_htons>
 800e628:	4603      	mov	r3, r0
 800e62a:	b21b      	sxth	r3, r3
 800e62c:	4323      	orrs	r3, r4
 800e62e:	b21a      	sxth	r2, r3
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	b292      	uxth	r2, r2
 800e638:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e644:	4413      	add	r3, r2
 800e646:	b299      	uxth	r1, r3
 800e648:	4b3c      	ldr	r3, [pc, #240]	; (800e73c <tcp_receive+0xf18>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	1a8a      	subs	r2, r1, r2
 800e654:	b292      	uxth	r2, r2
 800e656:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	891b      	ldrh	r3, [r3, #8]
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fb fe5a 	bl	800a320 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	891c      	ldrh	r4, [r3, #8]
 800e672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	899b      	ldrh	r3, [r3, #12]
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fa fc3f 	bl	8008f00 <lwip_htons>
 800e682:	4603      	mov	r3, r0
 800e684:	b2db      	uxtb	r3, r3
 800e686:	f003 0303 	and.w	r3, r3, #3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <tcp_receive+0xe6e>
 800e68e:	2301      	movs	r3, #1
 800e690:	e000      	b.n	800e694 <tcp_receive+0xe70>
 800e692:	2300      	movs	r3, #0
 800e694:	4423      	add	r3, r4
 800e696:	b29a      	uxth	r2, r3
 800e698:	4b2a      	ldr	r3, [pc, #168]	; (800e744 <tcp_receive+0xf20>)
 800e69a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e69c:	4b29      	ldr	r3, [pc, #164]	; (800e744 <tcp_receive+0xf20>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	4b26      	ldr	r3, [pc, #152]	; (800e73c <tcp_receive+0xf18>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	441a      	add	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e6b0:	440b      	add	r3, r1
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d019      	beq.n	800e6ea <tcp_receive+0xec6>
 800e6b6:	4b24      	ldr	r3, [pc, #144]	; (800e748 <tcp_receive+0xf24>)
 800e6b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e6bc:	4923      	ldr	r1, [pc, #140]	; (800e74c <tcp_receive+0xf28>)
 800e6be:	4824      	ldr	r0, [pc, #144]	; (800e750 <tcp_receive+0xf2c>)
 800e6c0:	f006 fd22 	bl	8015108 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e6c4:	e011      	b.n	800e6ea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f47f aea4 	bne.w	800e41c <tcp_receive+0xbf8>
 800e6d4:	e00a      	b.n	800e6ec <tcp_receive+0xec8>
                break;
 800e6d6:	bf00      	nop
 800e6d8:	e008      	b.n	800e6ec <tcp_receive+0xec8>
                break;
 800e6da:	bf00      	nop
 800e6dc:	e006      	b.n	800e6ec <tcp_receive+0xec8>
                  break;
 800e6de:	bf00      	nop
 800e6e0:	e004      	b.n	800e6ec <tcp_receive+0xec8>
                  break;
 800e6e2:	bf00      	nop
 800e6e4:	e002      	b.n	800e6ec <tcp_receive+0xec8>
                  break;
 800e6e6:	bf00      	nop
 800e6e8:	e000      	b.n	800e6ec <tcp_receive+0xec8>
                break;
 800e6ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f001 fa33 	bl	800fb58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e6f2:	e003      	b.n	800e6fc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fa2f 	bl	800fb58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6fa:	e01a      	b.n	800e732 <tcp_receive+0xf0e>
 800e6fc:	e019      	b.n	800e732 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e6fe:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <tcp_receive+0xf18>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	db0a      	blt.n	800e722 <tcp_receive+0xefe>
 800e70c:	4b0b      	ldr	r3, [pc, #44]	; (800e73c <tcp_receive+0xf18>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e718:	440b      	add	r3, r1
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	3301      	adds	r3, #1
 800e71e:	2b00      	cmp	r3, #0
 800e720:	dd07      	ble.n	800e732 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8b5b      	ldrh	r3, [r3, #26]
 800e726:	f043 0302 	orr.w	r3, r3, #2
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e730:	e7ff      	b.n	800e732 <tcp_receive+0xf0e>
 800e732:	bf00      	nop
 800e734:	3750      	adds	r7, #80	; 0x50
 800e736:	46bd      	mov	sp, r7
 800e738:	bdb0      	pop	{r4, r5, r7, pc}
 800e73a:	bf00      	nop
 800e73c:	2000d3fc 	.word	0x2000d3fc
 800e740:	2000d3dc 	.word	0x2000d3dc
 800e744:	2000d406 	.word	0x2000d406
 800e748:	08017354 	.word	0x08017354
 800e74c:	080176fc 	.word	0x080176fc
 800e750:	080173a0 	.word	0x080173a0

0800e754 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e75a:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <tcp_get_next_optbyte+0x5c>)
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	b291      	uxth	r1, r2
 800e762:	4a13      	ldr	r2, [pc, #76]	; (800e7b0 <tcp_get_next_optbyte+0x5c>)
 800e764:	8011      	strh	r1, [r2, #0]
 800e766:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e768:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <tcp_get_next_optbyte+0x60>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d004      	beq.n	800e77a <tcp_get_next_optbyte+0x26>
 800e770:	4b11      	ldr	r3, [pc, #68]	; (800e7b8 <tcp_get_next_optbyte+0x64>)
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	88fa      	ldrh	r2, [r7, #6]
 800e776:	429a      	cmp	r2, r3
 800e778:	d208      	bcs.n	800e78c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e77a:	4b10      	ldr	r3, [pc, #64]	; (800e7bc <tcp_get_next_optbyte+0x68>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3314      	adds	r3, #20
 800e780:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e782:	88fb      	ldrh	r3, [r7, #6]
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	4413      	add	r3, r2
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	e00b      	b.n	800e7a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e78c:	88fb      	ldrh	r3, [r7, #6]
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	4b09      	ldr	r3, [pc, #36]	; (800e7b8 <tcp_get_next_optbyte+0x64>)
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	b2db      	uxtb	r3, r3
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <tcp_get_next_optbyte+0x60>)
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	797b      	ldrb	r3, [r7, #5]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	2000d3f8 	.word	0x2000d3f8
 800e7b4:	2000d3f4 	.word	0x2000d3f4
 800e7b8:	2000d3f2 	.word	0x2000d3f2
 800e7bc:	2000d3ec 	.word	0x2000d3ec

0800e7c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d106      	bne.n	800e7dc <tcp_parseopt+0x1c>
 800e7ce:	4b32      	ldr	r3, [pc, #200]	; (800e898 <tcp_parseopt+0xd8>)
 800e7d0:	f240 727d 	movw	r2, #1917	; 0x77d
 800e7d4:	4931      	ldr	r1, [pc, #196]	; (800e89c <tcp_parseopt+0xdc>)
 800e7d6:	4832      	ldr	r0, [pc, #200]	; (800e8a0 <tcp_parseopt+0xe0>)
 800e7d8:	f006 fc96 	bl	8015108 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e7dc:	4b31      	ldr	r3, [pc, #196]	; (800e8a4 <tcp_parseopt+0xe4>)
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d055      	beq.n	800e890 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e7e4:	4b30      	ldr	r3, [pc, #192]	; (800e8a8 <tcp_parseopt+0xe8>)
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	801a      	strh	r2, [r3, #0]
 800e7ea:	e045      	b.n	800e878 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e7ec:	f7ff ffb2 	bl	800e754 <tcp_get_next_optbyte>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d006      	beq.n	800e808 <tcp_parseopt+0x48>
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	dc2b      	bgt.n	800e856 <tcp_parseopt+0x96>
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d041      	beq.n	800e886 <tcp_parseopt+0xc6>
 800e802:	2b01      	cmp	r3, #1
 800e804:	d127      	bne.n	800e856 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e806:	e037      	b.n	800e878 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e808:	f7ff ffa4 	bl	800e754 <tcp_get_next_optbyte>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b04      	cmp	r3, #4
 800e810:	d13b      	bne.n	800e88a <tcp_parseopt+0xca>
 800e812:	4b25      	ldr	r3, [pc, #148]	; (800e8a8 <tcp_parseopt+0xe8>)
 800e814:	881b      	ldrh	r3, [r3, #0]
 800e816:	3301      	adds	r3, #1
 800e818:	4a22      	ldr	r2, [pc, #136]	; (800e8a4 <tcp_parseopt+0xe4>)
 800e81a:	8812      	ldrh	r2, [r2, #0]
 800e81c:	4293      	cmp	r3, r2
 800e81e:	da34      	bge.n	800e88a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e820:	f7ff ff98 	bl	800e754 <tcp_get_next_optbyte>
 800e824:	4603      	mov	r3, r0
 800e826:	b29b      	uxth	r3, r3
 800e828:	021b      	lsls	r3, r3, #8
 800e82a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e82c:	f7ff ff92 	bl	800e754 <tcp_get_next_optbyte>
 800e830:	4603      	mov	r3, r0
 800e832:	b29a      	uxth	r2, r3
 800e834:	89bb      	ldrh	r3, [r7, #12]
 800e836:	4313      	orrs	r3, r2
 800e838:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e83a:	89bb      	ldrh	r3, [r7, #12]
 800e83c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e840:	d804      	bhi.n	800e84c <tcp_parseopt+0x8c>
 800e842:	89bb      	ldrh	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <tcp_parseopt+0x8c>
 800e848:	89ba      	ldrh	r2, [r7, #12]
 800e84a:	e001      	b.n	800e850 <tcp_parseopt+0x90>
 800e84c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e854:	e010      	b.n	800e878 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e856:	f7ff ff7d 	bl	800e754 <tcp_get_next_optbyte>
 800e85a:	4603      	mov	r3, r0
 800e85c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e85e:	7afb      	ldrb	r3, [r7, #11]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d914      	bls.n	800e88e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	b29a      	uxth	r2, r3
 800e868:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <tcp_parseopt+0xe8>)
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	4413      	add	r3, r2
 800e86e:	b29b      	uxth	r3, r3
 800e870:	3b02      	subs	r3, #2
 800e872:	b29a      	uxth	r2, r3
 800e874:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <tcp_parseopt+0xe8>)
 800e876:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e878:	4b0b      	ldr	r3, [pc, #44]	; (800e8a8 <tcp_parseopt+0xe8>)
 800e87a:	881a      	ldrh	r2, [r3, #0]
 800e87c:	4b09      	ldr	r3, [pc, #36]	; (800e8a4 <tcp_parseopt+0xe4>)
 800e87e:	881b      	ldrh	r3, [r3, #0]
 800e880:	429a      	cmp	r2, r3
 800e882:	d3b3      	bcc.n	800e7ec <tcp_parseopt+0x2c>
 800e884:	e004      	b.n	800e890 <tcp_parseopt+0xd0>
          return;
 800e886:	bf00      	nop
 800e888:	e002      	b.n	800e890 <tcp_parseopt+0xd0>
            return;
 800e88a:	bf00      	nop
 800e88c:	e000      	b.n	800e890 <tcp_parseopt+0xd0>
            return;
 800e88e:	bf00      	nop
      }
    }
  }
}
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	08017354 	.word	0x08017354
 800e89c:	080177b8 	.word	0x080177b8
 800e8a0:	080173a0 	.word	0x080173a0
 800e8a4:	2000d3f0 	.word	0x2000d3f0
 800e8a8:	2000d3f8 	.word	0x2000d3f8

0800e8ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <tcp_trigger_input_pcb_close+0x1c>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f043 0310 	orr.w	r3, r3, #16
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	4b03      	ldr	r3, [pc, #12]	; (800e8c8 <tcp_trigger_input_pcb_close+0x1c>)
 800e8bc:	701a      	strb	r2, [r3, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	2000d409 	.word	0x2000d409

0800e8cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00a      	beq.n	800e8f4 <tcp_route+0x28>
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	7a1b      	ldrb	r3, [r3, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d006      	beq.n	800e8f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	7a1b      	ldrb	r3, [r3, #8]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fb fb10 	bl	8009f10 <netif_get_by_index>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	e003      	b.n	800e8fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f005 f80b 	bl	8013910 <ip4_route>
 800e8fa:	4603      	mov	r3, r0
  }
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b087      	sub	sp, #28
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	4613      	mov	r3, r2
 800e912:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d105      	bne.n	800e926 <tcp_create_segment+0x22>
 800e91a:	4b44      	ldr	r3, [pc, #272]	; (800ea2c <tcp_create_segment+0x128>)
 800e91c:	22a3      	movs	r2, #163	; 0xa3
 800e91e:	4944      	ldr	r1, [pc, #272]	; (800ea30 <tcp_create_segment+0x12c>)
 800e920:	4844      	ldr	r0, [pc, #272]	; (800ea34 <tcp_create_segment+0x130>)
 800e922:	f006 fbf1 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d105      	bne.n	800e938 <tcp_create_segment+0x34>
 800e92c:	4b3f      	ldr	r3, [pc, #252]	; (800ea2c <tcp_create_segment+0x128>)
 800e92e:	22a4      	movs	r2, #164	; 0xa4
 800e930:	4941      	ldr	r1, [pc, #260]	; (800ea38 <tcp_create_segment+0x134>)
 800e932:	4840      	ldr	r0, [pc, #256]	; (800ea34 <tcp_create_segment+0x130>)
 800e934:	f006 fbe8 	bl	8015108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e946:	2003      	movs	r0, #3
 800e948:	f7fa ffb2 	bl	80098b0 <memp_malloc>
 800e94c:	6138      	str	r0, [r7, #16]
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e954:	68b8      	ldr	r0, [r7, #8]
 800e956:	f7fb fe69 	bl	800a62c <pbuf_free>
    return NULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e061      	b.n	800ea22 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e964:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	891a      	ldrh	r2, [r3, #8]
 800e976:	7dfb      	ldrb	r3, [r7, #23]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d205      	bcs.n	800e98a <tcp_create_segment+0x86>
 800e97e:	4b2b      	ldr	r3, [pc, #172]	; (800ea2c <tcp_create_segment+0x128>)
 800e980:	22b0      	movs	r2, #176	; 0xb0
 800e982:	492e      	ldr	r1, [pc, #184]	; (800ea3c <tcp_create_segment+0x138>)
 800e984:	482b      	ldr	r0, [pc, #172]	; (800ea34 <tcp_create_segment+0x130>)
 800e986:	f006 fbbf 	bl	8015108 <iprintf>
  seg->len = p->tot_len - optlen;
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	891a      	ldrh	r2, [r3, #8]
 800e98e:	7dfb      	ldrb	r3, [r7, #23]
 800e990:	b29b      	uxth	r3, r3
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	b29a      	uxth	r2, r3
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e99a:	2114      	movs	r1, #20
 800e99c:	68b8      	ldr	r0, [r7, #8]
 800e99e:	f7fb fdaf 	bl	800a500 <pbuf_add_header>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d004      	beq.n	800e9b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e9a8:	6938      	ldr	r0, [r7, #16]
 800e9aa:	f7fd f8ce 	bl	800bb4a <tcp_seg_free>
    return NULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e037      	b.n	800ea22 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	8ada      	ldrh	r2, [r3, #22]
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	68dc      	ldr	r4, [r3, #12]
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	f7fa fa9b 	bl	8008f00 <lwip_htons>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8b1a      	ldrh	r2, [r3, #24]
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	68dc      	ldr	r4, [r3, #12]
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f7fa fa92 	bl	8008f00 <lwip_htons>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	68dc      	ldr	r4, [r3, #12]
 800e9e4:	6838      	ldr	r0, [r7, #0]
 800e9e6:	f7fa faa0 	bl	8008f2a <lwip_htonl>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
 800e9f0:	089b      	lsrs	r3, r3, #2
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	3305      	adds	r3, #5
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	031b      	lsls	r3, r3, #12
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	79fb      	ldrb	r3, [r7, #7]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	4313      	orrs	r3, r2
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	68dc      	ldr	r4, [r3, #12]
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7fa fa78 	bl	8008f00 <lwip_htons>
 800ea10:	4603      	mov	r3, r0
 800ea12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	749a      	strb	r2, [r3, #18]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ea20:	693b      	ldr	r3, [r7, #16]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd90      	pop	{r4, r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	080177d4 	.word	0x080177d4
 800ea30:	08017808 	.word	0x08017808
 800ea34:	08017828 	.word	0x08017828
 800ea38:	08017850 	.word	0x08017850
 800ea3c:	08017874 	.word	0x08017874

0800ea40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ea40:	b590      	push	{r4, r7, lr}
 800ea42:	b08b      	sub	sp, #44	; 0x2c
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	61fb      	str	r3, [r7, #28]
 800ea50:	2300      	movs	r3, #0
 800ea52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_split_unsent_seg+0x2c>
 800ea5e:	4b95      	ldr	r3, [pc, #596]	; (800ecb4 <tcp_split_unsent_seg+0x274>)
 800ea60:	f240 324b 	movw	r2, #843	; 0x34b
 800ea64:	4994      	ldr	r1, [pc, #592]	; (800ecb8 <tcp_split_unsent_seg+0x278>)
 800ea66:	4895      	ldr	r0, [pc, #596]	; (800ecbc <tcp_split_unsent_seg+0x27c>)
 800ea68:	f006 fb4e 	bl	8015108 <iprintf>

  useg = pcb->unsent;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ea78:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7c:	e116      	b.n	800ecac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ea7e:	887b      	ldrh	r3, [r7, #2]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d109      	bne.n	800ea98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ea84:	4b8b      	ldr	r3, [pc, #556]	; (800ecb4 <tcp_split_unsent_seg+0x274>)
 800ea86:	f240 3253 	movw	r2, #851	; 0x353
 800ea8a:	498d      	ldr	r1, [pc, #564]	; (800ecc0 <tcp_split_unsent_seg+0x280>)
 800ea8c:	488b      	ldr	r0, [pc, #556]	; (800ecbc <tcp_split_unsent_seg+0x27c>)
 800ea8e:	f006 fb3b 	bl	8015108 <iprintf>
    return ERR_VAL;
 800ea92:	f06f 0305 	mvn.w	r3, #5
 800ea96:	e109      	b.n	800ecac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	891b      	ldrh	r3, [r3, #8]
 800ea9c:	887a      	ldrh	r2, [r7, #2]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d301      	bcc.n	800eaa6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e102      	b.n	800ecac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaaa:	887a      	ldrh	r2, [r7, #2]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d906      	bls.n	800eabe <tcp_split_unsent_seg+0x7e>
 800eab0:	4b80      	ldr	r3, [pc, #512]	; (800ecb4 <tcp_split_unsent_seg+0x274>)
 800eab2:	f240 325b 	movw	r2, #859	; 0x35b
 800eab6:	4983      	ldr	r1, [pc, #524]	; (800ecc4 <tcp_split_unsent_seg+0x284>)
 800eab8:	4880      	ldr	r0, [pc, #512]	; (800ecbc <tcp_split_unsent_seg+0x27c>)
 800eaba:	f006 fb25 	bl	8015108 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	891b      	ldrh	r3, [r3, #8]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <tcp_split_unsent_seg+0x94>
 800eac6:	4b7b      	ldr	r3, [pc, #492]	; (800ecb4 <tcp_split_unsent_seg+0x274>)
 800eac8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800eacc:	497e      	ldr	r1, [pc, #504]	; (800ecc8 <tcp_split_unsent_seg+0x288>)
 800eace:	487b      	ldr	r0, [pc, #492]	; (800ecbc <tcp_split_unsent_seg+0x27c>)
 800ead0:	f006 fb1a 	bl	8015108 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	7a9b      	ldrb	r3, [r3, #10]
 800ead8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	f003 0304 	and.w	r3, r3, #4
 800eae4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	891a      	ldrh	r2, [r3, #8]
 800eaea:	887b      	ldrh	r3, [r7, #2]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800eaf0:	7bbb      	ldrb	r3, [r7, #14]
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	89bb      	ldrh	r3, [r7, #12]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eafe:	4619      	mov	r1, r3
 800eb00:	2036      	movs	r0, #54	; 0x36
 800eb02:	f7fb faaf 	bl	800a064 <pbuf_alloc>
 800eb06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f000 80b7 	beq.w	800ec7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	891a      	ldrh	r2, [r3, #8]
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	891b      	ldrh	r3, [r3, #8]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	887b      	ldrh	r3, [r7, #2]
 800eb20:	4413      	add	r3, r2
 800eb22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	6858      	ldr	r0, [r3, #4]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	18d1      	adds	r1, r2, r3
 800eb30:	897b      	ldrh	r3, [r7, #10]
 800eb32:	89ba      	ldrh	r2, [r7, #12]
 800eb34:	f7fb ff80 	bl	800aa38 <pbuf_copy_partial>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	89bb      	ldrh	r3, [r7, #12]
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	f040 809f 	bne.w	800ec82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	899b      	ldrh	r3, [r3, #12]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fa f9d7 	bl	8008f00 <lwip_htons>
 800eb52:	4603      	mov	r3, r0
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eb60:	7efb      	ldrb	r3, [r7, #27]
 800eb62:	f003 0308 	and.w	r3, r3, #8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d007      	beq.n	800eb7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eb6a:	7efb      	ldrb	r3, [r7, #27]
 800eb6c:	f023 0308 	bic.w	r3, r3, #8
 800eb70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eb72:	7ebb      	ldrb	r3, [r7, #26]
 800eb74:	f043 0308 	orr.w	r3, r3, #8
 800eb78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eb7a:	7efb      	ldrb	r3, [r7, #27]
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d007      	beq.n	800eb94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eb84:	7efb      	ldrb	r3, [r7, #27]
 800eb86:	f023 0301 	bic.w	r3, r3, #1
 800eb8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800eb8c:	7ebb      	ldrb	r3, [r7, #26]
 800eb8e:	f043 0301 	orr.w	r3, r3, #1
 800eb92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fa f9c5 	bl	8008f2a <lwip_htonl>
 800eba0:	4602      	mov	r2, r0
 800eba2:	887b      	ldrh	r3, [r7, #2]
 800eba4:	18d1      	adds	r1, r2, r3
 800eba6:	7eba      	ldrb	r2, [r7, #26]
 800eba8:	7bfb      	ldrb	r3, [r7, #15]
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	460b      	mov	r3, r1
 800ebae:	6939      	ldr	r1, [r7, #16]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff fea7 	bl	800e904 <tcp_create_segment>
 800ebb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d063      	beq.n	800ec86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fb fdc0 	bl	800a748 <pbuf_clen>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	6858      	ldr	r0, [r3, #4]
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	891a      	ldrh	r2, [r3, #8]
 800ebe6:	89bb      	ldrh	r3, [r7, #12]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	4619      	mov	r1, r3
 800ebee:	f7fb fb97 	bl	800a320 <pbuf_realloc>
  useg->len -= remainder;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	891a      	ldrh	r2, [r3, #8]
 800ebf6:	89bb      	ldrh	r3, [r7, #12]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	899b      	ldrh	r3, [r3, #12]
 800ec06:	b29c      	uxth	r4, r3
 800ec08:	7efb      	ldrb	r3, [r7, #27]
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fa f977 	bl	8008f00 <lwip_htons>
 800ec12:	4603      	mov	r3, r0
 800ec14:	461a      	mov	r2, r3
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	4322      	orrs	r2, r4
 800ec1c:	b292      	uxth	r2, r2
 800ec1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fb fd8f 	bl	800a748 <pbuf_clen>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec34:	4413      	add	r3, r2
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fb fd80 	bl	800a748 <pbuf_clen>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec52:	4413      	add	r3, r2
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	69fa      	ldr	r2, [r7, #28]
 800ec68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d103      	bne.n	800ec7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e016      	b.n	800ecac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ec7e:	bf00      	nop
 800ec80:	e002      	b.n	800ec88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ec82:	bf00      	nop
 800ec84:	e000      	b.n	800ec88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ec86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d006      	beq.n	800ec9c <tcp_split_unsent_seg+0x25c>
 800ec8e:	4b09      	ldr	r3, [pc, #36]	; (800ecb4 <tcp_split_unsent_seg+0x274>)
 800ec90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ec94:	490d      	ldr	r1, [pc, #52]	; (800eccc <tcp_split_unsent_seg+0x28c>)
 800ec96:	4809      	ldr	r0, [pc, #36]	; (800ecbc <tcp_split_unsent_seg+0x27c>)
 800ec98:	f006 fa36 	bl	8015108 <iprintf>
  if (p != NULL) {
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800eca2:	6938      	ldr	r0, [r7, #16]
 800eca4:	f7fb fcc2 	bl	800a62c <pbuf_free>
  }

  return ERR_MEM;
 800eca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3724      	adds	r7, #36	; 0x24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd90      	pop	{r4, r7, pc}
 800ecb4:	080177d4 	.word	0x080177d4
 800ecb8:	08017b68 	.word	0x08017b68
 800ecbc:	08017828 	.word	0x08017828
 800ecc0:	08017b8c 	.word	0x08017b8c
 800ecc4:	08017bb0 	.word	0x08017bb0
 800ecc8:	08017bc0 	.word	0x08017bc0
 800eccc:	08017bd0 	.word	0x08017bd0

0800ecd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ecd0:	b590      	push	{r4, r7, lr}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <tcp_send_fin+0x1c>
 800ecde:	4b21      	ldr	r3, [pc, #132]	; (800ed64 <tcp_send_fin+0x94>)
 800ece0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ece4:	4920      	ldr	r1, [pc, #128]	; (800ed68 <tcp_send_fin+0x98>)
 800ece6:	4821      	ldr	r0, [pc, #132]	; (800ed6c <tcp_send_fin+0x9c>)
 800ece8:	f006 fa0e 	bl	8015108 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d02e      	beq.n	800ed52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecf8:	60fb      	str	r3, [r7, #12]
 800ecfa:	e002      	b.n	800ed02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f8      	bne.n	800ecfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	899b      	ldrh	r3, [r3, #12]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fa f8f4 	bl	8008f00 <lwip_htons>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	f003 0307 	and.w	r3, r3, #7
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d116      	bne.n	800ed52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	899b      	ldrh	r3, [r3, #12]
 800ed2a:	b29c      	uxth	r4, r3
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	f7fa f8e7 	bl	8008f00 <lwip_htons>
 800ed32:	4603      	mov	r3, r0
 800ed34:	461a      	mov	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	4322      	orrs	r2, r4
 800ed3c:	b292      	uxth	r2, r2
 800ed3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	8b5b      	ldrh	r3, [r3, #26]
 800ed44:	f043 0320 	orr.w	r3, r3, #32
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e004      	b.n	800ed5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ed52:	2101      	movs	r1, #1
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f80b 	bl	800ed70 <tcp_enqueue_flags>
 800ed5a:	4603      	mov	r3, r0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd90      	pop	{r4, r7, pc}
 800ed64:	080177d4 	.word	0x080177d4
 800ed68:	08017bdc 	.word	0x08017bdc
 800ed6c:	08017828 	.word	0x08017828

0800ed70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	; 0x28
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	f003 0303 	and.w	r3, r3, #3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d106      	bne.n	800ed9c <tcp_enqueue_flags+0x2c>
 800ed8e:	4b67      	ldr	r3, [pc, #412]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800ed90:	f240 4211 	movw	r2, #1041	; 0x411
 800ed94:	4966      	ldr	r1, [pc, #408]	; (800ef30 <tcp_enqueue_flags+0x1c0>)
 800ed96:	4867      	ldr	r0, [pc, #412]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800ed98:	f006 f9b6 	bl	8015108 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <tcp_enqueue_flags+0x40>
 800eda2:	4b62      	ldr	r3, [pc, #392]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800eda4:	f240 4213 	movw	r2, #1043	; 0x413
 800eda8:	4963      	ldr	r1, [pc, #396]	; (800ef38 <tcp_enqueue_flags+0x1c8>)
 800edaa:	4862      	ldr	r0, [pc, #392]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800edac:	f006 f9ac 	bl	8015108 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	f003 0302 	and.w	r3, r3, #2
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d001      	beq.n	800edbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800edba:	2301      	movs	r3, #1
 800edbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800edbe:	7ffb      	ldrb	r3, [r7, #31]
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	b29b      	uxth	r3, r3
 800edce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edd2:	4619      	mov	r1, r3
 800edd4:	2036      	movs	r0, #54	; 0x36
 800edd6:	f7fb f945 	bl	800a064 <pbuf_alloc>
 800edda:	6138      	str	r0, [r7, #16]
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d109      	bne.n	800edf6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	8b5b      	ldrh	r3, [r3, #26]
 800ede6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edea:	b29a      	uxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800edf0:	f04f 33ff 	mov.w	r3, #4294967295
 800edf4:	e095      	b.n	800ef22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	895a      	ldrh	r2, [r3, #10]
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d206      	bcs.n	800ee10 <tcp_enqueue_flags+0xa0>
 800ee02:	4b4a      	ldr	r3, [pc, #296]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800ee04:	f240 4239 	movw	r2, #1081	; 0x439
 800ee08:	494c      	ldr	r1, [pc, #304]	; (800ef3c <tcp_enqueue_flags+0x1cc>)
 800ee0a:	484a      	ldr	r0, [pc, #296]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800ee0c:	f006 f97c 	bl	8015108 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ee14:	78fa      	ldrb	r2, [r7, #3]
 800ee16:	7ffb      	ldrb	r3, [r7, #31]
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	6939      	ldr	r1, [r7, #16]
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fd70 	bl	800e904 <tcp_create_segment>
 800ee24:	60f8      	str	r0, [r7, #12]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d109      	bne.n	800ee40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	8b5b      	ldrh	r3, [r3, #26]
 800ee30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ee3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3e:	e070      	b.n	800ef22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	f003 0303 	and.w	r3, r3, #3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d006      	beq.n	800ee5a <tcp_enqueue_flags+0xea>
 800ee4c:	4b37      	ldr	r3, [pc, #220]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800ee4e:	f240 4242 	movw	r2, #1090	; 0x442
 800ee52:	493b      	ldr	r1, [pc, #236]	; (800ef40 <tcp_enqueue_flags+0x1d0>)
 800ee54:	4837      	ldr	r0, [pc, #220]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800ee56:	f006 f957 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	891b      	ldrh	r3, [r3, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d006      	beq.n	800ee70 <tcp_enqueue_flags+0x100>
 800ee62:	4b32      	ldr	r3, [pc, #200]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800ee64:	f240 4243 	movw	r2, #1091	; 0x443
 800ee68:	4936      	ldr	r1, [pc, #216]	; (800ef44 <tcp_enqueue_flags+0x1d4>)
 800ee6a:	4832      	ldr	r0, [pc, #200]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800ee6c:	f006 f94c 	bl	8015108 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d103      	bne.n	800ee80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68fa      	ldr	r2, [r7, #12]
 800ee7c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ee7e:	e00d      	b.n	800ee9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee84:	61bb      	str	r3, [r7, #24]
 800ee86:	e002      	b.n	800ee8e <tcp_enqueue_flags+0x11e>
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	61bb      	str	r3, [r7, #24]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1f8      	bne.n	800ee88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	f003 0302 	and.w	r3, r3, #2
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d104      	bne.n	800eeb8 <tcp_enqueue_flags+0x148>
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	f003 0301 	and.w	r3, r3, #1
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d004      	beq.n	800eec2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800eec2:	78fb      	ldrb	r3, [r7, #3]
 800eec4:	f003 0301 	and.w	r3, r3, #1
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d006      	beq.n	800eeda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	8b5b      	ldrh	r3, [r3, #26]
 800eed0:	f043 0320 	orr.w	r3, r3, #32
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fb fc32 	bl	800a748 <pbuf_clen>
 800eee4:	4603      	mov	r3, r0
 800eee6:	461a      	mov	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eeee:	4413      	add	r3, r2
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00e      	beq.n	800ef20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <tcp_enqueue_flags+0x1b0>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <tcp_enqueue_flags+0x1b0>
 800ef12:	4b06      	ldr	r3, [pc, #24]	; (800ef2c <tcp_enqueue_flags+0x1bc>)
 800ef14:	f240 4265 	movw	r2, #1125	; 0x465
 800ef18:	490b      	ldr	r1, [pc, #44]	; (800ef48 <tcp_enqueue_flags+0x1d8>)
 800ef1a:	4806      	ldr	r0, [pc, #24]	; (800ef34 <tcp_enqueue_flags+0x1c4>)
 800ef1c:	f006 f8f4 	bl	8015108 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3720      	adds	r7, #32
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	080177d4 	.word	0x080177d4
 800ef30:	08017bf8 	.word	0x08017bf8
 800ef34:	08017828 	.word	0x08017828
 800ef38:	08017c50 	.word	0x08017c50
 800ef3c:	08017c70 	.word	0x08017c70
 800ef40:	08017cac 	.word	0x08017cac
 800ef44:	08017cc4 	.word	0x08017cc4
 800ef48:	08017cf0 	.word	0x08017cf0

0800ef4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ef4c:	b5b0      	push	{r4, r5, r7, lr}
 800ef4e:	b08a      	sub	sp, #40	; 0x28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <tcp_output+0x1c>
 800ef5a:	4b8a      	ldr	r3, [pc, #552]	; (800f184 <tcp_output+0x238>)
 800ef5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ef60:	4989      	ldr	r1, [pc, #548]	; (800f188 <tcp_output+0x23c>)
 800ef62:	488a      	ldr	r0, [pc, #552]	; (800f18c <tcp_output+0x240>)
 800ef64:	f006 f8d0 	bl	8015108 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7d1b      	ldrb	r3, [r3, #20]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d106      	bne.n	800ef7e <tcp_output+0x32>
 800ef70:	4b84      	ldr	r3, [pc, #528]	; (800f184 <tcp_output+0x238>)
 800ef72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ef76:	4986      	ldr	r1, [pc, #536]	; (800f190 <tcp_output+0x244>)
 800ef78:	4884      	ldr	r0, [pc, #528]	; (800f18c <tcp_output+0x240>)
 800ef7a:	f006 f8c5 	bl	8015108 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ef7e:	4b85      	ldr	r3, [pc, #532]	; (800f194 <tcp_output+0x248>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d101      	bne.n	800ef8c <tcp_output+0x40>
    return ERR_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	e1ce      	b.n	800f32a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	bf28      	it	cs
 800ef9c:	4613      	movcs	r3, r2
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10b      	bne.n	800efc6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	8b5b      	ldrh	r3, [r3, #26]
 800efb2:	f003 0302 	and.w	r3, r3, #2
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 81aa 	beq.w	800f310 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fdcb 	bl	800fb58 <tcp_send_empty_ack>
 800efc2:	4603      	mov	r3, r0
 800efc4:	e1b1      	b.n	800f32a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800efc6:	6879      	ldr	r1, [r7, #4]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3304      	adds	r3, #4
 800efcc:	461a      	mov	r2, r3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff fc7c 	bl	800e8cc <tcp_route>
 800efd4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d102      	bne.n	800efe2 <tcp_output+0x96>
    return ERR_RTE;
 800efdc:	f06f 0303 	mvn.w	r3, #3
 800efe0:	e1a3      	b.n	800f32a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d003      	beq.n	800eff0 <tcp_output+0xa4>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d111      	bne.n	800f014 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d002      	beq.n	800effc <tcp_output+0xb0>
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	3304      	adds	r3, #4
 800effa:	e000      	b.n	800effe <tcp_output+0xb2>
 800effc:	2300      	movs	r3, #0
 800effe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d102      	bne.n	800f00c <tcp_output+0xc0>
      return ERR_RTE;
 800f006:	f06f 0303 	mvn.w	r3, #3
 800f00a:	e18e      	b.n	800f32a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f9 ff85 	bl	8008f2a <lwip_htonl>
 800f020:	4602      	mov	r2, r0
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02a:	8912      	ldrh	r2, [r2, #8]
 800f02c:	4413      	add	r3, r2
 800f02e:	69ba      	ldr	r2, [r7, #24]
 800f030:	429a      	cmp	r2, r3
 800f032:	d227      	bcs.n	800f084 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f03a:	461a      	mov	r2, r3
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	4293      	cmp	r3, r2
 800f040:	d114      	bne.n	800f06c <tcp_output+0x120>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f046:	2b00      	cmp	r3, #0
 800f048:	d110      	bne.n	800f06c <tcp_output+0x120>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10b      	bne.n	800f06c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	8b5b      	ldrh	r3, [r3, #26]
 800f070:	f003 0302 	and.w	r3, r3, #2
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 814d 	beq.w	800f314 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 fd6c 	bl	800fb58 <tcp_send_empty_ack>
 800f080:	4603      	mov	r3, r0
 800f082:	e152      	b.n	800f32a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f090:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f092:	6a3b      	ldr	r3, [r7, #32]
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 811c 	beq.w	800f2d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f09a:	e002      	b.n	800f0a2 <tcp_output+0x156>
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	623b      	str	r3, [r7, #32]
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1f8      	bne.n	800f09c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f0aa:	e112      	b.n	800f2d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	899b      	ldrh	r3, [r3, #12]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f9 ff23 	bl	8008f00 <lwip_htons>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	f003 0304 	and.w	r3, r3, #4
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d006      	beq.n	800f0d4 <tcp_output+0x188>
 800f0c6:	4b2f      	ldr	r3, [pc, #188]	; (800f184 <tcp_output+0x238>)
 800f0c8:	f240 5236 	movw	r2, #1334	; 0x536
 800f0cc:	4932      	ldr	r1, [pc, #200]	; (800f198 <tcp_output+0x24c>)
 800f0ce:	482f      	ldr	r0, [pc, #188]	; (800f18c <tcp_output+0x240>)
 800f0d0:	f006 f81a 	bl	8015108 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d01f      	beq.n	800f11c <tcp_output+0x1d0>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	8b5b      	ldrh	r3, [r3, #26]
 800f0e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d119      	bne.n	800f11c <tcp_output+0x1d0>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00b      	beq.n	800f108 <tcp_output+0x1bc>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d110      	bne.n	800f11c <tcp_output+0x1d0>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fe:	891a      	ldrh	r2, [r3, #8]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f104:	429a      	cmp	r2, r3
 800f106:	d209      	bcs.n	800f11c <tcp_output+0x1d0>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d004      	beq.n	800f11c <tcp_output+0x1d0>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f118:	2b08      	cmp	r3, #8
 800f11a:	d901      	bls.n	800f120 <tcp_output+0x1d4>
 800f11c:	2301      	movs	r3, #1
 800f11e:	e000      	b.n	800f122 <tcp_output+0x1d6>
 800f120:	2300      	movs	r3, #0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d106      	bne.n	800f134 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8b5b      	ldrh	r3, [r3, #26]
 800f12a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 80e4 	beq.w	800f2fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7d1b      	ldrb	r3, [r3, #20]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d00d      	beq.n	800f158 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	899b      	ldrh	r3, [r3, #12]
 800f142:	b29c      	uxth	r4, r3
 800f144:	2010      	movs	r0, #16
 800f146:	f7f9 fedb 	bl	8008f00 <lwip_htons>
 800f14a:	4603      	mov	r3, r0
 800f14c:	461a      	mov	r2, r3
 800f14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	4322      	orrs	r2, r4
 800f154:	b292      	uxth	r2, r2
 800f156:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f15e:	f000 f909 	bl	800f374 <tcp_output_segment>
 800f162:	4603      	mov	r3, r0
 800f164:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d016      	beq.n	800f19c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8b5b      	ldrh	r3, [r3, #26]
 800f172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f176:	b29a      	uxth	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	835a      	strh	r2, [r3, #26]
      return err;
 800f17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f180:	e0d3      	b.n	800f32a <tcp_output+0x3de>
 800f182:	bf00      	nop
 800f184:	080177d4 	.word	0x080177d4
 800f188:	08017d18 	.word	0x08017d18
 800f18c:	08017828 	.word	0x08017828
 800f190:	08017d30 	.word	0x08017d30
 800f194:	2000d410 	.word	0x2000d410
 800f198:	08017d58 	.word	0x08017d58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	7d1b      	ldrb	r3, [r3, #20]
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d006      	beq.n	800f1ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	8b5b      	ldrh	r3, [r3, #26]
 800f1b0:	f023 0303 	bic.w	r3, r3, #3
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7f9 feb2 	bl	8008f2a <lwip_htonl>
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	891b      	ldrh	r3, [r3, #8]
 800f1cc:	461d      	mov	r5, r3
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	899b      	ldrh	r3, [r3, #12]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7f9 fe92 	bl	8008f00 <lwip_htons>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <tcp_output+0x2a0>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e000      	b.n	800f1ee <tcp_output+0x2a2>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	442b      	add	r3, r5
 800f1f0:	4423      	add	r3, r4
 800f1f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	da02      	bge.n	800f206 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	891b      	ldrh	r3, [r3, #8]
 800f20a:	461c      	mov	r4, r3
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	899b      	ldrh	r3, [r3, #12]
 800f212:	b29b      	uxth	r3, r3
 800f214:	4618      	mov	r0, r3
 800f216:	f7f9 fe73 	bl	8008f00 <lwip_htons>
 800f21a:	4603      	mov	r3, r0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <tcp_output+0x2de>
 800f226:	2301      	movs	r3, #1
 800f228:	e000      	b.n	800f22c <tcp_output+0x2e0>
 800f22a:	2300      	movs	r3, #0
 800f22c:	4423      	add	r3, r4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d049      	beq.n	800f2c6 <tcp_output+0x37a>
      seg->next = NULL;
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d105      	bne.n	800f24c <tcp_output+0x300>
        pcb->unacked = seg;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f244:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	623b      	str	r3, [r7, #32]
 800f24a:	e03f      	b.n	800f2cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	4618      	mov	r0, r3
 800f254:	f7f9 fe69 	bl	8008f2a <lwip_htonl>
 800f258:	4604      	mov	r4, r0
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	f7f9 fe62 	bl	8008f2a <lwip_htonl>
 800f266:	4603      	mov	r3, r0
 800f268:	1ae3      	subs	r3, r4, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	da24      	bge.n	800f2b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	3370      	adds	r3, #112	; 0x70
 800f272:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f274:	e002      	b.n	800f27c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d011      	beq.n	800f2a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7f9 fe4c 	bl	8008f2a <lwip_htonl>
 800f292:	4604      	mov	r4, r0
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f9 fe45 	bl	8008f2a <lwip_htonl>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dbe6      	blt.n	800f276 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	e009      	b.n	800f2cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f2b8:	6a3b      	ldr	r3, [r7, #32]
 800f2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f2be:	6a3b      	ldr	r3, [r7, #32]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	623b      	str	r3, [r7, #32]
 800f2c4:	e002      	b.n	800f2cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2c8:	f7fc fc3f 	bl	800bb4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d012      	beq.n	800f2fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7f9 fe23 	bl	8008f2a <lwip_htonl>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2ee:	8912      	ldrh	r2, [r2, #8]
 800f2f0:	4413      	add	r3, r2
  while (seg != NULL &&
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	f4bf aed9 	bcs.w	800f0ac <tcp_output+0x160>
 800f2fa:	e000      	b.n	800f2fe <tcp_output+0x3b2>
      break;
 800f2fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f302:	2b00      	cmp	r3, #0
 800f304:	d108      	bne.n	800f318 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f30e:	e004      	b.n	800f31a <tcp_output+0x3ce>
    goto output_done;
 800f310:	bf00      	nop
 800f312:	e002      	b.n	800f31a <tcp_output+0x3ce>
    goto output_done;
 800f314:	bf00      	nop
 800f316:	e000      	b.n	800f31a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f318:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	8b5b      	ldrh	r3, [r3, #26]
 800f31e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f322:	b29a      	uxth	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3728      	adds	r7, #40	; 0x28
 800f32e:	46bd      	mov	sp, r7
 800f330:	bdb0      	pop	{r4, r5, r7, pc}
 800f332:	bf00      	nop

0800f334 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d106      	bne.n	800f350 <tcp_output_segment_busy+0x1c>
 800f342:	4b09      	ldr	r3, [pc, #36]	; (800f368 <tcp_output_segment_busy+0x34>)
 800f344:	f240 529a 	movw	r2, #1434	; 0x59a
 800f348:	4908      	ldr	r1, [pc, #32]	; (800f36c <tcp_output_segment_busy+0x38>)
 800f34a:	4809      	ldr	r0, [pc, #36]	; (800f370 <tcp_output_segment_busy+0x3c>)
 800f34c:	f005 fedc 	bl	8015108 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	7b9b      	ldrb	r3, [r3, #14]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d001      	beq.n	800f35e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	080177d4 	.word	0x080177d4
 800f36c:	08017d70 	.word	0x08017d70
 800f370:	08017828 	.word	0x08017828

0800f374 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f374:	b5b0      	push	{r4, r5, r7, lr}
 800f376:	b08c      	sub	sp, #48	; 0x30
 800f378:	af04      	add	r7, sp, #16
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <tcp_output_segment+0x20>
 800f386:	4b64      	ldr	r3, [pc, #400]	; (800f518 <tcp_output_segment+0x1a4>)
 800f388:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f38c:	4963      	ldr	r1, [pc, #396]	; (800f51c <tcp_output_segment+0x1a8>)
 800f38e:	4864      	ldr	r0, [pc, #400]	; (800f520 <tcp_output_segment+0x1ac>)
 800f390:	f005 feba 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d106      	bne.n	800f3a8 <tcp_output_segment+0x34>
 800f39a:	4b5f      	ldr	r3, [pc, #380]	; (800f518 <tcp_output_segment+0x1a4>)
 800f39c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f3a0:	4960      	ldr	r1, [pc, #384]	; (800f524 <tcp_output_segment+0x1b0>)
 800f3a2:	485f      	ldr	r0, [pc, #380]	; (800f520 <tcp_output_segment+0x1ac>)
 800f3a4:	f005 feb0 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d106      	bne.n	800f3bc <tcp_output_segment+0x48>
 800f3ae:	4b5a      	ldr	r3, [pc, #360]	; (800f518 <tcp_output_segment+0x1a4>)
 800f3b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f3b4:	495c      	ldr	r1, [pc, #368]	; (800f528 <tcp_output_segment+0x1b4>)
 800f3b6:	485a      	ldr	r0, [pc, #360]	; (800f520 <tcp_output_segment+0x1ac>)
 800f3b8:	f005 fea6 	bl	8015108 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f7ff ffb9 	bl	800f334 <tcp_output_segment_busy>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e0a1      	b.n	800f510 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	68dc      	ldr	r4, [r3, #12]
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	f7f9 fda8 	bl	8008f2a <lwip_htonl>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	68dc      	ldr	r4, [r3, #12]
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	f7f9 fd8a 	bl	8008f00 <lwip_htons>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f3f8:	441a      	add	r2, r3
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	3314      	adds	r3, #20
 800f404:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	7a9b      	ldrb	r3, [r3, #10]
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d015      	beq.n	800f43e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	461a      	mov	r2, r3
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f41e:	f7fc fe8b 	bl	800c138 <tcp_eff_send_mss_netif>
 800f422:	4603      	mov	r3, r0
 800f424:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f426:	8b7b      	ldrh	r3, [r7, #26]
 800f428:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f9 fd7c 	bl	8008f2a <lwip_htonl>
 800f432:	4602      	mov	r2, r0
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	3304      	adds	r3, #4
 800f43c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f444:	2b00      	cmp	r3, #0
 800f446:	da02      	bge.n	800f44e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2200      	movs	r2, #0
 800f44c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f452:	2b00      	cmp	r3, #0
 800f454:	d10c      	bne.n	800f470 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f456:	4b35      	ldr	r3, [pc, #212]	; (800f52c <tcp_output_segment+0x1b8>)
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	f7f9 fd60 	bl	8008f2a <lwip_htonl>
 800f46a:	4602      	mov	r2, r0
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	68da      	ldr	r2, [r3, #12]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	8959      	ldrh	r1, [r3, #10]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	8b3a      	ldrh	r2, [r7, #24]
 800f48a:	1a8a      	subs	r2, r1, r2
 800f48c:	b292      	uxth	r2, r2
 800f48e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	8919      	ldrh	r1, [r3, #8]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	8b3a      	ldrh	r2, [r7, #24]
 800f49c:	1a8a      	subs	r2, r1, r2
 800f49e:	b292      	uxth	r2, r2
 800f4a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	68d2      	ldr	r2, [r2, #12]
 800f4aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	741a      	strb	r2, [r3, #16]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	68da      	ldr	r2, [r3, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	7a9b      	ldrb	r3, [r3, #10]
 800f4c0:	f003 0301 	and.w	r3, r3, #1
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <tcp_output_segment+0x158>
 800f4c8:	2318      	movs	r3, #24
 800f4ca:	e000      	b.n	800f4ce <tcp_output_segment+0x15a>
 800f4cc:	2314      	movs	r3, #20
 800f4ce:	4413      	add	r3, r2
 800f4d0:	69fa      	ldr	r2, [r7, #28]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d006      	beq.n	800f4e4 <tcp_output_segment+0x170>
 800f4d6:	4b10      	ldr	r3, [pc, #64]	; (800f518 <tcp_output_segment+0x1a4>)
 800f4d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800f4dc:	4914      	ldr	r1, [pc, #80]	; (800f530 <tcp_output_segment+0x1bc>)
 800f4de:	4810      	ldr	r0, [pc, #64]	; (800f520 <tcp_output_segment+0x1ac>)
 800f4e0:	f005 fe12 	bl	8015108 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6858      	ldr	r0, [r3, #4]
 800f4e8:	68b9      	ldr	r1, [r7, #8]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	1d1c      	adds	r4, r3, #4
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	7add      	ldrb	r5, [r3, #11]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	7a9b      	ldrb	r3, [r3, #10]
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	9202      	str	r2, [sp, #8]
 800f4fa:	2206      	movs	r2, #6
 800f4fc:	9201      	str	r2, [sp, #4]
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	462b      	mov	r3, r5
 800f502:	4622      	mov	r2, r4
 800f504:	f004 fbe0 	bl	8013cc8 <ip4_output_if>
 800f508:	4603      	mov	r3, r0
 800f50a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3720      	adds	r7, #32
 800f514:	46bd      	mov	sp, r7
 800f516:	bdb0      	pop	{r4, r5, r7, pc}
 800f518:	080177d4 	.word	0x080177d4
 800f51c:	08017d98 	.word	0x08017d98
 800f520:	08017828 	.word	0x08017828
 800f524:	08017db8 	.word	0x08017db8
 800f528:	08017dd8 	.word	0x08017dd8
 800f52c:	2000d3c4 	.word	0x2000d3c4
 800f530:	08017dfc 	.word	0x08017dfc

0800f534 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f534:	b5b0      	push	{r4, r5, r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <tcp_rexmit_rto_prepare+0x1c>
 800f542:	4b31      	ldr	r3, [pc, #196]	; (800f608 <tcp_rexmit_rto_prepare+0xd4>)
 800f544:	f240 6263 	movw	r2, #1635	; 0x663
 800f548:	4930      	ldr	r1, [pc, #192]	; (800f60c <tcp_rexmit_rto_prepare+0xd8>)
 800f54a:	4831      	ldr	r0, [pc, #196]	; (800f610 <tcp_rexmit_rto_prepare+0xdc>)
 800f54c:	f005 fddc 	bl	8015108 <iprintf>

  if (pcb->unacked == NULL) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f554:	2b00      	cmp	r3, #0
 800f556:	d102      	bne.n	800f55e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f558:	f06f 0305 	mvn.w	r3, #5
 800f55c:	e050      	b.n	800f600 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	e00b      	b.n	800f57e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f7ff fee4 	bl	800f334 <tcp_output_segment_busy>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d002      	beq.n	800f578 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f572:	f06f 0305 	mvn.w	r3, #5
 800f576:	e043      	b.n	800f600 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1ef      	bne.n	800f566 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f7ff fed4 	bl	800f334 <tcp_output_segment_busy>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f592:	f06f 0305 	mvn.w	r3, #5
 800f596:	e033      	b.n	800f600 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	8b5b      	ldrh	r3, [r3, #26]
 800f5b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f9 fcb1 	bl	8008f2a <lwip_htonl>
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	891b      	ldrh	r3, [r3, #8]
 800f5ce:	461d      	mov	r5, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	899b      	ldrh	r3, [r3, #12]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7f9 fc91 	bl	8008f00 <lwip_htons>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <tcp_rexmit_rto_prepare+0xba>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e000      	b.n	800f5f0 <tcp_rexmit_rto_prepare+0xbc>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	442b      	add	r3, r5
 800f5f2:	18e2      	adds	r2, r4, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bdb0      	pop	{r4, r5, r7, pc}
 800f608:	080177d4 	.word	0x080177d4
 800f60c:	08017e10 	.word	0x08017e10
 800f610:	08017828 	.word	0x08017828

0800f614 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d106      	bne.n	800f630 <tcp_rexmit_rto_commit+0x1c>
 800f622:	4b0d      	ldr	r3, [pc, #52]	; (800f658 <tcp_rexmit_rto_commit+0x44>)
 800f624:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f628:	490c      	ldr	r1, [pc, #48]	; (800f65c <tcp_rexmit_rto_commit+0x48>)
 800f62a:	480d      	ldr	r0, [pc, #52]	; (800f660 <tcp_rexmit_rto_commit+0x4c>)
 800f62c:	f005 fd6c 	bl	8015108 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f636:	2bff      	cmp	r3, #255	; 0xff
 800f638:	d007      	beq.n	800f64a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f640:	3301      	adds	r3, #1
 800f642:	b2da      	uxtb	r2, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff fc7e 	bl	800ef4c <tcp_output>
}
 800f650:	bf00      	nop
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	080177d4 	.word	0x080177d4
 800f65c:	08017e34 	.word	0x08017e34
 800f660:	08017828 	.word	0x08017828

0800f664 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <tcp_rexmit_rto+0x1c>
 800f672:	4b0a      	ldr	r3, [pc, #40]	; (800f69c <tcp_rexmit_rto+0x38>)
 800f674:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f678:	4909      	ldr	r1, [pc, #36]	; (800f6a0 <tcp_rexmit_rto+0x3c>)
 800f67a:	480a      	ldr	r0, [pc, #40]	; (800f6a4 <tcp_rexmit_rto+0x40>)
 800f67c:	f005 fd44 	bl	8015108 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff ff57 	bl	800f534 <tcp_rexmit_rto_prepare>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d102      	bne.n	800f692 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff ffc1 	bl	800f614 <tcp_rexmit_rto_commit>
  }
}
 800f692:	bf00      	nop
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	080177d4 	.word	0x080177d4
 800f6a0:	08017e58 	.word	0x08017e58
 800f6a4:	08017828 	.word	0x08017828

0800f6a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d106      	bne.n	800f6c4 <tcp_rexmit+0x1c>
 800f6b6:	4b2f      	ldr	r3, [pc, #188]	; (800f774 <tcp_rexmit+0xcc>)
 800f6b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f6bc:	492e      	ldr	r1, [pc, #184]	; (800f778 <tcp_rexmit+0xd0>)
 800f6be:	482f      	ldr	r0, [pc, #188]	; (800f77c <tcp_rexmit+0xd4>)
 800f6c0:	f005 fd22 	bl	8015108 <iprintf>

  if (pcb->unacked == NULL) {
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d102      	bne.n	800f6d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f6cc:	f06f 0305 	mvn.w	r3, #5
 800f6d0:	e04c      	b.n	800f76c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f6d8:	68b8      	ldr	r0, [r7, #8]
 800f6da:	f7ff fe2b 	bl	800f334 <tcp_output_segment_busy>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f6e4:	f06f 0305 	mvn.w	r3, #5
 800f6e8:	e040      	b.n	800f76c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	336c      	adds	r3, #108	; 0x6c
 800f6f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f6f8:	e002      	b.n	800f700 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d011      	beq.n	800f72c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4618      	mov	r0, r3
 800f712:	f7f9 fc0a 	bl	8008f2a <lwip_htonl>
 800f716:	4604      	mov	r4, r0
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7f9 fc03 	bl	8008f2a <lwip_htonl>
 800f724:	4603      	mov	r3, r0
 800f726:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f728:	2b00      	cmp	r3, #0
 800f72a:	dbe6      	blt.n	800f6fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	68ba      	ldr	r2, [r7, #8]
 800f738:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d103      	bne.n	800f74a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f750:	2bff      	cmp	r3, #255	; 0xff
 800f752:	d007      	beq.n	800f764 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f75a:	3301      	adds	r3, #1
 800f75c:	b2da      	uxtb	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f76a:	2300      	movs	r3, #0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	bd90      	pop	{r4, r7, pc}
 800f774:	080177d4 	.word	0x080177d4
 800f778:	08017e74 	.word	0x08017e74
 800f77c:	08017828 	.word	0x08017828

0800f780 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <tcp_rexmit_fast+0x1c>
 800f78e:	4b2a      	ldr	r3, [pc, #168]	; (800f838 <tcp_rexmit_fast+0xb8>)
 800f790:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f794:	4929      	ldr	r1, [pc, #164]	; (800f83c <tcp_rexmit_fast+0xbc>)
 800f796:	482a      	ldr	r0, [pc, #168]	; (800f840 <tcp_rexmit_fast+0xc0>)
 800f798:	f005 fcb6 	bl	8015108 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d045      	beq.n	800f830 <tcp_rexmit_fast+0xb0>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8b5b      	ldrh	r3, [r3, #26]
 800f7a8:	f003 0304 	and.w	r3, r3, #4
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d13f      	bne.n	800f830 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff ff79 	bl	800f6a8 <tcp_rexmit>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d139      	bne.n	800f830 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	bf28      	it	cs
 800f7cc:	4613      	movcs	r3, r2
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	da00      	bge.n	800f7d6 <tcp_rexmit_fast+0x56>
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	105b      	asrs	r3, r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d206      	bcs.n	800f800 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f80a:	4619      	mov	r1, r3
 800f80c:	0049      	lsls	r1, r1, #1
 800f80e:	440b      	add	r3, r1
 800f810:	b29b      	uxth	r3, r3
 800f812:	4413      	add	r3, r2
 800f814:	b29a      	uxth	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	8b5b      	ldrh	r3, [r3, #26]
 800f820:	f043 0304 	orr.w	r3, r3, #4
 800f824:	b29a      	uxth	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	080177d4 	.word	0x080177d4
 800f83c:	08017e8c 	.word	0x08017e8c
 800f840:	08017828 	.word	0x08017828

0800f844 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	607b      	str	r3, [r7, #4]
 800f84e:	460b      	mov	r3, r1
 800f850:	817b      	strh	r3, [r7, #10]
 800f852:	4613      	mov	r3, r2
 800f854:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f856:	897a      	ldrh	r2, [r7, #10]
 800f858:	893b      	ldrh	r3, [r7, #8]
 800f85a:	4413      	add	r3, r2
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	3314      	adds	r3, #20
 800f860:	b29b      	uxth	r3, r3
 800f862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f866:	4619      	mov	r1, r3
 800f868:	2022      	movs	r0, #34	; 0x22
 800f86a:	f7fa fbfb 	bl	800a064 <pbuf_alloc>
 800f86e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d04d      	beq.n	800f912 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f876:	897b      	ldrh	r3, [r7, #10]
 800f878:	3313      	adds	r3, #19
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	8952      	ldrh	r2, [r2, #10]
 800f87e:	4293      	cmp	r3, r2
 800f880:	db06      	blt.n	800f890 <tcp_output_alloc_header_common+0x4c>
 800f882:	4b26      	ldr	r3, [pc, #152]	; (800f91c <tcp_output_alloc_header_common+0xd8>)
 800f884:	f240 7223 	movw	r2, #1827	; 0x723
 800f888:	4925      	ldr	r1, [pc, #148]	; (800f920 <tcp_output_alloc_header_common+0xdc>)
 800f88a:	4826      	ldr	r0, [pc, #152]	; (800f924 <tcp_output_alloc_header_common+0xe0>)
 800f88c:	f005 fc3c 	bl	8015108 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f896:	8c3b      	ldrh	r3, [r7, #32]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f9 fb31 	bl	8008f00 <lwip_htons>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f9 fb29 	bl	8008f00 <lwip_htons>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f7f9 fb34 	bl	8008f2a <lwip_htonl>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f8c8:	897b      	ldrh	r3, [r7, #10]
 800f8ca:	089b      	lsrs	r3, r3, #2
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	3305      	adds	r3, #5
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	031b      	lsls	r3, r3, #12
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f9 fb0d 	bl	8008f00 <lwip_htons>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f8ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f9 fb05 	bl	8008f00 <lwip_htons>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2200      	movs	r2, #0
 800f902:	741a      	strb	r2, [r3, #16]
 800f904:	2200      	movs	r2, #0
 800f906:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	2200      	movs	r2, #0
 800f90c:	749a      	strb	r2, [r3, #18]
 800f90e:	2200      	movs	r2, #0
 800f910:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f912:	697b      	ldr	r3, [r7, #20]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	080177d4 	.word	0x080177d4
 800f920:	08017eac 	.word	0x08017eac
 800f924:	08017828 	.word	0x08017828

0800f928 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f928:	b5b0      	push	{r4, r5, r7, lr}
 800f92a:	b08a      	sub	sp, #40	; 0x28
 800f92c:	af04      	add	r7, sp, #16
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	607b      	str	r3, [r7, #4]
 800f932:	460b      	mov	r3, r1
 800f934:	817b      	strh	r3, [r7, #10]
 800f936:	4613      	mov	r3, r2
 800f938:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d106      	bne.n	800f94e <tcp_output_alloc_header+0x26>
 800f940:	4b15      	ldr	r3, [pc, #84]	; (800f998 <tcp_output_alloc_header+0x70>)
 800f942:	f240 7242 	movw	r2, #1858	; 0x742
 800f946:	4915      	ldr	r1, [pc, #84]	; (800f99c <tcp_output_alloc_header+0x74>)
 800f948:	4815      	ldr	r0, [pc, #84]	; (800f9a0 <tcp_output_alloc_header+0x78>)
 800f94a:	f005 fbdd 	bl	8015108 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	8adb      	ldrh	r3, [r3, #22]
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	8b12      	ldrh	r2, [r2, #24]
 800f95a:	68f9      	ldr	r1, [r7, #12]
 800f95c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f95e:	893d      	ldrh	r5, [r7, #8]
 800f960:	897c      	ldrh	r4, [r7, #10]
 800f962:	9103      	str	r1, [sp, #12]
 800f964:	2110      	movs	r1, #16
 800f966:	9102      	str	r1, [sp, #8]
 800f968:	9201      	str	r2, [sp, #4]
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	462a      	mov	r2, r5
 800f970:	4621      	mov	r1, r4
 800f972:	f7ff ff67 	bl	800f844 <tcp_output_alloc_header_common>
 800f976:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f986:	441a      	add	r2, r3
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f98c:	697b      	ldr	r3, [r7, #20]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3718      	adds	r7, #24
 800f992:	46bd      	mov	sp, r7
 800f994:	bdb0      	pop	{r4, r5, r7, pc}
 800f996:	bf00      	nop
 800f998:	080177d4 	.word	0x080177d4
 800f99c:	08017edc 	.word	0x08017edc
 800f9a0:	08017828 	.word	0x08017828

0800f9a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	71fb      	strb	r3, [r7, #7]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <tcp_output_fill_options+0x2e>
 800f9c4:	4b12      	ldr	r3, [pc, #72]	; (800fa10 <tcp_output_fill_options+0x6c>)
 800f9c6:	f240 7256 	movw	r2, #1878	; 0x756
 800f9ca:	4912      	ldr	r1, [pc, #72]	; (800fa14 <tcp_output_fill_options+0x70>)
 800f9cc:	4812      	ldr	r0, [pc, #72]	; (800fa18 <tcp_output_fill_options+0x74>)
 800f9ce:	f005 fb9b 	bl	8015108 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	3314      	adds	r3, #20
 800f9dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f9de:	8bfb      	ldrh	r3, [r7, #30]
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	79fb      	ldrb	r3, [r7, #7]
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	f003 0304 	and.w	r3, r3, #4
 800f9ec:	4413      	add	r3, r2
 800f9ee:	3314      	adds	r3, #20
 800f9f0:	69ba      	ldr	r2, [r7, #24]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d006      	beq.n	800fa08 <tcp_output_fill_options+0x64>
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <tcp_output_fill_options+0x6c>)
 800f9fc:	f240 7275 	movw	r2, #1909	; 0x775
 800fa00:	4906      	ldr	r1, [pc, #24]	; (800fa1c <tcp_output_fill_options+0x78>)
 800fa02:	4805      	ldr	r0, [pc, #20]	; (800fa18 <tcp_output_fill_options+0x74>)
 800fa04:	f005 fb80 	bl	8015108 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fa08:	bf00      	nop
 800fa0a:	3720      	adds	r7, #32
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	080177d4 	.word	0x080177d4
 800fa14:	08017f04 	.word	0x08017f04
 800fa18:	08017828 	.word	0x08017828
 800fa1c:	08017dfc 	.word	0x08017dfc

0800fa20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b08a      	sub	sp, #40	; 0x28
 800fa24:	af04      	add	r7, sp, #16
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <tcp_output_control_segment+0x22>
 800fa34:	4b1c      	ldr	r3, [pc, #112]	; (800faa8 <tcp_output_control_segment+0x88>)
 800fa36:	f240 7287 	movw	r2, #1927	; 0x787
 800fa3a:	491c      	ldr	r1, [pc, #112]	; (800faac <tcp_output_control_segment+0x8c>)
 800fa3c:	481c      	ldr	r0, [pc, #112]	; (800fab0 <tcp_output_control_segment+0x90>)
 800fa3e:	f005 fb63 	bl	8015108 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fa42:	683a      	ldr	r2, [r7, #0]
 800fa44:	6879      	ldr	r1, [r7, #4]
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7fe ff40 	bl	800e8cc <tcp_route>
 800fa4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d102      	bne.n	800fa5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fa54:	23fc      	movs	r3, #252	; 0xfc
 800fa56:	75fb      	strb	r3, [r7, #23]
 800fa58:	e01c      	b.n	800fa94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d006      	beq.n	800fa6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	7adb      	ldrb	r3, [r3, #11]
 800fa64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	7a9b      	ldrb	r3, [r3, #10]
 800fa6a:	757b      	strb	r3, [r7, #21]
 800fa6c:	e003      	b.n	800fa76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fa6e:	23ff      	movs	r3, #255	; 0xff
 800fa70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fa76:	7dba      	ldrb	r2, [r7, #22]
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	9302      	str	r3, [sp, #8]
 800fa7c:	2306      	movs	r3, #6
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	7d7b      	ldrb	r3, [r7, #21]
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	4613      	mov	r3, r2
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	68b8      	ldr	r0, [r7, #8]
 800fa8c:	f004 f91c 	bl	8013cc8 <ip4_output_if>
 800fa90:	4603      	mov	r3, r0
 800fa92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f7fa fdc9 	bl	800a62c <pbuf_free>
  return err;
 800fa9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3718      	adds	r7, #24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	080177d4 	.word	0x080177d4
 800faac:	08017f2c 	.word	0x08017f2c
 800fab0:	08017828 	.word	0x08017828

0800fab4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fab4:	b590      	push	{r4, r7, lr}
 800fab6:	b08b      	sub	sp, #44	; 0x2c
 800fab8:	af04      	add	r7, sp, #16
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d106      	bne.n	800fad6 <tcp_rst+0x22>
 800fac8:	4b1f      	ldr	r3, [pc, #124]	; (800fb48 <tcp_rst+0x94>)
 800faca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800face:	491f      	ldr	r1, [pc, #124]	; (800fb4c <tcp_rst+0x98>)
 800fad0:	481f      	ldr	r0, [pc, #124]	; (800fb50 <tcp_rst+0x9c>)
 800fad2:	f005 fb19 	bl	8015108 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d106      	bne.n	800faea <tcp_rst+0x36>
 800fadc:	4b1a      	ldr	r3, [pc, #104]	; (800fb48 <tcp_rst+0x94>)
 800fade:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fae2:	491c      	ldr	r1, [pc, #112]	; (800fb54 <tcp_rst+0xa0>)
 800fae4:	481a      	ldr	r0, [pc, #104]	; (800fb50 <tcp_rst+0x9c>)
 800fae6:	f005 fb0f 	bl	8015108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800faea:	2300      	movs	r3, #0
 800faec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800faee:	f246 0308 	movw	r3, #24584	; 0x6008
 800faf2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
 800faf6:	b29c      	uxth	r4, r3
 800faf8:	68b8      	ldr	r0, [r7, #8]
 800fafa:	f7f9 fa16 	bl	8008f2a <lwip_htonl>
 800fafe:	4602      	mov	r2, r0
 800fb00:	8abb      	ldrh	r3, [r7, #20]
 800fb02:	9303      	str	r3, [sp, #12]
 800fb04:	2314      	movs	r3, #20
 800fb06:	9302      	str	r3, [sp, #8]
 800fb08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	4613      	mov	r3, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	4621      	mov	r1, r4
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7ff fe94 	bl	800f844 <tcp_output_alloc_header_common>
 800fb1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00c      	beq.n	800fb3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	2200      	movs	r2, #0
 800fb28:	6939      	ldr	r1, [r7, #16]
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f7ff ff3a 	bl	800f9a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	6939      	ldr	r1, [r7, #16]
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f7ff ff72 	bl	800fa20 <tcp_output_control_segment>
 800fb3c:	e000      	b.n	800fb40 <tcp_rst+0x8c>
    return;
 800fb3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fb40:	371c      	adds	r7, #28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd90      	pop	{r4, r7, pc}
 800fb46:	bf00      	nop
 800fb48:	080177d4 	.word	0x080177d4
 800fb4c:	08017f58 	.word	0x08017f58
 800fb50:	08017828 	.word	0x08017828
 800fb54:	08017f74 	.word	0x08017f74

0800fb58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fb58:	b590      	push	{r4, r7, lr}
 800fb5a:	b087      	sub	sp, #28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_send_empty_ack+0x24>
 800fb6e:	4b28      	ldr	r3, [pc, #160]	; (800fc10 <tcp_send_empty_ack+0xb8>)
 800fb70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fb74:	4927      	ldr	r1, [pc, #156]	; (800fc14 <tcp_send_empty_ack+0xbc>)
 800fb76:	4828      	ldr	r0, [pc, #160]	; (800fc18 <tcp_send_empty_ack+0xc0>)
 800fb78:	f005 fac6 	bl	8015108 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb7c:	7dfb      	ldrb	r3, [r7, #23]
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	f003 0304 	and.w	r3, r3, #4
 800fb86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fb88:	7d7b      	ldrb	r3, [r7, #21]
 800fb8a:	b29c      	uxth	r4, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f9 f9ca 	bl	8008f2a <lwip_htonl>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff fec3 	bl	800f928 <tcp_output_alloc_header>
 800fba2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d109      	bne.n	800fbbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	8b5b      	ldrh	r3, [r3, #26]
 800fbae:	f043 0303 	orr.w	r3, r3, #3
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fbb8:	f06f 0301 	mvn.w	r3, #1
 800fbbc:	e023      	b.n	800fc06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fbbe:	7dbb      	ldrb	r3, [r7, #22]
 800fbc0:	7dfa      	ldrb	r2, [r7, #23]
 800fbc2:	6939      	ldr	r1, [r7, #16]
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7ff feed 	bl	800f9a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3304      	adds	r3, #4
 800fbd0:	6939      	ldr	r1, [r7, #16]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7ff ff24 	bl	800fa20 <tcp_output_control_segment>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d007      	beq.n	800fbf4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8b5b      	ldrh	r3, [r3, #26]
 800fbe8:	f043 0303 	orr.w	r3, r3, #3
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	835a      	strh	r2, [r3, #26]
 800fbf2:	e006      	b.n	800fc02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	8b5b      	ldrh	r3, [r3, #26]
 800fbf8:	f023 0303 	bic.w	r3, r3, #3
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd90      	pop	{r4, r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	080177d4 	.word	0x080177d4
 800fc14:	08017f90 	.word	0x08017f90
 800fc18:	08017828 	.word	0x08017828

0800fc1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b087      	sub	sp, #28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc24:	2300      	movs	r3, #0
 800fc26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d106      	bne.n	800fc3c <tcp_keepalive+0x20>
 800fc2e:	4b18      	ldr	r3, [pc, #96]	; (800fc90 <tcp_keepalive+0x74>)
 800fc30:	f640 0224 	movw	r2, #2084	; 0x824
 800fc34:	4917      	ldr	r1, [pc, #92]	; (800fc94 <tcp_keepalive+0x78>)
 800fc36:	4818      	ldr	r0, [pc, #96]	; (800fc98 <tcp_keepalive+0x7c>)
 800fc38:	f005 fa66 	bl	8015108 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	b29c      	uxth	r4, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc44:	3b01      	subs	r3, #1
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7f9 f96f 	bl	8008f2a <lwip_htonl>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2200      	movs	r2, #0
 800fc50:	4621      	mov	r1, r4
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7ff fe68 	bl	800f928 <tcp_output_alloc_header>
 800fc58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d102      	bne.n	800fc66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	e010      	b.n	800fc88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	6939      	ldr	r1, [r7, #16]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7ff fe99 	bl	800f9a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	3304      	adds	r3, #4
 800fc78:	6939      	ldr	r1, [r7, #16]
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7ff fed0 	bl	800fa20 <tcp_output_control_segment>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	371c      	adds	r7, #28
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd90      	pop	{r4, r7, pc}
 800fc90:	080177d4 	.word	0x080177d4
 800fc94:	08017fb0 	.word	0x08017fb0
 800fc98:	08017828 	.word	0x08017828

0800fc9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fc9c:	b590      	push	{r4, r7, lr}
 800fc9e:	b08b      	sub	sp, #44	; 0x2c
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fca4:	2300      	movs	r3, #0
 800fca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d106      	bne.n	800fcbe <tcp_zero_window_probe+0x22>
 800fcb0:	4b4c      	ldr	r3, [pc, #304]	; (800fde4 <tcp_zero_window_probe+0x148>)
 800fcb2:	f640 024f 	movw	r2, #2127	; 0x84f
 800fcb6:	494c      	ldr	r1, [pc, #304]	; (800fde8 <tcp_zero_window_probe+0x14c>)
 800fcb8:	484c      	ldr	r0, [pc, #304]	; (800fdec <tcp_zero_window_probe+0x150>)
 800fcba:	f005 fa25 	bl	8015108 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fcc4:	6a3b      	ldr	r3, [r7, #32]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d101      	bne.n	800fcce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fcca:	2300      	movs	r3, #0
 800fccc:	e086      	b.n	800fddc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fcd4:	2bff      	cmp	r3, #255	; 0xff
 800fcd6:	d007      	beq.n	800fce8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fcde:	3301      	adds	r3, #1
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	899b      	ldrh	r3, [r3, #12]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7f9 f905 	bl	8008f00 <lwip_htons>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	f003 0301 	and.w	r3, r3, #1
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d005      	beq.n	800fd0e <tcp_zero_window_probe+0x72>
 800fd02:	6a3b      	ldr	r3, [r7, #32]
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d101      	bne.n	800fd0e <tcp_zero_window_probe+0x72>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e000      	b.n	800fd10 <tcp_zero_window_probe+0x74>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fd12:	7ffb      	ldrb	r3, [r7, #31]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	bf0c      	ite	eq
 800fd18:	2301      	moveq	r3, #1
 800fd1a:	2300      	movne	r3, #0
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd24:	b299      	uxth	r1, r3
 800fd26:	6a3b      	ldr	r3, [r7, #32]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	8bba      	ldrh	r2, [r7, #28]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7ff fdfa 	bl	800f928 <tcp_output_alloc_header>
 800fd34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d102      	bne.n	800fd42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd40:	e04c      	b.n	800fddc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fd48:	7ffb      	ldrb	r3, [r7, #31]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d011      	beq.n	800fd72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	899b      	ldrh	r3, [r3, #12]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	b21b      	sxth	r3, r3
 800fd56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd5a:	b21c      	sxth	r4, r3
 800fd5c:	2011      	movs	r0, #17
 800fd5e:	f7f9 f8cf 	bl	8008f00 <lwip_htons>
 800fd62:	4603      	mov	r3, r0
 800fd64:	b21b      	sxth	r3, r3
 800fd66:	4323      	orrs	r3, r4
 800fd68:	b21b      	sxth	r3, r3
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	819a      	strh	r2, [r3, #12]
 800fd70:	e010      	b.n	800fd94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	3314      	adds	r3, #20
 800fd78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fd7a:	6a3b      	ldr	r3, [r7, #32]
 800fd7c:	6858      	ldr	r0, [r3, #4]
 800fd7e:	6a3b      	ldr	r3, [r7, #32]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	891a      	ldrh	r2, [r3, #8]
 800fd84:	6a3b      	ldr	r3, [r7, #32]
 800fd86:	891b      	ldrh	r3, [r3, #8]
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	6939      	ldr	r1, [r7, #16]
 800fd90:	f7fa fe52 	bl	800aa38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f9 f8c5 	bl	8008f2a <lwip_htonl>
 800fda0:	4603      	mov	r3, r0
 800fda2:	3301      	adds	r3, #1
 800fda4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	da02      	bge.n	800fdb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	69b9      	ldr	r1, [r7, #24]
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f7ff fdef 	bl	800f9a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	69b9      	ldr	r1, [r7, #24]
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff fe26 	bl	800fa20 <tcp_output_control_segment>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fdd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	372c      	adds	r7, #44	; 0x2c
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd90      	pop	{r4, r7, pc}
 800fde4:	080177d4 	.word	0x080177d4
 800fde8:	08017fcc 	.word	0x08017fcc
 800fdec:	08017828 	.word	0x08017828

0800fdf0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fdf8:	f7fa ff0c 	bl	800ac14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fdfc:	4b0a      	ldr	r3, [pc, #40]	; (800fe28 <tcpip_tcp_timer+0x38>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d103      	bne.n	800fe0c <tcpip_tcp_timer+0x1c>
 800fe04:	4b09      	ldr	r3, [pc, #36]	; (800fe2c <tcpip_tcp_timer+0x3c>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d005      	beq.n	800fe18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4908      	ldr	r1, [pc, #32]	; (800fe30 <tcpip_tcp_timer+0x40>)
 800fe10:	20fa      	movs	r0, #250	; 0xfa
 800fe12:	f000 f8f3 	bl	800fffc <sys_timeout>
 800fe16:	e003      	b.n	800fe20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fe18:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <tcpip_tcp_timer+0x44>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	601a      	str	r2, [r3, #0]
  }
}
 800fe1e:	bf00      	nop
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	2000d3d0 	.word	0x2000d3d0
 800fe2c:	2000d3d4 	.word	0x2000d3d4
 800fe30:	0800fdf1 	.word	0x0800fdf1
 800fe34:	2000d41c 	.word	0x2000d41c

0800fe38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <tcp_timer_needed+0x30>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10f      	bne.n	800fe64 <tcp_timer_needed+0x2c>
 800fe44:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <tcp_timer_needed+0x34>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d103      	bne.n	800fe54 <tcp_timer_needed+0x1c>
 800fe4c:	4b08      	ldr	r3, [pc, #32]	; (800fe70 <tcp_timer_needed+0x38>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d007      	beq.n	800fe64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fe54:	4b04      	ldr	r3, [pc, #16]	; (800fe68 <tcp_timer_needed+0x30>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4905      	ldr	r1, [pc, #20]	; (800fe74 <tcp_timer_needed+0x3c>)
 800fe5e:	20fa      	movs	r0, #250	; 0xfa
 800fe60:	f000 f8cc 	bl	800fffc <sys_timeout>
  }
}
 800fe64:	bf00      	nop
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	2000d41c 	.word	0x2000d41c
 800fe6c:	2000d3d0 	.word	0x2000d3d0
 800fe70:	2000d3d4 	.word	0x2000d3d4
 800fe74:	0800fdf1 	.word	0x0800fdf1

0800fe78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fe84:	200a      	movs	r0, #10
 800fe86:	f7f9 fd13 	bl	80098b0 <memp_malloc>
 800fe8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d109      	bne.n	800fea6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d151      	bne.n	800ff3c <sys_timeout_abs+0xc4>
 800fe98:	4b2a      	ldr	r3, [pc, #168]	; (800ff44 <sys_timeout_abs+0xcc>)
 800fe9a:	22be      	movs	r2, #190	; 0xbe
 800fe9c:	492a      	ldr	r1, [pc, #168]	; (800ff48 <sys_timeout_abs+0xd0>)
 800fe9e:	482b      	ldr	r0, [pc, #172]	; (800ff4c <sys_timeout_abs+0xd4>)
 800fea0:	f005 f932 	bl	8015108 <iprintf>
    return;
 800fea4:	e04a      	b.n	800ff3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2200      	movs	r2, #0
 800feaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800febe:	4b24      	ldr	r3, [pc, #144]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d103      	bne.n	800fece <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fec6:	4a22      	ldr	r2, [pc, #136]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	6013      	str	r3, [r2, #0]
    return;
 800fecc:	e037      	b.n	800ff3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	685a      	ldr	r2, [r3, #4]
 800fed2:	4b1f      	ldr	r3, [pc, #124]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	0fdb      	lsrs	r3, r3, #31
 800fedc:	f003 0301 	and.w	r3, r3, #1
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d007      	beq.n	800fef6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fee6:	4b1a      	ldr	r3, [pc, #104]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800feee:	4a18      	ldr	r2, [pc, #96]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	e023      	b.n	800ff3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fef6:	4b16      	ldr	r3, [pc, #88]	; (800ff50 <sys_timeout_abs+0xd8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	617b      	str	r3, [r7, #20]
 800fefc:	e01a      	b.n	800ff34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00b      	beq.n	800ff1e <sys_timeout_abs+0xa6>
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	685a      	ldr	r2, [r3, #4]
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	0fdb      	lsrs	r3, r3, #31
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d007      	beq.n	800ff2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	601a      	str	r2, [r3, #0]
        break;
 800ff2c:	e007      	b.n	800ff3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	617b      	str	r3, [r7, #20]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1e1      	bne.n	800fefe <sys_timeout_abs+0x86>
 800ff3a:	e000      	b.n	800ff3e <sys_timeout_abs+0xc6>
    return;
 800ff3c:	bf00      	nop
      }
    }
  }
}
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	08017ff0 	.word	0x08017ff0
 800ff48:	08018024 	.word	0x08018024
 800ff4c:	08018064 	.word	0x08018064
 800ff50:	2000d414 	.word	0x2000d414

0800ff54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	4798      	blx	r3

  now = sys_now();
 800ff66:	f7f4 fe3f 	bl	8004be8 <sys_now>
 800ff6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <lwip_cyclic_timer+0x5c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4413      	add	r3, r2
 800ff76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	0fdb      	lsrs	r3, r3, #31
 800ff80:	f003 0301 	and.w	r3, r3, #1
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d009      	beq.n	800ff9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	4413      	add	r3, r2
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4907      	ldr	r1, [pc, #28]	; (800ffb4 <lwip_cyclic_timer+0x60>)
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff ff6e 	bl	800fe78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ff9c:	e004      	b.n	800ffa8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	4904      	ldr	r1, [pc, #16]	; (800ffb4 <lwip_cyclic_timer+0x60>)
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f7ff ff68 	bl	800fe78 <sys_timeout_abs>
}
 800ffa8:	bf00      	nop
 800ffaa:	3718      	adds	r7, #24
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	2000d418 	.word	0x2000d418
 800ffb4:	0800ff55 	.word	0x0800ff55

0800ffb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	607b      	str	r3, [r7, #4]
 800ffc2:	e00e      	b.n	800ffe2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ffc4:	4a0b      	ldr	r2, [pc, #44]	; (800fff4 <sys_timeouts_init+0x3c>)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	00db      	lsls	r3, r3, #3
 800ffd0:	4a08      	ldr	r2, [pc, #32]	; (800fff4 <sys_timeouts_init+0x3c>)
 800ffd2:	4413      	add	r3, r2
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	4908      	ldr	r1, [pc, #32]	; (800fff8 <sys_timeouts_init+0x40>)
 800ffd8:	f000 f810 	bl	800fffc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	607b      	str	r3, [r7, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b04      	cmp	r3, #4
 800ffe6:	d9ed      	bls.n	800ffc4 <sys_timeouts_init+0xc>
  }
}
 800ffe8:	bf00      	nop
 800ffea:	bf00      	nop
 800ffec:	3708      	adds	r7, #8
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	08018fe0 	.word	0x08018fe0
 800fff8:	0800ff55 	.word	0x0800ff55

0800fffc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801000e:	d306      	bcc.n	801001e <sys_timeout+0x22>
 8010010:	4b0a      	ldr	r3, [pc, #40]	; (801003c <sys_timeout+0x40>)
 8010012:	f240 1229 	movw	r2, #297	; 0x129
 8010016:	490a      	ldr	r1, [pc, #40]	; (8010040 <sys_timeout+0x44>)
 8010018:	480a      	ldr	r0, [pc, #40]	; (8010044 <sys_timeout+0x48>)
 801001a:	f005 f875 	bl	8015108 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801001e:	f7f4 fde3 	bl	8004be8 <sys_now>
 8010022:	4602      	mov	r2, r0
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	4413      	add	r3, r2
 8010028:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	68b9      	ldr	r1, [r7, #8]
 801002e:	6978      	ldr	r0, [r7, #20]
 8010030:	f7ff ff22 	bl	800fe78 <sys_timeout_abs>
#endif
}
 8010034:	bf00      	nop
 8010036:	3718      	adds	r7, #24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	08017ff0 	.word	0x08017ff0
 8010040:	0801808c 	.word	0x0801808c
 8010044:	08018064 	.word	0x08018064

08010048 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801004e:	f7f4 fdcb 	bl	8004be8 <sys_now>
 8010052:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8010054:	4b17      	ldr	r3, [pc, #92]	; (80100b4 <sys_check_timeouts+0x6c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d022      	beq.n	80100a6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	1ad3      	subs	r3, r2, r3
 8010068:	0fdb      	lsrs	r3, r3, #31
 801006a:	f003 0301 	and.w	r3, r3, #1
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	d11a      	bne.n	80100aa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a0e      	ldr	r2, [pc, #56]	; (80100b4 <sys_check_timeouts+0x6c>)
 801007a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4a0a      	ldr	r2, [pc, #40]	; (80100b8 <sys_check_timeouts+0x70>)
 801008e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	200a      	movs	r0, #10
 8010094:	f7f9 fc82 	bl	800999c <memp_free>
    if (handler != NULL) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d0da      	beq.n	8010054 <sys_check_timeouts+0xc>
      handler(arg);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6838      	ldr	r0, [r7, #0]
 80100a2:	4798      	blx	r3
  do {
 80100a4:	e7d6      	b.n	8010054 <sys_check_timeouts+0xc>
      return;
 80100a6:	bf00      	nop
 80100a8:	e000      	b.n	80100ac <sys_check_timeouts+0x64>
      return;
 80100aa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	2000d414 	.word	0x2000d414
 80100b8:	2000d418 	.word	0x2000d418

080100bc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80100c2:	4b16      	ldr	r3, [pc, #88]	; (801011c <sys_timeouts_sleeptime+0x60>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d102      	bne.n	80100d0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80100ca:	f04f 33ff 	mov.w	r3, #4294967295
 80100ce:	e020      	b.n	8010112 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80100d0:	f7f4 fd8a 	bl	8004be8 <sys_now>
 80100d4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80100d6:	4b11      	ldr	r3, [pc, #68]	; (801011c <sys_timeouts_sleeptime+0x60>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	0fdb      	lsrs	r3, r3, #31
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	e010      	b.n	8010112 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80100f0:	4b0a      	ldr	r3, [pc, #40]	; (801011c <sys_timeouts_sleeptime+0x60>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	685a      	ldr	r2, [r3, #4]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	da06      	bge.n	8010110 <sys_timeouts_sleeptime+0x54>
 8010102:	4b07      	ldr	r3, [pc, #28]	; (8010120 <sys_timeouts_sleeptime+0x64>)
 8010104:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010108:	4906      	ldr	r1, [pc, #24]	; (8010124 <sys_timeouts_sleeptime+0x68>)
 801010a:	4807      	ldr	r0, [pc, #28]	; (8010128 <sys_timeouts_sleeptime+0x6c>)
 801010c:	f004 fffc 	bl	8015108 <iprintf>
    return ret;
 8010110:	683b      	ldr	r3, [r7, #0]
  }
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2000d414 	.word	0x2000d414
 8010120:	08017ff0 	.word	0x08017ff0
 8010124:	080180c4 	.word	0x080180c4
 8010128:	08018064 	.word	0x08018064

0801012c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010130:	f004 feea 	bl	8014f08 <rand>
 8010134:	4603      	mov	r3, r0
 8010136:	b29b      	uxth	r3, r3
 8010138:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801013c:	b29b      	uxth	r3, r3
 801013e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010142:	b29a      	uxth	r2, r3
 8010144:	4b01      	ldr	r3, [pc, #4]	; (801014c <udp_init+0x20>)
 8010146:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010148:	bf00      	nop
 801014a:	bd80      	pop	{r7, pc}
 801014c:	20000018 	.word	0x20000018

08010150 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801015a:	4b17      	ldr	r3, [pc, #92]	; (80101b8 <udp_new_port+0x68>)
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	1c5a      	adds	r2, r3, #1
 8010160:	b291      	uxth	r1, r2
 8010162:	4a15      	ldr	r2, [pc, #84]	; (80101b8 <udp_new_port+0x68>)
 8010164:	8011      	strh	r1, [r2, #0]
 8010166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801016a:	4293      	cmp	r3, r2
 801016c:	d103      	bne.n	8010176 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801016e:	4b12      	ldr	r3, [pc, #72]	; (80101b8 <udp_new_port+0x68>)
 8010170:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010174:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010176:	4b11      	ldr	r3, [pc, #68]	; (80101bc <udp_new_port+0x6c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	603b      	str	r3, [r7, #0]
 801017c:	e011      	b.n	80101a2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	8a5a      	ldrh	r2, [r3, #18]
 8010182:	4b0d      	ldr	r3, [pc, #52]	; (80101b8 <udp_new_port+0x68>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	429a      	cmp	r2, r3
 8010188:	d108      	bne.n	801019c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801018a:	88fb      	ldrh	r3, [r7, #6]
 801018c:	3301      	adds	r3, #1
 801018e:	80fb      	strh	r3, [r7, #6]
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010196:	d3e0      	bcc.n	801015a <udp_new_port+0xa>
        return 0;
 8010198:	2300      	movs	r3, #0
 801019a:	e007      	b.n	80101ac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	603b      	str	r3, [r7, #0]
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1ea      	bne.n	801017e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80101a8:	4b03      	ldr	r3, [pc, #12]	; (80101b8 <udp_new_port+0x68>)
 80101aa:	881b      	ldrh	r3, [r3, #0]
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	20000018 	.word	0x20000018
 80101bc:	2000d420 	.word	0x2000d420

080101c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	4613      	mov	r3, r2
 80101cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d105      	bne.n	80101e0 <udp_input_local_match+0x20>
 80101d4:	4b27      	ldr	r3, [pc, #156]	; (8010274 <udp_input_local_match+0xb4>)
 80101d6:	2287      	movs	r2, #135	; 0x87
 80101d8:	4927      	ldr	r1, [pc, #156]	; (8010278 <udp_input_local_match+0xb8>)
 80101da:	4828      	ldr	r0, [pc, #160]	; (801027c <udp_input_local_match+0xbc>)
 80101dc:	f004 ff94 	bl	8015108 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d105      	bne.n	80101f2 <udp_input_local_match+0x32>
 80101e6:	4b23      	ldr	r3, [pc, #140]	; (8010274 <udp_input_local_match+0xb4>)
 80101e8:	2288      	movs	r2, #136	; 0x88
 80101ea:	4925      	ldr	r1, [pc, #148]	; (8010280 <udp_input_local_match+0xc0>)
 80101ec:	4823      	ldr	r0, [pc, #140]	; (801027c <udp_input_local_match+0xbc>)
 80101ee:	f004 ff8b 	bl	8015108 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	7a1b      	ldrb	r3, [r3, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00b      	beq.n	8010212 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7a1a      	ldrb	r2, [r3, #8]
 80101fe:	4b21      	ldr	r3, [pc, #132]	; (8010284 <udp_input_local_match+0xc4>)
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010206:	3301      	adds	r3, #1
 8010208:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801020a:	429a      	cmp	r2, r3
 801020c:	d001      	beq.n	8010212 <udp_input_local_match+0x52>
    return 0;
 801020e:	2300      	movs	r3, #0
 8010210:	e02b      	b.n	801026a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d018      	beq.n	801024a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d013      	beq.n	8010246 <udp_input_local_match+0x86>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00f      	beq.n	8010246 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010226:	4b17      	ldr	r3, [pc, #92]	; (8010284 <udp_input_local_match+0xc4>)
 8010228:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801022a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801022e:	d00a      	beq.n	8010246 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	4b13      	ldr	r3, [pc, #76]	; (8010284 <udp_input_local_match+0xc4>)
 8010236:	695b      	ldr	r3, [r3, #20]
 8010238:	405a      	eors	r2, r3
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	3308      	adds	r3, #8
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010242:	2b00      	cmp	r3, #0
 8010244:	d110      	bne.n	8010268 <udp_input_local_match+0xa8>
          return 1;
 8010246:	2301      	movs	r3, #1
 8010248:	e00f      	b.n	801026a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d009      	beq.n	8010264 <udp_input_local_match+0xa4>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d005      	beq.n	8010264 <udp_input_local_match+0xa4>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <udp_input_local_match+0xc4>)
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	429a      	cmp	r2, r3
 8010262:	d101      	bne.n	8010268 <udp_input_local_match+0xa8>
        return 1;
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	080180d8 	.word	0x080180d8
 8010278:	08018108 	.word	0x08018108
 801027c:	0801812c 	.word	0x0801812c
 8010280:	08018154 	.word	0x08018154
 8010284:	20009c50 	.word	0x20009c50

08010288 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b08d      	sub	sp, #52	; 0x34
 801028c:	af02      	add	r7, sp, #8
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010292:	2300      	movs	r3, #0
 8010294:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d105      	bne.n	80102a8 <udp_input+0x20>
 801029c:	4b7c      	ldr	r3, [pc, #496]	; (8010490 <udp_input+0x208>)
 801029e:	22cf      	movs	r2, #207	; 0xcf
 80102a0:	497c      	ldr	r1, [pc, #496]	; (8010494 <udp_input+0x20c>)
 80102a2:	487d      	ldr	r0, [pc, #500]	; (8010498 <udp_input+0x210>)
 80102a4:	f004 ff30 	bl	8015108 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <udp_input+0x32>
 80102ae:	4b78      	ldr	r3, [pc, #480]	; (8010490 <udp_input+0x208>)
 80102b0:	22d0      	movs	r2, #208	; 0xd0
 80102b2:	497a      	ldr	r1, [pc, #488]	; (801049c <udp_input+0x214>)
 80102b4:	4878      	ldr	r0, [pc, #480]	; (8010498 <udp_input+0x210>)
 80102b6:	f004 ff27 	bl	8015108 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	895b      	ldrh	r3, [r3, #10]
 80102be:	2b07      	cmp	r3, #7
 80102c0:	d803      	bhi.n	80102ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7fa f9b2 	bl	800a62c <pbuf_free>
    goto end;
 80102c8:	e0de      	b.n	8010488 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80102d0:	4b73      	ldr	r3, [pc, #460]	; (80104a0 <udp_input+0x218>)
 80102d2:	695b      	ldr	r3, [r3, #20]
 80102d4:	4a72      	ldr	r2, [pc, #456]	; (80104a0 <udp_input+0x218>)
 80102d6:	6812      	ldr	r2, [r2, #0]
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f003 fdcc 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 80102e0:	4603      	mov	r3, r0
 80102e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f8 fe08 	bl	8008f00 <lwip_htons>
 80102f0:	4603      	mov	r3, r0
 80102f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	885b      	ldrh	r3, [r3, #2]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7f8 fe00 	bl	8008f00 <lwip_htons>
 8010300:	4603      	mov	r3, r0
 8010302:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010304:	2300      	movs	r3, #0
 8010306:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010308:	2300      	movs	r3, #0
 801030a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801030c:	2300      	movs	r3, #0
 801030e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010310:	4b64      	ldr	r3, [pc, #400]	; (80104a4 <udp_input+0x21c>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	627b      	str	r3, [r7, #36]	; 0x24
 8010316:	e054      	b.n	80103c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031a:	8a5b      	ldrh	r3, [r3, #18]
 801031c:	89fa      	ldrh	r2, [r7, #14]
 801031e:	429a      	cmp	r2, r3
 8010320:	d14a      	bne.n	80103b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010322:	7cfb      	ldrb	r3, [r7, #19]
 8010324:	461a      	mov	r2, r3
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801032a:	f7ff ff49 	bl	80101c0 <udp_input_local_match>
 801032e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010330:	2b00      	cmp	r3, #0
 8010332:	d041      	beq.n	80103b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	7c1b      	ldrb	r3, [r3, #16]
 8010338:	f003 0304 	and.w	r3, r3, #4
 801033c:	2b00      	cmp	r3, #0
 801033e:	d11d      	bne.n	801037c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d102      	bne.n	801034c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	61fb      	str	r3, [r7, #28]
 801034a:	e017      	b.n	801037c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801034c:	7cfb      	ldrb	r3, [r7, #19]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d014      	beq.n	801037c <udp_input+0xf4>
 8010352:	4b53      	ldr	r3, [pc, #332]	; (80104a0 <udp_input+0x218>)
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035a:	d10f      	bne.n	801037c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	3304      	adds	r3, #4
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d008      	beq.n	801037c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	3304      	adds	r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	429a      	cmp	r2, r3
 8010376:	d101      	bne.n	801037c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	8a9b      	ldrh	r3, [r3, #20]
 8010380:	8a3a      	ldrh	r2, [r7, #16]
 8010382:	429a      	cmp	r2, r3
 8010384:	d118      	bne.n	80103b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801038a:	2b00      	cmp	r3, #0
 801038c:	d005      	beq.n	801039a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	4b43      	ldr	r3, [pc, #268]	; (80104a0 <udp_input+0x218>)
 8010394:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010396:	429a      	cmp	r2, r3
 8010398:	d10e      	bne.n	80103b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d014      	beq.n	80103ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	68da      	ldr	r2, [r3, #12]
 80103a4:	6a3b      	ldr	r3, [r7, #32]
 80103a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80103a8:	4b3e      	ldr	r3, [pc, #248]	; (80104a4 <udp_input+0x21c>)
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80103b0:	4a3c      	ldr	r2, [pc, #240]	; (80104a4 <udp_input+0x21c>)
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80103b6:	e008      	b.n	80103ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	627b      	str	r3, [r7, #36]	; 0x24
 80103c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1a7      	bne.n	8010318 <udp_input+0x90>
 80103c8:	e000      	b.n	80103cc <udp_input+0x144>
        break;
 80103ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80103cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d101      	bne.n	80103d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d002      	beq.n	80103e2 <udp_input+0x15a>
    for_us = 1;
 80103dc:	2301      	movs	r3, #1
 80103de:	76fb      	strb	r3, [r7, #27]
 80103e0:	e00a      	b.n	80103f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	3304      	adds	r3, #4
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	4b2d      	ldr	r3, [pc, #180]	; (80104a0 <udp_input+0x218>)
 80103ea:	695b      	ldr	r3, [r3, #20]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	bf0c      	ite	eq
 80103f0:	2301      	moveq	r3, #1
 80103f2:	2300      	movne	r3, #0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80103f8:	7efb      	ldrb	r3, [r7, #27]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d041      	beq.n	8010482 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80103fe:	2108      	movs	r1, #8
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f7fa f88d 	bl	800a520 <pbuf_remove_header>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00a      	beq.n	8010422 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801040c:	4b20      	ldr	r3, [pc, #128]	; (8010490 <udp_input+0x208>)
 801040e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010412:	4925      	ldr	r1, [pc, #148]	; (80104a8 <udp_input+0x220>)
 8010414:	4820      	ldr	r0, [pc, #128]	; (8010498 <udp_input+0x210>)
 8010416:	f004 fe77 	bl	8015108 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7fa f906 	bl	800a62c <pbuf_free>
      goto end;
 8010420:	e032      	b.n	8010488 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010424:	2b00      	cmp	r3, #0
 8010426:	d012      	beq.n	801044e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00a      	beq.n	8010446 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	699c      	ldr	r4, [r3, #24]
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	69d8      	ldr	r0, [r3, #28]
 8010438:	8a3b      	ldrh	r3, [r7, #16]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	4b1b      	ldr	r3, [pc, #108]	; (80104ac <udp_input+0x224>)
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010442:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010444:	e021      	b.n	801048a <udp_input+0x202>
        pbuf_free(p);
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f7fa f8f0 	bl	800a62c <pbuf_free>
        goto end;
 801044c:	e01c      	b.n	8010488 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801044e:	7cfb      	ldrb	r3, [r7, #19]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d112      	bne.n	801047a <udp_input+0x1f2>
 8010454:	4b12      	ldr	r3, [pc, #72]	; (80104a0 <udp_input+0x218>)
 8010456:	695b      	ldr	r3, [r3, #20]
 8010458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801045c:	2be0      	cmp	r3, #224	; 0xe0
 801045e:	d00c      	beq.n	801047a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010460:	4b0f      	ldr	r3, [pc, #60]	; (80104a0 <udp_input+0x218>)
 8010462:	899b      	ldrh	r3, [r3, #12]
 8010464:	3308      	adds	r3, #8
 8010466:	b29b      	uxth	r3, r3
 8010468:	b21b      	sxth	r3, r3
 801046a:	4619      	mov	r1, r3
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7fa f8ca 	bl	800a606 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010472:	2103      	movs	r1, #3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f003 f9c1 	bl	80137fc <icmp_dest_unreach>
      pbuf_free(p);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7fa f8d6 	bl	800a62c <pbuf_free>
  return;
 8010480:	e003      	b.n	801048a <udp_input+0x202>
    pbuf_free(p);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7fa f8d2 	bl	800a62c <pbuf_free>
  return;
 8010488:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801048a:	372c      	adds	r7, #44	; 0x2c
 801048c:	46bd      	mov	sp, r7
 801048e:	bd90      	pop	{r4, r7, pc}
 8010490:	080180d8 	.word	0x080180d8
 8010494:	0801817c 	.word	0x0801817c
 8010498:	0801812c 	.word	0x0801812c
 801049c:	08018194 	.word	0x08018194
 80104a0:	20009c50 	.word	0x20009c50
 80104a4:	2000d420 	.word	0x2000d420
 80104a8:	080181b0 	.word	0x080181b0
 80104ac:	20009c60 	.word	0x20009c60

080104b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b088      	sub	sp, #32
 80104b4:	af02      	add	r7, sp, #8
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d109      	bne.n	80104d8 <udp_sendto_if+0x28>
 80104c4:	4b2e      	ldr	r3, [pc, #184]	; (8010580 <udp_sendto_if+0xd0>)
 80104c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104ca:	492e      	ldr	r1, [pc, #184]	; (8010584 <udp_sendto_if+0xd4>)
 80104cc:	482e      	ldr	r0, [pc, #184]	; (8010588 <udp_sendto_if+0xd8>)
 80104ce:	f004 fe1b 	bl	8015108 <iprintf>
 80104d2:	f06f 030f 	mvn.w	r3, #15
 80104d6:	e04f      	b.n	8010578 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d109      	bne.n	80104f2 <udp_sendto_if+0x42>
 80104de:	4b28      	ldr	r3, [pc, #160]	; (8010580 <udp_sendto_if+0xd0>)
 80104e0:	f240 2281 	movw	r2, #641	; 0x281
 80104e4:	4929      	ldr	r1, [pc, #164]	; (801058c <udp_sendto_if+0xdc>)
 80104e6:	4828      	ldr	r0, [pc, #160]	; (8010588 <udp_sendto_if+0xd8>)
 80104e8:	f004 fe0e 	bl	8015108 <iprintf>
 80104ec:	f06f 030f 	mvn.w	r3, #15
 80104f0:	e042      	b.n	8010578 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d109      	bne.n	801050c <udp_sendto_if+0x5c>
 80104f8:	4b21      	ldr	r3, [pc, #132]	; (8010580 <udp_sendto_if+0xd0>)
 80104fa:	f240 2282 	movw	r2, #642	; 0x282
 80104fe:	4924      	ldr	r1, [pc, #144]	; (8010590 <udp_sendto_if+0xe0>)
 8010500:	4821      	ldr	r0, [pc, #132]	; (8010588 <udp_sendto_if+0xd8>)
 8010502:	f004 fe01 	bl	8015108 <iprintf>
 8010506:	f06f 030f 	mvn.w	r3, #15
 801050a:	e035      	b.n	8010578 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d109      	bne.n	8010526 <udp_sendto_if+0x76>
 8010512:	4b1b      	ldr	r3, [pc, #108]	; (8010580 <udp_sendto_if+0xd0>)
 8010514:	f240 2283 	movw	r2, #643	; 0x283
 8010518:	491e      	ldr	r1, [pc, #120]	; (8010594 <udp_sendto_if+0xe4>)
 801051a:	481b      	ldr	r0, [pc, #108]	; (8010588 <udp_sendto_if+0xd8>)
 801051c:	f004 fdf4 	bl	8015108 <iprintf>
 8010520:	f06f 030f 	mvn.w	r3, #15
 8010524:	e028      	b.n	8010578 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d009      	beq.n	8010540 <udp_sendto_if+0x90>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d005      	beq.n	8010540 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801053c:	2be0      	cmp	r3, #224	; 0xe0
 801053e:	d103      	bne.n	8010548 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010540:	6a3b      	ldr	r3, [r7, #32]
 8010542:	3304      	adds	r3, #4
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	e00b      	b.n	8010560 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	6a3b      	ldr	r3, [r7, #32]
 801054e:	3304      	adds	r3, #4
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	429a      	cmp	r2, r3
 8010554:	d002      	beq.n	801055c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010556:	f06f 0303 	mvn.w	r3, #3
 801055a:	e00d      	b.n	8010578 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010560:	887a      	ldrh	r2, [r7, #2]
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	9301      	str	r3, [sp, #4]
 8010566:	6a3b      	ldr	r3, [r7, #32]
 8010568:	9300      	str	r3, [sp, #0]
 801056a:	4613      	mov	r3, r2
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	68b9      	ldr	r1, [r7, #8]
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f000 f811 	bl	8010598 <udp_sendto_if_src>
 8010576:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	080180d8 	.word	0x080180d8
 8010584:	0801824c 	.word	0x0801824c
 8010588:	0801812c 	.word	0x0801812c
 801058c:	08018268 	.word	0x08018268
 8010590:	08018284 	.word	0x08018284
 8010594:	080182a4 	.word	0x080182a4

08010598 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08c      	sub	sp, #48	; 0x30
 801059c:	af04      	add	r7, sp, #16
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d109      	bne.n	80105c0 <udp_sendto_if_src+0x28>
 80105ac:	4b65      	ldr	r3, [pc, #404]	; (8010744 <udp_sendto_if_src+0x1ac>)
 80105ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 80105b2:	4965      	ldr	r1, [pc, #404]	; (8010748 <udp_sendto_if_src+0x1b0>)
 80105b4:	4865      	ldr	r0, [pc, #404]	; (801074c <udp_sendto_if_src+0x1b4>)
 80105b6:	f004 fda7 	bl	8015108 <iprintf>
 80105ba:	f06f 030f 	mvn.w	r3, #15
 80105be:	e0bc      	b.n	801073a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d109      	bne.n	80105da <udp_sendto_if_src+0x42>
 80105c6:	4b5f      	ldr	r3, [pc, #380]	; (8010744 <udp_sendto_if_src+0x1ac>)
 80105c8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80105cc:	4960      	ldr	r1, [pc, #384]	; (8010750 <udp_sendto_if_src+0x1b8>)
 80105ce:	485f      	ldr	r0, [pc, #380]	; (801074c <udp_sendto_if_src+0x1b4>)
 80105d0:	f004 fd9a 	bl	8015108 <iprintf>
 80105d4:	f06f 030f 	mvn.w	r3, #15
 80105d8:	e0af      	b.n	801073a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <udp_sendto_if_src+0x5c>
 80105e0:	4b58      	ldr	r3, [pc, #352]	; (8010744 <udp_sendto_if_src+0x1ac>)
 80105e2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80105e6:	495b      	ldr	r1, [pc, #364]	; (8010754 <udp_sendto_if_src+0x1bc>)
 80105e8:	4858      	ldr	r0, [pc, #352]	; (801074c <udp_sendto_if_src+0x1b4>)
 80105ea:	f004 fd8d 	bl	8015108 <iprintf>
 80105ee:	f06f 030f 	mvn.w	r3, #15
 80105f2:	e0a2      	b.n	801073a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d109      	bne.n	801060e <udp_sendto_if_src+0x76>
 80105fa:	4b52      	ldr	r3, [pc, #328]	; (8010744 <udp_sendto_if_src+0x1ac>)
 80105fc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010600:	4955      	ldr	r1, [pc, #340]	; (8010758 <udp_sendto_if_src+0x1c0>)
 8010602:	4852      	ldr	r0, [pc, #328]	; (801074c <udp_sendto_if_src+0x1b4>)
 8010604:	f004 fd80 	bl	8015108 <iprintf>
 8010608:	f06f 030f 	mvn.w	r3, #15
 801060c:	e095      	b.n	801073a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010610:	2b00      	cmp	r3, #0
 8010612:	d109      	bne.n	8010628 <udp_sendto_if_src+0x90>
 8010614:	4b4b      	ldr	r3, [pc, #300]	; (8010744 <udp_sendto_if_src+0x1ac>)
 8010616:	f240 22d5 	movw	r2, #725	; 0x2d5
 801061a:	4950      	ldr	r1, [pc, #320]	; (801075c <udp_sendto_if_src+0x1c4>)
 801061c:	484b      	ldr	r0, [pc, #300]	; (801074c <udp_sendto_if_src+0x1b4>)
 801061e:	f004 fd73 	bl	8015108 <iprintf>
 8010622:	f06f 030f 	mvn.w	r3, #15
 8010626:	e088      	b.n	801073a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	8a5b      	ldrh	r3, [r3, #18]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10f      	bne.n	8010650 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010630:	68f9      	ldr	r1, [r7, #12]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	8a5b      	ldrh	r3, [r3, #18]
 8010636:	461a      	mov	r2, r3
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 f893 	bl	8010764 <udp_bind>
 801063e:	4603      	mov	r3, r0
 8010640:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010642:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801064a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801064e:	e074      	b.n	801073a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	891b      	ldrh	r3, [r3, #8]
 8010654:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010658:	4293      	cmp	r3, r2
 801065a:	d902      	bls.n	8010662 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801065c:	f04f 33ff 	mov.w	r3, #4294967295
 8010660:	e06b      	b.n	801073a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010662:	2108      	movs	r1, #8
 8010664:	68b8      	ldr	r0, [r7, #8]
 8010666:	f7f9 ff4b 	bl	800a500 <pbuf_add_header>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d015      	beq.n	801069c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010670:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010674:	2108      	movs	r1, #8
 8010676:	2022      	movs	r0, #34	; 0x22
 8010678:	f7f9 fcf4 	bl	800a064 <pbuf_alloc>
 801067c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	e057      	b.n	801073a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	891b      	ldrh	r3, [r3, #8]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d006      	beq.n	80106a0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010692:	68b9      	ldr	r1, [r7, #8]
 8010694:	69f8      	ldr	r0, [r7, #28]
 8010696:	f7fa f8ed 	bl	800a874 <pbuf_chain>
 801069a:	e001      	b.n	80106a0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	895b      	ldrh	r3, [r3, #10]
 80106a4:	2b07      	cmp	r3, #7
 80106a6:	d806      	bhi.n	80106b6 <udp_sendto_if_src+0x11e>
 80106a8:	4b26      	ldr	r3, [pc, #152]	; (8010744 <udp_sendto_if_src+0x1ac>)
 80106aa:	f240 320d 	movw	r2, #781	; 0x30d
 80106ae:	492c      	ldr	r1, [pc, #176]	; (8010760 <udp_sendto_if_src+0x1c8>)
 80106b0:	4826      	ldr	r0, [pc, #152]	; (801074c <udp_sendto_if_src+0x1b4>)
 80106b2:	f004 fd29 	bl	8015108 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	8a5b      	ldrh	r3, [r3, #18]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f8 fc1d 	bl	8008f00 <lwip_htons>
 80106c6:	4603      	mov	r3, r0
 80106c8:	461a      	mov	r2, r3
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80106ce:	887b      	ldrh	r3, [r7, #2]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f8 fc15 	bl	8008f00 <lwip_htons>
 80106d6:	4603      	mov	r3, r0
 80106d8:	461a      	mov	r2, r3
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	2200      	movs	r2, #0
 80106e2:	719a      	strb	r2, [r3, #6]
 80106e4:	2200      	movs	r2, #0
 80106e6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	891b      	ldrh	r3, [r3, #8]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7f8 fc07 	bl	8008f00 <lwip_htons>
 80106f2:	4603      	mov	r3, r0
 80106f4:	461a      	mov	r2, r3
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80106fa:	2311      	movs	r3, #17
 80106fc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	7adb      	ldrb	r3, [r3, #11]
 8010702:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	7a9b      	ldrb	r3, [r3, #10]
 8010708:	7cb9      	ldrb	r1, [r7, #18]
 801070a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801070c:	9202      	str	r2, [sp, #8]
 801070e:	7cfa      	ldrb	r2, [r7, #19]
 8010710:	9201      	str	r2, [sp, #4]
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	460b      	mov	r3, r1
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801071a:	69f8      	ldr	r0, [r7, #28]
 801071c:	f003 fafe 	bl	8013d1c <ip4_output_if_src>
 8010720:	4603      	mov	r3, r0
 8010722:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010724:	69fa      	ldr	r2, [r7, #28]
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	429a      	cmp	r2, r3
 801072a:	d004      	beq.n	8010736 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801072c:	69f8      	ldr	r0, [r7, #28]
 801072e:	f7f9 ff7d 	bl	800a62c <pbuf_free>
    q = NULL;
 8010732:	2300      	movs	r3, #0
 8010734:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010736:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3720      	adds	r7, #32
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	080180d8 	.word	0x080180d8
 8010748:	080182c4 	.word	0x080182c4
 801074c:	0801812c 	.word	0x0801812c
 8010750:	080182e4 	.word	0x080182e4
 8010754:	08018304 	.word	0x08018304
 8010758:	08018328 	.word	0x08018328
 801075c:	0801834c 	.word	0x0801834c
 8010760:	08018370 	.word	0x08018370

08010764 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	4613      	mov	r3, r2
 8010770:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d101      	bne.n	801077c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010778:	4b39      	ldr	r3, [pc, #228]	; (8010860 <udp_bind+0xfc>)
 801077a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d109      	bne.n	8010796 <udp_bind+0x32>
 8010782:	4b38      	ldr	r3, [pc, #224]	; (8010864 <udp_bind+0x100>)
 8010784:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010788:	4937      	ldr	r1, [pc, #220]	; (8010868 <udp_bind+0x104>)
 801078a:	4838      	ldr	r0, [pc, #224]	; (801086c <udp_bind+0x108>)
 801078c:	f004 fcbc 	bl	8015108 <iprintf>
 8010790:	f06f 030f 	mvn.w	r3, #15
 8010794:	e060      	b.n	8010858 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801079a:	4b35      	ldr	r3, [pc, #212]	; (8010870 <udp_bind+0x10c>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	617b      	str	r3, [r7, #20]
 80107a0:	e009      	b.n	80107b6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80107a2:	68fa      	ldr	r2, [r7, #12]
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d102      	bne.n	80107b0 <udp_bind+0x4c>
      rebind = 1;
 80107aa:	2301      	movs	r3, #1
 80107ac:	74fb      	strb	r3, [r7, #19]
      break;
 80107ae:	e005      	b.n	80107bc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	617b      	str	r3, [r7, #20]
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1f2      	bne.n	80107a2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80107bc:	88fb      	ldrh	r3, [r7, #6]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d109      	bne.n	80107d6 <udp_bind+0x72>
    port = udp_new_port();
 80107c2:	f7ff fcc5 	bl	8010150 <udp_new_port>
 80107c6:	4603      	mov	r3, r0
 80107c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80107ca:	88fb      	ldrh	r3, [r7, #6]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d12c      	bne.n	801082a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80107d0:	f06f 0307 	mvn.w	r3, #7
 80107d4:	e040      	b.n	8010858 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107d6:	4b26      	ldr	r3, [pc, #152]	; (8010870 <udp_bind+0x10c>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	617b      	str	r3, [r7, #20]
 80107dc:	e022      	b.n	8010824 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d01b      	beq.n	801081e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	8a5b      	ldrh	r3, [r3, #18]
 80107ea:	88fa      	ldrh	r2, [r7, #6]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d116      	bne.n	801081e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d00d      	beq.n	8010818 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00a      	beq.n	8010818 <udp_bind+0xb4>
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d006      	beq.n	8010818 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801080a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801080c:	2b00      	cmp	r3, #0
 801080e:	d003      	beq.n	8010818 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d102      	bne.n	801081e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010818:	f06f 0307 	mvn.w	r3, #7
 801081c:	e01c      	b.n	8010858 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	617b      	str	r3, [r7, #20]
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1d9      	bne.n	80107de <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <udp_bind+0xd2>
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	e000      	b.n	8010838 <udp_bind+0xd4>
 8010836:	2300      	movs	r3, #0
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	88fa      	ldrh	r2, [r7, #6]
 8010840:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010842:	7cfb      	ldrb	r3, [r7, #19]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d106      	bne.n	8010856 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010848:	4b09      	ldr	r3, [pc, #36]	; (8010870 <udp_bind+0x10c>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010850:	4a07      	ldr	r2, [pc, #28]	; (8010870 <udp_bind+0x10c>)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	08019008 	.word	0x08019008
 8010864:	080180d8 	.word	0x080180d8
 8010868:	080183a0 	.word	0x080183a0
 801086c:	0801812c 	.word	0x0801812c
 8010870:	2000d420 	.word	0x2000d420

08010874 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	4613      	mov	r3, r2
 8010880:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d109      	bne.n	801089c <udp_connect+0x28>
 8010888:	4b2c      	ldr	r3, [pc, #176]	; (801093c <udp_connect+0xc8>)
 801088a:	f240 4235 	movw	r2, #1077	; 0x435
 801088e:	492c      	ldr	r1, [pc, #176]	; (8010940 <udp_connect+0xcc>)
 8010890:	482c      	ldr	r0, [pc, #176]	; (8010944 <udp_connect+0xd0>)
 8010892:	f004 fc39 	bl	8015108 <iprintf>
 8010896:	f06f 030f 	mvn.w	r3, #15
 801089a:	e04b      	b.n	8010934 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d109      	bne.n	80108b6 <udp_connect+0x42>
 80108a2:	4b26      	ldr	r3, [pc, #152]	; (801093c <udp_connect+0xc8>)
 80108a4:	f240 4236 	movw	r2, #1078	; 0x436
 80108a8:	4927      	ldr	r1, [pc, #156]	; (8010948 <udp_connect+0xd4>)
 80108aa:	4826      	ldr	r0, [pc, #152]	; (8010944 <udp_connect+0xd0>)
 80108ac:	f004 fc2c 	bl	8015108 <iprintf>
 80108b0:	f06f 030f 	mvn.w	r3, #15
 80108b4:	e03e      	b.n	8010934 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	8a5b      	ldrh	r3, [r3, #18]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10f      	bne.n	80108de <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80108be:	68f9      	ldr	r1, [r7, #12]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	8a5b      	ldrh	r3, [r3, #18]
 80108c4:	461a      	mov	r2, r3
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f7ff ff4c 	bl	8010764 <udp_bind>
 80108cc:	4603      	mov	r3, r0
 80108ce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80108d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <udp_connect+0x6a>
      return err;
 80108d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108dc:	e02a      	b.n	8010934 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <udp_connect+0x76>
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	e000      	b.n	80108ec <udp_connect+0x78>
 80108ea:	2300      	movs	r3, #0
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	88fa      	ldrh	r2, [r7, #6]
 80108f4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	7c1b      	ldrb	r3, [r3, #16]
 80108fa:	f043 0304 	orr.w	r3, r3, #4
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010904:	4b11      	ldr	r3, [pc, #68]	; (801094c <udp_connect+0xd8>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	617b      	str	r3, [r7, #20]
 801090a:	e008      	b.n	801091e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	429a      	cmp	r2, r3
 8010912:	d101      	bne.n	8010918 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	e00d      	b.n	8010934 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	617b      	str	r3, [r7, #20]
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1f3      	bne.n	801090c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010924:	4b09      	ldr	r3, [pc, #36]	; (801094c <udp_connect+0xd8>)
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801092c:	4a07      	ldr	r2, [pc, #28]	; (801094c <udp_connect+0xd8>)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010932:	2300      	movs	r3, #0
}
 8010934:	4618      	mov	r0, r3
 8010936:	3718      	adds	r7, #24
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	080180d8 	.word	0x080180d8
 8010940:	080183b8 	.word	0x080183b8
 8010944:	0801812c 	.word	0x0801812c
 8010948:	080183d4 	.word	0x080183d4
 801094c:	2000d420 	.word	0x2000d420

08010950 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d107      	bne.n	8010972 <udp_recv+0x22>
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <udp_recv+0x34>)
 8010964:	f240 428a 	movw	r2, #1162	; 0x48a
 8010968:	4907      	ldr	r1, [pc, #28]	; (8010988 <udp_recv+0x38>)
 801096a:	4808      	ldr	r0, [pc, #32]	; (801098c <udp_recv+0x3c>)
 801096c:	f004 fbcc 	bl	8015108 <iprintf>
 8010970:	e005      	b.n	801097e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	61da      	str	r2, [r3, #28]
}
 801097e:	3710      	adds	r7, #16
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	080180d8 	.word	0x080180d8
 8010988:	0801840c 	.word	0x0801840c
 801098c:	0801812c 	.word	0x0801812c

08010990 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d107      	bne.n	80109ae <udp_remove+0x1e>
 801099e:	4b19      	ldr	r3, [pc, #100]	; (8010a04 <udp_remove+0x74>)
 80109a0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80109a4:	4918      	ldr	r1, [pc, #96]	; (8010a08 <udp_remove+0x78>)
 80109a6:	4819      	ldr	r0, [pc, #100]	; (8010a0c <udp_remove+0x7c>)
 80109a8:	f004 fbae 	bl	8015108 <iprintf>
 80109ac:	e026      	b.n	80109fc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80109ae:	4b18      	ldr	r3, [pc, #96]	; (8010a10 <udp_remove+0x80>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d105      	bne.n	80109c4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80109b8:	4b15      	ldr	r3, [pc, #84]	; (8010a10 <udp_remove+0x80>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	4a14      	ldr	r2, [pc, #80]	; (8010a10 <udp_remove+0x80>)
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	e017      	b.n	80109f4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80109c4:	4b12      	ldr	r3, [pc, #72]	; (8010a10 <udp_remove+0x80>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	60fb      	str	r3, [r7, #12]
 80109ca:	e010      	b.n	80109ee <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d009      	beq.n	80109e8 <udp_remove+0x58>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d104      	bne.n	80109e8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68da      	ldr	r2, [r3, #12]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	60da      	str	r2, [r3, #12]
        break;
 80109e6:	e005      	b.n	80109f4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	60fb      	str	r3, [r7, #12]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d1eb      	bne.n	80109cc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80109f4:	6879      	ldr	r1, [r7, #4]
 80109f6:	2000      	movs	r0, #0
 80109f8:	f7f8 ffd0 	bl	800999c <memp_free>
}
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	080180d8 	.word	0x080180d8
 8010a08:	08018424 	.word	0x08018424
 8010a0c:	0801812c 	.word	0x0801812c
 8010a10:	2000d420 	.word	0x2000d420

08010a14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	f7f8 ff48 	bl	80098b0 <memp_malloc>
 8010a20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d007      	beq.n	8010a38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010a28:	2220      	movs	r2, #32
 8010a2a:	2100      	movs	r1, #0
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f004 fbd0 	bl	80151d2 <memset>
    pcb->ttl = UDP_TTL;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	22ff      	movs	r2, #255	; 0xff
 8010a36:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010a38:	687b      	ldr	r3, [r7, #4]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
	...

08010a44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d01e      	beq.n	8010a92 <udp_netif_ip_addr_changed+0x4e>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d01a      	beq.n	8010a92 <udp_netif_ip_addr_changed+0x4e>
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d017      	beq.n	8010a92 <udp_netif_ip_addr_changed+0x4e>
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d013      	beq.n	8010a92 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a6a:	4b0d      	ldr	r3, [pc, #52]	; (8010aa0 <udp_netif_ip_addr_changed+0x5c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	e00c      	b.n	8010a8c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d103      	bne.n	8010a86 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	60fb      	str	r3, [r7, #12]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1ef      	bne.n	8010a72 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010a92:	bf00      	nop
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	2000d420 	.word	0x2000d420

08010aa4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010aa8:	4b20      	ldr	r3, [pc, #128]	; (8010b2c <dhcp_inc_pcb_refcount+0x88>)
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d133      	bne.n	8010b18 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010ab0:	4b1f      	ldr	r3, [pc, #124]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d005      	beq.n	8010ac4 <dhcp_inc_pcb_refcount+0x20>
 8010ab8:	4b1e      	ldr	r3, [pc, #120]	; (8010b34 <dhcp_inc_pcb_refcount+0x90>)
 8010aba:	22e5      	movs	r2, #229	; 0xe5
 8010abc:	491e      	ldr	r1, [pc, #120]	; (8010b38 <dhcp_inc_pcb_refcount+0x94>)
 8010abe:	481f      	ldr	r0, [pc, #124]	; (8010b3c <dhcp_inc_pcb_refcount+0x98>)
 8010ac0:	f004 fb22 	bl	8015108 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010ac4:	f7ff ffa6 	bl	8010a14 <udp_new>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4a19      	ldr	r2, [pc, #100]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010acc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8010ace:	4b18      	ldr	r3, [pc, #96]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d102      	bne.n	8010adc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8010ada:	e024      	b.n	8010b26 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010adc:	4b14      	ldr	r3, [pc, #80]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	7a5a      	ldrb	r2, [r3, #9]
 8010ae2:	4b13      	ldr	r3, [pc, #76]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f042 0220 	orr.w	r2, r2, #32
 8010aea:	b2d2      	uxtb	r2, r2
 8010aec:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010aee:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2244      	movs	r2, #68	; 0x44
 8010af4:	4912      	ldr	r1, [pc, #72]	; (8010b40 <dhcp_inc_pcb_refcount+0x9c>)
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7ff fe34 	bl	8010764 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010afc:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2243      	movs	r2, #67	; 0x43
 8010b02:	490f      	ldr	r1, [pc, #60]	; (8010b40 <dhcp_inc_pcb_refcount+0x9c>)
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff feb5 	bl	8010874 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010b0a:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <dhcp_inc_pcb_refcount+0x8c>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	490c      	ldr	r1, [pc, #48]	; (8010b44 <dhcp_inc_pcb_refcount+0xa0>)
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7ff ff1c 	bl	8010950 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010b18:	4b04      	ldr	r3, [pc, #16]	; (8010b2c <dhcp_inc_pcb_refcount+0x88>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	b2da      	uxtb	r2, r3
 8010b20:	4b02      	ldr	r3, [pc, #8]	; (8010b2c <dhcp_inc_pcb_refcount+0x88>)
 8010b22:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	2000d450 	.word	0x2000d450
 8010b30:	2000d44c 	.word	0x2000d44c
 8010b34:	0801843c 	.word	0x0801843c
 8010b38:	08018474 	.word	0x08018474
 8010b3c:	0801849c 	.word	0x0801849c
 8010b40:	08019008 	.word	0x08019008
 8010b44:	08012365 	.word	0x08012365

08010b48 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010b4c:	4b0e      	ldr	r3, [pc, #56]	; (8010b88 <dhcp_dec_pcb_refcount+0x40>)
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d105      	bne.n	8010b60 <dhcp_dec_pcb_refcount+0x18>
 8010b54:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <dhcp_dec_pcb_refcount+0x44>)
 8010b56:	22ff      	movs	r2, #255	; 0xff
 8010b58:	490d      	ldr	r1, [pc, #52]	; (8010b90 <dhcp_dec_pcb_refcount+0x48>)
 8010b5a:	480e      	ldr	r0, [pc, #56]	; (8010b94 <dhcp_dec_pcb_refcount+0x4c>)
 8010b5c:	f004 fad4 	bl	8015108 <iprintf>
  dhcp_pcb_refcount--;
 8010b60:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <dhcp_dec_pcb_refcount+0x40>)
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	3b01      	subs	r3, #1
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	4b07      	ldr	r3, [pc, #28]	; (8010b88 <dhcp_dec_pcb_refcount+0x40>)
 8010b6a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <dhcp_dec_pcb_refcount+0x40>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d107      	bne.n	8010b84 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010b74:	4b08      	ldr	r3, [pc, #32]	; (8010b98 <dhcp_dec_pcb_refcount+0x50>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff ff09 	bl	8010990 <udp_remove>
    dhcp_pcb = NULL;
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <dhcp_dec_pcb_refcount+0x50>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	601a      	str	r2, [r3, #0]
  }
}
 8010b84:	bf00      	nop
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	2000d450 	.word	0x2000d450
 8010b8c:	0801843c 	.word	0x0801843c
 8010b90:	080184c4 	.word	0x080184c4
 8010b94:	0801849c 	.word	0x0801849c
 8010b98:	2000d44c 	.word	0x2000d44c

08010b9c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010baa:	210c      	movs	r1, #12
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f001 f81b 	bl	8011be8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010bb2:	4b06      	ldr	r3, [pc, #24]	; (8010bcc <dhcp_handle_nak+0x30>)
 8010bb4:	4a05      	ldr	r2, [pc, #20]	; (8010bcc <dhcp_handle_nak+0x30>)
 8010bb6:	4905      	ldr	r1, [pc, #20]	; (8010bcc <dhcp_handle_nak+0x30>)
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7f9 f891 	bl	8009ce0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fc0e 	bl	80113e0 <dhcp_discover>
}
 8010bc4:	bf00      	nop
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	08019008 	.word	0x08019008

08010bd0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bdc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010bde:	2108      	movs	r1, #8
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f001 f801 	bl	8011be8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	331c      	adds	r3, #28
 8010bea:	2200      	movs	r2, #0
 8010bec:	4619      	mov	r1, r3
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f002 fb02 	bl	80131f8 <etharp_query>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	799b      	ldrb	r3, [r3, #6]
 8010bfc:	2bff      	cmp	r3, #255	; 0xff
 8010bfe:	d005      	beq.n	8010c0c <dhcp_check+0x3c>
    dhcp->tries++;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	799b      	ldrb	r3, [r3, #6]
 8010c04:	3301      	adds	r3, #1
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010c0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010c10:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010c12:	893b      	ldrh	r3, [r7, #8]
 8010c14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010c18:	4a06      	ldr	r2, [pc, #24]	; (8010c34 <dhcp_check+0x64>)
 8010c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8010c1e:	1152      	asrs	r2, r2, #5
 8010c20:	17db      	asrs	r3, r3, #31
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010c2a:	bf00      	nop
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	10624dd3 	.word	0x10624dd3

08010c38 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010c48:	4b0c      	ldr	r3, [pc, #48]	; (8010c7c <dhcp_handle_offer+0x44>)
 8010c4a:	789b      	ldrb	r3, [r3, #2]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d011      	beq.n	8010c74 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010c56:	4b0a      	ldr	r3, [pc, #40]	; (8010c80 <dhcp_handle_offer+0x48>)
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7f8 f965 	bl	8008f2a <lwip_htonl>
 8010c60:	4602      	mov	r2, r0
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	691a      	ldr	r2, [r3, #16]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f808 	bl	8010c84 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010c74:	bf00      	nop
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	2000d444 	.word	0x2000d444
 8010c80:	2000d424 	.word	0x2000d424

08010c84 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010c84:	b5b0      	push	{r4, r5, r7, lr}
 8010c86:	b08a      	sub	sp, #40	; 0x28
 8010c88:	af02      	add	r7, sp, #8
 8010c8a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d109      	bne.n	8010ca6 <dhcp_select+0x22>
 8010c92:	4b71      	ldr	r3, [pc, #452]	; (8010e58 <dhcp_select+0x1d4>)
 8010c94:	f240 1277 	movw	r2, #375	; 0x177
 8010c98:	4970      	ldr	r1, [pc, #448]	; (8010e5c <dhcp_select+0x1d8>)
 8010c9a:	4871      	ldr	r0, [pc, #452]	; (8010e60 <dhcp_select+0x1dc>)
 8010c9c:	f004 fa34 	bl	8015108 <iprintf>
 8010ca0:	f06f 030f 	mvn.w	r3, #15
 8010ca4:	e0d3      	b.n	8010e4e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010caa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d109      	bne.n	8010cc6 <dhcp_select+0x42>
 8010cb2:	4b69      	ldr	r3, [pc, #420]	; (8010e58 <dhcp_select+0x1d4>)
 8010cb4:	f240 1279 	movw	r2, #377	; 0x179
 8010cb8:	496a      	ldr	r1, [pc, #424]	; (8010e64 <dhcp_select+0x1e0>)
 8010cba:	4869      	ldr	r0, [pc, #420]	; (8010e60 <dhcp_select+0x1dc>)
 8010cbc:	f004 fa24 	bl	8015108 <iprintf>
 8010cc0:	f06f 0305 	mvn.w	r3, #5
 8010cc4:	e0c3      	b.n	8010e4e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010cc6:	2101      	movs	r1, #1
 8010cc8:	69b8      	ldr	r0, [r7, #24]
 8010cca:	f000 ff8d 	bl	8011be8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010cce:	f107 030c 	add.w	r3, r7, #12
 8010cd2:	2203      	movs	r2, #3
 8010cd4:	69b9      	ldr	r1, [r7, #24]
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f001 fc12 	bl	8012500 <dhcp_create_msg>
 8010cdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f000 8085 	beq.w	8010df0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010cec:	89b8      	ldrh	r0, [r7, #12]
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	2239      	movs	r2, #57	; 0x39
 8010cf8:	f000 ff90 	bl	8011c1c <dhcp_option>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010d00:	89b8      	ldrh	r0, [r7, #12]
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	f000 ffdf 	bl	8011cd0 <dhcp_option_short>
 8010d12:	4603      	mov	r3, r0
 8010d14:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010d16:	89b8      	ldrh	r0, [r7, #12]
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d1e:	2304      	movs	r3, #4
 8010d20:	2232      	movs	r2, #50	; 0x32
 8010d22:	f000 ff7b 	bl	8011c1c <dhcp_option>
 8010d26:	4603      	mov	r3, r0
 8010d28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010d2a:	89bc      	ldrh	r4, [r7, #12]
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	69db      	ldr	r3, [r3, #28]
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f8 f8f7 	bl	8008f2a <lwip_htonl>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	461a      	mov	r2, r3
 8010d40:	4629      	mov	r1, r5
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 fff6 	bl	8011d34 <dhcp_option_long>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010d4c:	89b8      	ldrh	r0, [r7, #12]
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d54:	2304      	movs	r3, #4
 8010d56:	2236      	movs	r2, #54	; 0x36
 8010d58:	f000 ff60 	bl	8011c1c <dhcp_option>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010d60:	89bc      	ldrh	r4, [r7, #12]
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	699b      	ldr	r3, [r3, #24]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7f8 f8dc 	bl	8008f2a <lwip_htonl>
 8010d72:	4603      	mov	r3, r0
 8010d74:	461a      	mov	r2, r3
 8010d76:	4629      	mov	r1, r5
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 ffdb 	bl	8011d34 <dhcp_option_long>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010d82:	89b8      	ldrh	r0, [r7, #12]
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d8a:	2303      	movs	r3, #3
 8010d8c:	2237      	movs	r2, #55	; 0x37
 8010d8e:	f000 ff45 	bl	8011c1c <dhcp_option>
 8010d92:	4603      	mov	r3, r0
 8010d94:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d96:	2300      	movs	r3, #0
 8010d98:	77bb      	strb	r3, [r7, #30]
 8010d9a:	e00e      	b.n	8010dba <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010d9c:	89b8      	ldrh	r0, [r7, #12]
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010da4:	7fbb      	ldrb	r3, [r7, #30]
 8010da6:	4a30      	ldr	r2, [pc, #192]	; (8010e68 <dhcp_select+0x1e4>)
 8010da8:	5cd3      	ldrb	r3, [r2, r3]
 8010daa:	461a      	mov	r2, r3
 8010dac:	f000 ff6a 	bl	8011c84 <dhcp_option_byte>
 8010db0:	4603      	mov	r3, r0
 8010db2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010db4:	7fbb      	ldrb	r3, [r7, #30]
 8010db6:	3301      	adds	r3, #1
 8010db8:	77bb      	strb	r3, [r7, #30]
 8010dba:	7fbb      	ldrb	r3, [r7, #30]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d9ed      	bls.n	8010d9c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010dc0:	89b8      	ldrh	r0, [r7, #12]
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	33f0      	adds	r3, #240	; 0xf0
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f001 fc6f 	bl	80126ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010dce:	4b27      	ldr	r3, [pc, #156]	; (8010e6c <dhcp_select+0x1e8>)
 8010dd0:	6818      	ldr	r0, [r3, #0]
 8010dd2:	4b27      	ldr	r3, [pc, #156]	; (8010e70 <dhcp_select+0x1ec>)
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	2343      	movs	r3, #67	; 0x43
 8010ddc:	4a25      	ldr	r2, [pc, #148]	; (8010e74 <dhcp_select+0x1f0>)
 8010dde:	6979      	ldr	r1, [r7, #20]
 8010de0:	f7ff fbda 	bl	8010598 <udp_sendto_if_src>
 8010de4:	4603      	mov	r3, r0
 8010de6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010de8:	6978      	ldr	r0, [r7, #20]
 8010dea:	f7f9 fc1f 	bl	800a62c <pbuf_free>
 8010dee:	e001      	b.n	8010df4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010df0:	23ff      	movs	r3, #255	; 0xff
 8010df2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	799b      	ldrb	r3, [r3, #6]
 8010df8:	2bff      	cmp	r3, #255	; 0xff
 8010dfa:	d005      	beq.n	8010e08 <dhcp_select+0x184>
    dhcp->tries++;
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	799b      	ldrb	r3, [r3, #6]
 8010e00:	3301      	adds	r3, #1
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	799b      	ldrb	r3, [r3, #6]
 8010e0c:	2b05      	cmp	r3, #5
 8010e0e:	d80d      	bhi.n	8010e2c <dhcp_select+0x1a8>
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	799b      	ldrb	r3, [r3, #6]
 8010e14:	461a      	mov	r2, r3
 8010e16:	2301      	movs	r3, #1
 8010e18:	4093      	lsls	r3, r2
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	0152      	lsls	r2, r2, #5
 8010e20:	1ad2      	subs	r2, r2, r3
 8010e22:	0092      	lsls	r2, r2, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	e001      	b.n	8010e30 <dhcp_select+0x1ac>
 8010e2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010e30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010e32:	89fb      	ldrh	r3, [r7, #14]
 8010e34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010e38:	4a0f      	ldr	r2, [pc, #60]	; (8010e78 <dhcp_select+0x1f4>)
 8010e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8010e3e:	1152      	asrs	r2, r2, #5
 8010e40:	17db      	asrs	r3, r3, #31
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3720      	adds	r7, #32
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bdb0      	pop	{r4, r5, r7, pc}
 8010e56:	bf00      	nop
 8010e58:	0801843c 	.word	0x0801843c
 8010e5c:	080184e8 	.word	0x080184e8
 8010e60:	0801849c 	.word	0x0801849c
 8010e64:	08018504 	.word	0x08018504
 8010e68:	2000001c 	.word	0x2000001c
 8010e6c:	2000d44c 	.word	0x2000d44c
 8010e70:	08019008 	.word	0x08019008
 8010e74:	0801900c 	.word	0x0801900c
 8010e78:	10624dd3 	.word	0x10624dd3

08010e7c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010e82:	4b27      	ldr	r3, [pc, #156]	; (8010f20 <dhcp_coarse_tmr+0xa4>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	607b      	str	r3, [r7, #4]
 8010e88:	e042      	b.n	8010f10 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d039      	beq.n	8010f0a <dhcp_coarse_tmr+0x8e>
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	795b      	ldrb	r3, [r3, #5]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d035      	beq.n	8010f0a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	8a9b      	ldrh	r3, [r3, #20]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d012      	beq.n	8010ecc <dhcp_coarse_tmr+0x50>
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	8a5b      	ldrh	r3, [r3, #18]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	825a      	strh	r2, [r3, #18]
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	8a5a      	ldrh	r2, [r3, #18]
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	8a9b      	ldrh	r3, [r3, #20]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d106      	bne.n	8010ecc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fdf8 	bl	8011ab4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 f96b 	bl	80111a0 <dhcp_start>
 8010eca:	e01e      	b.n	8010f0a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	8a1b      	ldrh	r3, [r3, #16]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00b      	beq.n	8010eec <dhcp_coarse_tmr+0x70>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	8a1b      	ldrh	r3, [r3, #16]
 8010ed8:	1e5a      	subs	r2, r3, #1
 8010eda:	b291      	uxth	r1, r2
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	8211      	strh	r1, [r2, #16]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d103      	bne.n	8010eec <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 f8c7 	bl	8011078 <dhcp_t2_timeout>
 8010eea:	e00e      	b.n	8010f0a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	89db      	ldrh	r3, [r3, #14]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d00a      	beq.n	8010f0a <dhcp_coarse_tmr+0x8e>
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	89db      	ldrh	r3, [r3, #14]
 8010ef8:	1e5a      	subs	r2, r3, #1
 8010efa:	b291      	uxth	r1, r2
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	81d1      	strh	r1, [r2, #14]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d102      	bne.n	8010f0a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 f888 	bl	801101a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	607b      	str	r3, [r7, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1b9      	bne.n	8010e8a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010f16:	bf00      	nop
 8010f18:	bf00      	nop
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	2000d3b8 	.word	0x2000d3b8

08010f24 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010f2a:	4b16      	ldr	r3, [pc, #88]	; (8010f84 <dhcp_fine_tmr+0x60>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	607b      	str	r3, [r7, #4]
 8010f30:	e020      	b.n	8010f74 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f36:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d017      	beq.n	8010f6e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	891b      	ldrh	r3, [r3, #8]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d906      	bls.n	8010f54 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	891b      	ldrh	r3, [r3, #8]
 8010f4a:	3b01      	subs	r3, #1
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	811a      	strh	r2, [r3, #8]
 8010f52:	e00c      	b.n	8010f6e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	891b      	ldrh	r3, [r3, #8]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d108      	bne.n	8010f6e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	891b      	ldrh	r3, [r3, #8]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 f80d 	bl	8010f88 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	607b      	str	r3, [r7, #4]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1db      	bne.n	8010f32 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010f7a:	bf00      	nop
 8010f7c:	bf00      	nop
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	2000d3b8 	.word	0x2000d3b8

08010f88 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	795b      	ldrb	r3, [r3, #5]
 8010f9a:	2b0c      	cmp	r3, #12
 8010f9c:	d003      	beq.n	8010fa6 <dhcp_timeout+0x1e>
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	795b      	ldrb	r3, [r3, #5]
 8010fa2:	2b06      	cmp	r3, #6
 8010fa4:	d103      	bne.n	8010fae <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 fa1a 	bl	80113e0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010fac:	e031      	b.n	8011012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	795b      	ldrb	r3, [r3, #5]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d10e      	bne.n	8010fd4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	799b      	ldrb	r3, [r3, #6]
 8010fba:	2b05      	cmp	r3, #5
 8010fbc:	d803      	bhi.n	8010fc6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ff fe60 	bl	8010c84 <dhcp_select>
}
 8010fc4:	e025      	b.n	8011012 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fd74 	bl	8011ab4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 f8e7 	bl	80111a0 <dhcp_start>
}
 8010fd2:	e01e      	b.n	8011012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	795b      	ldrb	r3, [r3, #5]
 8010fd8:	2b08      	cmp	r3, #8
 8010fda:	d10b      	bne.n	8010ff4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	799b      	ldrb	r3, [r3, #6]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d803      	bhi.n	8010fec <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7ff fdf3 	bl	8010bd0 <dhcp_check>
}
 8010fea:	e012      	b.n	8011012 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fa99 	bl	8011524 <dhcp_bind>
}
 8010ff2:	e00e      	b.n	8011012 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	795b      	ldrb	r3, [r3, #5]
 8010ff8:	2b03      	cmp	r3, #3
 8010ffa:	d10a      	bne.n	8011012 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	799b      	ldrb	r3, [r3, #6]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d803      	bhi.n	801100c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f000 fc9f 	bl	8011948 <dhcp_reboot>
}
 801100a:	e002      	b.n	8011012 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 f9e7 	bl	80113e0 <dhcp_discover>
}
 8011012:	bf00      	nop
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011026:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	795b      	ldrb	r3, [r3, #5]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d007      	beq.n	8011040 <dhcp_t1_timeout+0x26>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	795b      	ldrb	r3, [r3, #5]
 8011034:	2b0a      	cmp	r3, #10
 8011036:	d003      	beq.n	8011040 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801103c:	2b05      	cmp	r3, #5
 801103e:	d117      	bne.n	8011070 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fb49 	bl	80116d8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	899b      	ldrh	r3, [r3, #12]
 801104a:	461a      	mov	r2, r3
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	8a5b      	ldrh	r3, [r3, #18]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	2b01      	cmp	r3, #1
 8011054:	dd0c      	ble.n	8011070 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	899b      	ldrh	r3, [r3, #12]
 801105a:	461a      	mov	r2, r3
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	8a5b      	ldrh	r3, [r3, #18]
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	da00      	bge.n	8011068 <dhcp_t1_timeout+0x4e>
 8011066:	3301      	adds	r3, #1
 8011068:	105b      	asrs	r3, r3, #1
 801106a:	b29a      	uxth	r2, r3
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011070:	bf00      	nop
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011084:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	795b      	ldrb	r3, [r3, #5]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d00b      	beq.n	80110a6 <dhcp_t2_timeout+0x2e>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	795b      	ldrb	r3, [r3, #5]
 8011092:	2b0a      	cmp	r3, #10
 8011094:	d007      	beq.n	80110a6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801109a:	2b05      	cmp	r3, #5
 801109c:	d003      	beq.n	80110a6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	795b      	ldrb	r3, [r3, #5]
 80110a2:	2b04      	cmp	r3, #4
 80110a4:	d117      	bne.n	80110d6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 fbb2 	bl	8011810 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	8a9b      	ldrh	r3, [r3, #20]
 80110b0:	461a      	mov	r2, r3
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	8a5b      	ldrh	r3, [r3, #18]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	dd0c      	ble.n	80110d6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	8a9b      	ldrh	r3, [r3, #20]
 80110c0:	461a      	mov	r2, r3
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	8a5b      	ldrh	r3, [r3, #18]
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	da00      	bge.n	80110ce <dhcp_t2_timeout+0x56>
 80110cc:	3301      	adds	r3, #1
 80110ce:	105b      	asrs	r3, r3, #1
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80110d6:	bf00      	nop
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
	...

080110e0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ee:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80110fc:	4b26      	ldr	r3, [pc, #152]	; (8011198 <dhcp_handle_ack+0xb8>)
 80110fe:	78db      	ldrb	r3, [r3, #3]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d003      	beq.n	801110c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011104:	4b25      	ldr	r3, [pc, #148]	; (801119c <dhcp_handle_ack+0xbc>)
 8011106:	68da      	ldr	r2, [r3, #12]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801110c:	4b22      	ldr	r3, [pc, #136]	; (8011198 <dhcp_handle_ack+0xb8>)
 801110e:	791b      	ldrb	r3, [r3, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d004      	beq.n	801111e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011114:	4b21      	ldr	r3, [pc, #132]	; (801119c <dhcp_handle_ack+0xbc>)
 8011116:	691a      	ldr	r2, [r3, #16]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	62da      	str	r2, [r3, #44]	; 0x2c
 801111c:	e004      	b.n	8011128 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011122:	085a      	lsrs	r2, r3, #1
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011128:	4b1b      	ldr	r3, [pc, #108]	; (8011198 <dhcp_handle_ack+0xb8>)
 801112a:	795b      	ldrb	r3, [r3, #5]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d004      	beq.n	801113a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011130:	4b1a      	ldr	r3, [pc, #104]	; (801119c <dhcp_handle_ack+0xbc>)
 8011132:	695a      	ldr	r2, [r3, #20]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	631a      	str	r2, [r3, #48]	; 0x30
 8011138:	e007      	b.n	801114a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801113e:	4613      	mov	r3, r2
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	1a9b      	subs	r3, r3, r2
 8011144:	08da      	lsrs	r2, r3, #3
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	691a      	ldr	r2, [r3, #16]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011152:	4b11      	ldr	r3, [pc, #68]	; (8011198 <dhcp_handle_ack+0xb8>)
 8011154:	799b      	ldrb	r3, [r3, #6]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00b      	beq.n	8011172 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801115a:	4b10      	ldr	r3, [pc, #64]	; (801119c <dhcp_handle_ack+0xbc>)
 801115c:	699b      	ldr	r3, [r3, #24]
 801115e:	4618      	mov	r0, r3
 8011160:	f7f7 fee3 	bl	8008f2a <lwip_htonl>
 8011164:	4602      	mov	r2, r0
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2201      	movs	r2, #1
 801116e:	71da      	strb	r2, [r3, #7]
 8011170:	e002      	b.n	8011178 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2200      	movs	r2, #0
 8011176:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011178:	4b07      	ldr	r3, [pc, #28]	; (8011198 <dhcp_handle_ack+0xb8>)
 801117a:	79db      	ldrb	r3, [r3, #7]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d007      	beq.n	8011190 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011180:	4b06      	ldr	r3, [pc, #24]	; (801119c <dhcp_handle_ack+0xbc>)
 8011182:	69db      	ldr	r3, [r3, #28]
 8011184:	4618      	mov	r0, r3
 8011186:	f7f7 fed0 	bl	8008f2a <lwip_htonl>
 801118a:	4602      	mov	r2, r0
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011190:	bf00      	nop
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	2000d444 	.word	0x2000d444
 801119c:	2000d424 	.word	0x2000d424

080111a0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d109      	bne.n	80111c2 <dhcp_start+0x22>
 80111ae:	4b37      	ldr	r3, [pc, #220]	; (801128c <dhcp_start+0xec>)
 80111b0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80111b4:	4936      	ldr	r1, [pc, #216]	; (8011290 <dhcp_start+0xf0>)
 80111b6:	4837      	ldr	r0, [pc, #220]	; (8011294 <dhcp_start+0xf4>)
 80111b8:	f003 ffa6 	bl	8015108 <iprintf>
 80111bc:	f06f 030f 	mvn.w	r3, #15
 80111c0:	e060      	b.n	8011284 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111c8:	f003 0301 	and.w	r3, r3, #1
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d109      	bne.n	80111e4 <dhcp_start+0x44>
 80111d0:	4b2e      	ldr	r3, [pc, #184]	; (801128c <dhcp_start+0xec>)
 80111d2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80111d6:	4930      	ldr	r1, [pc, #192]	; (8011298 <dhcp_start+0xf8>)
 80111d8:	482e      	ldr	r0, [pc, #184]	; (8011294 <dhcp_start+0xf4>)
 80111da:	f003 ff95 	bl	8015108 <iprintf>
 80111de:	f06f 030f 	mvn.w	r3, #15
 80111e2:	e04f      	b.n	8011284 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111ee:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80111f2:	d202      	bcs.n	80111fa <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80111f4:	f04f 33ff 	mov.w	r3, #4294967295
 80111f8:	e044      	b.n	8011284 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d10d      	bne.n	801121c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011200:	2034      	movs	r0, #52	; 0x34
 8011202:	f7f8 f9b1 	bl	8009568 <mem_malloc>
 8011206:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d102      	bne.n	8011214 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801120e:	f04f 33ff 	mov.w	r3, #4294967295
 8011212:	e037      	b.n	8011284 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	625a      	str	r2, [r3, #36]	; 0x24
 801121a:	e005      	b.n	8011228 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	791b      	ldrb	r3, [r3, #4]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011224:	f7ff fc90 	bl	8010b48 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011228:	2234      	movs	r2, #52	; 0x34
 801122a:	2100      	movs	r1, #0
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	f003 ffd0 	bl	80151d2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011232:	f7ff fc37 	bl	8010aa4 <dhcp_inc_pcb_refcount>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d002      	beq.n	8011242 <dhcp_start+0xa2>
    return ERR_MEM;
 801123c:	f04f 33ff 	mov.w	r3, #4294967295
 8011240:	e020      	b.n	8011284 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2201      	movs	r2, #1
 8011246:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801124e:	f003 0304 	and.w	r3, r3, #4
 8011252:	2b00      	cmp	r3, #0
 8011254:	d105      	bne.n	8011262 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011256:	2102      	movs	r1, #2
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f000 fcc5 	bl	8011be8 <dhcp_set_state>
    return ERR_OK;
 801125e:	2300      	movs	r3, #0
 8011260:	e010      	b.n	8011284 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 f8bc 	bl	80113e0 <dhcp_discover>
 8011268:	4603      	mov	r3, r0
 801126a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801126c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d005      	beq.n	8011280 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 fc1d 	bl	8011ab4 <dhcp_release_and_stop>
    return ERR_MEM;
 801127a:	f04f 33ff 	mov.w	r3, #4294967295
 801127e:	e001      	b.n	8011284 <dhcp_start+0xe4>
  }
  return result;
 8011280:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3710      	adds	r7, #16
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	0801843c 	.word	0x0801843c
 8011290:	08018520 	.word	0x08018520
 8011294:	0801849c 	.word	0x0801849c
 8011298:	08018564 	.word	0x08018564

0801129c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d107      	bne.n	80112bc <dhcp_arp_reply+0x20>
 80112ac:	4b0e      	ldr	r3, [pc, #56]	; (80112e8 <dhcp_arp_reply+0x4c>)
 80112ae:	f240 328b 	movw	r2, #907	; 0x38b
 80112b2:	490e      	ldr	r1, [pc, #56]	; (80112ec <dhcp_arp_reply+0x50>)
 80112b4:	480e      	ldr	r0, [pc, #56]	; (80112f0 <dhcp_arp_reply+0x54>)
 80112b6:	f003 ff27 	bl	8015108 <iprintf>
 80112ba:	e012      	b.n	80112e2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00c      	beq.n	80112e2 <dhcp_arp_reply+0x46>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	795b      	ldrb	r3, [r3, #5]
 80112cc:	2b08      	cmp	r3, #8
 80112ce:	d108      	bne.n	80112e2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	69db      	ldr	r3, [r3, #28]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d102      	bne.n	80112e2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 f809 	bl	80112f4 <dhcp_decline>
    }
  }
}
 80112e2:	3710      	adds	r7, #16
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	0801843c 	.word	0x0801843c
 80112ec:	08018520 	.word	0x08018520
 80112f0:	0801849c 	.word	0x0801849c

080112f4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80112f4:	b5b0      	push	{r4, r5, r7, lr}
 80112f6:	b08a      	sub	sp, #40	; 0x28
 80112f8:	af02      	add	r7, sp, #8
 80112fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011300:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011302:	210c      	movs	r1, #12
 8011304:	69b8      	ldr	r0, [r7, #24]
 8011306:	f000 fc6f 	bl	8011be8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801130a:	f107 030c 	add.w	r3, r7, #12
 801130e:	2204      	movs	r2, #4
 8011310:	69b9      	ldr	r1, [r7, #24]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f001 f8f4 	bl	8012500 <dhcp_create_msg>
 8011318:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d035      	beq.n	801138c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011326:	89b8      	ldrh	r0, [r7, #12]
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801132e:	2304      	movs	r3, #4
 8011330:	2232      	movs	r2, #50	; 0x32
 8011332:	f000 fc73 	bl	8011c1c <dhcp_option>
 8011336:	4603      	mov	r3, r0
 8011338:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801133a:	89bc      	ldrh	r4, [r7, #12]
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	69db      	ldr	r3, [r3, #28]
 8011346:	4618      	mov	r0, r3
 8011348:	f7f7 fdef 	bl	8008f2a <lwip_htonl>
 801134c:	4603      	mov	r3, r0
 801134e:	461a      	mov	r2, r3
 8011350:	4629      	mov	r1, r5
 8011352:	4620      	mov	r0, r4
 8011354:	f000 fcee 	bl	8011d34 <dhcp_option_long>
 8011358:	4603      	mov	r3, r0
 801135a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801135c:	89b8      	ldrh	r0, [r7, #12]
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	33f0      	adds	r3, #240	; 0xf0
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	4619      	mov	r1, r3
 8011366:	f001 f9a1 	bl	80126ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801136a:	4b19      	ldr	r3, [pc, #100]	; (80113d0 <dhcp_decline+0xdc>)
 801136c:	6818      	ldr	r0, [r3, #0]
 801136e:	4b19      	ldr	r3, [pc, #100]	; (80113d4 <dhcp_decline+0xe0>)
 8011370:	9301      	str	r3, [sp, #4]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	2343      	movs	r3, #67	; 0x43
 8011378:	4a17      	ldr	r2, [pc, #92]	; (80113d8 <dhcp_decline+0xe4>)
 801137a:	6979      	ldr	r1, [r7, #20]
 801137c:	f7ff f90c 	bl	8010598 <udp_sendto_if_src>
 8011380:	4603      	mov	r3, r0
 8011382:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011384:	6978      	ldr	r0, [r7, #20]
 8011386:	f7f9 f951 	bl	800a62c <pbuf_free>
 801138a:	e001      	b.n	8011390 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801138c:	23ff      	movs	r3, #255	; 0xff
 801138e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011390:	69bb      	ldr	r3, [r7, #24]
 8011392:	799b      	ldrb	r3, [r3, #6]
 8011394:	2bff      	cmp	r3, #255	; 0xff
 8011396:	d005      	beq.n	80113a4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	799b      	ldrb	r3, [r3, #6]
 801139c:	3301      	adds	r3, #1
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80113a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80113a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80113aa:	89fb      	ldrh	r3, [r7, #14]
 80113ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80113b0:	4a0a      	ldr	r2, [pc, #40]	; (80113dc <dhcp_decline+0xe8>)
 80113b2:	fb82 1203 	smull	r1, r2, r2, r3
 80113b6:	1152      	asrs	r2, r2, #5
 80113b8:	17db      	asrs	r3, r3, #31
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	b29a      	uxth	r2, r3
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80113c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3720      	adds	r7, #32
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bdb0      	pop	{r4, r5, r7, pc}
 80113ce:	bf00      	nop
 80113d0:	2000d44c 	.word	0x2000d44c
 80113d4:	08019008 	.word	0x08019008
 80113d8:	0801900c 	.word	0x0801900c
 80113dc:	10624dd3 	.word	0x10624dd3

080113e0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b08a      	sub	sp, #40	; 0x28
 80113e4:	af02      	add	r7, sp, #8
 80113e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ec:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80113ee:	2300      	movs	r3, #0
 80113f0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	2200      	movs	r2, #0
 80113f6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80113f8:	2106      	movs	r1, #6
 80113fa:	69b8      	ldr	r0, [r7, #24]
 80113fc:	f000 fbf4 	bl	8011be8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011400:	f107 0308 	add.w	r3, r7, #8
 8011404:	2201      	movs	r2, #1
 8011406:	69b9      	ldr	r1, [r7, #24]
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f001 f879 	bl	8012500 <dhcp_create_msg>
 801140e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d04b      	beq.n	80114ae <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801141c:	8938      	ldrh	r0, [r7, #8]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011424:	2302      	movs	r3, #2
 8011426:	2239      	movs	r2, #57	; 0x39
 8011428:	f000 fbf8 	bl	8011c1c <dhcp_option>
 801142c:	4603      	mov	r3, r0
 801142e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011430:	8938      	ldrh	r0, [r7, #8]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801143c:	461a      	mov	r2, r3
 801143e:	f000 fc47 	bl	8011cd0 <dhcp_option_short>
 8011442:	4603      	mov	r3, r0
 8011444:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011446:	8938      	ldrh	r0, [r7, #8]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801144e:	2303      	movs	r3, #3
 8011450:	2237      	movs	r2, #55	; 0x37
 8011452:	f000 fbe3 	bl	8011c1c <dhcp_option>
 8011456:	4603      	mov	r3, r0
 8011458:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801145a:	2300      	movs	r3, #0
 801145c:	77fb      	strb	r3, [r7, #31]
 801145e:	e00e      	b.n	801147e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011460:	8938      	ldrh	r0, [r7, #8]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011468:	7ffb      	ldrb	r3, [r7, #31]
 801146a:	4a29      	ldr	r2, [pc, #164]	; (8011510 <dhcp_discover+0x130>)
 801146c:	5cd3      	ldrb	r3, [r2, r3]
 801146e:	461a      	mov	r2, r3
 8011470:	f000 fc08 	bl	8011c84 <dhcp_option_byte>
 8011474:	4603      	mov	r3, r0
 8011476:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011478:	7ffb      	ldrb	r3, [r7, #31]
 801147a:	3301      	adds	r3, #1
 801147c:	77fb      	strb	r3, [r7, #31]
 801147e:	7ffb      	ldrb	r3, [r7, #31]
 8011480:	2b02      	cmp	r3, #2
 8011482:	d9ed      	bls.n	8011460 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011484:	8938      	ldrh	r0, [r7, #8]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	33f0      	adds	r3, #240	; 0xf0
 801148a:	693a      	ldr	r2, [r7, #16]
 801148c:	4619      	mov	r1, r3
 801148e:	f001 f90d 	bl	80126ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011492:	4b20      	ldr	r3, [pc, #128]	; (8011514 <dhcp_discover+0x134>)
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	4b20      	ldr	r3, [pc, #128]	; (8011518 <dhcp_discover+0x138>)
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	2343      	movs	r3, #67	; 0x43
 80114a0:	4a1e      	ldr	r2, [pc, #120]	; (801151c <dhcp_discover+0x13c>)
 80114a2:	6939      	ldr	r1, [r7, #16]
 80114a4:	f7ff f878 	bl	8010598 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80114a8:	6938      	ldr	r0, [r7, #16]
 80114aa:	f7f9 f8bf 	bl	800a62c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	799b      	ldrb	r3, [r3, #6]
 80114b2:	2bff      	cmp	r3, #255	; 0xff
 80114b4:	d005      	beq.n	80114c2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	799b      	ldrb	r3, [r3, #6]
 80114ba:	3301      	adds	r3, #1
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	799b      	ldrb	r3, [r3, #6]
 80114c6:	2b05      	cmp	r3, #5
 80114c8:	d80d      	bhi.n	80114e6 <dhcp_discover+0x106>
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	799b      	ldrb	r3, [r3, #6]
 80114ce:	461a      	mov	r2, r3
 80114d0:	2301      	movs	r3, #1
 80114d2:	4093      	lsls	r3, r2
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	461a      	mov	r2, r3
 80114d8:	0152      	lsls	r2, r2, #5
 80114da:	1ad2      	subs	r2, r2, r3
 80114dc:	0092      	lsls	r2, r2, #2
 80114de:	4413      	add	r3, r2
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	e001      	b.n	80114ea <dhcp_discover+0x10a>
 80114e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80114ea:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80114ec:	897b      	ldrh	r3, [r7, #10]
 80114ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80114f2:	4a0b      	ldr	r2, [pc, #44]	; (8011520 <dhcp_discover+0x140>)
 80114f4:	fb82 1203 	smull	r1, r2, r2, r3
 80114f8:	1152      	asrs	r2, r2, #5
 80114fa:	17db      	asrs	r3, r3, #31
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	b29a      	uxth	r2, r3
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011504:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011508:	4618      	mov	r0, r3
 801150a:	3720      	adds	r7, #32
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	2000001c 	.word	0x2000001c
 8011514:	2000d44c 	.word	0x2000d44c
 8011518:	08019008 	.word	0x08019008
 801151c:	0801900c 	.word	0x0801900c
 8011520:	10624dd3 	.word	0x10624dd3

08011524 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d107      	bne.n	8011542 <dhcp_bind+0x1e>
 8011532:	4b64      	ldr	r3, [pc, #400]	; (80116c4 <dhcp_bind+0x1a0>)
 8011534:	f240 4215 	movw	r2, #1045	; 0x415
 8011538:	4963      	ldr	r1, [pc, #396]	; (80116c8 <dhcp_bind+0x1a4>)
 801153a:	4864      	ldr	r0, [pc, #400]	; (80116cc <dhcp_bind+0x1a8>)
 801153c:	f003 fde4 	bl	8015108 <iprintf>
 8011540:	e0bc      	b.n	80116bc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011546:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d107      	bne.n	801155e <dhcp_bind+0x3a>
 801154e:	4b5d      	ldr	r3, [pc, #372]	; (80116c4 <dhcp_bind+0x1a0>)
 8011550:	f240 4217 	movw	r2, #1047	; 0x417
 8011554:	495e      	ldr	r1, [pc, #376]	; (80116d0 <dhcp_bind+0x1ac>)
 8011556:	485d      	ldr	r0, [pc, #372]	; (80116cc <dhcp_bind+0x1a8>)
 8011558:	f003 fdd6 	bl	8015108 <iprintf>
 801155c:	e0ae      	b.n	80116bc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	2200      	movs	r2, #0
 8011562:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801156c:	d019      	beq.n	80115a2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011572:	331e      	adds	r3, #30
 8011574:	4a57      	ldr	r2, [pc, #348]	; (80116d4 <dhcp_bind+0x1b0>)
 8011576:	fba2 2303 	umull	r2, r3, r2, r3
 801157a:	095b      	lsrs	r3, r3, #5
 801157c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011584:	d302      	bcc.n	801158c <dhcp_bind+0x68>
      timeout = 0xffff;
 8011586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801158a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801158c:	69fb      	ldr	r3, [r7, #28]
 801158e:	b29a      	uxth	r2, r3
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	8a9b      	ldrh	r3, [r3, #20]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d102      	bne.n	80115a2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	2201      	movs	r2, #1
 80115a0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115aa:	d01d      	beq.n	80115e8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b0:	331e      	adds	r3, #30
 80115b2:	4a48      	ldr	r2, [pc, #288]	; (80116d4 <dhcp_bind+0x1b0>)
 80115b4:	fba2 2303 	umull	r2, r3, r2, r3
 80115b8:	095b      	lsrs	r3, r3, #5
 80115ba:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115c2:	d302      	bcc.n	80115ca <dhcp_bind+0xa6>
      timeout = 0xffff;
 80115c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115c8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	895b      	ldrh	r3, [r3, #10]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d102      	bne.n	80115e0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	2201      	movs	r2, #1
 80115de:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	895a      	ldrh	r2, [r3, #10]
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80115e8:	69bb      	ldr	r3, [r7, #24]
 80115ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f0:	d01d      	beq.n	801162e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f6:	331e      	adds	r3, #30
 80115f8:	4a36      	ldr	r2, [pc, #216]	; (80116d4 <dhcp_bind+0x1b0>)
 80115fa:	fba2 2303 	umull	r2, r3, r2, r3
 80115fe:	095b      	lsrs	r3, r3, #5
 8011600:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011608:	d302      	bcc.n	8011610 <dhcp_bind+0xec>
      timeout = 0xffff;
 801160a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801160e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	b29a      	uxth	r2, r3
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	899b      	ldrh	r3, [r3, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d102      	bne.n	8011626 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	2201      	movs	r2, #1
 8011624:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	899a      	ldrh	r2, [r3, #12]
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	895a      	ldrh	r2, [r3, #10]
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	429a      	cmp	r2, r3
 8011638:	d306      	bcc.n	8011648 <dhcp_bind+0x124>
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	899b      	ldrh	r3, [r3, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d002      	beq.n	8011648 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	2200      	movs	r2, #0
 8011646:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011648:	69bb      	ldr	r3, [r7, #24]
 801164a:	79db      	ldrb	r3, [r3, #7]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d003      	beq.n	8011658 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	6a1b      	ldr	r3, [r3, #32]
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	e014      	b.n	8011682 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	331c      	adds	r3, #28
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011664:	2b00      	cmp	r3, #0
 8011666:	db02      	blt.n	801166e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011668:	23ff      	movs	r3, #255	; 0xff
 801166a:	613b      	str	r3, [r7, #16]
 801166c:	e009      	b.n	8011682 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801166e:	7dfb      	ldrb	r3, [r7, #23]
 8011670:	2bbf      	cmp	r3, #191	; 0xbf
 8011672:	d903      	bls.n	801167c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011674:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011678:	613b      	str	r3, [r7, #16]
 801167a:	e002      	b.n	8011682 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801167c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011680:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011686:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d108      	bne.n	80116a0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	69da      	ldr	r2, [r3, #28]
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	4013      	ands	r3, r2
 8011696:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801169e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80116a0:	210a      	movs	r1, #10
 80116a2:	69b8      	ldr	r0, [r7, #24]
 80116a4:	f000 faa0 	bl	8011be8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	f103 011c 	add.w	r1, r3, #28
 80116ae:	f107 030c 	add.w	r3, r7, #12
 80116b2:	f107 0210 	add.w	r2, r7, #16
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7f8 fb12 	bl	8009ce0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	0801843c 	.word	0x0801843c
 80116c8:	0801859c 	.word	0x0801859c
 80116cc:	0801849c 	.word	0x0801849c
 80116d0:	080185b8 	.word	0x080185b8
 80116d4:	88888889 	.word	0x88888889

080116d8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08a      	sub	sp, #40	; 0x28
 80116dc:	af02      	add	r7, sp, #8
 80116de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80116e6:	2105      	movs	r1, #5
 80116e8:	69b8      	ldr	r0, [r7, #24]
 80116ea:	f000 fa7d 	bl	8011be8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	2203      	movs	r2, #3
 80116f4:	69b9      	ldr	r1, [r7, #24]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 ff02 	bl	8012500 <dhcp_create_msg>
 80116fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d04e      	beq.n	80117a2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801170a:	89b8      	ldrh	r0, [r7, #12]
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011712:	2302      	movs	r3, #2
 8011714:	2239      	movs	r2, #57	; 0x39
 8011716:	f000 fa81 	bl	8011c1c <dhcp_option>
 801171a:	4603      	mov	r3, r0
 801171c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801171e:	89b8      	ldrh	r0, [r7, #12]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801172a:	461a      	mov	r2, r3
 801172c:	f000 fad0 	bl	8011cd0 <dhcp_option_short>
 8011730:	4603      	mov	r3, r0
 8011732:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011734:	89b8      	ldrh	r0, [r7, #12]
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801173c:	2303      	movs	r3, #3
 801173e:	2237      	movs	r2, #55	; 0x37
 8011740:	f000 fa6c 	bl	8011c1c <dhcp_option>
 8011744:	4603      	mov	r3, r0
 8011746:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011748:	2300      	movs	r3, #0
 801174a:	77bb      	strb	r3, [r7, #30]
 801174c:	e00e      	b.n	801176c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801174e:	89b8      	ldrh	r0, [r7, #12]
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011756:	7fbb      	ldrb	r3, [r7, #30]
 8011758:	4a2a      	ldr	r2, [pc, #168]	; (8011804 <dhcp_renew+0x12c>)
 801175a:	5cd3      	ldrb	r3, [r2, r3]
 801175c:	461a      	mov	r2, r3
 801175e:	f000 fa91 	bl	8011c84 <dhcp_option_byte>
 8011762:	4603      	mov	r3, r0
 8011764:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011766:	7fbb      	ldrb	r3, [r7, #30]
 8011768:	3301      	adds	r3, #1
 801176a:	77bb      	strb	r3, [r7, #30]
 801176c:	7fbb      	ldrb	r3, [r7, #30]
 801176e:	2b02      	cmp	r3, #2
 8011770:	d9ed      	bls.n	801174e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011772:	89b8      	ldrh	r0, [r7, #12]
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	33f0      	adds	r3, #240	; 0xf0
 8011778:	697a      	ldr	r2, [r7, #20]
 801177a:	4619      	mov	r1, r3
 801177c:	f000 ff96 	bl	80126ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011780:	4b21      	ldr	r3, [pc, #132]	; (8011808 <dhcp_renew+0x130>)
 8011782:	6818      	ldr	r0, [r3, #0]
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	f103 0218 	add.w	r2, r3, #24
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	2343      	movs	r3, #67	; 0x43
 8011790:	6979      	ldr	r1, [r7, #20]
 8011792:	f7fe fe8d 	bl	80104b0 <udp_sendto_if>
 8011796:	4603      	mov	r3, r0
 8011798:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801179a:	6978      	ldr	r0, [r7, #20]
 801179c:	f7f8 ff46 	bl	800a62c <pbuf_free>
 80117a0:	e001      	b.n	80117a6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80117a2:	23ff      	movs	r3, #255	; 0xff
 80117a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	799b      	ldrb	r3, [r3, #6]
 80117aa:	2bff      	cmp	r3, #255	; 0xff
 80117ac:	d005      	beq.n	80117ba <dhcp_renew+0xe2>
    dhcp->tries++;
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	799b      	ldrb	r3, [r3, #6]
 80117b2:	3301      	adds	r3, #1
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80117ba:	69bb      	ldr	r3, [r7, #24]
 80117bc:	799b      	ldrb	r3, [r3, #6]
 80117be:	2b09      	cmp	r3, #9
 80117c0:	d80a      	bhi.n	80117d8 <dhcp_renew+0x100>
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	799b      	ldrb	r3, [r3, #6]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	461a      	mov	r2, r3
 80117ca:	0152      	lsls	r2, r2, #5
 80117cc:	1ad2      	subs	r2, r2, r3
 80117ce:	0092      	lsls	r2, r2, #2
 80117d0:	4413      	add	r3, r2
 80117d2:	011b      	lsls	r3, r3, #4
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	e001      	b.n	80117dc <dhcp_renew+0x104>
 80117d8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80117dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117de:	89fb      	ldrh	r3, [r7, #14]
 80117e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80117e4:	4a09      	ldr	r2, [pc, #36]	; (801180c <dhcp_renew+0x134>)
 80117e6:	fb82 1203 	smull	r1, r2, r2, r3
 80117ea:	1152      	asrs	r2, r2, #5
 80117ec:	17db      	asrs	r3, r3, #31
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80117f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3720      	adds	r7, #32
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	2000001c 	.word	0x2000001c
 8011808:	2000d44c 	.word	0x2000d44c
 801180c:	10624dd3 	.word	0x10624dd3

08011810 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b08a      	sub	sp, #40	; 0x28
 8011814:	af02      	add	r7, sp, #8
 8011816:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801181e:	2104      	movs	r1, #4
 8011820:	69b8      	ldr	r0, [r7, #24]
 8011822:	f000 f9e1 	bl	8011be8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011826:	f107 030c 	add.w	r3, r7, #12
 801182a:	2203      	movs	r2, #3
 801182c:	69b9      	ldr	r1, [r7, #24]
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fe66 	bl	8012500 <dhcp_create_msg>
 8011834:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d04c      	beq.n	80118d6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011842:	89b8      	ldrh	r0, [r7, #12]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801184a:	2302      	movs	r3, #2
 801184c:	2239      	movs	r2, #57	; 0x39
 801184e:	f000 f9e5 	bl	8011c1c <dhcp_option>
 8011852:	4603      	mov	r3, r0
 8011854:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011856:	89b8      	ldrh	r0, [r7, #12]
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011862:	461a      	mov	r2, r3
 8011864:	f000 fa34 	bl	8011cd0 <dhcp_option_short>
 8011868:	4603      	mov	r3, r0
 801186a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801186c:	89b8      	ldrh	r0, [r7, #12]
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011874:	2303      	movs	r3, #3
 8011876:	2237      	movs	r2, #55	; 0x37
 8011878:	f000 f9d0 	bl	8011c1c <dhcp_option>
 801187c:	4603      	mov	r3, r0
 801187e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011880:	2300      	movs	r3, #0
 8011882:	77bb      	strb	r3, [r7, #30]
 8011884:	e00e      	b.n	80118a4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011886:	89b8      	ldrh	r0, [r7, #12]
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801188e:	7fbb      	ldrb	r3, [r7, #30]
 8011890:	4a29      	ldr	r2, [pc, #164]	; (8011938 <dhcp_rebind+0x128>)
 8011892:	5cd3      	ldrb	r3, [r2, r3]
 8011894:	461a      	mov	r2, r3
 8011896:	f000 f9f5 	bl	8011c84 <dhcp_option_byte>
 801189a:	4603      	mov	r3, r0
 801189c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801189e:	7fbb      	ldrb	r3, [r7, #30]
 80118a0:	3301      	adds	r3, #1
 80118a2:	77bb      	strb	r3, [r7, #30]
 80118a4:	7fbb      	ldrb	r3, [r7, #30]
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	d9ed      	bls.n	8011886 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118aa:	89b8      	ldrh	r0, [r7, #12]
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	33f0      	adds	r3, #240	; 0xf0
 80118b0:	697a      	ldr	r2, [r7, #20]
 80118b2:	4619      	mov	r1, r3
 80118b4:	f000 fefa 	bl	80126ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80118b8:	4b20      	ldr	r3, [pc, #128]	; (801193c <dhcp_rebind+0x12c>)
 80118ba:	6818      	ldr	r0, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	9300      	str	r3, [sp, #0]
 80118c0:	2343      	movs	r3, #67	; 0x43
 80118c2:	4a1f      	ldr	r2, [pc, #124]	; (8011940 <dhcp_rebind+0x130>)
 80118c4:	6979      	ldr	r1, [r7, #20]
 80118c6:	f7fe fdf3 	bl	80104b0 <udp_sendto_if>
 80118ca:	4603      	mov	r3, r0
 80118cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80118ce:	6978      	ldr	r0, [r7, #20]
 80118d0:	f7f8 feac 	bl	800a62c <pbuf_free>
 80118d4:	e001      	b.n	80118da <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80118d6:	23ff      	movs	r3, #255	; 0xff
 80118d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	799b      	ldrb	r3, [r3, #6]
 80118de:	2bff      	cmp	r3, #255	; 0xff
 80118e0:	d005      	beq.n	80118ee <dhcp_rebind+0xde>
    dhcp->tries++;
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	799b      	ldrb	r3, [r3, #6]
 80118e6:	3301      	adds	r3, #1
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	799b      	ldrb	r3, [r3, #6]
 80118f2:	2b09      	cmp	r3, #9
 80118f4:	d80a      	bhi.n	801190c <dhcp_rebind+0xfc>
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	799b      	ldrb	r3, [r3, #6]
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	461a      	mov	r2, r3
 80118fe:	0152      	lsls	r2, r2, #5
 8011900:	1ad2      	subs	r2, r2, r3
 8011902:	0092      	lsls	r2, r2, #2
 8011904:	4413      	add	r3, r2
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	b29b      	uxth	r3, r3
 801190a:	e001      	b.n	8011910 <dhcp_rebind+0x100>
 801190c:	f242 7310 	movw	r3, #10000	; 0x2710
 8011910:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011912:	89fb      	ldrh	r3, [r7, #14]
 8011914:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011918:	4a0a      	ldr	r2, [pc, #40]	; (8011944 <dhcp_rebind+0x134>)
 801191a:	fb82 1203 	smull	r1, r2, r2, r3
 801191e:	1152      	asrs	r2, r2, #5
 8011920:	17db      	asrs	r3, r3, #31
 8011922:	1ad3      	subs	r3, r2, r3
 8011924:	b29a      	uxth	r2, r3
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801192a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3720      	adds	r7, #32
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	2000001c 	.word	0x2000001c
 801193c:	2000d44c 	.word	0x2000d44c
 8011940:	0801900c 	.word	0x0801900c
 8011944:	10624dd3 	.word	0x10624dd3

08011948 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011948:	b5b0      	push	{r4, r5, r7, lr}
 801194a:	b08a      	sub	sp, #40	; 0x28
 801194c:	af02      	add	r7, sp, #8
 801194e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011956:	2103      	movs	r1, #3
 8011958:	69b8      	ldr	r0, [r7, #24]
 801195a:	f000 f945 	bl	8011be8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801195e:	f107 030c 	add.w	r3, r7, #12
 8011962:	2203      	movs	r2, #3
 8011964:	69b9      	ldr	r1, [r7, #24]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fdca 	bl	8012500 <dhcp_create_msg>
 801196c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d066      	beq.n	8011a42 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801197a:	89b8      	ldrh	r0, [r7, #12]
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011982:	2302      	movs	r3, #2
 8011984:	2239      	movs	r2, #57	; 0x39
 8011986:	f000 f949 	bl	8011c1c <dhcp_option>
 801198a:	4603      	mov	r3, r0
 801198c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801198e:	89b8      	ldrh	r0, [r7, #12]
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	33f0      	adds	r3, #240	; 0xf0
 8011994:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011998:	4619      	mov	r1, r3
 801199a:	f000 f999 	bl	8011cd0 <dhcp_option_short>
 801199e:	4603      	mov	r3, r0
 80119a0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80119a2:	89b8      	ldrh	r0, [r7, #12]
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119aa:	2304      	movs	r3, #4
 80119ac:	2232      	movs	r2, #50	; 0x32
 80119ae:	f000 f935 	bl	8011c1c <dhcp_option>
 80119b2:	4603      	mov	r3, r0
 80119b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80119b6:	89bc      	ldrh	r4, [r7, #12]
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	69db      	ldr	r3, [r3, #28]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7f7 fab1 	bl	8008f2a <lwip_htonl>
 80119c8:	4603      	mov	r3, r0
 80119ca:	461a      	mov	r2, r3
 80119cc:	4629      	mov	r1, r5
 80119ce:	4620      	mov	r0, r4
 80119d0:	f000 f9b0 	bl	8011d34 <dhcp_option_long>
 80119d4:	4603      	mov	r3, r0
 80119d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80119d8:	89b8      	ldrh	r0, [r7, #12]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119e0:	2303      	movs	r3, #3
 80119e2:	2237      	movs	r2, #55	; 0x37
 80119e4:	f000 f91a 	bl	8011c1c <dhcp_option>
 80119e8:	4603      	mov	r3, r0
 80119ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80119ec:	2300      	movs	r3, #0
 80119ee:	77bb      	strb	r3, [r7, #30]
 80119f0:	e00e      	b.n	8011a10 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80119f2:	89b8      	ldrh	r0, [r7, #12]
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119fa:	7fbb      	ldrb	r3, [r7, #30]
 80119fc:	4a29      	ldr	r2, [pc, #164]	; (8011aa4 <dhcp_reboot+0x15c>)
 80119fe:	5cd3      	ldrb	r3, [r2, r3]
 8011a00:	461a      	mov	r2, r3
 8011a02:	f000 f93f 	bl	8011c84 <dhcp_option_byte>
 8011a06:	4603      	mov	r3, r0
 8011a08:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a0a:	7fbb      	ldrb	r3, [r7, #30]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	77bb      	strb	r3, [r7, #30]
 8011a10:	7fbb      	ldrb	r3, [r7, #30]
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d9ed      	bls.n	80119f2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011a16:	89b8      	ldrh	r0, [r7, #12]
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	33f0      	adds	r3, #240	; 0xf0
 8011a1c:	697a      	ldr	r2, [r7, #20]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	f000 fe44 	bl	80126ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011a24:	4b20      	ldr	r3, [pc, #128]	; (8011aa8 <dhcp_reboot+0x160>)
 8011a26:	6818      	ldr	r0, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	9300      	str	r3, [sp, #0]
 8011a2c:	2343      	movs	r3, #67	; 0x43
 8011a2e:	4a1f      	ldr	r2, [pc, #124]	; (8011aac <dhcp_reboot+0x164>)
 8011a30:	6979      	ldr	r1, [r7, #20]
 8011a32:	f7fe fd3d 	bl	80104b0 <udp_sendto_if>
 8011a36:	4603      	mov	r3, r0
 8011a38:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011a3a:	6978      	ldr	r0, [r7, #20]
 8011a3c:	f7f8 fdf6 	bl	800a62c <pbuf_free>
 8011a40:	e001      	b.n	8011a46 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011a42:	23ff      	movs	r3, #255	; 0xff
 8011a44:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	799b      	ldrb	r3, [r3, #6]
 8011a4a:	2bff      	cmp	r3, #255	; 0xff
 8011a4c:	d005      	beq.n	8011a5a <dhcp_reboot+0x112>
    dhcp->tries++;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	799b      	ldrb	r3, [r3, #6]
 8011a52:	3301      	adds	r3, #1
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	799b      	ldrb	r3, [r3, #6]
 8011a5e:	2b09      	cmp	r3, #9
 8011a60:	d80a      	bhi.n	8011a78 <dhcp_reboot+0x130>
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	799b      	ldrb	r3, [r3, #6]
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	461a      	mov	r2, r3
 8011a6a:	0152      	lsls	r2, r2, #5
 8011a6c:	1ad2      	subs	r2, r2, r3
 8011a6e:	0092      	lsls	r2, r2, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	e001      	b.n	8011a7c <dhcp_reboot+0x134>
 8011a78:	f242 7310 	movw	r3, #10000	; 0x2710
 8011a7c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011a7e:	89fb      	ldrh	r3, [r7, #14]
 8011a80:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011a84:	4a0a      	ldr	r2, [pc, #40]	; (8011ab0 <dhcp_reboot+0x168>)
 8011a86:	fb82 1203 	smull	r1, r2, r2, r3
 8011a8a:	1152      	asrs	r2, r2, #5
 8011a8c:	17db      	asrs	r3, r3, #31
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	b29a      	uxth	r2, r3
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3720      	adds	r7, #32
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	2000001c 	.word	0x2000001c
 8011aa8:	2000d44c 	.word	0x2000d44c
 8011aac:	0801900c 	.word	0x0801900c
 8011ab0:	10624dd3 	.word	0x10624dd3

08011ab4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011ab4:	b5b0      	push	{r4, r5, r7, lr}
 8011ab6:	b08a      	sub	sp, #40	; 0x28
 8011ab8:	af02      	add	r7, sp, #8
 8011aba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f000 8084 	beq.w	8011bd2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	795b      	ldrb	r3, [r3, #5]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 8081 	beq.w	8011bd6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	2200      	movs	r2, #0
 8011ade:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	2200      	movs	r2, #0
 8011af0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	2200      	movs	r2, #0
 8011af6:	631a      	str	r2, [r3, #48]	; 0x30
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	829a      	strh	r2, [r3, #20]
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	8a9a      	ldrh	r2, [r3, #20]
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	825a      	strh	r2, [r3, #18]
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	8a5a      	ldrh	r2, [r3, #18]
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	821a      	strh	r2, [r3, #16]
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	8a1a      	ldrh	r2, [r3, #16]
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 fdee 	bl	8012708 <dhcp_supplied_address>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d03b      	beq.n	8011baa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011b32:	f107 030e 	add.w	r3, r7, #14
 8011b36:	2207      	movs	r2, #7
 8011b38:	69f9      	ldr	r1, [r7, #28]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 fce0 	bl	8012500 <dhcp_create_msg>
 8011b40:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d030      	beq.n	8011baa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011b4e:	89f8      	ldrh	r0, [r7, #14]
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b56:	2304      	movs	r3, #4
 8011b58:	2236      	movs	r2, #54	; 0x36
 8011b5a:	f000 f85f 	bl	8011c1c <dhcp_option>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011b62:	89fc      	ldrh	r4, [r7, #14]
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7f7 f9dc 	bl	8008f2a <lwip_htonl>
 8011b72:	4603      	mov	r3, r0
 8011b74:	461a      	mov	r2, r3
 8011b76:	4629      	mov	r1, r5
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f000 f8db 	bl	8011d34 <dhcp_option_long>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011b82:	89f8      	ldrh	r0, [r7, #14]
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	33f0      	adds	r3, #240	; 0xf0
 8011b88:	69ba      	ldr	r2, [r7, #24]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	f000 fd8e 	bl	80126ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011b90:	4b13      	ldr	r3, [pc, #76]	; (8011be0 <dhcp_release_and_stop+0x12c>)
 8011b92:	6818      	ldr	r0, [r3, #0]
 8011b94:	f107 0210 	add.w	r2, r7, #16
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	2343      	movs	r3, #67	; 0x43
 8011b9e:	69b9      	ldr	r1, [r7, #24]
 8011ba0:	f7fe fc86 	bl	80104b0 <udp_sendto_if>
      pbuf_free(p_out);
 8011ba4:	69b8      	ldr	r0, [r7, #24]
 8011ba6:	f7f8 fd41 	bl	800a62c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011baa:	4b0e      	ldr	r3, [pc, #56]	; (8011be4 <dhcp_release_and_stop+0x130>)
 8011bac:	4a0d      	ldr	r2, [pc, #52]	; (8011be4 <dhcp_release_and_stop+0x130>)
 8011bae:	490d      	ldr	r1, [pc, #52]	; (8011be4 <dhcp_release_and_stop+0x130>)
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7f8 f895 	bl	8009ce0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	69f8      	ldr	r0, [r7, #28]
 8011bba:	f000 f815 	bl	8011be8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	791b      	ldrb	r3, [r3, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d008      	beq.n	8011bd8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011bc6:	f7fe ffbf 	bl	8010b48 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	711a      	strb	r2, [r3, #4]
 8011bd0:	e002      	b.n	8011bd8 <dhcp_release_and_stop+0x124>
    return;
 8011bd2:	bf00      	nop
 8011bd4:	e000      	b.n	8011bd8 <dhcp_release_and_stop+0x124>
    return;
 8011bd6:	bf00      	nop
  }
}
 8011bd8:	3720      	adds	r7, #32
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8011bde:	bf00      	nop
 8011be0:	2000d44c 	.word	0x2000d44c
 8011be4:	08019008 	.word	0x08019008

08011be8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	795b      	ldrb	r3, [r3, #5]
 8011bf8:	78fa      	ldrb	r2, [r7, #3]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d008      	beq.n	8011c10 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	78fa      	ldrb	r2, [r7, #3]
 8011c02:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	811a      	strh	r2, [r3, #8]
  }
}
 8011c10:	bf00      	nop
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6039      	str	r1, [r7, #0]
 8011c24:	4611      	mov	r1, r2
 8011c26:	461a      	mov	r2, r3
 8011c28:	4603      	mov	r3, r0
 8011c2a:	80fb      	strh	r3, [r7, #6]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	717b      	strb	r3, [r7, #5]
 8011c30:	4613      	mov	r3, r2
 8011c32:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011c34:	88fa      	ldrh	r2, [r7, #6]
 8011c36:	793b      	ldrb	r3, [r7, #4]
 8011c38:	4413      	add	r3, r2
 8011c3a:	3302      	adds	r3, #2
 8011c3c:	2b44      	cmp	r3, #68	; 0x44
 8011c3e:	d906      	bls.n	8011c4e <dhcp_option+0x32>
 8011c40:	4b0d      	ldr	r3, [pc, #52]	; (8011c78 <dhcp_option+0x5c>)
 8011c42:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c46:	490d      	ldr	r1, [pc, #52]	; (8011c7c <dhcp_option+0x60>)
 8011c48:	480d      	ldr	r0, [pc, #52]	; (8011c80 <dhcp_option+0x64>)
 8011c4a:	f003 fa5d 	bl	8015108 <iprintf>
  options[options_out_len++] = option_type;
 8011c4e:	88fb      	ldrh	r3, [r7, #6]
 8011c50:	1c5a      	adds	r2, r3, #1
 8011c52:	80fa      	strh	r2, [r7, #6]
 8011c54:	461a      	mov	r2, r3
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	4413      	add	r3, r2
 8011c5a:	797a      	ldrb	r2, [r7, #5]
 8011c5c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011c5e:	88fb      	ldrh	r3, [r7, #6]
 8011c60:	1c5a      	adds	r2, r3, #1
 8011c62:	80fa      	strh	r2, [r7, #6]
 8011c64:	461a      	mov	r2, r3
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	4413      	add	r3, r2
 8011c6a:	793a      	ldrb	r2, [r7, #4]
 8011c6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011c6e:	88fb      	ldrh	r3, [r7, #6]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	0801843c 	.word	0x0801843c
 8011c7c:	080185d0 	.word	0x080185d0
 8011c80:	0801849c 	.word	0x0801849c

08011c84 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	6039      	str	r1, [r7, #0]
 8011c8e:	80fb      	strh	r3, [r7, #6]
 8011c90:	4613      	mov	r3, r2
 8011c92:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011c94:	88fb      	ldrh	r3, [r7, #6]
 8011c96:	2b43      	cmp	r3, #67	; 0x43
 8011c98:	d906      	bls.n	8011ca8 <dhcp_option_byte+0x24>
 8011c9a:	4b0a      	ldr	r3, [pc, #40]	; (8011cc4 <dhcp_option_byte+0x40>)
 8011c9c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011ca0:	4909      	ldr	r1, [pc, #36]	; (8011cc8 <dhcp_option_byte+0x44>)
 8011ca2:	480a      	ldr	r0, [pc, #40]	; (8011ccc <dhcp_option_byte+0x48>)
 8011ca4:	f003 fa30 	bl	8015108 <iprintf>
  options[options_out_len++] = value;
 8011ca8:	88fb      	ldrh	r3, [r7, #6]
 8011caa:	1c5a      	adds	r2, r3, #1
 8011cac:	80fa      	strh	r2, [r7, #6]
 8011cae:	461a      	mov	r2, r3
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	797a      	ldrb	r2, [r7, #5]
 8011cb6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011cb8:	88fb      	ldrh	r3, [r7, #6]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	0801843c 	.word	0x0801843c
 8011cc8:	08018614 	.word	0x08018614
 8011ccc:	0801849c 	.word	0x0801849c

08011cd0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	6039      	str	r1, [r7, #0]
 8011cda:	80fb      	strh	r3, [r7, #6]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011ce0:	88fb      	ldrh	r3, [r7, #6]
 8011ce2:	3302      	adds	r3, #2
 8011ce4:	2b44      	cmp	r3, #68	; 0x44
 8011ce6:	d906      	bls.n	8011cf6 <dhcp_option_short+0x26>
 8011ce8:	4b0f      	ldr	r3, [pc, #60]	; (8011d28 <dhcp_option_short+0x58>)
 8011cea:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011cee:	490f      	ldr	r1, [pc, #60]	; (8011d2c <dhcp_option_short+0x5c>)
 8011cf0:	480f      	ldr	r0, [pc, #60]	; (8011d30 <dhcp_option_short+0x60>)
 8011cf2:	f003 fa09 	bl	8015108 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011cf6:	88bb      	ldrh	r3, [r7, #4]
 8011cf8:	0a1b      	lsrs	r3, r3, #8
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	88fb      	ldrh	r3, [r7, #6]
 8011cfe:	1c59      	adds	r1, r3, #1
 8011d00:	80f9      	strh	r1, [r7, #6]
 8011d02:	4619      	mov	r1, r3
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	440b      	add	r3, r1
 8011d08:	b2d2      	uxtb	r2, r2
 8011d0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011d0c:	88fb      	ldrh	r3, [r7, #6]
 8011d0e:	1c5a      	adds	r2, r3, #1
 8011d10:	80fa      	strh	r2, [r7, #6]
 8011d12:	461a      	mov	r2, r3
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	4413      	add	r3, r2
 8011d18:	88ba      	ldrh	r2, [r7, #4]
 8011d1a:	b2d2      	uxtb	r2, r2
 8011d1c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011d1e:	88fb      	ldrh	r3, [r7, #6]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	0801843c 	.word	0x0801843c
 8011d2c:	0801864c 	.word	0x0801864c
 8011d30:	0801849c 	.word	0x0801849c

08011d34 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
 8011d40:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011d42:	89fb      	ldrh	r3, [r7, #14]
 8011d44:	3304      	adds	r3, #4
 8011d46:	2b44      	cmp	r3, #68	; 0x44
 8011d48:	d906      	bls.n	8011d58 <dhcp_option_long+0x24>
 8011d4a:	4b19      	ldr	r3, [pc, #100]	; (8011db0 <dhcp_option_long+0x7c>)
 8011d4c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011d50:	4918      	ldr	r1, [pc, #96]	; (8011db4 <dhcp_option_long+0x80>)
 8011d52:	4819      	ldr	r0, [pc, #100]	; (8011db8 <dhcp_option_long+0x84>)
 8011d54:	f003 f9d8 	bl	8015108 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	0e1a      	lsrs	r2, r3, #24
 8011d5c:	89fb      	ldrh	r3, [r7, #14]
 8011d5e:	1c59      	adds	r1, r3, #1
 8011d60:	81f9      	strh	r1, [r7, #14]
 8011d62:	4619      	mov	r1, r3
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	440b      	add	r3, r1
 8011d68:	b2d2      	uxtb	r2, r2
 8011d6a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	0c1a      	lsrs	r2, r3, #16
 8011d70:	89fb      	ldrh	r3, [r7, #14]
 8011d72:	1c59      	adds	r1, r3, #1
 8011d74:	81f9      	strh	r1, [r7, #14]
 8011d76:	4619      	mov	r1, r3
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	440b      	add	r3, r1
 8011d7c:	b2d2      	uxtb	r2, r2
 8011d7e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	0a1a      	lsrs	r2, r3, #8
 8011d84:	89fb      	ldrh	r3, [r7, #14]
 8011d86:	1c59      	adds	r1, r3, #1
 8011d88:	81f9      	strh	r1, [r7, #14]
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	440b      	add	r3, r1
 8011d90:	b2d2      	uxtb	r2, r2
 8011d92:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011d94:	89fb      	ldrh	r3, [r7, #14]
 8011d96:	1c5a      	adds	r2, r3, #1
 8011d98:	81fa      	strh	r2, [r7, #14]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	4413      	add	r3, r2
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	b2d2      	uxtb	r2, r2
 8011da4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011da6:	89fb      	ldrh	r3, [r7, #14]
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3710      	adds	r7, #16
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	0801843c 	.word	0x0801843c
 8011db4:	08018688 	.word	0x08018688
 8011db8:	0801849c 	.word	0x0801849c

08011dbc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b090      	sub	sp, #64	; 0x40
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011dce:	2208      	movs	r2, #8
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	48b5      	ldr	r0, [pc, #724]	; (80120a8 <dhcp_parse_reply+0x2ec>)
 8011dd4:	f003 f9fd 	bl	80151d2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	895b      	ldrh	r3, [r3, #10]
 8011ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8011dde:	d802      	bhi.n	8011de6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011de0:	f06f 0301 	mvn.w	r3, #1
 8011de4:	e2a7      	b.n	8012336 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011dec:	23f0      	movs	r3, #240	; 0xf0
 8011dee:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	891b      	ldrh	r3, [r3, #8]
 8011df4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011dfa:	e00c      	b.n	8011e16 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfe:	895b      	ldrh	r3, [r3, #10]
 8011e00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e02:	1ad3      	subs	r3, r2, r3
 8011e04:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	895b      	ldrh	r3, [r3, #10]
 8011e0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d004      	beq.n	8011e26 <dhcp_parse_reply+0x6a>
 8011e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1e:	895b      	ldrh	r3, [r3, #10]
 8011e20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d2ea      	bcs.n	8011dfc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d102      	bne.n	8011e32 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011e2c:	f06f 0301 	mvn.w	r3, #1
 8011e30:	e281      	b.n	8012336 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8011e32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011e34:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011e36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011e38:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011e40:	e239      	b.n	80122b6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8011e42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e46:	4413      	add	r3, r2
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011e52:	f04f 33ff 	mov.w	r3, #4294967295
 8011e56:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e5a:	3302      	adds	r3, #2
 8011e5c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011e5e:	8bfa      	ldrh	r2, [r7, #30]
 8011e60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d202      	bcs.n	8011e6c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011e66:	f06f 0301 	mvn.w	r3, #1
 8011e6a:	e264      	b.n	8012336 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011e6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e6e:	3301      	adds	r3, #1
 8011e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e72:	8952      	ldrh	r2, [r2, #10]
 8011e74:	4293      	cmp	r3, r2
 8011e76:	da07      	bge.n	8011e88 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011e78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e7e:	4413      	add	r3, r2
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e86:	e00b      	b.n	8011ea0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d004      	beq.n	8011e9a <dhcp_parse_reply+0xde>
 8011e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	e000      	b.n	8011e9c <dhcp_parse_reply+0xe0>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011ea8:	7dfb      	ldrb	r3, [r7, #23]
 8011eaa:	2b3b      	cmp	r3, #59	; 0x3b
 8011eac:	f200 812c 	bhi.w	8012108 <dhcp_parse_reply+0x34c>
 8011eb0:	a201      	add	r2, pc, #4	; (adr r2, 8011eb8 <dhcp_parse_reply+0xfc>)
 8011eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb6:	bf00      	nop
 8011eb8:	08011fa9 	.word	0x08011fa9
 8011ebc:	08011fb9 	.word	0x08011fb9
 8011ec0:	08012109 	.word	0x08012109
 8011ec4:	08011fdb 	.word	0x08011fdb
 8011ec8:	08012109 	.word	0x08012109
 8011ecc:	08012109 	.word	0x08012109
 8011ed0:	08012109 	.word	0x08012109
 8011ed4:	08012109 	.word	0x08012109
 8011ed8:	08012109 	.word	0x08012109
 8011edc:	08012109 	.word	0x08012109
 8011ee0:	08012109 	.word	0x08012109
 8011ee4:	08012109 	.word	0x08012109
 8011ee8:	08012109 	.word	0x08012109
 8011eec:	08012109 	.word	0x08012109
 8011ef0:	08012109 	.word	0x08012109
 8011ef4:	08012109 	.word	0x08012109
 8011ef8:	08012109 	.word	0x08012109
 8011efc:	08012109 	.word	0x08012109
 8011f00:	08012109 	.word	0x08012109
 8011f04:	08012109 	.word	0x08012109
 8011f08:	08012109 	.word	0x08012109
 8011f0c:	08012109 	.word	0x08012109
 8011f10:	08012109 	.word	0x08012109
 8011f14:	08012109 	.word	0x08012109
 8011f18:	08012109 	.word	0x08012109
 8011f1c:	08012109 	.word	0x08012109
 8011f20:	08012109 	.word	0x08012109
 8011f24:	08012109 	.word	0x08012109
 8011f28:	08012109 	.word	0x08012109
 8011f2c:	08012109 	.word	0x08012109
 8011f30:	08012109 	.word	0x08012109
 8011f34:	08012109 	.word	0x08012109
 8011f38:	08012109 	.word	0x08012109
 8011f3c:	08012109 	.word	0x08012109
 8011f40:	08012109 	.word	0x08012109
 8011f44:	08012109 	.word	0x08012109
 8011f48:	08012109 	.word	0x08012109
 8011f4c:	08012109 	.word	0x08012109
 8011f50:	08012109 	.word	0x08012109
 8011f54:	08012109 	.word	0x08012109
 8011f58:	08012109 	.word	0x08012109
 8011f5c:	08012109 	.word	0x08012109
 8011f60:	08012109 	.word	0x08012109
 8011f64:	08012109 	.word	0x08012109
 8011f68:	08012109 	.word	0x08012109
 8011f6c:	08012109 	.word	0x08012109
 8011f70:	08012109 	.word	0x08012109
 8011f74:	08012109 	.word	0x08012109
 8011f78:	08012109 	.word	0x08012109
 8011f7c:	08012109 	.word	0x08012109
 8011f80:	08012109 	.word	0x08012109
 8011f84:	08012007 	.word	0x08012007
 8011f88:	08012029 	.word	0x08012029
 8011f8c:	08012065 	.word	0x08012065
 8011f90:	08012087 	.word	0x08012087
 8011f94:	08012109 	.word	0x08012109
 8011f98:	08012109 	.word	0x08012109
 8011f9c:	08012109 	.word	0x08012109
 8011fa0:	080120c5 	.word	0x080120c5
 8011fa4:	080120e7 	.word	0x080120e7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011fb6:	e0ab      	b.n	8012110 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fbc:	2b04      	cmp	r3, #4
 8011fbe:	d009      	beq.n	8011fd4 <dhcp_parse_reply+0x218>
 8011fc0:	4b3a      	ldr	r3, [pc, #232]	; (80120ac <dhcp_parse_reply+0x2f0>)
 8011fc2:	f240 622e 	movw	r2, #1582	; 0x62e
 8011fc6:	493a      	ldr	r1, [pc, #232]	; (80120b0 <dhcp_parse_reply+0x2f4>)
 8011fc8:	483a      	ldr	r0, [pc, #232]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8011fca:	f003 f89d 	bl	8015108 <iprintf>
 8011fce:	f06f 0305 	mvn.w	r3, #5
 8011fd2:	e1b0      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011fd4:	2306      	movs	r3, #6
 8011fd6:	623b      	str	r3, [r7, #32]
        break;
 8011fd8:	e09a      	b.n	8012110 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011fda:	2304      	movs	r3, #4
 8011fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011fe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d209      	bcs.n	8012000 <dhcp_parse_reply+0x244>
 8011fec:	4b2f      	ldr	r3, [pc, #188]	; (80120ac <dhcp_parse_reply+0x2f0>)
 8011fee:	f240 6233 	movw	r2, #1587	; 0x633
 8011ff2:	4931      	ldr	r1, [pc, #196]	; (80120b8 <dhcp_parse_reply+0x2fc>)
 8011ff4:	482f      	ldr	r0, [pc, #188]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8011ff6:	f003 f887 	bl	8015108 <iprintf>
 8011ffa:	f06f 0305 	mvn.w	r3, #5
 8011ffe:	e19a      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012000:	2307      	movs	r3, #7
 8012002:	623b      	str	r3, [r7, #32]
        break;
 8012004:	e084      	b.n	8012110 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801200a:	2b04      	cmp	r3, #4
 801200c:	d009      	beq.n	8012022 <dhcp_parse_reply+0x266>
 801200e:	4b27      	ldr	r3, [pc, #156]	; (80120ac <dhcp_parse_reply+0x2f0>)
 8012010:	f240 6241 	movw	r2, #1601	; 0x641
 8012014:	4926      	ldr	r1, [pc, #152]	; (80120b0 <dhcp_parse_reply+0x2f4>)
 8012016:	4827      	ldr	r0, [pc, #156]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8012018:	f003 f876 	bl	8015108 <iprintf>
 801201c:	f06f 0305 	mvn.w	r3, #5
 8012020:	e189      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012022:	2303      	movs	r3, #3
 8012024:	623b      	str	r3, [r7, #32]
        break;
 8012026:	e073      	b.n	8012110 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801202c:	2b01      	cmp	r3, #1
 801202e:	d009      	beq.n	8012044 <dhcp_parse_reply+0x288>
 8012030:	4b1e      	ldr	r3, [pc, #120]	; (80120ac <dhcp_parse_reply+0x2f0>)
 8012032:	f240 624f 	movw	r2, #1615	; 0x64f
 8012036:	4921      	ldr	r1, [pc, #132]	; (80120bc <dhcp_parse_reply+0x300>)
 8012038:	481e      	ldr	r0, [pc, #120]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 801203a:	f003 f865 	bl	8015108 <iprintf>
 801203e:	f06f 0305 	mvn.w	r3, #5
 8012042:	e178      	b.n	8012336 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012046:	2bf0      	cmp	r3, #240	; 0xf0
 8012048:	d009      	beq.n	801205e <dhcp_parse_reply+0x2a2>
 801204a:	4b18      	ldr	r3, [pc, #96]	; (80120ac <dhcp_parse_reply+0x2f0>)
 801204c:	f240 6251 	movw	r2, #1617	; 0x651
 8012050:	491b      	ldr	r1, [pc, #108]	; (80120c0 <dhcp_parse_reply+0x304>)
 8012052:	4818      	ldr	r0, [pc, #96]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8012054:	f003 f858 	bl	8015108 <iprintf>
 8012058:	f06f 0305 	mvn.w	r3, #5
 801205c:	e16b      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801205e:	2300      	movs	r3, #0
 8012060:	623b      	str	r3, [r7, #32]
        break;
 8012062:	e055      	b.n	8012110 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012068:	2b01      	cmp	r3, #1
 801206a:	d009      	beq.n	8012080 <dhcp_parse_reply+0x2c4>
 801206c:	4b0f      	ldr	r3, [pc, #60]	; (80120ac <dhcp_parse_reply+0x2f0>)
 801206e:	f240 6255 	movw	r2, #1621	; 0x655
 8012072:	4912      	ldr	r1, [pc, #72]	; (80120bc <dhcp_parse_reply+0x300>)
 8012074:	480f      	ldr	r0, [pc, #60]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8012076:	f003 f847 	bl	8015108 <iprintf>
 801207a:	f06f 0305 	mvn.w	r3, #5
 801207e:	e15a      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012080:	2301      	movs	r3, #1
 8012082:	623b      	str	r3, [r7, #32]
        break;
 8012084:	e044      	b.n	8012110 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801208a:	2b04      	cmp	r3, #4
 801208c:	d009      	beq.n	80120a2 <dhcp_parse_reply+0x2e6>
 801208e:	4b07      	ldr	r3, [pc, #28]	; (80120ac <dhcp_parse_reply+0x2f0>)
 8012090:	f240 6259 	movw	r2, #1625	; 0x659
 8012094:	4906      	ldr	r1, [pc, #24]	; (80120b0 <dhcp_parse_reply+0x2f4>)
 8012096:	4807      	ldr	r0, [pc, #28]	; (80120b4 <dhcp_parse_reply+0x2f8>)
 8012098:	f003 f836 	bl	8015108 <iprintf>
 801209c:	f06f 0305 	mvn.w	r3, #5
 80120a0:	e149      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80120a2:	2302      	movs	r3, #2
 80120a4:	623b      	str	r3, [r7, #32]
        break;
 80120a6:	e033      	b.n	8012110 <dhcp_parse_reply+0x354>
 80120a8:	2000d444 	.word	0x2000d444
 80120ac:	0801843c 	.word	0x0801843c
 80120b0:	080186c4 	.word	0x080186c4
 80120b4:	0801849c 	.word	0x0801849c
 80120b8:	080186d0 	.word	0x080186d0
 80120bc:	080186e4 	.word	0x080186e4
 80120c0:	080186f0 	.word	0x080186f0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120c8:	2b04      	cmp	r3, #4
 80120ca:	d009      	beq.n	80120e0 <dhcp_parse_reply+0x324>
 80120cc:	4b9c      	ldr	r3, [pc, #624]	; (8012340 <dhcp_parse_reply+0x584>)
 80120ce:	f240 625d 	movw	r2, #1629	; 0x65d
 80120d2:	499c      	ldr	r1, [pc, #624]	; (8012344 <dhcp_parse_reply+0x588>)
 80120d4:	489c      	ldr	r0, [pc, #624]	; (8012348 <dhcp_parse_reply+0x58c>)
 80120d6:	f003 f817 	bl	8015108 <iprintf>
 80120da:	f06f 0305 	mvn.w	r3, #5
 80120de:	e12a      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80120e0:	2304      	movs	r3, #4
 80120e2:	623b      	str	r3, [r7, #32]
        break;
 80120e4:	e014      	b.n	8012110 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120ea:	2b04      	cmp	r3, #4
 80120ec:	d009      	beq.n	8012102 <dhcp_parse_reply+0x346>
 80120ee:	4b94      	ldr	r3, [pc, #592]	; (8012340 <dhcp_parse_reply+0x584>)
 80120f0:	f240 6261 	movw	r2, #1633	; 0x661
 80120f4:	4993      	ldr	r1, [pc, #588]	; (8012344 <dhcp_parse_reply+0x588>)
 80120f6:	4894      	ldr	r0, [pc, #592]	; (8012348 <dhcp_parse_reply+0x58c>)
 80120f8:	f003 f806 	bl	8015108 <iprintf>
 80120fc:	f06f 0305 	mvn.w	r3, #5
 8012100:	e119      	b.n	8012336 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012102:	2305      	movs	r3, #5
 8012104:	623b      	str	r3, [r7, #32]
        break;
 8012106:	e003      	b.n	8012110 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801210e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012110:	7dfb      	ldrb	r3, [r7, #23]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d103      	bne.n	801211e <dhcp_parse_reply+0x362>
      offset++;
 8012116:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012118:	3301      	adds	r3, #1
 801211a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801211c:	e0a1      	b.n	8012262 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801211e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012124:	4413      	add	r3, r2
 8012126:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801212a:	4293      	cmp	r3, r2
 801212c:	dd02      	ble.n	8012134 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801212e:	f06f 0301 	mvn.w	r3, #1
 8012132:	e100      	b.n	8012336 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012138:	b29a      	uxth	r2, r3
 801213a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801213c:	4413      	add	r3, r2
 801213e:	b29b      	uxth	r3, r3
 8012140:	3302      	adds	r3, #2
 8012142:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012148:	2b00      	cmp	r3, #0
 801214a:	f000 808a 	beq.w	8012262 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801214e:	2300      	movs	r3, #0
 8012150:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012152:	6a3b      	ldr	r3, [r7, #32]
 8012154:	2b00      	cmp	r3, #0
 8012156:	db02      	blt.n	801215e <dhcp_parse_reply+0x3a2>
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	2b07      	cmp	r3, #7
 801215c:	dd06      	ble.n	801216c <dhcp_parse_reply+0x3b0>
 801215e:	4b78      	ldr	r3, [pc, #480]	; (8012340 <dhcp_parse_reply+0x584>)
 8012160:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012164:	4979      	ldr	r1, [pc, #484]	; (801234c <dhcp_parse_reply+0x590>)
 8012166:	4878      	ldr	r0, [pc, #480]	; (8012348 <dhcp_parse_reply+0x58c>)
 8012168:	f002 ffce 	bl	8015108 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801216c:	4a78      	ldr	r2, [pc, #480]	; (8012350 <dhcp_parse_reply+0x594>)
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	4413      	add	r3, r2
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d174      	bne.n	8012262 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801217c:	2b04      	cmp	r3, #4
 801217e:	bf28      	it	cs
 8012180:	2304      	movcs	r3, #4
 8012182:	b2db      	uxtb	r3, r3
 8012184:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012186:	8bfb      	ldrh	r3, [r7, #30]
 8012188:	8aba      	ldrh	r2, [r7, #20]
 801218a:	f107 0108 	add.w	r1, r7, #8
 801218e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012190:	f7f8 fc52 	bl	800aa38 <pbuf_copy_partial>
 8012194:	4603      	mov	r3, r0
 8012196:	461a      	mov	r2, r3
 8012198:	8abb      	ldrh	r3, [r7, #20]
 801219a:	4293      	cmp	r3, r2
 801219c:	d002      	beq.n	80121a4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801219e:	f06f 0301 	mvn.w	r3, #1
 80121a2:	e0c8      	b.n	8012336 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80121a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121a8:	2b04      	cmp	r3, #4
 80121aa:	d933      	bls.n	8012214 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80121ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121b0:	f003 0303 	and.w	r3, r3, #3
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d009      	beq.n	80121ce <dhcp_parse_reply+0x412>
 80121ba:	4b61      	ldr	r3, [pc, #388]	; (8012340 <dhcp_parse_reply+0x584>)
 80121bc:	f240 6281 	movw	r2, #1665	; 0x681
 80121c0:	4964      	ldr	r1, [pc, #400]	; (8012354 <dhcp_parse_reply+0x598>)
 80121c2:	4861      	ldr	r0, [pc, #388]	; (8012348 <dhcp_parse_reply+0x58c>)
 80121c4:	f002 ffa0 	bl	8015108 <iprintf>
 80121c8:	f06f 0305 	mvn.w	r3, #5
 80121cc:	e0b3      	b.n	8012336 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80121ce:	4a60      	ldr	r2, [pc, #384]	; (8012350 <dhcp_parse_reply+0x594>)
 80121d0:	6a3b      	ldr	r3, [r7, #32]
 80121d2:	4413      	add	r3, r2
 80121d4:	2201      	movs	r2, #1
 80121d6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7f6 fea5 	bl	8008f2a <lwip_htonl>
 80121e0:	4602      	mov	r2, r0
 80121e2:	495d      	ldr	r1, [pc, #372]	; (8012358 <dhcp_parse_reply+0x59c>)
 80121e4:	6a3b      	ldr	r3, [r7, #32]
 80121e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80121ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121ee:	3b04      	subs	r3, #4
 80121f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80121f4:	8bfb      	ldrh	r3, [r7, #30]
 80121f6:	3304      	adds	r3, #4
 80121f8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80121fa:	8a7a      	ldrh	r2, [r7, #18]
 80121fc:	8bfb      	ldrh	r3, [r7, #30]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d202      	bcs.n	8012208 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8012202:	f06f 0301 	mvn.w	r3, #1
 8012206:	e096      	b.n	8012336 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8012208:	8a7b      	ldrh	r3, [r7, #18]
 801220a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801220c:	6a3b      	ldr	r3, [r7, #32]
 801220e:	3301      	adds	r3, #1
 8012210:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012212:	e79e      	b.n	8012152 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8012214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012218:	2b04      	cmp	r3, #4
 801221a:	d106      	bne.n	801222a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	4618      	mov	r0, r3
 8012220:	f7f6 fe83 	bl	8008f2a <lwip_htonl>
 8012224:	4603      	mov	r3, r0
 8012226:	60bb      	str	r3, [r7, #8]
 8012228:	e011      	b.n	801224e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801222a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801222e:	2b01      	cmp	r3, #1
 8012230:	d009      	beq.n	8012246 <dhcp_parse_reply+0x48a>
 8012232:	4b43      	ldr	r3, [pc, #268]	; (8012340 <dhcp_parse_reply+0x584>)
 8012234:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012238:	4948      	ldr	r1, [pc, #288]	; (801235c <dhcp_parse_reply+0x5a0>)
 801223a:	4843      	ldr	r0, [pc, #268]	; (8012348 <dhcp_parse_reply+0x58c>)
 801223c:	f002 ff64 	bl	8015108 <iprintf>
 8012240:	f06f 0305 	mvn.w	r3, #5
 8012244:	e077      	b.n	8012336 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801224e:	4a40      	ldr	r2, [pc, #256]	; (8012350 <dhcp_parse_reply+0x594>)
 8012250:	6a3b      	ldr	r3, [r7, #32]
 8012252:	4413      	add	r3, r2
 8012254:	2201      	movs	r2, #1
 8012256:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012258:	68ba      	ldr	r2, [r7, #8]
 801225a:	493f      	ldr	r1, [pc, #252]	; (8012358 <dhcp_parse_reply+0x59c>)
 801225c:	6a3b      	ldr	r3, [r7, #32]
 801225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	895b      	ldrh	r3, [r3, #10]
 8012266:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012268:	429a      	cmp	r2, r3
 801226a:	d324      	bcc.n	80122b6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226e:	895b      	ldrh	r3, [r3, #10]
 8012270:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	895b      	ldrh	r3, [r3, #10]
 801227a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012280:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012282:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012284:	429a      	cmp	r2, r3
 8012286:	d213      	bcs.n	80122b0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	2b00      	cmp	r3, #0
 8012292:	d109      	bne.n	80122a8 <dhcp_parse_reply+0x4ec>
 8012294:	4b2a      	ldr	r3, [pc, #168]	; (8012340 <dhcp_parse_reply+0x584>)
 8012296:	f240 629d 	movw	r2, #1693	; 0x69d
 801229a:	4931      	ldr	r1, [pc, #196]	; (8012360 <dhcp_parse_reply+0x5a4>)
 801229c:	482a      	ldr	r0, [pc, #168]	; (8012348 <dhcp_parse_reply+0x58c>)
 801229e:	f002 ff33 	bl	8015108 <iprintf>
 80122a2:	f06f 0305 	mvn.w	r3, #5
 80122a6:	e046      	b.n	8012336 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80122a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122ae:	e002      	b.n	80122b6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80122b0:	f06f 0301 	mvn.w	r3, #1
 80122b4:	e03f      	b.n	8012336 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80122b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d00a      	beq.n	80122d2 <dhcp_parse_reply+0x516>
 80122bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d206      	bcs.n	80122d2 <dhcp_parse_reply+0x516>
 80122c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122c8:	4413      	add	r3, r2
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2bff      	cmp	r3, #255	; 0xff
 80122ce:	f47f adb8 	bne.w	8011e42 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80122d2:	4b1f      	ldr	r3, [pc, #124]	; (8012350 <dhcp_parse_reply+0x594>)
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d018      	beq.n	801230c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80122da:	4b1f      	ldr	r3, [pc, #124]	; (8012358 <dhcp_parse_reply+0x59c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80122e0:	4b1b      	ldr	r3, [pc, #108]	; (8012350 <dhcp_parse_reply+0x594>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d102      	bne.n	80122f2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80122ec:	2301      	movs	r3, #1
 80122ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f0:	e00c      	b.n	801230c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d102      	bne.n	80122fe <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80122f8:	2301      	movs	r3, #1
 80122fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80122fc:	e006      	b.n	801230c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2b03      	cmp	r3, #3
 8012302:	d103      	bne.n	801230c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012304:	2301      	movs	r3, #1
 8012306:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012308:	2301      	movs	r3, #1
 801230a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	2b00      	cmp	r3, #0
 8012310:	d006      	beq.n	8012320 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012316:	236c      	movs	r3, #108	; 0x6c
 8012318:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801231a:	23ec      	movs	r3, #236	; 0xec
 801231c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801231e:	e56a      	b.n	8011df6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012322:	2b00      	cmp	r3, #0
 8012324:	d006      	beq.n	8012334 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801232a:	232c      	movs	r3, #44	; 0x2c
 801232c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801232e:	236c      	movs	r3, #108	; 0x6c
 8012330:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012332:	e560      	b.n	8011df6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	3740      	adds	r7, #64	; 0x40
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	0801843c 	.word	0x0801843c
 8012344:	080186c4 	.word	0x080186c4
 8012348:	0801849c 	.word	0x0801849c
 801234c:	08018708 	.word	0x08018708
 8012350:	2000d444 	.word	0x2000d444
 8012354:	0801871c 	.word	0x0801871c
 8012358:	2000d424 	.word	0x2000d424
 801235c:	08018734 	.word	0x08018734
 8012360:	08018748 	.word	0x08018748

08012364 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b08a      	sub	sp, #40	; 0x28
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
 8012370:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012372:	4b60      	ldr	r3, [pc, #384]	; (80124f4 <dhcp_recv+0x190>)
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012378:	6a3b      	ldr	r3, [r7, #32]
 801237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012384:	69fb      	ldr	r3, [r7, #28]
 8012386:	2b00      	cmp	r3, #0
 8012388:	f000 809d 	beq.w	80124c6 <dhcp_recv+0x162>
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	791b      	ldrb	r3, [r3, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	f000 8098 	beq.w	80124c6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	895b      	ldrh	r3, [r3, #10]
 801239a:	2b2b      	cmp	r3, #43	; 0x2b
 801239c:	f240 8095 	bls.w	80124ca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	2b02      	cmp	r3, #2
 80123a6:	f040 8092 	bne.w	80124ce <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123aa:	2300      	movs	r3, #0
 80123ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123b0:	e012      	b.n	80123d8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80123b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b6:	6a3a      	ldr	r2, [r7, #32]
 80123b8:	4413      	add	r3, r2
 80123ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80123be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123c2:	69b9      	ldr	r1, [r7, #24]
 80123c4:	440b      	add	r3, r1
 80123c6:	7f1b      	ldrb	r3, [r3, #28]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	f040 8082 	bne.w	80124d2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123d2:	3301      	adds	r3, #1
 80123d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123d8:	6a3b      	ldr	r3, [r7, #32]
 80123da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d203      	bcs.n	80123ee <dhcp_recv+0x8a>
 80123e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123ea:	2b05      	cmp	r3, #5
 80123ec:	d9e1      	bls.n	80123b2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f6 fd99 	bl	8008f2a <lwip_htonl>
 80123f8:	4602      	mov	r2, r0
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d169      	bne.n	80124d6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012402:	69f9      	ldr	r1, [r7, #28]
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f7ff fcd9 	bl	8011dbc <dhcp_parse_reply>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d164      	bne.n	80124da <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012410:	4b39      	ldr	r3, [pc, #228]	; (80124f8 <dhcp_recv+0x194>)
 8012412:	785b      	ldrb	r3, [r3, #1]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d062      	beq.n	80124de <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801241e:	4b37      	ldr	r3, [pc, #220]	; (80124fc <dhcp_recv+0x198>)
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012424:	7cfb      	ldrb	r3, [r7, #19]
 8012426:	2b05      	cmp	r3, #5
 8012428:	d12a      	bne.n	8012480 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	795b      	ldrb	r3, [r3, #5]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d112      	bne.n	8012458 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012432:	6979      	ldr	r1, [r7, #20]
 8012434:	6a38      	ldr	r0, [r7, #32]
 8012436:	f7fe fe53 	bl	80110e0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012440:	f003 0308 	and.w	r3, r3, #8
 8012444:	2b00      	cmp	r3, #0
 8012446:	d003      	beq.n	8012450 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012448:	6a38      	ldr	r0, [r7, #32]
 801244a:	f7fe fbc1 	bl	8010bd0 <dhcp_check>
 801244e:	e049      	b.n	80124e4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012450:	6a38      	ldr	r0, [r7, #32]
 8012452:	f7ff f867 	bl	8011524 <dhcp_bind>
 8012456:	e045      	b.n	80124e4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	795b      	ldrb	r3, [r3, #5]
 801245c:	2b03      	cmp	r3, #3
 801245e:	d007      	beq.n	8012470 <dhcp_recv+0x10c>
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	795b      	ldrb	r3, [r3, #5]
 8012464:	2b04      	cmp	r3, #4
 8012466:	d003      	beq.n	8012470 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801246c:	2b05      	cmp	r3, #5
 801246e:	d139      	bne.n	80124e4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012470:	6979      	ldr	r1, [r7, #20]
 8012472:	6a38      	ldr	r0, [r7, #32]
 8012474:	f7fe fe34 	bl	80110e0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8012478:	6a38      	ldr	r0, [r7, #32]
 801247a:	f7ff f853 	bl	8011524 <dhcp_bind>
 801247e:	e031      	b.n	80124e4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012480:	7cfb      	ldrb	r3, [r7, #19]
 8012482:	2b06      	cmp	r3, #6
 8012484:	d113      	bne.n	80124ae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801248a:	2b03      	cmp	r3, #3
 801248c:	d00b      	beq.n	80124a6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	795b      	ldrb	r3, [r3, #5]
 8012492:	2b01      	cmp	r3, #1
 8012494:	d007      	beq.n	80124a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801249a:	2b04      	cmp	r3, #4
 801249c:	d003      	beq.n	80124a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	795b      	ldrb	r3, [r3, #5]
 80124a2:	2b05      	cmp	r3, #5
 80124a4:	d103      	bne.n	80124ae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80124a6:	6a38      	ldr	r0, [r7, #32]
 80124a8:	f7fe fb78 	bl	8010b9c <dhcp_handle_nak>
 80124ac:	e01a      	b.n	80124e4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80124ae:	7cfb      	ldrb	r3, [r7, #19]
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d116      	bne.n	80124e2 <dhcp_recv+0x17e>
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	795b      	ldrb	r3, [r3, #5]
 80124b8:	2b06      	cmp	r3, #6
 80124ba:	d112      	bne.n	80124e2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80124bc:	6979      	ldr	r1, [r7, #20]
 80124be:	6a38      	ldr	r0, [r7, #32]
 80124c0:	f7fe fbba 	bl	8010c38 <dhcp_handle_offer>
 80124c4:	e00e      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124c6:	bf00      	nop
 80124c8:	e00c      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124ca:	bf00      	nop
 80124cc:	e00a      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124ce:	bf00      	nop
 80124d0:	e008      	b.n	80124e4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80124d2:	bf00      	nop
 80124d4:	e006      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124d6:	bf00      	nop
 80124d8:	e004      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124da:	bf00      	nop
 80124dc:	e002      	b.n	80124e4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80124de:	bf00      	nop
 80124e0:	e000      	b.n	80124e4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80124e2:	bf00      	nop
  pbuf_free(p);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7f8 f8a1 	bl	800a62c <pbuf_free>
}
 80124ea:	bf00      	nop
 80124ec:	3728      	adds	r7, #40	; 0x28
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	20009c50 	.word	0x20009c50
 80124f8:	2000d444 	.word	0x2000d444
 80124fc:	2000d424 	.word	0x2000d424

08012500 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	603b      	str	r3, [r7, #0]
 801250c:	4613      	mov	r3, r2
 801250e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d108      	bne.n	8012528 <dhcp_create_msg+0x28>
 8012516:	4b5f      	ldr	r3, [pc, #380]	; (8012694 <dhcp_create_msg+0x194>)
 8012518:	f240 7269 	movw	r2, #1897	; 0x769
 801251c:	495e      	ldr	r1, [pc, #376]	; (8012698 <dhcp_create_msg+0x198>)
 801251e:	485f      	ldr	r0, [pc, #380]	; (801269c <dhcp_create_msg+0x19c>)
 8012520:	f002 fdf2 	bl	8015108 <iprintf>
 8012524:	2300      	movs	r3, #0
 8012526:	e0b1      	b.n	801268c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d108      	bne.n	8012540 <dhcp_create_msg+0x40>
 801252e:	4b59      	ldr	r3, [pc, #356]	; (8012694 <dhcp_create_msg+0x194>)
 8012530:	f240 726a 	movw	r2, #1898	; 0x76a
 8012534:	495a      	ldr	r1, [pc, #360]	; (80126a0 <dhcp_create_msg+0x1a0>)
 8012536:	4859      	ldr	r0, [pc, #356]	; (801269c <dhcp_create_msg+0x19c>)
 8012538:	f002 fde6 	bl	8015108 <iprintf>
 801253c:	2300      	movs	r3, #0
 801253e:	e0a5      	b.n	801268c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012540:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012544:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012548:	2036      	movs	r0, #54	; 0x36
 801254a:	f7f7 fd8b 	bl	800a064 <pbuf_alloc>
 801254e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d101      	bne.n	801255a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8012556:	2300      	movs	r3, #0
 8012558:	e098      	b.n	801268c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	895b      	ldrh	r3, [r3, #10]
 801255e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012562:	d206      	bcs.n	8012572 <dhcp_create_msg+0x72>
 8012564:	4b4b      	ldr	r3, [pc, #300]	; (8012694 <dhcp_create_msg+0x194>)
 8012566:	f240 7271 	movw	r2, #1905	; 0x771
 801256a:	494e      	ldr	r1, [pc, #312]	; (80126a4 <dhcp_create_msg+0x1a4>)
 801256c:	484b      	ldr	r0, [pc, #300]	; (801269c <dhcp_create_msg+0x19c>)
 801256e:	f002 fdcb 	bl	8015108 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	2b03      	cmp	r3, #3
 8012576:	d103      	bne.n	8012580 <dhcp_create_msg+0x80>
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	795b      	ldrb	r3, [r3, #5]
 801257c:	2b03      	cmp	r3, #3
 801257e:	d10d      	bne.n	801259c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	799b      	ldrb	r3, [r3, #6]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d105      	bne.n	8012594 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012588:	f002 fcbe 	bl	8014f08 <rand>
 801258c:	4603      	mov	r3, r0
 801258e:	461a      	mov	r2, r3
 8012590:	4b45      	ldr	r3, [pc, #276]	; (80126a8 <dhcp_create_msg+0x1a8>)
 8012592:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012594:	4b44      	ldr	r3, [pc, #272]	; (80126a8 <dhcp_create_msg+0x1a8>)
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80125a2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80125a6:	2100      	movs	r1, #0
 80125a8:	6978      	ldr	r0, [r7, #20]
 80125aa:	f002 fe12 	bl	80151d2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	2201      	movs	r2, #1
 80125b2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	2201      	movs	r2, #1
 80125b8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7f6 fcae 	bl	8008f2a <lwip_htonl>
 80125ce:	4602      	mov	r2, r0
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80125d4:	79fb      	ldrb	r3, [r7, #7]
 80125d6:	2b08      	cmp	r3, #8
 80125d8:	d010      	beq.n	80125fc <dhcp_create_msg+0xfc>
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	2b04      	cmp	r3, #4
 80125de:	d00d      	beq.n	80125fc <dhcp_create_msg+0xfc>
 80125e0:	79fb      	ldrb	r3, [r7, #7]
 80125e2:	2b07      	cmp	r3, #7
 80125e4:	d00a      	beq.n	80125fc <dhcp_create_msg+0xfc>
 80125e6:	79fb      	ldrb	r3, [r7, #7]
 80125e8:	2b03      	cmp	r3, #3
 80125ea:	d10c      	bne.n	8012606 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80125f0:	2b05      	cmp	r3, #5
 80125f2:	d003      	beq.n	80125fc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	795b      	ldrb	r3, [r3, #5]
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d104      	bne.n	8012606 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	3304      	adds	r3, #4
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012606:	2300      	movs	r3, #0
 8012608:	83fb      	strh	r3, [r7, #30]
 801260a:	e00c      	b.n	8012626 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801260c:	8bfa      	ldrh	r2, [r7, #30]
 801260e:	8bfb      	ldrh	r3, [r7, #30]
 8012610:	68f9      	ldr	r1, [r7, #12]
 8012612:	440a      	add	r2, r1
 8012614:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012618:	697a      	ldr	r2, [r7, #20]
 801261a:	4413      	add	r3, r2
 801261c:	460a      	mov	r2, r1
 801261e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012620:	8bfb      	ldrh	r3, [r7, #30]
 8012622:	3301      	adds	r3, #1
 8012624:	83fb      	strh	r3, [r7, #30]
 8012626:	8bfb      	ldrh	r3, [r7, #30]
 8012628:	2b05      	cmp	r3, #5
 801262a:	d9ef      	bls.n	801260c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	2200      	movs	r2, #0
 8012630:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012634:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012638:	2200      	movs	r2, #0
 801263a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801263e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012642:	2200      	movs	r2, #0
 8012644:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012648:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801264c:	2200      	movs	r2, #0
 801264e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012652:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801265c:	2301      	movs	r3, #1
 801265e:	2235      	movs	r2, #53	; 0x35
 8012660:	2000      	movs	r0, #0
 8012662:	f7ff fadb 	bl	8011c1c <dhcp_option>
 8012666:	4603      	mov	r3, r0
 8012668:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012670:	79fa      	ldrb	r2, [r7, #7]
 8012672:	8a7b      	ldrh	r3, [r7, #18]
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff fb05 	bl	8011c84 <dhcp_option_byte>
 801267a:	4603      	mov	r3, r0
 801267c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d002      	beq.n	801268a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	8a7a      	ldrh	r2, [r7, #18]
 8012688:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801268a:	69bb      	ldr	r3, [r7, #24]
}
 801268c:	4618      	mov	r0, r3
 801268e:	3720      	adds	r7, #32
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	0801843c 	.word	0x0801843c
 8012698:	0801875c 	.word	0x0801875c
 801269c:	0801849c 	.word	0x0801849c
 80126a0:	0801877c 	.word	0x0801877c
 80126a4:	0801879c 	.word	0x0801879c
 80126a8:	2000d454 	.word	0x2000d454

080126ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	4603      	mov	r3, r0
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
 80126b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80126ba:	89fb      	ldrh	r3, [r7, #14]
 80126bc:	1c5a      	adds	r2, r3, #1
 80126be:	81fa      	strh	r2, [r7, #14]
 80126c0:	461a      	mov	r2, r3
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	4413      	add	r3, r2
 80126c6:	22ff      	movs	r2, #255	; 0xff
 80126c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80126ca:	e007      	b.n	80126dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80126cc:	89fb      	ldrh	r3, [r7, #14]
 80126ce:	1c5a      	adds	r2, r3, #1
 80126d0:	81fa      	strh	r2, [r7, #14]
 80126d2:	461a      	mov	r2, r3
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	4413      	add	r3, r2
 80126d8:	2200      	movs	r2, #0
 80126da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80126dc:	89fb      	ldrh	r3, [r7, #14]
 80126de:	2b43      	cmp	r3, #67	; 0x43
 80126e0:	d904      	bls.n	80126ec <dhcp_option_trailer+0x40>
 80126e2:	89fb      	ldrh	r3, [r7, #14]
 80126e4:	f003 0303 	and.w	r3, r3, #3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d002      	beq.n	80126f2 <dhcp_option_trailer+0x46>
 80126ec:	89fb      	ldrh	r3, [r7, #14]
 80126ee:	2b43      	cmp	r3, #67	; 0x43
 80126f0:	d9ec      	bls.n	80126cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80126f2:	89fb      	ldrh	r3, [r7, #14]
 80126f4:	33f0      	adds	r3, #240	; 0xf0
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	4619      	mov	r1, r3
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7f7 fe10 	bl	800a320 <pbuf_realloc>
}
 8012700:	bf00      	nop
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d017      	beq.n	8012746 <dhcp_supplied_address+0x3e>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271a:	2b00      	cmp	r3, #0
 801271c:	d013      	beq.n	8012746 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	795b      	ldrb	r3, [r3, #5]
 8012728:	2b0a      	cmp	r3, #10
 801272a:	d007      	beq.n	801273c <dhcp_supplied_address+0x34>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	795b      	ldrb	r3, [r3, #5]
 8012730:	2b05      	cmp	r3, #5
 8012732:	d003      	beq.n	801273c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012738:	2b04      	cmp	r3, #4
 801273a:	d101      	bne.n	8012740 <dhcp_supplied_address+0x38>
 801273c:	2301      	movs	r3, #1
 801273e:	e000      	b.n	8012742 <dhcp_supplied_address+0x3a>
 8012740:	2300      	movs	r3, #0
 8012742:	b2db      	uxtb	r3, r3
 8012744:	e000      	b.n	8012748 <dhcp_supplied_address+0x40>
  }
  return 0;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3714      	adds	r7, #20
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr

08012754 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801275c:	4915      	ldr	r1, [pc, #84]	; (80127b4 <etharp_free_entry+0x60>)
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	4613      	mov	r3, r2
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	4413      	add	r3, r2
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	440b      	add	r3, r1
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d013      	beq.n	8012798 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012770:	4910      	ldr	r1, [pc, #64]	; (80127b4 <etharp_free_entry+0x60>)
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	4613      	mov	r3, r2
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	4413      	add	r3, r2
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	440b      	add	r3, r1
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4618      	mov	r0, r3
 8012782:	f7f7 ff53 	bl	800a62c <pbuf_free>
    arp_table[i].q = NULL;
 8012786:	490b      	ldr	r1, [pc, #44]	; (80127b4 <etharp_free_entry+0x60>)
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	4613      	mov	r3, r2
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	4413      	add	r3, r2
 8012790:	00db      	lsls	r3, r3, #3
 8012792:	440b      	add	r3, r1
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012798:	4906      	ldr	r1, [pc, #24]	; (80127b4 <etharp_free_entry+0x60>)
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	4613      	mov	r3, r2
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	4413      	add	r3, r2
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	440b      	add	r3, r1
 80127a6:	3314      	adds	r3, #20
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127ac:	bf00      	nop
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	2000d458 	.word	0x2000d458

080127b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127be:	2300      	movs	r3, #0
 80127c0:	607b      	str	r3, [r7, #4]
 80127c2:	e096      	b.n	80128f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80127c4:	494f      	ldr	r1, [pc, #316]	; (8012904 <etharp_tmr+0x14c>)
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	4613      	mov	r3, r2
 80127ca:	005b      	lsls	r3, r3, #1
 80127cc:	4413      	add	r3, r2
 80127ce:	00db      	lsls	r3, r3, #3
 80127d0:	440b      	add	r3, r1
 80127d2:	3314      	adds	r3, #20
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80127d8:	78fb      	ldrb	r3, [r7, #3]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 8086 	beq.w	80128ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80127e0:	4948      	ldr	r1, [pc, #288]	; (8012904 <etharp_tmr+0x14c>)
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	4613      	mov	r3, r2
 80127e6:	005b      	lsls	r3, r3, #1
 80127e8:	4413      	add	r3, r2
 80127ea:	00db      	lsls	r3, r3, #3
 80127ec:	440b      	add	r3, r1
 80127ee:	3312      	adds	r3, #18
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	3301      	adds	r3, #1
 80127f4:	b298      	uxth	r0, r3
 80127f6:	4943      	ldr	r1, [pc, #268]	; (8012904 <etharp_tmr+0x14c>)
 80127f8:	687a      	ldr	r2, [r7, #4]
 80127fa:	4613      	mov	r3, r2
 80127fc:	005b      	lsls	r3, r3, #1
 80127fe:	4413      	add	r3, r2
 8012800:	00db      	lsls	r3, r3, #3
 8012802:	440b      	add	r3, r1
 8012804:	3312      	adds	r3, #18
 8012806:	4602      	mov	r2, r0
 8012808:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801280a:	493e      	ldr	r1, [pc, #248]	; (8012904 <etharp_tmr+0x14c>)
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	4613      	mov	r3, r2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4413      	add	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	440b      	add	r3, r1
 8012818:	3312      	adds	r3, #18
 801281a:	881b      	ldrh	r3, [r3, #0]
 801281c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012820:	d215      	bcs.n	801284e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012822:	4938      	ldr	r1, [pc, #224]	; (8012904 <etharp_tmr+0x14c>)
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	4613      	mov	r3, r2
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	4413      	add	r3, r2
 801282c:	00db      	lsls	r3, r3, #3
 801282e:	440b      	add	r3, r1
 8012830:	3314      	adds	r3, #20
 8012832:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012834:	2b01      	cmp	r3, #1
 8012836:	d10e      	bne.n	8012856 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012838:	4932      	ldr	r1, [pc, #200]	; (8012904 <etharp_tmr+0x14c>)
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	4613      	mov	r3, r2
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	4413      	add	r3, r2
 8012842:	00db      	lsls	r3, r3, #3
 8012844:	440b      	add	r3, r1
 8012846:	3312      	adds	r3, #18
 8012848:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801284a:	2b04      	cmp	r3, #4
 801284c:	d903      	bls.n	8012856 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7ff ff80 	bl	8012754 <etharp_free_entry>
 8012854:	e04a      	b.n	80128ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012856:	492b      	ldr	r1, [pc, #172]	; (8012904 <etharp_tmr+0x14c>)
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	4613      	mov	r3, r2
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4413      	add	r3, r2
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	440b      	add	r3, r1
 8012864:	3314      	adds	r3, #20
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d10a      	bne.n	8012882 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801286c:	4925      	ldr	r1, [pc, #148]	; (8012904 <etharp_tmr+0x14c>)
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	4613      	mov	r3, r2
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	4413      	add	r3, r2
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	440b      	add	r3, r1
 801287a:	3314      	adds	r3, #20
 801287c:	2204      	movs	r2, #4
 801287e:	701a      	strb	r2, [r3, #0]
 8012880:	e034      	b.n	80128ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012882:	4920      	ldr	r1, [pc, #128]	; (8012904 <etharp_tmr+0x14c>)
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	4613      	mov	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	440b      	add	r3, r1
 8012890:	3314      	adds	r3, #20
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b04      	cmp	r3, #4
 8012896:	d10a      	bne.n	80128ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012898:	491a      	ldr	r1, [pc, #104]	; (8012904 <etharp_tmr+0x14c>)
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	4613      	mov	r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	440b      	add	r3, r1
 80128a6:	3314      	adds	r3, #20
 80128a8:	2202      	movs	r2, #2
 80128aa:	701a      	strb	r2, [r3, #0]
 80128ac:	e01e      	b.n	80128ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128ae:	4915      	ldr	r1, [pc, #84]	; (8012904 <etharp_tmr+0x14c>)
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	4613      	mov	r3, r2
 80128b4:	005b      	lsls	r3, r3, #1
 80128b6:	4413      	add	r3, r2
 80128b8:	00db      	lsls	r3, r3, #3
 80128ba:	440b      	add	r3, r1
 80128bc:	3314      	adds	r3, #20
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d113      	bne.n	80128ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80128c4:	490f      	ldr	r1, [pc, #60]	; (8012904 <etharp_tmr+0x14c>)
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	4613      	mov	r3, r2
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	440b      	add	r3, r1
 80128d2:	3308      	adds	r3, #8
 80128d4:	6818      	ldr	r0, [r3, #0]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	4613      	mov	r3, r2
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	4413      	add	r3, r2
 80128de:	00db      	lsls	r3, r3, #3
 80128e0:	4a08      	ldr	r2, [pc, #32]	; (8012904 <etharp_tmr+0x14c>)
 80128e2:	4413      	add	r3, r2
 80128e4:	3304      	adds	r3, #4
 80128e6:	4619      	mov	r1, r3
 80128e8:	f000 fe72 	bl	80135d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	3301      	adds	r3, #1
 80128f0:	607b      	str	r3, [r7, #4]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2b09      	cmp	r3, #9
 80128f6:	f77f af65 	ble.w	80127c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80128fa:	bf00      	nop
 80128fc:	bf00      	nop
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	2000d458 	.word	0x2000d458

08012908 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b08a      	sub	sp, #40	; 0x28
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	460b      	mov	r3, r1
 8012912:	607a      	str	r2, [r7, #4]
 8012914:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012916:	230a      	movs	r3, #10
 8012918:	84fb      	strh	r3, [r7, #38]	; 0x26
 801291a:	230a      	movs	r3, #10
 801291c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801291e:	230a      	movs	r3, #10
 8012920:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012922:	2300      	movs	r3, #0
 8012924:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012926:	230a      	movs	r3, #10
 8012928:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	83bb      	strh	r3, [r7, #28]
 801292e:	2300      	movs	r3, #0
 8012930:	837b      	strh	r3, [r7, #26]
 8012932:	2300      	movs	r3, #0
 8012934:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012936:	2300      	movs	r3, #0
 8012938:	843b      	strh	r3, [r7, #32]
 801293a:	e0ae      	b.n	8012a9a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801293c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012940:	49a6      	ldr	r1, [pc, #664]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012942:	4613      	mov	r3, r2
 8012944:	005b      	lsls	r3, r3, #1
 8012946:	4413      	add	r3, r2
 8012948:	00db      	lsls	r3, r3, #3
 801294a:	440b      	add	r3, r1
 801294c:	3314      	adds	r3, #20
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012952:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012956:	2b0a      	cmp	r3, #10
 8012958:	d105      	bne.n	8012966 <etharp_find_entry+0x5e>
 801295a:	7dfb      	ldrb	r3, [r7, #23]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d102      	bne.n	8012966 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012960:	8c3b      	ldrh	r3, [r7, #32]
 8012962:	847b      	strh	r3, [r7, #34]	; 0x22
 8012964:	e095      	b.n	8012a92 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012966:	7dfb      	ldrb	r3, [r7, #23]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 8092 	beq.w	8012a92 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801296e:	7dfb      	ldrb	r3, [r7, #23]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d009      	beq.n	8012988 <etharp_find_entry+0x80>
 8012974:	7dfb      	ldrb	r3, [r7, #23]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d806      	bhi.n	8012988 <etharp_find_entry+0x80>
 801297a:	4b99      	ldr	r3, [pc, #612]	; (8012be0 <etharp_find_entry+0x2d8>)
 801297c:	f240 1223 	movw	r2, #291	; 0x123
 8012980:	4998      	ldr	r1, [pc, #608]	; (8012be4 <etharp_find_entry+0x2dc>)
 8012982:	4899      	ldr	r0, [pc, #612]	; (8012be8 <etharp_find_entry+0x2e0>)
 8012984:	f002 fbc0 	bl	8015108 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d020      	beq.n	80129d0 <etharp_find_entry+0xc8>
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	6819      	ldr	r1, [r3, #0]
 8012992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012996:	4891      	ldr	r0, [pc, #580]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012998:	4613      	mov	r3, r2
 801299a:	005b      	lsls	r3, r3, #1
 801299c:	4413      	add	r3, r2
 801299e:	00db      	lsls	r3, r3, #3
 80129a0:	4403      	add	r3, r0
 80129a2:	3304      	adds	r3, #4
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4299      	cmp	r1, r3
 80129a8:	d112      	bne.n	80129d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00c      	beq.n	80129ca <etharp_find_entry+0xc2>
 80129b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129b4:	4989      	ldr	r1, [pc, #548]	; (8012bdc <etharp_find_entry+0x2d4>)
 80129b6:	4613      	mov	r3, r2
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	440b      	add	r3, r1
 80129c0:	3308      	adds	r3, #8
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d102      	bne.n	80129d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80129ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129ce:	e100      	b.n	8012bd2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80129d0:	7dfb      	ldrb	r3, [r7, #23]
 80129d2:	2b01      	cmp	r3, #1
 80129d4:	d140      	bne.n	8012a58 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80129d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129da:	4980      	ldr	r1, [pc, #512]	; (8012bdc <etharp_find_entry+0x2d4>)
 80129dc:	4613      	mov	r3, r2
 80129de:	005b      	lsls	r3, r3, #1
 80129e0:	4413      	add	r3, r2
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	440b      	add	r3, r1
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d01a      	beq.n	8012a22 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80129ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129f0:	497a      	ldr	r1, [pc, #488]	; (8012bdc <etharp_find_entry+0x2d4>)
 80129f2:	4613      	mov	r3, r2
 80129f4:	005b      	lsls	r3, r3, #1
 80129f6:	4413      	add	r3, r2
 80129f8:	00db      	lsls	r3, r3, #3
 80129fa:	440b      	add	r3, r1
 80129fc:	3312      	adds	r3, #18
 80129fe:	881b      	ldrh	r3, [r3, #0]
 8012a00:	8bba      	ldrh	r2, [r7, #28]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d845      	bhi.n	8012a92 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a06:	8c3b      	ldrh	r3, [r7, #32]
 8012a08:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a0e:	4973      	ldr	r1, [pc, #460]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012a10:	4613      	mov	r3, r2
 8012a12:	005b      	lsls	r3, r3, #1
 8012a14:	4413      	add	r3, r2
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	440b      	add	r3, r1
 8012a1a:	3312      	adds	r3, #18
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	83bb      	strh	r3, [r7, #28]
 8012a20:	e037      	b.n	8012a92 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a26:	496d      	ldr	r1, [pc, #436]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012a28:	4613      	mov	r3, r2
 8012a2a:	005b      	lsls	r3, r3, #1
 8012a2c:	4413      	add	r3, r2
 8012a2e:	00db      	lsls	r3, r3, #3
 8012a30:	440b      	add	r3, r1
 8012a32:	3312      	adds	r3, #18
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	8b7a      	ldrh	r2, [r7, #26]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d82a      	bhi.n	8012a92 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a3c:	8c3b      	ldrh	r3, [r7, #32]
 8012a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012a40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a44:	4965      	ldr	r1, [pc, #404]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012a46:	4613      	mov	r3, r2
 8012a48:	005b      	lsls	r3, r3, #1
 8012a4a:	4413      	add	r3, r2
 8012a4c:	00db      	lsls	r3, r3, #3
 8012a4e:	440b      	add	r3, r1
 8012a50:	3312      	adds	r3, #18
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	837b      	strh	r3, [r7, #26]
 8012a56:	e01c      	b.n	8012a92 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a58:	7dfb      	ldrb	r3, [r7, #23]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d919      	bls.n	8012a92 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a62:	495e      	ldr	r1, [pc, #376]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012a64:	4613      	mov	r3, r2
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	440b      	add	r3, r1
 8012a6e:	3312      	adds	r3, #18
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	8b3a      	ldrh	r2, [r7, #24]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d80c      	bhi.n	8012a92 <etharp_find_entry+0x18a>
            old_stable = i;
 8012a78:	8c3b      	ldrh	r3, [r7, #32]
 8012a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012a7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a80:	4956      	ldr	r1, [pc, #344]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012a82:	4613      	mov	r3, r2
 8012a84:	005b      	lsls	r3, r3, #1
 8012a86:	4413      	add	r3, r2
 8012a88:	00db      	lsls	r3, r3, #3
 8012a8a:	440b      	add	r3, r1
 8012a8c:	3312      	adds	r3, #18
 8012a8e:	881b      	ldrh	r3, [r3, #0]
 8012a90:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a92:	8c3b      	ldrh	r3, [r7, #32]
 8012a94:	3301      	adds	r3, #1
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	843b      	strh	r3, [r7, #32]
 8012a9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a9e:	2b09      	cmp	r3, #9
 8012aa0:	f77f af4c 	ble.w	801293c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012aa4:	7afb      	ldrb	r3, [r7, #11]
 8012aa6:	f003 0302 	and.w	r3, r3, #2
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d108      	bne.n	8012ac0 <etharp_find_entry+0x1b8>
 8012aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012ab2:	2b0a      	cmp	r3, #10
 8012ab4:	d107      	bne.n	8012ac6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012ab6:	7afb      	ldrb	r3, [r7, #11]
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d102      	bne.n	8012ac6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac4:	e085      	b.n	8012bd2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012ac6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012aca:	2b09      	cmp	r3, #9
 8012acc:	dc02      	bgt.n	8012ad4 <etharp_find_entry+0x1cc>
    i = empty;
 8012ace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ad0:	843b      	strh	r3, [r7, #32]
 8012ad2:	e039      	b.n	8012b48 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012ad4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012ad8:	2b09      	cmp	r3, #9
 8012ada:	dc14      	bgt.n	8012b06 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ade:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ae4:	493d      	ldr	r1, [pc, #244]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012ae6:	4613      	mov	r3, r2
 8012ae8:	005b      	lsls	r3, r3, #1
 8012aea:	4413      	add	r3, r2
 8012aec:	00db      	lsls	r3, r3, #3
 8012aee:	440b      	add	r3, r1
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d018      	beq.n	8012b28 <etharp_find_entry+0x220>
 8012af6:	4b3a      	ldr	r3, [pc, #232]	; (8012be0 <etharp_find_entry+0x2d8>)
 8012af8:	f240 126d 	movw	r2, #365	; 0x16d
 8012afc:	493b      	ldr	r1, [pc, #236]	; (8012bec <etharp_find_entry+0x2e4>)
 8012afe:	483a      	ldr	r0, [pc, #232]	; (8012be8 <etharp_find_entry+0x2e0>)
 8012b00:	f002 fb02 	bl	8015108 <iprintf>
 8012b04:	e010      	b.n	8012b28 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b0a:	2b09      	cmp	r3, #9
 8012b0c:	dc02      	bgt.n	8012b14 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b10:	843b      	strh	r3, [r7, #32]
 8012b12:	e009      	b.n	8012b28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b18:	2b09      	cmp	r3, #9
 8012b1a:	dc02      	bgt.n	8012b22 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b1c:	8bfb      	ldrh	r3, [r7, #30]
 8012b1e:	843b      	strh	r3, [r7, #32]
 8012b20:	e002      	b.n	8012b28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b22:	f04f 33ff 	mov.w	r3, #4294967295
 8012b26:	e054      	b.n	8012bd2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b2c:	2b09      	cmp	r3, #9
 8012b2e:	dd06      	ble.n	8012b3e <etharp_find_entry+0x236>
 8012b30:	4b2b      	ldr	r3, [pc, #172]	; (8012be0 <etharp_find_entry+0x2d8>)
 8012b32:	f240 127f 	movw	r2, #383	; 0x17f
 8012b36:	492e      	ldr	r1, [pc, #184]	; (8012bf0 <etharp_find_entry+0x2e8>)
 8012b38:	482b      	ldr	r0, [pc, #172]	; (8012be8 <etharp_find_entry+0x2e0>)
 8012b3a:	f002 fae5 	bl	8015108 <iprintf>
    etharp_free_entry(i);
 8012b3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff fe06 	bl	8012754 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b4c:	2b09      	cmp	r3, #9
 8012b4e:	dd06      	ble.n	8012b5e <etharp_find_entry+0x256>
 8012b50:	4b23      	ldr	r3, [pc, #140]	; (8012be0 <etharp_find_entry+0x2d8>)
 8012b52:	f240 1283 	movw	r2, #387	; 0x183
 8012b56:	4926      	ldr	r1, [pc, #152]	; (8012bf0 <etharp_find_entry+0x2e8>)
 8012b58:	4823      	ldr	r0, [pc, #140]	; (8012be8 <etharp_find_entry+0x2e0>)
 8012b5a:	f002 fad5 	bl	8015108 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b62:	491e      	ldr	r1, [pc, #120]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012b64:	4613      	mov	r3, r2
 8012b66:	005b      	lsls	r3, r3, #1
 8012b68:	4413      	add	r3, r2
 8012b6a:	00db      	lsls	r3, r3, #3
 8012b6c:	440b      	add	r3, r1
 8012b6e:	3314      	adds	r3, #20
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d006      	beq.n	8012b84 <etharp_find_entry+0x27c>
 8012b76:	4b1a      	ldr	r3, [pc, #104]	; (8012be0 <etharp_find_entry+0x2d8>)
 8012b78:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012b7c:	491d      	ldr	r1, [pc, #116]	; (8012bf4 <etharp_find_entry+0x2ec>)
 8012b7e:	481a      	ldr	r0, [pc, #104]	; (8012be8 <etharp_find_entry+0x2e0>)
 8012b80:	f002 fac2 	bl	8015108 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00b      	beq.n	8012ba2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6819      	ldr	r1, [r3, #0]
 8012b92:	4812      	ldr	r0, [pc, #72]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012b94:	4613      	mov	r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	4413      	add	r3, r2
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	4403      	add	r3, r0
 8012b9e:	3304      	adds	r3, #4
 8012ba0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012ba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ba6:	490d      	ldr	r1, [pc, #52]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012ba8:	4613      	mov	r3, r2
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4413      	add	r3, r2
 8012bae:	00db      	lsls	r3, r3, #3
 8012bb0:	440b      	add	r3, r1
 8012bb2:	3312      	adds	r3, #18
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012bb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bbc:	4907      	ldr	r1, [pc, #28]	; (8012bdc <etharp_find_entry+0x2d4>)
 8012bbe:	4613      	mov	r3, r2
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	4413      	add	r3, r2
 8012bc4:	00db      	lsls	r3, r3, #3
 8012bc6:	440b      	add	r3, r1
 8012bc8:	3308      	adds	r3, #8
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012bce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3728      	adds	r7, #40	; 0x28
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	2000d458 	.word	0x2000d458
 8012be0:	080187dc 	.word	0x080187dc
 8012be4:	08018814 	.word	0x08018814
 8012be8:	08018854 	.word	0x08018854
 8012bec:	0801887c 	.word	0x0801887c
 8012bf0:	08018894 	.word	0x08018894
 8012bf4:	080188a8 	.word	0x080188a8

08012bf8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b088      	sub	sp, #32
 8012bfc:	af02      	add	r7, sp, #8
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
 8012c04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c0c:	2b06      	cmp	r3, #6
 8012c0e:	d006      	beq.n	8012c1e <etharp_update_arp_entry+0x26>
 8012c10:	4b48      	ldr	r3, [pc, #288]	; (8012d34 <etharp_update_arp_entry+0x13c>)
 8012c12:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012c16:	4948      	ldr	r1, [pc, #288]	; (8012d38 <etharp_update_arp_entry+0x140>)
 8012c18:	4848      	ldr	r0, [pc, #288]	; (8012d3c <etharp_update_arp_entry+0x144>)
 8012c1a:	f002 fa75 	bl	8015108 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d012      	beq.n	8012c4a <etharp_update_arp_entry+0x52>
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d00e      	beq.n	8012c4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68f9      	ldr	r1, [r7, #12]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f001 f920 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8012c38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d105      	bne.n	8012c4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c46:	2be0      	cmp	r3, #224	; 0xe0
 8012c48:	d102      	bne.n	8012c50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c4a:	f06f 030f 	mvn.w	r3, #15
 8012c4e:	e06c      	b.n	8012d2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	68fa      	ldr	r2, [r7, #12]
 8012c54:	4619      	mov	r1, r3
 8012c56:	68b8      	ldr	r0, [r7, #8]
 8012c58:	f7ff fe56 	bl	8012908 <etharp_find_entry>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012c60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	da02      	bge.n	8012c6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c68:	8afb      	ldrh	r3, [r7, #22]
 8012c6a:	b25b      	sxtb	r3, r3
 8012c6c:	e05d      	b.n	8012d2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c72:	4933      	ldr	r1, [pc, #204]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012c74:	4613      	mov	r3, r2
 8012c76:	005b      	lsls	r3, r3, #1
 8012c78:	4413      	add	r3, r2
 8012c7a:	00db      	lsls	r3, r3, #3
 8012c7c:	440b      	add	r3, r1
 8012c7e:	3314      	adds	r3, #20
 8012c80:	2202      	movs	r2, #2
 8012c82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012c84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c88:	492d      	ldr	r1, [pc, #180]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	005b      	lsls	r3, r3, #1
 8012c8e:	4413      	add	r3, r2
 8012c90:	00db      	lsls	r3, r3, #3
 8012c92:	440b      	add	r3, r1
 8012c94:	3308      	adds	r3, #8
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012c9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	4413      	add	r3, r2
 8012ca4:	00db      	lsls	r3, r3, #3
 8012ca6:	3308      	adds	r3, #8
 8012ca8:	4a25      	ldr	r2, [pc, #148]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012caa:	4413      	add	r3, r2
 8012cac:	3304      	adds	r3, #4
 8012cae:	2206      	movs	r2, #6
 8012cb0:	6879      	ldr	r1, [r7, #4]
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f002 fb59 	bl	801536a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cbc:	4920      	ldr	r1, [pc, #128]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	005b      	lsls	r3, r3, #1
 8012cc2:	4413      	add	r3, r2
 8012cc4:	00db      	lsls	r3, r3, #3
 8012cc6:	440b      	add	r3, r1
 8012cc8:	3312      	adds	r3, #18
 8012cca:	2200      	movs	r2, #0
 8012ccc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd2:	491b      	ldr	r1, [pc, #108]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	005b      	lsls	r3, r3, #1
 8012cd8:	4413      	add	r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	440b      	add	r3, r1
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d021      	beq.n	8012d28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ce8:	4915      	ldr	r1, [pc, #84]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012cea:	4613      	mov	r3, r2
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	4413      	add	r3, r2
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	440b      	add	r3, r1
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cfc:	4910      	ldr	r1, [pc, #64]	; (8012d40 <etharp_update_arp_entry+0x148>)
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	440b      	add	r3, r1
 8012d08:	2200      	movs	r2, #0
 8012d0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6939      	ldr	r1, [r7, #16]
 8012d1c:	68f8      	ldr	r0, [r7, #12]
 8012d1e:	f001 ffb9 	bl	8014c94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d22:	6938      	ldr	r0, [r7, #16]
 8012d24:	f7f7 fc82 	bl	800a62c <pbuf_free>
  }
  return ERR_OK;
 8012d28:	2300      	movs	r3, #0
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3718      	adds	r7, #24
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	080187dc 	.word	0x080187dc
 8012d38:	080188d4 	.word	0x080188d4
 8012d3c:	08018854 	.word	0x08018854
 8012d40:	2000d458 	.word	0x2000d458

08012d44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	e01e      	b.n	8012d90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d52:	4913      	ldr	r1, [pc, #76]	; (8012da0 <etharp_cleanup_netif+0x5c>)
 8012d54:	68fa      	ldr	r2, [r7, #12]
 8012d56:	4613      	mov	r3, r2
 8012d58:	005b      	lsls	r3, r3, #1
 8012d5a:	4413      	add	r3, r2
 8012d5c:	00db      	lsls	r3, r3, #3
 8012d5e:	440b      	add	r3, r1
 8012d60:	3314      	adds	r3, #20
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012d66:	7afb      	ldrb	r3, [r7, #11]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00e      	beq.n	8012d8a <etharp_cleanup_netif+0x46>
 8012d6c:	490c      	ldr	r1, [pc, #48]	; (8012da0 <etharp_cleanup_netif+0x5c>)
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	4613      	mov	r3, r2
 8012d72:	005b      	lsls	r3, r3, #1
 8012d74:	4413      	add	r3, r2
 8012d76:	00db      	lsls	r3, r3, #3
 8012d78:	440b      	add	r3, r1
 8012d7a:	3308      	adds	r3, #8
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d102      	bne.n	8012d8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	f7ff fce5 	bl	8012754 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2b09      	cmp	r3, #9
 8012d94:	dddd      	ble.n	8012d52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012d96:	bf00      	nop
 8012d98:	bf00      	nop
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	2000d458 	.word	0x2000d458

08012da4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012da4:	b5b0      	push	{r4, r5, r7, lr}
 8012da6:	b08a      	sub	sp, #40	; 0x28
 8012da8:	af04      	add	r7, sp, #16
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d107      	bne.n	8012dc4 <etharp_input+0x20>
 8012db4:	4b3f      	ldr	r3, [pc, #252]	; (8012eb4 <etharp_input+0x110>)
 8012db6:	f240 228a 	movw	r2, #650	; 0x28a
 8012dba:	493f      	ldr	r1, [pc, #252]	; (8012eb8 <etharp_input+0x114>)
 8012dbc:	483f      	ldr	r0, [pc, #252]	; (8012ebc <etharp_input+0x118>)
 8012dbe:	f002 f9a3 	bl	8015108 <iprintf>
 8012dc2:	e074      	b.n	8012eae <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dd4:	d10c      	bne.n	8012df0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dda:	2b06      	cmp	r3, #6
 8012ddc:	d108      	bne.n	8012df0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012de2:	2b04      	cmp	r3, #4
 8012de4:	d104      	bne.n	8012df0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	885b      	ldrh	r3, [r3, #2]
 8012dea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012dec:	2b08      	cmp	r3, #8
 8012dee:	d003      	beq.n	8012df8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7f7 fc1b 	bl	800a62c <pbuf_free>
    return;
 8012df6:	e05a      	b.n	8012eae <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	330e      	adds	r3, #14
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	3318      	adds	r3, #24
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d102      	bne.n	8012e18 <etharp_input+0x74>
    for_us = 0;
 8012e12:	2300      	movs	r3, #0
 8012e14:	75fb      	strb	r3, [r7, #23]
 8012e16:	e009      	b.n	8012e2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	bf0c      	ite	eq
 8012e24:	2301      	moveq	r3, #1
 8012e26:	2300      	movne	r3, #0
 8012e28:	b2db      	uxtb	r3, r3
 8012e2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	f103 0208 	add.w	r2, r3, #8
 8012e32:	7dfb      	ldrb	r3, [r7, #23]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d001      	beq.n	8012e3c <etharp_input+0x98>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e000      	b.n	8012e3e <etharp_input+0x9a>
 8012e3c:	2302      	movs	r3, #2
 8012e3e:	f107 010c 	add.w	r1, r7, #12
 8012e42:	6838      	ldr	r0, [r7, #0]
 8012e44:	f7ff fed8 	bl	8012bf8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	88db      	ldrh	r3, [r3, #6]
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e52:	d003      	beq.n	8012e5c <etharp_input+0xb8>
 8012e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e58:	d01e      	beq.n	8012e98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e5a:	e025      	b.n	8012ea8 <etharp_input+0x104>
      if (for_us) {
 8012e5c:	7dfb      	ldrb	r3, [r7, #23]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d021      	beq.n	8012ea6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012e78:	693a      	ldr	r2, [r7, #16]
 8012e7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012e7c:	2102      	movs	r1, #2
 8012e7e:	9103      	str	r1, [sp, #12]
 8012e80:	f107 010c 	add.w	r1, r7, #12
 8012e84:	9102      	str	r1, [sp, #8]
 8012e86:	9201      	str	r2, [sp, #4]
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	462b      	mov	r3, r5
 8012e8c:	4622      	mov	r2, r4
 8012e8e:	4601      	mov	r1, r0
 8012e90:	6838      	ldr	r0, [r7, #0]
 8012e92:	f000 faef 	bl	8013474 <etharp_raw>
      break;
 8012e96:	e006      	b.n	8012ea6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012e98:	f107 030c 	add.w	r3, r7, #12
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	6838      	ldr	r0, [r7, #0]
 8012ea0:	f7fe f9fc 	bl	801129c <dhcp_arp_reply>
      break;
 8012ea4:	e000      	b.n	8012ea8 <etharp_input+0x104>
      break;
 8012ea6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7f7 fbbf 	bl	800a62c <pbuf_free>
}
 8012eae:	3718      	adds	r7, #24
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb4:	080187dc 	.word	0x080187dc
 8012eb8:	0801892c 	.word	0x0801892c
 8012ebc:	08018854 	.word	0x08018854

08012ec0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af02      	add	r7, sp, #8
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	4613      	mov	r3, r2
 8012ecc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012ece:	79fa      	ldrb	r2, [r7, #7]
 8012ed0:	4944      	ldr	r1, [pc, #272]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	4413      	add	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	440b      	add	r3, r1
 8012edc:	3314      	adds	r3, #20
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d806      	bhi.n	8012ef2 <etharp_output_to_arp_index+0x32>
 8012ee4:	4b40      	ldr	r3, [pc, #256]	; (8012fe8 <etharp_output_to_arp_index+0x128>)
 8012ee6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012eea:	4940      	ldr	r1, [pc, #256]	; (8012fec <etharp_output_to_arp_index+0x12c>)
 8012eec:	4840      	ldr	r0, [pc, #256]	; (8012ff0 <etharp_output_to_arp_index+0x130>)
 8012eee:	f002 f90b 	bl	8015108 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012ef2:	79fa      	ldrb	r2, [r7, #7]
 8012ef4:	493b      	ldr	r1, [pc, #236]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	005b      	lsls	r3, r3, #1
 8012efa:	4413      	add	r3, r2
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	440b      	add	r3, r1
 8012f00:	3314      	adds	r3, #20
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d153      	bne.n	8012fb0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f08:	79fa      	ldrb	r2, [r7, #7]
 8012f0a:	4936      	ldr	r1, [pc, #216]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	005b      	lsls	r3, r3, #1
 8012f10:	4413      	add	r3, r2
 8012f12:	00db      	lsls	r3, r3, #3
 8012f14:	440b      	add	r3, r1
 8012f16:	3312      	adds	r3, #18
 8012f18:	881b      	ldrh	r3, [r3, #0]
 8012f1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012f1e:	d919      	bls.n	8012f54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f20:	79fa      	ldrb	r2, [r7, #7]
 8012f22:	4613      	mov	r3, r2
 8012f24:	005b      	lsls	r3, r3, #1
 8012f26:	4413      	add	r3, r2
 8012f28:	00db      	lsls	r3, r3, #3
 8012f2a:	4a2e      	ldr	r2, [pc, #184]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f2c:	4413      	add	r3, r2
 8012f2e:	3304      	adds	r3, #4
 8012f30:	4619      	mov	r1, r3
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f000 fb4c 	bl	80135d0 <etharp_request>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d138      	bne.n	8012fb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f3e:	79fa      	ldrb	r2, [r7, #7]
 8012f40:	4928      	ldr	r1, [pc, #160]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f42:	4613      	mov	r3, r2
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	4413      	add	r3, r2
 8012f48:	00db      	lsls	r3, r3, #3
 8012f4a:	440b      	add	r3, r1
 8012f4c:	3314      	adds	r3, #20
 8012f4e:	2203      	movs	r2, #3
 8012f50:	701a      	strb	r2, [r3, #0]
 8012f52:	e02d      	b.n	8012fb0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f54:	79fa      	ldrb	r2, [r7, #7]
 8012f56:	4923      	ldr	r1, [pc, #140]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f58:	4613      	mov	r3, r2
 8012f5a:	005b      	lsls	r3, r3, #1
 8012f5c:	4413      	add	r3, r2
 8012f5e:	00db      	lsls	r3, r3, #3
 8012f60:	440b      	add	r3, r1
 8012f62:	3312      	adds	r3, #18
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f6a:	d321      	bcc.n	8012fb0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012f6c:	79fa      	ldrb	r2, [r7, #7]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	005b      	lsls	r3, r3, #1
 8012f72:	4413      	add	r3, r2
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	4a1b      	ldr	r2, [pc, #108]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f78:	4413      	add	r3, r2
 8012f7a:	1d19      	adds	r1, r3, #4
 8012f7c:	79fa      	ldrb	r2, [r7, #7]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	4413      	add	r3, r2
 8012f84:	00db      	lsls	r3, r3, #3
 8012f86:	3308      	adds	r3, #8
 8012f88:	4a16      	ldr	r2, [pc, #88]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012f8a:	4413      	add	r3, r2
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	461a      	mov	r2, r3
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f000 fafb 	bl	801358c <etharp_request_dst>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d109      	bne.n	8012fb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f9c:	79fa      	ldrb	r2, [r7, #7]
 8012f9e:	4911      	ldr	r1, [pc, #68]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	005b      	lsls	r3, r3, #1
 8012fa4:	4413      	add	r3, r2
 8012fa6:	00db      	lsls	r3, r3, #3
 8012fa8:	440b      	add	r3, r1
 8012faa:	3314      	adds	r3, #20
 8012fac:	2203      	movs	r2, #3
 8012fae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012fb6:	79fa      	ldrb	r2, [r7, #7]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	005b      	lsls	r3, r3, #1
 8012fbc:	4413      	add	r3, r2
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	3308      	adds	r3, #8
 8012fc2:	4a08      	ldr	r2, [pc, #32]	; (8012fe4 <etharp_output_to_arp_index+0x124>)
 8012fc4:	4413      	add	r3, r2
 8012fc6:	3304      	adds	r3, #4
 8012fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012fcc:	9200      	str	r2, [sp, #0]
 8012fce:	460a      	mov	r2, r1
 8012fd0:	68b9      	ldr	r1, [r7, #8]
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f001 fe5e 	bl	8014c94 <ethernet_output>
 8012fd8:	4603      	mov	r3, r0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	2000d458 	.word	0x2000d458
 8012fe8:	080187dc 	.word	0x080187dc
 8012fec:	0801894c 	.word	0x0801894c
 8012ff0:	08018854 	.word	0x08018854

08012ff4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b08a      	sub	sp, #40	; 0x28
 8012ff8:	af02      	add	r7, sp, #8
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d106      	bne.n	8013018 <etharp_output+0x24>
 801300a:	4b73      	ldr	r3, [pc, #460]	; (80131d8 <etharp_output+0x1e4>)
 801300c:	f240 321e 	movw	r2, #798	; 0x31e
 8013010:	4972      	ldr	r1, [pc, #456]	; (80131dc <etharp_output+0x1e8>)
 8013012:	4873      	ldr	r0, [pc, #460]	; (80131e0 <etharp_output+0x1ec>)
 8013014:	f002 f878 	bl	8015108 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d106      	bne.n	801302c <etharp_output+0x38>
 801301e:	4b6e      	ldr	r3, [pc, #440]	; (80131d8 <etharp_output+0x1e4>)
 8013020:	f240 321f 	movw	r2, #799	; 0x31f
 8013024:	496f      	ldr	r1, [pc, #444]	; (80131e4 <etharp_output+0x1f0>)
 8013026:	486e      	ldr	r0, [pc, #440]	; (80131e0 <etharp_output+0x1ec>)
 8013028:	f002 f86e 	bl	8015108 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <etharp_output+0x4c>
 8013032:	4b69      	ldr	r3, [pc, #420]	; (80131d8 <etharp_output+0x1e4>)
 8013034:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013038:	496b      	ldr	r1, [pc, #428]	; (80131e8 <etharp_output+0x1f4>)
 801303a:	4869      	ldr	r0, [pc, #420]	; (80131e0 <etharp_output+0x1ec>)
 801303c:	f002 f864 	bl	8015108 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68f9      	ldr	r1, [r7, #12]
 8013046:	4618      	mov	r0, r3
 8013048:	f000 ff16 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d002      	beq.n	8013058 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013052:	4b66      	ldr	r3, [pc, #408]	; (80131ec <etharp_output+0x1f8>)
 8013054:	61fb      	str	r3, [r7, #28]
 8013056:	e0af      	b.n	80131b8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013060:	2be0      	cmp	r3, #224	; 0xe0
 8013062:	d118      	bne.n	8013096 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013064:	2301      	movs	r3, #1
 8013066:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013068:	2300      	movs	r3, #0
 801306a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801306c:	235e      	movs	r3, #94	; 0x5e
 801306e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3301      	adds	r3, #1
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801307a:	b2db      	uxtb	r3, r3
 801307c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	3302      	adds	r3, #2
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	3303      	adds	r3, #3
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801308e:	f107 0310 	add.w	r3, r7, #16
 8013092:	61fb      	str	r3, [r7, #28]
 8013094:	e090      	b.n	80131b8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	3304      	adds	r3, #4
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	405a      	eors	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	3308      	adds	r3, #8
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4013      	ands	r3, r2
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d012      	beq.n	80130d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130b4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d00b      	beq.n	80130d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	330c      	adds	r3, #12
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d003      	beq.n	80130ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	330c      	adds	r3, #12
 80130ca:	61bb      	str	r3, [r7, #24]
 80130cc:	e002      	b.n	80130d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80130ce:	f06f 0303 	mvn.w	r3, #3
 80130d2:	e07d      	b.n	80131d0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130d4:	4b46      	ldr	r3, [pc, #280]	; (80131f0 <etharp_output+0x1fc>)
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	4619      	mov	r1, r3
 80130da:	4a46      	ldr	r2, [pc, #280]	; (80131f4 <etharp_output+0x200>)
 80130dc:	460b      	mov	r3, r1
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	440b      	add	r3, r1
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	4413      	add	r3, r2
 80130e6:	3314      	adds	r3, #20
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d925      	bls.n	801313a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80130ee:	4b40      	ldr	r3, [pc, #256]	; (80131f0 <etharp_output+0x1fc>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	4619      	mov	r1, r3
 80130f4:	4a3f      	ldr	r2, [pc, #252]	; (80131f4 <etharp_output+0x200>)
 80130f6:	460b      	mov	r3, r1
 80130f8:	005b      	lsls	r3, r3, #1
 80130fa:	440b      	add	r3, r1
 80130fc:	00db      	lsls	r3, r3, #3
 80130fe:	4413      	add	r3, r2
 8013100:	3308      	adds	r3, #8
 8013102:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013104:	68fa      	ldr	r2, [r7, #12]
 8013106:	429a      	cmp	r2, r3
 8013108:	d117      	bne.n	801313a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	4b38      	ldr	r3, [pc, #224]	; (80131f0 <etharp_output+0x1fc>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	4618      	mov	r0, r3
 8013114:	4937      	ldr	r1, [pc, #220]	; (80131f4 <etharp_output+0x200>)
 8013116:	4603      	mov	r3, r0
 8013118:	005b      	lsls	r3, r3, #1
 801311a:	4403      	add	r3, r0
 801311c:	00db      	lsls	r3, r3, #3
 801311e:	440b      	add	r3, r1
 8013120:	3304      	adds	r3, #4
 8013122:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013124:	429a      	cmp	r2, r3
 8013126:	d108      	bne.n	801313a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013128:	4b31      	ldr	r3, [pc, #196]	; (80131f0 <etharp_output+0x1fc>)
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	461a      	mov	r2, r3
 801312e:	68b9      	ldr	r1, [r7, #8]
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f7ff fec5 	bl	8012ec0 <etharp_output_to_arp_index>
 8013136:	4603      	mov	r3, r0
 8013138:	e04a      	b.n	80131d0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801313a:	2300      	movs	r3, #0
 801313c:	75fb      	strb	r3, [r7, #23]
 801313e:	e031      	b.n	80131a4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013140:	7dfa      	ldrb	r2, [r7, #23]
 8013142:	492c      	ldr	r1, [pc, #176]	; (80131f4 <etharp_output+0x200>)
 8013144:	4613      	mov	r3, r2
 8013146:	005b      	lsls	r3, r3, #1
 8013148:	4413      	add	r3, r2
 801314a:	00db      	lsls	r3, r3, #3
 801314c:	440b      	add	r3, r1
 801314e:	3314      	adds	r3, #20
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d923      	bls.n	801319e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013156:	7dfa      	ldrb	r2, [r7, #23]
 8013158:	4926      	ldr	r1, [pc, #152]	; (80131f4 <etharp_output+0x200>)
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	00db      	lsls	r3, r3, #3
 8013162:	440b      	add	r3, r1
 8013164:	3308      	adds	r3, #8
 8013166:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013168:	68fa      	ldr	r2, [r7, #12]
 801316a:	429a      	cmp	r2, r3
 801316c:	d117      	bne.n	801319e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	6819      	ldr	r1, [r3, #0]
 8013172:	7dfa      	ldrb	r2, [r7, #23]
 8013174:	481f      	ldr	r0, [pc, #124]	; (80131f4 <etharp_output+0x200>)
 8013176:	4613      	mov	r3, r2
 8013178:	005b      	lsls	r3, r3, #1
 801317a:	4413      	add	r3, r2
 801317c:	00db      	lsls	r3, r3, #3
 801317e:	4403      	add	r3, r0
 8013180:	3304      	adds	r3, #4
 8013182:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013184:	4299      	cmp	r1, r3
 8013186:	d10a      	bne.n	801319e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013188:	4a19      	ldr	r2, [pc, #100]	; (80131f0 <etharp_output+0x1fc>)
 801318a:	7dfb      	ldrb	r3, [r7, #23]
 801318c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801318e:	7dfb      	ldrb	r3, [r7, #23]
 8013190:	461a      	mov	r2, r3
 8013192:	68b9      	ldr	r1, [r7, #8]
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff fe93 	bl	8012ec0 <etharp_output_to_arp_index>
 801319a:	4603      	mov	r3, r0
 801319c:	e018      	b.n	80131d0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801319e:	7dfb      	ldrb	r3, [r7, #23]
 80131a0:	3301      	adds	r3, #1
 80131a2:	75fb      	strb	r3, [r7, #23]
 80131a4:	7dfb      	ldrb	r3, [r7, #23]
 80131a6:	2b09      	cmp	r3, #9
 80131a8:	d9ca      	bls.n	8013140 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	69b9      	ldr	r1, [r7, #24]
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f000 f822 	bl	80131f8 <etharp_query>
 80131b4:	4603      	mov	r3, r0
 80131b6:	e00b      	b.n	80131d0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80131be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	68b9      	ldr	r1, [r7, #8]
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f001 fd63 	bl	8014c94 <ethernet_output>
 80131ce:	4603      	mov	r3, r0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3720      	adds	r7, #32
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	080187dc 	.word	0x080187dc
 80131dc:	0801892c 	.word	0x0801892c
 80131e0:	08018854 	.word	0x08018854
 80131e4:	0801897c 	.word	0x0801897c
 80131e8:	0801891c 	.word	0x0801891c
 80131ec:	08019010 	.word	0x08019010
 80131f0:	2000d548 	.word	0x2000d548
 80131f4:	2000d458 	.word	0x2000d458

080131f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08c      	sub	sp, #48	; 0x30
 80131fc:	af02      	add	r7, sp, #8
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	332a      	adds	r3, #42	; 0x2a
 8013208:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801320a:	23ff      	movs	r3, #255	; 0xff
 801320c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68f9      	ldr	r1, [r7, #12]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 fe2c 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8013220:	4603      	mov	r3, r0
 8013222:	2b00      	cmp	r3, #0
 8013224:	d10c      	bne.n	8013240 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801322e:	2be0      	cmp	r3, #224	; 0xe0
 8013230:	d006      	beq.n	8013240 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013240:	f06f 030f 	mvn.w	r3, #15
 8013244:	e101      	b.n	801344a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	2101      	movs	r1, #1
 801324a:	68b8      	ldr	r0, [r7, #8]
 801324c:	f7ff fb5c 	bl	8012908 <etharp_find_entry>
 8013250:	4603      	mov	r3, r0
 8013252:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013254:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013258:	2b00      	cmp	r3, #0
 801325a:	da02      	bge.n	8013262 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801325c:	8a7b      	ldrh	r3, [r7, #18]
 801325e:	b25b      	sxtb	r3, r3
 8013260:	e0f3      	b.n	801344a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013262:	8a7b      	ldrh	r3, [r7, #18]
 8013264:	2b7e      	cmp	r3, #126	; 0x7e
 8013266:	d906      	bls.n	8013276 <etharp_query+0x7e>
 8013268:	4b7a      	ldr	r3, [pc, #488]	; (8013454 <etharp_query+0x25c>)
 801326a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801326e:	497a      	ldr	r1, [pc, #488]	; (8013458 <etharp_query+0x260>)
 8013270:	487a      	ldr	r0, [pc, #488]	; (801345c <etharp_query+0x264>)
 8013272:	f001 ff49 	bl	8015108 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013276:	8a7b      	ldrh	r3, [r7, #18]
 8013278:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801327a:	7c7a      	ldrb	r2, [r7, #17]
 801327c:	4978      	ldr	r1, [pc, #480]	; (8013460 <etharp_query+0x268>)
 801327e:	4613      	mov	r3, r2
 8013280:	005b      	lsls	r3, r3, #1
 8013282:	4413      	add	r3, r2
 8013284:	00db      	lsls	r3, r3, #3
 8013286:	440b      	add	r3, r1
 8013288:	3314      	adds	r3, #20
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d115      	bne.n	80132bc <etharp_query+0xc4>
    is_new_entry = 1;
 8013290:	2301      	movs	r3, #1
 8013292:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013294:	7c7a      	ldrb	r2, [r7, #17]
 8013296:	4972      	ldr	r1, [pc, #456]	; (8013460 <etharp_query+0x268>)
 8013298:	4613      	mov	r3, r2
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	4413      	add	r3, r2
 801329e:	00db      	lsls	r3, r3, #3
 80132a0:	440b      	add	r3, r1
 80132a2:	3314      	adds	r3, #20
 80132a4:	2201      	movs	r2, #1
 80132a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80132a8:	7c7a      	ldrb	r2, [r7, #17]
 80132aa:	496d      	ldr	r1, [pc, #436]	; (8013460 <etharp_query+0x268>)
 80132ac:	4613      	mov	r3, r2
 80132ae:	005b      	lsls	r3, r3, #1
 80132b0:	4413      	add	r3, r2
 80132b2:	00db      	lsls	r3, r3, #3
 80132b4:	440b      	add	r3, r1
 80132b6:	3308      	adds	r3, #8
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80132bc:	7c7a      	ldrb	r2, [r7, #17]
 80132be:	4968      	ldr	r1, [pc, #416]	; (8013460 <etharp_query+0x268>)
 80132c0:	4613      	mov	r3, r2
 80132c2:	005b      	lsls	r3, r3, #1
 80132c4:	4413      	add	r3, r2
 80132c6:	00db      	lsls	r3, r3, #3
 80132c8:	440b      	add	r3, r1
 80132ca:	3314      	adds	r3, #20
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d011      	beq.n	80132f6 <etharp_query+0xfe>
 80132d2:	7c7a      	ldrb	r2, [r7, #17]
 80132d4:	4962      	ldr	r1, [pc, #392]	; (8013460 <etharp_query+0x268>)
 80132d6:	4613      	mov	r3, r2
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	4413      	add	r3, r2
 80132dc:	00db      	lsls	r3, r3, #3
 80132de:	440b      	add	r3, r1
 80132e0:	3314      	adds	r3, #20
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d806      	bhi.n	80132f6 <etharp_query+0xfe>
 80132e8:	4b5a      	ldr	r3, [pc, #360]	; (8013454 <etharp_query+0x25c>)
 80132ea:	f240 32cd 	movw	r2, #973	; 0x3cd
 80132ee:	495d      	ldr	r1, [pc, #372]	; (8013464 <etharp_query+0x26c>)
 80132f0:	485a      	ldr	r0, [pc, #360]	; (801345c <etharp_query+0x264>)
 80132f2:	f001 ff09 	bl	8015108 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80132f6:	6a3b      	ldr	r3, [r7, #32]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d102      	bne.n	8013302 <etharp_query+0x10a>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10c      	bne.n	801331c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013302:	68b9      	ldr	r1, [r7, #8]
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f000 f963 	bl	80135d0 <etharp_request>
 801330a:	4603      	mov	r3, r0
 801330c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d102      	bne.n	801331c <etharp_query+0x124>
      return result;
 8013316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801331a:	e096      	b.n	801344a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d106      	bne.n	8013330 <etharp_query+0x138>
 8013322:	4b4c      	ldr	r3, [pc, #304]	; (8013454 <etharp_query+0x25c>)
 8013324:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013328:	494f      	ldr	r1, [pc, #316]	; (8013468 <etharp_query+0x270>)
 801332a:	484c      	ldr	r0, [pc, #304]	; (801345c <etharp_query+0x264>)
 801332c:	f001 feec 	bl	8015108 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013330:	7c7a      	ldrb	r2, [r7, #17]
 8013332:	494b      	ldr	r1, [pc, #300]	; (8013460 <etharp_query+0x268>)
 8013334:	4613      	mov	r3, r2
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	4413      	add	r3, r2
 801333a:	00db      	lsls	r3, r3, #3
 801333c:	440b      	add	r3, r1
 801333e:	3314      	adds	r3, #20
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d917      	bls.n	8013376 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013346:	4a49      	ldr	r2, [pc, #292]	; (801346c <etharp_query+0x274>)
 8013348:	7c7b      	ldrb	r3, [r7, #17]
 801334a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801334c:	7c7a      	ldrb	r2, [r7, #17]
 801334e:	4613      	mov	r3, r2
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	4413      	add	r3, r2
 8013354:	00db      	lsls	r3, r3, #3
 8013356:	3308      	adds	r3, #8
 8013358:	4a41      	ldr	r2, [pc, #260]	; (8013460 <etharp_query+0x268>)
 801335a:	4413      	add	r3, r2
 801335c:	3304      	adds	r3, #4
 801335e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013362:	9200      	str	r2, [sp, #0]
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	6879      	ldr	r1, [r7, #4]
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f001 fc93 	bl	8014c94 <ethernet_output>
 801336e:	4603      	mov	r3, r0
 8013370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013374:	e067      	b.n	8013446 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013376:	7c7a      	ldrb	r2, [r7, #17]
 8013378:	4939      	ldr	r1, [pc, #228]	; (8013460 <etharp_query+0x268>)
 801337a:	4613      	mov	r3, r2
 801337c:	005b      	lsls	r3, r3, #1
 801337e:	4413      	add	r3, r2
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	440b      	add	r3, r1
 8013384:	3314      	adds	r3, #20
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	2b01      	cmp	r3, #1
 801338a:	d15c      	bne.n	8013446 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013394:	e01c      	b.n	80133d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	895a      	ldrh	r2, [r3, #10]
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	891b      	ldrh	r3, [r3, #8]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d10a      	bne.n	80133b8 <etharp_query+0x1c0>
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <etharp_query+0x1c0>
 80133aa:	4b2a      	ldr	r3, [pc, #168]	; (8013454 <etharp_query+0x25c>)
 80133ac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80133b0:	492f      	ldr	r1, [pc, #188]	; (8013470 <etharp_query+0x278>)
 80133b2:	482a      	ldr	r0, [pc, #168]	; (801345c <etharp_query+0x264>)
 80133b4:	f001 fea8 	bl	8015108 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	7b1b      	ldrb	r3, [r3, #12]
 80133bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d002      	beq.n	80133ca <etharp_query+0x1d2>
        copy_needed = 1;
 80133c4:	2301      	movs	r3, #1
 80133c6:	61bb      	str	r3, [r7, #24]
        break;
 80133c8:	e005      	b.n	80133d6 <etharp_query+0x1de>
      }
      p = p->next;
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133d0:	69fb      	ldr	r3, [r7, #28]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d1df      	bne.n	8013396 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d007      	beq.n	80133ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80133e2:	200e      	movs	r0, #14
 80133e4:	f7f7 fb9a 	bl	800ab1c <pbuf_clone>
 80133e8:	61f8      	str	r0, [r7, #28]
 80133ea:	e004      	b.n	80133f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80133f0:	69f8      	ldr	r0, [r7, #28]
 80133f2:	f7f7 f9c1 	bl	800a778 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d021      	beq.n	8013440 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80133fc:	7c7a      	ldrb	r2, [r7, #17]
 80133fe:	4918      	ldr	r1, [pc, #96]	; (8013460 <etharp_query+0x268>)
 8013400:	4613      	mov	r3, r2
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	4413      	add	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	440b      	add	r3, r1
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00a      	beq.n	8013426 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013410:	7c7a      	ldrb	r2, [r7, #17]
 8013412:	4913      	ldr	r1, [pc, #76]	; (8013460 <etharp_query+0x268>)
 8013414:	4613      	mov	r3, r2
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	4413      	add	r3, r2
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	440b      	add	r3, r1
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4618      	mov	r0, r3
 8013422:	f7f7 f903 	bl	800a62c <pbuf_free>
      }
      arp_table[i].q = p;
 8013426:	7c7a      	ldrb	r2, [r7, #17]
 8013428:	490d      	ldr	r1, [pc, #52]	; (8013460 <etharp_query+0x268>)
 801342a:	4613      	mov	r3, r2
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	4413      	add	r3, r2
 8013430:	00db      	lsls	r3, r3, #3
 8013432:	440b      	add	r3, r1
 8013434:	69fa      	ldr	r2, [r7, #28]
 8013436:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013438:	2300      	movs	r3, #0
 801343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801343e:	e002      	b.n	8013446 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013440:	23ff      	movs	r3, #255	; 0xff
 8013442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013446:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801344a:	4618      	mov	r0, r3
 801344c:	3728      	adds	r7, #40	; 0x28
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	080187dc 	.word	0x080187dc
 8013458:	08018988 	.word	0x08018988
 801345c:	08018854 	.word	0x08018854
 8013460:	2000d458 	.word	0x2000d458
 8013464:	08018998 	.word	0x08018998
 8013468:	0801897c 	.word	0x0801897c
 801346c:	2000d548 	.word	0x2000d548
 8013470:	080189c0 	.word	0x080189c0

08013474 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b08a      	sub	sp, #40	; 0x28
 8013478:	af02      	add	r7, sp, #8
 801347a:	60f8      	str	r0, [r7, #12]
 801347c:	60b9      	str	r1, [r7, #8]
 801347e:	607a      	str	r2, [r7, #4]
 8013480:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013482:	2300      	movs	r3, #0
 8013484:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d106      	bne.n	801349a <etharp_raw+0x26>
 801348c:	4b3a      	ldr	r3, [pc, #232]	; (8013578 <etharp_raw+0x104>)
 801348e:	f240 4257 	movw	r2, #1111	; 0x457
 8013492:	493a      	ldr	r1, [pc, #232]	; (801357c <etharp_raw+0x108>)
 8013494:	483a      	ldr	r0, [pc, #232]	; (8013580 <etharp_raw+0x10c>)
 8013496:	f001 fe37 	bl	8015108 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801349a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801349e:	211c      	movs	r1, #28
 80134a0:	200e      	movs	r0, #14
 80134a2:	f7f6 fddf 	bl	800a064 <pbuf_alloc>
 80134a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80134ae:	f04f 33ff 	mov.w	r3, #4294967295
 80134b2:	e05d      	b.n	8013570 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	895b      	ldrh	r3, [r3, #10]
 80134b8:	2b1b      	cmp	r3, #27
 80134ba:	d806      	bhi.n	80134ca <etharp_raw+0x56>
 80134bc:	4b2e      	ldr	r3, [pc, #184]	; (8013578 <etharp_raw+0x104>)
 80134be:	f240 4262 	movw	r2, #1122	; 0x462
 80134c2:	4930      	ldr	r1, [pc, #192]	; (8013584 <etharp_raw+0x110>)
 80134c4:	482e      	ldr	r0, [pc, #184]	; (8013580 <etharp_raw+0x10c>)
 80134c6:	f001 fe1f 	bl	8015108 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80134d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f5 fd14 	bl	8008f00 <lwip_htons>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134e6:	2b06      	cmp	r3, #6
 80134e8:	d006      	beq.n	80134f8 <etharp_raw+0x84>
 80134ea:	4b23      	ldr	r3, [pc, #140]	; (8013578 <etharp_raw+0x104>)
 80134ec:	f240 4269 	movw	r2, #1129	; 0x469
 80134f0:	4925      	ldr	r1, [pc, #148]	; (8013588 <etharp_raw+0x114>)
 80134f2:	4823      	ldr	r0, [pc, #140]	; (8013580 <etharp_raw+0x10c>)
 80134f4:	f001 fe08 	bl	8015108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	3308      	adds	r3, #8
 80134fc:	2206      	movs	r2, #6
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	4618      	mov	r0, r3
 8013502:	f001 ff32 	bl	801536a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	3312      	adds	r3, #18
 801350a:	2206      	movs	r2, #6
 801350c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801350e:	4618      	mov	r0, r3
 8013510:	f001 ff2b 	bl	801536a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	330e      	adds	r3, #14
 8013518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801351a:	6812      	ldr	r2, [r2, #0]
 801351c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	3318      	adds	r3, #24
 8013522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013524:	6812      	ldr	r2, [r2, #0]
 8013526:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	2200      	movs	r2, #0
 801352c:	701a      	strb	r2, [r3, #0]
 801352e:	2200      	movs	r2, #0
 8013530:	f042 0201 	orr.w	r2, r2, #1
 8013534:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	2200      	movs	r2, #0
 801353a:	f042 0208 	orr.w	r2, r2, #8
 801353e:	709a      	strb	r2, [r3, #2]
 8013540:	2200      	movs	r2, #0
 8013542:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2206      	movs	r2, #6
 8013548:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	2204      	movs	r2, #4
 801354e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013550:	f640 0306 	movw	r3, #2054	; 0x806
 8013554:	9300      	str	r3, [sp, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	69b9      	ldr	r1, [r7, #24]
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	f001 fb99 	bl	8014c94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013562:	69b8      	ldr	r0, [r7, #24]
 8013564:	f7f7 f862 	bl	800a62c <pbuf_free>
  p = NULL;
 8013568:	2300      	movs	r3, #0
 801356a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801356c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013570:	4618      	mov	r0, r3
 8013572:	3720      	adds	r7, #32
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	080187dc 	.word	0x080187dc
 801357c:	0801892c 	.word	0x0801892c
 8013580:	08018854 	.word	0x08018854
 8013584:	080189dc 	.word	0x080189dc
 8013588:	08018a10 	.word	0x08018a10

0801358c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af04      	add	r7, sp, #16
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135a8:	2201      	movs	r2, #1
 80135aa:	9203      	str	r2, [sp, #12]
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	9202      	str	r2, [sp, #8]
 80135b0:	4a06      	ldr	r2, [pc, #24]	; (80135cc <etharp_request_dst+0x40>)
 80135b2:	9201      	str	r2, [sp, #4]
 80135b4:	9300      	str	r3, [sp, #0]
 80135b6:	4603      	mov	r3, r0
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	f7ff ff5a 	bl	8013474 <etharp_raw>
 80135c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	08019018 	.word	0x08019018

080135d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b082      	sub	sp, #8
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80135da:	4a05      	ldr	r2, [pc, #20]	; (80135f0 <etharp_request+0x20>)
 80135dc:	6839      	ldr	r1, [r7, #0]
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7ff ffd4 	bl	801358c <etharp_request_dst>
 80135e4:	4603      	mov	r3, r0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	08019010 	.word	0x08019010

080135f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b08e      	sub	sp, #56	; 0x38
 80135f8:	af04      	add	r7, sp, #16
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80135fe:	4b79      	ldr	r3, [pc, #484]	; (80137e4 <icmp_input+0x1f0>)
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 030f 	and.w	r3, r3, #15
 801360c:	b2db      	uxtb	r3, r3
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	b2db      	uxtb	r3, r3
 8013612:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013616:	2b13      	cmp	r3, #19
 8013618:	f240 80cd 	bls.w	80137b6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	895b      	ldrh	r3, [r3, #10]
 8013620:	2b03      	cmp	r3, #3
 8013622:	f240 80ca 	bls.w	80137ba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013630:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013634:	2b00      	cmp	r3, #0
 8013636:	f000 80b7 	beq.w	80137a8 <icmp_input+0x1b4>
 801363a:	2b08      	cmp	r3, #8
 801363c:	f040 80b7 	bne.w	80137ae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013640:	4b69      	ldr	r3, [pc, #420]	; (80137e8 <icmp_input+0x1f4>)
 8013642:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013644:	4b67      	ldr	r3, [pc, #412]	; (80137e4 <icmp_input+0x1f0>)
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801364c:	2be0      	cmp	r3, #224	; 0xe0
 801364e:	f000 80bb 	beq.w	80137c8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013652:	4b64      	ldr	r3, [pc, #400]	; (80137e4 <icmp_input+0x1f0>)
 8013654:	695b      	ldr	r3, [r3, #20]
 8013656:	4a63      	ldr	r2, [pc, #396]	; (80137e4 <icmp_input+0x1f0>)
 8013658:	6812      	ldr	r2, [r2, #0]
 801365a:	4611      	mov	r1, r2
 801365c:	4618      	mov	r0, r3
 801365e:	f000 fc0b 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	f040 80b1 	bne.w	80137cc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	891b      	ldrh	r3, [r3, #8]
 801366e:	2b07      	cmp	r3, #7
 8013670:	f240 80a5 	bls.w	80137be <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013676:	330e      	adds	r3, #14
 8013678:	4619      	mov	r1, r3
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7f6 ff40 	bl	800a500 <pbuf_add_header>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d04b      	beq.n	801371e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	891a      	ldrh	r2, [r3, #8]
 801368a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801368c:	4413      	add	r3, r2
 801368e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	891b      	ldrh	r3, [r3, #8]
 8013694:	8b7a      	ldrh	r2, [r7, #26]
 8013696:	429a      	cmp	r2, r3
 8013698:	f0c0 809a 	bcc.w	80137d0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801369c:	8b7b      	ldrh	r3, [r7, #26]
 801369e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136a2:	4619      	mov	r1, r3
 80136a4:	200e      	movs	r0, #14
 80136a6:	f7f6 fcdd 	bl	800a064 <pbuf_alloc>
 80136aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 8090 	beq.w	80137d4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	895b      	ldrh	r3, [r3, #10]
 80136b8:	461a      	mov	r2, r3
 80136ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136bc:	3308      	adds	r3, #8
 80136be:	429a      	cmp	r2, r3
 80136c0:	d203      	bcs.n	80136ca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80136c2:	6978      	ldr	r0, [r7, #20]
 80136c4:	f7f6 ffb2 	bl	800a62c <pbuf_free>
          goto icmperr;
 80136c8:	e085      	b.n	80137d6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80136d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136d2:	4618      	mov	r0, r3
 80136d4:	f001 fe49 	bl	801536a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80136d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136da:	4619      	mov	r1, r3
 80136dc:	6978      	ldr	r0, [r7, #20]
 80136de:	f7f6 ff1f 	bl	800a520 <pbuf_remove_header>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d009      	beq.n	80136fc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80136e8:	4b40      	ldr	r3, [pc, #256]	; (80137ec <icmp_input+0x1f8>)
 80136ea:	22b6      	movs	r2, #182	; 0xb6
 80136ec:	4940      	ldr	r1, [pc, #256]	; (80137f0 <icmp_input+0x1fc>)
 80136ee:	4841      	ldr	r0, [pc, #260]	; (80137f4 <icmp_input+0x200>)
 80136f0:	f001 fd0a 	bl	8015108 <iprintf>
          pbuf_free(r);
 80136f4:	6978      	ldr	r0, [r7, #20]
 80136f6:	f7f6 ff99 	bl	800a62c <pbuf_free>
          goto icmperr;
 80136fa:	e06c      	b.n	80137d6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80136fc:	6879      	ldr	r1, [r7, #4]
 80136fe:	6978      	ldr	r0, [r7, #20]
 8013700:	f7f7 f8c8 	bl	800a894 <pbuf_copy>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d003      	beq.n	8013712 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801370a:	6978      	ldr	r0, [r7, #20]
 801370c:	f7f6 ff8e 	bl	800a62c <pbuf_free>
          goto icmperr;
 8013710:	e061      	b.n	80137d6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7f6 ff8a 	bl	800a62c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	607b      	str	r3, [r7, #4]
 801371c:	e00f      	b.n	801373e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801371e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013720:	330e      	adds	r3, #14
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7f6 fefb 	bl	800a520 <pbuf_remove_header>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d006      	beq.n	801373e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013730:	4b2e      	ldr	r3, [pc, #184]	; (80137ec <icmp_input+0x1f8>)
 8013732:	22c7      	movs	r2, #199	; 0xc7
 8013734:	4930      	ldr	r1, [pc, #192]	; (80137f8 <icmp_input+0x204>)
 8013736:	482f      	ldr	r0, [pc, #188]	; (80137f4 <icmp_input+0x200>)
 8013738:	f001 fce6 	bl	8015108 <iprintf>
          goto icmperr;
 801373c:	e04b      	b.n	80137d6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013746:	4619      	mov	r1, r3
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f7f6 fed9 	bl	800a500 <pbuf_add_header>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d12b      	bne.n	80137ac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013762:	4b20      	ldr	r3, [pc, #128]	; (80137e4 <icmp_input+0x1f0>)
 8013764:	691a      	ldr	r2, [r3, #16]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2200      	movs	r2, #0
 801376e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	2200      	movs	r2, #0
 8013774:	709a      	strb	r2, [r3, #2]
 8013776:	2200      	movs	r2, #0
 8013778:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	22ff      	movs	r2, #255	; 0xff
 801377e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2200      	movs	r2, #0
 8013784:	729a      	strb	r2, [r3, #10]
 8013786:	2200      	movs	r2, #0
 8013788:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	9302      	str	r3, [sp, #8]
 801378e:	2301      	movs	r3, #1
 8013790:	9301      	str	r3, [sp, #4]
 8013792:	2300      	movs	r3, #0
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	23ff      	movs	r3, #255	; 0xff
 8013798:	2200      	movs	r2, #0
 801379a:	69f9      	ldr	r1, [r7, #28]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 fa93 	bl	8013cc8 <ip4_output_if>
 80137a2:	4603      	mov	r3, r0
 80137a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137a6:	e001      	b.n	80137ac <icmp_input+0x1b8>
      break;
 80137a8:	bf00      	nop
 80137aa:	e000      	b.n	80137ae <icmp_input+0x1ba>
      break;
 80137ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7f6 ff3c 	bl	800a62c <pbuf_free>
  return;
 80137b4:	e013      	b.n	80137de <icmp_input+0x1ea>
    goto lenerr;
 80137b6:	bf00      	nop
 80137b8:	e002      	b.n	80137c0 <icmp_input+0x1cc>
    goto lenerr;
 80137ba:	bf00      	nop
 80137bc:	e000      	b.n	80137c0 <icmp_input+0x1cc>
        goto lenerr;
 80137be:	bf00      	nop
lenerr:
  pbuf_free(p);
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f7f6 ff33 	bl	800a62c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137c6:	e00a      	b.n	80137de <icmp_input+0x1ea>
        goto icmperr;
 80137c8:	bf00      	nop
 80137ca:	e004      	b.n	80137d6 <icmp_input+0x1e2>
        goto icmperr;
 80137cc:	bf00      	nop
 80137ce:	e002      	b.n	80137d6 <icmp_input+0x1e2>
          goto icmperr;
 80137d0:	bf00      	nop
 80137d2:	e000      	b.n	80137d6 <icmp_input+0x1e2>
          goto icmperr;
 80137d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7f6 ff28 	bl	800a62c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80137de:	3728      	adds	r7, #40	; 0x28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20009c50 	.word	0x20009c50
 80137e8:	20009c64 	.word	0x20009c64
 80137ec:	08018a54 	.word	0x08018a54
 80137f0:	08018a8c 	.word	0x08018a8c
 80137f4:	08018ac4 	.word	0x08018ac4
 80137f8:	08018aec 	.word	0x08018aec

080137fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	460b      	mov	r3, r1
 8013806:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013808:	78fb      	ldrb	r3, [r7, #3]
 801380a:	461a      	mov	r2, r3
 801380c:	2103      	movs	r1, #3
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f000 f814 	bl	801383c <icmp_send_response>
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	460b      	mov	r3, r1
 8013826:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013828:	78fb      	ldrb	r3, [r7, #3]
 801382a:	461a      	mov	r2, r3
 801382c:	210b      	movs	r1, #11
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f000 f804 	bl	801383c <icmp_send_response>
}
 8013834:	bf00      	nop
 8013836:	3708      	adds	r7, #8
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b08c      	sub	sp, #48	; 0x30
 8013840:	af04      	add	r7, sp, #16
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	460b      	mov	r3, r1
 8013846:	70fb      	strb	r3, [r7, #3]
 8013848:	4613      	mov	r3, r2
 801384a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801384c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013850:	2124      	movs	r1, #36	; 0x24
 8013852:	2022      	movs	r0, #34	; 0x22
 8013854:	f7f6 fc06 	bl	800a064 <pbuf_alloc>
 8013858:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d04c      	beq.n	80138fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	895b      	ldrh	r3, [r3, #10]
 8013864:	2b23      	cmp	r3, #35	; 0x23
 8013866:	d806      	bhi.n	8013876 <icmp_send_response+0x3a>
 8013868:	4b26      	ldr	r3, [pc, #152]	; (8013904 <icmp_send_response+0xc8>)
 801386a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801386e:	4926      	ldr	r1, [pc, #152]	; (8013908 <icmp_send_response+0xcc>)
 8013870:	4826      	ldr	r0, [pc, #152]	; (801390c <icmp_send_response+0xd0>)
 8013872:	f001 fc49 	bl	8015108 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	78fa      	ldrb	r2, [r7, #3]
 8013886:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	78ba      	ldrb	r2, [r7, #2]
 801388c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2200      	movs	r2, #0
 8013892:	711a      	strb	r2, [r3, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	2200      	movs	r2, #0
 801389c:	719a      	strb	r2, [r3, #6]
 801389e:	2200      	movs	r2, #0
 80138a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	f103 0008 	add.w	r0, r3, #8
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	221c      	movs	r2, #28
 80138b0:	4619      	mov	r1, r3
 80138b2:	f001 fd5a 	bl	801536a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80138bc:	f107 030c 	add.w	r3, r7, #12
 80138c0:	4618      	mov	r0, r3
 80138c2:	f000 f825 	bl	8013910 <ip4_route>
 80138c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d011      	beq.n	80138f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2200      	movs	r2, #0
 80138d2:	709a      	strb	r2, [r3, #2]
 80138d4:	2200      	movs	r2, #0
 80138d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80138d8:	f107 020c 	add.w	r2, r7, #12
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	9302      	str	r3, [sp, #8]
 80138e0:	2301      	movs	r3, #1
 80138e2:	9301      	str	r3, [sp, #4]
 80138e4:	2300      	movs	r3, #0
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	23ff      	movs	r3, #255	; 0xff
 80138ea:	2100      	movs	r1, #0
 80138ec:	69f8      	ldr	r0, [r7, #28]
 80138ee:	f000 f9eb 	bl	8013cc8 <ip4_output_if>
  }
  pbuf_free(q);
 80138f2:	69f8      	ldr	r0, [r7, #28]
 80138f4:	f7f6 fe9a 	bl	800a62c <pbuf_free>
 80138f8:	e000      	b.n	80138fc <icmp_send_response+0xc0>
    return;
 80138fa:	bf00      	nop
}
 80138fc:	3720      	adds	r7, #32
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	08018a54 	.word	0x08018a54
 8013908:	08018b20 	.word	0x08018b20
 801390c:	08018ac4 	.word	0x08018ac4

08013910 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013910:	b480      	push	{r7}
 8013912:	b085      	sub	sp, #20
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013918:	4b33      	ldr	r3, [pc, #204]	; (80139e8 <ip4_route+0xd8>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	60fb      	str	r3, [r7, #12]
 801391e:	e036      	b.n	801398e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013926:	f003 0301 	and.w	r3, r3, #1
 801392a:	b2db      	uxtb	r3, r3
 801392c:	2b00      	cmp	r3, #0
 801392e:	d02b      	beq.n	8013988 <ip4_route+0x78>
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013936:	089b      	lsrs	r3, r3, #2
 8013938:	f003 0301 	and.w	r3, r3, #1
 801393c:	b2db      	uxtb	r3, r3
 801393e:	2b00      	cmp	r3, #0
 8013940:	d022      	beq.n	8013988 <ip4_route+0x78>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	3304      	adds	r3, #4
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d01d      	beq.n	8013988 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	3304      	adds	r3, #4
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	405a      	eors	r2, r3
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	3308      	adds	r3, #8
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	4013      	ands	r3, r2
 8013960:	2b00      	cmp	r3, #0
 8013962:	d101      	bne.n	8013968 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	e038      	b.n	80139da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801396e:	f003 0302 	and.w	r3, r3, #2
 8013972:	2b00      	cmp	r3, #0
 8013974:	d108      	bne.n	8013988 <ip4_route+0x78>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	330c      	adds	r3, #12
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	429a      	cmp	r2, r3
 8013982:	d101      	bne.n	8013988 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	e028      	b.n	80139da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	60fb      	str	r3, [r7, #12]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1c5      	bne.n	8013920 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013994:	4b15      	ldr	r3, [pc, #84]	; (80139ec <ip4_route+0xdc>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d01a      	beq.n	80139d2 <ip4_route+0xc2>
 801399c:	4b13      	ldr	r3, [pc, #76]	; (80139ec <ip4_route+0xdc>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139a4:	f003 0301 	and.w	r3, r3, #1
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d012      	beq.n	80139d2 <ip4_route+0xc2>
 80139ac:	4b0f      	ldr	r3, [pc, #60]	; (80139ec <ip4_route+0xdc>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139b4:	f003 0304 	and.w	r3, r3, #4
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139bc:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <ip4_route+0xdc>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	3304      	adds	r3, #4
 80139c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d004      	beq.n	80139d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	2b7f      	cmp	r3, #127	; 0x7f
 80139d0:	d101      	bne.n	80139d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80139d2:	2300      	movs	r3, #0
 80139d4:	e001      	b.n	80139da <ip4_route+0xca>
  }

  return netif_default;
 80139d6:	4b05      	ldr	r3, [pc, #20]	; (80139ec <ip4_route+0xdc>)
 80139d8:	681b      	ldr	r3, [r3, #0]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3714      	adds	r7, #20
 80139de:	46bd      	mov	sp, r7
 80139e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e4:	4770      	bx	lr
 80139e6:	bf00      	nop
 80139e8:	2000d3b8 	.word	0x2000d3b8
 80139ec:	2000d3bc 	.word	0x2000d3bc

080139f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139fe:	f003 0301 	and.w	r3, r3, #1
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d016      	beq.n	8013a36 <ip4_input_accept+0x46>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3304      	adds	r3, #4
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d011      	beq.n	8013a36 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a12:	4b0b      	ldr	r3, [pc, #44]	; (8013a40 <ip4_input_accept+0x50>)
 8013a14:	695a      	ldr	r2, [r3, #20]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	3304      	adds	r3, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d008      	beq.n	8013a32 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a20:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <ip4_input_accept+0x50>)
 8013a22:	695b      	ldr	r3, [r3, #20]
 8013a24:	6879      	ldr	r1, [r7, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f000 fa26 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8013a2c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a32:	2301      	movs	r3, #1
 8013a34:	e000      	b.n	8013a38 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a36:	2300      	movs	r3, #0
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20009c50 	.word	0x20009c50

08013a44 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b088      	sub	sp, #32
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	091b      	lsrs	r3, r3, #4
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	2b04      	cmp	r3, #4
 8013a62:	d004      	beq.n	8013a6e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7f6 fde1 	bl	800a62c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	e123      	b.n	8013cb6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	f003 030f 	and.w	r3, r3, #15
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	009b      	lsls	r3, r3, #2
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	885b      	ldrh	r3, [r3, #2]
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7f5 fa3b 	bl	8008f00 <lwip_htons>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	891b      	ldrh	r3, [r3, #8]
 8013a92:	8a3a      	ldrh	r2, [r7, #16]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d204      	bcs.n	8013aa2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013a98:	8a3b      	ldrh	r3, [r7, #16]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7f6 fc3f 	bl	800a320 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	895b      	ldrh	r3, [r3, #10]
 8013aa6:	8a7a      	ldrh	r2, [r7, #18]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d807      	bhi.n	8013abc <ip4_input+0x78>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	891b      	ldrh	r3, [r3, #8]
 8013ab0:	8a3a      	ldrh	r2, [r7, #16]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d802      	bhi.n	8013abc <ip4_input+0x78>
 8013ab6:	8a7b      	ldrh	r3, [r7, #18]
 8013ab8:	2b13      	cmp	r3, #19
 8013aba:	d804      	bhi.n	8013ac6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f7f6 fdb5 	bl	800a62c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	e0f7      	b.n	8013cb6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	691b      	ldr	r3, [r3, #16]
 8013aca:	4a7d      	ldr	r2, [pc, #500]	; (8013cc0 <ip4_input+0x27c>)
 8013acc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	68db      	ldr	r3, [r3, #12]
 8013ad2:	4a7b      	ldr	r2, [pc, #492]	; (8013cc0 <ip4_input+0x27c>)
 8013ad4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ad6:	4b7a      	ldr	r3, [pc, #488]	; (8013cc0 <ip4_input+0x27c>)
 8013ad8:	695b      	ldr	r3, [r3, #20]
 8013ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ade:	2be0      	cmp	r3, #224	; 0xe0
 8013ae0:	d112      	bne.n	8013b08 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ae8:	f003 0301 	and.w	r3, r3, #1
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d007      	beq.n	8013b02 <ip4_input+0xbe>
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	3304      	adds	r3, #4
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d002      	beq.n	8013b02 <ip4_input+0xbe>
      netif = inp;
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	61bb      	str	r3, [r7, #24]
 8013b00:	e02a      	b.n	8013b58 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b02:	2300      	movs	r3, #0
 8013b04:	61bb      	str	r3, [r7, #24]
 8013b06:	e027      	b.n	8013b58 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b08:	6838      	ldr	r0, [r7, #0]
 8013b0a:	f7ff ff71 	bl	80139f0 <ip4_input_accept>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d002      	beq.n	8013b1a <ip4_input+0xd6>
      netif = inp;
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	61bb      	str	r3, [r7, #24]
 8013b18:	e01e      	b.n	8013b58 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b1e:	4b68      	ldr	r3, [pc, #416]	; (8013cc0 <ip4_input+0x27c>)
 8013b20:	695b      	ldr	r3, [r3, #20]
 8013b22:	b2db      	uxtb	r3, r3
 8013b24:	2b7f      	cmp	r3, #127	; 0x7f
 8013b26:	d017      	beq.n	8013b58 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b28:	4b66      	ldr	r3, [pc, #408]	; (8013cc4 <ip4_input+0x280>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	61bb      	str	r3, [r7, #24]
 8013b2e:	e00e      	b.n	8013b4e <ip4_input+0x10a>
          if (netif == inp) {
 8013b30:	69ba      	ldr	r2, [r7, #24]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d006      	beq.n	8013b46 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b38:	69b8      	ldr	r0, [r7, #24]
 8013b3a:	f7ff ff59 	bl	80139f0 <ip4_input_accept>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d108      	bne.n	8013b56 <ip4_input+0x112>
 8013b44:	e000      	b.n	8013b48 <ip4_input+0x104>
            continue;
 8013b46:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	61bb      	str	r3, [r7, #24]
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d1ed      	bne.n	8013b30 <ip4_input+0xec>
 8013b54:	e000      	b.n	8013b58 <ip4_input+0x114>
            break;
 8013b56:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d111      	bne.n	8013b82 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	7a5b      	ldrb	r3, [r3, #9]
 8013b62:	2b11      	cmp	r3, #17
 8013b64:	d10d      	bne.n	8013b82 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013b66:	8a7b      	ldrh	r3, [r7, #18]
 8013b68:	69fa      	ldr	r2, [r7, #28]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	885b      	ldrh	r3, [r3, #2]
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013b78:	d103      	bne.n	8013b82 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d017      	beq.n	8013bb8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013b88:	4b4d      	ldr	r3, [pc, #308]	; (8013cc0 <ip4_input+0x27c>)
 8013b8a:	691b      	ldr	r3, [r3, #16]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d013      	beq.n	8013bb8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b90:	4b4b      	ldr	r3, [pc, #300]	; (8013cc0 <ip4_input+0x27c>)
 8013b92:	691b      	ldr	r3, [r3, #16]
 8013b94:	6839      	ldr	r1, [r7, #0]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f000 f96e 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d105      	bne.n	8013bae <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013ba2:	4b47      	ldr	r3, [pc, #284]	; (8013cc0 <ip4_input+0x27c>)
 8013ba4:	691b      	ldr	r3, [r3, #16]
 8013ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013baa:	2be0      	cmp	r3, #224	; 0xe0
 8013bac:	d104      	bne.n	8013bb8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7f6 fd3c 	bl	800a62c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	e07e      	b.n	8013cb6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d104      	bne.n	8013bc8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7f6 fd34 	bl	800a62c <pbuf_free>
    return ERR_OK;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	e076      	b.n	8013cb6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	88db      	ldrh	r3, [r3, #6]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013bd4:	4013      	ands	r3, r2
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d00b      	beq.n	8013bf2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fc92 	bl	8014504 <ip4_reass>
 8013be0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <ip4_input+0x1a8>
      return ERR_OK;
 8013be8:	2300      	movs	r3, #0
 8013bea:	e064      	b.n	8013cb6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013bf2:	4a33      	ldr	r2, [pc, #204]	; (8013cc0 <ip4_input+0x27c>)
 8013bf4:	69bb      	ldr	r3, [r7, #24]
 8013bf6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013bf8:	4a31      	ldr	r2, [pc, #196]	; (8013cc0 <ip4_input+0x27c>)
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013bfe:	4a30      	ldr	r2, [pc, #192]	; (8013cc0 <ip4_input+0x27c>)
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	f003 030f 	and.w	r3, r3, #15
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	4b2a      	ldr	r3, [pc, #168]	; (8013cc0 <ip4_input+0x27c>)
 8013c16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c18:	8a7b      	ldrh	r3, [r7, #18]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7f6 fc7f 	bl	800a520 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	7a5b      	ldrb	r3, [r3, #9]
 8013c26:	2b11      	cmp	r3, #17
 8013c28:	d006      	beq.n	8013c38 <ip4_input+0x1f4>
 8013c2a:	2b11      	cmp	r3, #17
 8013c2c:	dc13      	bgt.n	8013c56 <ip4_input+0x212>
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d00c      	beq.n	8013c4c <ip4_input+0x208>
 8013c32:	2b06      	cmp	r3, #6
 8013c34:	d005      	beq.n	8013c42 <ip4_input+0x1fe>
 8013c36:	e00e      	b.n	8013c56 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c38:	6839      	ldr	r1, [r7, #0]
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7fc fb24 	bl	8010288 <udp_input>
        break;
 8013c40:	e026      	b.n	8013c90 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c42:	6839      	ldr	r1, [r7, #0]
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f7f8 fb35 	bl	800c2b4 <tcp_input>
        break;
 8013c4a:	e021      	b.n	8013c90 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c4c:	6839      	ldr	r1, [r7, #0]
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f7ff fcd0 	bl	80135f4 <icmp_input>
        break;
 8013c54:	e01c      	b.n	8013c90 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c56:	4b1a      	ldr	r3, [pc, #104]	; (8013cc0 <ip4_input+0x27c>)
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	69b9      	ldr	r1, [r7, #24]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f000 f90b 	bl	8013e78 <ip4_addr_isbroadcast_u32>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d10f      	bne.n	8013c88 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c68:	4b15      	ldr	r3, [pc, #84]	; (8013cc0 <ip4_input+0x27c>)
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c70:	2be0      	cmp	r3, #224	; 0xe0
 8013c72:	d009      	beq.n	8013c88 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7f6 fcc3 	bl	800a606 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c80:	2102      	movs	r1, #2
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff fdba 	bl	80137fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7f6 fccf 	bl	800a62c <pbuf_free>
        break;
 8013c8e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013c90:	4b0b      	ldr	r3, [pc, #44]	; (8013cc0 <ip4_input+0x27c>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013c96:	4b0a      	ldr	r3, [pc, #40]	; (8013cc0 <ip4_input+0x27c>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013c9c:	4b08      	ldr	r3, [pc, #32]	; (8013cc0 <ip4_input+0x27c>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013ca2:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <ip4_input+0x27c>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013ca8:	4b05      	ldr	r3, [pc, #20]	; (8013cc0 <ip4_input+0x27c>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013cae:	4b04      	ldr	r3, [pc, #16]	; (8013cc0 <ip4_input+0x27c>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013cb4:	2300      	movs	r3, #0
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3720      	adds	r7, #32
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20009c50 	.word	0x20009c50
 8013cc4:	2000d3b8 	.word	0x2000d3b8

08013cc8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b08a      	sub	sp, #40	; 0x28
 8013ccc:	af04      	add	r7, sp, #16
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
 8013cd4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d009      	beq.n	8013cf4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d003      	beq.n	8013cee <ip4_output_if+0x26>
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d102      	bne.n	8013cf4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013cf4:	78fa      	ldrb	r2, [r7, #3]
 8013cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf8:	9302      	str	r3, [sp, #8]
 8013cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013cfe:	9301      	str	r3, [sp, #4]
 8013d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	4613      	mov	r3, r2
 8013d08:	687a      	ldr	r2, [r7, #4]
 8013d0a:	6979      	ldr	r1, [r7, #20]
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f000 f805 	bl	8013d1c <ip4_output_if_src>
 8013d12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3718      	adds	r7, #24
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b088      	sub	sp, #32
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	60b9      	str	r1, [r7, #8]
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	7b9b      	ldrb	r3, [r3, #14]
 8013d2e:	2b01      	cmp	r3, #1
 8013d30:	d006      	beq.n	8013d40 <ip4_output_if_src+0x24>
 8013d32:	4b4b      	ldr	r3, [pc, #300]	; (8013e60 <ip4_output_if_src+0x144>)
 8013d34:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013d38:	494a      	ldr	r1, [pc, #296]	; (8013e64 <ip4_output_if_src+0x148>)
 8013d3a:	484b      	ldr	r0, [pc, #300]	; (8013e68 <ip4_output_if_src+0x14c>)
 8013d3c:	f001 f9e4 	bl	8015108 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d060      	beq.n	8013e08 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d46:	2314      	movs	r3, #20
 8013d48:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d4a:	2114      	movs	r1, #20
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f7f6 fbd7 	bl	800a500 <pbuf_add_header>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d002      	beq.n	8013d5e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d58:	f06f 0301 	mvn.w	r3, #1
 8013d5c:	e07c      	b.n	8013e58 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	895b      	ldrh	r3, [r3, #10]
 8013d68:	2b13      	cmp	r3, #19
 8013d6a:	d806      	bhi.n	8013d7a <ip4_output_if_src+0x5e>
 8013d6c:	4b3c      	ldr	r3, [pc, #240]	; (8013e60 <ip4_output_if_src+0x144>)
 8013d6e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013d72:	493e      	ldr	r1, [pc, #248]	; (8013e6c <ip4_output_if_src+0x150>)
 8013d74:	483c      	ldr	r0, [pc, #240]	; (8013e68 <ip4_output_if_src+0x14c>)
 8013d76:	f001 f9c7 	bl	8015108 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	78fa      	ldrb	r2, [r7, #3]
 8013d7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013d86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013d90:	8b7b      	ldrh	r3, [r7, #26]
 8013d92:	089b      	lsrs	r3, r3, #2
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d9c:	b2da      	uxtb	r2, r3
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013da8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	891b      	ldrh	r3, [r3, #8]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7f5 f8a6 	bl	8008f00 <lwip_htons>
 8013db4:	4603      	mov	r3, r0
 8013db6:	461a      	mov	r2, r3
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013dbc:	69fb      	ldr	r3, [r7, #28]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	719a      	strb	r2, [r3, #6]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013dc6:	4b2a      	ldr	r3, [pc, #168]	; (8013e70 <ip4_output_if_src+0x154>)
 8013dc8:	881b      	ldrh	r3, [r3, #0]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7f5 f898 	bl	8008f00 <lwip_htons>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013dd8:	4b25      	ldr	r3, [pc, #148]	; (8013e70 <ip4_output_if_src+0x154>)
 8013dda:	881b      	ldrh	r3, [r3, #0]
 8013ddc:	3301      	adds	r3, #1
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	4b23      	ldr	r3, [pc, #140]	; (8013e70 <ip4_output_if_src+0x154>)
 8013de2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d104      	bne.n	8013df4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013dea:	4b22      	ldr	r3, [pc, #136]	; (8013e74 <ip4_output_if_src+0x158>)
 8013dec:	681a      	ldr	r2, [r3, #0]
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	60da      	str	r2, [r3, #12]
 8013df2:	e003      	b.n	8013dfc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	729a      	strb	r2, [r3, #10]
 8013e02:	2200      	movs	r2, #0
 8013e04:	72da      	strb	r2, [r3, #11]
 8013e06:	e00f      	b.n	8013e28 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	895b      	ldrh	r3, [r3, #10]
 8013e0c:	2b13      	cmp	r3, #19
 8013e0e:	d802      	bhi.n	8013e16 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e10:	f06f 0301 	mvn.w	r3, #1
 8013e14:	e020      	b.n	8013e58 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e22:	f107 0314 	add.w	r3, r7, #20
 8013e26:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d00c      	beq.n	8013e4a <ip4_output_if_src+0x12e>
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	891a      	ldrh	r2, [r3, #8]
 8013e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d906      	bls.n	8013e4a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f000 fd53 	bl	80148ec <ip4_frag>
 8013e46:	4603      	mov	r3, r0
 8013e48:	e006      	b.n	8013e58 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4c:	695b      	ldr	r3, [r3, #20]
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	68f9      	ldr	r1, [r7, #12]
 8013e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e54:	4798      	blx	r3
 8013e56:	4603      	mov	r3, r0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3720      	adds	r7, #32
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	08018b4c 	.word	0x08018b4c
 8013e64:	08018b80 	.word	0x08018b80
 8013e68:	08018b8c 	.word	0x08018b8c
 8013e6c:	08018bb4 	.word	0x08018bb4
 8013e70:	2000d54a 	.word	0x2000d54a
 8013e74:	08019008 	.word	0x08019008

08013e78 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b085      	sub	sp, #20
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e8c:	d002      	beq.n	8013e94 <ip4_addr_isbroadcast_u32+0x1c>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d101      	bne.n	8013e98 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013e94:	2301      	movs	r3, #1
 8013e96:	e02a      	b.n	8013eee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e9e:	f003 0302 	and.w	r3, r3, #2
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d101      	bne.n	8013eaa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	e021      	b.n	8013eee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	3304      	adds	r3, #4
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d101      	bne.n	8013eba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e019      	b.n	8013eee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	405a      	eors	r2, r3
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	3308      	adds	r3, #8
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	4013      	ands	r3, r2
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10d      	bne.n	8013eec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	3308      	adds	r3, #8
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	43da      	mvns	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	3308      	adds	r3, #8
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d101      	bne.n	8013eec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	e000      	b.n	8013eee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013eec:	2300      	movs	r3, #0
  }
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3714      	adds	r7, #20
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
	...

08013efc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013f06:	4b12      	ldr	r3, [pc, #72]	; (8013f50 <ip_reass_tmr+0x54>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013f0c:	e018      	b.n	8013f40 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	7fdb      	ldrb	r3, [r3, #31]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00b      	beq.n	8013f2e <ip_reass_tmr+0x32>
      r->timer--;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	7fdb      	ldrb	r3, [r3, #31]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	b2da      	uxtb	r2, r3
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	60fb      	str	r3, [r7, #12]
 8013f2c:	e008      	b.n	8013f40 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 f80a 	bl	8013f54 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d1e3      	bne.n	8013f0e <ip_reass_tmr+0x12>
    }
  }
}
 8013f46:	bf00      	nop
 8013f48:	bf00      	nop
 8013f4a:	3710      	adds	r7, #16
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	2000d54c 	.word	0x2000d54c

08013f54 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b088      	sub	sp, #32
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d105      	bne.n	8013f76 <ip_reass_free_complete_datagram+0x22>
 8013f6a:	4b45      	ldr	r3, [pc, #276]	; (8014080 <ip_reass_free_complete_datagram+0x12c>)
 8013f6c:	22ab      	movs	r2, #171	; 0xab
 8013f6e:	4945      	ldr	r1, [pc, #276]	; (8014084 <ip_reass_free_complete_datagram+0x130>)
 8013f70:	4845      	ldr	r0, [pc, #276]	; (8014088 <ip_reass_free_complete_datagram+0x134>)
 8013f72:	f001 f8c9 	bl	8015108 <iprintf>
  if (prev != NULL) {
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d00a      	beq.n	8013f92 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d005      	beq.n	8013f92 <ip_reass_free_complete_datagram+0x3e>
 8013f86:	4b3e      	ldr	r3, [pc, #248]	; (8014080 <ip_reass_free_complete_datagram+0x12c>)
 8013f88:	22ad      	movs	r2, #173	; 0xad
 8013f8a:	4940      	ldr	r1, [pc, #256]	; (801408c <ip_reass_free_complete_datagram+0x138>)
 8013f8c:	483e      	ldr	r0, [pc, #248]	; (8014088 <ip_reass_free_complete_datagram+0x134>)
 8013f8e:	f001 f8bb 	bl	8015108 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	889b      	ldrh	r3, [r3, #4]
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d12a      	bne.n	8013ffa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	681a      	ldr	r2, [r3, #0]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	6858      	ldr	r0, [r3, #4]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	3308      	adds	r3, #8
 8013fba:	2214      	movs	r2, #20
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	f001 f9d4 	bl	801536a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013fc2:	2101      	movs	r1, #1
 8013fc4:	69b8      	ldr	r0, [r7, #24]
 8013fc6:	f7ff fc29 	bl	801381c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013fca:	69b8      	ldr	r0, [r7, #24]
 8013fcc:	f7f6 fbbc 	bl	800a748 <pbuf_clen>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013fd4:	8bfa      	ldrh	r2, [r7, #30]
 8013fd6:	8a7b      	ldrh	r3, [r7, #18]
 8013fd8:	4413      	add	r3, r2
 8013fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fde:	db05      	blt.n	8013fec <ip_reass_free_complete_datagram+0x98>
 8013fe0:	4b27      	ldr	r3, [pc, #156]	; (8014080 <ip_reass_free_complete_datagram+0x12c>)
 8013fe2:	22bc      	movs	r2, #188	; 0xbc
 8013fe4:	492a      	ldr	r1, [pc, #168]	; (8014090 <ip_reass_free_complete_datagram+0x13c>)
 8013fe6:	4828      	ldr	r0, [pc, #160]	; (8014088 <ip_reass_free_complete_datagram+0x134>)
 8013fe8:	f001 f88e 	bl	8015108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fec:	8bfa      	ldrh	r2, [r7, #30]
 8013fee:	8a7b      	ldrh	r3, [r7, #18]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013ff4:	69b8      	ldr	r0, [r7, #24]
 8013ff6:	f7f6 fb19 	bl	800a62c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014000:	e01f      	b.n	8014042 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	f7f6 fb98 	bl	800a748 <pbuf_clen>
 8014018:	4603      	mov	r3, r0
 801401a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801401c:	8bfa      	ldrh	r2, [r7, #30]
 801401e:	8a7b      	ldrh	r3, [r7, #18]
 8014020:	4413      	add	r3, r2
 8014022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014026:	db05      	blt.n	8014034 <ip_reass_free_complete_datagram+0xe0>
 8014028:	4b15      	ldr	r3, [pc, #84]	; (8014080 <ip_reass_free_complete_datagram+0x12c>)
 801402a:	22cc      	movs	r2, #204	; 0xcc
 801402c:	4918      	ldr	r1, [pc, #96]	; (8014090 <ip_reass_free_complete_datagram+0x13c>)
 801402e:	4816      	ldr	r0, [pc, #88]	; (8014088 <ip_reass_free_complete_datagram+0x134>)
 8014030:	f001 f86a 	bl	8015108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014034:	8bfa      	ldrh	r2, [r7, #30]
 8014036:	8a7b      	ldrh	r3, [r7, #18]
 8014038:	4413      	add	r3, r2
 801403a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f7f6 faf5 	bl	800a62c <pbuf_free>
  while (p != NULL) {
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1dc      	bne.n	8014002 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 f8c2 	bl	80141d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014050:	4b10      	ldr	r3, [pc, #64]	; (8014094 <ip_reass_free_complete_datagram+0x140>)
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	8bfa      	ldrh	r2, [r7, #30]
 8014056:	429a      	cmp	r2, r3
 8014058:	d905      	bls.n	8014066 <ip_reass_free_complete_datagram+0x112>
 801405a:	4b09      	ldr	r3, [pc, #36]	; (8014080 <ip_reass_free_complete_datagram+0x12c>)
 801405c:	22d2      	movs	r2, #210	; 0xd2
 801405e:	490e      	ldr	r1, [pc, #56]	; (8014098 <ip_reass_free_complete_datagram+0x144>)
 8014060:	4809      	ldr	r0, [pc, #36]	; (8014088 <ip_reass_free_complete_datagram+0x134>)
 8014062:	f001 f851 	bl	8015108 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014066:	4b0b      	ldr	r3, [pc, #44]	; (8014094 <ip_reass_free_complete_datagram+0x140>)
 8014068:	881a      	ldrh	r2, [r3, #0]
 801406a:	8bfb      	ldrh	r3, [r7, #30]
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	b29a      	uxth	r2, r3
 8014070:	4b08      	ldr	r3, [pc, #32]	; (8014094 <ip_reass_free_complete_datagram+0x140>)
 8014072:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014074:	8bfb      	ldrh	r3, [r7, #30]
}
 8014076:	4618      	mov	r0, r3
 8014078:	3720      	adds	r7, #32
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	08018be4 	.word	0x08018be4
 8014084:	08018c20 	.word	0x08018c20
 8014088:	08018c2c 	.word	0x08018c2c
 801408c:	08018c54 	.word	0x08018c54
 8014090:	08018c68 	.word	0x08018c68
 8014094:	2000d550 	.word	0x2000d550
 8014098:	08018c88 	.word	0x08018c88

0801409c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b08a      	sub	sp, #40	; 0x28
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80140a6:	2300      	movs	r3, #0
 80140a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80140aa:	2300      	movs	r3, #0
 80140ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80140b2:	2300      	movs	r3, #0
 80140b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80140b6:	2300      	movs	r3, #0
 80140b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80140ba:	4b28      	ldr	r3, [pc, #160]	; (801415c <ip_reass_remove_oldest_datagram+0xc0>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80140c0:	e030      	b.n	8014124 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	695a      	ldr	r2, [r3, #20]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d10c      	bne.n	80140e8 <ip_reass_remove_oldest_datagram+0x4c>
 80140ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d0:	699a      	ldr	r2, [r3, #24]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	691b      	ldr	r3, [r3, #16]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d106      	bne.n	80140e8 <ip_reass_remove_oldest_datagram+0x4c>
 80140da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140dc:	899a      	ldrh	r2, [r3, #12]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	889b      	ldrh	r3, [r3, #4]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d014      	beq.n	8014112 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	3301      	adds	r3, #1
 80140ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d104      	bne.n	80140fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80140f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	61bb      	str	r3, [r7, #24]
 80140fc:	e009      	b.n	8014112 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	7fda      	ldrb	r2, [r3, #31]
 8014102:	6a3b      	ldr	r3, [r7, #32]
 8014104:	7fdb      	ldrb	r3, [r3, #31]
 8014106:	429a      	cmp	r2, r3
 8014108:	d803      	bhi.n	8014112 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014126:	2b00      	cmp	r3, #0
 8014128:	d1cb      	bne.n	80140c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801412a:	6a3b      	ldr	r3, [r7, #32]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d008      	beq.n	8014142 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014130:	69b9      	ldr	r1, [r7, #24]
 8014132:	6a38      	ldr	r0, [r7, #32]
 8014134:	f7ff ff0e 	bl	8013f54 <ip_reass_free_complete_datagram>
 8014138:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801413a:	697a      	ldr	r2, [r7, #20]
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	4413      	add	r3, r2
 8014140:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014142:	697a      	ldr	r2, [r7, #20]
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	429a      	cmp	r2, r3
 8014148:	da02      	bge.n	8014150 <ip_reass_remove_oldest_datagram+0xb4>
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	2b01      	cmp	r3, #1
 801414e:	dcac      	bgt.n	80140aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014150:	697b      	ldr	r3, [r7, #20]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3728      	adds	r7, #40	; 0x28
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	2000d54c 	.word	0x2000d54c

08014160 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801416a:	2004      	movs	r0, #4
 801416c:	f7f5 fba0 	bl	80098b0 <memp_malloc>
 8014170:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d110      	bne.n	801419a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014178:	6839      	ldr	r1, [r7, #0]
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7ff ff8e 	bl	801409c <ip_reass_remove_oldest_datagram>
 8014180:	4602      	mov	r2, r0
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	4293      	cmp	r3, r2
 8014186:	dc03      	bgt.n	8014190 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014188:	2004      	movs	r0, #4
 801418a:	f7f5 fb91 	bl	80098b0 <memp_malloc>
 801418e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d101      	bne.n	801419a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014196:	2300      	movs	r3, #0
 8014198:	e016      	b.n	80141c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801419a:	2220      	movs	r2, #32
 801419c:	2100      	movs	r1, #0
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f001 f817 	bl	80151d2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	220f      	movs	r2, #15
 80141a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80141aa:	4b09      	ldr	r3, [pc, #36]	; (80141d0 <ip_reass_enqueue_new_datagram+0x70>)
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80141b2:	4a07      	ldr	r2, [pc, #28]	; (80141d0 <ip_reass_enqueue_new_datagram+0x70>)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	3308      	adds	r3, #8
 80141bc:	2214      	movs	r2, #20
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f001 f8d2 	bl	801536a <memcpy>
  return ipr;
 80141c6:	68fb      	ldr	r3, [r7, #12]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	2000d54c 	.word	0x2000d54c

080141d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80141de:	4b10      	ldr	r3, [pc, #64]	; (8014220 <ip_reass_dequeue_datagram+0x4c>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d104      	bne.n	80141f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	4a0c      	ldr	r2, [pc, #48]	; (8014220 <ip_reass_dequeue_datagram+0x4c>)
 80141ee:	6013      	str	r3, [r2, #0]
 80141f0:	e00d      	b.n	801420e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d106      	bne.n	8014206 <ip_reass_dequeue_datagram+0x32>
 80141f8:	4b0a      	ldr	r3, [pc, #40]	; (8014224 <ip_reass_dequeue_datagram+0x50>)
 80141fa:	f240 1245 	movw	r2, #325	; 0x145
 80141fe:	490a      	ldr	r1, [pc, #40]	; (8014228 <ip_reass_dequeue_datagram+0x54>)
 8014200:	480a      	ldr	r0, [pc, #40]	; (801422c <ip_reass_dequeue_datagram+0x58>)
 8014202:	f000 ff81 	bl	8015108 <iprintf>
    prev->next = ipr->next;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801420e:	6879      	ldr	r1, [r7, #4]
 8014210:	2004      	movs	r0, #4
 8014212:	f7f5 fbc3 	bl	800999c <memp_free>
}
 8014216:	bf00      	nop
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	2000d54c 	.word	0x2000d54c
 8014224:	08018be4 	.word	0x08018be4
 8014228:	08018cac 	.word	0x08018cac
 801422c:	08018c2c 	.word	0x08018c2c

08014230 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08c      	sub	sp, #48	; 0x30
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801423c:	2300      	movs	r3, #0
 801423e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014240:	2301      	movs	r3, #1
 8014242:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	885b      	ldrh	r3, [r3, #2]
 801424e:	b29b      	uxth	r3, r3
 8014250:	4618      	mov	r0, r3
 8014252:	f7f4 fe55 	bl	8008f00 <lwip_htons>
 8014256:	4603      	mov	r3, r0
 8014258:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	f003 030f 	and.w	r3, r3, #15
 8014262:	b2db      	uxtb	r3, r3
 8014264:	009b      	lsls	r3, r3, #2
 8014266:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014268:	7e7b      	ldrb	r3, [r7, #25]
 801426a:	b29b      	uxth	r3, r3
 801426c:	8b7a      	ldrh	r2, [r7, #26]
 801426e:	429a      	cmp	r2, r3
 8014270:	d202      	bcs.n	8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014272:	f04f 33ff 	mov.w	r3, #4294967295
 8014276:	e135      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014278:	7e7b      	ldrb	r3, [r7, #25]
 801427a:	b29b      	uxth	r3, r3
 801427c:	8b7a      	ldrh	r2, [r7, #26]
 801427e:	1ad3      	subs	r3, r2, r3
 8014280:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	88db      	ldrh	r3, [r3, #6]
 8014286:	b29b      	uxth	r3, r3
 8014288:	4618      	mov	r0, r3
 801428a:	f7f4 fe39 	bl	8008f00 <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014294:	b29b      	uxth	r3, r3
 8014296:	00db      	lsls	r3, r3, #3
 8014298:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80142a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a2:	2200      	movs	r2, #0
 80142a4:	701a      	strb	r2, [r3, #0]
 80142a6:	2200      	movs	r2, #0
 80142a8:	705a      	strb	r2, [r3, #1]
 80142aa:	2200      	movs	r2, #0
 80142ac:	709a      	strb	r2, [r3, #2]
 80142ae:	2200      	movs	r2, #0
 80142b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	8afa      	ldrh	r2, [r7, #22]
 80142b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80142b8:	8afa      	ldrh	r2, [r7, #22]
 80142ba:	8b7b      	ldrh	r3, [r7, #26]
 80142bc:	4413      	add	r3, r2
 80142be:	b29a      	uxth	r2, r3
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80142c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c6:	88db      	ldrh	r3, [r3, #6]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	8afa      	ldrh	r2, [r7, #22]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d902      	bls.n	80142d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295
 80142d4:	e106      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	627b      	str	r3, [r7, #36]	; 0x24
 80142dc:	e068      	b.n	80143b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80142e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e6:	889b      	ldrh	r3, [r3, #4]
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	889b      	ldrh	r3, [r3, #4]
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d235      	bcs.n	8014360 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80142f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d020      	beq.n	8014342 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	889b      	ldrh	r3, [r3, #4]
 8014304:	b29a      	uxth	r2, r3
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	88db      	ldrh	r3, [r3, #6]
 801430a:	b29b      	uxth	r3, r3
 801430c:	429a      	cmp	r2, r3
 801430e:	d307      	bcc.n	8014320 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014312:	88db      	ldrh	r3, [r3, #6]
 8014314:	b29a      	uxth	r2, r3
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	889b      	ldrh	r3, [r3, #4]
 801431a:	b29b      	uxth	r3, r3
 801431c:	429a      	cmp	r2, r3
 801431e:	d902      	bls.n	8014326 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014320:	f04f 33ff 	mov.w	r3, #4294967295
 8014324:	e0de      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432e:	88db      	ldrh	r3, [r3, #6]
 8014330:	b29a      	uxth	r2, r3
 8014332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014334:	889b      	ldrh	r3, [r3, #4]
 8014336:	b29b      	uxth	r3, r3
 8014338:	429a      	cmp	r2, r3
 801433a:	d03d      	beq.n	80143b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801433c:	2300      	movs	r3, #0
 801433e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014340:	e03a      	b.n	80143b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014344:	88db      	ldrh	r3, [r3, #6]
 8014346:	b29a      	uxth	r2, r3
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	889b      	ldrh	r3, [r3, #4]
 801434c:	b29b      	uxth	r3, r3
 801434e:	429a      	cmp	r2, r3
 8014350:	d902      	bls.n	8014358 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014352:	f04f 33ff 	mov.w	r3, #4294967295
 8014356:	e0c5      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	68ba      	ldr	r2, [r7, #8]
 801435c:	605a      	str	r2, [r3, #4]
      break;
 801435e:	e02b      	b.n	80143b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014362:	889b      	ldrh	r3, [r3, #4]
 8014364:	b29a      	uxth	r2, r3
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	889b      	ldrh	r3, [r3, #4]
 801436a:	b29b      	uxth	r3, r3
 801436c:	429a      	cmp	r2, r3
 801436e:	d102      	bne.n	8014376 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014370:	f04f 33ff 	mov.w	r3, #4294967295
 8014374:	e0b6      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014378:	889b      	ldrh	r3, [r3, #4]
 801437a:	b29a      	uxth	r2, r3
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	88db      	ldrh	r3, [r3, #6]
 8014380:	b29b      	uxth	r3, r3
 8014382:	429a      	cmp	r2, r3
 8014384:	d202      	bcs.n	801438c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014386:	f04f 33ff 	mov.w	r3, #4294967295
 801438a:	e0ab      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438e:	2b00      	cmp	r3, #0
 8014390:	d009      	beq.n	80143a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014394:	88db      	ldrh	r3, [r3, #6]
 8014396:	b29a      	uxth	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	889b      	ldrh	r3, [r3, #4]
 801439c:	b29b      	uxth	r3, r3
 801439e:	429a      	cmp	r2, r3
 80143a0:	d001      	beq.n	80143a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80143a2:	2300      	movs	r3, #0
 80143a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80143b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d193      	bne.n	80142de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80143b6:	e000      	b.n	80143ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80143b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d12d      	bne.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80143c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d01c      	beq.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	88db      	ldrh	r3, [r3, #6]
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ce:	889b      	ldrh	r3, [r3, #4]
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d906      	bls.n	80143e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80143d6:	4b45      	ldr	r3, [pc, #276]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80143dc:	4944      	ldr	r1, [pc, #272]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80143de:	4845      	ldr	r0, [pc, #276]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143e0:	f000 fe92 	bl	8015108 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80143e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e6:	68ba      	ldr	r2, [r7, #8]
 80143e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80143ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ec:	88db      	ldrh	r3, [r3, #6]
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f2:	889b      	ldrh	r3, [r3, #4]
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d010      	beq.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80143fa:	2300      	movs	r3, #0
 80143fc:	623b      	str	r3, [r7, #32]
 80143fe:	e00d      	b.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d006      	beq.n	8014416 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014408:	4b38      	ldr	r3, [pc, #224]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801440a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801440e:	493a      	ldr	r1, [pc, #232]	; (80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014410:	4838      	ldr	r0, [pc, #224]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014412:	f000 fe79 	bl	8015108 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d105      	bne.n	801442e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	7f9b      	ldrb	r3, [r3, #30]
 8014426:	f003 0301 	and.w	r3, r3, #1
 801442a:	2b00      	cmp	r3, #0
 801442c:	d059      	beq.n	80144e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801442e:	6a3b      	ldr	r3, [r7, #32]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d04f      	beq.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d006      	beq.n	801444a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	889b      	ldrh	r3, [r3, #4]
 8014444:	b29b      	uxth	r3, r3
 8014446:	2b00      	cmp	r3, #0
 8014448:	d002      	beq.n	8014450 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801444a:	2300      	movs	r3, #0
 801444c:	623b      	str	r3, [r7, #32]
 801444e:	e041      	b.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014452:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801445a:	e012      	b.n	8014482 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014464:	88db      	ldrh	r3, [r3, #6]
 8014466:	b29a      	uxth	r2, r3
 8014468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446a:	889b      	ldrh	r3, [r3, #4]
 801446c:	b29b      	uxth	r3, r3
 801446e:	429a      	cmp	r2, r3
 8014470:	d002      	beq.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	623b      	str	r3, [r7, #32]
            break;
 8014476:	e007      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014484:	2b00      	cmp	r3, #0
 8014486:	d1e9      	bne.n	801445c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d022      	beq.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d106      	bne.n	80144a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014496:	4b15      	ldr	r3, [pc, #84]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014498:	f240 12df 	movw	r2, #479	; 0x1df
 801449c:	4917      	ldr	r1, [pc, #92]	; (80144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801449e:	4815      	ldr	r0, [pc, #84]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144a0:	f000 fe32 	bl	8015108 <iprintf>
          LWIP_ASSERT("sanity check",
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	685b      	ldr	r3, [r3, #4]
 80144aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d106      	bne.n	80144be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80144b0:	4b0e      	ldr	r3, [pc, #56]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80144b6:	4911      	ldr	r1, [pc, #68]	; (80144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144b8:	480e      	ldr	r0, [pc, #56]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144ba:	f000 fe25 	bl	8015108 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80144be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d006      	beq.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80144c6:	4b09      	ldr	r3, [pc, #36]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80144cc:	490c      	ldr	r1, [pc, #48]	; (8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80144ce:	4809      	ldr	r0, [pc, #36]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144d0:	f000 fe1a 	bl	8015108 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80144d4:	6a3b      	ldr	r3, [r7, #32]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	bf14      	ite	ne
 80144da:	2301      	movne	r3, #1
 80144dc:	2300      	moveq	r3, #0
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	e000      	b.n	80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80144e2:	2300      	movs	r3, #0
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3730      	adds	r7, #48	; 0x30
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	08018be4 	.word	0x08018be4
 80144f0:	08018cc8 	.word	0x08018cc8
 80144f4:	08018c2c 	.word	0x08018c2c
 80144f8:	08018ce8 	.word	0x08018ce8
 80144fc:	08018d20 	.word	0x08018d20
 8014500:	08018d30 	.word	0x08018d30

08014504 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08e      	sub	sp, #56	; 0x38
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	f003 030f 	and.w	r3, r3, #15
 801451a:	b2db      	uxtb	r3, r3
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	b2db      	uxtb	r3, r3
 8014520:	2b14      	cmp	r3, #20
 8014522:	f040 8171 	bne.w	8014808 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014528:	88db      	ldrh	r3, [r3, #6]
 801452a:	b29b      	uxth	r3, r3
 801452c:	4618      	mov	r0, r3
 801452e:	f7f4 fce7 	bl	8008f00 <lwip_htons>
 8014532:	4603      	mov	r3, r0
 8014534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014538:	b29b      	uxth	r3, r3
 801453a:	00db      	lsls	r3, r3, #3
 801453c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014540:	885b      	ldrh	r3, [r3, #2]
 8014542:	b29b      	uxth	r3, r3
 8014544:	4618      	mov	r0, r3
 8014546:	f7f4 fcdb 	bl	8008f00 <lwip_htons>
 801454a:	4603      	mov	r3, r0
 801454c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	f003 030f 	and.w	r3, r3, #15
 8014556:	b2db      	uxtb	r3, r3
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801455e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014562:	b29b      	uxth	r3, r3
 8014564:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014566:	429a      	cmp	r2, r3
 8014568:	f0c0 8150 	bcc.w	801480c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801456c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014570:	b29b      	uxth	r3, r3
 8014572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7f6 f8e5 	bl	800a748 <pbuf_clen>
 801457e:	4603      	mov	r3, r0
 8014580:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014582:	4b8c      	ldr	r3, [pc, #560]	; (80147b4 <ip4_reass+0x2b0>)
 8014584:	881b      	ldrh	r3, [r3, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	8c3b      	ldrh	r3, [r7, #32]
 801458a:	4413      	add	r3, r2
 801458c:	2b0a      	cmp	r3, #10
 801458e:	dd10      	ble.n	80145b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014590:	8c3b      	ldrh	r3, [r7, #32]
 8014592:	4619      	mov	r1, r3
 8014594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014596:	f7ff fd81 	bl	801409c <ip_reass_remove_oldest_datagram>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	f000 8137 	beq.w	8014810 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80145a2:	4b84      	ldr	r3, [pc, #528]	; (80147b4 <ip4_reass+0x2b0>)
 80145a4:	881b      	ldrh	r3, [r3, #0]
 80145a6:	461a      	mov	r2, r3
 80145a8:	8c3b      	ldrh	r3, [r7, #32]
 80145aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145ac:	2b0a      	cmp	r3, #10
 80145ae:	f300 812f 	bgt.w	8014810 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145b2:	4b81      	ldr	r3, [pc, #516]	; (80147b8 <ip4_reass+0x2b4>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	633b      	str	r3, [r7, #48]	; 0x30
 80145b8:	e015      	b.n	80145e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80145ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145bc:	695a      	ldr	r2, [r3, #20]
 80145be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d10c      	bne.n	80145e0 <ip4_reass+0xdc>
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	699a      	ldr	r2, [r3, #24]
 80145ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d106      	bne.n	80145e0 <ip4_reass+0xdc>
 80145d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d4:	899a      	ldrh	r2, [r3, #12]
 80145d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d8:	889b      	ldrh	r3, [r3, #4]
 80145da:	b29b      	uxth	r3, r3
 80145dc:	429a      	cmp	r2, r3
 80145de:	d006      	beq.n	80145ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	633b      	str	r3, [r7, #48]	; 0x30
 80145e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d1e6      	bne.n	80145ba <ip4_reass+0xb6>
 80145ec:	e000      	b.n	80145f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80145ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80145f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d109      	bne.n	801460a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80145f6:	8c3b      	ldrh	r3, [r7, #32]
 80145f8:	4619      	mov	r1, r3
 80145fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145fc:	f7ff fdb0 	bl	8014160 <ip_reass_enqueue_new_datagram>
 8014600:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014604:	2b00      	cmp	r3, #0
 8014606:	d11c      	bne.n	8014642 <ip4_reass+0x13e>
      goto nullreturn;
 8014608:	e105      	b.n	8014816 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460c:	88db      	ldrh	r3, [r3, #6]
 801460e:	b29b      	uxth	r3, r3
 8014610:	4618      	mov	r0, r3
 8014612:	f7f4 fc75 	bl	8008f00 <lwip_htons>
 8014616:	4603      	mov	r3, r0
 8014618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801461c:	2b00      	cmp	r3, #0
 801461e:	d110      	bne.n	8014642 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014622:	89db      	ldrh	r3, [r3, #14]
 8014624:	4618      	mov	r0, r3
 8014626:	f7f4 fc6b 	bl	8008f00 <lwip_htons>
 801462a:	4603      	mov	r3, r0
 801462c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014630:	2b00      	cmp	r3, #0
 8014632:	d006      	beq.n	8014642 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014636:	3308      	adds	r3, #8
 8014638:	2214      	movs	r2, #20
 801463a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801463c:	4618      	mov	r0, r3
 801463e:	f000 fe94 	bl	801536a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014644:	88db      	ldrh	r3, [r3, #6]
 8014646:	b29b      	uxth	r3, r3
 8014648:	f003 0320 	and.w	r3, r3, #32
 801464c:	2b00      	cmp	r3, #0
 801464e:	bf0c      	ite	eq
 8014650:	2301      	moveq	r3, #1
 8014652:	2300      	movne	r3, #0
 8014654:	b2db      	uxtb	r3, r3
 8014656:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00e      	beq.n	801467c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801465e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014662:	4413      	add	r3, r2
 8014664:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014666:	8b7a      	ldrh	r2, [r7, #26]
 8014668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801466a:	429a      	cmp	r2, r3
 801466c:	f0c0 80a0 	bcc.w	80147b0 <ip4_reass+0x2ac>
 8014670:	8b7b      	ldrh	r3, [r7, #26]
 8014672:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014676:	4293      	cmp	r3, r2
 8014678:	f200 809a 	bhi.w	80147b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801467c:	69fa      	ldr	r2, [r7, #28]
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014682:	f7ff fdd5 	bl	8014230 <ip_reass_chain_frag_into_datagram_and_validate>
 8014686:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801468e:	f000 809b 	beq.w	80147c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014692:	4b48      	ldr	r3, [pc, #288]	; (80147b4 <ip4_reass+0x2b0>)
 8014694:	881a      	ldrh	r2, [r3, #0]
 8014696:	8c3b      	ldrh	r3, [r7, #32]
 8014698:	4413      	add	r3, r2
 801469a:	b29a      	uxth	r2, r3
 801469c:	4b45      	ldr	r3, [pc, #276]	; (80147b4 <ip4_reass+0x2b0>)
 801469e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00d      	beq.n	80146c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80146a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80146a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146aa:	4413      	add	r3, r2
 80146ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80146ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b0:	8a7a      	ldrh	r2, [r7, #18]
 80146b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	7f9b      	ldrb	r3, [r3, #30]
 80146b8:	f043 0301 	orr.w	r3, r3, #1
 80146bc:	b2da      	uxtb	r2, r3
 80146be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d171      	bne.n	80147ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80146c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ca:	8b9b      	ldrh	r3, [r3, #28]
 80146cc:	3314      	adds	r3, #20
 80146ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80146d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80146e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e4:	3308      	adds	r3, #8
 80146e6:	2214      	movs	r2, #20
 80146e8:	4619      	mov	r1, r3
 80146ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146ec:	f000 fe3d 	bl	801536a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80146f0:	8a3b      	ldrh	r3, [r7, #16]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7f4 fc04 	bl	8008f00 <lwip_htons>
 80146f8:	4603      	mov	r3, r0
 80146fa:	461a      	mov	r2, r3
 80146fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014702:	2200      	movs	r2, #0
 8014704:	719a      	strb	r2, [r3, #6]
 8014706:	2200      	movs	r2, #0
 8014708:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470c:	2200      	movs	r2, #0
 801470e:	729a      	strb	r2, [r3, #10]
 8014710:	2200      	movs	r2, #0
 8014712:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801471a:	e00d      	b.n	8014738 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014722:	2114      	movs	r1, #20
 8014724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014726:	f7f5 fefb 	bl	800a520 <pbuf_remove_header>
      pbuf_cat(p, r);
 801472a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7f6 f84b 	bl	800a7c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1ee      	bne.n	801471c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801473e:	4b1e      	ldr	r3, [pc, #120]	; (80147b8 <ip4_reass+0x2b4>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014744:	429a      	cmp	r2, r3
 8014746:	d102      	bne.n	801474e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014748:	2300      	movs	r3, #0
 801474a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801474c:	e010      	b.n	8014770 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801474e:	4b1a      	ldr	r3, [pc, #104]	; (80147b8 <ip4_reass+0x2b4>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014754:	e007      	b.n	8014766 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801475c:	429a      	cmp	r2, r3
 801475e:	d006      	beq.n	801476e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014768:	2b00      	cmp	r3, #0
 801476a:	d1f4      	bne.n	8014756 <ip4_reass+0x252>
 801476c:	e000      	b.n	8014770 <ip4_reass+0x26c>
          break;
 801476e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014774:	f7ff fd2e 	bl	80141d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7f5 ffe5 	bl	800a748 <pbuf_clen>
 801477e:	4603      	mov	r3, r0
 8014780:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014782:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <ip4_reass+0x2b0>)
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	8c3a      	ldrh	r2, [r7, #32]
 8014788:	429a      	cmp	r2, r3
 801478a:	d906      	bls.n	801479a <ip4_reass+0x296>
 801478c:	4b0b      	ldr	r3, [pc, #44]	; (80147bc <ip4_reass+0x2b8>)
 801478e:	f240 229b 	movw	r2, #667	; 0x29b
 8014792:	490b      	ldr	r1, [pc, #44]	; (80147c0 <ip4_reass+0x2bc>)
 8014794:	480b      	ldr	r0, [pc, #44]	; (80147c4 <ip4_reass+0x2c0>)
 8014796:	f000 fcb7 	bl	8015108 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801479a:	4b06      	ldr	r3, [pc, #24]	; (80147b4 <ip4_reass+0x2b0>)
 801479c:	881a      	ldrh	r2, [r3, #0]
 801479e:	8c3b      	ldrh	r3, [r7, #32]
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	4b03      	ldr	r3, [pc, #12]	; (80147b4 <ip4_reass+0x2b0>)
 80147a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	e038      	b.n	801481e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80147ac:	2300      	movs	r3, #0
 80147ae:	e036      	b.n	801481e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80147b0:	bf00      	nop
 80147b2:	e00a      	b.n	80147ca <ip4_reass+0x2c6>
 80147b4:	2000d550 	.word	0x2000d550
 80147b8:	2000d54c 	.word	0x2000d54c
 80147bc:	08018be4 	.word	0x08018be4
 80147c0:	08018d54 	.word	0x08018d54
 80147c4:	08018c2c 	.word	0x08018c2c
    goto nullreturn_ipr;
 80147c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80147ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <ip4_reass+0x2da>
 80147d0:	4b15      	ldr	r3, [pc, #84]	; (8014828 <ip4_reass+0x324>)
 80147d2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80147d6:	4915      	ldr	r1, [pc, #84]	; (801482c <ip4_reass+0x328>)
 80147d8:	4815      	ldr	r0, [pc, #84]	; (8014830 <ip4_reass+0x32c>)
 80147da:	f000 fc95 	bl	8015108 <iprintf>
  if (ipr->p == NULL) {
 80147de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d116      	bne.n	8014814 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80147e6:	4b13      	ldr	r3, [pc, #76]	; (8014834 <ip4_reass+0x330>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d006      	beq.n	80147fe <ip4_reass+0x2fa>
 80147f0:	4b0d      	ldr	r3, [pc, #52]	; (8014828 <ip4_reass+0x324>)
 80147f2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80147f6:	4910      	ldr	r1, [pc, #64]	; (8014838 <ip4_reass+0x334>)
 80147f8:	480d      	ldr	r0, [pc, #52]	; (8014830 <ip4_reass+0x32c>)
 80147fa:	f000 fc85 	bl	8015108 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80147fe:	2100      	movs	r1, #0
 8014800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014802:	f7ff fce7 	bl	80141d4 <ip_reass_dequeue_datagram>
 8014806:	e006      	b.n	8014816 <ip4_reass+0x312>
    goto nullreturn;
 8014808:	bf00      	nop
 801480a:	e004      	b.n	8014816 <ip4_reass+0x312>
    goto nullreturn;
 801480c:	bf00      	nop
 801480e:	e002      	b.n	8014816 <ip4_reass+0x312>
      goto nullreturn;
 8014810:	bf00      	nop
 8014812:	e000      	b.n	8014816 <ip4_reass+0x312>
  }

nullreturn:
 8014814:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7f5 ff08 	bl	800a62c <pbuf_free>
  return NULL;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3738      	adds	r7, #56	; 0x38
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	08018be4 	.word	0x08018be4
 801482c:	08018d70 	.word	0x08018d70
 8014830:	08018c2c 	.word	0x08018c2c
 8014834:	2000d54c 	.word	0x2000d54c
 8014838:	08018d7c 	.word	0x08018d7c

0801483c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014840:	2005      	movs	r0, #5
 8014842:	f7f5 f835 	bl	80098b0 <memp_malloc>
 8014846:	4603      	mov	r3, r0
}
 8014848:	4618      	mov	r0, r3
 801484a:	bd80      	pop	{r7, pc}

0801484c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <ip_frag_free_pbuf_custom_ref+0x1c>
 801485a:	4b07      	ldr	r3, [pc, #28]	; (8014878 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801485c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014860:	4906      	ldr	r1, [pc, #24]	; (801487c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014862:	4807      	ldr	r0, [pc, #28]	; (8014880 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014864:	f000 fc50 	bl	8015108 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014868:	6879      	ldr	r1, [r7, #4]
 801486a:	2005      	movs	r0, #5
 801486c:	f7f5 f896 	bl	800999c <memp_free>
}
 8014870:	bf00      	nop
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	08018be4 	.word	0x08018be4
 801487c:	08018d9c 	.word	0x08018d9c
 8014880:	08018c2c 	.word	0x08018c2c

08014884 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d106      	bne.n	80148a4 <ipfrag_free_pbuf_custom+0x20>
 8014896:	4b11      	ldr	r3, [pc, #68]	; (80148dc <ipfrag_free_pbuf_custom+0x58>)
 8014898:	f240 22ce 	movw	r2, #718	; 0x2ce
 801489c:	4910      	ldr	r1, [pc, #64]	; (80148e0 <ipfrag_free_pbuf_custom+0x5c>)
 801489e:	4811      	ldr	r0, [pc, #68]	; (80148e4 <ipfrag_free_pbuf_custom+0x60>)
 80148a0:	f000 fc32 	bl	8015108 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d006      	beq.n	80148ba <ipfrag_free_pbuf_custom+0x36>
 80148ac:	4b0b      	ldr	r3, [pc, #44]	; (80148dc <ipfrag_free_pbuf_custom+0x58>)
 80148ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80148b2:	490d      	ldr	r1, [pc, #52]	; (80148e8 <ipfrag_free_pbuf_custom+0x64>)
 80148b4:	480b      	ldr	r0, [pc, #44]	; (80148e4 <ipfrag_free_pbuf_custom+0x60>)
 80148b6:	f000 fc27 	bl	8015108 <iprintf>
  if (pcr->original != NULL) {
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	695b      	ldr	r3, [r3, #20]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d004      	beq.n	80148cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	695b      	ldr	r3, [r3, #20]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7f5 feb0 	bl	800a62c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f7ff ffbd 	bl	801484c <ip_frag_free_pbuf_custom_ref>
}
 80148d2:	bf00      	nop
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	08018be4 	.word	0x08018be4
 80148e0:	08018da8 	.word	0x08018da8
 80148e4:	08018c2c 	.word	0x08018c2c
 80148e8:	08018db4 	.word	0x08018db4

080148ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b094      	sub	sp, #80	; 0x50
 80148f0:	af02      	add	r7, sp, #8
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014902:	3b14      	subs	r3, #20
 8014904:	2b00      	cmp	r3, #0
 8014906:	da00      	bge.n	801490a <ip4_frag+0x1e>
 8014908:	3307      	adds	r3, #7
 801490a:	10db      	asrs	r3, r3, #3
 801490c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801490e:	2314      	movs	r3, #20
 8014910:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801491a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	f003 030f 	and.w	r3, r3, #15
 8014924:	b2db      	uxtb	r3, r3
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	b2db      	uxtb	r3, r3
 801492a:	2b14      	cmp	r3, #20
 801492c:	d002      	beq.n	8014934 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801492e:	f06f 0305 	mvn.w	r3, #5
 8014932:	e110      	b.n	8014b56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	895b      	ldrh	r3, [r3, #10]
 8014938:	2b13      	cmp	r3, #19
 801493a:	d809      	bhi.n	8014950 <ip4_frag+0x64>
 801493c:	4b88      	ldr	r3, [pc, #544]	; (8014b60 <ip4_frag+0x274>)
 801493e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014942:	4988      	ldr	r1, [pc, #544]	; (8014b64 <ip4_frag+0x278>)
 8014944:	4888      	ldr	r0, [pc, #544]	; (8014b68 <ip4_frag+0x27c>)
 8014946:	f000 fbdf 	bl	8015108 <iprintf>
 801494a:	f06f 0305 	mvn.w	r3, #5
 801494e:	e102      	b.n	8014b56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014952:	88db      	ldrh	r3, [r3, #6]
 8014954:	b29b      	uxth	r3, r3
 8014956:	4618      	mov	r0, r3
 8014958:	f7f4 fad2 	bl	8008f00 <lwip_htons>
 801495c:	4603      	mov	r3, r0
 801495e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014960:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014966:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801496a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801496c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014970:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	891b      	ldrh	r3, [r3, #8]
 8014976:	3b14      	subs	r3, #20
 8014978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801497c:	e0e1      	b.n	8014b42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801497e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014980:	00db      	lsls	r3, r3, #3
 8014982:	b29b      	uxth	r3, r3
 8014984:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014988:	4293      	cmp	r3, r2
 801498a:	bf28      	it	cs
 801498c:	4613      	movcs	r3, r2
 801498e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014990:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014994:	2114      	movs	r1, #20
 8014996:	200e      	movs	r0, #14
 8014998:	f7f5 fb64 	bl	800a064 <pbuf_alloc>
 801499c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f000 80d5 	beq.w	8014b50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	895b      	ldrh	r3, [r3, #10]
 80149aa:	2b13      	cmp	r3, #19
 80149ac:	d806      	bhi.n	80149bc <ip4_frag+0xd0>
 80149ae:	4b6c      	ldr	r3, [pc, #432]	; (8014b60 <ip4_frag+0x274>)
 80149b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80149b4:	496d      	ldr	r1, [pc, #436]	; (8014b6c <ip4_frag+0x280>)
 80149b6:	486c      	ldr	r0, [pc, #432]	; (8014b68 <ip4_frag+0x27c>)
 80149b8:	f000 fba6 	bl	8015108 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80149bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	2214      	movs	r2, #20
 80149c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149c4:	4618      	mov	r0, r3
 80149c6:	f000 fcd0 	bl	801536a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	685b      	ldr	r3, [r3, #4]
 80149ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80149d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80149d6:	e064      	b.n	8014aa2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	895a      	ldrh	r2, [r3, #10]
 80149dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	895b      	ldrh	r3, [r3, #10]
 80149e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d906      	bls.n	80149fa <ip4_frag+0x10e>
 80149ec:	4b5c      	ldr	r3, [pc, #368]	; (8014b60 <ip4_frag+0x274>)
 80149ee:	f240 322d 	movw	r2, #813	; 0x32d
 80149f2:	495f      	ldr	r1, [pc, #380]	; (8014b70 <ip4_frag+0x284>)
 80149f4:	485c      	ldr	r0, [pc, #368]	; (8014b68 <ip4_frag+0x27c>)
 80149f6:	f000 fb87 	bl	8015108 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80149fa:	8bfa      	ldrh	r2, [r7, #30]
 80149fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a00:	4293      	cmp	r3, r2
 8014a02:	bf28      	it	cs
 8014a04:	4613      	movcs	r3, r2
 8014a06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014a0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d105      	bne.n	8014a1e <ip4_frag+0x132>
        poff = 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	60fb      	str	r3, [r7, #12]
        continue;
 8014a1c:	e041      	b.n	8014aa2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014a1e:	f7ff ff0d 	bl	801483c <ip_frag_alloc_pbuf_custom_ref>
 8014a22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d103      	bne.n	8014a32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a2c:	f7f5 fdfe 	bl	800a62c <pbuf_free>
        goto memerr;
 8014a30:	e08f      	b.n	8014b52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a3a:	4413      	add	r3, r2
 8014a3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014a40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014a44:	9201      	str	r2, [sp, #4]
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2241      	movs	r2, #65	; 0x41
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	f7f5 fc33 	bl	800a2b8 <pbuf_alloced_custom>
 8014a52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d106      	bne.n	8014a68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a5a:	69b8      	ldr	r0, [r7, #24]
 8014a5c:	f7ff fef6 	bl	801484c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a62:	f7f5 fde3 	bl	800a62c <pbuf_free>
        goto memerr;
 8014a66:	e074      	b.n	8014b52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f7f5 fe85 	bl	800a778 <pbuf_ref>
      pcr->original = p;
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	68fa      	ldr	r2, [r7, #12]
 8014a72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	4a3f      	ldr	r2, [pc, #252]	; (8014b74 <ip4_frag+0x288>)
 8014a78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a7a:	6979      	ldr	r1, [r7, #20]
 8014a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a7e:	f7f5 fea3 	bl	800a7c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014a86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014a90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d004      	beq.n	8014aa2 <ip4_frag+0x1b6>
        poff = 0;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014aa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d196      	bne.n	80149d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014aaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014aac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ab0:	4413      	add	r3, r2
 8014ab2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ab8:	f1a3 0213 	sub.w	r2, r3, #19
 8014abc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	bfcc      	ite	gt
 8014ac4:	2301      	movgt	r3, #1
 8014ac6:	2300      	movle	r3, #0
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014acc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ad4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <ip4_frag+0x1f6>
 8014adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d003      	beq.n	8014aea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014ae2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014ae8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014aea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7f4 fa07 	bl	8008f00 <lwip_htons>
 8014af2:	4603      	mov	r3, r0
 8014af4:	461a      	mov	r2, r3
 8014af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014afa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014afc:	3314      	adds	r3, #20
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7f4 f9fd 	bl	8008f00 <lwip_htons>
 8014b06:	4603      	mov	r3, r0
 8014b08:	461a      	mov	r2, r3
 8014b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b10:	2200      	movs	r2, #0
 8014b12:	729a      	strb	r2, [r3, #10]
 8014b14:	2200      	movs	r2, #0
 8014b16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b20:	68b8      	ldr	r0, [r7, #8]
 8014b22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b26:	f7f5 fd81 	bl	800a62c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b30:	1ad3      	subs	r3, r2, r3
 8014b32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014b3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b3c:	4413      	add	r3, r2
 8014b3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014b42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f47f af19 	bne.w	801497e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	e002      	b.n	8014b56 <ip4_frag+0x26a>
      goto memerr;
 8014b50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3748      	adds	r7, #72	; 0x48
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	08018be4 	.word	0x08018be4
 8014b64:	08018dc0 	.word	0x08018dc0
 8014b68:	08018c2c 	.word	0x08018c2c
 8014b6c:	08018ddc 	.word	0x08018ddc
 8014b70:	08018dfc 	.word	0x08018dfc
 8014b74:	08014885 	.word	0x08014885

08014b78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b82:	230e      	movs	r3, #14
 8014b84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	895b      	ldrh	r3, [r3, #10]
 8014b8a:	2b0e      	cmp	r3, #14
 8014b8c:	d96e      	bls.n	8014c6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	7bdb      	ldrb	r3, [r3, #15]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d106      	bne.n	8014ba4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	b2da      	uxtb	r2, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	7b1a      	ldrb	r2, [r3, #12]
 8014bae:	7b5b      	ldrb	r3, [r3, #13]
 8014bb0:	021b      	lsls	r3, r3, #8
 8014bb2:	4313      	orrs	r3, r2
 8014bb4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	f003 0301 	and.w	r3, r3, #1
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d023      	beq.n	8014c0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	d10f      	bne.n	8014bea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	785b      	ldrb	r3, [r3, #1]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d11b      	bne.n	8014c0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bd6:	2b5e      	cmp	r3, #94	; 0x5e
 8014bd8:	d117      	bne.n	8014c0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	7b5b      	ldrb	r3, [r3, #13]
 8014bde:	f043 0310 	orr.w	r3, r3, #16
 8014be2:	b2da      	uxtb	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	735a      	strb	r2, [r3, #13]
 8014be8:	e00f      	b.n	8014c0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	2206      	movs	r2, #6
 8014bee:	4928      	ldr	r1, [pc, #160]	; (8014c90 <ethernet_input+0x118>)
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f000 fade 	bl	80151b2 <memcmp>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d106      	bne.n	8014c0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	7b5b      	ldrb	r3, [r3, #13]
 8014c00:	f043 0308 	orr.w	r3, r3, #8
 8014c04:	b2da      	uxtb	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014c0a:	89fb      	ldrh	r3, [r7, #14]
 8014c0c:	2b08      	cmp	r3, #8
 8014c0e:	d003      	beq.n	8014c18 <ethernet_input+0xa0>
 8014c10:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014c14:	d014      	beq.n	8014c40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014c16:	e032      	b.n	8014c7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c1e:	f003 0308 	and.w	r3, r3, #8
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d024      	beq.n	8014c70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c26:	8afb      	ldrh	r3, [r7, #22]
 8014c28:	4619      	mov	r1, r3
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7f5 fc78 	bl	800a520 <pbuf_remove_header>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d11e      	bne.n	8014c74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c36:	6839      	ldr	r1, [r7, #0]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7fe ff03 	bl	8013a44 <ip4_input>
      break;
 8014c3e:	e013      	b.n	8014c68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c46:	f003 0308 	and.w	r3, r3, #8
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d014      	beq.n	8014c78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c4e:	8afb      	ldrh	r3, [r7, #22]
 8014c50:	4619      	mov	r1, r3
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7f5 fc64 	bl	800a520 <pbuf_remove_header>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d10e      	bne.n	8014c7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f7fe f89f 	bl	8012da4 <etharp_input>
      break;
 8014c66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e00c      	b.n	8014c86 <ethernet_input+0x10e>
    goto free_and_return;
 8014c6c:	bf00      	nop
 8014c6e:	e006      	b.n	8014c7e <ethernet_input+0x106>
        goto free_and_return;
 8014c70:	bf00      	nop
 8014c72:	e004      	b.n	8014c7e <ethernet_input+0x106>
        goto free_and_return;
 8014c74:	bf00      	nop
 8014c76:	e002      	b.n	8014c7e <ethernet_input+0x106>
        goto free_and_return;
 8014c78:	bf00      	nop
 8014c7a:	e000      	b.n	8014c7e <ethernet_input+0x106>
        goto free_and_return;
 8014c7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f7f5 fcd4 	bl	800a62c <pbuf_free>
  return ERR_OK;
 8014c84:	2300      	movs	r3, #0
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3718      	adds	r7, #24
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	08019010 	.word	0x08019010

08014c94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b086      	sub	sp, #24
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014ca2:	8c3b      	ldrh	r3, [r7, #32]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7f4 f92b 	bl	8008f00 <lwip_htons>
 8014caa:	4603      	mov	r3, r0
 8014cac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014cae:	210e      	movs	r1, #14
 8014cb0:	68b8      	ldr	r0, [r7, #8]
 8014cb2:	f7f5 fc25 	bl	800a500 <pbuf_add_header>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d125      	bne.n	8014d08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	8afa      	ldrh	r2, [r7, #22]
 8014cc6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	2206      	movs	r2, #6
 8014ccc:	6839      	ldr	r1, [r7, #0]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f000 fb4b 	bl	801536a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	3306      	adds	r3, #6
 8014cd8:	2206      	movs	r2, #6
 8014cda:	6879      	ldr	r1, [r7, #4]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f000 fb44 	bl	801536a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ce8:	2b06      	cmp	r3, #6
 8014cea:	d006      	beq.n	8014cfa <ethernet_output+0x66>
 8014cec:	4b0a      	ldr	r3, [pc, #40]	; (8014d18 <ethernet_output+0x84>)
 8014cee:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014cf2:	490a      	ldr	r1, [pc, #40]	; (8014d1c <ethernet_output+0x88>)
 8014cf4:	480a      	ldr	r0, [pc, #40]	; (8014d20 <ethernet_output+0x8c>)
 8014cf6:	f000 fa07 	bl	8015108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	699b      	ldr	r3, [r3, #24]
 8014cfe:	68b9      	ldr	r1, [r7, #8]
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	4798      	blx	r3
 8014d04:	4603      	mov	r3, r0
 8014d06:	e002      	b.n	8014d0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014d08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014d0a:	f06f 0301 	mvn.w	r3, #1
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3718      	adds	r7, #24
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	bf00      	nop
 8014d18:	08018e0c 	.word	0x08018e0c
 8014d1c:	08018e44 	.word	0x08018e44
 8014d20:	08018e78 	.word	0x08018e78

08014d24 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b082      	sub	sp, #8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	2200      	movs	r2, #0
 8014d32:	2104      	movs	r1, #4
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7f0 fbf3 	bl	8005520 <osMessageQueueNew>
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d102      	bne.n	8014d4e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4c:	e000      	b.n	8014d50 <sys_mbox_new+0x2c>

  return ERR_OK;
 8014d4e:	2300      	movs	r3, #0
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}

08014d58 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6818      	ldr	r0, [r3, #0]
 8014d66:	4639      	mov	r1, r7
 8014d68:	2300      	movs	r3, #0
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f7f0 fc5e 	bl	800562c <osMessageQueuePut>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d102      	bne.n	8014d7c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	73fb      	strb	r3, [r7, #15]
 8014d7a:	e001      	b.n	8014d80 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014d7c:	23ff      	movs	r3, #255	; 0xff
 8014d7e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b086      	sub	sp, #24
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014d98:	f7f0 f824 	bl	8004de4 <osKernelGetTickCount>
 8014d9c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d013      	beq.n	8014dcc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	6818      	ldr	r0, [r3, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	68b9      	ldr	r1, [r7, #8]
 8014dae:	f7f0 fcb1 	bl	8005714 <osMessageQueueGet>
 8014db2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d105      	bne.n	8014dc6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014dba:	f7f0 f813 	bl	8004de4 <osKernelGetTickCount>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	1ad3      	subs	r3, r2, r3
 8014dc4:	e00f      	b.n	8014de6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dca:	e00c      	b.n	8014de6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	6818      	ldr	r0, [r3, #0]
 8014dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	68b9      	ldr	r1, [r7, #8]
 8014dd8:	f7f0 fc9c 	bl	8005714 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014ddc:	f7f0 f802 	bl	8004de4 <osKernelGetTickCount>
 8014de0:	4602      	mov	r2, r0
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3718      	adds	r7, #24
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}

08014dee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014dee:	b480      	push	{r7}
 8014df0:	b083      	sub	sp, #12
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <sys_mbox_valid+0x14>
    return 0;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	e000      	b.n	8014e04 <sys_mbox_valid+0x16>
  else
    return 1;
 8014e02:	2301      	movs	r3, #1
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	370c      	adds	r7, #12
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr

08014e10 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8014e14:	2000      	movs	r0, #0
 8014e16:	f7f0 f8e1 	bl	8004fdc <osMutexNew>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	4a01      	ldr	r2, [pc, #4]	; (8014e24 <sys_init+0x14>)
 8014e1e:	6013      	str	r3, [r2, #0]
#endif
}
 8014e20:	bf00      	nop
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	2000d554 	.word	0x2000d554

08014e28 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014e30:	2000      	movs	r0, #0
 8014e32:	f7f0 f8d3 	bl	8004fdc <osMutexNew>
 8014e36:	4602      	mov	r2, r0
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d102      	bne.n	8014e4a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014e44:	f04f 33ff 	mov.w	r3, #4294967295
 8014e48:	e000      	b.n	8014e4c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014e4a:	2300      	movs	r3, #0
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3708      	adds	r7, #8
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	f04f 31ff 	mov.w	r1, #4294967295
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f0 f953 	bl	8005110 <osMutexAcquire>
#endif
}
 8014e6a:	bf00      	nop
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b082      	sub	sp, #8
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7f0 f9a4 	bl	80051cc <osMutexRelease>
}
 8014e84:	bf00      	nop
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b08e      	sub	sp, #56	; 0x38
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
 8014e98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014e9a:	f107 0314 	add.w	r3, r7, #20
 8014e9e:	2224      	movs	r2, #36	; 0x24
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f000 f995 	bl	80151d2 <memset>
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	617b      	str	r3, [r7, #20]
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8014eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014eb4:	f107 0314 	add.w	r3, r7, #20
 8014eb8:	461a      	mov	r2, r3
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	68b8      	ldr	r0, [r7, #8]
 8014ebe:	f7ef ffb9 	bl	8004e34 <osThreadNew>
 8014ec2:	4603      	mov	r3, r0
#endif
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3738      	adds	r7, #56	; 0x38
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014ed0:	4b04      	ldr	r3, [pc, #16]	; (8014ee4 <sys_arch_protect+0x18>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7f0 f919 	bl	8005110 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8014ede:	2301      	movs	r3, #1
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	2000d554 	.word	0x2000d554

08014ee8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014ef0:	4b04      	ldr	r3, [pc, #16]	; (8014f04 <sys_arch_unprotect+0x1c>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7f0 f969 	bl	80051cc <osMutexRelease>
}
 8014efa:	bf00      	nop
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	2000d554 	.word	0x2000d554

08014f08 <rand>:
 8014f08:	4b16      	ldr	r3, [pc, #88]	; (8014f64 <rand+0x5c>)
 8014f0a:	b510      	push	{r4, lr}
 8014f0c:	681c      	ldr	r4, [r3, #0]
 8014f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014f10:	b9b3      	cbnz	r3, 8014f40 <rand+0x38>
 8014f12:	2018      	movs	r0, #24
 8014f14:	f000 faa2 	bl	801545c <malloc>
 8014f18:	4602      	mov	r2, r0
 8014f1a:	6320      	str	r0, [r4, #48]	; 0x30
 8014f1c:	b920      	cbnz	r0, 8014f28 <rand+0x20>
 8014f1e:	4b12      	ldr	r3, [pc, #72]	; (8014f68 <rand+0x60>)
 8014f20:	4812      	ldr	r0, [pc, #72]	; (8014f6c <rand+0x64>)
 8014f22:	2152      	movs	r1, #82	; 0x52
 8014f24:	f000 fa30 	bl	8015388 <__assert_func>
 8014f28:	4911      	ldr	r1, [pc, #68]	; (8014f70 <rand+0x68>)
 8014f2a:	4b12      	ldr	r3, [pc, #72]	; (8014f74 <rand+0x6c>)
 8014f2c:	e9c0 1300 	strd	r1, r3, [r0]
 8014f30:	4b11      	ldr	r3, [pc, #68]	; (8014f78 <rand+0x70>)
 8014f32:	6083      	str	r3, [r0, #8]
 8014f34:	230b      	movs	r3, #11
 8014f36:	8183      	strh	r3, [r0, #12]
 8014f38:	2100      	movs	r1, #0
 8014f3a:	2001      	movs	r0, #1
 8014f3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014f40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014f42:	480e      	ldr	r0, [pc, #56]	; (8014f7c <rand+0x74>)
 8014f44:	690b      	ldr	r3, [r1, #16]
 8014f46:	694c      	ldr	r4, [r1, #20]
 8014f48:	4a0d      	ldr	r2, [pc, #52]	; (8014f80 <rand+0x78>)
 8014f4a:	4358      	muls	r0, r3
 8014f4c:	fb02 0004 	mla	r0, r2, r4, r0
 8014f50:	fba3 3202 	umull	r3, r2, r3, r2
 8014f54:	3301      	adds	r3, #1
 8014f56:	eb40 0002 	adc.w	r0, r0, r2
 8014f5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014f5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014f62:	bd10      	pop	{r4, pc}
 8014f64:	20000078 	.word	0x20000078
 8014f68:	0801901e 	.word	0x0801901e
 8014f6c:	08019035 	.word	0x08019035
 8014f70:	abcd330e 	.word	0xabcd330e
 8014f74:	e66d1234 	.word	0xe66d1234
 8014f78:	0005deec 	.word	0x0005deec
 8014f7c:	5851f42d 	.word	0x5851f42d
 8014f80:	4c957f2d 	.word	0x4c957f2d

08014f84 <std>:
 8014f84:	2300      	movs	r3, #0
 8014f86:	b510      	push	{r4, lr}
 8014f88:	4604      	mov	r4, r0
 8014f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8014f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f92:	6083      	str	r3, [r0, #8]
 8014f94:	8181      	strh	r1, [r0, #12]
 8014f96:	6643      	str	r3, [r0, #100]	; 0x64
 8014f98:	81c2      	strh	r2, [r0, #14]
 8014f9a:	6183      	str	r3, [r0, #24]
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	2208      	movs	r2, #8
 8014fa0:	305c      	adds	r0, #92	; 0x5c
 8014fa2:	f000 f916 	bl	80151d2 <memset>
 8014fa6:	4b0d      	ldr	r3, [pc, #52]	; (8014fdc <std+0x58>)
 8014fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8014faa:	4b0d      	ldr	r3, [pc, #52]	; (8014fe0 <std+0x5c>)
 8014fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fae:	4b0d      	ldr	r3, [pc, #52]	; (8014fe4 <std+0x60>)
 8014fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fb2:	4b0d      	ldr	r3, [pc, #52]	; (8014fe8 <std+0x64>)
 8014fb4:	6323      	str	r3, [r4, #48]	; 0x30
 8014fb6:	4b0d      	ldr	r3, [pc, #52]	; (8014fec <std+0x68>)
 8014fb8:	6224      	str	r4, [r4, #32]
 8014fba:	429c      	cmp	r4, r3
 8014fbc:	d006      	beq.n	8014fcc <std+0x48>
 8014fbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014fc2:	4294      	cmp	r4, r2
 8014fc4:	d002      	beq.n	8014fcc <std+0x48>
 8014fc6:	33d0      	adds	r3, #208	; 0xd0
 8014fc8:	429c      	cmp	r4, r3
 8014fca:	d105      	bne.n	8014fd8 <std+0x54>
 8014fcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fd4:	f000 b9c6 	b.w	8015364 <__retarget_lock_init_recursive>
 8014fd8:	bd10      	pop	{r4, pc}
 8014fda:	bf00      	nop
 8014fdc:	0801512d 	.word	0x0801512d
 8014fe0:	0801514f 	.word	0x0801514f
 8014fe4:	08015187 	.word	0x08015187
 8014fe8:	080151ab 	.word	0x080151ab
 8014fec:	2000d558 	.word	0x2000d558

08014ff0 <stdio_exit_handler>:
 8014ff0:	4a02      	ldr	r2, [pc, #8]	; (8014ffc <stdio_exit_handler+0xc>)
 8014ff2:	4903      	ldr	r1, [pc, #12]	; (8015000 <stdio_exit_handler+0x10>)
 8014ff4:	4803      	ldr	r0, [pc, #12]	; (8015004 <stdio_exit_handler+0x14>)
 8014ff6:	f000 b869 	b.w	80150cc <_fwalk_sglue>
 8014ffa:	bf00      	nop
 8014ffc:	20000020 	.word	0x20000020
 8015000:	08015c79 	.word	0x08015c79
 8015004:	2000002c 	.word	0x2000002c

08015008 <cleanup_stdio>:
 8015008:	6841      	ldr	r1, [r0, #4]
 801500a:	4b0c      	ldr	r3, [pc, #48]	; (801503c <cleanup_stdio+0x34>)
 801500c:	4299      	cmp	r1, r3
 801500e:	b510      	push	{r4, lr}
 8015010:	4604      	mov	r4, r0
 8015012:	d001      	beq.n	8015018 <cleanup_stdio+0x10>
 8015014:	f000 fe30 	bl	8015c78 <_fflush_r>
 8015018:	68a1      	ldr	r1, [r4, #8]
 801501a:	4b09      	ldr	r3, [pc, #36]	; (8015040 <cleanup_stdio+0x38>)
 801501c:	4299      	cmp	r1, r3
 801501e:	d002      	beq.n	8015026 <cleanup_stdio+0x1e>
 8015020:	4620      	mov	r0, r4
 8015022:	f000 fe29 	bl	8015c78 <_fflush_r>
 8015026:	68e1      	ldr	r1, [r4, #12]
 8015028:	4b06      	ldr	r3, [pc, #24]	; (8015044 <cleanup_stdio+0x3c>)
 801502a:	4299      	cmp	r1, r3
 801502c:	d004      	beq.n	8015038 <cleanup_stdio+0x30>
 801502e:	4620      	mov	r0, r4
 8015030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015034:	f000 be20 	b.w	8015c78 <_fflush_r>
 8015038:	bd10      	pop	{r4, pc}
 801503a:	bf00      	nop
 801503c:	2000d558 	.word	0x2000d558
 8015040:	2000d5c0 	.word	0x2000d5c0
 8015044:	2000d628 	.word	0x2000d628

08015048 <global_stdio_init.part.0>:
 8015048:	b510      	push	{r4, lr}
 801504a:	4b0b      	ldr	r3, [pc, #44]	; (8015078 <global_stdio_init.part.0+0x30>)
 801504c:	4c0b      	ldr	r4, [pc, #44]	; (801507c <global_stdio_init.part.0+0x34>)
 801504e:	4a0c      	ldr	r2, [pc, #48]	; (8015080 <global_stdio_init.part.0+0x38>)
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	4620      	mov	r0, r4
 8015054:	2200      	movs	r2, #0
 8015056:	2104      	movs	r1, #4
 8015058:	f7ff ff94 	bl	8014f84 <std>
 801505c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015060:	2201      	movs	r2, #1
 8015062:	2109      	movs	r1, #9
 8015064:	f7ff ff8e 	bl	8014f84 <std>
 8015068:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801506c:	2202      	movs	r2, #2
 801506e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015072:	2112      	movs	r1, #18
 8015074:	f7ff bf86 	b.w	8014f84 <std>
 8015078:	2000d690 	.word	0x2000d690
 801507c:	2000d558 	.word	0x2000d558
 8015080:	08014ff1 	.word	0x08014ff1

08015084 <__sfp_lock_acquire>:
 8015084:	4801      	ldr	r0, [pc, #4]	; (801508c <__sfp_lock_acquire+0x8>)
 8015086:	f000 b96e 	b.w	8015366 <__retarget_lock_acquire_recursive>
 801508a:	bf00      	nop
 801508c:	2000d699 	.word	0x2000d699

08015090 <__sfp_lock_release>:
 8015090:	4801      	ldr	r0, [pc, #4]	; (8015098 <__sfp_lock_release+0x8>)
 8015092:	f000 b969 	b.w	8015368 <__retarget_lock_release_recursive>
 8015096:	bf00      	nop
 8015098:	2000d699 	.word	0x2000d699

0801509c <__sinit>:
 801509c:	b510      	push	{r4, lr}
 801509e:	4604      	mov	r4, r0
 80150a0:	f7ff fff0 	bl	8015084 <__sfp_lock_acquire>
 80150a4:	6a23      	ldr	r3, [r4, #32]
 80150a6:	b11b      	cbz	r3, 80150b0 <__sinit+0x14>
 80150a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150ac:	f7ff bff0 	b.w	8015090 <__sfp_lock_release>
 80150b0:	4b04      	ldr	r3, [pc, #16]	; (80150c4 <__sinit+0x28>)
 80150b2:	6223      	str	r3, [r4, #32]
 80150b4:	4b04      	ldr	r3, [pc, #16]	; (80150c8 <__sinit+0x2c>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d1f5      	bne.n	80150a8 <__sinit+0xc>
 80150bc:	f7ff ffc4 	bl	8015048 <global_stdio_init.part.0>
 80150c0:	e7f2      	b.n	80150a8 <__sinit+0xc>
 80150c2:	bf00      	nop
 80150c4:	08015009 	.word	0x08015009
 80150c8:	2000d690 	.word	0x2000d690

080150cc <_fwalk_sglue>:
 80150cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150d0:	4607      	mov	r7, r0
 80150d2:	4688      	mov	r8, r1
 80150d4:	4614      	mov	r4, r2
 80150d6:	2600      	movs	r6, #0
 80150d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150dc:	f1b9 0901 	subs.w	r9, r9, #1
 80150e0:	d505      	bpl.n	80150ee <_fwalk_sglue+0x22>
 80150e2:	6824      	ldr	r4, [r4, #0]
 80150e4:	2c00      	cmp	r4, #0
 80150e6:	d1f7      	bne.n	80150d8 <_fwalk_sglue+0xc>
 80150e8:	4630      	mov	r0, r6
 80150ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150ee:	89ab      	ldrh	r3, [r5, #12]
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d907      	bls.n	8015104 <_fwalk_sglue+0x38>
 80150f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150f8:	3301      	adds	r3, #1
 80150fa:	d003      	beq.n	8015104 <_fwalk_sglue+0x38>
 80150fc:	4629      	mov	r1, r5
 80150fe:	4638      	mov	r0, r7
 8015100:	47c0      	blx	r8
 8015102:	4306      	orrs	r6, r0
 8015104:	3568      	adds	r5, #104	; 0x68
 8015106:	e7e9      	b.n	80150dc <_fwalk_sglue+0x10>

08015108 <iprintf>:
 8015108:	b40f      	push	{r0, r1, r2, r3}
 801510a:	b507      	push	{r0, r1, r2, lr}
 801510c:	4906      	ldr	r1, [pc, #24]	; (8015128 <iprintf+0x20>)
 801510e:	ab04      	add	r3, sp, #16
 8015110:	6808      	ldr	r0, [r1, #0]
 8015112:	f853 2b04 	ldr.w	r2, [r3], #4
 8015116:	6881      	ldr	r1, [r0, #8]
 8015118:	9301      	str	r3, [sp, #4]
 801511a:	f000 fa7d 	bl	8015618 <_vfiprintf_r>
 801511e:	b003      	add	sp, #12
 8015120:	f85d eb04 	ldr.w	lr, [sp], #4
 8015124:	b004      	add	sp, #16
 8015126:	4770      	bx	lr
 8015128:	20000078 	.word	0x20000078

0801512c <__sread>:
 801512c:	b510      	push	{r4, lr}
 801512e:	460c      	mov	r4, r1
 8015130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015134:	f000 f8ce 	bl	80152d4 <_read_r>
 8015138:	2800      	cmp	r0, #0
 801513a:	bfab      	itete	ge
 801513c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801513e:	89a3      	ldrhlt	r3, [r4, #12]
 8015140:	181b      	addge	r3, r3, r0
 8015142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015146:	bfac      	ite	ge
 8015148:	6563      	strge	r3, [r4, #84]	; 0x54
 801514a:	81a3      	strhlt	r3, [r4, #12]
 801514c:	bd10      	pop	{r4, pc}

0801514e <__swrite>:
 801514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015152:	461f      	mov	r7, r3
 8015154:	898b      	ldrh	r3, [r1, #12]
 8015156:	05db      	lsls	r3, r3, #23
 8015158:	4605      	mov	r5, r0
 801515a:	460c      	mov	r4, r1
 801515c:	4616      	mov	r6, r2
 801515e:	d505      	bpl.n	801516c <__swrite+0x1e>
 8015160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015164:	2302      	movs	r3, #2
 8015166:	2200      	movs	r2, #0
 8015168:	f000 f8a2 	bl	80152b0 <_lseek_r>
 801516c:	89a3      	ldrh	r3, [r4, #12]
 801516e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015176:	81a3      	strh	r3, [r4, #12]
 8015178:	4632      	mov	r2, r6
 801517a:	463b      	mov	r3, r7
 801517c:	4628      	mov	r0, r5
 801517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015182:	f000 b8b9 	b.w	80152f8 <_write_r>

08015186 <__sseek>:
 8015186:	b510      	push	{r4, lr}
 8015188:	460c      	mov	r4, r1
 801518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801518e:	f000 f88f 	bl	80152b0 <_lseek_r>
 8015192:	1c43      	adds	r3, r0, #1
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	bf15      	itete	ne
 8015198:	6560      	strne	r0, [r4, #84]	; 0x54
 801519a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801519e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151a2:	81a3      	strheq	r3, [r4, #12]
 80151a4:	bf18      	it	ne
 80151a6:	81a3      	strhne	r3, [r4, #12]
 80151a8:	bd10      	pop	{r4, pc}

080151aa <__sclose>:
 80151aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ae:	f000 b819 	b.w	80151e4 <_close_r>

080151b2 <memcmp>:
 80151b2:	b510      	push	{r4, lr}
 80151b4:	3901      	subs	r1, #1
 80151b6:	4402      	add	r2, r0
 80151b8:	4290      	cmp	r0, r2
 80151ba:	d101      	bne.n	80151c0 <memcmp+0xe>
 80151bc:	2000      	movs	r0, #0
 80151be:	e005      	b.n	80151cc <memcmp+0x1a>
 80151c0:	7803      	ldrb	r3, [r0, #0]
 80151c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80151c6:	42a3      	cmp	r3, r4
 80151c8:	d001      	beq.n	80151ce <memcmp+0x1c>
 80151ca:	1b18      	subs	r0, r3, r4
 80151cc:	bd10      	pop	{r4, pc}
 80151ce:	3001      	adds	r0, #1
 80151d0:	e7f2      	b.n	80151b8 <memcmp+0x6>

080151d2 <memset>:
 80151d2:	4402      	add	r2, r0
 80151d4:	4603      	mov	r3, r0
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d100      	bne.n	80151dc <memset+0xa>
 80151da:	4770      	bx	lr
 80151dc:	f803 1b01 	strb.w	r1, [r3], #1
 80151e0:	e7f9      	b.n	80151d6 <memset+0x4>
	...

080151e4 <_close_r>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	4d06      	ldr	r5, [pc, #24]	; (8015200 <_close_r+0x1c>)
 80151e8:	2300      	movs	r3, #0
 80151ea:	4604      	mov	r4, r0
 80151ec:	4608      	mov	r0, r1
 80151ee:	602b      	str	r3, [r5, #0]
 80151f0:	f7eb fd23 	bl	8000c3a <_close>
 80151f4:	1c43      	adds	r3, r0, #1
 80151f6:	d102      	bne.n	80151fe <_close_r+0x1a>
 80151f8:	682b      	ldr	r3, [r5, #0]
 80151fa:	b103      	cbz	r3, 80151fe <_close_r+0x1a>
 80151fc:	6023      	str	r3, [r4, #0]
 80151fe:	bd38      	pop	{r3, r4, r5, pc}
 8015200:	2000d694 	.word	0x2000d694

08015204 <_reclaim_reent>:
 8015204:	4b29      	ldr	r3, [pc, #164]	; (80152ac <_reclaim_reent+0xa8>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4283      	cmp	r3, r0
 801520a:	b570      	push	{r4, r5, r6, lr}
 801520c:	4604      	mov	r4, r0
 801520e:	d04b      	beq.n	80152a8 <_reclaim_reent+0xa4>
 8015210:	69c3      	ldr	r3, [r0, #28]
 8015212:	b143      	cbz	r3, 8015226 <_reclaim_reent+0x22>
 8015214:	68db      	ldr	r3, [r3, #12]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d144      	bne.n	80152a4 <_reclaim_reent+0xa0>
 801521a:	69e3      	ldr	r3, [r4, #28]
 801521c:	6819      	ldr	r1, [r3, #0]
 801521e:	b111      	cbz	r1, 8015226 <_reclaim_reent+0x22>
 8015220:	4620      	mov	r0, r4
 8015222:	f000 f8cf 	bl	80153c4 <_free_r>
 8015226:	6961      	ldr	r1, [r4, #20]
 8015228:	b111      	cbz	r1, 8015230 <_reclaim_reent+0x2c>
 801522a:	4620      	mov	r0, r4
 801522c:	f000 f8ca 	bl	80153c4 <_free_r>
 8015230:	69e1      	ldr	r1, [r4, #28]
 8015232:	b111      	cbz	r1, 801523a <_reclaim_reent+0x36>
 8015234:	4620      	mov	r0, r4
 8015236:	f000 f8c5 	bl	80153c4 <_free_r>
 801523a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801523c:	b111      	cbz	r1, 8015244 <_reclaim_reent+0x40>
 801523e:	4620      	mov	r0, r4
 8015240:	f000 f8c0 	bl	80153c4 <_free_r>
 8015244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015246:	b111      	cbz	r1, 801524e <_reclaim_reent+0x4a>
 8015248:	4620      	mov	r0, r4
 801524a:	f000 f8bb 	bl	80153c4 <_free_r>
 801524e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015250:	b111      	cbz	r1, 8015258 <_reclaim_reent+0x54>
 8015252:	4620      	mov	r0, r4
 8015254:	f000 f8b6 	bl	80153c4 <_free_r>
 8015258:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801525a:	b111      	cbz	r1, 8015262 <_reclaim_reent+0x5e>
 801525c:	4620      	mov	r0, r4
 801525e:	f000 f8b1 	bl	80153c4 <_free_r>
 8015262:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015264:	b111      	cbz	r1, 801526c <_reclaim_reent+0x68>
 8015266:	4620      	mov	r0, r4
 8015268:	f000 f8ac 	bl	80153c4 <_free_r>
 801526c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801526e:	b111      	cbz	r1, 8015276 <_reclaim_reent+0x72>
 8015270:	4620      	mov	r0, r4
 8015272:	f000 f8a7 	bl	80153c4 <_free_r>
 8015276:	6a23      	ldr	r3, [r4, #32]
 8015278:	b1b3      	cbz	r3, 80152a8 <_reclaim_reent+0xa4>
 801527a:	4620      	mov	r0, r4
 801527c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015280:	4718      	bx	r3
 8015282:	5949      	ldr	r1, [r1, r5]
 8015284:	b941      	cbnz	r1, 8015298 <_reclaim_reent+0x94>
 8015286:	3504      	adds	r5, #4
 8015288:	69e3      	ldr	r3, [r4, #28]
 801528a:	2d80      	cmp	r5, #128	; 0x80
 801528c:	68d9      	ldr	r1, [r3, #12]
 801528e:	d1f8      	bne.n	8015282 <_reclaim_reent+0x7e>
 8015290:	4620      	mov	r0, r4
 8015292:	f000 f897 	bl	80153c4 <_free_r>
 8015296:	e7c0      	b.n	801521a <_reclaim_reent+0x16>
 8015298:	680e      	ldr	r6, [r1, #0]
 801529a:	4620      	mov	r0, r4
 801529c:	f000 f892 	bl	80153c4 <_free_r>
 80152a0:	4631      	mov	r1, r6
 80152a2:	e7ef      	b.n	8015284 <_reclaim_reent+0x80>
 80152a4:	2500      	movs	r5, #0
 80152a6:	e7ef      	b.n	8015288 <_reclaim_reent+0x84>
 80152a8:	bd70      	pop	{r4, r5, r6, pc}
 80152aa:	bf00      	nop
 80152ac:	20000078 	.word	0x20000078

080152b0 <_lseek_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	4d07      	ldr	r5, [pc, #28]	; (80152d0 <_lseek_r+0x20>)
 80152b4:	4604      	mov	r4, r0
 80152b6:	4608      	mov	r0, r1
 80152b8:	4611      	mov	r1, r2
 80152ba:	2200      	movs	r2, #0
 80152bc:	602a      	str	r2, [r5, #0]
 80152be:	461a      	mov	r2, r3
 80152c0:	f7eb fce2 	bl	8000c88 <_lseek>
 80152c4:	1c43      	adds	r3, r0, #1
 80152c6:	d102      	bne.n	80152ce <_lseek_r+0x1e>
 80152c8:	682b      	ldr	r3, [r5, #0]
 80152ca:	b103      	cbz	r3, 80152ce <_lseek_r+0x1e>
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	2000d694 	.word	0x2000d694

080152d4 <_read_r>:
 80152d4:	b538      	push	{r3, r4, r5, lr}
 80152d6:	4d07      	ldr	r5, [pc, #28]	; (80152f4 <_read_r+0x20>)
 80152d8:	4604      	mov	r4, r0
 80152da:	4608      	mov	r0, r1
 80152dc:	4611      	mov	r1, r2
 80152de:	2200      	movs	r2, #0
 80152e0:	602a      	str	r2, [r5, #0]
 80152e2:	461a      	mov	r2, r3
 80152e4:	f7eb fc70 	bl	8000bc8 <_read>
 80152e8:	1c43      	adds	r3, r0, #1
 80152ea:	d102      	bne.n	80152f2 <_read_r+0x1e>
 80152ec:	682b      	ldr	r3, [r5, #0]
 80152ee:	b103      	cbz	r3, 80152f2 <_read_r+0x1e>
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	bd38      	pop	{r3, r4, r5, pc}
 80152f4:	2000d694 	.word	0x2000d694

080152f8 <_write_r>:
 80152f8:	b538      	push	{r3, r4, r5, lr}
 80152fa:	4d07      	ldr	r5, [pc, #28]	; (8015318 <_write_r+0x20>)
 80152fc:	4604      	mov	r4, r0
 80152fe:	4608      	mov	r0, r1
 8015300:	4611      	mov	r1, r2
 8015302:	2200      	movs	r2, #0
 8015304:	602a      	str	r2, [r5, #0]
 8015306:	461a      	mov	r2, r3
 8015308:	f7eb fc7b 	bl	8000c02 <_write>
 801530c:	1c43      	adds	r3, r0, #1
 801530e:	d102      	bne.n	8015316 <_write_r+0x1e>
 8015310:	682b      	ldr	r3, [r5, #0]
 8015312:	b103      	cbz	r3, 8015316 <_write_r+0x1e>
 8015314:	6023      	str	r3, [r4, #0]
 8015316:	bd38      	pop	{r3, r4, r5, pc}
 8015318:	2000d694 	.word	0x2000d694

0801531c <__libc_init_array>:
 801531c:	b570      	push	{r4, r5, r6, lr}
 801531e:	4d0d      	ldr	r5, [pc, #52]	; (8015354 <__libc_init_array+0x38>)
 8015320:	4c0d      	ldr	r4, [pc, #52]	; (8015358 <__libc_init_array+0x3c>)
 8015322:	1b64      	subs	r4, r4, r5
 8015324:	10a4      	asrs	r4, r4, #2
 8015326:	2600      	movs	r6, #0
 8015328:	42a6      	cmp	r6, r4
 801532a:	d109      	bne.n	8015340 <__libc_init_array+0x24>
 801532c:	4d0b      	ldr	r5, [pc, #44]	; (801535c <__libc_init_array+0x40>)
 801532e:	4c0c      	ldr	r4, [pc, #48]	; (8015360 <__libc_init_array+0x44>)
 8015330:	f000 fe52 	bl	8015fd8 <_init>
 8015334:	1b64      	subs	r4, r4, r5
 8015336:	10a4      	asrs	r4, r4, #2
 8015338:	2600      	movs	r6, #0
 801533a:	42a6      	cmp	r6, r4
 801533c:	d105      	bne.n	801534a <__libc_init_array+0x2e>
 801533e:	bd70      	pop	{r4, r5, r6, pc}
 8015340:	f855 3b04 	ldr.w	r3, [r5], #4
 8015344:	4798      	blx	r3
 8015346:	3601      	adds	r6, #1
 8015348:	e7ee      	b.n	8015328 <__libc_init_array+0xc>
 801534a:	f855 3b04 	ldr.w	r3, [r5], #4
 801534e:	4798      	blx	r3
 8015350:	3601      	adds	r6, #1
 8015352:	e7f2      	b.n	801533a <__libc_init_array+0x1e>
 8015354:	08019104 	.word	0x08019104
 8015358:	08019104 	.word	0x08019104
 801535c:	08019104 	.word	0x08019104
 8015360:	08019108 	.word	0x08019108

08015364 <__retarget_lock_init_recursive>:
 8015364:	4770      	bx	lr

08015366 <__retarget_lock_acquire_recursive>:
 8015366:	4770      	bx	lr

08015368 <__retarget_lock_release_recursive>:
 8015368:	4770      	bx	lr

0801536a <memcpy>:
 801536a:	440a      	add	r2, r1
 801536c:	4291      	cmp	r1, r2
 801536e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015372:	d100      	bne.n	8015376 <memcpy+0xc>
 8015374:	4770      	bx	lr
 8015376:	b510      	push	{r4, lr}
 8015378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801537c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015380:	4291      	cmp	r1, r2
 8015382:	d1f9      	bne.n	8015378 <memcpy+0xe>
 8015384:	bd10      	pop	{r4, pc}
	...

08015388 <__assert_func>:
 8015388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801538a:	4614      	mov	r4, r2
 801538c:	461a      	mov	r2, r3
 801538e:	4b09      	ldr	r3, [pc, #36]	; (80153b4 <__assert_func+0x2c>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4605      	mov	r5, r0
 8015394:	68d8      	ldr	r0, [r3, #12]
 8015396:	b14c      	cbz	r4, 80153ac <__assert_func+0x24>
 8015398:	4b07      	ldr	r3, [pc, #28]	; (80153b8 <__assert_func+0x30>)
 801539a:	9100      	str	r1, [sp, #0]
 801539c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80153a0:	4906      	ldr	r1, [pc, #24]	; (80153bc <__assert_func+0x34>)
 80153a2:	462b      	mov	r3, r5
 80153a4:	f000 fc90 	bl	8015cc8 <fiprintf>
 80153a8:	f000 fd46 	bl	8015e38 <abort>
 80153ac:	4b04      	ldr	r3, [pc, #16]	; (80153c0 <__assert_func+0x38>)
 80153ae:	461c      	mov	r4, r3
 80153b0:	e7f3      	b.n	801539a <__assert_func+0x12>
 80153b2:	bf00      	nop
 80153b4:	20000078 	.word	0x20000078
 80153b8:	0801908d 	.word	0x0801908d
 80153bc:	0801909a 	.word	0x0801909a
 80153c0:	080190c8 	.word	0x080190c8

080153c4 <_free_r>:
 80153c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153c6:	2900      	cmp	r1, #0
 80153c8:	d044      	beq.n	8015454 <_free_r+0x90>
 80153ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153ce:	9001      	str	r0, [sp, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f1a1 0404 	sub.w	r4, r1, #4
 80153d6:	bfb8      	it	lt
 80153d8:	18e4      	addlt	r4, r4, r3
 80153da:	f000 f8e7 	bl	80155ac <__malloc_lock>
 80153de:	4a1e      	ldr	r2, [pc, #120]	; (8015458 <_free_r+0x94>)
 80153e0:	9801      	ldr	r0, [sp, #4]
 80153e2:	6813      	ldr	r3, [r2, #0]
 80153e4:	b933      	cbnz	r3, 80153f4 <_free_r+0x30>
 80153e6:	6063      	str	r3, [r4, #4]
 80153e8:	6014      	str	r4, [r2, #0]
 80153ea:	b003      	add	sp, #12
 80153ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153f0:	f000 b8e2 	b.w	80155b8 <__malloc_unlock>
 80153f4:	42a3      	cmp	r3, r4
 80153f6:	d908      	bls.n	801540a <_free_r+0x46>
 80153f8:	6825      	ldr	r5, [r4, #0]
 80153fa:	1961      	adds	r1, r4, r5
 80153fc:	428b      	cmp	r3, r1
 80153fe:	bf01      	itttt	eq
 8015400:	6819      	ldreq	r1, [r3, #0]
 8015402:	685b      	ldreq	r3, [r3, #4]
 8015404:	1949      	addeq	r1, r1, r5
 8015406:	6021      	streq	r1, [r4, #0]
 8015408:	e7ed      	b.n	80153e6 <_free_r+0x22>
 801540a:	461a      	mov	r2, r3
 801540c:	685b      	ldr	r3, [r3, #4]
 801540e:	b10b      	cbz	r3, 8015414 <_free_r+0x50>
 8015410:	42a3      	cmp	r3, r4
 8015412:	d9fa      	bls.n	801540a <_free_r+0x46>
 8015414:	6811      	ldr	r1, [r2, #0]
 8015416:	1855      	adds	r5, r2, r1
 8015418:	42a5      	cmp	r5, r4
 801541a:	d10b      	bne.n	8015434 <_free_r+0x70>
 801541c:	6824      	ldr	r4, [r4, #0]
 801541e:	4421      	add	r1, r4
 8015420:	1854      	adds	r4, r2, r1
 8015422:	42a3      	cmp	r3, r4
 8015424:	6011      	str	r1, [r2, #0]
 8015426:	d1e0      	bne.n	80153ea <_free_r+0x26>
 8015428:	681c      	ldr	r4, [r3, #0]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	6053      	str	r3, [r2, #4]
 801542e:	440c      	add	r4, r1
 8015430:	6014      	str	r4, [r2, #0]
 8015432:	e7da      	b.n	80153ea <_free_r+0x26>
 8015434:	d902      	bls.n	801543c <_free_r+0x78>
 8015436:	230c      	movs	r3, #12
 8015438:	6003      	str	r3, [r0, #0]
 801543a:	e7d6      	b.n	80153ea <_free_r+0x26>
 801543c:	6825      	ldr	r5, [r4, #0]
 801543e:	1961      	adds	r1, r4, r5
 8015440:	428b      	cmp	r3, r1
 8015442:	bf04      	itt	eq
 8015444:	6819      	ldreq	r1, [r3, #0]
 8015446:	685b      	ldreq	r3, [r3, #4]
 8015448:	6063      	str	r3, [r4, #4]
 801544a:	bf04      	itt	eq
 801544c:	1949      	addeq	r1, r1, r5
 801544e:	6021      	streq	r1, [r4, #0]
 8015450:	6054      	str	r4, [r2, #4]
 8015452:	e7ca      	b.n	80153ea <_free_r+0x26>
 8015454:	b003      	add	sp, #12
 8015456:	bd30      	pop	{r4, r5, pc}
 8015458:	2000d69c 	.word	0x2000d69c

0801545c <malloc>:
 801545c:	4b02      	ldr	r3, [pc, #8]	; (8015468 <malloc+0xc>)
 801545e:	4601      	mov	r1, r0
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f000 b823 	b.w	80154ac <_malloc_r>
 8015466:	bf00      	nop
 8015468:	20000078 	.word	0x20000078

0801546c <sbrk_aligned>:
 801546c:	b570      	push	{r4, r5, r6, lr}
 801546e:	4e0e      	ldr	r6, [pc, #56]	; (80154a8 <sbrk_aligned+0x3c>)
 8015470:	460c      	mov	r4, r1
 8015472:	6831      	ldr	r1, [r6, #0]
 8015474:	4605      	mov	r5, r0
 8015476:	b911      	cbnz	r1, 801547e <sbrk_aligned+0x12>
 8015478:	f000 fcce 	bl	8015e18 <_sbrk_r>
 801547c:	6030      	str	r0, [r6, #0]
 801547e:	4621      	mov	r1, r4
 8015480:	4628      	mov	r0, r5
 8015482:	f000 fcc9 	bl	8015e18 <_sbrk_r>
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	d00a      	beq.n	80154a0 <sbrk_aligned+0x34>
 801548a:	1cc4      	adds	r4, r0, #3
 801548c:	f024 0403 	bic.w	r4, r4, #3
 8015490:	42a0      	cmp	r0, r4
 8015492:	d007      	beq.n	80154a4 <sbrk_aligned+0x38>
 8015494:	1a21      	subs	r1, r4, r0
 8015496:	4628      	mov	r0, r5
 8015498:	f000 fcbe 	bl	8015e18 <_sbrk_r>
 801549c:	3001      	adds	r0, #1
 801549e:	d101      	bne.n	80154a4 <sbrk_aligned+0x38>
 80154a0:	f04f 34ff 	mov.w	r4, #4294967295
 80154a4:	4620      	mov	r0, r4
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	2000d6a0 	.word	0x2000d6a0

080154ac <_malloc_r>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	1ccd      	adds	r5, r1, #3
 80154b2:	f025 0503 	bic.w	r5, r5, #3
 80154b6:	3508      	adds	r5, #8
 80154b8:	2d0c      	cmp	r5, #12
 80154ba:	bf38      	it	cc
 80154bc:	250c      	movcc	r5, #12
 80154be:	2d00      	cmp	r5, #0
 80154c0:	4607      	mov	r7, r0
 80154c2:	db01      	blt.n	80154c8 <_malloc_r+0x1c>
 80154c4:	42a9      	cmp	r1, r5
 80154c6:	d905      	bls.n	80154d4 <_malloc_r+0x28>
 80154c8:	230c      	movs	r3, #12
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	2600      	movs	r6, #0
 80154ce:	4630      	mov	r0, r6
 80154d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80155a8 <_malloc_r+0xfc>
 80154d8:	f000 f868 	bl	80155ac <__malloc_lock>
 80154dc:	f8d8 3000 	ldr.w	r3, [r8]
 80154e0:	461c      	mov	r4, r3
 80154e2:	bb5c      	cbnz	r4, 801553c <_malloc_r+0x90>
 80154e4:	4629      	mov	r1, r5
 80154e6:	4638      	mov	r0, r7
 80154e8:	f7ff ffc0 	bl	801546c <sbrk_aligned>
 80154ec:	1c43      	adds	r3, r0, #1
 80154ee:	4604      	mov	r4, r0
 80154f0:	d155      	bne.n	801559e <_malloc_r+0xf2>
 80154f2:	f8d8 4000 	ldr.w	r4, [r8]
 80154f6:	4626      	mov	r6, r4
 80154f8:	2e00      	cmp	r6, #0
 80154fa:	d145      	bne.n	8015588 <_malloc_r+0xdc>
 80154fc:	2c00      	cmp	r4, #0
 80154fe:	d048      	beq.n	8015592 <_malloc_r+0xe6>
 8015500:	6823      	ldr	r3, [r4, #0]
 8015502:	4631      	mov	r1, r6
 8015504:	4638      	mov	r0, r7
 8015506:	eb04 0903 	add.w	r9, r4, r3
 801550a:	f000 fc85 	bl	8015e18 <_sbrk_r>
 801550e:	4581      	cmp	r9, r0
 8015510:	d13f      	bne.n	8015592 <_malloc_r+0xe6>
 8015512:	6821      	ldr	r1, [r4, #0]
 8015514:	1a6d      	subs	r5, r5, r1
 8015516:	4629      	mov	r1, r5
 8015518:	4638      	mov	r0, r7
 801551a:	f7ff ffa7 	bl	801546c <sbrk_aligned>
 801551e:	3001      	adds	r0, #1
 8015520:	d037      	beq.n	8015592 <_malloc_r+0xe6>
 8015522:	6823      	ldr	r3, [r4, #0]
 8015524:	442b      	add	r3, r5
 8015526:	6023      	str	r3, [r4, #0]
 8015528:	f8d8 3000 	ldr.w	r3, [r8]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d038      	beq.n	80155a2 <_malloc_r+0xf6>
 8015530:	685a      	ldr	r2, [r3, #4]
 8015532:	42a2      	cmp	r2, r4
 8015534:	d12b      	bne.n	801558e <_malloc_r+0xe2>
 8015536:	2200      	movs	r2, #0
 8015538:	605a      	str	r2, [r3, #4]
 801553a:	e00f      	b.n	801555c <_malloc_r+0xb0>
 801553c:	6822      	ldr	r2, [r4, #0]
 801553e:	1b52      	subs	r2, r2, r5
 8015540:	d41f      	bmi.n	8015582 <_malloc_r+0xd6>
 8015542:	2a0b      	cmp	r2, #11
 8015544:	d917      	bls.n	8015576 <_malloc_r+0xca>
 8015546:	1961      	adds	r1, r4, r5
 8015548:	42a3      	cmp	r3, r4
 801554a:	6025      	str	r5, [r4, #0]
 801554c:	bf18      	it	ne
 801554e:	6059      	strne	r1, [r3, #4]
 8015550:	6863      	ldr	r3, [r4, #4]
 8015552:	bf08      	it	eq
 8015554:	f8c8 1000 	streq.w	r1, [r8]
 8015558:	5162      	str	r2, [r4, r5]
 801555a:	604b      	str	r3, [r1, #4]
 801555c:	4638      	mov	r0, r7
 801555e:	f104 060b 	add.w	r6, r4, #11
 8015562:	f000 f829 	bl	80155b8 <__malloc_unlock>
 8015566:	f026 0607 	bic.w	r6, r6, #7
 801556a:	1d23      	adds	r3, r4, #4
 801556c:	1af2      	subs	r2, r6, r3
 801556e:	d0ae      	beq.n	80154ce <_malloc_r+0x22>
 8015570:	1b9b      	subs	r3, r3, r6
 8015572:	50a3      	str	r3, [r4, r2]
 8015574:	e7ab      	b.n	80154ce <_malloc_r+0x22>
 8015576:	42a3      	cmp	r3, r4
 8015578:	6862      	ldr	r2, [r4, #4]
 801557a:	d1dd      	bne.n	8015538 <_malloc_r+0x8c>
 801557c:	f8c8 2000 	str.w	r2, [r8]
 8015580:	e7ec      	b.n	801555c <_malloc_r+0xb0>
 8015582:	4623      	mov	r3, r4
 8015584:	6864      	ldr	r4, [r4, #4]
 8015586:	e7ac      	b.n	80154e2 <_malloc_r+0x36>
 8015588:	4634      	mov	r4, r6
 801558a:	6876      	ldr	r6, [r6, #4]
 801558c:	e7b4      	b.n	80154f8 <_malloc_r+0x4c>
 801558e:	4613      	mov	r3, r2
 8015590:	e7cc      	b.n	801552c <_malloc_r+0x80>
 8015592:	230c      	movs	r3, #12
 8015594:	603b      	str	r3, [r7, #0]
 8015596:	4638      	mov	r0, r7
 8015598:	f000 f80e 	bl	80155b8 <__malloc_unlock>
 801559c:	e797      	b.n	80154ce <_malloc_r+0x22>
 801559e:	6025      	str	r5, [r4, #0]
 80155a0:	e7dc      	b.n	801555c <_malloc_r+0xb0>
 80155a2:	605b      	str	r3, [r3, #4]
 80155a4:	deff      	udf	#255	; 0xff
 80155a6:	bf00      	nop
 80155a8:	2000d69c 	.word	0x2000d69c

080155ac <__malloc_lock>:
 80155ac:	4801      	ldr	r0, [pc, #4]	; (80155b4 <__malloc_lock+0x8>)
 80155ae:	f7ff beda 	b.w	8015366 <__retarget_lock_acquire_recursive>
 80155b2:	bf00      	nop
 80155b4:	2000d698 	.word	0x2000d698

080155b8 <__malloc_unlock>:
 80155b8:	4801      	ldr	r0, [pc, #4]	; (80155c0 <__malloc_unlock+0x8>)
 80155ba:	f7ff bed5 	b.w	8015368 <__retarget_lock_release_recursive>
 80155be:	bf00      	nop
 80155c0:	2000d698 	.word	0x2000d698

080155c4 <__sfputc_r>:
 80155c4:	6893      	ldr	r3, [r2, #8]
 80155c6:	3b01      	subs	r3, #1
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	b410      	push	{r4}
 80155cc:	6093      	str	r3, [r2, #8]
 80155ce:	da08      	bge.n	80155e2 <__sfputc_r+0x1e>
 80155d0:	6994      	ldr	r4, [r2, #24]
 80155d2:	42a3      	cmp	r3, r4
 80155d4:	db01      	blt.n	80155da <__sfputc_r+0x16>
 80155d6:	290a      	cmp	r1, #10
 80155d8:	d103      	bne.n	80155e2 <__sfputc_r+0x1e>
 80155da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155de:	f000 bb85 	b.w	8015cec <__swbuf_r>
 80155e2:	6813      	ldr	r3, [r2, #0]
 80155e4:	1c58      	adds	r0, r3, #1
 80155e6:	6010      	str	r0, [r2, #0]
 80155e8:	7019      	strb	r1, [r3, #0]
 80155ea:	4608      	mov	r0, r1
 80155ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155f0:	4770      	bx	lr

080155f2 <__sfputs_r>:
 80155f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155f4:	4606      	mov	r6, r0
 80155f6:	460f      	mov	r7, r1
 80155f8:	4614      	mov	r4, r2
 80155fa:	18d5      	adds	r5, r2, r3
 80155fc:	42ac      	cmp	r4, r5
 80155fe:	d101      	bne.n	8015604 <__sfputs_r+0x12>
 8015600:	2000      	movs	r0, #0
 8015602:	e007      	b.n	8015614 <__sfputs_r+0x22>
 8015604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015608:	463a      	mov	r2, r7
 801560a:	4630      	mov	r0, r6
 801560c:	f7ff ffda 	bl	80155c4 <__sfputc_r>
 8015610:	1c43      	adds	r3, r0, #1
 8015612:	d1f3      	bne.n	80155fc <__sfputs_r+0xa>
 8015614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015618 <_vfiprintf_r>:
 8015618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	460d      	mov	r5, r1
 801561e:	b09d      	sub	sp, #116	; 0x74
 8015620:	4614      	mov	r4, r2
 8015622:	4698      	mov	r8, r3
 8015624:	4606      	mov	r6, r0
 8015626:	b118      	cbz	r0, 8015630 <_vfiprintf_r+0x18>
 8015628:	6a03      	ldr	r3, [r0, #32]
 801562a:	b90b      	cbnz	r3, 8015630 <_vfiprintf_r+0x18>
 801562c:	f7ff fd36 	bl	801509c <__sinit>
 8015630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015632:	07d9      	lsls	r1, r3, #31
 8015634:	d405      	bmi.n	8015642 <_vfiprintf_r+0x2a>
 8015636:	89ab      	ldrh	r3, [r5, #12]
 8015638:	059a      	lsls	r2, r3, #22
 801563a:	d402      	bmi.n	8015642 <_vfiprintf_r+0x2a>
 801563c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801563e:	f7ff fe92 	bl	8015366 <__retarget_lock_acquire_recursive>
 8015642:	89ab      	ldrh	r3, [r5, #12]
 8015644:	071b      	lsls	r3, r3, #28
 8015646:	d501      	bpl.n	801564c <_vfiprintf_r+0x34>
 8015648:	692b      	ldr	r3, [r5, #16]
 801564a:	b99b      	cbnz	r3, 8015674 <_vfiprintf_r+0x5c>
 801564c:	4629      	mov	r1, r5
 801564e:	4630      	mov	r0, r6
 8015650:	f000 fb8a 	bl	8015d68 <__swsetup_r>
 8015654:	b170      	cbz	r0, 8015674 <_vfiprintf_r+0x5c>
 8015656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015658:	07dc      	lsls	r4, r3, #31
 801565a:	d504      	bpl.n	8015666 <_vfiprintf_r+0x4e>
 801565c:	f04f 30ff 	mov.w	r0, #4294967295
 8015660:	b01d      	add	sp, #116	; 0x74
 8015662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015666:	89ab      	ldrh	r3, [r5, #12]
 8015668:	0598      	lsls	r0, r3, #22
 801566a:	d4f7      	bmi.n	801565c <_vfiprintf_r+0x44>
 801566c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801566e:	f7ff fe7b 	bl	8015368 <__retarget_lock_release_recursive>
 8015672:	e7f3      	b.n	801565c <_vfiprintf_r+0x44>
 8015674:	2300      	movs	r3, #0
 8015676:	9309      	str	r3, [sp, #36]	; 0x24
 8015678:	2320      	movs	r3, #32
 801567a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801567e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015682:	2330      	movs	r3, #48	; 0x30
 8015684:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015838 <_vfiprintf_r+0x220>
 8015688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801568c:	f04f 0901 	mov.w	r9, #1
 8015690:	4623      	mov	r3, r4
 8015692:	469a      	mov	sl, r3
 8015694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015698:	b10a      	cbz	r2, 801569e <_vfiprintf_r+0x86>
 801569a:	2a25      	cmp	r2, #37	; 0x25
 801569c:	d1f9      	bne.n	8015692 <_vfiprintf_r+0x7a>
 801569e:	ebba 0b04 	subs.w	fp, sl, r4
 80156a2:	d00b      	beq.n	80156bc <_vfiprintf_r+0xa4>
 80156a4:	465b      	mov	r3, fp
 80156a6:	4622      	mov	r2, r4
 80156a8:	4629      	mov	r1, r5
 80156aa:	4630      	mov	r0, r6
 80156ac:	f7ff ffa1 	bl	80155f2 <__sfputs_r>
 80156b0:	3001      	adds	r0, #1
 80156b2:	f000 80a9 	beq.w	8015808 <_vfiprintf_r+0x1f0>
 80156b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156b8:	445a      	add	r2, fp
 80156ba:	9209      	str	r2, [sp, #36]	; 0x24
 80156bc:	f89a 3000 	ldrb.w	r3, [sl]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f000 80a1 	beq.w	8015808 <_vfiprintf_r+0x1f0>
 80156c6:	2300      	movs	r3, #0
 80156c8:	f04f 32ff 	mov.w	r2, #4294967295
 80156cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156d0:	f10a 0a01 	add.w	sl, sl, #1
 80156d4:	9304      	str	r3, [sp, #16]
 80156d6:	9307      	str	r3, [sp, #28]
 80156d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156dc:	931a      	str	r3, [sp, #104]	; 0x68
 80156de:	4654      	mov	r4, sl
 80156e0:	2205      	movs	r2, #5
 80156e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156e6:	4854      	ldr	r0, [pc, #336]	; (8015838 <_vfiprintf_r+0x220>)
 80156e8:	f7ea fdaa 	bl	8000240 <memchr>
 80156ec:	9a04      	ldr	r2, [sp, #16]
 80156ee:	b9d8      	cbnz	r0, 8015728 <_vfiprintf_r+0x110>
 80156f0:	06d1      	lsls	r1, r2, #27
 80156f2:	bf44      	itt	mi
 80156f4:	2320      	movmi	r3, #32
 80156f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156fa:	0713      	lsls	r3, r2, #28
 80156fc:	bf44      	itt	mi
 80156fe:	232b      	movmi	r3, #43	; 0x2b
 8015700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015704:	f89a 3000 	ldrb.w	r3, [sl]
 8015708:	2b2a      	cmp	r3, #42	; 0x2a
 801570a:	d015      	beq.n	8015738 <_vfiprintf_r+0x120>
 801570c:	9a07      	ldr	r2, [sp, #28]
 801570e:	4654      	mov	r4, sl
 8015710:	2000      	movs	r0, #0
 8015712:	f04f 0c0a 	mov.w	ip, #10
 8015716:	4621      	mov	r1, r4
 8015718:	f811 3b01 	ldrb.w	r3, [r1], #1
 801571c:	3b30      	subs	r3, #48	; 0x30
 801571e:	2b09      	cmp	r3, #9
 8015720:	d94d      	bls.n	80157be <_vfiprintf_r+0x1a6>
 8015722:	b1b0      	cbz	r0, 8015752 <_vfiprintf_r+0x13a>
 8015724:	9207      	str	r2, [sp, #28]
 8015726:	e014      	b.n	8015752 <_vfiprintf_r+0x13a>
 8015728:	eba0 0308 	sub.w	r3, r0, r8
 801572c:	fa09 f303 	lsl.w	r3, r9, r3
 8015730:	4313      	orrs	r3, r2
 8015732:	9304      	str	r3, [sp, #16]
 8015734:	46a2      	mov	sl, r4
 8015736:	e7d2      	b.n	80156de <_vfiprintf_r+0xc6>
 8015738:	9b03      	ldr	r3, [sp, #12]
 801573a:	1d19      	adds	r1, r3, #4
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	9103      	str	r1, [sp, #12]
 8015740:	2b00      	cmp	r3, #0
 8015742:	bfbb      	ittet	lt
 8015744:	425b      	neglt	r3, r3
 8015746:	f042 0202 	orrlt.w	r2, r2, #2
 801574a:	9307      	strge	r3, [sp, #28]
 801574c:	9307      	strlt	r3, [sp, #28]
 801574e:	bfb8      	it	lt
 8015750:	9204      	strlt	r2, [sp, #16]
 8015752:	7823      	ldrb	r3, [r4, #0]
 8015754:	2b2e      	cmp	r3, #46	; 0x2e
 8015756:	d10c      	bne.n	8015772 <_vfiprintf_r+0x15a>
 8015758:	7863      	ldrb	r3, [r4, #1]
 801575a:	2b2a      	cmp	r3, #42	; 0x2a
 801575c:	d134      	bne.n	80157c8 <_vfiprintf_r+0x1b0>
 801575e:	9b03      	ldr	r3, [sp, #12]
 8015760:	1d1a      	adds	r2, r3, #4
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	9203      	str	r2, [sp, #12]
 8015766:	2b00      	cmp	r3, #0
 8015768:	bfb8      	it	lt
 801576a:	f04f 33ff 	movlt.w	r3, #4294967295
 801576e:	3402      	adds	r4, #2
 8015770:	9305      	str	r3, [sp, #20]
 8015772:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015848 <_vfiprintf_r+0x230>
 8015776:	7821      	ldrb	r1, [r4, #0]
 8015778:	2203      	movs	r2, #3
 801577a:	4650      	mov	r0, sl
 801577c:	f7ea fd60 	bl	8000240 <memchr>
 8015780:	b138      	cbz	r0, 8015792 <_vfiprintf_r+0x17a>
 8015782:	9b04      	ldr	r3, [sp, #16]
 8015784:	eba0 000a 	sub.w	r0, r0, sl
 8015788:	2240      	movs	r2, #64	; 0x40
 801578a:	4082      	lsls	r2, r0
 801578c:	4313      	orrs	r3, r2
 801578e:	3401      	adds	r4, #1
 8015790:	9304      	str	r3, [sp, #16]
 8015792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015796:	4829      	ldr	r0, [pc, #164]	; (801583c <_vfiprintf_r+0x224>)
 8015798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801579c:	2206      	movs	r2, #6
 801579e:	f7ea fd4f 	bl	8000240 <memchr>
 80157a2:	2800      	cmp	r0, #0
 80157a4:	d03f      	beq.n	8015826 <_vfiprintf_r+0x20e>
 80157a6:	4b26      	ldr	r3, [pc, #152]	; (8015840 <_vfiprintf_r+0x228>)
 80157a8:	bb1b      	cbnz	r3, 80157f2 <_vfiprintf_r+0x1da>
 80157aa:	9b03      	ldr	r3, [sp, #12]
 80157ac:	3307      	adds	r3, #7
 80157ae:	f023 0307 	bic.w	r3, r3, #7
 80157b2:	3308      	adds	r3, #8
 80157b4:	9303      	str	r3, [sp, #12]
 80157b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b8:	443b      	add	r3, r7
 80157ba:	9309      	str	r3, [sp, #36]	; 0x24
 80157bc:	e768      	b.n	8015690 <_vfiprintf_r+0x78>
 80157be:	fb0c 3202 	mla	r2, ip, r2, r3
 80157c2:	460c      	mov	r4, r1
 80157c4:	2001      	movs	r0, #1
 80157c6:	e7a6      	b.n	8015716 <_vfiprintf_r+0xfe>
 80157c8:	2300      	movs	r3, #0
 80157ca:	3401      	adds	r4, #1
 80157cc:	9305      	str	r3, [sp, #20]
 80157ce:	4619      	mov	r1, r3
 80157d0:	f04f 0c0a 	mov.w	ip, #10
 80157d4:	4620      	mov	r0, r4
 80157d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157da:	3a30      	subs	r2, #48	; 0x30
 80157dc:	2a09      	cmp	r2, #9
 80157de:	d903      	bls.n	80157e8 <_vfiprintf_r+0x1d0>
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d0c6      	beq.n	8015772 <_vfiprintf_r+0x15a>
 80157e4:	9105      	str	r1, [sp, #20]
 80157e6:	e7c4      	b.n	8015772 <_vfiprintf_r+0x15a>
 80157e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80157ec:	4604      	mov	r4, r0
 80157ee:	2301      	movs	r3, #1
 80157f0:	e7f0      	b.n	80157d4 <_vfiprintf_r+0x1bc>
 80157f2:	ab03      	add	r3, sp, #12
 80157f4:	9300      	str	r3, [sp, #0]
 80157f6:	462a      	mov	r2, r5
 80157f8:	4b12      	ldr	r3, [pc, #72]	; (8015844 <_vfiprintf_r+0x22c>)
 80157fa:	a904      	add	r1, sp, #16
 80157fc:	4630      	mov	r0, r6
 80157fe:	f3af 8000 	nop.w
 8015802:	4607      	mov	r7, r0
 8015804:	1c78      	adds	r0, r7, #1
 8015806:	d1d6      	bne.n	80157b6 <_vfiprintf_r+0x19e>
 8015808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801580a:	07d9      	lsls	r1, r3, #31
 801580c:	d405      	bmi.n	801581a <_vfiprintf_r+0x202>
 801580e:	89ab      	ldrh	r3, [r5, #12]
 8015810:	059a      	lsls	r2, r3, #22
 8015812:	d402      	bmi.n	801581a <_vfiprintf_r+0x202>
 8015814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015816:	f7ff fda7 	bl	8015368 <__retarget_lock_release_recursive>
 801581a:	89ab      	ldrh	r3, [r5, #12]
 801581c:	065b      	lsls	r3, r3, #25
 801581e:	f53f af1d 	bmi.w	801565c <_vfiprintf_r+0x44>
 8015822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015824:	e71c      	b.n	8015660 <_vfiprintf_r+0x48>
 8015826:	ab03      	add	r3, sp, #12
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	462a      	mov	r2, r5
 801582c:	4b05      	ldr	r3, [pc, #20]	; (8015844 <_vfiprintf_r+0x22c>)
 801582e:	a904      	add	r1, sp, #16
 8015830:	4630      	mov	r0, r6
 8015832:	f000 f879 	bl	8015928 <_printf_i>
 8015836:	e7e4      	b.n	8015802 <_vfiprintf_r+0x1ea>
 8015838:	080190c9 	.word	0x080190c9
 801583c:	080190d3 	.word	0x080190d3
 8015840:	00000000 	.word	0x00000000
 8015844:	080155f3 	.word	0x080155f3
 8015848:	080190cf 	.word	0x080190cf

0801584c <_printf_common>:
 801584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015850:	4616      	mov	r6, r2
 8015852:	4699      	mov	r9, r3
 8015854:	688a      	ldr	r2, [r1, #8]
 8015856:	690b      	ldr	r3, [r1, #16]
 8015858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801585c:	4293      	cmp	r3, r2
 801585e:	bfb8      	it	lt
 8015860:	4613      	movlt	r3, r2
 8015862:	6033      	str	r3, [r6, #0]
 8015864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015868:	4607      	mov	r7, r0
 801586a:	460c      	mov	r4, r1
 801586c:	b10a      	cbz	r2, 8015872 <_printf_common+0x26>
 801586e:	3301      	adds	r3, #1
 8015870:	6033      	str	r3, [r6, #0]
 8015872:	6823      	ldr	r3, [r4, #0]
 8015874:	0699      	lsls	r1, r3, #26
 8015876:	bf42      	ittt	mi
 8015878:	6833      	ldrmi	r3, [r6, #0]
 801587a:	3302      	addmi	r3, #2
 801587c:	6033      	strmi	r3, [r6, #0]
 801587e:	6825      	ldr	r5, [r4, #0]
 8015880:	f015 0506 	ands.w	r5, r5, #6
 8015884:	d106      	bne.n	8015894 <_printf_common+0x48>
 8015886:	f104 0a19 	add.w	sl, r4, #25
 801588a:	68e3      	ldr	r3, [r4, #12]
 801588c:	6832      	ldr	r2, [r6, #0]
 801588e:	1a9b      	subs	r3, r3, r2
 8015890:	42ab      	cmp	r3, r5
 8015892:	dc26      	bgt.n	80158e2 <_printf_common+0x96>
 8015894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015898:	1e13      	subs	r3, r2, #0
 801589a:	6822      	ldr	r2, [r4, #0]
 801589c:	bf18      	it	ne
 801589e:	2301      	movne	r3, #1
 80158a0:	0692      	lsls	r2, r2, #26
 80158a2:	d42b      	bmi.n	80158fc <_printf_common+0xb0>
 80158a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158a8:	4649      	mov	r1, r9
 80158aa:	4638      	mov	r0, r7
 80158ac:	47c0      	blx	r8
 80158ae:	3001      	adds	r0, #1
 80158b0:	d01e      	beq.n	80158f0 <_printf_common+0xa4>
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	6922      	ldr	r2, [r4, #16]
 80158b6:	f003 0306 	and.w	r3, r3, #6
 80158ba:	2b04      	cmp	r3, #4
 80158bc:	bf02      	ittt	eq
 80158be:	68e5      	ldreq	r5, [r4, #12]
 80158c0:	6833      	ldreq	r3, [r6, #0]
 80158c2:	1aed      	subeq	r5, r5, r3
 80158c4:	68a3      	ldr	r3, [r4, #8]
 80158c6:	bf0c      	ite	eq
 80158c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158cc:	2500      	movne	r5, #0
 80158ce:	4293      	cmp	r3, r2
 80158d0:	bfc4      	itt	gt
 80158d2:	1a9b      	subgt	r3, r3, r2
 80158d4:	18ed      	addgt	r5, r5, r3
 80158d6:	2600      	movs	r6, #0
 80158d8:	341a      	adds	r4, #26
 80158da:	42b5      	cmp	r5, r6
 80158dc:	d11a      	bne.n	8015914 <_printf_common+0xc8>
 80158de:	2000      	movs	r0, #0
 80158e0:	e008      	b.n	80158f4 <_printf_common+0xa8>
 80158e2:	2301      	movs	r3, #1
 80158e4:	4652      	mov	r2, sl
 80158e6:	4649      	mov	r1, r9
 80158e8:	4638      	mov	r0, r7
 80158ea:	47c0      	blx	r8
 80158ec:	3001      	adds	r0, #1
 80158ee:	d103      	bne.n	80158f8 <_printf_common+0xac>
 80158f0:	f04f 30ff 	mov.w	r0, #4294967295
 80158f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f8:	3501      	adds	r5, #1
 80158fa:	e7c6      	b.n	801588a <_printf_common+0x3e>
 80158fc:	18e1      	adds	r1, r4, r3
 80158fe:	1c5a      	adds	r2, r3, #1
 8015900:	2030      	movs	r0, #48	; 0x30
 8015902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015906:	4422      	add	r2, r4
 8015908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801590c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015910:	3302      	adds	r3, #2
 8015912:	e7c7      	b.n	80158a4 <_printf_common+0x58>
 8015914:	2301      	movs	r3, #1
 8015916:	4622      	mov	r2, r4
 8015918:	4649      	mov	r1, r9
 801591a:	4638      	mov	r0, r7
 801591c:	47c0      	blx	r8
 801591e:	3001      	adds	r0, #1
 8015920:	d0e6      	beq.n	80158f0 <_printf_common+0xa4>
 8015922:	3601      	adds	r6, #1
 8015924:	e7d9      	b.n	80158da <_printf_common+0x8e>
	...

08015928 <_printf_i>:
 8015928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801592c:	7e0f      	ldrb	r7, [r1, #24]
 801592e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015930:	2f78      	cmp	r7, #120	; 0x78
 8015932:	4691      	mov	r9, r2
 8015934:	4680      	mov	r8, r0
 8015936:	460c      	mov	r4, r1
 8015938:	469a      	mov	sl, r3
 801593a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801593e:	d807      	bhi.n	8015950 <_printf_i+0x28>
 8015940:	2f62      	cmp	r7, #98	; 0x62
 8015942:	d80a      	bhi.n	801595a <_printf_i+0x32>
 8015944:	2f00      	cmp	r7, #0
 8015946:	f000 80d4 	beq.w	8015af2 <_printf_i+0x1ca>
 801594a:	2f58      	cmp	r7, #88	; 0x58
 801594c:	f000 80c0 	beq.w	8015ad0 <_printf_i+0x1a8>
 8015950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015958:	e03a      	b.n	80159d0 <_printf_i+0xa8>
 801595a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801595e:	2b15      	cmp	r3, #21
 8015960:	d8f6      	bhi.n	8015950 <_printf_i+0x28>
 8015962:	a101      	add	r1, pc, #4	; (adr r1, 8015968 <_printf_i+0x40>)
 8015964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015968:	080159c1 	.word	0x080159c1
 801596c:	080159d5 	.word	0x080159d5
 8015970:	08015951 	.word	0x08015951
 8015974:	08015951 	.word	0x08015951
 8015978:	08015951 	.word	0x08015951
 801597c:	08015951 	.word	0x08015951
 8015980:	080159d5 	.word	0x080159d5
 8015984:	08015951 	.word	0x08015951
 8015988:	08015951 	.word	0x08015951
 801598c:	08015951 	.word	0x08015951
 8015990:	08015951 	.word	0x08015951
 8015994:	08015ad9 	.word	0x08015ad9
 8015998:	08015a01 	.word	0x08015a01
 801599c:	08015a93 	.word	0x08015a93
 80159a0:	08015951 	.word	0x08015951
 80159a4:	08015951 	.word	0x08015951
 80159a8:	08015afb 	.word	0x08015afb
 80159ac:	08015951 	.word	0x08015951
 80159b0:	08015a01 	.word	0x08015a01
 80159b4:	08015951 	.word	0x08015951
 80159b8:	08015951 	.word	0x08015951
 80159bc:	08015a9b 	.word	0x08015a9b
 80159c0:	682b      	ldr	r3, [r5, #0]
 80159c2:	1d1a      	adds	r2, r3, #4
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	602a      	str	r2, [r5, #0]
 80159c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159d0:	2301      	movs	r3, #1
 80159d2:	e09f      	b.n	8015b14 <_printf_i+0x1ec>
 80159d4:	6820      	ldr	r0, [r4, #0]
 80159d6:	682b      	ldr	r3, [r5, #0]
 80159d8:	0607      	lsls	r7, r0, #24
 80159da:	f103 0104 	add.w	r1, r3, #4
 80159de:	6029      	str	r1, [r5, #0]
 80159e0:	d501      	bpl.n	80159e6 <_printf_i+0xbe>
 80159e2:	681e      	ldr	r6, [r3, #0]
 80159e4:	e003      	b.n	80159ee <_printf_i+0xc6>
 80159e6:	0646      	lsls	r6, r0, #25
 80159e8:	d5fb      	bpl.n	80159e2 <_printf_i+0xba>
 80159ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80159ee:	2e00      	cmp	r6, #0
 80159f0:	da03      	bge.n	80159fa <_printf_i+0xd2>
 80159f2:	232d      	movs	r3, #45	; 0x2d
 80159f4:	4276      	negs	r6, r6
 80159f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159fa:	485a      	ldr	r0, [pc, #360]	; (8015b64 <_printf_i+0x23c>)
 80159fc:	230a      	movs	r3, #10
 80159fe:	e012      	b.n	8015a26 <_printf_i+0xfe>
 8015a00:	682b      	ldr	r3, [r5, #0]
 8015a02:	6820      	ldr	r0, [r4, #0]
 8015a04:	1d19      	adds	r1, r3, #4
 8015a06:	6029      	str	r1, [r5, #0]
 8015a08:	0605      	lsls	r5, r0, #24
 8015a0a:	d501      	bpl.n	8015a10 <_printf_i+0xe8>
 8015a0c:	681e      	ldr	r6, [r3, #0]
 8015a0e:	e002      	b.n	8015a16 <_printf_i+0xee>
 8015a10:	0641      	lsls	r1, r0, #25
 8015a12:	d5fb      	bpl.n	8015a0c <_printf_i+0xe4>
 8015a14:	881e      	ldrh	r6, [r3, #0]
 8015a16:	4853      	ldr	r0, [pc, #332]	; (8015b64 <_printf_i+0x23c>)
 8015a18:	2f6f      	cmp	r7, #111	; 0x6f
 8015a1a:	bf0c      	ite	eq
 8015a1c:	2308      	moveq	r3, #8
 8015a1e:	230a      	movne	r3, #10
 8015a20:	2100      	movs	r1, #0
 8015a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a26:	6865      	ldr	r5, [r4, #4]
 8015a28:	60a5      	str	r5, [r4, #8]
 8015a2a:	2d00      	cmp	r5, #0
 8015a2c:	bfa2      	ittt	ge
 8015a2e:	6821      	ldrge	r1, [r4, #0]
 8015a30:	f021 0104 	bicge.w	r1, r1, #4
 8015a34:	6021      	strge	r1, [r4, #0]
 8015a36:	b90e      	cbnz	r6, 8015a3c <_printf_i+0x114>
 8015a38:	2d00      	cmp	r5, #0
 8015a3a:	d04b      	beq.n	8015ad4 <_printf_i+0x1ac>
 8015a3c:	4615      	mov	r5, r2
 8015a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015a42:	fb03 6711 	mls	r7, r3, r1, r6
 8015a46:	5dc7      	ldrb	r7, [r0, r7]
 8015a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015a4c:	4637      	mov	r7, r6
 8015a4e:	42bb      	cmp	r3, r7
 8015a50:	460e      	mov	r6, r1
 8015a52:	d9f4      	bls.n	8015a3e <_printf_i+0x116>
 8015a54:	2b08      	cmp	r3, #8
 8015a56:	d10b      	bne.n	8015a70 <_printf_i+0x148>
 8015a58:	6823      	ldr	r3, [r4, #0]
 8015a5a:	07de      	lsls	r6, r3, #31
 8015a5c:	d508      	bpl.n	8015a70 <_printf_i+0x148>
 8015a5e:	6923      	ldr	r3, [r4, #16]
 8015a60:	6861      	ldr	r1, [r4, #4]
 8015a62:	4299      	cmp	r1, r3
 8015a64:	bfde      	ittt	le
 8015a66:	2330      	movle	r3, #48	; 0x30
 8015a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a70:	1b52      	subs	r2, r2, r5
 8015a72:	6122      	str	r2, [r4, #16]
 8015a74:	f8cd a000 	str.w	sl, [sp]
 8015a78:	464b      	mov	r3, r9
 8015a7a:	aa03      	add	r2, sp, #12
 8015a7c:	4621      	mov	r1, r4
 8015a7e:	4640      	mov	r0, r8
 8015a80:	f7ff fee4 	bl	801584c <_printf_common>
 8015a84:	3001      	adds	r0, #1
 8015a86:	d14a      	bne.n	8015b1e <_printf_i+0x1f6>
 8015a88:	f04f 30ff 	mov.w	r0, #4294967295
 8015a8c:	b004      	add	sp, #16
 8015a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	f043 0320 	orr.w	r3, r3, #32
 8015a98:	6023      	str	r3, [r4, #0]
 8015a9a:	4833      	ldr	r0, [pc, #204]	; (8015b68 <_printf_i+0x240>)
 8015a9c:	2778      	movs	r7, #120	; 0x78
 8015a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	6829      	ldr	r1, [r5, #0]
 8015aa6:	061f      	lsls	r7, r3, #24
 8015aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015aac:	d402      	bmi.n	8015ab4 <_printf_i+0x18c>
 8015aae:	065f      	lsls	r7, r3, #25
 8015ab0:	bf48      	it	mi
 8015ab2:	b2b6      	uxthmi	r6, r6
 8015ab4:	07df      	lsls	r7, r3, #31
 8015ab6:	bf48      	it	mi
 8015ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8015abc:	6029      	str	r1, [r5, #0]
 8015abe:	bf48      	it	mi
 8015ac0:	6023      	strmi	r3, [r4, #0]
 8015ac2:	b91e      	cbnz	r6, 8015acc <_printf_i+0x1a4>
 8015ac4:	6823      	ldr	r3, [r4, #0]
 8015ac6:	f023 0320 	bic.w	r3, r3, #32
 8015aca:	6023      	str	r3, [r4, #0]
 8015acc:	2310      	movs	r3, #16
 8015ace:	e7a7      	b.n	8015a20 <_printf_i+0xf8>
 8015ad0:	4824      	ldr	r0, [pc, #144]	; (8015b64 <_printf_i+0x23c>)
 8015ad2:	e7e4      	b.n	8015a9e <_printf_i+0x176>
 8015ad4:	4615      	mov	r5, r2
 8015ad6:	e7bd      	b.n	8015a54 <_printf_i+0x12c>
 8015ad8:	682b      	ldr	r3, [r5, #0]
 8015ada:	6826      	ldr	r6, [r4, #0]
 8015adc:	6961      	ldr	r1, [r4, #20]
 8015ade:	1d18      	adds	r0, r3, #4
 8015ae0:	6028      	str	r0, [r5, #0]
 8015ae2:	0635      	lsls	r5, r6, #24
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	d501      	bpl.n	8015aec <_printf_i+0x1c4>
 8015ae8:	6019      	str	r1, [r3, #0]
 8015aea:	e002      	b.n	8015af2 <_printf_i+0x1ca>
 8015aec:	0670      	lsls	r0, r6, #25
 8015aee:	d5fb      	bpl.n	8015ae8 <_printf_i+0x1c0>
 8015af0:	8019      	strh	r1, [r3, #0]
 8015af2:	2300      	movs	r3, #0
 8015af4:	6123      	str	r3, [r4, #16]
 8015af6:	4615      	mov	r5, r2
 8015af8:	e7bc      	b.n	8015a74 <_printf_i+0x14c>
 8015afa:	682b      	ldr	r3, [r5, #0]
 8015afc:	1d1a      	adds	r2, r3, #4
 8015afe:	602a      	str	r2, [r5, #0]
 8015b00:	681d      	ldr	r5, [r3, #0]
 8015b02:	6862      	ldr	r2, [r4, #4]
 8015b04:	2100      	movs	r1, #0
 8015b06:	4628      	mov	r0, r5
 8015b08:	f7ea fb9a 	bl	8000240 <memchr>
 8015b0c:	b108      	cbz	r0, 8015b12 <_printf_i+0x1ea>
 8015b0e:	1b40      	subs	r0, r0, r5
 8015b10:	6060      	str	r0, [r4, #4]
 8015b12:	6863      	ldr	r3, [r4, #4]
 8015b14:	6123      	str	r3, [r4, #16]
 8015b16:	2300      	movs	r3, #0
 8015b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b1c:	e7aa      	b.n	8015a74 <_printf_i+0x14c>
 8015b1e:	6923      	ldr	r3, [r4, #16]
 8015b20:	462a      	mov	r2, r5
 8015b22:	4649      	mov	r1, r9
 8015b24:	4640      	mov	r0, r8
 8015b26:	47d0      	blx	sl
 8015b28:	3001      	adds	r0, #1
 8015b2a:	d0ad      	beq.n	8015a88 <_printf_i+0x160>
 8015b2c:	6823      	ldr	r3, [r4, #0]
 8015b2e:	079b      	lsls	r3, r3, #30
 8015b30:	d413      	bmi.n	8015b5a <_printf_i+0x232>
 8015b32:	68e0      	ldr	r0, [r4, #12]
 8015b34:	9b03      	ldr	r3, [sp, #12]
 8015b36:	4298      	cmp	r0, r3
 8015b38:	bfb8      	it	lt
 8015b3a:	4618      	movlt	r0, r3
 8015b3c:	e7a6      	b.n	8015a8c <_printf_i+0x164>
 8015b3e:	2301      	movs	r3, #1
 8015b40:	4632      	mov	r2, r6
 8015b42:	4649      	mov	r1, r9
 8015b44:	4640      	mov	r0, r8
 8015b46:	47d0      	blx	sl
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d09d      	beq.n	8015a88 <_printf_i+0x160>
 8015b4c:	3501      	adds	r5, #1
 8015b4e:	68e3      	ldr	r3, [r4, #12]
 8015b50:	9903      	ldr	r1, [sp, #12]
 8015b52:	1a5b      	subs	r3, r3, r1
 8015b54:	42ab      	cmp	r3, r5
 8015b56:	dcf2      	bgt.n	8015b3e <_printf_i+0x216>
 8015b58:	e7eb      	b.n	8015b32 <_printf_i+0x20a>
 8015b5a:	2500      	movs	r5, #0
 8015b5c:	f104 0619 	add.w	r6, r4, #25
 8015b60:	e7f5      	b.n	8015b4e <_printf_i+0x226>
 8015b62:	bf00      	nop
 8015b64:	080190da 	.word	0x080190da
 8015b68:	080190eb 	.word	0x080190eb

08015b6c <__sflush_r>:
 8015b6c:	898a      	ldrh	r2, [r1, #12]
 8015b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b72:	4605      	mov	r5, r0
 8015b74:	0710      	lsls	r0, r2, #28
 8015b76:	460c      	mov	r4, r1
 8015b78:	d458      	bmi.n	8015c2c <__sflush_r+0xc0>
 8015b7a:	684b      	ldr	r3, [r1, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dc05      	bgt.n	8015b8c <__sflush_r+0x20>
 8015b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	dc02      	bgt.n	8015b8c <__sflush_r+0x20>
 8015b86:	2000      	movs	r0, #0
 8015b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b8e:	2e00      	cmp	r6, #0
 8015b90:	d0f9      	beq.n	8015b86 <__sflush_r+0x1a>
 8015b92:	2300      	movs	r3, #0
 8015b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b98:	682f      	ldr	r7, [r5, #0]
 8015b9a:	6a21      	ldr	r1, [r4, #32]
 8015b9c:	602b      	str	r3, [r5, #0]
 8015b9e:	d032      	beq.n	8015c06 <__sflush_r+0x9a>
 8015ba0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ba2:	89a3      	ldrh	r3, [r4, #12]
 8015ba4:	075a      	lsls	r2, r3, #29
 8015ba6:	d505      	bpl.n	8015bb4 <__sflush_r+0x48>
 8015ba8:	6863      	ldr	r3, [r4, #4]
 8015baa:	1ac0      	subs	r0, r0, r3
 8015bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bae:	b10b      	cbz	r3, 8015bb4 <__sflush_r+0x48>
 8015bb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015bb2:	1ac0      	subs	r0, r0, r3
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015bba:	6a21      	ldr	r1, [r4, #32]
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	47b0      	blx	r6
 8015bc0:	1c43      	adds	r3, r0, #1
 8015bc2:	89a3      	ldrh	r3, [r4, #12]
 8015bc4:	d106      	bne.n	8015bd4 <__sflush_r+0x68>
 8015bc6:	6829      	ldr	r1, [r5, #0]
 8015bc8:	291d      	cmp	r1, #29
 8015bca:	d82b      	bhi.n	8015c24 <__sflush_r+0xb8>
 8015bcc:	4a29      	ldr	r2, [pc, #164]	; (8015c74 <__sflush_r+0x108>)
 8015bce:	410a      	asrs	r2, r1
 8015bd0:	07d6      	lsls	r6, r2, #31
 8015bd2:	d427      	bmi.n	8015c24 <__sflush_r+0xb8>
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	6062      	str	r2, [r4, #4]
 8015bd8:	04d9      	lsls	r1, r3, #19
 8015bda:	6922      	ldr	r2, [r4, #16]
 8015bdc:	6022      	str	r2, [r4, #0]
 8015bde:	d504      	bpl.n	8015bea <__sflush_r+0x7e>
 8015be0:	1c42      	adds	r2, r0, #1
 8015be2:	d101      	bne.n	8015be8 <__sflush_r+0x7c>
 8015be4:	682b      	ldr	r3, [r5, #0]
 8015be6:	b903      	cbnz	r3, 8015bea <__sflush_r+0x7e>
 8015be8:	6560      	str	r0, [r4, #84]	; 0x54
 8015bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bec:	602f      	str	r7, [r5, #0]
 8015bee:	2900      	cmp	r1, #0
 8015bf0:	d0c9      	beq.n	8015b86 <__sflush_r+0x1a>
 8015bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bf6:	4299      	cmp	r1, r3
 8015bf8:	d002      	beq.n	8015c00 <__sflush_r+0x94>
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	f7ff fbe2 	bl	80153c4 <_free_r>
 8015c00:	2000      	movs	r0, #0
 8015c02:	6360      	str	r0, [r4, #52]	; 0x34
 8015c04:	e7c0      	b.n	8015b88 <__sflush_r+0x1c>
 8015c06:	2301      	movs	r3, #1
 8015c08:	4628      	mov	r0, r5
 8015c0a:	47b0      	blx	r6
 8015c0c:	1c41      	adds	r1, r0, #1
 8015c0e:	d1c8      	bne.n	8015ba2 <__sflush_r+0x36>
 8015c10:	682b      	ldr	r3, [r5, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0c5      	beq.n	8015ba2 <__sflush_r+0x36>
 8015c16:	2b1d      	cmp	r3, #29
 8015c18:	d001      	beq.n	8015c1e <__sflush_r+0xb2>
 8015c1a:	2b16      	cmp	r3, #22
 8015c1c:	d101      	bne.n	8015c22 <__sflush_r+0xb6>
 8015c1e:	602f      	str	r7, [r5, #0]
 8015c20:	e7b1      	b.n	8015b86 <__sflush_r+0x1a>
 8015c22:	89a3      	ldrh	r3, [r4, #12]
 8015c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c28:	81a3      	strh	r3, [r4, #12]
 8015c2a:	e7ad      	b.n	8015b88 <__sflush_r+0x1c>
 8015c2c:	690f      	ldr	r7, [r1, #16]
 8015c2e:	2f00      	cmp	r7, #0
 8015c30:	d0a9      	beq.n	8015b86 <__sflush_r+0x1a>
 8015c32:	0793      	lsls	r3, r2, #30
 8015c34:	680e      	ldr	r6, [r1, #0]
 8015c36:	bf08      	it	eq
 8015c38:	694b      	ldreq	r3, [r1, #20]
 8015c3a:	600f      	str	r7, [r1, #0]
 8015c3c:	bf18      	it	ne
 8015c3e:	2300      	movne	r3, #0
 8015c40:	eba6 0807 	sub.w	r8, r6, r7
 8015c44:	608b      	str	r3, [r1, #8]
 8015c46:	f1b8 0f00 	cmp.w	r8, #0
 8015c4a:	dd9c      	ble.n	8015b86 <__sflush_r+0x1a>
 8015c4c:	6a21      	ldr	r1, [r4, #32]
 8015c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c50:	4643      	mov	r3, r8
 8015c52:	463a      	mov	r2, r7
 8015c54:	4628      	mov	r0, r5
 8015c56:	47b0      	blx	r6
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	dc06      	bgt.n	8015c6a <__sflush_r+0xfe>
 8015c5c:	89a3      	ldrh	r3, [r4, #12]
 8015c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c62:	81a3      	strh	r3, [r4, #12]
 8015c64:	f04f 30ff 	mov.w	r0, #4294967295
 8015c68:	e78e      	b.n	8015b88 <__sflush_r+0x1c>
 8015c6a:	4407      	add	r7, r0
 8015c6c:	eba8 0800 	sub.w	r8, r8, r0
 8015c70:	e7e9      	b.n	8015c46 <__sflush_r+0xda>
 8015c72:	bf00      	nop
 8015c74:	dfbffffe 	.word	0xdfbffffe

08015c78 <_fflush_r>:
 8015c78:	b538      	push	{r3, r4, r5, lr}
 8015c7a:	690b      	ldr	r3, [r1, #16]
 8015c7c:	4605      	mov	r5, r0
 8015c7e:	460c      	mov	r4, r1
 8015c80:	b913      	cbnz	r3, 8015c88 <_fflush_r+0x10>
 8015c82:	2500      	movs	r5, #0
 8015c84:	4628      	mov	r0, r5
 8015c86:	bd38      	pop	{r3, r4, r5, pc}
 8015c88:	b118      	cbz	r0, 8015c92 <_fflush_r+0x1a>
 8015c8a:	6a03      	ldr	r3, [r0, #32]
 8015c8c:	b90b      	cbnz	r3, 8015c92 <_fflush_r+0x1a>
 8015c8e:	f7ff fa05 	bl	801509c <__sinit>
 8015c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d0f3      	beq.n	8015c82 <_fflush_r+0xa>
 8015c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c9c:	07d0      	lsls	r0, r2, #31
 8015c9e:	d404      	bmi.n	8015caa <_fflush_r+0x32>
 8015ca0:	0599      	lsls	r1, r3, #22
 8015ca2:	d402      	bmi.n	8015caa <_fflush_r+0x32>
 8015ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ca6:	f7ff fb5e 	bl	8015366 <__retarget_lock_acquire_recursive>
 8015caa:	4628      	mov	r0, r5
 8015cac:	4621      	mov	r1, r4
 8015cae:	f7ff ff5d 	bl	8015b6c <__sflush_r>
 8015cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cb4:	07da      	lsls	r2, r3, #31
 8015cb6:	4605      	mov	r5, r0
 8015cb8:	d4e4      	bmi.n	8015c84 <_fflush_r+0xc>
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	059b      	lsls	r3, r3, #22
 8015cbe:	d4e1      	bmi.n	8015c84 <_fflush_r+0xc>
 8015cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cc2:	f7ff fb51 	bl	8015368 <__retarget_lock_release_recursive>
 8015cc6:	e7dd      	b.n	8015c84 <_fflush_r+0xc>

08015cc8 <fiprintf>:
 8015cc8:	b40e      	push	{r1, r2, r3}
 8015cca:	b503      	push	{r0, r1, lr}
 8015ccc:	4601      	mov	r1, r0
 8015cce:	ab03      	add	r3, sp, #12
 8015cd0:	4805      	ldr	r0, [pc, #20]	; (8015ce8 <fiprintf+0x20>)
 8015cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cd6:	6800      	ldr	r0, [r0, #0]
 8015cd8:	9301      	str	r3, [sp, #4]
 8015cda:	f7ff fc9d 	bl	8015618 <_vfiprintf_r>
 8015cde:	b002      	add	sp, #8
 8015ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ce4:	b003      	add	sp, #12
 8015ce6:	4770      	bx	lr
 8015ce8:	20000078 	.word	0x20000078

08015cec <__swbuf_r>:
 8015cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cee:	460e      	mov	r6, r1
 8015cf0:	4614      	mov	r4, r2
 8015cf2:	4605      	mov	r5, r0
 8015cf4:	b118      	cbz	r0, 8015cfe <__swbuf_r+0x12>
 8015cf6:	6a03      	ldr	r3, [r0, #32]
 8015cf8:	b90b      	cbnz	r3, 8015cfe <__swbuf_r+0x12>
 8015cfa:	f7ff f9cf 	bl	801509c <__sinit>
 8015cfe:	69a3      	ldr	r3, [r4, #24]
 8015d00:	60a3      	str	r3, [r4, #8]
 8015d02:	89a3      	ldrh	r3, [r4, #12]
 8015d04:	071a      	lsls	r2, r3, #28
 8015d06:	d525      	bpl.n	8015d54 <__swbuf_r+0x68>
 8015d08:	6923      	ldr	r3, [r4, #16]
 8015d0a:	b31b      	cbz	r3, 8015d54 <__swbuf_r+0x68>
 8015d0c:	6823      	ldr	r3, [r4, #0]
 8015d0e:	6922      	ldr	r2, [r4, #16]
 8015d10:	1a98      	subs	r0, r3, r2
 8015d12:	6963      	ldr	r3, [r4, #20]
 8015d14:	b2f6      	uxtb	r6, r6
 8015d16:	4283      	cmp	r3, r0
 8015d18:	4637      	mov	r7, r6
 8015d1a:	dc04      	bgt.n	8015d26 <__swbuf_r+0x3a>
 8015d1c:	4621      	mov	r1, r4
 8015d1e:	4628      	mov	r0, r5
 8015d20:	f7ff ffaa 	bl	8015c78 <_fflush_r>
 8015d24:	b9e0      	cbnz	r0, 8015d60 <__swbuf_r+0x74>
 8015d26:	68a3      	ldr	r3, [r4, #8]
 8015d28:	3b01      	subs	r3, #1
 8015d2a:	60a3      	str	r3, [r4, #8]
 8015d2c:	6823      	ldr	r3, [r4, #0]
 8015d2e:	1c5a      	adds	r2, r3, #1
 8015d30:	6022      	str	r2, [r4, #0]
 8015d32:	701e      	strb	r6, [r3, #0]
 8015d34:	6962      	ldr	r2, [r4, #20]
 8015d36:	1c43      	adds	r3, r0, #1
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d004      	beq.n	8015d46 <__swbuf_r+0x5a>
 8015d3c:	89a3      	ldrh	r3, [r4, #12]
 8015d3e:	07db      	lsls	r3, r3, #31
 8015d40:	d506      	bpl.n	8015d50 <__swbuf_r+0x64>
 8015d42:	2e0a      	cmp	r6, #10
 8015d44:	d104      	bne.n	8015d50 <__swbuf_r+0x64>
 8015d46:	4621      	mov	r1, r4
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7ff ff95 	bl	8015c78 <_fflush_r>
 8015d4e:	b938      	cbnz	r0, 8015d60 <__swbuf_r+0x74>
 8015d50:	4638      	mov	r0, r7
 8015d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d54:	4621      	mov	r1, r4
 8015d56:	4628      	mov	r0, r5
 8015d58:	f000 f806 	bl	8015d68 <__swsetup_r>
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d0d5      	beq.n	8015d0c <__swbuf_r+0x20>
 8015d60:	f04f 37ff 	mov.w	r7, #4294967295
 8015d64:	e7f4      	b.n	8015d50 <__swbuf_r+0x64>
	...

08015d68 <__swsetup_r>:
 8015d68:	b538      	push	{r3, r4, r5, lr}
 8015d6a:	4b2a      	ldr	r3, [pc, #168]	; (8015e14 <__swsetup_r+0xac>)
 8015d6c:	4605      	mov	r5, r0
 8015d6e:	6818      	ldr	r0, [r3, #0]
 8015d70:	460c      	mov	r4, r1
 8015d72:	b118      	cbz	r0, 8015d7c <__swsetup_r+0x14>
 8015d74:	6a03      	ldr	r3, [r0, #32]
 8015d76:	b90b      	cbnz	r3, 8015d7c <__swsetup_r+0x14>
 8015d78:	f7ff f990 	bl	801509c <__sinit>
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d82:	0718      	lsls	r0, r3, #28
 8015d84:	d422      	bmi.n	8015dcc <__swsetup_r+0x64>
 8015d86:	06d9      	lsls	r1, r3, #27
 8015d88:	d407      	bmi.n	8015d9a <__swsetup_r+0x32>
 8015d8a:	2309      	movs	r3, #9
 8015d8c:	602b      	str	r3, [r5, #0]
 8015d8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d92:	81a3      	strh	r3, [r4, #12]
 8015d94:	f04f 30ff 	mov.w	r0, #4294967295
 8015d98:	e034      	b.n	8015e04 <__swsetup_r+0x9c>
 8015d9a:	0758      	lsls	r0, r3, #29
 8015d9c:	d512      	bpl.n	8015dc4 <__swsetup_r+0x5c>
 8015d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015da0:	b141      	cbz	r1, 8015db4 <__swsetup_r+0x4c>
 8015da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015da6:	4299      	cmp	r1, r3
 8015da8:	d002      	beq.n	8015db0 <__swsetup_r+0x48>
 8015daa:	4628      	mov	r0, r5
 8015dac:	f7ff fb0a 	bl	80153c4 <_free_r>
 8015db0:	2300      	movs	r3, #0
 8015db2:	6363      	str	r3, [r4, #52]	; 0x34
 8015db4:	89a3      	ldrh	r3, [r4, #12]
 8015db6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015dba:	81a3      	strh	r3, [r4, #12]
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	6063      	str	r3, [r4, #4]
 8015dc0:	6923      	ldr	r3, [r4, #16]
 8015dc2:	6023      	str	r3, [r4, #0]
 8015dc4:	89a3      	ldrh	r3, [r4, #12]
 8015dc6:	f043 0308 	orr.w	r3, r3, #8
 8015dca:	81a3      	strh	r3, [r4, #12]
 8015dcc:	6923      	ldr	r3, [r4, #16]
 8015dce:	b94b      	cbnz	r3, 8015de4 <__swsetup_r+0x7c>
 8015dd0:	89a3      	ldrh	r3, [r4, #12]
 8015dd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015dda:	d003      	beq.n	8015de4 <__swsetup_r+0x7c>
 8015ddc:	4621      	mov	r1, r4
 8015dde:	4628      	mov	r0, r5
 8015de0:	f000 f857 	bl	8015e92 <__smakebuf_r>
 8015de4:	89a0      	ldrh	r0, [r4, #12]
 8015de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015dea:	f010 0301 	ands.w	r3, r0, #1
 8015dee:	d00a      	beq.n	8015e06 <__swsetup_r+0x9e>
 8015df0:	2300      	movs	r3, #0
 8015df2:	60a3      	str	r3, [r4, #8]
 8015df4:	6963      	ldr	r3, [r4, #20]
 8015df6:	425b      	negs	r3, r3
 8015df8:	61a3      	str	r3, [r4, #24]
 8015dfa:	6923      	ldr	r3, [r4, #16]
 8015dfc:	b943      	cbnz	r3, 8015e10 <__swsetup_r+0xa8>
 8015dfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e02:	d1c4      	bne.n	8015d8e <__swsetup_r+0x26>
 8015e04:	bd38      	pop	{r3, r4, r5, pc}
 8015e06:	0781      	lsls	r1, r0, #30
 8015e08:	bf58      	it	pl
 8015e0a:	6963      	ldrpl	r3, [r4, #20]
 8015e0c:	60a3      	str	r3, [r4, #8]
 8015e0e:	e7f4      	b.n	8015dfa <__swsetup_r+0x92>
 8015e10:	2000      	movs	r0, #0
 8015e12:	e7f7      	b.n	8015e04 <__swsetup_r+0x9c>
 8015e14:	20000078 	.word	0x20000078

08015e18 <_sbrk_r>:
 8015e18:	b538      	push	{r3, r4, r5, lr}
 8015e1a:	4d06      	ldr	r5, [pc, #24]	; (8015e34 <_sbrk_r+0x1c>)
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	4604      	mov	r4, r0
 8015e20:	4608      	mov	r0, r1
 8015e22:	602b      	str	r3, [r5, #0]
 8015e24:	f7ea ff3e 	bl	8000ca4 <_sbrk>
 8015e28:	1c43      	adds	r3, r0, #1
 8015e2a:	d102      	bne.n	8015e32 <_sbrk_r+0x1a>
 8015e2c:	682b      	ldr	r3, [r5, #0]
 8015e2e:	b103      	cbz	r3, 8015e32 <_sbrk_r+0x1a>
 8015e30:	6023      	str	r3, [r4, #0]
 8015e32:	bd38      	pop	{r3, r4, r5, pc}
 8015e34:	2000d694 	.word	0x2000d694

08015e38 <abort>:
 8015e38:	b508      	push	{r3, lr}
 8015e3a:	2006      	movs	r0, #6
 8015e3c:	f000 f88e 	bl	8015f5c <raise>
 8015e40:	2001      	movs	r0, #1
 8015e42:	f7ea feb7 	bl	8000bb4 <_exit>

08015e46 <__swhatbuf_r>:
 8015e46:	b570      	push	{r4, r5, r6, lr}
 8015e48:	460c      	mov	r4, r1
 8015e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e4e:	2900      	cmp	r1, #0
 8015e50:	b096      	sub	sp, #88	; 0x58
 8015e52:	4615      	mov	r5, r2
 8015e54:	461e      	mov	r6, r3
 8015e56:	da0d      	bge.n	8015e74 <__swhatbuf_r+0x2e>
 8015e58:	89a3      	ldrh	r3, [r4, #12]
 8015e5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015e5e:	f04f 0100 	mov.w	r1, #0
 8015e62:	bf0c      	ite	eq
 8015e64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015e68:	2340      	movne	r3, #64	; 0x40
 8015e6a:	2000      	movs	r0, #0
 8015e6c:	6031      	str	r1, [r6, #0]
 8015e6e:	602b      	str	r3, [r5, #0]
 8015e70:	b016      	add	sp, #88	; 0x58
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	466a      	mov	r2, sp
 8015e76:	f000 f879 	bl	8015f6c <_fstat_r>
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	dbec      	blt.n	8015e58 <__swhatbuf_r+0x12>
 8015e7e:	9901      	ldr	r1, [sp, #4]
 8015e80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015e84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015e88:	4259      	negs	r1, r3
 8015e8a:	4159      	adcs	r1, r3
 8015e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e90:	e7eb      	b.n	8015e6a <__swhatbuf_r+0x24>

08015e92 <__smakebuf_r>:
 8015e92:	898b      	ldrh	r3, [r1, #12]
 8015e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e96:	079d      	lsls	r5, r3, #30
 8015e98:	4606      	mov	r6, r0
 8015e9a:	460c      	mov	r4, r1
 8015e9c:	d507      	bpl.n	8015eae <__smakebuf_r+0x1c>
 8015e9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ea2:	6023      	str	r3, [r4, #0]
 8015ea4:	6123      	str	r3, [r4, #16]
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	6163      	str	r3, [r4, #20]
 8015eaa:	b002      	add	sp, #8
 8015eac:	bd70      	pop	{r4, r5, r6, pc}
 8015eae:	ab01      	add	r3, sp, #4
 8015eb0:	466a      	mov	r2, sp
 8015eb2:	f7ff ffc8 	bl	8015e46 <__swhatbuf_r>
 8015eb6:	9900      	ldr	r1, [sp, #0]
 8015eb8:	4605      	mov	r5, r0
 8015eba:	4630      	mov	r0, r6
 8015ebc:	f7ff faf6 	bl	80154ac <_malloc_r>
 8015ec0:	b948      	cbnz	r0, 8015ed6 <__smakebuf_r+0x44>
 8015ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ec6:	059a      	lsls	r2, r3, #22
 8015ec8:	d4ef      	bmi.n	8015eaa <__smakebuf_r+0x18>
 8015eca:	f023 0303 	bic.w	r3, r3, #3
 8015ece:	f043 0302 	orr.w	r3, r3, #2
 8015ed2:	81a3      	strh	r3, [r4, #12]
 8015ed4:	e7e3      	b.n	8015e9e <__smakebuf_r+0xc>
 8015ed6:	89a3      	ldrh	r3, [r4, #12]
 8015ed8:	6020      	str	r0, [r4, #0]
 8015eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ede:	81a3      	strh	r3, [r4, #12]
 8015ee0:	9b00      	ldr	r3, [sp, #0]
 8015ee2:	6163      	str	r3, [r4, #20]
 8015ee4:	9b01      	ldr	r3, [sp, #4]
 8015ee6:	6120      	str	r0, [r4, #16]
 8015ee8:	b15b      	cbz	r3, 8015f02 <__smakebuf_r+0x70>
 8015eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f000 f84e 	bl	8015f90 <_isatty_r>
 8015ef4:	b128      	cbz	r0, 8015f02 <__smakebuf_r+0x70>
 8015ef6:	89a3      	ldrh	r3, [r4, #12]
 8015ef8:	f023 0303 	bic.w	r3, r3, #3
 8015efc:	f043 0301 	orr.w	r3, r3, #1
 8015f00:	81a3      	strh	r3, [r4, #12]
 8015f02:	89a3      	ldrh	r3, [r4, #12]
 8015f04:	431d      	orrs	r5, r3
 8015f06:	81a5      	strh	r5, [r4, #12]
 8015f08:	e7cf      	b.n	8015eaa <__smakebuf_r+0x18>

08015f0a <_raise_r>:
 8015f0a:	291f      	cmp	r1, #31
 8015f0c:	b538      	push	{r3, r4, r5, lr}
 8015f0e:	4604      	mov	r4, r0
 8015f10:	460d      	mov	r5, r1
 8015f12:	d904      	bls.n	8015f1e <_raise_r+0x14>
 8015f14:	2316      	movs	r3, #22
 8015f16:	6003      	str	r3, [r0, #0]
 8015f18:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1c:	bd38      	pop	{r3, r4, r5, pc}
 8015f1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015f20:	b112      	cbz	r2, 8015f28 <_raise_r+0x1e>
 8015f22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f26:	b94b      	cbnz	r3, 8015f3c <_raise_r+0x32>
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f000 f853 	bl	8015fd4 <_getpid_r>
 8015f2e:	462a      	mov	r2, r5
 8015f30:	4601      	mov	r1, r0
 8015f32:	4620      	mov	r0, r4
 8015f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f38:	f000 b83a 	b.w	8015fb0 <_kill_r>
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d00a      	beq.n	8015f56 <_raise_r+0x4c>
 8015f40:	1c59      	adds	r1, r3, #1
 8015f42:	d103      	bne.n	8015f4c <_raise_r+0x42>
 8015f44:	2316      	movs	r3, #22
 8015f46:	6003      	str	r3, [r0, #0]
 8015f48:	2001      	movs	r0, #1
 8015f4a:	e7e7      	b.n	8015f1c <_raise_r+0x12>
 8015f4c:	2400      	movs	r4, #0
 8015f4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f52:	4628      	mov	r0, r5
 8015f54:	4798      	blx	r3
 8015f56:	2000      	movs	r0, #0
 8015f58:	e7e0      	b.n	8015f1c <_raise_r+0x12>
	...

08015f5c <raise>:
 8015f5c:	4b02      	ldr	r3, [pc, #8]	; (8015f68 <raise+0xc>)
 8015f5e:	4601      	mov	r1, r0
 8015f60:	6818      	ldr	r0, [r3, #0]
 8015f62:	f7ff bfd2 	b.w	8015f0a <_raise_r>
 8015f66:	bf00      	nop
 8015f68:	20000078 	.word	0x20000078

08015f6c <_fstat_r>:
 8015f6c:	b538      	push	{r3, r4, r5, lr}
 8015f6e:	4d07      	ldr	r5, [pc, #28]	; (8015f8c <_fstat_r+0x20>)
 8015f70:	2300      	movs	r3, #0
 8015f72:	4604      	mov	r4, r0
 8015f74:	4608      	mov	r0, r1
 8015f76:	4611      	mov	r1, r2
 8015f78:	602b      	str	r3, [r5, #0]
 8015f7a:	f7ea fe6a 	bl	8000c52 <_fstat>
 8015f7e:	1c43      	adds	r3, r0, #1
 8015f80:	d102      	bne.n	8015f88 <_fstat_r+0x1c>
 8015f82:	682b      	ldr	r3, [r5, #0]
 8015f84:	b103      	cbz	r3, 8015f88 <_fstat_r+0x1c>
 8015f86:	6023      	str	r3, [r4, #0]
 8015f88:	bd38      	pop	{r3, r4, r5, pc}
 8015f8a:	bf00      	nop
 8015f8c:	2000d694 	.word	0x2000d694

08015f90 <_isatty_r>:
 8015f90:	b538      	push	{r3, r4, r5, lr}
 8015f92:	4d06      	ldr	r5, [pc, #24]	; (8015fac <_isatty_r+0x1c>)
 8015f94:	2300      	movs	r3, #0
 8015f96:	4604      	mov	r4, r0
 8015f98:	4608      	mov	r0, r1
 8015f9a:	602b      	str	r3, [r5, #0]
 8015f9c:	f7ea fe69 	bl	8000c72 <_isatty>
 8015fa0:	1c43      	adds	r3, r0, #1
 8015fa2:	d102      	bne.n	8015faa <_isatty_r+0x1a>
 8015fa4:	682b      	ldr	r3, [r5, #0]
 8015fa6:	b103      	cbz	r3, 8015faa <_isatty_r+0x1a>
 8015fa8:	6023      	str	r3, [r4, #0]
 8015faa:	bd38      	pop	{r3, r4, r5, pc}
 8015fac:	2000d694 	.word	0x2000d694

08015fb0 <_kill_r>:
 8015fb0:	b538      	push	{r3, r4, r5, lr}
 8015fb2:	4d07      	ldr	r5, [pc, #28]	; (8015fd0 <_kill_r+0x20>)
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	4608      	mov	r0, r1
 8015fba:	4611      	mov	r1, r2
 8015fbc:	602b      	str	r3, [r5, #0]
 8015fbe:	f7ea fde7 	bl	8000b90 <_kill>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	d102      	bne.n	8015fcc <_kill_r+0x1c>
 8015fc6:	682b      	ldr	r3, [r5, #0]
 8015fc8:	b103      	cbz	r3, 8015fcc <_kill_r+0x1c>
 8015fca:	6023      	str	r3, [r4, #0]
 8015fcc:	bd38      	pop	{r3, r4, r5, pc}
 8015fce:	bf00      	nop
 8015fd0:	2000d694 	.word	0x2000d694

08015fd4 <_getpid_r>:
 8015fd4:	f7ea bdd4 	b.w	8000b80 <_getpid>

08015fd8 <_init>:
 8015fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fda:	bf00      	nop
 8015fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fde:	bc08      	pop	{r3}
 8015fe0:	469e      	mov	lr, r3
 8015fe2:	4770      	bx	lr

08015fe4 <_fini>:
 8015fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe6:	bf00      	nop
 8015fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fea:	bc08      	pop	{r3}
 8015fec:	469e      	mov	lr, r3
 8015fee:	4770      	bx	lr
