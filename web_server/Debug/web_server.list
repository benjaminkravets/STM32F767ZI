
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000310c  08015d70  08015d70  00025d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e7c  08018e7c  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  08018e7c  08018e7c  00028e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e84  08018e84  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e84  08018e84  00028e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e88  08018e88  00028e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08018e8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08018f08  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08018fa8  0003011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d4e0  200001bc  08019048  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d69c  08019048  0003d69c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301ea  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f6a3  00000000  00000000  0003022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007880  00000000  00000000  0005f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000021d8  00000000  00000000  00067150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ab4  00000000  00000000  00069328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011236  00000000  00000000  0006addc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036cf5  00000000  00000000  0007c012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00119282  00000000  00000000  000b2d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009424  00000000  00000000  001cbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001d53b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001bc 	.word	0x200001bc
 800021c:	00000000 	.word	0x00000000
 8000220:	08015d58 	.word	0x08015d58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c0 	.word	0x200001c0
 800023c:	08015d58 	.word	0x08015d58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbc9 	bl	8000d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81a 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8e8 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f888 	bl	8000700 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f8b6 	bl	8000760 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f4:	f004 fa4a 	bl	8004a8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x34>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x38>)
 80005fe:	f004 fad7 	bl	8004bb0 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <main+0x3c>)
 8000606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f004 fa74 	bl	8004af4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
 800060e:	bf00      	nop
 8000610:	08018c20 	.word	0x08018c20
 8000614:	08000901 	.word	0x08000901
 8000618:	20000768 	.word	0x20000768

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f014 fc91 	bl	8014f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f001 fe62 	bl	8002308 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <SystemClock_Config+0xdc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xdc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a25      	ldr	r2, [pc, #148]	; (80006fc <SystemClock_Config+0xe0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xe0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000690:	2360      	movs	r3, #96	; 0x60
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fe8f 	bl	80023c8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f930 	bl	8000914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b4:	f001 fe38 	bl	8002328 <HAL_PWREx_EnableOverDrive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006be:	f000 f929 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2103      	movs	r1, #3
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f920 	bl	8002924 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ea:	f000 f913 	bl	8000914 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART3_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000744:	f002 ff3c 	bl	80035c0 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8e1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001d8 	.word	0x200001d8
 800075c:	40004800 	.word	0x40004800

08000760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800076a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2206      	movs	r2, #6
 8000770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2201      	movs	r2, #1
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	f001 fc67 	bl	8002076 <HAL_PCD_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f8b1 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000260 	.word	0x20000260

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a46      	ldr	r2, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a40      	ldr	r2, [pc, #256]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a3a      	ldr	r2, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a34      	ldr	r2, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x138>)
 800086a:	f001 fbeb 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_GPIO_Init+0x13c>)
 8000874:	f001 fbe6 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <MX_GPIO_Init+0x140>)
 8000890:	f001 fa2c 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0x138>)
 80008ae:	f001 fa1d 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0x13c>)
 80008ca:	f001 fa0f 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 fa03 	bl	8001cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40020800 	.word	0x40020800

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 fdb6 	bl	8004478 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f004 f9f5 	bl	8004cfc <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDefaultTask+0xc>

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fb48 	bl	8000ff2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ae      	sub	sp, #184	; 0xb8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2290      	movs	r2, #144	; 0x90
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f014 fade 	bl	8014f52 <memset>
  if(huart->Instance==USART3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13c      	bne.n	8000a1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f9de 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ba:	f7ff ffab 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0xbc>)
 8000a16:	f001 f969 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	37b8      	adds	r7, #184	; 0xb8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2290      	movs	r2, #144	; 0x90
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f014 fa7e 	bl	8014f52 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5e:	d159      	bne.n	8000b14 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f97d 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a7c:	f7ff ff4a 	bl	8000914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a98:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <HAL_PCD_MspInit+0xf0>)
 8000ac0:	f001 f914 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4810      	ldr	r0, [pc, #64]	; (8000b20 <HAL_PCD_MspInit+0xf0>)
 8000ae0:	f001 f904 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	6353      	str	r3, [r2, #52]	; 0x34
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_PCD_MspInit+0xec>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	37b8      	adds	r7, #184	; 0xb8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f94c 	bl	8000df0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b58:	f006 fd8e 	bl	8007678 <xTaskGetSchedulerState>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d001      	beq.n	8000b66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b62:	f007 fc71 	bl	8008448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_kill>:

int _kill(int pid, int sig)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_kill+0x20>)
 8000b88:	2216      	movs	r2, #22
 8000b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	2000d68c 	.word	0x2000d68c

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe5 	bl	8000b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
  }

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
  }
  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d205      	bcs.n	8000ccc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x6c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20080000 	.word	0x20080000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	2000076c 	.word	0x2000076c
 8000cf8:	2000d6a0 	.word	0x2000d6a0
 8000cfc:	2000d68c 	.word	0x2000d68c

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f014 f9a3 	bl	801509c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fc41 	bl	80005dc <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d68:	08018e8c 	.word	0x08018e8c
  ldr r2, =_sbss
 8000d6c:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8000d70:	2000d69c 	.word	0x2000d69c

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>

08000d76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f92e 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d80:	200f      	movs	r0, #15
 8000d82:	f000 f805 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d86:	f7ff fdcb 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f93b 	bl	800102a <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f911 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000770 	.word	0x20000770

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000770 	.word	0x20000770

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	05fa0000 	.word	0x05fa0000

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff47 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5c 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e06a      	b.n	800112c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800105c:	2b00      	cmp	r3, #0
 800105e:	d106      	bne.n	800106e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2223      	movs	r2, #35	; 0x23
 8001064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f867 	bl	800113c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <HAL_ETH_Init+0xf0>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a30      	ldr	r2, [pc, #192]	; (8001134 <HAL_ETH_Init+0xf0>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_ETH_Init+0xf0>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_ETH_Init+0xf4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <HAL_ETH_Init+0xf4>)
 800108c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001090:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_ETH_Init+0xf4>)
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4927      	ldr	r1, [pc, #156]	; (8001138 <HAL_ETH_Init+0xf4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_ETH_Init+0xf4>)
 80010a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff feac 	bl	8000e18 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c2:	e011      	b.n	80010e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010c4:	f7ff fea8 	bl	8000e18 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d2:	d909      	bls.n	80010e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2204      	movs	r2, #4
 80010d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	22e0      	movs	r2, #224	; 0xe0
 80010e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e4      	bne.n	80010c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fb52 	bl	80017a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fbf9 	bl	80018f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fc4f 	bl	80019aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fbb7 	bl	8001888 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2210      	movs	r2, #16
 8001126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800

0800113c <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e045      	b.n	8001200 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117a:	2b23      	cmp	r3, #35	; 0x23
 800117c:	d13f      	bne.n	80011fe <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001186:	2201      	movs	r2, #1
 8001188:	6839      	ldr	r1, [r7, #0]
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fc7a 	bl	8001a84 <ETH_Prepare_Tx_Descriptors>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119c:	f043 0202 	orr.w	r2, r3, #2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e02a      	b.n	8001200 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011aa:	f3bf 8f4f 	dsb	sy
}
 80011ae:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d904      	bls.n	80011cc <HAL_ETH_Transmit_IT+0x7c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	1f1a      	subs	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00d      	beq.n	80011fa <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e6:	461a      	mov	r2, r3
 80011e8:	2304      	movs	r3, #4
 80011ea:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f4:	461a      	mov	r2, r3
 80011f6:	2300      	movs	r3, #0
 80011f8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
  }
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0a8      	b.n	8001386 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800123a:	2b23      	cmp	r3, #35	; 0x23
 800123c:	d001      	beq.n	8001242 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0a1      	b.n	8001386 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	3212      	adds	r2, #18
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001258:	f1c3 0304 	rsb	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800125e:	e06a      	b.n	8001336 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d007      	beq.n	800127c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <HAL_ETH_ReadData+0x88>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d040      	beq.n	8001312 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0c1b      	lsrs	r3, r3, #16
 80012c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012c4:	3b04      	subs	r3, #4
 80012c6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80012ec:	461a      	mov	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f003 fb77 	bl	80049e4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	441a      	add	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d902      	bls.n	8001324 <HAL_ETH_ReadData+0x11c>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b04      	subs	r3, #4
 8001322:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	3212      	adds	r2, #18
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800133a:	2b00      	cmp	r3, #0
 800133c:	db06      	blt.n	800134c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	429a      	cmp	r2, r3
 8001344:	d202      	bcs.n	800134c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d089      	beq.n	8001260 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	441a      	add	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f815 	bl	8001390 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	e000      	b.n	8001386 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800139c:	2301      	movs	r3, #1
 800139e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	3212      	adds	r2, #18
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013b6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80013b8:	e040      	b.n	800143c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d112      	bne.n	80013e8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fadc 	bl	8004984 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	74fb      	strb	r3, [r7, #19]
 80013d6:	e007      	b.n	80013e8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	461a      	mov	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	461a      	mov	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d026      	beq.n	800143c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <ETH_UpdateDescriptor+0xe4>)
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	e003      	b.n	8001406 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001404:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001406:	f3bf 8f5f 	dmb	sy
}
 800140a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d902      	bls.n	800142a <ETH_UpdateDescriptor+0x9a>
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3b04      	subs	r3, #4
 8001428:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	3212      	adds	r2, #18
 8001430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001434:	617b      	str	r3, [r7, #20]
      desccount--;
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	3b01      	subs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <ETH_UpdateDescriptor+0xb8>
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1b8      	bne.n	80013ba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	429a      	cmp	r2, r3
 8001450:	d00c      	beq.n	800146c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	461a      	mov	r2, r3
 800145c:	2300      	movs	r3, #0
 800145e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	80004600 	.word	0x80004600

08001478 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3318      	adds	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001496:	e03f      	b.n	8001518 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001498:	2301      	movs	r3, #1
 800149a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	3304      	adds	r3, #4
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	3301      	adds	r3, #1
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d028      	beq.n	8001518 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68d9      	ldr	r1, [r3, #12]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db1b      	blt.n	8001514 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	3304      	adds	r3, #4
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fabd 	bl	8004a68 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3304      	adds	r3, #4
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	3301      	adds	r3, #1
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
 8001512:	e001      	b.n	8001518 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_ETH_ReleaseTxPacket+0xac>
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1b9      	bne.n	8001498 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <ETH_SetMACConfig+0x15c>)
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7c1b      	ldrb	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <ETH_SetMACConfig+0x28>
 8001552:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001556:	e000      	b.n	800155a <ETH_SetMACConfig+0x2a>
 8001558:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7c5b      	ldrb	r3, [r3, #17]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <ETH_SetMACConfig+0x38>
 8001562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001566:	e000      	b.n	800156a <ETH_SetMACConfig+0x3a>
 8001568:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800156a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7fdb      	ldrb	r3, [r3, #31]
 8001576:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001578:	431a      	orrs	r2, r3
                        macconf->Speed |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800157e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	7f92      	ldrb	r2, [r2, #30]
 8001584:	2a00      	cmp	r2, #0
 8001586:	d102      	bne.n	800158e <ETH_SetMACConfig+0x5e>
 8001588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0x60>
 800158e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	7f1b      	ldrb	r3, [r3, #28]
 8001596:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001598:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800159e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d102      	bne.n	80015b8 <ETH_SetMACConfig+0x88>
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x8a>
 80015b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	7bdb      	ldrb	r3, [r3, #15]
 80015c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fc20 	bl	8000e30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001616:	2a00      	cmp	r2, #0
 8001618:	d101      	bne.n	800161e <ETH_SetMACConfig+0xee>
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	e000      	b.n	8001620 <ETH_SetMACConfig+0xf0>
 800161e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001620:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800162e:	2a01      	cmp	r2, #1
 8001630:	d101      	bne.n	8001636 <ETH_SetMACConfig+0x106>
 8001632:	2208      	movs	r2, #8
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x108>
 8001636:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001638:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001640:	2a01      	cmp	r2, #1
 8001642:	d101      	bne.n	8001648 <ETH_SetMACConfig+0x118>
 8001644:	2204      	movs	r2, #4
 8001646:	e000      	b.n	800164a <ETH_SetMACConfig+0x11a>
 8001648:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800164a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001652:	2a01      	cmp	r2, #1
 8001654:	d101      	bne.n	800165a <ETH_SetMACConfig+0x12a>
 8001656:	2202      	movs	r2, #2
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x12c>
 800165a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800165c:	4313      	orrs	r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff fbdb 	bl	8000e30 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	ff20810f 	.word	0xff20810f

08001690 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <ETH_SetDMAConfig+0x110>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <ETH_SetDMAConfig+0x2c>
 80016b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ba:	e000      	b.n	80016be <ETH_SetDMAConfig+0x2e>
 80016bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7b5b      	ldrb	r3, [r3, #13]
 80016c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	7f52      	ldrb	r2, [r2, #29]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d102      	bne.n	80016d4 <ETH_SetDMAConfig+0x44>
 80016ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d2:	e000      	b.n	80016d6 <ETH_SetDMAConfig+0x46>
 80016d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7b9b      	ldrb	r3, [r3, #14]
 80016dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7f1b      	ldrb	r3, [r3, #28]
 80016ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	7f9b      	ldrb	r3, [r3, #30]
 80016f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001702:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001704:	4313      	orrs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fb82 	bl	8000e30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001744:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800174a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001750:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001758:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800175a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001762:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001768:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001776:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fb53 	bl	8000e30 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	f8de3f23 	.word	0xf8de3f23

080017a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a6      	sub	sp, #152	; 0x98
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e0:	2300      	movs	r3, #0
 80017e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800180c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001810:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fe86 	bl	8001530 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001824:	2301      	movs	r3, #1
 8001826:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001828:	2301      	movs	r3, #1
 800182a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001832:	2301      	movs	r3, #1
 8001834:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001850:	2301      	movs	r3, #1
 8001852:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001858:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800185a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800185e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff08 	bl	8001690 <ETH_SetDMAConfig>
}
 8001880:	bf00      	nop
 8001882:	3798      	adds	r7, #152	; 0x98
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3305      	adds	r3, #5
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	3204      	adds	r2, #4
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <ETH_MACAddressConfig+0x68>)
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3303      	adds	r3, #3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3302      	adds	r3, #2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3301      	adds	r3, #1
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4313      	orrs	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <ETH_MACAddressConfig+0x6c>)
 80018da:	4413      	add	r3, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40028040 	.word	0x40028040
 80018f4:	40028044 	.word	0x40028044

080018f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e03e      	b.n	8001984 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68d9      	ldr	r1, [r3, #12]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	3206      	adds	r2, #6
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d80c      	bhi.n	8001968 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68d9      	ldr	r1, [r3, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e004      	b.n	8001972 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d9bd      	bls.n	8001906 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199c:	611a      	str	r2, [r3, #16]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e046      	b.n	8001a46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80019fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	3212      	adds	r2, #18
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d80c      	bhi.n	8001a36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6919      	ldr	r1, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	e004      	b.n	8001a40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d9b5      	bls.n	80019b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	60da      	str	r2, [r3, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08d      	sub	sp, #52	; 0x34
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3318      	adds	r3, #24
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aae:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ac6:	d007      	beq.n	8001ad8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	3304      	adds	r3, #4
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0ff      	b.n	8001cdc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	3301      	adds	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	6852      	ldr	r2, [r2, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b5e:	f3bf 8f5f 	dmb	sy
}
 8001b62:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001b70:	e082      	b.n	8001c78 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e005      	b.n	8001b9e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d902      	bls.n	8001bb0 <ETH_Prepare_Tx_Descriptors+0x12c>
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	3b04      	subs	r3, #4
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bd2:	d007      	beq.n	8001be4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	3304      	adds	r3, #4
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d029      	beq.n	8001c38 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf6:	e019      	b.n	8001c2c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8001bf8:	f3bf 8f5f 	dmb	sy
}
 8001bfc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d902      	bls.n	8001c1c <ETH_Prepare_Tx_Descriptors+0x198>
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	3b04      	subs	r3, #4
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	3301      	adds	r3, #1
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3e1      	bcc.n	8001bf8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e051      	b.n	8001cdc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	6852      	ldr	r2, [r2, #4]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c66:	f3bf 8f5f 	dmb	sy
}
 8001c6a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f af78 	bne.w	8001b72 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e005      	b.n	8001ca2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb2:	6979      	ldr	r1, [r7, #20]
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	4413      	add	r3, r2
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd6:	b662      	cpsie	i
}
 8001cd8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3734      	adds	r7, #52	; 0x34
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	ffffe000 	.word	0xffffe000

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e175      	b.n	8001ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8164 	bne.w	8001ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x56>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d037      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_GPIO_Init+0x330>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x236>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x338>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x232>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x33c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a53      	ldr	r2, [pc, #332]	; (800202c <HAL_GPIO_Init+0x340>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x344>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x348>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x34c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x350>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e012      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e010      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae86 	bls.w	8001d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40022000 	.word	0x40022000
 800203c:	40022400 	.word	0x40022400
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002078:	b08f      	sub	sp, #60	; 0x3c
 800207a:	af0a      	add	r7, sp, #40	; 0x28
 800207c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e116      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fcc4 	bl	8000a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 ff3a 	bl	8003f40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	687e      	ldr	r6, [r7, #4]
 80020d4:	466d      	mov	r5, sp
 80020d6:	f106 0410 	add.w	r4, r6, #16
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ea:	1d33      	adds	r3, r6, #4
 80020ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	f001 fece 	bl	8003e90 <USB_CoreInit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0d7      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f001 ff28 	bl	8003f62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e04a      	b.n	80021ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	333d      	adds	r3, #61	; 0x3d
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	b298      	uxth	r0, r3
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3344      	adds	r3, #68	; 0x44
 8002154:	4602      	mov	r2, r0
 8002156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3348      	adds	r3, #72	; 0x48
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	334c      	adds	r3, #76	; 0x4c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3354      	adds	r3, #84	; 0x54
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	3301      	adds	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3af      	bcc.n	8002118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e044      	b.n	8002248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	3301      	adds	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3b5      	bcc.n	80021be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	687e      	ldr	r6, [r7, #4]
 800225a:	466d      	mov	r5, sp
 800225c:	f106 0410 	add.w	r4, r6, #16
 8002260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002270:	1d33      	adds	r3, r6, #4
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f001 fec1 	bl	8003ffc <USB_DevInit>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e014      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f80b 	bl	80022c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 f87f 	bl	80043b2 <USB_DevDisconnect>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_PCDEx_ActivateLPM+0x44>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	10000003 	.word	0x10000003

08002308 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000

08002328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002356:	f7fe fd5f 	bl	8000e18 <HAL_GetTick>
 800235a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800235c:	e009      	b.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800235e:	f7fe fd5b 	bl	8000e18 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800236c:	d901      	bls.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e022      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d1ee      	bne.n	800235e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7fe fd44 	bl	8000e18 <HAL_GetTick>
 8002390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002392:	e009      	b.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002394:	f7fe fd40 	bl	8000e18 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e007      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023b4:	d1ee      	bne.n	8002394 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e29b      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b93      	ldr	r3, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
 8002404:	4b90      	ldr	r3, [pc, #576]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b8d      	ldr	r3, [pc, #564]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d06c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x130>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d168      	bne.n	80024f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e275      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x7a>
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x9c>
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7b      	ldr	r2, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xc0>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fcb6 	bl	8000e18 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fcb2 	bl	8000e18 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e229      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fca2 	bl	8000e18 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fc9e 	bl	8000e18 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e215      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d069      	beq.n	80025da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1e9      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	493d      	ldr	r1, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e040      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fc54 	bl	8000e18 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe fc50 	bl	8000e18 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1c7      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e018      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fc30 	bl	8000e18 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fc2c 	bl	8000e18 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1a3      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d038      	beq.n	8002658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc0d 	bl	8000e18 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fc09 	bl	8000e18 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e180      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x23a>
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fbf3 	bl	8000e18 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe fbef 	bl	8000e18 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d903      	bls.n	800264c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e166      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
 8002648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a4 	beq.w	80027ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a88      	ldr	r2, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800269a:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7f      	ldr	r2, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fbb7 	bl	8000e18 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fbb3 	bl	8000e18 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e12a      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x31a>
 80026d4:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x33c>
 80026ea:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x35e>
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a61      	ldr	r2, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fb67 	bl	8000e18 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fb63 	bl	8000e18 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0d8      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x386>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fb51 	bl	8000e18 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fb4d 	bl	8000e18 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0c2      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ae 	beq.w	8002914 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d06d      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d14b      	bne.n	8002864 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fb1e 	bl	8000e18 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fb1a 	bl	8000e18 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e091      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe faec 	bl	8000e18 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fae8 	bl	8000e18 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e05f      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x47c>
 8002862:	e057      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fad2 	bl	8000e18 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe face 	bl	8000e18 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e045      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x4b0>
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_OscConfig+0x558>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d030      	beq.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d129      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d122      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d119      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10f      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4965      	ldr	r1, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7fe f9fe 	bl	8000e18 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe f9fa 	bl	8000e18 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 020f 	bic.w	r2, r3, #15
 8002a5e:	4922      	ldr	r1, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f95a 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08018c44 	.word	0x08018c44
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	; 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c0c:	f7fd fb68 	bl	80002e0 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fb0e 	bl	80002e0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	; 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08018c54 	.word	0x08018c54

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08018c54 	.word	0x08018c54

08002d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d98:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a68      	ldr	r2, [pc, #416]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	4964      	ldr	r1, [pc, #400]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	4959      	ldr	r1, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de8:	d101      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e06:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	494a      	ldr	r1, [pc, #296]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e24:	d101      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e32:	2301      	movs	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 808b 	beq.w	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fd ffce 	bl	8000e18 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fd ffca 	bl	8000e18 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e38f      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9e:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d035      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d02e      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d114      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ff92 	bl	8000e18 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fd ff8e 	bl	8000e18 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e351      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ee      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f26:	d111      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f36:	400b      	ands	r3, r1
 8002f38:	4901      	ldr	r1, [pc, #4]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000
 8002f48:	0ffffcff 	.word	0x0ffffcff
 8002f4c:	4bac      	ldr	r3, [pc, #688]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4aab      	ldr	r2, [pc, #684]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	4ba9      	ldr	r3, [pc, #676]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	49a6      	ldr	r1, [pc, #664]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f76:	4ba2      	ldr	r3, [pc, #648]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7c:	4aa0      	ldr	r2, [pc, #640]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f86:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	499b      	ldr	r1, [pc, #620]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa4:	4b96      	ldr	r3, [pc, #600]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb2:	4993      	ldr	r1, [pc, #588]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fc6:	4b8e      	ldr	r3, [pc, #568]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd4:	498a      	ldr	r1, [pc, #552]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fe8:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff6:	4982      	ldr	r1, [pc, #520]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800300a:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4979      	ldr	r1, [pc, #484]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302c:	4b74      	ldr	r3, [pc, #464]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4971      	ldr	r1, [pc, #452]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f023 020c 	bic.w	r2, r3, #12
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	4968      	ldr	r1, [pc, #416]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003070:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4960      	ldr	r1, [pc, #384]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003092:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	4957      	ldr	r1, [pc, #348]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b4:	4b52      	ldr	r3, [pc, #328]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	494f      	ldr	r1, [pc, #316]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4946      	ldr	r1, [pc, #280]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	493e      	ldr	r1, [pc, #248]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800313c:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314a:	492d      	ldr	r1, [pc, #180]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316c:	4924      	ldr	r1, [pc, #144]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d0:	490b      	ldr	r1, [pc, #44]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f4:	4902      	ldr	r1, [pc, #8]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031fc:	e002      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003210:	4b8a      	ldr	r3, [pc, #552]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003216:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	4986      	ldr	r1, [pc, #536]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003234:	4b81      	ldr	r3, [pc, #516]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	497d      	ldr	r1, [pc, #500]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d006      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80d6 	beq.w	800340c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003260:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fd fdd4 	bl	8000e18 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003274:	f7fd fdd0 	bl	8000e18 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e195      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11d      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ba:	0e1b      	lsrs	r3, r3, #24
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	019a      	lsls	r2, r3, #6
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	4958      	ldr	r1, [pc, #352]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02e      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d129      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800330e:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800331c:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003322:	0f1b      	lsrs	r3, r3, #28
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	019a      	lsls	r2, r3, #6
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	071b      	lsls	r3, r3, #28
 8003342:	493e      	ldr	r1, [pc, #248]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	f023 021f 	bic.w	r2, r3, #31
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	3b01      	subs	r3, #1
 800335a:	4938      	ldr	r1, [pc, #224]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01d      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800336e:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003374:	0e1b      	lsrs	r3, r3, #24
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800337c:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003382:	0f1b      	lsrs	r3, r3, #28
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	019a      	lsls	r2, r3, #6
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	071b      	lsls	r3, r3, #28
 80033a2:	4926      	ldr	r1, [pc, #152]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d011      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	491a      	ldr	r1, [pc, #104]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e6:	f7fd fd17 	bl	8000e18 <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033ee:	f7fd fd13 	bl	8000e18 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 80ce 	bne.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a08      	ldr	r2, [pc, #32]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fd fcfa 	bl	8000e18 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003426:	e00b      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003428:	f7fd fcf6 	bl	8000e18 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d904      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0bb      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003440:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800344c:	d0ec      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02e      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12a      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003476:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	0f1b      	lsrs	r3, r3, #28
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	019a      	lsls	r2, r3, #6
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	071b      	lsls	r3, r3, #28
 80034aa:	4944      	ldr	r1, [pc, #272]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034b2:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	493d      	ldr	r1, [pc, #244]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d022      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e0:	d11d      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	0e1b      	lsrs	r3, r3, #24
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	0f1b      	lsrs	r3, r3, #28
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	019a      	lsls	r2, r3, #6
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	4929      	ldr	r1, [pc, #164]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d028      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	019a      	lsls	r2, r3, #6
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	4917      	ldr	r1, [pc, #92]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	4911      	ldr	r1, [pc, #68]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fd fc46 	bl	8000e18 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003590:	f7fd fc42 	bl	8000e18 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e007      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ae:	d1ef      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd f9c4 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f82c 	bl	800365c <UART_SetConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa84 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb0b 	bl	8003c68 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4ba6      	ldr	r3, [pc, #664]	; (8003920 <UART_SetConfig+0x2c4>)
 8003688:	4013      	ands	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	430b      	orrs	r3, r1
 8003692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a94      	ldr	r2, [pc, #592]	; (8003924 <UART_SetConfig+0x2c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d120      	bne.n	800371a <UART_SetConfig+0xbe>
 80036d8:	4b93      	ldr	r3, [pc, #588]	; (8003928 <UART_SetConfig+0x2cc>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d816      	bhi.n	8003714 <UART_SetConfig+0xb8>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x90>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	08003709 	.word	0x08003709
 80036f4:	08003703 	.word	0x08003703
 80036f8:	0800370f 	.word	0x0800370f
 80036fc:	2301      	movs	r3, #1
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e150      	b.n	80039a4 <UART_SetConfig+0x348>
 8003702:	2302      	movs	r3, #2
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e14d      	b.n	80039a4 <UART_SetConfig+0x348>
 8003708:	2304      	movs	r3, #4
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e14a      	b.n	80039a4 <UART_SetConfig+0x348>
 800370e:	2308      	movs	r3, #8
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e147      	b.n	80039a4 <UART_SetConfig+0x348>
 8003714:	2310      	movs	r3, #16
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e144      	b.n	80039a4 <UART_SetConfig+0x348>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a83      	ldr	r2, [pc, #524]	; (800392c <UART_SetConfig+0x2d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d132      	bne.n	800378a <UART_SetConfig+0x12e>
 8003724:	4b80      	ldr	r3, [pc, #512]	; (8003928 <UART_SetConfig+0x2cc>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d828      	bhi.n	8003784 <UART_SetConfig+0x128>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0xdc>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800376d 	.word	0x0800376d
 800373c:	08003785 	.word	0x08003785
 8003740:	08003785 	.word	0x08003785
 8003744:	08003785 	.word	0x08003785
 8003748:	08003779 	.word	0x08003779
 800374c:	08003785 	.word	0x08003785
 8003750:	08003785 	.word	0x08003785
 8003754:	08003785 	.word	0x08003785
 8003758:	08003773 	.word	0x08003773
 800375c:	08003785 	.word	0x08003785
 8003760:	08003785 	.word	0x08003785
 8003764:	08003785 	.word	0x08003785
 8003768:	0800377f 	.word	0x0800377f
 800376c:	2300      	movs	r3, #0
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e118      	b.n	80039a4 <UART_SetConfig+0x348>
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e115      	b.n	80039a4 <UART_SetConfig+0x348>
 8003778:	2304      	movs	r3, #4
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e112      	b.n	80039a4 <UART_SetConfig+0x348>
 800377e:	2308      	movs	r3, #8
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e10f      	b.n	80039a4 <UART_SetConfig+0x348>
 8003784:	2310      	movs	r3, #16
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e10c      	b.n	80039a4 <UART_SetConfig+0x348>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a68      	ldr	r2, [pc, #416]	; (8003930 <UART_SetConfig+0x2d4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d120      	bne.n	80037d6 <UART_SetConfig+0x17a>
 8003794:	4b64      	ldr	r3, [pc, #400]	; (8003928 <UART_SetConfig+0x2cc>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d013      	beq.n	80037ca <UART_SetConfig+0x16e>
 80037a2:	2b30      	cmp	r3, #48	; 0x30
 80037a4:	d814      	bhi.n	80037d0 <UART_SetConfig+0x174>
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d009      	beq.n	80037be <UART_SetConfig+0x162>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d810      	bhi.n	80037d0 <UART_SetConfig+0x174>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <UART_SetConfig+0x15c>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d006      	beq.n	80037c4 <UART_SetConfig+0x168>
 80037b6:	e00b      	b.n	80037d0 <UART_SetConfig+0x174>
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e0f2      	b.n	80039a4 <UART_SetConfig+0x348>
 80037be:	2302      	movs	r3, #2
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e0ef      	b.n	80039a4 <UART_SetConfig+0x348>
 80037c4:	2304      	movs	r3, #4
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e0ec      	b.n	80039a4 <UART_SetConfig+0x348>
 80037ca:	2308      	movs	r3, #8
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e0e9      	b.n	80039a4 <UART_SetConfig+0x348>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e0e6      	b.n	80039a4 <UART_SetConfig+0x348>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a56      	ldr	r2, [pc, #344]	; (8003934 <UART_SetConfig+0x2d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d120      	bne.n	8003822 <UART_SetConfig+0x1c6>
 80037e0:	4b51      	ldr	r3, [pc, #324]	; (8003928 <UART_SetConfig+0x2cc>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037ea:	2bc0      	cmp	r3, #192	; 0xc0
 80037ec:	d013      	beq.n	8003816 <UART_SetConfig+0x1ba>
 80037ee:	2bc0      	cmp	r3, #192	; 0xc0
 80037f0:	d814      	bhi.n	800381c <UART_SetConfig+0x1c0>
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d009      	beq.n	800380a <UART_SetConfig+0x1ae>
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d810      	bhi.n	800381c <UART_SetConfig+0x1c0>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0x1a8>
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d006      	beq.n	8003810 <UART_SetConfig+0x1b4>
 8003802:	e00b      	b.n	800381c <UART_SetConfig+0x1c0>
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e0cc      	b.n	80039a4 <UART_SetConfig+0x348>
 800380a:	2302      	movs	r3, #2
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e0c9      	b.n	80039a4 <UART_SetConfig+0x348>
 8003810:	2304      	movs	r3, #4
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0c6      	b.n	80039a4 <UART_SetConfig+0x348>
 8003816:	2308      	movs	r3, #8
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e0c3      	b.n	80039a4 <UART_SetConfig+0x348>
 800381c:	2310      	movs	r3, #16
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e0c0      	b.n	80039a4 <UART_SetConfig+0x348>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a44      	ldr	r2, [pc, #272]	; (8003938 <UART_SetConfig+0x2dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d125      	bne.n	8003878 <UART_SetConfig+0x21c>
 800382c:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <UART_SetConfig+0x2cc>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383a:	d017      	beq.n	800386c <UART_SetConfig+0x210>
 800383c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003840:	d817      	bhi.n	8003872 <UART_SetConfig+0x216>
 8003842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003846:	d00b      	beq.n	8003860 <UART_SetConfig+0x204>
 8003848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384c:	d811      	bhi.n	8003872 <UART_SetConfig+0x216>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <UART_SetConfig+0x1fe>
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d006      	beq.n	8003866 <UART_SetConfig+0x20a>
 8003858:	e00b      	b.n	8003872 <UART_SetConfig+0x216>
 800385a:	2300      	movs	r3, #0
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e0a1      	b.n	80039a4 <UART_SetConfig+0x348>
 8003860:	2302      	movs	r3, #2
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e09e      	b.n	80039a4 <UART_SetConfig+0x348>
 8003866:	2304      	movs	r3, #4
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e09b      	b.n	80039a4 <UART_SetConfig+0x348>
 800386c:	2308      	movs	r3, #8
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e098      	b.n	80039a4 <UART_SetConfig+0x348>
 8003872:	2310      	movs	r3, #16
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e095      	b.n	80039a4 <UART_SetConfig+0x348>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <UART_SetConfig+0x2e0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d125      	bne.n	80038ce <UART_SetConfig+0x272>
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <UART_SetConfig+0x2cc>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800388c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003890:	d017      	beq.n	80038c2 <UART_SetConfig+0x266>
 8003892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003896:	d817      	bhi.n	80038c8 <UART_SetConfig+0x26c>
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389c:	d00b      	beq.n	80038b6 <UART_SetConfig+0x25a>
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d811      	bhi.n	80038c8 <UART_SetConfig+0x26c>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <UART_SetConfig+0x254>
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d006      	beq.n	80038bc <UART_SetConfig+0x260>
 80038ae:	e00b      	b.n	80038c8 <UART_SetConfig+0x26c>
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e076      	b.n	80039a4 <UART_SetConfig+0x348>
 80038b6:	2302      	movs	r3, #2
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e073      	b.n	80039a4 <UART_SetConfig+0x348>
 80038bc:	2304      	movs	r3, #4
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e070      	b.n	80039a4 <UART_SetConfig+0x348>
 80038c2:	2308      	movs	r3, #8
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e06d      	b.n	80039a4 <UART_SetConfig+0x348>
 80038c8:	2310      	movs	r3, #16
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e06a      	b.n	80039a4 <UART_SetConfig+0x348>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <UART_SetConfig+0x2e4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d138      	bne.n	800394a <UART_SetConfig+0x2ee>
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <UART_SetConfig+0x2cc>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038e6:	d017      	beq.n	8003918 <UART_SetConfig+0x2bc>
 80038e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038ec:	d82a      	bhi.n	8003944 <UART_SetConfig+0x2e8>
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f2:	d00b      	beq.n	800390c <UART_SetConfig+0x2b0>
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f8:	d824      	bhi.n	8003944 <UART_SetConfig+0x2e8>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <UART_SetConfig+0x2aa>
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	d006      	beq.n	8003912 <UART_SetConfig+0x2b6>
 8003904:	e01e      	b.n	8003944 <UART_SetConfig+0x2e8>
 8003906:	2300      	movs	r3, #0
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e04b      	b.n	80039a4 <UART_SetConfig+0x348>
 800390c:	2302      	movs	r3, #2
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e048      	b.n	80039a4 <UART_SetConfig+0x348>
 8003912:	2304      	movs	r3, #4
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e045      	b.n	80039a4 <UART_SetConfig+0x348>
 8003918:	2308      	movs	r3, #8
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e042      	b.n	80039a4 <UART_SetConfig+0x348>
 800391e:	bf00      	nop
 8003920:	efff69f3 	.word	0xefff69f3
 8003924:	40011000 	.word	0x40011000
 8003928:	40023800 	.word	0x40023800
 800392c:	40004400 	.word	0x40004400
 8003930:	40004800 	.word	0x40004800
 8003934:	40004c00 	.word	0x40004c00
 8003938:	40005000 	.word	0x40005000
 800393c:	40011400 	.word	0x40011400
 8003940:	40007800 	.word	0x40007800
 8003944:	2310      	movs	r3, #16
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e02c      	b.n	80039a4 <UART_SetConfig+0x348>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <UART_SetConfig+0x4bc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d125      	bne.n	80039a0 <UART_SetConfig+0x344>
 8003954:	4b71      	ldr	r3, [pc, #452]	; (8003b1c <UART_SetConfig+0x4c0>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800395e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003962:	d017      	beq.n	8003994 <UART_SetConfig+0x338>
 8003964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003968:	d817      	bhi.n	800399a <UART_SetConfig+0x33e>
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d00b      	beq.n	8003988 <UART_SetConfig+0x32c>
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003974:	d811      	bhi.n	800399a <UART_SetConfig+0x33e>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <UART_SetConfig+0x326>
 800397a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800397e:	d006      	beq.n	800398e <UART_SetConfig+0x332>
 8003980:	e00b      	b.n	800399a <UART_SetConfig+0x33e>
 8003982:	2300      	movs	r3, #0
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e00d      	b.n	80039a4 <UART_SetConfig+0x348>
 8003988:	2302      	movs	r3, #2
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e00a      	b.n	80039a4 <UART_SetConfig+0x348>
 800398e:	2304      	movs	r3, #4
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e007      	b.n	80039a4 <UART_SetConfig+0x348>
 8003994:	2308      	movs	r3, #8
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e004      	b.n	80039a4 <UART_SetConfig+0x348>
 800399a:	2310      	movs	r3, #16
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e001      	b.n	80039a4 <UART_SetConfig+0x348>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ac:	d15b      	bne.n	8003a66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d828      	bhi.n	8003a06 <UART_SetConfig+0x3aa>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x360>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a07 	.word	0x08003a07
 80039cc:	080039f7 	.word	0x080039f7
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
 80039dc:	080039ff 	.word	0x080039ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7ff f99e 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80039e4:	61b8      	str	r0, [r7, #24]
        break;
 80039e6:	e013      	b.n	8003a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7ff f9ae 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 80039ec:	61b8      	str	r0, [r7, #24]
        break;
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <UART_SetConfig+0x4c4>)
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e00c      	b.n	8003a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f6:	f7ff f881 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 80039fa:	61b8      	str	r0, [r7, #24]
        break;
 80039fc:	e008      	b.n	8003a10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a02:	61bb      	str	r3, [r7, #24]
        break;
 8003a04:	e004      	b.n	8003a10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d074      	beq.n	8003b00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	005a      	lsls	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	d916      	bls.n	8003a60 <UART_SetConfig+0x404>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d212      	bcs.n	8003a60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f023 030f 	bic.w	r3, r3, #15
 8003a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	89fa      	ldrh	r2, [r7, #14]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	e04f      	b.n	8003b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	77bb      	strb	r3, [r7, #30]
 8003a64:	e04c      	b.n	8003b00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a66:	7ffb      	ldrb	r3, [r7, #31]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d828      	bhi.n	8003abe <UART_SetConfig+0x462>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0x418>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7ff f942 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8003a9c:	61b8      	str	r0, [r7, #24]
        break;
 8003a9e:	e013      	b.n	8003ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7ff f952 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	61b8      	str	r0, [r7, #24]
        break;
 8003aa6:	e00f      	b.n	8003ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <UART_SetConfig+0x4c4>)
 8003aaa:	61bb      	str	r3, [r7, #24]
        break;
 8003aac:	e00c      	b.n	8003ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7ff f825 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8003ab2:	61b8      	str	r0, [r7, #24]
        break;
 8003ab4:	e008      	b.n	8003ac8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	61bb      	str	r3, [r7, #24]
        break;
 8003abc:	e004      	b.n	8003ac8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	085a      	lsrs	r2, r3, #1
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	441a      	add	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d909      	bls.n	8003afc <UART_SetConfig+0x4a0>
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d205      	bcs.n	8003afc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	e001      	b.n	8003b00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40007c00 	.word	0x40007c00
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd f8ce 	bl	8000e18 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10e      	bne.n	8003caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f831 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e027      	b.n	8003cfa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10e      	bne.n	8003cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f81b 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e011      	b.n	8003cfa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b09c      	sub	sp, #112	; 0x70
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	e0a7      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	f000 80a3 	beq.w	8003e64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd f87b 	bl	8000e18 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d13f      	bne.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e068      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d050      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d148      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e6      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e2e:	623a      	str	r2, [r7, #32]
 8003e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	69f9      	ldr	r1, [r7, #28]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e010      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	f43f af48 	beq.w	8003d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3770      	adds	r7, #112	; 0x70
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e90:	b084      	sub	sp, #16
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 001c 	add.w	r0, r7, #28
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d120      	bne.n	8003eea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <USB_CoreInit+0xac>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa96 	bl	8004410 <USB_CoreReset>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e010      	b.n	8003f0c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa8a 	bl	8004410 <USB_CoreReset>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d10b      	bne.n	8003f2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f043 0206 	orr.w	r2, r3, #6
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f36:	b004      	add	sp, #16
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	ffbdffbf 	.word	0xffbdffbf

08003f40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 0201 	bic.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d115      	bne.n	8003fb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f90:	2001      	movs	r0, #1
 8003f92:	f7fc ff4d 	bl	8000e30 <HAL_Delay>
      ms++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa29 	bl	80043f4 <USB_GetMode>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d01e      	beq.n	8003fe6 <USB_SetCurrentMode+0x84>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b31      	cmp	r3, #49	; 0x31
 8003fac:	d9f0      	bls.n	8003f90 <USB_SetCurrentMode+0x2e>
 8003fae:	e01a      	b.n	8003fe6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d115      	bne.n	8003fe2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f7fc ff34 	bl	8000e30 <HAL_Delay>
      ms++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa10 	bl	80043f4 <USB_GetMode>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <USB_SetCurrentMode+0x84>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b31      	cmp	r3, #49	; 0x31
 8003fde:	d9f0      	bls.n	8003fc2 <USB_SetCurrentMode+0x60>
 8003fe0:	e001      	b.n	8003fe6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e005      	b.n	8003ff2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b32      	cmp	r3, #50	; 0x32
 8003fea:	d101      	bne.n	8003ff0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800400a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e009      	b.n	8004030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3340      	adds	r3, #64	; 0x40
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3301      	adds	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0e      	cmp	r3, #14
 8004034:	d9f2      	bls.n	800401c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11c      	bne.n	8004076 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e005      	b.n	8004082 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	4619      	mov	r1, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	461a      	mov	r2, r3
 800409e:	680b      	ldr	r3, [r1, #0]
 80040a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d10c      	bne.n	80040c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ae:	2100      	movs	r1, #0
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f965 	bl	8004380 <USB_SetDevSpeed>
 80040b6:	e008      	b.n	80040ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040b8:	2101      	movs	r1, #1
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f960 	bl	8004380 <USB_SetDevSpeed>
 80040c0:	e003      	b.n	80040ca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040c2:	2103      	movs	r1, #3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f95b 	bl	8004380 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040ca:	2110      	movs	r1, #16
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8f3 	bl	80042b8 <USB_FlushTxFifo>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f91f 	bl	8004320 <USB_FlushRxFifo>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	461a      	mov	r2, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	e043      	b.n	800419e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800412c:	d118      	bne.n	8004160 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	461a      	mov	r2, r3
 8004142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e013      	b.n	8004172 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	461a      	mov	r2, r3
 8004158:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e008      	b.n	8004172 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	461a      	mov	r2, r3
 8004192:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3301      	adds	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d3b7      	bcc.n	8004116 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e043      	b.n	8004234 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c2:	d118      	bne.n	80041f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e013      	b.n	8004208 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e008      	b.n	8004208 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800422c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d3b7      	bcc.n	80041ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800425c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f043 0210 	orr.w	r2, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <USB_DevInit+0x2b4>)
 8004276:	4313      	orrs	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f043 0208 	orr.w	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <USB_DevInit+0x2b8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr
 80042b0:	803c3800 	.word	0x803c3800
 80042b4:	40000004 	.word	0x40000004

080042b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <USB_FlushTxFifo+0x64>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e01b      	b.n	8004310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	daf2      	bge.n	80042c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	019b      	lsls	r3, r3, #6
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <USB_FlushTxFifo+0x64>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e006      	b.n	8004310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d0f0      	beq.n	80042f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	00030d40 	.word	0x00030d40

08004320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <USB_FlushRxFifo+0x5c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e018      	b.n	8004370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	daf2      	bge.n	800432c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2210      	movs	r2, #16
 800434e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <USB_FlushRxFifo+0x5c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e006      	b.n	8004370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d0f0      	beq.n	8004350 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	00030d40 	.word	0x00030d40

08004380 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043cc:	f023 0303 	bic.w	r3, r3, #3
 80043d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0301 	and.w	r3, r3, #1
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a13      	ldr	r2, [pc, #76]	; (8004474 <USB_CoreReset+0x64>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e01b      	b.n	8004466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	daf2      	bge.n	800441c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f043 0201 	orr.w	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <USB_CoreReset+0x64>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d0f0      	beq.n	8004446 <USB_CoreReset+0x36>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	00030d40 	.word	0x00030d40

08004478 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800447e:	2100      	movs	r1, #0
 8004480:	2000      	movs	r0, #0
 8004482:	f004 fbb3 	bl	8008bec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <MX_LWIP_Init+0x9c>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <MX_LWIP_Init+0xa0>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <MX_LWIP_Init+0xa4>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <MX_LWIP_Init+0xa8>)
 800449a:	9302      	str	r3, [sp, #8]
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <MX_LWIP_Init+0xac>)
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2300      	movs	r3, #0
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <MX_LWIP_Init+0xa4>)
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <MX_LWIP_Init+0xa0>)
 80044a8:	491a      	ldr	r1, [pc, #104]	; (8004514 <MX_LWIP_Init+0x9c>)
 80044aa:	481f      	ldr	r0, [pc, #124]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044ac:	f005 f968 	bl	8009780 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80044b0:	481d      	ldr	r0, [pc, #116]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044b2:	f005 fb1f 	bl	8009af4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80044c8:	4817      	ldr	r0, [pc, #92]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044ca:	f005 fb23 	bl	8009b14 <netif_set_up>
 80044ce:	e002      	b.n	80044d6 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80044d0:	4815      	ldr	r0, [pc, #84]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044d2:	f005 fb8b 	bl	8009bec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80044d6:	4915      	ldr	r1, [pc, #84]	; (800452c <MX_LWIP_Init+0xb4>)
 80044d8:	4813      	ldr	r0, [pc, #76]	; (8004528 <MX_LWIP_Init+0xb0>)
 80044da:	f005 fbb9 	bl	8009c50 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	2100      	movs	r1, #0
 80044e2:	4813      	ldr	r0, [pc, #76]	; (8004530 <MX_LWIP_Init+0xb8>)
 80044e4:	f010 fd35 	bl	8014f52 <memset>
  attributes.name = "EthLink";
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <MX_LWIP_Init+0xb8>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <MX_LWIP_Init+0xbc>)
 80044ec:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <MX_LWIP_Init+0xb8>)
 80044f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f4:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <MX_LWIP_Init+0xb8>)
 80044f8:	2210      	movs	r2, #16
 80044fa:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <MX_LWIP_Init+0xb8>)
 80044fe:	490a      	ldr	r1, [pc, #40]	; (8004528 <MX_LWIP_Init+0xb0>)
 8004500:	480d      	ldr	r0, [pc, #52]	; (8004538 <MX_LWIP_Init+0xc0>)
 8004502:	f000 fb55 	bl	8004bb0 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004506:	4808      	ldr	r0, [pc, #32]	; (8004528 <MX_LWIP_Init+0xb0>)
 8004508:	f00c fd0a 	bl	8010f20 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200007ac 	.word	0x200007ac
 8004518:	200007b0 	.word	0x200007b0
 800451c:	200007b4 	.word	0x200007b4
 8004520:	08008b29 	.word	0x08008b29
 8004524:	080048c9 	.word	0x080048c9
 8004528:	20000774 	.word	0x20000774
 800452c:	0800453d 	.word	0x0800453d
 8004530:	200007b8 	.word	0x200007b8
 8004534:	08015d7c 	.word	0x08015d7c
 8004538:	08004973 	.word	0x08004973

0800453c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <SCB_InvalidateDCache_by_Addr>:
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004562:	2320      	movs	r3, #32
 8004564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004566:	f3bf 8f4f 	dsb	sy
}
 800456a:	bf00      	nop
    while (op_size > 0) {
 800456c:	e00b      	b.n	8004586 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800456e:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	dcf0      	bgt.n	800456e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800458c:	f3bf 8f4f 	dsb	sy
}
 8004590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004592:	f3bf 8f6f 	isb	sy
}
 8004596:	bf00      	nop
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <low_level_init+0x148>)
 80045b8:	4a4e      	ldr	r2, [pc, #312]	; (80046f4 <low_level_init+0x14c>)
 80045ba:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80045bc:	2300      	movs	r3, #0
 80045be:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80045c4:	23e1      	movs	r3, #225	; 0xe1
 80045c6:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80045c8:	2300      	movs	r3, #0
 80045ca:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80045cc:	2300      	movs	r3, #0
 80045ce:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80045d0:	2300      	movs	r3, #0
 80045d2:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80045d4:	4a46      	ldr	r2, [pc, #280]	; (80046f0 <low_level_init+0x148>)
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80045dc:	4b44      	ldr	r3, [pc, #272]	; (80046f0 <low_level_init+0x148>)
 80045de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <low_level_init+0x148>)
 80045e6:	4a44      	ldr	r2, [pc, #272]	; (80046f8 <low_level_init+0x150>)
 80045e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <low_level_init+0x148>)
 80045ec:	4a43      	ldr	r2, [pc, #268]	; (80046fc <low_level_init+0x154>)
 80045ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80045f0:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <low_level_init+0x148>)
 80045f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80045f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045f8:	483d      	ldr	r0, [pc, #244]	; (80046f0 <low_level_init+0x148>)
 80045fa:	f7fc fd23 	bl	8001044 <HAL_ETH_Init>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004604:	2238      	movs	r2, #56	; 0x38
 8004606:	2100      	movs	r1, #0
 8004608:	483d      	ldr	r0, [pc, #244]	; (8004700 <low_level_init+0x158>)
 800460a:	f010 fca2 	bl	8014f52 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <low_level_init+0x158>)
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004614:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <low_level_init+0x158>)
 8004616:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800461a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800461c:	4b38      	ldr	r3, [pc, #224]	; (8004700 <low_level_init+0x158>)
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004622:	4838      	ldr	r0, [pc, #224]	; (8004704 <low_level_init+0x15c>)
 8004624:	f004 ff66 	bl	80094f4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2206      	movs	r2, #6
 800462c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004630:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <low_level_init+0x148>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800463c:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <low_level_init+0x148>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	785a      	ldrb	r2, [r3, #1]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <low_level_init+0x148>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	789a      	ldrb	r2, [r3, #2]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <low_level_init+0x148>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	78da      	ldrb	r2, [r3, #3]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <low_level_init+0x148>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	791a      	ldrb	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <low_level_init+0x148>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	795a      	ldrb	r2, [r3, #5]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004686:	f043 030a 	orr.w	r3, r3, #10
 800468a:	b2da      	uxtb	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004692:	2200      	movs	r2, #0
 8004694:	2101      	movs	r1, #1
 8004696:	2001      	movs	r0, #1
 8004698:	f000 fca6 	bl	8004fe8 <osSemaphoreNew>
 800469c:	4603      	mov	r3, r0
 800469e:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <low_level_init+0x160>)
 80046a0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80046a2:	2200      	movs	r2, #0
 80046a4:	2101      	movs	r1, #1
 80046a6:	2001      	movs	r0, #1
 80046a8:	f000 fc9e 	bl	8004fe8 <osSemaphoreNew>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <low_level_init+0x164>)
 80046b0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f010 fc49 	bl	8014f52 <memset>
  attributes.name = "EthIf";
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <low_level_init+0x168>)
 80046c2:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80046c4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 80046ca:	2330      	movs	r3, #48	; 0x30
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	461a      	mov	r2, r3
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	480f      	ldr	r0, [pc, #60]	; (8004714 <low_level_init+0x16c>)
 80046d8:	f000 fa6a 	bl	8004bb0 <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 80046dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 80046e4:	f7fc f916 	bl	8000914 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80046e8:	bf00      	nop
 80046ea:	3738      	adds	r7, #56	; 0x38
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20005170 	.word	0x20005170
 80046f4:	40028000 	.word	0x40028000
 80046f8:	2000011c 	.word	0x2000011c
 80046fc:	2000007c 	.word	0x2000007c
 8004700:	20005220 	.word	0x20005220
 8004704:	08018c5c 	.word	0x08018c5c
 8004708:	20005168 	.word	0x20005168
 800470c:	2000516c 	.word	0x2000516c
 8004710:	08015d84 	.word	0x08015d84
 8004714:	08004875 	.word	0x08004875

08004718 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b092      	sub	sp, #72	; 0x48
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	2230      	movs	r2, #48	; 0x30
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f010 fc0a 	bl	8014f52 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	2230      	movs	r2, #48	; 0x30
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f010 fc03 	bl	8014f52 <memset>

  for(q = p; q != NULL; q = q->next)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
 8004750:	e045      	b.n	80047de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004754:	2b03      	cmp	r3, #3
 8004756:	d902      	bls.n	800475e <low_level_output+0x46>
      return ERR_IF;
 8004758:	f06f 030b 	mvn.w	r3, #11
 800475c:	e065      	b.n	800482a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	3348      	adds	r3, #72	; 0x48
 800476e:	443b      	add	r3, r7
 8004770:	3b3c      	subs	r3, #60	; 0x3c
 8004772:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004776:	895b      	ldrh	r3, [r3, #10]
 8004778:	4619      	mov	r1, r3
 800477a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	3348      	adds	r3, #72	; 0x48
 8004786:	443b      	add	r3, r7
 8004788:	3b38      	subs	r3, #56	; 0x38
 800478a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478e:	2b00      	cmp	r3, #0
 8004790:	d011      	beq.n	80047b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	f107 000c 	add.w	r0, r7, #12
 800479a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800479c:	460b      	mov	r3, r1
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	440b      	add	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	18c1      	adds	r1, r0, r3
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	3348      	adds	r3, #72	; 0x48
 80047b0:	443b      	add	r3, r7
 80047b2:	3b34      	subs	r3, #52	; 0x34
 80047b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80047be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3348      	adds	r3, #72	; 0x48
 80047ca:	443b      	add	r3, r7
 80047cc:	3b34      	subs	r3, #52	; 0x34
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80047d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d4:	3301      	adds	r3, #1
 80047d6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1b6      	bne.n	8004752 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	891b      	ldrh	r3, [r3, #8]
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <low_level_output+0x11c>)
 80047ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <low_level_output+0x11c>)
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80047f6:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <low_level_output+0x11c>)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80047fc:	6838      	ldr	r0, [r7, #0]
 80047fe:	f005 fe7b 	bl	800a4f8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004802:	490c      	ldr	r1, [pc, #48]	; (8004834 <low_level_output+0x11c>)
 8004804:	480c      	ldr	r0, [pc, #48]	; (8004838 <low_level_output+0x120>)
 8004806:	f7fc fca3 	bl	8001150 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800480a:	bf00      	nop
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <low_level_output+0x124>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f04f 31ff 	mov.w	r1, #4294967295
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fc83 	bl	8005120 <osSemaphoreAcquire>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f5      	bne.n	800480c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004820:	4805      	ldr	r0, [pc, #20]	; (8004838 <low_level_output+0x120>)
 8004822:	f7fc fe29 	bl	8001478 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800482a:	4618      	mov	r0, r3
 800482c:	3748      	adds	r7, #72	; 0x48
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20005220 	.word	0x20005220
 8004838:	20005170 	.word	0x20005170
 800483c:	2000516c 	.word	0x2000516c

08004840 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <low_level_input+0x2c>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	4619      	mov	r1, r3
 800485a:	4805      	ldr	r0, [pc, #20]	; (8004870 <low_level_input+0x30>)
 800485c:	f7fc fcd4 	bl	8001208 <HAL_ETH_ReadData>
  }

  return p;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20005164 	.word	0x20005164
 8004870:	20005170 	.word	0x20005170

08004874 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <ethernetif_input+0x50>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fc47 	bl	8005120 <osSemaphoreAcquire>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f5      	bne.n	8004884 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f7ff ffd1 	bl	8004840 <low_level_input>
 800489e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	4798      	blx	r3
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f005 fd78 	bl	800a3ac <pbuf_free>
          }
        }
      } while(p!=NULL);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ea      	bne.n	8004898 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80048c2:	e7df      	b.n	8004884 <ethernetif_input+0x10>
 80048c4:	20005168 	.word	0x20005168

080048c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <ethernetif_init+0x1c>
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <ethernetif_init+0x48>)
 80048d8:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80048dc:	490d      	ldr	r1, [pc, #52]	; (8004914 <ethernetif_init+0x4c>)
 80048de:	480e      	ldr	r0, [pc, #56]	; (8004918 <ethernetif_init+0x50>)
 80048e0:	f010 fad2 	bl	8014e88 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2273      	movs	r2, #115	; 0x73
 80048e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2274      	movs	r2, #116	; 0x74
 80048f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <ethernetif_init+0x54>)
 80048f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <ethernetif_init+0x58>)
 80048fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fe51 	bl	80045a8 <low_level_init>

  return ERR_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	08015d8c 	.word	0x08015d8c
 8004914:	08015da8 	.word	0x08015da8
 8004918:	08015db8 	.word	0x08015db8
 800491c:	08012d75 	.word	0x08012d75
 8004920:	08004719 	.word	0x08004719

08004924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004930:	68f9      	ldr	r1, [r7, #12]
 8004932:	4809      	ldr	r0, [pc, #36]	; (8004958 <pbuf_free_custom+0x34>)
 8004934:	f004 fece 	bl	80096d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004938:	4b08      	ldr	r3, [pc, #32]	; (800495c <pbuf_free_custom+0x38>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <pbuf_free_custom+0x38>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <pbuf_free_custom+0x3c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fc4e 	bl	80051ec <osSemaphoreRelease>
  }
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	08018c5c 	.word	0x08018c5c
 800495c:	20005164 	.word	0x20005164
 8004960:	20005168 	.word	0x20005168

08004964 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004968:	f7fc fa56 	bl	8000e18 <HAL_GetTick>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	bd80      	pop	{r7, pc}

08004972 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800497a:	2064      	movs	r0, #100	; 0x64
 800497c:	f000 f9be 	bl	8004cfc <osDelay>
 8004980:	e7fb      	b.n	800497a <ethernet_link_thread+0x8>
	...

08004984 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800498c:	4812      	ldr	r0, [pc, #72]	; (80049d8 <HAL_ETH_RxAllocateCallback+0x54>)
 800498e:	f004 fe2d 	bl	80095ec <memp_malloc_pool>
 8004992:	60f8      	str	r0, [r7, #12]
  if (p)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d014      	beq.n	80049c4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f103 0220 	add.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <HAL_ETH_RxAllocateCallback+0x58>)
 80049a8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80049b2:	9201      	str	r2, [sp, #4]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2241      	movs	r2, #65	; 0x41
 80049ba:	2100      	movs	r1, #0
 80049bc:	2000      	movs	r0, #0
 80049be:	f005 fb3b 	bl	800a038 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80049c2:	e005      	b.n	80049d0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08018c5c 	.word	0x08018c5c
 80049dc:	08004925 	.word	0x08004925
 80049e0:	20005164 	.word	0x20005164

080049e4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3b20      	subs	r3, #32
 8004a02:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e003      	b.n	8004a2e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e009      	b.n	8004a50 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	891a      	ldrh	r2, [r3, #8]
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	4413      	add	r3, r2
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f2      	bne.n	8004a3c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fd78 	bl	8004550 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004a60:	bf00      	nop
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f005 fc9b 	bl	800a3ac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a92:	f3ef 8305 	mrs	r3, IPSR
 8004a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10f      	bne.n	8004abe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	607b      	str	r3, [r7, #4]
  return(result);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004aae:	603b      	str	r3, [r7, #0]
  return(result);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <osKernelInitialize+0x3a>
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <osKernelInitialize+0x64>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d103      	bne.n	8004ac6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004abe:	f06f 0305 	mvn.w	r3, #5
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e00c      	b.n	8004ae0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <osKernelInitialize+0x64>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <osKernelInitialize+0x64>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20005258 	.word	0x20005258

08004af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afa:	f3ef 8305 	mrs	r3, IPSR
 8004afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b06:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b12:	f3ef 8311 	mrs	r3, BASEPRI
 8004b16:	603b      	str	r3, [r7, #0]
  return(result);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <osKernelStart+0x3a>
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <osKernelStart+0x68>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d103      	bne.n	8004b2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b26:	f06f 0305 	mvn.w	r3, #5
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e010      	b.n	8004b50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <osKernelStart+0x68>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d109      	bne.n	8004b4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b36:	f7ff ffa2 	bl	8004a7e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <osKernelStart+0x68>)
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b40:	f002 f906 	bl	8006d50 <vTaskStartScheduler>
      stat = osOK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20005258 	.word	0x20005258

08004b60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b66:	f3ef 8305 	mrs	r3, IPSR
 8004b6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	607b      	str	r3, [r7, #4]
  return(result);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b82:	603b      	str	r3, [r7, #0]
  return(result);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <osKernelGetTickCount+0x3a>
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <osKernelGetTickCount+0x4c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004b92:	f002 fa0f 	bl	8006fb4 <xTaskGetTickCountFromISR>
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	e002      	b.n	8004ba0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004b9a:	f002 f9fb 	bl	8006f94 <xTaskGetTickCount>
 8004b9e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20005258 	.word	0x20005258

08004bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b090      	sub	sp, #64	; 0x40
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc0:	f3ef 8305 	mrs	r3, IPSR
 8004bc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 808f 	bne.w	8004cec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bda:	f3ef 8311 	mrs	r3, BASEPRI
 8004bde:	617b      	str	r3, [r7, #20]
  return(result);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <osThreadNew+0x3e>
 8004be6:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <osThreadNew+0x148>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d07e      	beq.n	8004cec <osThreadNew+0x13c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d07b      	beq.n	8004cec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004bf8:	2318      	movs	r3, #24
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
 8004c04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d045      	beq.n	8004c98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <osThreadNew+0x6a>
        name = attr->name;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <osThreadNew+0x90>
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b38      	cmp	r3, #56	; 0x38
 8004c32:	d805      	bhi.n	8004c40 <osThreadNew+0x90>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <osThreadNew+0x94>
        return (NULL);
 8004c40:	2300      	movs	r3, #0
 8004c42:	e054      	b.n	8004cee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <osThreadNew+0xca>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2ba7      	cmp	r3, #167	; 0xa7
 8004c62:	d90a      	bls.n	8004c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <osThreadNew+0xca>
        mem = 1;
 8004c74:	2301      	movs	r3, #1
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	e010      	b.n	8004c9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <osThreadNew+0xec>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <osThreadNew+0xec>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <osThreadNew+0xec>
          mem = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	e001      	b.n	8004c9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d110      	bne.n	8004cc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f001 fe53 	bl	8006964 <xTaskCreateStatic>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e013      	b.n	8004cec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d110      	bne.n	8004cec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f107 0310 	add.w	r3, r7, #16
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f001 fea4 	bl	8006a2a <xTaskCreate>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <osThreadNew+0x13c>
          hTask = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cec:	693b      	ldr	r3, [r7, #16]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3730      	adds	r7, #48	; 0x30
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20005258 	.word	0x20005258

08004cfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d04:	f3ef 8305 	mrs	r3, IPSR
 8004d08:	613b      	str	r3, [r7, #16]
  return(result);
 8004d0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <osDelay+0x3c>
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <osDelay+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d103      	bne.n	8004d38 <osDelay+0x3c>
    stat = osErrorISR;
 8004d30:	f06f 0305 	mvn.w	r3, #5
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e007      	b.n	8004d48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 ffce 	bl	8006ce4 <vTaskDelay>
    }
  }

  return (stat);
 8004d48:	697b      	ldr	r3, [r7, #20]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20005258 	.word	0x20005258

08004d58 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	613b      	str	r3, [r7, #16]
  return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 8085 	bne.w	8004e7c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d72:	f3ef 8310 	mrs	r3, PRIMASK
 8004d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <osMutexNew+0x3a>
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <osMutexNew+0x130>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d074      	beq.n	8004e7c <osMutexNew+0x124>
    if (attr != NULL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	623b      	str	r3, [r7, #32]
 8004d9e:	e001      	b.n	8004da4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <osMutexNew+0x5c>
      rmtx = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e001      	b.n	8004db8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d15c      	bne.n	8004e7c <osMutexNew+0x124>
      mem = -1;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <osMutexNew+0x8c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b4f      	cmp	r3, #79	; 0x4f
 8004ddc:	d902      	bls.n	8004de4 <osMutexNew+0x8c>
          mem = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	e00c      	b.n	8004dfe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <osMutexNew+0xa6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <osMutexNew+0xa6>
            mem = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e001      	b.n	8004dfe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d112      	bne.n	8004e2a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	2004      	movs	r0, #4
 8004e12:	f000 fe1a 	bl	8005a4a <xQueueCreateMutexStatic>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
 8004e18:	e016      	b.n	8004e48 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	2001      	movs	r0, #1
 8004e22:	f000 fe12 	bl	8005a4a <xQueueCreateMutexStatic>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24
 8004e28:	e00e      	b.n	8004e48 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e36:	2004      	movs	r0, #4
 8004e38:	f000 fdef 	bl	8005a1a <xQueueCreateMutex>
 8004e3c:	6278      	str	r0, [r7, #36]	; 0x24
 8004e3e:	e003      	b.n	8004e48 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004e40:	2001      	movs	r0, #1
 8004e42:	f000 fdea 	bl	8005a1a <xQueueCreateMutex>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <osMutexNew+0x110>
        if (attr != NULL) {
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <osMutexNew+0x104>
          name = attr->name;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e001      	b.n	8004e60 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e64:	f001 fcf6 	bl	8006854 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <osMutexNew+0x124>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20005258 	.word	0x20005258

08004e8c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	613b      	str	r3, [r7, #16]
  return(result);
 8004eb0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10f      	bne.n	8004ed6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <osMutexAcquire+0x52>
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <osMutexAcquire+0xb8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d103      	bne.n	8004ede <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004ed6:	f06f 0305 	mvn.w	r3, #5
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	e02c      	b.n	8004f38 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004ee4:	f06f 0303 	mvn.w	r3, #3
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e025      	b.n	8004f38 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	69b8      	ldr	r0, [r7, #24]
 8004ef6:	f000 fdf9 	bl	8005aec <xQueueTakeMutexRecursive>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d01b      	beq.n	8004f38 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004f06:	f06f 0301 	mvn.w	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e014      	b.n	8004f38 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f0e:	f06f 0302 	mvn.w	r3, #2
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e010      	b.n	8004f38 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	69b8      	ldr	r0, [r7, #24]
 8004f1a:	f001 f9b3 	bl	8006284 <xQueueSemaphoreTake>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d009      	beq.n	8004f38 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004f2a:	f06f 0301 	mvn.w	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e002      	b.n	8004f38 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f32:	f06f 0302 	mvn.w	r3, #2
 8004f36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f38:	69fb      	ldr	r3, [r7, #28]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20005258 	.word	0x20005258

08004f48 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f64:	f3ef 8305 	mrs	r3, IPSR
 8004f68:	613b      	str	r3, [r7, #16]
  return(result);
 8004f6a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10f      	bne.n	8004f90 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f70:	f3ef 8310 	mrs	r3, PRIMASK
 8004f74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <osMutexRelease+0x50>
 8004f88:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <osMutexRelease+0x9c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d103      	bne.n	8004f98 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004f90:	f06f 0305 	mvn.w	r3, #5
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e01f      	b.n	8004fd8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004f9e:	f06f 0303 	mvn.w	r3, #3
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e018      	b.n	8004fd8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004fac:	69b8      	ldr	r0, [r7, #24]
 8004fae:	f000 fd67 	bl	8005a80 <xQueueGiveMutexRecursive>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d00f      	beq.n	8004fd8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004fb8:	f06f 0302 	mvn.w	r3, #2
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e00b      	b.n	8004fd8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	69b8      	ldr	r0, [r7, #24]
 8004fc8:	f000 fe3a 	bl	8005c40 <xQueueGenericSend>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d002      	beq.n	8004fd8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004fd2:	f06f 0302 	mvn.w	r3, #2
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20005258 	.word	0x20005258

08004fe8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff8:	f3ef 8305 	mrs	r3, IPSR
 8004ffc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ffe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 8086 	bne.w	8005112 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005006:	f3ef 8310 	mrs	r3, PRIMASK
 800500a:	617b      	str	r3, [r7, #20]
  return(result);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005012:	f3ef 8311 	mrs	r3, BASEPRI
 8005016:	613b      	str	r3, [r7, #16]
  return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <osSemaphoreNew+0x3e>
 800501e:	4b3f      	ldr	r3, [pc, #252]	; (800511c <osSemaphoreNew+0x134>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d075      	beq.n	8005112 <osSemaphoreNew+0x12a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d072      	beq.n	8005112 <osSemaphoreNew+0x12a>
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	d86e      	bhi.n	8005112 <osSemaphoreNew+0x12a>
    mem = -1;
 8005034:	f04f 33ff 	mov.w	r3, #4294967295
 8005038:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <osSemaphoreNew+0x6e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b4f      	cmp	r3, #79	; 0x4f
 800504e:	d902      	bls.n	8005056 <osSemaphoreNew+0x6e>
        mem = 1;
 8005050:	2301      	movs	r3, #1
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	e00c      	b.n	8005070 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <osSemaphoreNew+0x88>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <osSemaphoreNew+0x88>
          mem = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	e001      	b.n	8005070 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d04c      	beq.n	8005112 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d128      	bne.n	80050d0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10a      	bne.n	800509a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2203      	movs	r2, #3
 800508a:	9200      	str	r2, [sp, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	2100      	movs	r1, #0
 8005090:	2001      	movs	r0, #1
 8005092:	f000 fbc1 	bl	8005818 <xQueueGenericCreateStatic>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24
 8005098:	e005      	b.n	80050a6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800509a:	2203      	movs	r2, #3
 800509c:	2100      	movs	r1, #0
 800509e:	2001      	movs	r0, #1
 80050a0:	f000 fc3c 	bl	800591c <xQueueGenericCreate>
 80050a4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d022      	beq.n	80050f2 <osSemaphoreNew+0x10a>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01f      	beq.n	80050f2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050b2:	2300      	movs	r3, #0
 80050b4:	2200      	movs	r2, #0
 80050b6:	2100      	movs	r1, #0
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f000 fdc1 	bl	8005c40 <xQueueGenericSend>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d016      	beq.n	80050f2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80050c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050c6:	f001 fa77 	bl	80065b8 <vQueueDelete>
            hSemaphore = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
 80050ce:	e010      	b.n	80050f2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d108      	bne.n	80050e8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	461a      	mov	r2, r3
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fd3c 	bl	8005b5c <xQueueCreateCountingSemaphoreStatic>
 80050e4:	6278      	str	r0, [r7, #36]	; 0x24
 80050e6:	e004      	b.n	80050f2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fd71 	bl	8005bd2 <xQueueCreateCountingSemaphore>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <osSemaphoreNew+0x11e>
          name = attr->name;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e001      	b.n	800510a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510e:	f001 fba1 	bl	8006854 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	; 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20005258 	.word	0x20005258

08005120 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005138:	f06f 0303 	mvn.w	r3, #3
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e04b      	b.n	80051d8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005140:	f3ef 8305 	mrs	r3, IPSR
 8005144:	617b      	str	r3, [r7, #20]
  return(result);
 8005146:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10f      	bne.n	800516c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514c:	f3ef 8310 	mrs	r3, PRIMASK
 8005150:	613b      	str	r3, [r7, #16]
  return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005158:	f3ef 8311 	mrs	r3, BASEPRI
 800515c:	60fb      	str	r3, [r7, #12]
  return(result);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d026      	beq.n	80051b2 <osSemaphoreAcquire+0x92>
 8005164:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <osSemaphoreAcquire+0xc4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d122      	bne.n	80051b2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005172:	f06f 0303 	mvn.w	r3, #3
 8005176:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005178:	e02d      	b.n	80051d6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	461a      	mov	r2, r3
 8005184:	2100      	movs	r1, #0
 8005186:	69b8      	ldr	r0, [r7, #24]
 8005188:	f001 f990 	bl	80064ac <xQueueReceiveFromISR>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005192:	f06f 0302 	mvn.w	r3, #2
 8005196:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005198:	e01d      	b.n	80051d6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01a      	beq.n	80051d6 <osSemaphoreAcquire+0xb6>
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <osSemaphoreAcquire+0xc8>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80051b0:	e011      	b.n	80051d6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	69b8      	ldr	r0, [r7, #24]
 80051b6:	f001 f865 	bl	8006284 <xQueueSemaphoreTake>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d00b      	beq.n	80051d8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80051c6:	f06f 0301 	mvn.w	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e004      	b.n	80051d8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80051ce:	f06f 0302 	mvn.w	r3, #2
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e000      	b.n	80051d8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80051d6:	bf00      	nop
      }
    }
  }

  return (stat);
 80051d8:	69fb      	ldr	r3, [r7, #28]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20005258 	.word	0x20005258
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005202:	f06f 0303 	mvn.w	r3, #3
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e03e      	b.n	8005288 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800520a:	f3ef 8305 	mrs	r3, IPSR
 800520e:	617b      	str	r3, [r7, #20]
  return(result);
 8005210:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8310 	mrs	r3, PRIMASK
 800521a:	613b      	str	r3, [r7, #16]
  return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005222:	f3ef 8311 	mrs	r3, BASEPRI
 8005226:	60fb      	str	r3, [r7, #12]
  return(result);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01e      	beq.n	800526c <osSemaphoreRelease+0x80>
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <osSemaphoreRelease+0xa8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d11a      	bne.n	800526c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	4619      	mov	r1, r3
 8005240:	69b8      	ldr	r0, [r7, #24]
 8005242:	f000 fea3 	bl	8005f8c <xQueueGiveFromISR>
 8005246:	4603      	mov	r3, r0
 8005248:	2b01      	cmp	r3, #1
 800524a:	d003      	beq.n	8005254 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800524c:	f06f 0302 	mvn.w	r3, #2
 8005250:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005252:	e018      	b.n	8005286 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d015      	beq.n	8005286 <osSemaphoreRelease+0x9a>
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <osSemaphoreRelease+0xac>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800526a:	e00c      	b.n	8005286 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800526c:	2300      	movs	r3, #0
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f000 fce4 	bl	8005c40 <xQueueGenericSend>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d004      	beq.n	8005288 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800527e:	f06f 0302 	mvn.w	r3, #2
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	e000      	b.n	8005288 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005286:	bf00      	nop
    }
  }

  return (stat);
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20005258 	.word	0x20005258
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ac:	f3ef 8305 	mrs	r3, IPSR
 80052b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80052b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d16f      	bne.n	8005398 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b8:	f3ef 8310 	mrs	r3, PRIMASK
 80052bc:	617b      	str	r3, [r7, #20]
  return(result);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052c4:	f3ef 8311 	mrs	r3, BASEPRI
 80052c8:	613b      	str	r3, [r7, #16]
  return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <osMessageQueueNew+0x3c>
 80052d0:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <osMessageQueueNew+0x108>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d05f      	beq.n	8005398 <osMessageQueueNew+0xfc>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d05c      	beq.n	8005398 <osMessageQueueNew+0xfc>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d059      	beq.n	8005398 <osMessageQueueNew+0xfc>
    mem = -1;
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295
 80052e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d029      	beq.n	8005344 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d012      	beq.n	800531e <osMessageQueueNew+0x82>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b4f      	cmp	r3, #79	; 0x4f
 80052fe:	d90e      	bls.n	800531e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <osMessageQueueNew+0x82>
        mem = 1;
 8005318:	2301      	movs	r3, #1
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	e014      	b.n	8005348 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d110      	bne.n	8005348 <osMessageQueueNew+0xac>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <osMessageQueueNew+0xac>
          mem = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	e001      	b.n	8005348 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10b      	bne.n	8005366 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2100      	movs	r1, #0
 8005358:	9100      	str	r1, [sp, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fa5b 	bl	8005818 <xQueueGenericCreateStatic>
 8005362:	6278      	str	r0, [r7, #36]	; 0x24
 8005364:	e008      	b.n	8005378 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800536c:	2200      	movs	r2, #0
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fad3 	bl	800591c <xQueueGenericCreate>
 8005376:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e001      	b.n	8005390 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005394:	f001 fa5e 	bl	8006854 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800539a:	4618      	mov	r0, r3
 800539c:	3728      	adds	r7, #40	; 0x28
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20005258 	.word	0x20005258

080053a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c0:	f3ef 8305 	mrs	r3, IPSR
 80053c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053c6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10f      	bne.n	80053ec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053cc:	f3ef 8310 	mrs	r3, PRIMASK
 80053d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d8:	f3ef 8311 	mrs	r3, BASEPRI
 80053dc:	617b      	str	r3, [r7, #20]
  return(result);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d02c      	beq.n	800543e <osMessageQueuePut+0x96>
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <osMessageQueuePut+0xe0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d128      	bne.n	800543e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <osMessageQueuePut+0x56>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <osMessageQueuePut+0x56>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80053fe:	f06f 0303 	mvn.w	r3, #3
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005404:	e039      	b.n	800547a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800540a:	f107 0210 	add.w	r2, r7, #16
 800540e:	2300      	movs	r3, #0
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6a38      	ldr	r0, [r7, #32]
 8005414:	f000 fd1a 	bl	8005e4c <xQueueGenericSendFromISR>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d003      	beq.n	8005426 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800541e:	f06f 0302 	mvn.w	r3, #2
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005424:	e029      	b.n	800547a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d026      	beq.n	800547a <osMessageQueuePut+0xd2>
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <osMessageQueuePut+0xe4>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800543c:	e01d      	b.n	800547a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <osMessageQueuePut+0xa2>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800544a:	f06f 0303 	mvn.w	r3, #3
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
 8005450:	e014      	b.n	800547c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005452:	2300      	movs	r3, #0
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	6a38      	ldr	r0, [r7, #32]
 800545a:	f000 fbf1 	bl	8005c40 <xQueueGenericSend>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d00b      	beq.n	800547c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800546a:	f06f 0301 	mvn.w	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	e004      	b.n	800547c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005472:	f06f 0302 	mvn.w	r3, #2
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	e000      	b.n	800547c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800547a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800547e:	4618      	mov	r0, r3
 8005480:	3728      	adds	r7, #40	; 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20005258 	.word	0x20005258
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a6:	f3ef 8305 	mrs	r3, IPSR
 80054aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80054ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b2:	f3ef 8310 	mrs	r3, PRIMASK
 80054b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054be:	f3ef 8311 	mrs	r3, BASEPRI
 80054c2:	617b      	str	r3, [r7, #20]
  return(result);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02c      	beq.n	8005524 <osMessageQueueGet+0x94>
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <osMessageQueueGet+0xdc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d128      	bne.n	8005524 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <osMessageQueueGet+0x54>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <osMessageQueueGet+0x54>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80054e4:	f06f 0303 	mvn.w	r3, #3
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054ea:	e038      	b.n	800555e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80054f0:	f107 0310 	add.w	r3, r7, #16
 80054f4:	461a      	mov	r2, r3
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6a38      	ldr	r0, [r7, #32]
 80054fa:	f000 ffd7 	bl	80064ac <xQueueReceiveFromISR>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d003      	beq.n	800550c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005504:	f06f 0302 	mvn.w	r3, #2
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800550a:	e028      	b.n	800555e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d025      	beq.n	800555e <osMessageQueueGet+0xce>
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <osMessageQueueGet+0xe0>)
 8005514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005522:	e01c      	b.n	800555e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <osMessageQueueGet+0xa0>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005530:	f06f 0303 	mvn.w	r3, #3
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	e013      	b.n	8005560 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	6a38      	ldr	r0, [r7, #32]
 800553e:	f000 fdbb 	bl	80060b8 <xQueueReceive>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d00b      	beq.n	8005560 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800554e:	f06f 0301 	mvn.w	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
 8005554:	e004      	b.n	8005560 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005556:	f06f 0302 	mvn.w	r3, #2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	e000      	b.n	8005560 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800555e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20005258 	.word	0x20005258
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <vApplicationGetIdleTaskMemory+0x30>)
 800558a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2280      	movs	r2, #128	; 0x80
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000525c 	.word	0x2000525c
 80055a4:	20005304 	.word	0x20005304

080055a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80055b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <vApplicationGetTimerTaskMemory+0x30>)
 80055be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20005504 	.word	0x20005504
 80055d8:	200055ac 	.word	0x200055ac

080055dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0208 	add.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 0208 	add.w	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e00c      	b.n	80056b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <vListInsert+0x2e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d2f6      	bcs.n	80056a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d103      	bne.n	8005724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10c      	bne.n	8005772 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	b672      	cpsid	i
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	b662      	cpsie	i
 800576c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005772:	f002 fdd3 	bl	800831c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	441a      	add	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	3b01      	subs	r3, #1
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d114      	bne.n	80057f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01a      	beq.n	8005806 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3310      	adds	r3, #16
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fd75 	bl	80072c4 <xTaskRemoveFromEventList>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d012      	beq.n	8005806 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <xQueueGenericReset+0xd0>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	e009      	b.n	8005806 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3310      	adds	r3, #16
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fef0 	bl	80055dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff feeb 	bl	80055dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005806:	f002 fdbd 	bl	8008384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800580a:	2301      	movs	r3, #1
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10c      	bne.n	8005846 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	b672      	cpsid	i
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	b662      	cpsie	i
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	b672      	cpsid	i
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	b662      	cpsie	i
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <xQueueGenericCreateStatic+0x5a>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <xQueueGenericCreateStatic+0x5e>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xQueueGenericCreateStatic+0x60>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	b672      	cpsid	i
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	b662      	cpsie	i
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <xQueueGenericCreateStatic+0x8a>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <xQueueGenericCreateStatic+0x8e>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <xQueueGenericCreateStatic+0x90>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10c      	bne.n	80058c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	b672      	cpsid	i
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	b662      	cpsie	i
 80058c0:	61fb      	str	r3, [r7, #28]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058c6:	2350      	movs	r3, #80	; 0x50
 80058c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d00c      	beq.n	80058ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	b672      	cpsid	i
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	b662      	cpsie	i
 80058e4:	61bb      	str	r3, [r7, #24]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f847 	bl	80059a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005914:	4618      	mov	r0, r3
 8005916:	3730      	adds	r7, #48	; 0x30
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10c      	bne.n	800594a <xQueueGenericCreate+0x2e>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	b672      	cpsid	i
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	b662      	cpsie	i
 8005944:	613b      	str	r3, [r7, #16]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	e004      	b.n	8005960 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3350      	adds	r3, #80	; 0x50
 8005964:	4618      	mov	r0, r3
 8005966:	f002 fe05 	bl	8008574 <pvPortMalloc>
 800596a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3350      	adds	r3, #80	; 0x50
 800597a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005984:	79fa      	ldrb	r2, [r7, #7]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f805 	bl	80059a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005996:	69bb      	ldr	r3, [r7, #24]
	}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d103      	bne.n	80059bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059ce:	2101      	movs	r1, #1
 80059d0:	69b8      	ldr	r0, [r7, #24]
 80059d2:	f7ff feb7 	bl	8005744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00e      	beq.n	8005a12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a06:	2300      	movs	r3, #0
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f917 	bl	8005c40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	4603      	mov	r3, r0
 8005a22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a24:	2301      	movs	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	6978      	ldr	r0, [r7, #20]
 8005a34:	f7ff ff72 	bl	800591c <xQueueGenericCreate>
 8005a38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff ffd3 	bl	80059e6 <prvInitialiseMutex>

		return xNewQueue;
 8005a40:	68fb      	ldr	r3, [r7, #12]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b088      	sub	sp, #32
 8005a4e:	af02      	add	r7, sp, #8
 8005a50:	4603      	mov	r3, r0
 8005a52:	6039      	str	r1, [r7, #0]
 8005a54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	6939      	ldr	r1, [r7, #16]
 8005a68:	6978      	ldr	r0, [r7, #20]
 8005a6a:	f7ff fed5 	bl	8005818 <xQueueGenericCreateStatic>
 8005a6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ffb8 	bl	80059e6 <prvInitialiseMutex>

		return xNewQueue;
 8005a76:	68fb      	ldr	r3, [r7, #12]
	}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	b672      	cpsid	i
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	b662      	cpsie	i
 8005aa6:	60fb      	str	r3, [r7, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	689c      	ldr	r4, [r3, #8]
 8005ab0:	f001 fdd2 	bl	8007658 <xTaskGetCurrentTaskHandle>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d111      	bne.n	8005ade <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005acc:	2300      	movs	r3, #0
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6938      	ldr	r0, [r7, #16]
 8005ad4:	f000 f8b4 	bl	8005c40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005ae2:	697b      	ldr	r3, [r7, #20]
	}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd90      	pop	{r4, r7, pc}

08005aec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10c      	bne.n	8005b1a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	b672      	cpsid	i
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	b662      	cpsie	i
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	689c      	ldr	r4, [r3, #8]
 8005b1e:	f001 fd9b 	bl	8007658 <xTaskGetCurrentTaskHandle>
 8005b22:	4603      	mov	r3, r0
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d107      	bne.n	8005b38 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005b32:	2301      	movs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e00c      	b.n	8005b52 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6938      	ldr	r0, [r7, #16]
 8005b3c:	f000 fba2 	bl	8006284 <xQueueSemaphoreTake>
 8005b40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005b52:	697b      	ldr	r3, [r7, #20]
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10c      	bne.n	8005b88 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	b672      	cpsid	i
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	b662      	cpsie	i
 8005b82:	61bb      	str	r3, [r7, #24]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d90c      	bls.n	8005baa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	617b      	str	r3, [r7, #20]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005baa:	2302      	movs	r3, #2
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fe2f 	bl	8005818 <xQueueGenericCreateStatic>
 8005bba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	b672      	cpsid	i
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	b662      	cpsie	i
 8005bf6:	613b      	str	r3, [r7, #16]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90c      	bls.n	8005c1e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	b672      	cpsid	i
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	b662      	cpsie	i
 8005c18:	60fb      	str	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c1e:	2202      	movs	r2, #2
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fe7a 	bl	800591c <xQueueGenericCreate>
 8005c28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c36:	697b      	ldr	r3, [r7, #20]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10c      	bne.n	8005c76 <xQueueGenericSend+0x36>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	b672      	cpsid	i
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	b662      	cpsie	i
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <xQueueGenericSend+0x44>
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <xQueueGenericSend+0x48>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <xQueueGenericSend+0x4a>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <xQueueGenericSend+0x68>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	b672      	cpsid	i
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	b662      	cpsie	i
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d103      	bne.n	8005cb6 <xQueueGenericSend+0x76>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <xQueueGenericSend+0x7a>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <xQueueGenericSend+0x7c>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10c      	bne.n	8005cda <xQueueGenericSend+0x9a>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	b672      	cpsid	i
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	b662      	cpsie	i
 8005cd4:	623b      	str	r3, [r7, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cda:	f001 fccd 	bl	8007678 <xTaskGetSchedulerState>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <xQueueGenericSend+0xaa>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <xQueueGenericSend+0xae>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <xQueueGenericSend+0xb0>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <xQueueGenericSend+0xce>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	61fb      	str	r3, [r7, #28]
}
 8005d0a:	bf00      	nop
 8005d0c:	e7fe      	b.n	8005d0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d0e:	f002 fb05 	bl	800831c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <xQueueGenericSend+0xe4>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d129      	bne.n	8005d78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2a:	f000 fc82 	bl	8006632 <prvCopyDataToQueue>
 8005d2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	3324      	adds	r3, #36	; 0x24
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fac1 	bl	80072c4 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d48:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <xQueueGenericSend+0x208>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	e00a      	b.n	8005d70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <xQueueGenericSend+0x208>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d70:	f002 fb08 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e063      	b.n	8005e40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f002 fb01 	bl	8008384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e05c      	b.n	8005e40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fafd 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f002 faf3 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f001 f84b 	bl	8006e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f002 fabb 	bl	800831c <vPortEnterCritical>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <xQueueGenericSend+0x17c>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x192>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd2:	f002 fad7 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 faec 	bl	80073bc <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d124      	bne.n	8005e34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dec:	f000 fd19 	bl	8006822 <prvIsQueueFull>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	3310      	adds	r3, #16
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fa0c 	bl	800721c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e06:	f000 fca4 	bl	8006752 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f001 f823 	bl	8006e54 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af7c 	bne.w	8005d0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <xQueueGenericSend+0x208>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	e772      	b.n	8005d0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2a:	f000 fc92 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2e:	f001 f811 	bl	8006e54 <xTaskResumeAll>
 8005e32:	e76c      	b.n	8005d0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e36:	f000 fc8c 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3a:	f001 f80b 	bl	8006e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3738      	adds	r7, #56	; 0x38
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <xQueueGenericSendFromISR+0x40>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <xQueueGenericSendFromISR+0x44>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <xQueueGenericSendFromISR+0x46>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	b672      	cpsid	i
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	b662      	cpsie	i
 8005eaa:	623b      	str	r3, [r7, #32]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d103      	bne.n	8005ebe <xQueueGenericSendFromISR+0x72>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <xQueueGenericSendFromISR+0x76>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericSendFromISR+0x78>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	61fb      	str	r3, [r7, #28]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ee2:	f002 fb03 	bl	80084ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	b672      	cpsid	i
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	b662      	cpsie	i
 8005efe:	61ba      	str	r2, [r7, #24]
 8005f00:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f02:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <xQueueGenericSendFromISR+0xcc>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d12c      	bne.n	8005f72 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f28:	f000 fb83 	bl	8006632 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d112      	bne.n	8005f5c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 f9be 	bl	80072c4 <xTaskRemoveFromEventList>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e007      	b.n	8005f6c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f60:	3301      	adds	r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	b25a      	sxtb	r2, r3
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f70:	e001      	b.n	8005f76 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3738      	adds	r7, #56	; 0x38
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	b672      	cpsid	i
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	b662      	cpsie	i
 8005fb4:	623b      	str	r3, [r7, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <xQueueGiveFromISR+0x50>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	b672      	cpsid	i
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	b662      	cpsie	i
 8005fd6:	61fb      	str	r3, [r7, #28]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <xQueueGiveFromISR+0x60>
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <xQueueGiveFromISR+0x64>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <xQueueGiveFromISR+0x66>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10c      	bne.n	8006010 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	b672      	cpsid	i
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	b662      	cpsie	i
 800600a:	61bb      	str	r3, [r7, #24]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006010:	f002 fa6c 	bl	80084ec <vPortValidateInterruptPriority>
	__asm volatile
 8006014:	f3ef 8211 	mrs	r2, BASEPRI
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	617a      	str	r2, [r7, #20]
 800602e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006030:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006040:	429a      	cmp	r2, r3
 8006042:	d22b      	bcs.n	800609c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800604a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d112      	bne.n	8006086 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d016      	beq.n	8006096 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	4618      	mov	r0, r3
 800606e:	f001 f929 	bl	80072c4 <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e007      	b.n	8006096 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800608a:	3301      	adds	r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	b25a      	sxtb	r2, r3
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006096:	2301      	movs	r3, #1
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	e001      	b.n	80060a0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f383 8811 	msr	BASEPRI, r3
}
 80060aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3738      	adds	r7, #56	; 0x38
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10c      	bne.n	80060ec <xQueueReceive+0x34>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	b672      	cpsid	i
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	b662      	cpsie	i
 80060e6:	623b      	str	r3, [r7, #32]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <xQueueReceive+0x42>
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueReceive+0x46>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xQueueReceive+0x48>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10c      	bne.n	800611e <xQueueReceive+0x66>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	b672      	cpsid	i
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	b662      	cpsie	i
 8006118:	61fb      	str	r3, [r7, #28]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800611e:	f001 faab 	bl	8007678 <xTaskGetSchedulerState>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <xQueueReceive+0x76>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <xQueueReceive+0x7a>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueReceive+0x7c>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10c      	bne.n	8006152 <xQueueReceive+0x9a>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	b672      	cpsid	i
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	b662      	cpsie	i
 800614c:	61bb      	str	r3, [r7, #24]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006152:	f002 f8e3 	bl	800831c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01f      	beq.n	80061a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006166:	f000 face 	bl	8006706 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00f      	beq.n	800619a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	3310      	adds	r3, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f001 f8a0 	bl	80072c4 <xTaskRemoveFromEventList>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800618a:	4b3d      	ldr	r3, [pc, #244]	; (8006280 <xQueueReceive+0x1c8>)
 800618c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800619a:	f002 f8f3 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	e069      	b.n	8006276 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061a8:	f002 f8ec 	bl	8008384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e062      	b.n	8006276 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b6:	f107 0310 	add.w	r3, r7, #16
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f8e8 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c4:	f002 f8de 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c8:	f000 fe36 	bl	8006e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061cc:	f002 f8a6 	bl	800831c <vPortEnterCritical>
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d103      	bne.n	80061e6 <xQueueReceive+0x12e>
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d103      	bne.n	80061fc <xQueueReceive+0x144>
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	f002 f8c2 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006200:	1d3a      	adds	r2, r7, #4
 8006202:	f107 0310 	add.w	r3, r7, #16
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f8d7 	bl	80073bc <xTaskCheckForTimeOut>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d123      	bne.n	800625c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 faee 	bl	80067f6 <prvIsQueueEmpty>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fff7 	bl	800721c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800622e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006230:	f000 fa8f 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006234:	f000 fe0e 	bl	8006e54 <xTaskResumeAll>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d189      	bne.n	8006152 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <xQueueReceive+0x1c8>)
 8006240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	e780      	b.n	8006152 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006252:	f000 fa7e 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006256:	f000 fdfd 	bl	8006e54 <xTaskResumeAll>
 800625a:	e77a      	b.n	8006152 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800625c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800625e:	f000 fa78 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006262:	f000 fdf7 	bl	8006e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006268:	f000 fac5 	bl	80067f6 <prvIsQueueEmpty>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	f43f af6f 	beq.w	8006152 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006276:	4618      	mov	r0, r3
 8006278:	3730      	adds	r7, #48	; 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	b672      	cpsid	i
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	b662      	cpsie	i
 80062b4:	623b      	str	r3, [r7, #32]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	b672      	cpsid	i
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	b662      	cpsie	i
 80062d6:	61fb      	str	r3, [r7, #28]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062dc:	f001 f9cc 	bl	8007678 <xTaskGetSchedulerState>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <xQueueSemaphoreTake+0x68>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <xQueueSemaphoreTake+0x6c>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <xQueueSemaphoreTake+0x6e>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10c      	bne.n	8006310 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	b672      	cpsid	i
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	b662      	cpsie	i
 800630a:	61bb      	str	r3, [r7, #24]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006310:	f002 f804 	bl	800831c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	d024      	beq.n	800636a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006330:	f001 fb20 	bl	8007974 <pvTaskIncrementMutexHeldCount>
 8006334:	4602      	mov	r2, r0
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00f      	beq.n	8006362 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	3310      	adds	r3, #16
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ffbc 	bl	80072c4 <xTaskRemoveFromEventList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006352:	4b55      	ldr	r3, [pc, #340]	; (80064a8 <xQueueSemaphoreTake+0x224>)
 8006354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006362:	f002 f80f 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 8006366:	2301      	movs	r3, #1
 8006368:	e099      	b.n	800649e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d113      	bne.n	8006398 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00c      	beq.n	8006390 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	b672      	cpsid	i
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	b662      	cpsie	i
 800638a:	617b      	str	r3, [r7, #20]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006390:	f001 fff8 	bl	8008384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006394:	2300      	movs	r3, #0
 8006396:	e082      	b.n	800649e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fff4 	bl	8007390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063ac:	f001 ffea 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b0:	f000 fd42 	bl	8006e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b4:	f001 ffb2 	bl	800831c <vPortEnterCritical>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d103      	bne.n	80063ce <xQueueSemaphoreTake+0x14a>
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d103      	bne.n	80063e4 <xQueueSemaphoreTake+0x160>
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e4:	f001 ffce 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e8:	463a      	mov	r2, r7
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 ffe3 	bl	80073bc <xTaskCheckForTimeOut>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d132      	bne.n	8006462 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fe:	f000 f9fa 	bl	80067f6 <prvIsQueueEmpty>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d026      	beq.n	8006456 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006410:	f001 ff84 	bl	800831c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f94b 	bl	80076b4 <xTaskPriorityInherit>
 800641e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006420:	f001 ffb0 	bl	8008384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	4611      	mov	r1, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fef5 	bl	800721c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006434:	f000 f98d 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006438:	f000 fd0c 	bl	8006e54 <xTaskResumeAll>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f af66 	bne.w	8006310 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006444:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <xQueueSemaphoreTake+0x224>)
 8006446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	e75c      	b.n	8006310 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006458:	f000 f97b 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645c:	f000 fcfa 	bl	8006e54 <xTaskResumeAll>
 8006460:	e756      	b.n	8006310 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006464:	f000 f975 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006468:	f000 fcf4 	bl	8006e54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800646c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800646e:	f000 f9c2 	bl	80067f6 <prvIsQueueEmpty>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	f43f af4b 	beq.w	8006310 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00d      	beq.n	800649c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006480:	f001 ff4c 	bl	800831c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006486:	f000 f8bc 	bl	8006602 <prvGetDisinheritPriorityAfterTimeout>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006492:	4618      	mov	r0, r3
 8006494:	f001 f9e8 	bl	8007868 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006498:	f001 ff74 	bl	8008384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800649c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3738      	adds	r7, #56	; 0x38
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10c      	bne.n	80064dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	b672      	cpsid	i
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	b662      	cpsie	i
 80064d6:	623b      	str	r3, [r7, #32]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <xQueueReceiveFromISR+0x3e>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <xQueueReceiveFromISR+0x42>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueReceiveFromISR+0x44>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10c      	bne.n	800650e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	61fb      	str	r3, [r7, #28]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800650e:	f001 ffed 	bl	80084ec <vPortValidateInterruptPriority>
	__asm volatile
 8006512:	f3ef 8211 	mrs	r2, BASEPRI
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	61ba      	str	r2, [r7, #24]
 800652c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800652e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02f      	beq.n	800659e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654c:	f000 f8db 	bl	8006706 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	1e5a      	subs	r2, r3, #1
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d112      	bne.n	8006588 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	3310      	adds	r3, #16
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fea8 	bl	80072c4 <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	e007      	b.n	8006598 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800658c:	3301      	adds	r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	b25a      	sxtb	r2, r3
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
 800659c:	e001      	b.n	80065a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800659e:	2300      	movs	r3, #0
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f383 8811 	msr	BASEPRI, r3
}
 80065ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3738      	adds	r7, #56	; 0x38
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <vQueueDelete+0x2c>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	b672      	cpsid	i
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	b662      	cpsie	i
 80065de:	60bb      	str	r3, [r7, #8]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f95f 	bl	80068a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f002 f887 	bl	8008708 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e001      	b.n	8006624 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006624:	68fb      	ldr	r3, [r7, #12]
	}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14d      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4618      	mov	r0, r3
 800665e:	f001 f891 	bl	8007784 <xTaskPriorityDisinherit>
 8006662:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	e043      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6858      	ldr	r0, [r3, #4]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	461a      	mov	r2, r3
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	f00e fd34 	bl	80150ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d32b      	bcc.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	e026      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68d8      	ldr	r0, [r3, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	461a      	mov	r2, r3
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	f00e fd1a 	bl	80150ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	425b      	negs	r3, r3
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d207      	bcs.n	80066e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	425b      	negs	r3, r3
 80066dc:	441a      	add	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d105      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d303      	bcc.n	800673a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	461a      	mov	r2, r3
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f00e fcd0 	bl	80150ea <memcpy>
	}
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800675a:	f001 fddf 	bl	800831c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006764:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006766:	e011      	b.n	800678c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fda5 	bl	80072c4 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006780:	f000 fe82 	bl	8007488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	3b01      	subs	r3, #1
 8006788:	b2db      	uxtb	r3, r3
 800678a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dce9      	bgt.n	8006768 <prvUnlockQueue+0x16>
 8006794:	e000      	b.n	8006798 <prvUnlockQueue+0x46>
					break;
 8006796:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	22ff      	movs	r2, #255	; 0xff
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a0:	f001 fdf0 	bl	8008384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a4:	f001 fdba 	bl	800831c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b0:	e011      	b.n	80067d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3310      	adds	r3, #16
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd80 	bl	80072c4 <xTaskRemoveFromEventList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067ca:	f000 fe5d 	bl	8007488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dce9      	bgt.n	80067b2 <prvUnlockQueue+0x60>
 80067de:	e000      	b.n	80067e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067ea:	f001 fdcb 	bl	8008384 <vPortExitCritical>
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fe:	f001 fd8d 	bl	800831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e001      	b.n	8006814 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006814:	f001 fdb6 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800682a:	f001 fd77 	bl	800831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	429a      	cmp	r2, r3
 8006838:	d102      	bne.n	8006840 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e001      	b.n	8006844 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fd9e 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e014      	b.n	800688e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006864:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <vQueueAddToRegistry+0x50>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006886:	e006      	b.n	8006896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b07      	cmp	r3, #7
 8006892:	d9e7      	bls.n	8006864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200059ac 	.word	0x200059ac

080068a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e016      	b.n	80068e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068b6:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4413      	add	r3, r2
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d10b      	bne.n	80068de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068c6:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2100      	movs	r1, #0
 80068cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068d0:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
				break;
 80068dc:	e006      	b.n	80068ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b07      	cmp	r3, #7
 80068e8:	d9e5      	bls.n	80068b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	200059ac 	.word	0x200059ac

080068fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800690c:	f001 fd06 	bl	800831c <vPortEnterCritical>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006916:	b25b      	sxtb	r3, r3
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d103      	bne.n	8006926 <vQueueWaitForMessageRestricted+0x2a>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692c:	b25b      	sxtb	r3, r3
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d103      	bne.n	800693c <vQueueWaitForMessageRestricted+0x40>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800693c:	f001 fd22 	bl	8008384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3324      	adds	r3, #36	; 0x24
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fc89 	bl	8007268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f7ff fefb 	bl	8006752 <prvUnlockQueue>
	}
 800695c:	bf00      	nop
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af04      	add	r7, sp, #16
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10c      	bne.n	8006992 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	b672      	cpsid	i
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	b662      	cpsie	i
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10c      	bne.n	80069b2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	b672      	cpsid	i
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	b662      	cpsie	i
 80069ac:	61fb      	str	r3, [r7, #28]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b2:	23a8      	movs	r3, #168	; 0xa8
 80069b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2ba8      	cmp	r3, #168	; 0xa8
 80069ba:	d00c      	beq.n	80069d6 <xTaskCreateStatic+0x72>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	b672      	cpsid	i
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	b662      	cpsie	i
 80069d0:	61bb      	str	r3, [r7, #24]
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01e      	beq.n	8006a1c <xTaskCreateStatic+0xb8>
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069f6:	2300      	movs	r3, #0
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	9302      	str	r3, [sp, #8]
 80069fe:	f107 0314 	add.w	r3, r7, #20
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f850 	bl	8006ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a16:	f000 f8f5 	bl	8006c04 <prvAddNewTaskToReadyList>
 8006a1a:	e001      	b.n	8006a20 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a20:	697b      	ldr	r3, [r7, #20]
	}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3728      	adds	r7, #40	; 0x28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b08c      	sub	sp, #48	; 0x30
 8006a2e:	af04      	add	r7, sp, #16
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fd98 	bl	8008574 <pvPortMalloc>
 8006a44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a4c:	20a8      	movs	r0, #168	; 0xa8
 8006a4e:	f001 fd91 	bl	8008574 <pvPortMalloc>
 8006a52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a60:	e005      	b.n	8006a6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f001 fe50 	bl	8008708 <vPortFree>
 8006a68:	e001      	b.n	8006a6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	9302      	str	r3, [sp, #8]
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f80e 	bl	8006ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a98:	69f8      	ldr	r0, [r7, #28]
 8006a9a:	f000 f8b3 	bl	8006c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e002      	b.n	8006aaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	461a      	mov	r2, r3
 8006acc:	21a5      	movs	r1, #165	; 0xa5
 8006ace:	f00e fa40 	bl	8014f52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006adc:	440b      	add	r3, r1
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f023 0307 	bic.w	r3, r3, #7
 8006aea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	b672      	cpsid	i
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	b662      	cpsie	i
 8006b0a:	617b      	str	r3, [r7, #20]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01f      	beq.n	8006b56 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	e012      	b.n	8006b42 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	7819      	ldrb	r1, [r3, #0]
 8006b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	3334      	adds	r3, #52	; 0x34
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b0f      	cmp	r3, #15
 8006b46:	d9e9      	bls.n	8006b1c <prvInitialiseNewTask+0x68>
 8006b48:	e000      	b.n	8006b4c <prvInitialiseNewTask+0x98>
			{
				break;
 8006b4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b54:	e003      	b.n	8006b5e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2b37      	cmp	r3, #55	; 0x37
 8006b62:	d901      	bls.n	8006b68 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b64:	2337      	movs	r3, #55	; 0x37
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	2200      	movs	r2, #0
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fd4c 	bl	800561c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fd47 	bl	800561c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3354      	adds	r3, #84	; 0x54
 8006bb8:	224c      	movs	r2, #76	; 0x4c
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f00e f9c8 	bl	8014f52 <memset>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <prvInitialiseNewTask+0x144>)
 8006bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <prvInitialiseNewTask+0x148>)
 8006bcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <prvInitialiseNewTask+0x14c>)
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	69b8      	ldr	r0, [r7, #24]
 8006bda:	f001 fa8f 	bl	80080fc <pxPortInitialiseStack>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	2000d550 	.word	0x2000d550
 8006bfc:	2000d5b8 	.word	0x2000d5b8
 8006c00:	2000d620 	.word	0x2000d620

08006c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c0c:	f001 fb86 	bl	800831c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c10:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c1a:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d110      	bne.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c30:	f000 fc4e 	bl	80074d0 <prvInitialiseTaskLists>
 8006c34:	e00d      	b.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <prvAddNewTaskToReadyList+0xcc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d802      	bhi.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c52:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <prvAddNewTaskToReadyList+0xd4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d903      	bls.n	8006c78 <prvAddNewTaskToReadyList+0x74>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <prvAddNewTaskToReadyList+0xd4>)
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <prvAddNewTaskToReadyList+0xd8>)
 8006c86:	441a      	add	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fe fcd1 	bl	8005636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c94:	f001 fb76 	bl	8008384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <prvAddNewTaskToReadyList+0xcc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d207      	bcs.n	8006cbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <prvAddNewTaskToReadyList+0xdc>)
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20005ec0 	.word	0x20005ec0
 8006ccc:	200059ec 	.word	0x200059ec
 8006cd0:	20005ecc 	.word	0x20005ecc
 8006cd4:	20005edc 	.word	0x20005edc
 8006cd8:	20005ec8 	.word	0x20005ec8
 8006cdc:	200059f0 	.word	0x200059f0
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d019      	beq.n	8006d2a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <vTaskDelay+0x64>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <vTaskDelay+0x34>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d18:	f000 f88e 	bl	8006e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fe3c 	bl	800799c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d24:	f000 f896 	bl	8006e54 <xTaskResumeAll>
 8006d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <vTaskDelay+0x68>)
 8006d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20005ee8 	.word	0x20005ee8
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d5e:	463a      	mov	r2, r7
 8006d60:	1d39      	adds	r1, r7, #4
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fc04 	bl	8005574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	4926      	ldr	r1, [pc, #152]	; (8006e18 <vTaskStartScheduler+0xc8>)
 8006d80:	4826      	ldr	r0, [pc, #152]	; (8006e1c <vTaskStartScheduler+0xcc>)
 8006d82:	f7ff fdef 	bl	8006964 <xTaskCreateStatic>
 8006d86:	4603      	mov	r3, r0
 8006d88:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <vTaskStartScheduler+0xd0>)
 8006d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d8c:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <vTaskStartScheduler+0xd0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e001      	b.n	8006d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d102      	bne.n	8006daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006da4:	f000 fe4e 	bl	8007a44 <xTimerCreateTimerTask>
 8006da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d11d      	bne.n	8006dec <vTaskStartScheduler+0x9c>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	b672      	cpsid	i
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	b662      	cpsie	i
 8006dc4:	613b      	str	r3, [r7, #16]
}
 8006dc6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dc8:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <vTaskStartScheduler+0xd4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3354      	adds	r3, #84	; 0x54
 8006dce:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <vTaskStartScheduler+0xd8>)
 8006dd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd2:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <vTaskStartScheduler+0xdc>)
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <vTaskStartScheduler+0xe0>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006de0:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <vTaskStartScheduler+0xe4>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006de6:	f001 fa1b 	bl	8008220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dea:	e010      	b.n	8006e0e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d10c      	bne.n	8006e0e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	b672      	cpsid	i
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	b662      	cpsie	i
 8006e08:	60fb      	str	r3, [r7, #12]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <vTaskStartScheduler+0xbc>
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	08015de0 	.word	0x08015de0
 8006e1c:	080074a1 	.word	0x080074a1
 8006e20:	20005ee4 	.word	0x20005ee4
 8006e24:	200059ec 	.word	0x200059ec
 8006e28:	20000078 	.word	0x20000078
 8006e2c:	20005ee0 	.word	0x20005ee0
 8006e30:	20005ecc 	.word	0x20005ecc
 8006e34:	20005ec4 	.word	0x20005ec4

08006e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vTaskSuspendAll+0x18>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	4a03      	ldr	r2, [pc, #12]	; (8006e50 <vTaskSuspendAll+0x18>)
 8006e44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e46:	bf00      	nop
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20005ee8 	.word	0x20005ee8

08006e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e62:	4b43      	ldr	r3, [pc, #268]	; (8006f70 <xTaskResumeAll+0x11c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10c      	bne.n	8006e84 <xTaskResumeAll+0x30>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	b672      	cpsid	i
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	b662      	cpsie	i
 8006e7e:	603b      	str	r3, [r7, #0]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e84:	f001 fa4a 	bl	800831c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e88:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <xTaskResumeAll+0x11c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	4a38      	ldr	r2, [pc, #224]	; (8006f70 <xTaskResumeAll+0x11c>)
 8006e90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e92:	4b37      	ldr	r3, [pc, #220]	; (8006f70 <xTaskResumeAll+0x11c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d162      	bne.n	8006f60 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e9a:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <xTaskResumeAll+0x120>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d05e      	beq.n	8006f60 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ea2:	e02f      	b.n	8006f04 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea4:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <xTaskResumeAll+0x124>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fc1d 	bl	80056f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fc18 	bl	80056f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <xTaskResumeAll+0x128>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d903      	bls.n	8006ed4 <xTaskResumeAll+0x80>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	; (8006f7c <xTaskResumeAll+0x128>)
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <xTaskResumeAll+0x12c>)
 8006ee2:	441a      	add	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f7fe fba3 	bl	8005636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4b23      	ldr	r3, [pc, #140]	; (8006f84 <xTaskResumeAll+0x130>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <xTaskResumeAll+0x134>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <xTaskResumeAll+0x124>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1cb      	bne.n	8006ea4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f12:	f000 fb81 	bl	8007618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <xTaskResumeAll+0x138>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d010      	beq.n	8006f44 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f22:	f000 f859 	bl	8006fd8 <xTaskIncrementTick>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006f2c:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <xTaskResumeAll+0x134>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f1      	bne.n	8006f22 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	; (8006f8c <xTaskResumeAll+0x138>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <xTaskResumeAll+0x134>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <xTaskResumeAll+0x13c>)
 8006f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f60:	f001 fa10 	bl	8008384 <vPortExitCritical>

	return xAlreadyYielded;
 8006f64:	68bb      	ldr	r3, [r7, #8]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20005ee8 	.word	0x20005ee8
 8006f74:	20005ec0 	.word	0x20005ec0
 8006f78:	20005e80 	.word	0x20005e80
 8006f7c:	20005ec8 	.word	0x20005ec8
 8006f80:	200059f0 	.word	0x200059f0
 8006f84:	200059ec 	.word	0x200059ec
 8006f88:	20005ed4 	.word	0x20005ed4
 8006f8c:	20005ed0 	.word	0x20005ed0
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <xTaskGetTickCount+0x1c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fa0:	687b      	ldr	r3, [r7, #4]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20005ec4 	.word	0x20005ec4

08006fb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fba:	f001 fa97 	bl	80084ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <xTaskGetTickCountFromISR+0x20>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fc8:	683b      	ldr	r3, [r7, #0]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20005ec4 	.word	0x20005ec4

08006fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe2:	4b50      	ldr	r3, [pc, #320]	; (8007124 <xTaskIncrementTick+0x14c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 808b 	bne.w	8007102 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fec:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <xTaskIncrementTick+0x150>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ff4:	4a4c      	ldr	r2, [pc, #304]	; (8007128 <xTaskIncrementTick+0x150>)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d122      	bne.n	8007046 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007000:	4b4a      	ldr	r3, [pc, #296]	; (800712c <xTaskIncrementTick+0x154>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <xTaskIncrementTick+0x4c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	b672      	cpsid	i
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	b662      	cpsie	i
 800701e:	603b      	str	r3, [r7, #0]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xTaskIncrementTick+0x4a>
 8007024:	4b41      	ldr	r3, [pc, #260]	; (800712c <xTaskIncrementTick+0x154>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	4b41      	ldr	r3, [pc, #260]	; (8007130 <xTaskIncrementTick+0x158>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3f      	ldr	r2, [pc, #252]	; (800712c <xTaskIncrementTick+0x154>)
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4a3f      	ldr	r2, [pc, #252]	; (8007130 <xTaskIncrementTick+0x158>)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <xTaskIncrementTick+0x15c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3301      	adds	r3, #1
 800703e:	4a3d      	ldr	r2, [pc, #244]	; (8007134 <xTaskIncrementTick+0x15c>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	f000 fae9 	bl	8007618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007046:	4b3c      	ldr	r3, [pc, #240]	; (8007138 <xTaskIncrementTick+0x160>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d349      	bcc.n	80070e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007050:	4b36      	ldr	r3, [pc, #216]	; (800712c <xTaskIncrementTick+0x154>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <xTaskIncrementTick+0x160>)
 800705c:	f04f 32ff 	mov.w	r2, #4294967295
 8007060:	601a      	str	r2, [r3, #0]
					break;
 8007062:	e03f      	b.n	80070e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007064:	4b31      	ldr	r3, [pc, #196]	; (800712c <xTaskIncrementTick+0x154>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d203      	bcs.n	8007084 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800707c:	4a2e      	ldr	r2, [pc, #184]	; (8007138 <xTaskIncrementTick+0x160>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007082:	e02f      	b.n	80070e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3304      	adds	r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fb31 	bl	80056f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	3318      	adds	r3, #24
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fb28 	bl	80056f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <xTaskIncrementTick+0x164>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d903      	bls.n	80070b4 <xTaskIncrementTick+0xdc>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	4a22      	ldr	r2, [pc, #136]	; (800713c <xTaskIncrementTick+0x164>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <xTaskIncrementTick+0x168>)
 80070c2:	441a      	add	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fe fab3 	bl	8005636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <xTaskIncrementTick+0x16c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d3b8      	bcc.n	8007050 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e2:	e7b5      	b.n	8007050 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <xTaskIncrementTick+0x16c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4915      	ldr	r1, [pc, #84]	; (8007140 <xTaskIncrementTick+0x168>)
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d907      	bls.n	800710c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e004      	b.n	800710c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007102:	4b11      	ldr	r3, [pc, #68]	; (8007148 <xTaskIncrementTick+0x170>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <xTaskIncrementTick+0x170>)
 800710a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <xTaskIncrementTick+0x174>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20005ee8 	.word	0x20005ee8
 8007128:	20005ec4 	.word	0x20005ec4
 800712c:	20005e78 	.word	0x20005e78
 8007130:	20005e7c 	.word	0x20005e7c
 8007134:	20005ed8 	.word	0x20005ed8
 8007138:	20005ee0 	.word	0x20005ee0
 800713c:	20005ec8 	.word	0x20005ec8
 8007140:	200059f0 	.word	0x200059f0
 8007144:	200059ec 	.word	0x200059ec
 8007148:	20005ed0 	.word	0x20005ed0
 800714c:	20005ed4 	.word	0x20005ed4

08007150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007156:	4b2b      	ldr	r3, [pc, #172]	; (8007204 <vTaskSwitchContext+0xb4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800715e:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <vTaskSwitchContext+0xb8>)
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007164:	e048      	b.n	80071f8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007166:	4b28      	ldr	r3, [pc, #160]	; (8007208 <vTaskSwitchContext+0xb8>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716c:	4b27      	ldr	r3, [pc, #156]	; (800720c <vTaskSwitchContext+0xbc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e012      	b.n	800719a <vTaskSwitchContext+0x4a>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10c      	bne.n	8007194 <vTaskSwitchContext+0x44>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	b672      	cpsid	i
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	b662      	cpsie	i
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vTaskSwitchContext+0x42>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	491d      	ldr	r1, [pc, #116]	; (8007210 <vTaskSwitchContext+0xc0>)
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0e2      	beq.n	8007174 <vTaskSwitchContext+0x24>
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <vTaskSwitchContext+0xc0>)
 80071ba:	4413      	add	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3308      	adds	r3, #8
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <vTaskSwitchContext+0x8e>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <vTaskSwitchContext+0xc4>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <vTaskSwitchContext+0xbc>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <vTaskSwitchContext+0xc4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3354      	adds	r3, #84	; 0x54
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <vTaskSwitchContext+0xc8>)
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20005ee8 	.word	0x20005ee8
 8007208:	20005ed4 	.word	0x20005ed4
 800720c:	20005ec8 	.word	0x20005ec8
 8007210:	200059f0 	.word	0x200059f0
 8007214:	200059ec 	.word	0x200059ec
 8007218:	20000078 	.word	0x20000078

0800721c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	b672      	cpsid	i
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	b662      	cpsie	i
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <vTaskPlaceOnEventList+0x48>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3318      	adds	r3, #24
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fe fa15 	bl	800567e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007254:	2101      	movs	r1, #1
 8007256:	6838      	ldr	r0, [r7, #0]
 8007258:	f000 fba0 	bl	800799c <prvAddCurrentTaskToDelayedList>
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200059ec 	.word	0x200059ec

08007268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	b672      	cpsid	i
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	b662      	cpsie	i
 800728e:	617b      	str	r3, [r7, #20]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <vTaskPlaceOnEventListRestricted+0x58>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3318      	adds	r3, #24
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7fe f9ca 	bl	8005636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	68b8      	ldr	r0, [r7, #8]
 80072b2:	f000 fb73 	bl	800799c <prvAddCurrentTaskToDelayedList>
	}
 80072b6:	bf00      	nop
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	200059ec 	.word	0x200059ec

080072c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10c      	bne.n	80072f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	60fb      	str	r3, [r7, #12]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	3318      	adds	r3, #24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe f9f9 	bl	80056f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072fe:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <xTaskRemoveFromEventList+0xb4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d11d      	bne.n	8007342 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	3304      	adds	r3, #4
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe f9f0 	bl	80056f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <xTaskRemoveFromEventList+0xb8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d903      	bls.n	8007324 <xTaskRemoveFromEventList+0x60>
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	4a16      	ldr	r2, [pc, #88]	; (800737c <xTaskRemoveFromEventList+0xb8>)
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <xTaskRemoveFromEventList+0xbc>)
 8007332:	441a      	add	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f7fe f97b 	bl	8005636 <vListInsertEnd>
 8007340:	e005      	b.n	800734e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3318      	adds	r3, #24
 8007346:	4619      	mov	r1, r3
 8007348:	480e      	ldr	r0, [pc, #56]	; (8007384 <xTaskRemoveFromEventList+0xc0>)
 800734a:	f7fe f974 	bl	8005636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007352:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <xTaskRemoveFromEventList+0xc4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	429a      	cmp	r2, r3
 800735a:	d905      	bls.n	8007368 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007360:	4b0a      	ldr	r3, [pc, #40]	; (800738c <xTaskRemoveFromEventList+0xc8>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e001      	b.n	800736c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800736c:	697b      	ldr	r3, [r7, #20]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20005ee8 	.word	0x20005ee8
 800737c:	20005ec8 	.word	0x20005ec8
 8007380:	200059f0 	.word	0x200059f0
 8007384:	20005e80 	.word	0x20005e80
 8007388:	200059ec 	.word	0x200059ec
 800738c:	20005ed4 	.word	0x20005ed4

08007390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <vTaskInternalSetTimeOutState+0x24>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <vTaskInternalSetTimeOutState+0x28>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20005ed8 	.word	0x20005ed8
 80073b8:	20005ec4 	.word	0x20005ec4

080073bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10c      	bne.n	8007406 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	b672      	cpsid	i
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	b662      	cpsie	i
 8007400:	60fb      	str	r3, [r7, #12]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007406:	f000 ff89 	bl	800831c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <xTaskCheckForTimeOut+0xc4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d102      	bne.n	800742a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	e023      	b.n	8007472 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <xTaskCheckForTimeOut+0xc8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d007      	beq.n	8007446 <xTaskCheckForTimeOut+0x8a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e015      	b.n	8007472 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	429a      	cmp	r2, r3
 800744e:	d20b      	bcs.n	8007468 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff97 	bl	8007390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e004      	b.n	8007472 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f000 ff87 	bl	8008384 <vPortExitCritical>

	return xReturn;
 8007476:	69fb      	ldr	r3, [r7, #28]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20005ec4 	.word	0x20005ec4
 8007484:	20005ed8 	.word	0x20005ed8

08007488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800748c:	4b03      	ldr	r3, [pc, #12]	; (800749c <vTaskMissedYield+0x14>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20005ed4 	.word	0x20005ed4

080074a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a8:	f000 f852 	bl	8007550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <prvIdleTask+0x28>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d9f9      	bls.n	80074a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <prvIdleTask+0x2c>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c4:	e7f0      	b.n	80074a8 <prvIdleTask+0x8>
 80074c6:	bf00      	nop
 80074c8:	200059f0 	.word	0x200059f0
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	e00c      	b.n	80074f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4a12      	ldr	r2, [pc, #72]	; (8007530 <prvInitialiseTaskLists+0x60>)
 80074e8:	4413      	add	r3, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe f876 	bl	80055dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b37      	cmp	r3, #55	; 0x37
 80074fa:	d9ef      	bls.n	80074dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074fc:	480d      	ldr	r0, [pc, #52]	; (8007534 <prvInitialiseTaskLists+0x64>)
 80074fe:	f7fe f86d 	bl	80055dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007502:	480d      	ldr	r0, [pc, #52]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007504:	f7fe f86a 	bl	80055dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007508:	480c      	ldr	r0, [pc, #48]	; (800753c <prvInitialiseTaskLists+0x6c>)
 800750a:	f7fe f867 	bl	80055dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750e:	480c      	ldr	r0, [pc, #48]	; (8007540 <prvInitialiseTaskLists+0x70>)
 8007510:	f7fe f864 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007514:	480b      	ldr	r0, [pc, #44]	; (8007544 <prvInitialiseTaskLists+0x74>)
 8007516:	f7fe f861 	bl	80055dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <prvInitialiseTaskLists+0x78>)
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <prvInitialiseTaskLists+0x64>)
 800751e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <prvInitialiseTaskLists+0x7c>)
 8007522:	4a05      	ldr	r2, [pc, #20]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007524:	601a      	str	r2, [r3, #0]
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200059f0 	.word	0x200059f0
 8007534:	20005e50 	.word	0x20005e50
 8007538:	20005e64 	.word	0x20005e64
 800753c:	20005e80 	.word	0x20005e80
 8007540:	20005e94 	.word	0x20005e94
 8007544:	20005eac 	.word	0x20005eac
 8007548:	20005e78 	.word	0x20005e78
 800754c:	20005e7c 	.word	0x20005e7c

08007550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007556:	e019      	b.n	800758c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007558:	f000 fee0 	bl	800831c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <prvCheckTasksWaitingTermination+0x50>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f8c1 	bl	80056f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	4a0b      	ldr	r2, [pc, #44]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 8007580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007582:	f000 feff 	bl	8008384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f810 	bl	80075ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e1      	bne.n	8007558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20005e94 	.word	0x20005e94
 80075a4:	20005ec0 	.word	0x20005ec0
 80075a8:	20005ea8 	.word	0x20005ea8

080075ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3354      	adds	r3, #84	; 0x54
 80075b8:	4618      	mov	r0, r3
 80075ba:	f00d fce3 	bl	8014f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d108      	bne.n	80075da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f89b 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f898 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d8:	e01a      	b.n	8007610 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d103      	bne.n	80075ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f88f 	bl	8008708 <vPortFree>
	}
 80075ea:	e011      	b.n	8007610 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d00c      	beq.n	8007610 <prvDeleteTCB+0x64>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	60fb      	str	r3, [r7, #12]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <prvDeleteTCB+0x62>
	}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <prvResetNextTaskUnblockTime+0x38>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvResetNextTaskUnblockTime+0x3c>)
 800762a:	f04f 32ff 	mov.w	r2, #4294967295
 800762e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007630:	e008      	b.n	8007644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <prvResetNextTaskUnblockTime+0x38>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a04      	ldr	r2, [pc, #16]	; (8007654 <prvResetNextTaskUnblockTime+0x3c>)
 8007642:	6013      	str	r3, [r2, #0]
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20005e78 	.word	0x20005e78
 8007654:	20005ee0 	.word	0x20005ee0

08007658 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <xTaskGetCurrentTaskHandle+0x1c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007664:	687b      	ldr	r3, [r7, #4]
	}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	200059ec 	.word	0x200059ec

08007678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800767e:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <xTaskGetSchedulerState+0x34>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007686:	2301      	movs	r3, #1
 8007688:	607b      	str	r3, [r7, #4]
 800768a:	e008      	b.n	800769e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768c:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <xTaskGetSchedulerState+0x38>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007694:	2302      	movs	r3, #2
 8007696:	607b      	str	r3, [r7, #4]
 8007698:	e001      	b.n	800769e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800769e:	687b      	ldr	r3, [r7, #4]
	}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20005ecc 	.word	0x20005ecc
 80076b0:	20005ee8 	.word	0x20005ee8

080076b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d051      	beq.n	800776e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ce:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <xTaskPriorityInherit+0xc4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d241      	bcs.n	800775c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	db06      	blt.n	80076ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e0:	4b25      	ldr	r3, [pc, #148]	; (8007778 <xTaskPriorityInherit+0xc4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <xTaskPriorityInherit+0xc8>)
 8007700:	4413      	add	r3, r2
 8007702:	4299      	cmp	r1, r3
 8007704:	d122      	bne.n	800774c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3304      	adds	r3, #4
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd fff0 	bl	80056f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007710:	4b19      	ldr	r3, [pc, #100]	; (8007778 <xTaskPriorityInherit+0xc4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	4b18      	ldr	r3, [pc, #96]	; (8007780 <xTaskPriorityInherit+0xcc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d903      	bls.n	800772e <xTaskPriorityInherit+0x7a>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a15      	ldr	r2, [pc, #84]	; (8007780 <xTaskPriorityInherit+0xcc>)
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a10      	ldr	r2, [pc, #64]	; (800777c <xTaskPriorityInherit+0xc8>)
 800773c:	441a      	add	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3304      	adds	r3, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7fd ff76 	bl	8005636 <vListInsertEnd>
 800774a:	e004      	b.n	8007756 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <xTaskPriorityInherit+0xc4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e008      	b.n	800776e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <xTaskPriorityInherit+0xc4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	429a      	cmp	r2, r3
 8007768:	d201      	bcs.n	800776e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800776e:	68fb      	ldr	r3, [r7, #12]
	}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200059ec 	.word	0x200059ec
 800777c:	200059f0 	.word	0x200059f0
 8007780:	20005ec8 	.word	0x20005ec8

08007784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d05a      	beq.n	8007850 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <xTaskPriorityDisinherit+0xd8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d00c      	beq.n	80077be <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	b672      	cpsid	i
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	b662      	cpsie	i
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10c      	bne.n	80077e0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	60bb      	str	r3, [r7, #8]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d02c      	beq.n	8007850 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d128      	bne.n	8007850 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fd ff74 	bl	80056f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <xTaskPriorityDisinherit+0xdc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskPriorityDisinherit+0xac>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <xTaskPriorityDisinherit+0xdc>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a09      	ldr	r2, [pc, #36]	; (8007864 <xTaskPriorityDisinherit+0xe0>)
 800783e:	441a      	add	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fd fef5 	bl	8005636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007850:	697b      	ldr	r3, [r7, #20]
	}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200059ec 	.word	0x200059ec
 8007860:	20005ec8 	.word	0x20005ec8
 8007864:	200059f0 	.word	0x200059f0

08007868 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d06e      	beq.n	800795e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10c      	bne.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	b672      	cpsid	i
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	b662      	cpsie	i
 800789c:	60fb      	str	r3, [r7, #12]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d902      	bls.n	80078b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	e002      	b.n	80078b8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d04d      	beq.n	800795e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d148      	bne.n	800795e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078cc:	4b26      	ldr	r3, [pc, #152]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d10c      	bne.n	80078f0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	b672      	cpsid	i
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	b662      	cpsie	i
 80078ea:	60bb      	str	r3, [r7, #8]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	db04      	blt.n	800790e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	6959      	ldr	r1, [r3, #20]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4a13      	ldr	r2, [pc, #76]	; (800796c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800791e:	4413      	add	r3, r2
 8007920:	4299      	cmp	r1, r3
 8007922:	d11c      	bne.n	800795e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fee1 	bl	80056f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d903      	bls.n	8007942 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4a07      	ldr	r2, [pc, #28]	; (800796c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007950:	441a      	add	r2, r3
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7fd fe6c 	bl	8005636 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800795e:	bf00      	nop
 8007960:	3720      	adds	r7, #32
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	200059ec 	.word	0x200059ec
 800796c:	200059f0 	.word	0x200059f0
 8007970:	20005ec8 	.word	0x20005ec8

08007974 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007978:	4b07      	ldr	r3, [pc, #28]	; (8007998 <pvTaskIncrementMutexHeldCount+0x24>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <pvTaskIncrementMutexHeldCount+0x24>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007986:	3201      	adds	r2, #1
 8007988:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800798a:	4b03      	ldr	r3, [pc, #12]	; (8007998 <pvTaskIncrementMutexHeldCount+0x24>)
 800798c:	681b      	ldr	r3, [r3, #0]
	}
 800798e:	4618      	mov	r0, r3
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	200059ec 	.word	0x200059ec

0800799c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079a6:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x90>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ac:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd fe9c 	bl	80056f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d10a      	bne.n	80079d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4819      	ldr	r0, [pc, #100]	; (8007a34 <prvAddCurrentTaskToDelayedList+0x98>)
 80079d0:	f7fd fe31 	bl	8005636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079d4:	e026      	b.n	8007a24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079de:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d209      	bcs.n	8007a02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ee:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fd fe3f 	bl	800567e <vListInsert>
}
 8007a00:	e010      	b.n	8007a24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a02:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7fd fe35 	bl	800567e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d202      	bcs.n	8007a24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a1e:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6013      	str	r3, [r2, #0]
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20005ec4 	.word	0x20005ec4
 8007a30:	200059ec 	.word	0x200059ec
 8007a34:	20005eac 	.word	0x20005eac
 8007a38:	20005e7c 	.word	0x20005e7c
 8007a3c:	20005e78 	.word	0x20005e78
 8007a40:	20005ee0 	.word	0x20005ee0

08007a44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a4e:	f000 fb15 	bl	800807c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a52:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <xTimerCreateTimerTask+0x84>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d021      	beq.n	8007a9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a62:	1d3a      	adds	r2, r7, #4
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd fd9b 	bl	80055a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	9202      	str	r2, [sp, #8]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2300      	movs	r3, #0
 8007a82:	460a      	mov	r2, r1
 8007a84:	4911      	ldr	r1, [pc, #68]	; (8007acc <xTimerCreateTimerTask+0x88>)
 8007a86:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <xTimerCreateTimerTask+0x8c>)
 8007a88:	f7fe ff6c 	bl	8006964 <xTaskCreateStatic>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	4a11      	ldr	r2, [pc, #68]	; (8007ad4 <xTimerCreateTimerTask+0x90>)
 8007a90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <xTimerCreateTimerTask+0x90>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10c      	bne.n	8007abe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	b672      	cpsid	i
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	b662      	cpsie	i
 8007ab8:	613b      	str	r3, [r7, #16]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007abe:	697b      	ldr	r3, [r7, #20]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20005f1c 	.word	0x20005f1c
 8007acc:	08015de8 	.word	0x08015de8
 8007ad0:	08007c15 	.word	0x08007c15
 8007ad4:	20005f20 	.word	0x20005f20

08007ad8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <xTimerGenericCommand+0x32>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	b672      	cpsid	i
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	b662      	cpsie	i
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <xTimerGenericCommand+0x9c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02a      	beq.n	8007b68 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	dc18      	bgt.n	8007b56 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b24:	f7ff fda8 	bl	8007678 <xTaskGetSchedulerState>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d109      	bne.n	8007b42 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <xTimerGenericCommand+0x9c>)
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f107 0110 	add.w	r1, r7, #16
 8007b36:	2300      	movs	r3, #0
 8007b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3a:	f7fe f881 	bl	8005c40 <xQueueGenericSend>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b40:	e012      	b.n	8007b68 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xTimerGenericCommand+0x9c>)
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7fe f877 	bl	8005c40 <xQueueGenericSend>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e008      	b.n	8007b68 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <xTimerGenericCommand+0x9c>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f107 0110 	add.w	r1, r7, #16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f7fe f973 	bl	8005e4c <xQueueGenericSendFromISR>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20005f1c 	.word	0x20005f1c

08007b78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <prvProcessExpiredTimer+0x98>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fd fdad 	bl	80056f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d024      	beq.n	8007bee <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	18d1      	adds	r1, r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f000 f8d3 	bl	8007d5c <prvInsertTimerInActiveList>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d021      	beq.n	8007c00 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff86 	bl	8007ad8 <xTimerGenericCommand>
 8007bcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d115      	bne.n	8007c00 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	b672      	cpsid	i
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	b662      	cpsie	i
 8007be8:	60fb      	str	r3, [r7, #12]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	6978      	ldr	r0, [r7, #20]
 8007c06:	4798      	blx	r3
}
 8007c08:	bf00      	nop
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20005f14 	.word	0x20005f14

08007c14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c1c:	f107 0308 	add.w	r3, r7, #8
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f857 	bl	8007cd4 <prvGetNextExpireTime>
 8007c26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f803 	bl	8007c38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c32:	f000 f8d5 	bl	8007de0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c36:	e7f1      	b.n	8007c1c <prvTimerTask+0x8>

08007c38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c42:	f7ff f8f9 	bl	8006e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c46:	f107 0308 	add.w	r3, r7, #8
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f866 	bl	8007d1c <prvSampleTimeNow>
 8007c50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d130      	bne.n	8007cba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <prvProcessTimerOrBlockTask+0x3c>
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d806      	bhi.n	8007c74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c66:	f7ff f8f5 	bl	8006e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ff83 	bl	8007b78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c72:	e024      	b.n	8007cbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <prvProcessTimerOrBlockTask+0x90>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <prvProcessTimerOrBlockTask+0x50>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <prvProcessTimerOrBlockTask+0x52>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <prvProcessTimerOrBlockTask+0x94>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f7fe fe2f 	bl	80068fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c9e:	f7ff f8d9 	bl	8006e54 <xTaskResumeAll>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <prvProcessTimerOrBlockTask+0x98>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
}
 8007cb8:	e001      	b.n	8007cbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cba:	f7ff f8cb 	bl	8006e54 <xTaskResumeAll>
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20005f18 	.word	0x20005f18
 8007ccc:	20005f1c 	.word	0x20005f1c
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <prvGetNextExpireTime+0x44>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <prvGetNextExpireTime+0x16>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	e000      	b.n	8007cec <prvGetNextExpireTime+0x18>
 8007cea:	2200      	movs	r2, #0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <prvGetNextExpireTime+0x44>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	e001      	b.n	8007d08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d08:	68fb      	ldr	r3, [r7, #12]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20005f14 	.word	0x20005f14

08007d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d24:	f7ff f936 	bl	8006f94 <xTaskGetTickCount>
 8007d28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <prvSampleTimeNow+0x3c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d205      	bcs.n	8007d40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d34:	f000 f93c 	bl	8007fb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e002      	b.n	8007d46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d46:	4a04      	ldr	r2, [pc, #16]	; (8007d58 <prvSampleTimeNow+0x3c>)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20005f24 	.word	0x20005f24

08007d5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d812      	bhi.n	8007da8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	e01b      	b.n	8007dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <prvInsertTimerInActiveList+0x7c>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7fd fc6c 	bl	800567e <vListInsert>
 8007da6:	e012      	b.n	8007dce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d206      	bcs.n	8007dbe <prvInsertTimerInActiveList+0x62>
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d302      	bcc.n	8007dbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e007      	b.n	8007dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <prvInsertTimerInActiveList+0x80>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7fd fc58 	bl	800567e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20005f18 	.word	0x20005f18
 8007ddc:	20005f14 	.word	0x20005f14

08007de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007de6:	e0d0      	b.n	8007f8a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da1a      	bge.n	8007e24 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dee:	1d3b      	adds	r3, r7, #4
 8007df0:	3304      	adds	r3, #4
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10c      	bne.n	8007e14 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	b672      	cpsid	i
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	b662      	cpsie	i
 8007e0e:	61fb      	str	r3, [r7, #28]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1a:	6850      	ldr	r0, [r2, #4]
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	6892      	ldr	r2, [r2, #8]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f2c0 80af 	blt.w	8007f8a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fd fc57 	bl	80056f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e42:	463b      	mov	r3, r7
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff ff69 	bl	8007d1c <prvSampleTimeNow>
 8007e4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	f200 809a 	bhi.w	8007f88 <prvProcessReceivedCommands+0x1a8>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <prvProcessReceivedCommands+0x7c>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e85 	.word	0x08007e85
 8007e68:	08007efd 	.word	0x08007efd
 8007e6c:	08007f11 	.word	0x08007f11
 8007e70:	08007f5f 	.word	0x08007f5f
 8007e74:	08007e85 	.word	0x08007e85
 8007e78:	08007e85 	.word	0x08007e85
 8007e7c:	08007efd 	.word	0x08007efd
 8007e80:	08007f11 	.word	0x08007f11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e8a:	f043 0301 	orr.w	r3, r3, #1
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	18d1      	adds	r1, r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea4:	f7ff ff5a 	bl	8007d5c <prvInsertTimerInActiveList>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d06d      	beq.n	8007f8a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d062      	beq.n	8007f8a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	441a      	add	r2, r3
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed6:	f7ff fdff 	bl	8007ad8 <xTimerGenericCommand>
 8007eda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d153      	bne.n	8007f8a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	b672      	cpsid	i
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	b662      	cpsie	i
 8007ef6:	61bb      	str	r3, [r7, #24]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f0e:	e03c      	b.n	8007f8a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	b672      	cpsid	i
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	b662      	cpsie	i
 8007f44:	617b      	str	r3, [r7, #20]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	18d1      	adds	r1, r2, r3
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	f7ff ff00 	bl	8007d5c <prvInsertTimerInActiveList>
					break;
 8007f5c:	e015      	b.n	8007f8a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f6e:	f000 fbcb 	bl	8008708 <vPortFree>
 8007f72:	e00a      	b.n	8007f8a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f86:	e000      	b.n	8007f8a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <prvProcessReceivedCommands+0x1cc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	1d39      	adds	r1, r7, #4
 8007f90:	2200      	movs	r2, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe f890 	bl	80060b8 <xQueueReceive>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f af24 	bne.w	8007de8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	3730      	adds	r7, #48	; 0x30
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20005f1c 	.word	0x20005f1c

08007fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fb6:	e04a      	b.n	800804e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fb8:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <prvSwitchTimerLists+0xc4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <prvSwitchTimerLists+0xc4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fd fb8d 	bl	80056f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d030      	beq.n	800804e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90e      	bls.n	800801c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800800a:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <prvSwitchTimerLists+0xc4>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f7fd fb32 	bl	800567e <vListInsert>
 800801a:	e018      	b.n	800804e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800801c:	2300      	movs	r3, #0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	2100      	movs	r1, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff fd56 	bl	8007ad8 <xTimerGenericCommand>
 800802c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10c      	bne.n	800804e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	b672      	cpsid	i
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	b662      	cpsie	i
 8008048:	603b      	str	r3, [r7, #0]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <prvSwitchTimerLists+0xc4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1af      	bne.n	8007fb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <prvSwitchTimerLists+0xc4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <prvSwitchTimerLists+0xc8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <prvSwitchTimerLists+0xc4>)
 8008064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008066:	4a04      	ldr	r2, [pc, #16]	; (8008078 <prvSwitchTimerLists+0xc8>)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20005f14 	.word	0x20005f14
 8008078:	20005f18 	.word	0x20005f18

0800807c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008082:	f000 f94b 	bl	800831c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d120      	bne.n	80080d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800808e:	4814      	ldr	r0, [pc, #80]	; (80080e0 <prvCheckForValidListAndQueue+0x64>)
 8008090:	f7fd faa4 	bl	80055dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008094:	4813      	ldr	r0, [pc, #76]	; (80080e4 <prvCheckForValidListAndQueue+0x68>)
 8008096:	f7fd faa1 	bl	80055dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <prvCheckForValidListAndQueue+0x6c>)
 800809c:	4a10      	ldr	r2, [pc, #64]	; (80080e0 <prvCheckForValidListAndQueue+0x64>)
 800809e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <prvCheckForValidListAndQueue+0x70>)
 80080a2:	4a10      	ldr	r2, [pc, #64]	; (80080e4 <prvCheckForValidListAndQueue+0x68>)
 80080a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080a6:	2300      	movs	r3, #0
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <prvCheckForValidListAndQueue+0x74>)
 80080ac:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <prvCheckForValidListAndQueue+0x78>)
 80080ae:	2110      	movs	r1, #16
 80080b0:	200a      	movs	r0, #10
 80080b2:	f7fd fbb1 	bl	8005818 <xQueueGenericCreateStatic>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4a08      	ldr	r2, [pc, #32]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <prvCheckForValidListAndQueue+0x60>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	490b      	ldr	r1, [pc, #44]	; (80080f8 <prvCheckForValidListAndQueue+0x7c>)
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fbc2 	bl	8006854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080d0:	f000 f958 	bl	8008384 <vPortExitCritical>
}
 80080d4:	bf00      	nop
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20005f1c 	.word	0x20005f1c
 80080e0:	20005eec 	.word	0x20005eec
 80080e4:	20005f00 	.word	0x20005f00
 80080e8:	20005f14 	.word	0x20005f14
 80080ec:	20005f18 	.word	0x20005f18
 80080f0:	20005fc8 	.word	0x20005fc8
 80080f4:	20005f28 	.word	0x20005f28
 80080f8:	08015df0 	.word	0x08015df0

080080fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b04      	subs	r3, #4
 800810c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b04      	subs	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800812c:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <pxPortInitialiseStack+0x64>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b14      	subs	r3, #20
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f06f 0202 	mvn.w	r2, #2
 800814a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b20      	subs	r3, #32
 8008150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	08008165 	.word	0x08008165

08008164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800816e:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <prvTaskExitError+0x5c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d00c      	beq.n	8008192 <prvTaskExitError+0x2e>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	b672      	cpsid	i
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	b662      	cpsie	i
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <prvTaskExitError+0x2c>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081aa:	bf00      	nop
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0fc      	beq.n	80081ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	2000000c 	.word	0x2000000c
	...

080081d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <pxCurrentTCBConst2>)
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	6808      	ldr	r0, [r1, #0]
 80081d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	f380 8809 	msr	PSP, r0
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8811 	msr	BASEPRI, r0
 80081ea:	4770      	bx	lr
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst2>:
 80081f0:	200059ec 	.word	0x200059ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081f8:	4808      	ldr	r0, [pc, #32]	; (800821c <prvPortStartFirstTask+0x24>)
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	6800      	ldr	r0, [r0, #0]
 80081fe:	f380 8808 	msr	MSP, r0
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8814 	msr	CONTROL, r0
 800820a:	b662      	cpsie	i
 800820c:	b661      	cpsie	f
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	df00      	svc	0
 8008218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800821a:	bf00      	nop
 800821c:	e000ed08 	.word	0xe000ed08

08008220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008226:	4b37      	ldr	r3, [pc, #220]	; (8008304 <xPortStartScheduler+0xe4>)
 8008228:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <xPortStartScheduler+0xe8>)
 800824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <xPortStartScheduler+0xec>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008254:	e009      	b.n	800826a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008256:	4b2d      	ldr	r3, [pc, #180]	; (800830c <xPortStartScheduler+0xec>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	4a2b      	ldr	r2, [pc, #172]	; (800830c <xPortStartScheduler+0xec>)
 800825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d0ef      	beq.n	8008256 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008276:	4b25      	ldr	r3, [pc, #148]	; (800830c <xPortStartScheduler+0xec>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1c3 0307 	rsb	r3, r3, #7
 800827e:	2b04      	cmp	r3, #4
 8008280:	d00c      	beq.n	800829c <xPortStartScheduler+0x7c>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	b672      	cpsid	i
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	b662      	cpsie	i
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800829c:	4b1b      	ldr	r3, [pc, #108]	; (800830c <xPortStartScheduler+0xec>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	4a1a      	ldr	r2, [pc, #104]	; (800830c <xPortStartScheduler+0xec>)
 80082a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a6:	4b19      	ldr	r3, [pc, #100]	; (800830c <xPortStartScheduler+0xec>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ae:	4a17      	ldr	r2, [pc, #92]	; (800830c <xPortStartScheduler+0xec>)
 80082b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082ba:	4b15      	ldr	r3, [pc, #84]	; (8008310 <xPortStartScheduler+0xf0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a14      	ldr	r2, [pc, #80]	; (8008310 <xPortStartScheduler+0xf0>)
 80082c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c6:	4b12      	ldr	r3, [pc, #72]	; (8008310 <xPortStartScheduler+0xf0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a11      	ldr	r2, [pc, #68]	; (8008310 <xPortStartScheduler+0xf0>)
 80082cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082d2:	f000 f8dd 	bl	8008490 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <xPortStartScheduler+0xf4>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082dc:	f000 f8fc 	bl	80084d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e0:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <xPortStartScheduler+0xf8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <xPortStartScheduler+0xf8>)
 80082e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ec:	f7ff ff84 	bl	80081f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082f0:	f7fe ff2e 	bl	8007150 <vTaskSwitchContext>
	prvTaskExitError();
 80082f4:	f7ff ff36 	bl	8008164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000e400 	.word	0xe000e400
 8008308:	20006018 	.word	0x20006018
 800830c:	2000601c 	.word	0x2000601c
 8008310:	e000ed20 	.word	0xe000ed20
 8008314:	2000000c 	.word	0x2000000c
 8008318:	e000ef34 	.word	0xe000ef34

0800831c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	607b      	str	r3, [r7, #4]
}
 8008338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <vPortEnterCritical+0x60>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <vPortEnterCritical+0x60>)
 8008342:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008344:	4b0d      	ldr	r3, [pc, #52]	; (800837c <vPortEnterCritical+0x60>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d111      	bne.n	8008370 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <vPortEnterCritical+0x64>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <vPortEnterCritical+0x54>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	b672      	cpsid	i
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	b662      	cpsie	i
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vPortEnterCritical+0x52>
	}
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000000c 	.word	0x2000000c
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <vPortExitCritical+0x54>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10c      	bne.n	80083ac <vPortExitCritical+0x28>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	b672      	cpsid	i
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	b662      	cpsie	i
 80083a6:	607b      	str	r3, [r7, #4]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <vPortExitCritical+0x54>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <vPortExitCritical+0x54>)
 80083b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <vPortExitCritical+0x54>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <vPortExitCritical+0x46>
 80083be:	2300      	movs	r3, #0
 80083c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f383 8811 	msr	BASEPRI, r3
}
 80083c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000000c 	.word	0x2000000c
 80083dc:	00000000 	.word	0x00000000

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	b662      	cpsie	i
 8008414:	f7fe fe9c 	bl	8007150 <vTaskSwitchContext>
 8008418:	f04f 0000 	mov.w	r0, #0
 800841c:	f380 8811 	msr	BASEPRI, r0
 8008420:	bc09      	pop	{r0, r3}
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	6808      	ldr	r0, [r1, #0]
 8008426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	f01e 0f10 	tst.w	lr, #16
 800842e:	bf08      	it	eq
 8008430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008434:	f380 8809 	msr	PSP, r0
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop

08008440 <pxCurrentTCBConst>:
 8008440:	200059ec 	.word	0x200059ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	b672      	cpsid	i
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	b662      	cpsie	i
 8008462:	607b      	str	r3, [r7, #4]
}
 8008464:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008466:	f7fe fdb7 	bl	8006fd8 <xTaskIncrementTick>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <xPortSysTickHandler+0x44>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f383 8811 	msr	BASEPRI, r3
}
 8008482:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <vPortSetupTimerInterrupt+0x34>)
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <vPortSetupTimerInterrupt+0x38>)
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <vPortSetupTimerInterrupt+0x3c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <vPortSetupTimerInterrupt+0x40>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	099b      	lsrs	r3, r3, #6
 80084ac:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <vPortSetupTimerInterrupt+0x44>)
 80084ae:	3b01      	subs	r3, #1
 80084b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <vPortSetupTimerInterrupt+0x34>)
 80084b4:	2207      	movs	r2, #7
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	e000e010 	.word	0xe000e010
 80084c8:	e000e018 	.word	0xe000e018
 80084cc:	20000000 	.word	0x20000000
 80084d0:	10624dd3 	.word	0x10624dd3
 80084d4:	e000e014 	.word	0xe000e014

080084d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084e8 <vPortEnableVFP+0x10>
 80084dc:	6801      	ldr	r1, [r0, #0]
 80084de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084e2:	6001      	str	r1, [r0, #0]
 80084e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e6:	bf00      	nop
 80084e8:	e000ed88 	.word	0xe000ed88

080084ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084f2:	f3ef 8305 	mrs	r3, IPSR
 80084f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b0f      	cmp	r3, #15
 80084fc:	d916      	bls.n	800852c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fe:	4a19      	ldr	r2, [pc, #100]	; (8008564 <vPortValidateInterruptPriority+0x78>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <vPortValidateInterruptPriority+0x7c>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	7afa      	ldrb	r2, [r7, #11]
 800850e:	429a      	cmp	r2, r3
 8008510:	d20c      	bcs.n	800852c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	b672      	cpsid	i
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	b662      	cpsie	i
 8008526:	607b      	str	r3, [r7, #4]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <vPortValidateInterruptPriority+0x80>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008534:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <vPortValidateInterruptPriority+0x84>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d90c      	bls.n	8008556 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	603b      	str	r3, [r7, #0]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <vPortValidateInterruptPriority+0x68>
	}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	e000e3f0 	.word	0xe000e3f0
 8008568:	20006018 	.word	0x20006018
 800856c:	e000ed0c 	.word	0xe000ed0c
 8008570:	2000601c 	.word	0x2000601c

08008574 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008580:	f7fe fc5a 	bl	8006e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008584:	4b5b      	ldr	r3, [pc, #364]	; (80086f4 <pvPortMalloc+0x180>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800858c:	f000 f91a 	bl	80087c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <pvPortMalloc+0x184>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4013      	ands	r3, r2
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 8092 	bne.w	80086c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01f      	beq.n	80085e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80085a4:	2208      	movs	r2, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d016      	beq.n	80085e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	3308      	adds	r3, #8
 80085be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <pvPortMalloc+0x70>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	b672      	cpsid	i
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	b662      	cpsie	i
 80085de:	617b      	str	r3, [r7, #20]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d06b      	beq.n	80086c2 <pvPortMalloc+0x14e>
 80085ea:	4b44      	ldr	r3, [pc, #272]	; (80086fc <pvPortMalloc+0x188>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d866      	bhi.n	80086c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085f4:	4b42      	ldr	r3, [pc, #264]	; (8008700 <pvPortMalloc+0x18c>)
 80085f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085f8:	4b41      	ldr	r3, [pc, #260]	; (8008700 <pvPortMalloc+0x18c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fe:	e004      	b.n	800860a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d903      	bls.n	800861c <pvPortMalloc+0xa8>
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f1      	bne.n	8008600 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800861c:	4b35      	ldr	r3, [pc, #212]	; (80086f4 <pvPortMalloc+0x180>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	429a      	cmp	r2, r3
 8008624:	d04d      	beq.n	80086c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2208      	movs	r2, #8
 800862c:	4413      	add	r3, r2
 800862e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	2308      	movs	r3, #8
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d921      	bls.n	800868c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00c      	beq.n	8008674 <pvPortMalloc+0x100>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	b672      	cpsid	i
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	b662      	cpsie	i
 800866e:	613b      	str	r3, [r7, #16]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008686:	69b8      	ldr	r0, [r7, #24]
 8008688:	f000 f8fe 	bl	8008888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <pvPortMalloc+0x188>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <pvPortMalloc+0x188>)
 8008698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <pvPortMalloc+0x188>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b19      	ldr	r3, [pc, #100]	; (8008704 <pvPortMalloc+0x190>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d203      	bcs.n	80086ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <pvPortMalloc+0x188>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <pvPortMalloc+0x190>)
 80086ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <pvPortMalloc+0x184>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086c2:	f7fe fbc7 	bl	8006e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <pvPortMalloc+0x176>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	60fb      	str	r3, [r7, #12]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <pvPortMalloc+0x174>
	return pvReturn;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3728      	adds	r7, #40	; 0x28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20009c28 	.word	0x20009c28
 80086f8:	20009c34 	.word	0x20009c34
 80086fc:	20009c2c 	.word	0x20009c2c
 8008700:	20009c20 	.word	0x20009c20
 8008704:	20009c30 	.word	0x20009c30

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04c      	beq.n	80087b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <vPortFree+0xb4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10c      	bne.n	8008750 <vPortFree+0x48>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	b672      	cpsid	i
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	b662      	cpsie	i
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00c      	beq.n	8008772 <vPortFree+0x6a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	60bb      	str	r3, [r7, #8]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <vPortFree+0xb4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d019      	beq.n	80087b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d115      	bne.n	80087b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <vPortFree+0xb4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008798:	f7fe fb4e 	bl	8006e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vPortFree+0xb8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4413      	add	r3, r2
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vPortFree+0xb8>)
 80087a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087aa:	6938      	ldr	r0, [r7, #16]
 80087ac:	f000 f86c 	bl	8008888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087b0:	f7fe fb50 	bl	8006e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087b4:	bf00      	nop
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20009c34 	.word	0x20009c34
 80087c0:	20009c2c 	.word	0x20009c2c

080087c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <prvHeapInit+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00c      	beq.n	80087f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <prvHeapInit+0xac>)
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <prvHeapInit+0xb0>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <prvHeapInit+0xb0>)
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvHeapInit+0xb4>)
 8008824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <prvHeapInit+0xb4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvHeapInit+0xb4>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <prvHeapInit+0xb8>)
 8008852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvHeapInit+0xbc>)
 800885a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvHeapInit+0xc0>)
 800885e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20006020 	.word	0x20006020
 8008874:	20009c20 	.word	0x20009c20
 8008878:	20009c28 	.word	0x20009c28
 800887c:	20009c30 	.word	0x20009c30
 8008880:	20009c2c 	.word	0x20009c2c
 8008884:	20009c34 	.word	0x20009c34

08008888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <prvInsertBlockIntoFreeList+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <prvInsertBlockIntoFreeList+0x14>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d8f7      	bhi.n	8008896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d108      	bne.n	80088ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d118      	bne.n	8008910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d00d      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e008      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e003      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20009c20 	.word	0x20009c20
 8008938:	20009c28 	.word	0x20009c28

0800893c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008946:	f007 fa79 	bl	800fe3c <sys_timeouts_sleeptime>
 800894a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d10b      	bne.n	800896c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008954:	4813      	ldr	r0, [pc, #76]	; (80089a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008956:	f00c f94c 	bl	8014bf2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800895a:	2200      	movs	r2, #0
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f00c f8d4 	bl	8014b0c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008964:	480f      	ldr	r0, [pc, #60]	; (80089a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008966:	f00c f935 	bl	8014bd4 <sys_mutex_lock>
    return;
 800896a:	e018      	b.n	800899e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008972:	f007 fa29 	bl	800fdc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008976:	e7e6      	b.n	8008946 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008978:	480a      	ldr	r0, [pc, #40]	; (80089a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800897a:	f00c f93a 	bl	8014bf2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f00c f8c2 	bl	8014b0c <sys_arch_mbox_fetch>
 8008988:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800898a:	4806      	ldr	r0, [pc, #24]	; (80089a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800898c:	f00c f922 	bl	8014bd4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d102      	bne.n	800899e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008998:	f007 fa16 	bl	800fdc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800899c:	e7d3      	b.n	8008946 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20009c44 	.word	0x20009c44

080089a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80089b0:	4810      	ldr	r0, [pc, #64]	; (80089f4 <tcpip_thread+0x4c>)
 80089b2:	f00c f90f 	bl	8014bd4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <tcpip_thread+0x50>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80089be:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <tcpip_thread+0x50>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a0e      	ldr	r2, [pc, #56]	; (80089fc <tcpip_thread+0x54>)
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	4610      	mov	r0, r2
 80089c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80089ca:	f107 030c 	add.w	r3, r7, #12
 80089ce:	4619      	mov	r1, r3
 80089d0:	480b      	ldr	r0, [pc, #44]	; (8008a00 <tcpip_thread+0x58>)
 80089d2:	f7ff ffb3 	bl	800893c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <tcpip_thread+0x5c>)
 80089de:	2291      	movs	r2, #145	; 0x91
 80089e0:	4909      	ldr	r1, [pc, #36]	; (8008a08 <tcpip_thread+0x60>)
 80089e2:	480a      	ldr	r0, [pc, #40]	; (8008a0c <tcpip_thread+0x64>)
 80089e4:	f00c fa50 	bl	8014e88 <iprintf>
      continue;
 80089e8:	e003      	b.n	80089f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f80f 	bl	8008a10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80089f2:	e7ea      	b.n	80089ca <tcpip_thread+0x22>
 80089f4:	20009c44 	.word	0x20009c44
 80089f8:	20009c38 	.word	0x20009c38
 80089fc:	20009c3c 	.word	0x20009c3c
 8008a00:	20009c40 	.word	0x20009c40
 8008a04:	08015df8 	.word	0x08015df8
 8008a08:	08015e28 	.word	0x08015e28
 8008a0c:	08015e48 	.word	0x08015e48

08008a10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d026      	beq.n	8008a6e <tcpip_thread_handle_msg+0x5e>
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	dc2b      	bgt.n	8008a7c <tcpip_thread_handle_msg+0x6c>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <tcpip_thread_handle_msg+0x1e>
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d015      	beq.n	8008a58 <tcpip_thread_handle_msg+0x48>
 8008a2c:	e026      	b.n	8008a7c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6850      	ldr	r0, [r2, #4]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6892      	ldr	r2, [r2, #8]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 fcaf 	bl	800a3ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	2009      	movs	r0, #9
 8008a52:	f000 fe63 	bl	800971c <memp_free>
      break;
 8008a56:	e018      	b.n	8008a8a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6892      	ldr	r2, [r2, #8]
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	2008      	movs	r0, #8
 8008a68:	f000 fe58 	bl	800971c <memp_free>
      break;
 8008a6c:	e00d      	b.n	8008a8a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	4610      	mov	r0, r2
 8008a78:	4798      	blx	r3
      break;
 8008a7a:	e006      	b.n	8008a8a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <tcpip_thread_handle_msg+0x84>)
 8008a7e:	22cf      	movs	r2, #207	; 0xcf
 8008a80:	4905      	ldr	r1, [pc, #20]	; (8008a98 <tcpip_thread_handle_msg+0x88>)
 8008a82:	4806      	ldr	r0, [pc, #24]	; (8008a9c <tcpip_thread_handle_msg+0x8c>)
 8008a84:	f00c fa00 	bl	8014e88 <iprintf>
      break;
 8008a88:	bf00      	nop
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08015df8 	.word	0x08015df8
 8008a98:	08015e28 	.word	0x08015e28
 8008a9c:	08015e48 	.word	0x08015e48

08008aa0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008aac:	481a      	ldr	r0, [pc, #104]	; (8008b18 <tcpip_inpkt+0x78>)
 8008aae:	f00c f85e 	bl	8014b6e <sys_mbox_valid>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <tcpip_inpkt+0x24>
 8008ab8:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <tcpip_inpkt+0x7c>)
 8008aba:	22fc      	movs	r2, #252	; 0xfc
 8008abc:	4918      	ldr	r1, [pc, #96]	; (8008b20 <tcpip_inpkt+0x80>)
 8008abe:	4819      	ldr	r0, [pc, #100]	; (8008b24 <tcpip_inpkt+0x84>)
 8008ac0:	f00c f9e2 	bl	8014e88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008ac4:	2009      	movs	r0, #9
 8008ac6:	f000 fdb3 	bl	8009630 <memp_malloc>
 8008aca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	e01a      	b.n	8008b0e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008af0:	6979      	ldr	r1, [r7, #20]
 8008af2:	4809      	ldr	r0, [pc, #36]	; (8008b18 <tcpip_inpkt+0x78>)
 8008af4:	f00b fff0 	bl	8014ad8 <sys_mbox_trypost>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d006      	beq.n	8008b0c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	2009      	movs	r0, #9
 8008b02:	f000 fe0b 	bl	800971c <memp_free>
    return ERR_MEM;
 8008b06:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0a:	e000      	b.n	8008b0e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008b0c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20009c40 	.word	0x20009c40
 8008b1c:	08015df8 	.word	0x08015df8
 8008b20:	08015e70 	.word	0x08015e70
 8008b24:	08015e48 	.word	0x08015e48

08008b28 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b38:	f003 0318 	and.w	r3, r3, #24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008b40:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <tcpip_input+0x3c>)
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff ffab 	bl	8008aa0 <tcpip_inpkt>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	e005      	b.n	8008b5a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008b4e:	4a06      	ldr	r2, [pc, #24]	; (8008b68 <tcpip_input+0x40>)
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff ffa4 	bl	8008aa0 <tcpip_inpkt>
 8008b58:	4603      	mov	r3, r0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	080148f9 	.word	0x080148f9
 8008b68:	080137c5 	.word	0x080137c5

08008b6c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008b76:	4819      	ldr	r0, [pc, #100]	; (8008bdc <tcpip_try_callback+0x70>)
 8008b78:	f00b fff9 	bl	8014b6e <sys_mbox_valid>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <tcpip_try_callback+0x24>
 8008b82:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <tcpip_try_callback+0x74>)
 8008b84:	f240 125d 	movw	r2, #349	; 0x15d
 8008b88:	4916      	ldr	r1, [pc, #88]	; (8008be4 <tcpip_try_callback+0x78>)
 8008b8a:	4817      	ldr	r0, [pc, #92]	; (8008be8 <tcpip_try_callback+0x7c>)
 8008b8c:	f00c f97c 	bl	8014e88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008b90:	2008      	movs	r0, #8
 8008b92:	f000 fd4d 	bl	8009630 <memp_malloc>
 8008b96:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba2:	e017      	b.n	8008bd4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	4808      	ldr	r0, [pc, #32]	; (8008bdc <tcpip_try_callback+0x70>)
 8008bba:	f00b ff8d 	bl	8014ad8 <sys_mbox_trypost>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	2008      	movs	r0, #8
 8008bc8:	f000 fda8 	bl	800971c <memp_free>
    return ERR_MEM;
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd0:	e000      	b.n	8008bd4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20009c40 	.word	0x20009c40
 8008be0:	08015df8 	.word	0x08015df8
 8008be4:	08015e70 	.word	0x08015e70
 8008be8:	08015e48 	.word	0x08015e48

08008bec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008bf6:	f000 f871 	bl	8008cdc <lwip_init>

  tcpip_init_done = initfunc;
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <tcpip_init+0x6c>)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008c00:	4a16      	ldr	r2, [pc, #88]	; (8008c5c <tcpip_init+0x70>)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008c06:	2106      	movs	r1, #6
 8008c08:	4815      	ldr	r0, [pc, #84]	; (8008c60 <tcpip_init+0x74>)
 8008c0a:	f00b ff4b 	bl	8014aa4 <sys_mbox_new>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008c14:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <tcpip_init+0x78>)
 8008c16:	f240 2261 	movw	r2, #609	; 0x261
 8008c1a:	4913      	ldr	r1, [pc, #76]	; (8008c68 <tcpip_init+0x7c>)
 8008c1c:	4813      	ldr	r0, [pc, #76]	; (8008c6c <tcpip_init+0x80>)
 8008c1e:	f00c f933 	bl	8014e88 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008c22:	4813      	ldr	r0, [pc, #76]	; (8008c70 <tcpip_init+0x84>)
 8008c24:	f00b ffc0 	bl	8014ba8 <sys_mutex_new>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d006      	beq.n	8008c3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <tcpip_init+0x78>)
 8008c30:	f240 2265 	movw	r2, #613	; 0x265
 8008c34:	490f      	ldr	r1, [pc, #60]	; (8008c74 <tcpip_init+0x88>)
 8008c36:	480d      	ldr	r0, [pc, #52]	; (8008c6c <tcpip_init+0x80>)
 8008c38:	f00c f926 	bl	8014e88 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008c3c:	2318      	movs	r3, #24
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c44:	2200      	movs	r2, #0
 8008c46:	490c      	ldr	r1, [pc, #48]	; (8008c78 <tcpip_init+0x8c>)
 8008c48:	480c      	ldr	r0, [pc, #48]	; (8008c7c <tcpip_init+0x90>)
 8008c4a:	f00b ffdf 	bl	8014c0c <sys_thread_new>
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20009c38 	.word	0x20009c38
 8008c5c:	20009c3c 	.word	0x20009c3c
 8008c60:	20009c40 	.word	0x20009c40
 8008c64:	08015df8 	.word	0x08015df8
 8008c68:	08015e80 	.word	0x08015e80
 8008c6c:	08015e48 	.word	0x08015e48
 8008c70:	20009c44 	.word	0x20009c44
 8008c74:	08015ea4 	.word	0x08015ea4
 8008c78:	080089a9 	.word	0x080089a9
 8008c7c:	08015ec8 	.word	0x08015ec8

08008c80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	021b      	lsls	r3, r3, #8
 8008c8e:	b21a      	sxth	r2, r3
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	0a1b      	lsrs	r3, r3, #8
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	b21b      	sxth	r3, r3
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	b21b      	sxth	r3, r3
 8008c9c:	b29b      	uxth	r3, r3
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	061a      	lsls	r2, r3, #24
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	0e1b      	lsrs	r3, r3, #24
 8008cce:	4313      	orrs	r3, r2
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008ce6:	f00b ff53 	bl	8014b90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008cea:	f000 f8d5 	bl	8008e98 <mem_init>
  memp_init();
 8008cee:	f000 fc31 	bl	8009554 <memp_init>
  pbuf_init();
  netif_init();
 8008cf2:	f000 fd3d 	bl	8009770 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008cf6:	f007 f8d9 	bl	800feac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008cfa:	f001 fe01 	bl	800a900 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008cfe:	f007 f81b 	bl	800fd38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <ptr_to_mem+0x20>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	4413      	add	r3, r2
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	2000a2b4 	.word	0x2000a2b4

08008d30 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <mem_to_ptr+0x20>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	b29b      	uxth	r3, r3
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	2000a2b4 	.word	0x2000a2b4

08008d54 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008d5c:	4b45      	ldr	r3, [pc, #276]	; (8008e74 <plug_holes+0x120>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d206      	bcs.n	8008d74 <plug_holes+0x20>
 8008d66:	4b44      	ldr	r3, [pc, #272]	; (8008e78 <plug_holes+0x124>)
 8008d68:	f240 12df 	movw	r2, #479	; 0x1df
 8008d6c:	4943      	ldr	r1, [pc, #268]	; (8008e7c <plug_holes+0x128>)
 8008d6e:	4844      	ldr	r0, [pc, #272]	; (8008e80 <plug_holes+0x12c>)
 8008d70:	f00c f88a 	bl	8014e88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008d74:	4b43      	ldr	r3, [pc, #268]	; (8008e84 <plug_holes+0x130>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d306      	bcc.n	8008d8c <plug_holes+0x38>
 8008d7e:	4b3e      	ldr	r3, [pc, #248]	; (8008e78 <plug_holes+0x124>)
 8008d80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008d84:	4940      	ldr	r1, [pc, #256]	; (8008e88 <plug_holes+0x134>)
 8008d86:	483e      	ldr	r0, [pc, #248]	; (8008e80 <plug_holes+0x12c>)
 8008d88:	f00c f87e 	bl	8014e88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d006      	beq.n	8008da2 <plug_holes+0x4e>
 8008d94:	4b38      	ldr	r3, [pc, #224]	; (8008e78 <plug_holes+0x124>)
 8008d96:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008d9a:	493c      	ldr	r1, [pc, #240]	; (8008e8c <plug_holes+0x138>)
 8008d9c:	4838      	ldr	r0, [pc, #224]	; (8008e80 <plug_holes+0x12c>)
 8008d9e:	f00c f873 	bl	8014e88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008daa:	d906      	bls.n	8008dba <plug_holes+0x66>
 8008dac:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <plug_holes+0x124>)
 8008dae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008db2:	4937      	ldr	r1, [pc, #220]	; (8008e90 <plug_holes+0x13c>)
 8008db4:	4832      	ldr	r0, [pc, #200]	; (8008e80 <plug_holes+0x12c>)
 8008db6:	f00c f867 	bl	8014e88 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff ffa4 	bl	8008d0c <ptr_to_mem>
 8008dc4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d024      	beq.n	8008e18 <plug_holes+0xc4>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d120      	bne.n	8008e18 <plug_holes+0xc4>
 8008dd6:	4b2b      	ldr	r3, [pc, #172]	; (8008e84 <plug_holes+0x130>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d01b      	beq.n	8008e18 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008de0:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <plug_holes+0x140>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d102      	bne.n	8008df0 <plug_holes+0x9c>
      lfree = mem;
 8008dea:	4a2a      	ldr	r2, [pc, #168]	; (8008e94 <plug_holes+0x140>)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	881a      	ldrh	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e00:	d00a      	beq.n	8008e18 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff ff80 	bl	8008d0c <ptr_to_mem>
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff ff8e 	bl	8008d30 <mem_to_ptr>
 8008e14:	4603      	mov	r3, r0
 8008e16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ff75 	bl	8008d0c <ptr_to_mem>
 8008e22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d01f      	beq.n	8008e6c <plug_holes+0x118>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	791b      	ldrb	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11b      	bne.n	8008e6c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008e34:	4b17      	ldr	r3, [pc, #92]	; (8008e94 <plug_holes+0x140>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d102      	bne.n	8008e44 <plug_holes+0xf0>
      lfree = pmem;
 8008e3e:	4a15      	ldr	r2, [pc, #84]	; (8008e94 <plug_holes+0x140>)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	881a      	ldrh	r2, [r3, #0]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e54:	d00a      	beq.n	8008e6c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff ff56 	bl	8008d0c <ptr_to_mem>
 8008e60:	4604      	mov	r4, r0
 8008e62:	68b8      	ldr	r0, [r7, #8]
 8008e64:	f7ff ff64 	bl	8008d30 <mem_to_ptr>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}
 8008e74:	2000a2b4 	.word	0x2000a2b4
 8008e78:	08015ed8 	.word	0x08015ed8
 8008e7c:	08015f08 	.word	0x08015f08
 8008e80:	08015f20 	.word	0x08015f20
 8008e84:	2000a2b8 	.word	0x2000a2b8
 8008e88:	08015f48 	.word	0x08015f48
 8008e8c:	08015f64 	.word	0x08015f64
 8008e90:	08015f80 	.word	0x08015f80
 8008e94:	2000a2c0 	.word	0x2000a2c0

08008e98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008e9e:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <mem_init+0x84>)
 8008ea0:	3303      	adds	r3, #3
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <mem_init+0x88>)
 8008eaa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008eac:	4b1c      	ldr	r3, [pc, #112]	; (8008f20 <mem_init+0x88>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008eb8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008ec6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008eca:	f7ff ff1f 	bl	8008d0c <ptr_to_mem>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	4a14      	ldr	r2, [pc, #80]	; (8008f24 <mem_init+0x8c>)
 8008ed2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008ed4:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <mem_init+0x8c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008edc:	4b11      	ldr	r3, [pc, #68]	; (8008f24 <mem_init+0x8c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008ee4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <mem_init+0x8c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008eee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <mem_init+0x88>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <mem_init+0x90>)
 8008ef6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <mem_init+0x94>)
 8008efa:	f00b fe55 	bl	8014ba8 <sys_mutex_new>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <mem_init+0x98>)
 8008f06:	f240 221f 	movw	r2, #543	; 0x21f
 8008f0a:	490a      	ldr	r1, [pc, #40]	; (8008f34 <mem_init+0x9c>)
 8008f0c:	480a      	ldr	r0, [pc, #40]	; (8008f38 <mem_init+0xa0>)
 8008f0e:	f00b ffbb 	bl	8014e88 <iprintf>
  }
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20009c60 	.word	0x20009c60
 8008f20:	2000a2b4 	.word	0x2000a2b4
 8008f24:	2000a2b8 	.word	0x2000a2b8
 8008f28:	2000a2c0 	.word	0x2000a2c0
 8008f2c:	2000a2bc 	.word	0x2000a2bc
 8008f30:	08015ed8 	.word	0x08015ed8
 8008f34:	08015fac 	.word	0x08015fac
 8008f38:	08015f20 	.word	0x08015f20

08008f3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fef3 	bl	8008d30 <mem_to_ptr>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff feda 	bl	8008d0c <ptr_to_mem>
 8008f58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fed4 	bl	8008d0c <ptr_to_mem>
 8008f64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f6e:	d818      	bhi.n	8008fa2 <mem_link_valid+0x66>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f78:	d813      	bhi.n	8008fa2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008f7e:	8afa      	ldrh	r2, [r7, #22]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d004      	beq.n	8008f8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	8afa      	ldrh	r2, [r7, #22]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d109      	bne.n	8008fa2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008f8e:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <mem_link_valid+0x74>)
 8008f90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d006      	beq.n	8008fa6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	8afa      	ldrh	r2, [r7, #22]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d001      	beq.n	8008fa6 <mem_link_valid+0x6a>
    return 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e000      	b.n	8008fa8 <mem_link_valid+0x6c>
  }
  return 1;
 8008fa6:	2301      	movs	r3, #1
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	2000a2b8 	.word	0x2000a2b8

08008fb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d070      	beq.n	80090a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f003 0303 	and.w	r3, r3, #3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00d      	beq.n	8008fe8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008fcc:	4b37      	ldr	r3, [pc, #220]	; (80090ac <mem_free+0xf8>)
 8008fce:	f240 2273 	movw	r2, #627	; 0x273
 8008fd2:	4937      	ldr	r1, [pc, #220]	; (80090b0 <mem_free+0xfc>)
 8008fd4:	4837      	ldr	r0, [pc, #220]	; (80090b4 <mem_free+0x100>)
 8008fd6:	f00b ff57 	bl	8014e88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008fda:	f00b fe37 	bl	8014c4c <sys_arch_protect>
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f00b fe41 	bl	8014c68 <sys_arch_unprotect>
    return;
 8008fe6:	e05e      	b.n	80090a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3b08      	subs	r3, #8
 8008fec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008fee:	4b32      	ldr	r3, [pc, #200]	; (80090b8 <mem_free+0x104>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d306      	bcc.n	8009006 <mem_free+0x52>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f103 020c 	add.w	r2, r3, #12
 8008ffe:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <mem_free+0x108>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d90d      	bls.n	8009022 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009006:	4b29      	ldr	r3, [pc, #164]	; (80090ac <mem_free+0xf8>)
 8009008:	f240 227f 	movw	r2, #639	; 0x27f
 800900c:	492c      	ldr	r1, [pc, #176]	; (80090c0 <mem_free+0x10c>)
 800900e:	4829      	ldr	r0, [pc, #164]	; (80090b4 <mem_free+0x100>)
 8009010:	f00b ff3a 	bl	8014e88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009014:	f00b fe1a 	bl	8014c4c <sys_arch_protect>
 8009018:	6138      	str	r0, [r7, #16]
 800901a:	6938      	ldr	r0, [r7, #16]
 800901c:	f00b fe24 	bl	8014c68 <sys_arch_unprotect>
    return;
 8009020:	e041      	b.n	80090a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009022:	4828      	ldr	r0, [pc, #160]	; (80090c4 <mem_free+0x110>)
 8009024:	f00b fdd6 	bl	8014bd4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d110      	bne.n	8009052 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <mem_free+0xf8>)
 8009032:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009036:	4924      	ldr	r1, [pc, #144]	; (80090c8 <mem_free+0x114>)
 8009038:	481e      	ldr	r0, [pc, #120]	; (80090b4 <mem_free+0x100>)
 800903a:	f00b ff25 	bl	8014e88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800903e:	4821      	ldr	r0, [pc, #132]	; (80090c4 <mem_free+0x110>)
 8009040:	f00b fdd7 	bl	8014bf2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009044:	f00b fe02 	bl	8014c4c <sys_arch_protect>
 8009048:	6178      	str	r0, [r7, #20]
 800904a:	6978      	ldr	r0, [r7, #20]
 800904c:	f00b fe0c 	bl	8014c68 <sys_arch_unprotect>
    return;
 8009050:	e029      	b.n	80090a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009052:	69f8      	ldr	r0, [r7, #28]
 8009054:	f7ff ff72 	bl	8008f3c <mem_link_valid>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d110      	bne.n	8009080 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <mem_free+0xf8>)
 8009060:	f240 2295 	movw	r2, #661	; 0x295
 8009064:	4919      	ldr	r1, [pc, #100]	; (80090cc <mem_free+0x118>)
 8009066:	4813      	ldr	r0, [pc, #76]	; (80090b4 <mem_free+0x100>)
 8009068:	f00b ff0e 	bl	8014e88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800906c:	4815      	ldr	r0, [pc, #84]	; (80090c4 <mem_free+0x110>)
 800906e:	f00b fdc0 	bl	8014bf2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009072:	f00b fdeb 	bl	8014c4c <sys_arch_protect>
 8009076:	61b8      	str	r0, [r7, #24]
 8009078:	69b8      	ldr	r0, [r7, #24]
 800907a:	f00b fdf5 	bl	8014c68 <sys_arch_unprotect>
    return;
 800907e:	e012      	b.n	80090a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2200      	movs	r2, #0
 8009084:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009086:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <mem_free+0x11c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	429a      	cmp	r2, r3
 800908e:	d202      	bcs.n	8009096 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009090:	4a0f      	ldr	r2, [pc, #60]	; (80090d0 <mem_free+0x11c>)
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009096:	69f8      	ldr	r0, [r7, #28]
 8009098:	f7ff fe5c 	bl	8008d54 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <mem_free+0x110>)
 800909e:	f00b fda8 	bl	8014bf2 <sys_mutex_unlock>
 80090a2:	e000      	b.n	80090a6 <mem_free+0xf2>
    return;
 80090a4:	bf00      	nop
}
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	08015ed8 	.word	0x08015ed8
 80090b0:	08015fc8 	.word	0x08015fc8
 80090b4:	08015f20 	.word	0x08015f20
 80090b8:	2000a2b4 	.word	0x2000a2b4
 80090bc:	2000a2b8 	.word	0x2000a2b8
 80090c0:	08015fec 	.word	0x08015fec
 80090c4:	2000a2bc 	.word	0x2000a2bc
 80090c8:	08016008 	.word	0x08016008
 80090cc:	08016030 	.word	0x08016030
 80090d0:	2000a2c0 	.word	0x2000a2c0

080090d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80090e0:	887b      	ldrh	r3, [r7, #2]
 80090e2:	3303      	adds	r3, #3
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f023 0303 	bic.w	r3, r3, #3
 80090ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80090ec:	8bfb      	ldrh	r3, [r7, #30]
 80090ee:	2b0b      	cmp	r3, #11
 80090f0:	d801      	bhi.n	80090f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80090f2:	230c      	movs	r3, #12
 80090f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80090f6:	8bfb      	ldrh	r3, [r7, #30]
 80090f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80090fc:	d803      	bhi.n	8009106 <mem_trim+0x32>
 80090fe:	8bfa      	ldrh	r2, [r7, #30]
 8009100:	887b      	ldrh	r3, [r7, #2]
 8009102:	429a      	cmp	r2, r3
 8009104:	d201      	bcs.n	800910a <mem_trim+0x36>
    return NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	e0d8      	b.n	80092bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800910a:	4b6e      	ldr	r3, [pc, #440]	; (80092c4 <mem_trim+0x1f0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	429a      	cmp	r2, r3
 8009112:	d304      	bcc.n	800911e <mem_trim+0x4a>
 8009114:	4b6c      	ldr	r3, [pc, #432]	; (80092c8 <mem_trim+0x1f4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	429a      	cmp	r2, r3
 800911c:	d306      	bcc.n	800912c <mem_trim+0x58>
 800911e:	4b6b      	ldr	r3, [pc, #428]	; (80092cc <mem_trim+0x1f8>)
 8009120:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009124:	496a      	ldr	r1, [pc, #424]	; (80092d0 <mem_trim+0x1fc>)
 8009126:	486b      	ldr	r0, [pc, #428]	; (80092d4 <mem_trim+0x200>)
 8009128:	f00b feae 	bl	8014e88 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800912c:	4b65      	ldr	r3, [pc, #404]	; (80092c4 <mem_trim+0x1f0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d304      	bcc.n	8009140 <mem_trim+0x6c>
 8009136:	4b64      	ldr	r3, [pc, #400]	; (80092c8 <mem_trim+0x1f4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d307      	bcc.n	8009150 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009140:	f00b fd84 	bl	8014c4c <sys_arch_protect>
 8009144:	60b8      	str	r0, [r7, #8]
 8009146:	68b8      	ldr	r0, [r7, #8]
 8009148:	f00b fd8e 	bl	8014c68 <sys_arch_unprotect>
    return rmem;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	e0b5      	b.n	80092bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3b08      	subs	r3, #8
 8009154:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009156:	69b8      	ldr	r0, [r7, #24]
 8009158:	f7ff fdea 	bl	8008d30 <mem_to_ptr>
 800915c:	4603      	mov	r3, r0
 800915e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	8afb      	ldrh	r3, [r7, #22]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b08      	subs	r3, #8
 800916c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800916e:	8bfa      	ldrh	r2, [r7, #30]
 8009170:	8abb      	ldrh	r3, [r7, #20]
 8009172:	429a      	cmp	r2, r3
 8009174:	d906      	bls.n	8009184 <mem_trim+0xb0>
 8009176:	4b55      	ldr	r3, [pc, #340]	; (80092cc <mem_trim+0x1f8>)
 8009178:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800917c:	4956      	ldr	r1, [pc, #344]	; (80092d8 <mem_trim+0x204>)
 800917e:	4855      	ldr	r0, [pc, #340]	; (80092d4 <mem_trim+0x200>)
 8009180:	f00b fe82 	bl	8014e88 <iprintf>
  if (newsize > size) {
 8009184:	8bfa      	ldrh	r2, [r7, #30]
 8009186:	8abb      	ldrh	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d901      	bls.n	8009190 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	e095      	b.n	80092bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009190:	8bfa      	ldrh	r2, [r7, #30]
 8009192:	8abb      	ldrh	r3, [r7, #20]
 8009194:	429a      	cmp	r2, r3
 8009196:	d101      	bne.n	800919c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	e08f      	b.n	80092bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800919c:	484f      	ldr	r0, [pc, #316]	; (80092dc <mem_trim+0x208>)
 800919e:	f00b fd19 	bl	8014bd4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fdb0 	bl	8008d0c <ptr_to_mem>
 80091ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	791b      	ldrb	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d13f      	bne.n	8009236 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091be:	d106      	bne.n	80091ce <mem_trim+0xfa>
 80091c0:	4b42      	ldr	r3, [pc, #264]	; (80092cc <mem_trim+0x1f8>)
 80091c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80091c6:	4946      	ldr	r1, [pc, #280]	; (80092e0 <mem_trim+0x20c>)
 80091c8:	4842      	ldr	r0, [pc, #264]	; (80092d4 <mem_trim+0x200>)
 80091ca:	f00b fe5d 	bl	8014e88 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80091d4:	8afa      	ldrh	r2, [r7, #22]
 80091d6:	8bfb      	ldrh	r3, [r7, #30]
 80091d8:	4413      	add	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	3308      	adds	r3, #8
 80091de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80091e0:	4b40      	ldr	r3, [pc, #256]	; (80092e4 <mem_trim+0x210>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d106      	bne.n	80091f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80091ea:	89fb      	ldrh	r3, [r7, #14]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff fd8d 	bl	8008d0c <ptr_to_mem>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4a3b      	ldr	r2, [pc, #236]	; (80092e4 <mem_trim+0x210>)
 80091f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80091f8:	89fb      	ldrh	r3, [r7, #14]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff fd86 	bl	8008d0c <ptr_to_mem>
 8009200:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2200      	movs	r2, #0
 8009206:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	89ba      	ldrh	r2, [r7, #12]
 800920c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	8afa      	ldrh	r2, [r7, #22]
 8009212:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	89fa      	ldrh	r2, [r7, #14]
 8009218:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009222:	d047      	beq.n	80092b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fd6f 	bl	8008d0c <ptr_to_mem>
 800922e:	4602      	mov	r2, r0
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	8053      	strh	r3, [r2, #2]
 8009234:	e03e      	b.n	80092b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009236:	8bfb      	ldrh	r3, [r7, #30]
 8009238:	f103 0214 	add.w	r2, r3, #20
 800923c:	8abb      	ldrh	r3, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d838      	bhi.n	80092b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009242:	8afa      	ldrh	r2, [r7, #22]
 8009244:	8bfb      	ldrh	r3, [r7, #30]
 8009246:	4413      	add	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	3308      	adds	r3, #8
 800924c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009256:	d106      	bne.n	8009266 <mem_trim+0x192>
 8009258:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <mem_trim+0x1f8>)
 800925a:	f240 3216 	movw	r2, #790	; 0x316
 800925e:	4920      	ldr	r1, [pc, #128]	; (80092e0 <mem_trim+0x20c>)
 8009260:	481c      	ldr	r0, [pc, #112]	; (80092d4 <mem_trim+0x200>)
 8009262:	f00b fe11 	bl	8014e88 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fd4f 	bl	8008d0c <ptr_to_mem>
 800926e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <mem_trim+0x210>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	429a      	cmp	r2, r3
 8009278:	d202      	bcs.n	8009280 <mem_trim+0x1ac>
      lfree = mem2;
 800927a:	4a1a      	ldr	r2, [pc, #104]	; (80092e4 <mem_trim+0x210>)
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2200      	movs	r2, #0
 8009284:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	8afa      	ldrh	r2, [r7, #22]
 8009292:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	89fa      	ldrh	r2, [r7, #14]
 8009298:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092a2:	d007      	beq.n	80092b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff fd2f 	bl	8008d0c <ptr_to_mem>
 80092ae:	4602      	mov	r2, r0
 80092b0:	89fb      	ldrh	r3, [r7, #14]
 80092b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80092b4:	4809      	ldr	r0, [pc, #36]	; (80092dc <mem_trim+0x208>)
 80092b6:	f00b fc9c 	bl	8014bf2 <sys_mutex_unlock>
  return rmem;
 80092ba:	687b      	ldr	r3, [r7, #4]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	2000a2b4 	.word	0x2000a2b4
 80092c8:	2000a2b8 	.word	0x2000a2b8
 80092cc:	08015ed8 	.word	0x08015ed8
 80092d0:	08016064 	.word	0x08016064
 80092d4:	08015f20 	.word	0x08015f20
 80092d8:	0801607c 	.word	0x0801607c
 80092dc:	2000a2bc 	.word	0x2000a2bc
 80092e0:	0801609c 	.word	0x0801609c
 80092e4:	2000a2c0 	.word	0x2000a2c0

080092e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <mem_malloc+0x14>
    return NULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e0e2      	b.n	80094c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	3303      	adds	r3, #3
 8009300:	b29b      	uxth	r3, r3
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009308:	8bbb      	ldrh	r3, [r7, #28]
 800930a:	2b0b      	cmp	r3, #11
 800930c:	d801      	bhi.n	8009312 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800930e:	230c      	movs	r3, #12
 8009310:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009312:	8bbb      	ldrh	r3, [r7, #28]
 8009314:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009318:	d803      	bhi.n	8009322 <mem_malloc+0x3a>
 800931a:	8bba      	ldrh	r2, [r7, #28]
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	429a      	cmp	r2, r3
 8009320:	d201      	bcs.n	8009326 <mem_malloc+0x3e>
    return NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	e0cd      	b.n	80094c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009326:	4869      	ldr	r0, [pc, #420]	; (80094cc <mem_malloc+0x1e4>)
 8009328:	f00b fc54 	bl	8014bd4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800932c:	4b68      	ldr	r3, [pc, #416]	; (80094d0 <mem_malloc+0x1e8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fcfd 	bl	8008d30 <mem_to_ptr>
 8009336:	4603      	mov	r3, r0
 8009338:	83fb      	strh	r3, [r7, #30]
 800933a:	e0b7      	b.n	80094ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800933c:	8bfb      	ldrh	r3, [r7, #30]
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fce4 	bl	8008d0c <ptr_to_mem>
 8009344:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	791b      	ldrb	r3, [r3, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 80a7 	bne.w	800949e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	8bfb      	ldrh	r3, [r7, #30]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	f1a3 0208 	sub.w	r2, r3, #8
 800935e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009360:	429a      	cmp	r2, r3
 8009362:	f0c0 809c 	bcc.w	800949e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	8bfb      	ldrh	r3, [r7, #30]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	f1a3 0208 	sub.w	r2, r3, #8
 8009374:	8bbb      	ldrh	r3, [r7, #28]
 8009376:	3314      	adds	r3, #20
 8009378:	429a      	cmp	r2, r3
 800937a:	d333      	bcc.n	80093e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800937c:	8bfa      	ldrh	r2, [r7, #30]
 800937e:	8bbb      	ldrh	r3, [r7, #28]
 8009380:	4413      	add	r3, r2
 8009382:	b29b      	uxth	r3, r3
 8009384:	3308      	adds	r3, #8
 8009386:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009388:	8a7b      	ldrh	r3, [r7, #18]
 800938a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800938e:	d106      	bne.n	800939e <mem_malloc+0xb6>
 8009390:	4b50      	ldr	r3, [pc, #320]	; (80094d4 <mem_malloc+0x1ec>)
 8009392:	f240 3287 	movw	r2, #903	; 0x387
 8009396:	4950      	ldr	r1, [pc, #320]	; (80094d8 <mem_malloc+0x1f0>)
 8009398:	4850      	ldr	r0, [pc, #320]	; (80094dc <mem_malloc+0x1f4>)
 800939a:	f00b fd75 	bl	8014e88 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800939e:	8a7b      	ldrh	r3, [r7, #18]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7ff fcb3 	bl	8008d0c <ptr_to_mem>
 80093a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	881a      	ldrh	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8bfa      	ldrh	r2, [r7, #30]
 80093ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	8a7a      	ldrh	r2, [r7, #18]
 80093c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2201      	movs	r2, #1
 80093c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093d0:	d00b      	beq.n	80093ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fc98 	bl	8008d0c <ptr_to_mem>
 80093dc:	4602      	mov	r2, r0
 80093de:	8a7b      	ldrh	r3, [r7, #18]
 80093e0:	8053      	strh	r3, [r2, #2]
 80093e2:	e002      	b.n	80093ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2201      	movs	r2, #1
 80093e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80093ea:	4b39      	ldr	r3, [pc, #228]	; (80094d0 <mem_malloc+0x1e8>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d127      	bne.n	8009444 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80093f4:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <mem_malloc+0x1e8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80093fa:	e005      	b.n	8009408 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fc83 	bl	8008d0c <ptr_to_mem>
 8009406:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	791b      	ldrb	r3, [r3, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <mem_malloc+0x132>
 8009410:	4b33      	ldr	r3, [pc, #204]	; (80094e0 <mem_malloc+0x1f8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	429a      	cmp	r2, r3
 8009418:	d1f0      	bne.n	80093fc <mem_malloc+0x114>
          }
          lfree = cur;
 800941a:	4a2d      	ldr	r2, [pc, #180]	; (80094d0 <mem_malloc+0x1e8>)
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009420:	4b2b      	ldr	r3, [pc, #172]	; (80094d0 <mem_malloc+0x1e8>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4b2e      	ldr	r3, [pc, #184]	; (80094e0 <mem_malloc+0x1f8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d00b      	beq.n	8009444 <mem_malloc+0x15c>
 800942c:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <mem_malloc+0x1e8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d006      	beq.n	8009444 <mem_malloc+0x15c>
 8009436:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <mem_malloc+0x1ec>)
 8009438:	f240 32b5 	movw	r2, #949	; 0x3b5
 800943c:	4929      	ldr	r1, [pc, #164]	; (80094e4 <mem_malloc+0x1fc>)
 800943e:	4827      	ldr	r0, [pc, #156]	; (80094dc <mem_malloc+0x1f4>)
 8009440:	f00b fd22 	bl	8014e88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009444:	4821      	ldr	r0, [pc, #132]	; (80094cc <mem_malloc+0x1e4>)
 8009446:	f00b fbd4 	bl	8014bf2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800944a:	8bba      	ldrh	r2, [r7, #28]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	4413      	add	r3, r2
 8009450:	3308      	adds	r3, #8
 8009452:	4a23      	ldr	r2, [pc, #140]	; (80094e0 <mem_malloc+0x1f8>)
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	4293      	cmp	r3, r2
 8009458:	d906      	bls.n	8009468 <mem_malloc+0x180>
 800945a:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <mem_malloc+0x1ec>)
 800945c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009460:	4921      	ldr	r1, [pc, #132]	; (80094e8 <mem_malloc+0x200>)
 8009462:	481e      	ldr	r0, [pc, #120]	; (80094dc <mem_malloc+0x1f4>)
 8009464:	f00b fd10 	bl	8014e88 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <mem_malloc+0x198>
 8009472:	4b18      	ldr	r3, [pc, #96]	; (80094d4 <mem_malloc+0x1ec>)
 8009474:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009478:	491c      	ldr	r1, [pc, #112]	; (80094ec <mem_malloc+0x204>)
 800947a:	4818      	ldr	r0, [pc, #96]	; (80094dc <mem_malloc+0x1f4>)
 800947c:	f00b fd04 	bl	8014e88 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d006      	beq.n	8009498 <mem_malloc+0x1b0>
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <mem_malloc+0x1ec>)
 800948c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009490:	4917      	ldr	r1, [pc, #92]	; (80094f0 <mem_malloc+0x208>)
 8009492:	4812      	ldr	r0, [pc, #72]	; (80094dc <mem_malloc+0x1f4>)
 8009494:	f00b fcf8 	bl	8014e88 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3308      	adds	r3, #8
 800949c:	e011      	b.n	80094c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800949e:	8bfb      	ldrh	r3, [r7, #30]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff fc33 	bl	8008d0c <ptr_to_mem>
 80094a6:	4603      	mov	r3, r0
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80094ac:	8bfa      	ldrh	r2, [r7, #30]
 80094ae:	8bbb      	ldrh	r3, [r7, #28]
 80094b0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80094b4:	429a      	cmp	r2, r3
 80094b6:	f4ff af41 	bcc.w	800933c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80094ba:	4804      	ldr	r0, [pc, #16]	; (80094cc <mem_malloc+0x1e4>)
 80094bc:	f00b fb99 	bl	8014bf2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3720      	adds	r7, #32
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	2000a2bc 	.word	0x2000a2bc
 80094d0:	2000a2c0 	.word	0x2000a2c0
 80094d4:	08015ed8 	.word	0x08015ed8
 80094d8:	0801609c 	.word	0x0801609c
 80094dc:	08015f20 	.word	0x08015f20
 80094e0:	2000a2b8 	.word	0x2000a2b8
 80094e4:	080160b0 	.word	0x080160b0
 80094e8:	080160cc 	.word	0x080160cc
 80094ec:	080160fc 	.word	0x080160fc
 80094f0:	0801612c 	.word	0x0801612c

080094f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	3303      	adds	r3, #3
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e011      	b.n	800953a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4413      	add	r3, r2
 8009532:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	461a      	mov	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4293      	cmp	r3, r2
 8009544:	dbe7      	blt.n	8009516 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800955a:	2300      	movs	r3, #0
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	e009      	b.n	8009574 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	4a08      	ldr	r2, [pc, #32]	; (8009584 <memp_init+0x30>)
 8009564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff ffc3 	bl	80094f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	3301      	adds	r3, #1
 8009572:	80fb      	strh	r3, [r7, #6]
 8009574:	88fb      	ldrh	r3, [r7, #6]
 8009576:	2b0c      	cmp	r3, #12
 8009578:	d9f2      	bls.n	8009560 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	08018d04 	.word	0x08018d04

08009588 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009590:	f00b fb5c 	bl	8014c4c <sys_arch_protect>
 8009594:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <do_memp_malloc_pool+0x3e>
 80095b8:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <do_memp_malloc_pool+0x58>)
 80095ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 80095be:	4909      	ldr	r1, [pc, #36]	; (80095e4 <do_memp_malloc_pool+0x5c>)
 80095c0:	4809      	ldr	r0, [pc, #36]	; (80095e8 <do_memp_malloc_pool+0x60>)
 80095c2:	f00b fc61 	bl	8014e88 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f00b fb4e 	bl	8014c68 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	e003      	b.n	80095d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f00b fb49 	bl	8014c68 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	08016150 	.word	0x08016150
 80095e4:	08016180 	.word	0x08016180
 80095e8:	080161a4 	.word	0x080161a4

080095ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <memp_malloc_pool+0x1c>
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <memp_malloc_pool+0x38>)
 80095fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009600:	4909      	ldr	r1, [pc, #36]	; (8009628 <memp_malloc_pool+0x3c>)
 8009602:	480a      	ldr	r0, [pc, #40]	; (800962c <memp_malloc_pool+0x40>)
 8009604:	f00b fc40 	bl	8014e88 <iprintf>
  if (desc == NULL) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <memp_malloc_pool+0x26>
    return NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	e003      	b.n	800961a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff ffb8 	bl	8009588 <do_memp_malloc_pool>
 8009618:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08016150 	.word	0x08016150
 8009628:	080161cc 	.word	0x080161cc
 800962c:	080161a4 	.word	0x080161a4

08009630 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	2b0c      	cmp	r3, #12
 800963e:	d908      	bls.n	8009652 <memp_malloc+0x22>
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <memp_malloc+0x3c>)
 8009642:	f240 1257 	movw	r2, #343	; 0x157
 8009646:	490a      	ldr	r1, [pc, #40]	; (8009670 <memp_malloc+0x40>)
 8009648:	480a      	ldr	r0, [pc, #40]	; (8009674 <memp_malloc+0x44>)
 800964a:	f00b fc1d 	bl	8014e88 <iprintf>
 800964e:	2300      	movs	r3, #0
 8009650:	e008      	b.n	8009664 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	4a08      	ldr	r2, [pc, #32]	; (8009678 <memp_malloc+0x48>)
 8009656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff ff94 	bl	8009588 <do_memp_malloc_pool>
 8009660:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	08016150 	.word	0x08016150
 8009670:	080161e0 	.word	0x080161e0
 8009674:	080161a4 	.word	0x080161a4
 8009678:	08018d04 	.word	0x08018d04

0800967c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <do_memp_free_pool+0x22>
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <do_memp_free_pool+0x4c>)
 8009692:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009696:	490d      	ldr	r1, [pc, #52]	; (80096cc <do_memp_free_pool+0x50>)
 8009698:	480d      	ldr	r0, [pc, #52]	; (80096d0 <do_memp_free_pool+0x54>)
 800969a:	f00b fbf5 	bl	8014e88 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80096a2:	f00b fad3 	bl	8014c4c <sys_arch_protect>
 80096a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80096ba:	68b8      	ldr	r0, [r7, #8]
 80096bc:	f00b fad4 	bl	8014c68 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80096c0:	bf00      	nop
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	08016150 	.word	0x08016150
 80096cc:	08016200 	.word	0x08016200
 80096d0:	080161a4 	.word	0x080161a4

080096d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <memp_free_pool+0x1e>
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <memp_free_pool+0x3c>)
 80096e6:	f240 1295 	movw	r2, #405	; 0x195
 80096ea:	490a      	ldr	r1, [pc, #40]	; (8009714 <memp_free_pool+0x40>)
 80096ec:	480a      	ldr	r0, [pc, #40]	; (8009718 <memp_free_pool+0x44>)
 80096ee:	f00b fbcb 	bl	8014e88 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <memp_free_pool+0x34>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ffbb 	bl	800967c <do_memp_free_pool>
 8009706:	e000      	b.n	800970a <memp_free_pool+0x36>
    return;
 8009708:	bf00      	nop
}
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	08016150 	.word	0x08016150
 8009714:	080161cc 	.word	0x080161cc
 8009718:	080161a4 	.word	0x080161a4

0800971c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b0c      	cmp	r3, #12
 800972c:	d907      	bls.n	800973e <memp_free+0x22>
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <memp_free+0x44>)
 8009730:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009734:	490b      	ldr	r1, [pc, #44]	; (8009764 <memp_free+0x48>)
 8009736:	480c      	ldr	r0, [pc, #48]	; (8009768 <memp_free+0x4c>)
 8009738:	f00b fba6 	bl	8014e88 <iprintf>
 800973c:	e00c      	b.n	8009758 <memp_free+0x3c>

  if (mem == NULL) {
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	4a09      	ldr	r2, [pc, #36]	; (800976c <memp_free+0x50>)
 8009748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff ff94 	bl	800967c <do_memp_free_pool>
 8009754:	e000      	b.n	8009758 <memp_free+0x3c>
    return;
 8009756:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	08016150 	.word	0x08016150
 8009764:	08016220 	.word	0x08016220
 8009768:	080161a4 	.word	0x080161a4
 800976c:	08018d04 	.word	0x08018d04

08009770 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009774:	bf00      	nop
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d108      	bne.n	80097a6 <netif_add+0x26>
 8009794:	4b5b      	ldr	r3, [pc, #364]	; (8009904 <netif_add+0x184>)
 8009796:	f240 1227 	movw	r2, #295	; 0x127
 800979a:	495b      	ldr	r1, [pc, #364]	; (8009908 <netif_add+0x188>)
 800979c:	485b      	ldr	r0, [pc, #364]	; (800990c <netif_add+0x18c>)
 800979e:	f00b fb73 	bl	8014e88 <iprintf>
 80097a2:	2300      	movs	r3, #0
 80097a4:	e0a9      	b.n	80098fa <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d108      	bne.n	80097be <netif_add+0x3e>
 80097ac:	4b55      	ldr	r3, [pc, #340]	; (8009904 <netif_add+0x184>)
 80097ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80097b2:	4957      	ldr	r1, [pc, #348]	; (8009910 <netif_add+0x190>)
 80097b4:	4855      	ldr	r0, [pc, #340]	; (800990c <netif_add+0x18c>)
 80097b6:	f00b fb67 	bl	8014e88 <iprintf>
 80097ba:	2300      	movs	r3, #0
 80097bc:	e09d      	b.n	80098fa <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80097c4:	4b53      	ldr	r3, [pc, #332]	; (8009914 <netif_add+0x194>)
 80097c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80097ce:	4b51      	ldr	r3, [pc, #324]	; (8009914 <netif_add+0x194>)
 80097d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80097d8:	4b4e      	ldr	r3, [pc, #312]	; (8009914 <netif_add+0x194>)
 80097da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4a49      	ldr	r2, [pc, #292]	; (8009918 <netif_add+0x198>)
 80097f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3324      	adds	r3, #36	; 0x24
 8009806:	2204      	movs	r2, #4
 8009808:	2100      	movs	r1, #0
 800980a:	4618      	mov	r0, r3
 800980c:	f00b fba1 	bl	8014f52 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a3a      	ldr	r2, [r7, #32]
 800981a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800981c:	4b3f      	ldr	r3, [pc, #252]	; (800991c <netif_add+0x19c>)
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800982a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	68b9      	ldr	r1, [r7, #8]
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 f914 	bl	8009a60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	4798      	blx	r3
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <netif_add+0xc8>
    return NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	e058      	b.n	80098fa <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800984e:	2bff      	cmp	r3, #255	; 0xff
 8009850:	d103      	bne.n	800985a <netif_add+0xda>
        netif->num = 0;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800985e:	4b30      	ldr	r3, [pc, #192]	; (8009920 <netif_add+0x1a0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e02b      	b.n	80098be <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	429a      	cmp	r2, r3
 800986c:	d106      	bne.n	800987c <netif_add+0xfc>
 800986e:	4b25      	ldr	r3, [pc, #148]	; (8009904 <netif_add+0x184>)
 8009870:	f240 128b 	movw	r2, #395	; 0x18b
 8009874:	492b      	ldr	r1, [pc, #172]	; (8009924 <netif_add+0x1a4>)
 8009876:	4825      	ldr	r0, [pc, #148]	; (800990c <netif_add+0x18c>)
 8009878:	f00b fb06 	bl	8014e88 <iprintf>
        num_netifs++;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	3301      	adds	r3, #1
 8009880:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	dd06      	ble.n	8009896 <netif_add+0x116>
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <netif_add+0x184>)
 800988a:	f240 128d 	movw	r2, #397	; 0x18d
 800988e:	4926      	ldr	r1, [pc, #152]	; (8009928 <netif_add+0x1a8>)
 8009890:	481e      	ldr	r0, [pc, #120]	; (800990c <netif_add+0x18c>)
 8009892:	f00b faf9 	bl	8014e88 <iprintf>
        if (netif2->num == netif->num) {
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d108      	bne.n	80098b8 <netif_add+0x138>
          netif->num++;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098ac:	3301      	adds	r3, #1
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80098b6:	e005      	b.n	80098c4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	617b      	str	r3, [r7, #20]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1d0      	bne.n	8009866 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1be      	bne.n	8009848 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098d0:	2bfe      	cmp	r3, #254	; 0xfe
 80098d2:	d103      	bne.n	80098dc <netif_add+0x15c>
    netif_num = 0;
 80098d4:	4b11      	ldr	r3, [pc, #68]	; (800991c <netif_add+0x19c>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e006      	b.n	80098ea <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098e2:	3301      	adds	r3, #1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <netif_add+0x19c>)
 80098e8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80098ea:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <netif_add+0x1a0>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80098f2:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <netif_add+0x1a0>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80098f8:	68fb      	ldr	r3, [r7, #12]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	0801623c 	.word	0x0801623c
 8009908:	080162d0 	.word	0x080162d0
 800990c:	0801628c 	.word	0x0801628c
 8009910:	080162ec 	.word	0x080162ec
 8009914:	08018d88 	.word	0x08018d88
 8009918:	08009c73 	.word	0x08009c73
 800991c:	2000d3b8 	.word	0x2000d3b8
 8009920:	2000d3b0 	.word	0x2000d3b0
 8009924:	08016310 	.word	0x08016310
 8009928:	08016324 	.word	0x08016324

0800992c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f002 fb29 	bl	800bf90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f006 ff3f 	bl	80107c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <netif_do_set_ipaddr+0x20>
 8009962:	4b1d      	ldr	r3, [pc, #116]	; (80099d8 <netif_do_set_ipaddr+0x88>)
 8009964:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009968:	491c      	ldr	r1, [pc, #112]	; (80099dc <netif_do_set_ipaddr+0x8c>)
 800996a:	481d      	ldr	r0, [pc, #116]	; (80099e0 <netif_do_set_ipaddr+0x90>)
 800996c:	f00b fa8c 	bl	8014e88 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <netif_do_set_ipaddr+0x34>
 8009976:	4b18      	ldr	r3, [pc, #96]	; (80099d8 <netif_do_set_ipaddr+0x88>)
 8009978:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800997c:	4917      	ldr	r1, [pc, #92]	; (80099dc <netif_do_set_ipaddr+0x8c>)
 800997e:	4818      	ldr	r0, [pc, #96]	; (80099e0 <netif_do_set_ipaddr+0x90>)
 8009980:	f00b fa82 	bl	8014e88 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3304      	adds	r3, #4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d01c      	beq.n	80099cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3304      	adds	r3, #4
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80099a2:	f107 0314 	add.w	r3, r7, #20
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff ffbf 	bl	800992c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <netif_do_set_ipaddr+0x6a>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	e000      	b.n	80099bc <netif_do_set_ipaddr+0x6c>
 80099ba:	2300      	movs	r3, #0
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80099c0:	2101      	movs	r1, #1
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 f8d2 	bl	8009b6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	0801623c 	.word	0x0801623c
 80099dc:	08016354 	.word	0x08016354
 80099e0:	0801628c 	.word	0x0801628c

080099e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3308      	adds	r3, #8
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d00a      	beq.n	8009a14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <netif_do_set_netmask+0x26>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	e000      	b.n	8009a0c <netif_do_set_netmask+0x28>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009a10:	2301      	movs	r3, #1
 8009a12:	e000      	b.n	8009a16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	330c      	adds	r3, #12
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d00a      	beq.n	8009a52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <netif_do_set_gw+0x26>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	e000      	b.n	8009a4a <netif_do_set_gw+0x28>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009a7c:	4b1c      	ldr	r3, [pc, #112]	; (8009af0 <netif_set_addr+0x90>)
 8009a7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009a86:	4b1a      	ldr	r3, [pc, #104]	; (8009af0 <netif_set_addr+0x90>)
 8009a88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009a90:	4b17      	ldr	r3, [pc, #92]	; (8009af0 <netif_set_addr+0x90>)
 8009a92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <netif_set_addr+0x42>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <netif_set_addr+0x46>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <netif_set_addr+0x48>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d006      	beq.n	8009abe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ab0:	f107 0310 	add.w	r3, r7, #16
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff ff49 	bl	8009950 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009abe:	69fa      	ldr	r2, [r7, #28]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff ff8e 	bl	80099e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff ffa8 	bl	8009a22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ad8:	f107 0310 	add.w	r3, r7, #16
 8009adc:	461a      	mov	r2, r3
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff ff35 	bl	8009950 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009ae6:	bf00      	nop
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	08018d88 	.word	0x08018d88

08009af4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <netif_set_default+0x1c>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2000d3b4 	.word	0x2000d3b4

08009b14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d107      	bne.n	8009b32 <netif_set_up+0x1e>
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <netif_set_up+0x4c>)
 8009b24:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009b28:	490e      	ldr	r1, [pc, #56]	; (8009b64 <netif_set_up+0x50>)
 8009b2a:	480f      	ldr	r0, [pc, #60]	; (8009b68 <netif_set_up+0x54>)
 8009b2c:	f00b f9ac 	bl	8014e88 <iprintf>
 8009b30:	e013      	b.n	8009b5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10c      	bne.n	8009b5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b46:	f043 0301 	orr.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009b52:	2103      	movs	r1, #3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f809 	bl	8009b6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	0801623c 	.word	0x0801623c
 8009b64:	080163c4 	.word	0x080163c4
 8009b68:	0801628c 	.word	0x0801628c

08009b6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <netif_issue_reports+0x20>
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <netif_issue_reports+0x74>)
 8009b80:	f240 326d 	movw	r2, #877	; 0x36d
 8009b84:	4917      	ldr	r1, [pc, #92]	; (8009be4 <netif_issue_reports+0x78>)
 8009b86:	4818      	ldr	r0, [pc, #96]	; (8009be8 <netif_issue_reports+0x7c>)
 8009b88:	f00b f97e 	bl	8014e88 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b92:	f003 0304 	and.w	r3, r3, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01e      	beq.n	8009bd8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ba0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d017      	beq.n	8009bd8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d013      	beq.n	8009bda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00e      	beq.n	8009bda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f009 fbbd 	bl	8013350 <etharp_request>
 8009bd6:	e000      	b.n	8009bda <netif_issue_reports+0x6e>
    return;
 8009bd8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	0801623c 	.word	0x0801623c
 8009be4:	080163e0 	.word	0x080163e0
 8009be8:	0801628c 	.word	0x0801628c

08009bec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d107      	bne.n	8009c0a <netif_set_down+0x1e>
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <netif_set_down+0x58>)
 8009bfc:	f240 329b 	movw	r2, #923	; 0x39b
 8009c00:	4911      	ldr	r1, [pc, #68]	; (8009c48 <netif_set_down+0x5c>)
 8009c02:	4812      	ldr	r0, [pc, #72]	; (8009c4c <netif_set_down+0x60>)
 8009c04:	f00b f940 	bl	8014e88 <iprintf>
 8009c08:	e019      	b.n	8009c3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d012      	beq.n	8009c3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f008 ff43 	bl	8012ac4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	0801623c 	.word	0x0801623c
 8009c48:	08016404 	.word	0x08016404
 8009c4c:	0801628c 	.word	0x0801628c

08009c50 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	61da      	str	r2, [r3, #28]
  }
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009c7e:	f06f 030b 	mvn.w	r3, #11
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
	...

08009c90 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d013      	beq.n	8009cc8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009ca0:	4b0d      	ldr	r3, [pc, #52]	; (8009cd8 <netif_get_by_index+0x48>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	e00c      	b.n	8009cc2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cae:	3301      	adds	r3, #1
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	79fa      	ldrb	r2, [r7, #7]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d101      	bne.n	8009cbc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	e006      	b.n	8009cca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1ef      	bne.n	8009ca8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	2000d3b0 	.word	0x2000d3b0

08009cdc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009ce2:	f00a ffb3 	bl	8014c4c <sys_arch_protect>
 8009ce6:	6038      	str	r0, [r7, #0]
 8009ce8:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <pbuf_free_ooseq+0x44>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	701a      	strb	r2, [r3, #0]
 8009cee:	6838      	ldr	r0, [r7, #0]
 8009cf0:	f00a ffba 	bl	8014c68 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <pbuf_free_ooseq+0x48>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	607b      	str	r3, [r7, #4]
 8009cfa:	e00a      	b.n	8009d12 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 f981 	bl	800c00c <tcp_free_ooseq>
      return;
 8009d0a:	e005      	b.n	8009d18 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	607b      	str	r3, [r7, #4]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1f1      	bne.n	8009cfc <pbuf_free_ooseq+0x20>
    }
  }
}
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000d3b9 	.word	0x2000d3b9
 8009d24:	2000d3c8 	.word	0x2000d3c8

08009d28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009d30:	f7ff ffd4 	bl	8009cdc <pbuf_free_ooseq>
}
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009d42:	f00a ff83 	bl	8014c4c <sys_arch_protect>
 8009d46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009d48:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <pbuf_pool_is_empty+0x4c>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <pbuf_pool_is_empty+0x4c>)
 8009d50:	2201      	movs	r2, #1
 8009d52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f00a ff87 	bl	8014c68 <sys_arch_unprotect>

  if (!queued) {
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10f      	bne.n	8009d80 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009d60:	2100      	movs	r1, #0
 8009d62:	480a      	ldr	r0, [pc, #40]	; (8009d8c <pbuf_pool_is_empty+0x50>)
 8009d64:	f7fe ff02 	bl	8008b6c <tcpip_try_callback>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <pbuf_pool_is_empty+0x44>
 8009d6e:	f00a ff6d 	bl	8014c4c <sys_arch_protect>
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <pbuf_pool_is_empty+0x4c>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f00a ff74 	bl	8014c68 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	2000d3b9 	.word	0x2000d3b9
 8009d8c:	08009d29 	.word	0x08009d29

08009d90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	460b      	mov	r3, r1
 8009da0:	80fb      	strh	r3, [r7, #6]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	88fa      	ldrh	r2, [r7, #6]
 8009db6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	88ba      	ldrh	r2, [r7, #4]
 8009dbc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009dbe:	8b3b      	ldrh	r3, [r7, #24]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	7f3a      	ldrb	r2, [r7, #28]
 8009dca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	73da      	strb	r2, [r3, #15]
}
 8009dd8:	bf00      	nop
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	; 0x30
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
 8009dee:	460b      	mov	r3, r1
 8009df0:	80bb      	strh	r3, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009dfa:	887b      	ldrh	r3, [r7, #2]
 8009dfc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e00:	d07f      	beq.n	8009f02 <pbuf_alloc+0x11e>
 8009e02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e06:	f300 80c8 	bgt.w	8009f9a <pbuf_alloc+0x1b6>
 8009e0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e0e:	d010      	beq.n	8009e32 <pbuf_alloc+0x4e>
 8009e10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e14:	f300 80c1 	bgt.w	8009f9a <pbuf_alloc+0x1b6>
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d002      	beq.n	8009e22 <pbuf_alloc+0x3e>
 8009e1c:	2b41      	cmp	r3, #65	; 0x41
 8009e1e:	f040 80bc 	bne.w	8009f9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009e22:	887a      	ldrh	r2, [r7, #2]
 8009e24:	88bb      	ldrh	r3, [r7, #4]
 8009e26:	4619      	mov	r1, r3
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f000 f8d1 	bl	8009fd0 <pbuf_alloc_reference>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009e30:	e0bd      	b.n	8009fae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009e3a:	88bb      	ldrh	r3, [r7, #4]
 8009e3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009e3e:	200c      	movs	r0, #12
 8009e40:	f7ff fbf6 	bl	8009630 <memp_malloc>
 8009e44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d109      	bne.n	8009e60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009e4c:	f7ff ff76 	bl	8009d3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e58:	f000 faa8 	bl	800a3ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e0a7      	b.n	8009fb0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e62:	3303      	adds	r3, #3
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	8b7a      	ldrh	r2, [r7, #26]
 8009e74:	4293      	cmp	r3, r2
 8009e76:	bf28      	it	cs
 8009e78:	4613      	movcs	r3, r2
 8009e7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e7e:	3310      	adds	r3, #16
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	3303      	adds	r3, #3
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	89f9      	ldrh	r1, [r7, #14]
 8009e8e:	8b7a      	ldrh	r2, [r7, #26]
 8009e90:	2300      	movs	r3, #0
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	887b      	ldrh	r3, [r7, #2]
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6938      	ldr	r0, [r7, #16]
 8009e9e:	f7ff ff77 	bl	8009d90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <pbuf_alloc+0xd8>
 8009eae:	4b42      	ldr	r3, [pc, #264]	; (8009fb8 <pbuf_alloc+0x1d4>)
 8009eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009eb4:	4941      	ldr	r1, [pc, #260]	; (8009fbc <pbuf_alloc+0x1d8>)
 8009eb6:	4842      	ldr	r0, [pc, #264]	; (8009fc0 <pbuf_alloc+0x1dc>)
 8009eb8:	f00a ffe6 	bl	8014e88 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ebe:	3303      	adds	r3, #3
 8009ec0:	f023 0303 	bic.w	r3, r3, #3
 8009ec4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009ec8:	d106      	bne.n	8009ed8 <pbuf_alloc+0xf4>
 8009eca:	4b3b      	ldr	r3, [pc, #236]	; (8009fb8 <pbuf_alloc+0x1d4>)
 8009ecc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009ed0:	493c      	ldr	r1, [pc, #240]	; (8009fc4 <pbuf_alloc+0x1e0>)
 8009ed2:	483b      	ldr	r0, [pc, #236]	; (8009fc0 <pbuf_alloc+0x1dc>)
 8009ed4:	f00a ffd8 	bl	8014e88 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d102      	bne.n	8009ee4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee2:	e002      	b.n	8009eea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009eee:	8b7a      	ldrh	r2, [r7, #26]
 8009ef0:	89fb      	ldrh	r3, [r7, #14]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009efa:	8b7b      	ldrh	r3, [r7, #26]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d19e      	bne.n	8009e3e <pbuf_alloc+0x5a>
      break;
 8009f00:	e055      	b.n	8009fae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f04:	3303      	adds	r3, #3
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	f023 0303 	bic.w	r3, r3, #3
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	88bb      	ldrh	r3, [r7, #4]
 8009f10:	3303      	adds	r3, #3
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f023 0303 	bic.w	r3, r3, #3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009f1e:	8b3b      	ldrh	r3, [r7, #24]
 8009f20:	3310      	adds	r3, #16
 8009f22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f24:	8b3a      	ldrh	r2, [r7, #24]
 8009f26:	88bb      	ldrh	r3, [r7, #4]
 8009f28:	3303      	adds	r3, #3
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d306      	bcc.n	8009f40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009f32:	8afa      	ldrh	r2, [r7, #22]
 8009f34:	88bb      	ldrh	r3, [r7, #4]
 8009f36:	3303      	adds	r3, #3
 8009f38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d201      	bcs.n	8009f44 <pbuf_alloc+0x160>
        return NULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e035      	b.n	8009fb0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009f44:	8afb      	ldrh	r3, [r7, #22]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff f9ce 	bl	80092e8 <mem_malloc>
 8009f4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <pbuf_alloc+0x174>
        return NULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e02b      	b.n	8009fb0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f5a:	3310      	adds	r3, #16
 8009f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5e:	4413      	add	r3, r2
 8009f60:	3303      	adds	r3, #3
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	4618      	mov	r0, r3
 8009f68:	88b9      	ldrh	r1, [r7, #4]
 8009f6a:	88ba      	ldrh	r2, [r7, #4]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	887b      	ldrh	r3, [r7, #2]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	460b      	mov	r3, r1
 8009f76:	4601      	mov	r1, r0
 8009f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f7a:	f7ff ff09 	bl	8009d90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d010      	beq.n	8009fac <pbuf_alloc+0x1c8>
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <pbuf_alloc+0x1d4>)
 8009f8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009f90:	490d      	ldr	r1, [pc, #52]	; (8009fc8 <pbuf_alloc+0x1e4>)
 8009f92:	480b      	ldr	r0, [pc, #44]	; (8009fc0 <pbuf_alloc+0x1dc>)
 8009f94:	f00a ff78 	bl	8014e88 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009f98:	e008      	b.n	8009fac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <pbuf_alloc+0x1d4>)
 8009f9c:	f240 1227 	movw	r2, #295	; 0x127
 8009fa0:	490a      	ldr	r1, [pc, #40]	; (8009fcc <pbuf_alloc+0x1e8>)
 8009fa2:	4807      	ldr	r0, [pc, #28]	; (8009fc0 <pbuf_alloc+0x1dc>)
 8009fa4:	f00a ff70 	bl	8014e88 <iprintf>
      return NULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e001      	b.n	8009fb0 <pbuf_alloc+0x1cc>
      break;
 8009fac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3728      	adds	r7, #40	; 0x28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	0801646c 	.word	0x0801646c
 8009fbc:	0801649c 	.word	0x0801649c
 8009fc0:	080164cc 	.word	0x080164cc
 8009fc4:	080164f4 	.word	0x080164f4
 8009fc8:	08016528 	.word	0x08016528
 8009fcc:	08016554 	.word	0x08016554

08009fd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009fe0:	883b      	ldrh	r3, [r7, #0]
 8009fe2:	2b41      	cmp	r3, #65	; 0x41
 8009fe4:	d009      	beq.n	8009ffa <pbuf_alloc_reference+0x2a>
 8009fe6:	883b      	ldrh	r3, [r7, #0]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d006      	beq.n	8009ffa <pbuf_alloc_reference+0x2a>
 8009fec:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <pbuf_alloc_reference+0x5c>)
 8009fee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009ff2:	490f      	ldr	r1, [pc, #60]	; (800a030 <pbuf_alloc_reference+0x60>)
 8009ff4:	480f      	ldr	r0, [pc, #60]	; (800a034 <pbuf_alloc_reference+0x64>)
 8009ff6:	f00a ff47 	bl	8014e88 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009ffa:	200b      	movs	r0, #11
 8009ffc:	f7ff fb18 	bl	8009630 <memp_malloc>
 800a000:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	e00b      	b.n	800a024 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a00c:	8879      	ldrh	r1, [r7, #2]
 800a00e:	887a      	ldrh	r2, [r7, #2]
 800a010:	2300      	movs	r3, #0
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	883b      	ldrh	r3, [r7, #0]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	460b      	mov	r3, r1
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff feb7 	bl	8009d90 <pbuf_init_alloced_pbuf>
  return p;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	0801646c 	.word	0x0801646c
 800a030:	08016570 	.word	0x08016570
 800a034:	080164cc 	.word	0x080164cc

0800a038 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	460b      	mov	r3, r1
 800a046:	81bb      	strh	r3, [r7, #12]
 800a048:	4613      	mov	r3, r2
 800a04a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a050:	8a7b      	ldrh	r3, [r7, #18]
 800a052:	3303      	adds	r3, #3
 800a054:	f023 0203 	bic.w	r2, r3, #3
 800a058:	89bb      	ldrh	r3, [r7, #12]
 800a05a:	441a      	add	r2, r3
 800a05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a05e:	429a      	cmp	r2, r3
 800a060:	d901      	bls.n	800a066 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	e018      	b.n	800a098 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a06c:	8a7b      	ldrh	r3, [r7, #18]
 800a06e:	3303      	adds	r3, #3
 800a070:	f023 0303 	bic.w	r3, r3, #3
 800a074:	6a3a      	ldr	r2, [r7, #32]
 800a076:	4413      	add	r3, r2
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e001      	b.n	800a080 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	89b9      	ldrh	r1, [r7, #12]
 800a084:	89ba      	ldrh	r2, [r7, #12]
 800a086:	2302      	movs	r3, #2
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	897b      	ldrh	r3, [r7, #10]
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	460b      	mov	r3, r1
 800a090:	6979      	ldr	r1, [r7, #20]
 800a092:	f7ff fe7d 	bl	8009d90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a096:	687b      	ldr	r3, [r7, #4]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <pbuf_realloc+0x20>
 800a0b2:	4b3a      	ldr	r3, [pc, #232]	; (800a19c <pbuf_realloc+0xfc>)
 800a0b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a0b8:	4939      	ldr	r1, [pc, #228]	; (800a1a0 <pbuf_realloc+0x100>)
 800a0ba:	483a      	ldr	r0, [pc, #232]	; (800a1a4 <pbuf_realloc+0x104>)
 800a0bc:	f00a fee4 	bl	8014e88 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	891b      	ldrh	r3, [r3, #8]
 800a0c4:	887a      	ldrh	r2, [r7, #2]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d263      	bcs.n	800a192 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	891a      	ldrh	r2, [r3, #8]
 800a0ce:	887b      	ldrh	r3, [r7, #2]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a0d4:	887b      	ldrh	r3, [r7, #2]
 800a0d6:	817b      	strh	r3, [r7, #10]
  q = p;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a0dc:	e018      	b.n	800a110 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	895b      	ldrh	r3, [r3, #10]
 800a0e2:	897a      	ldrh	r2, [r7, #10]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	891a      	ldrh	r2, [r3, #8]
 800a0ec:	893b      	ldrh	r3, [r7, #8]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <pbuf_realloc+0x70>
 800a102:	4b26      	ldr	r3, [pc, #152]	; (800a19c <pbuf_realloc+0xfc>)
 800a104:	f240 12af 	movw	r2, #431	; 0x1af
 800a108:	4927      	ldr	r1, [pc, #156]	; (800a1a8 <pbuf_realloc+0x108>)
 800a10a:	4826      	ldr	r0, [pc, #152]	; (800a1a4 <pbuf_realloc+0x104>)
 800a10c:	f00a febc 	bl	8014e88 <iprintf>
  while (rem_len > q->len) {
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	895b      	ldrh	r3, [r3, #10]
 800a114:	897a      	ldrh	r2, [r7, #10]
 800a116:	429a      	cmp	r2, r3
 800a118:	d8e1      	bhi.n	800a0de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	7b1b      	ldrb	r3, [r3, #12]
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	2b00      	cmp	r3, #0
 800a124:	d121      	bne.n	800a16a <pbuf_realloc+0xca>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	895b      	ldrh	r3, [r3, #10]
 800a12a:	897a      	ldrh	r2, [r7, #10]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d01c      	beq.n	800a16a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	7b5b      	ldrb	r3, [r3, #13]
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d116      	bne.n	800a16a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	b29a      	uxth	r2, r3
 800a146:	897b      	ldrh	r3, [r7, #10]
 800a148:	4413      	add	r3, r2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7fe ffc0 	bl	80090d4 <mem_trim>
 800a154:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <pbuf_realloc+0xca>
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <pbuf_realloc+0xfc>)
 800a15e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a162:	4912      	ldr	r1, [pc, #72]	; (800a1ac <pbuf_realloc+0x10c>)
 800a164:	480f      	ldr	r0, [pc, #60]	; (800a1a4 <pbuf_realloc+0x104>)
 800a166:	f00a fe8f 	bl	8014e88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	897a      	ldrh	r2, [r7, #10]
 800a16e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	895a      	ldrh	r2, [r3, #10]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f911 	bl	800a3ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	e000      	b.n	800a194 <pbuf_realloc+0xf4>
    return;
 800a192:	bf00      	nop

}
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	0801646c 	.word	0x0801646c
 800a1a0:	08016584 	.word	0x08016584
 800a1a4:	080164cc 	.word	0x080164cc
 800a1a8:	0801659c 	.word	0x0801659c
 800a1ac:	080165b4 	.word	0x080165b4

0800a1b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d106      	bne.n	800a1d2 <pbuf_add_header_impl+0x22>
 800a1c4:	4b2b      	ldr	r3, [pc, #172]	; (800a274 <pbuf_add_header_impl+0xc4>)
 800a1c6:	f240 12df 	movw	r2, #479	; 0x1df
 800a1ca:	492b      	ldr	r1, [pc, #172]	; (800a278 <pbuf_add_header_impl+0xc8>)
 800a1cc:	482b      	ldr	r0, [pc, #172]	; (800a27c <pbuf_add_header_impl+0xcc>)
 800a1ce:	f00a fe5b 	bl	8014e88 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <pbuf_add_header_impl+0x30>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1de:	d301      	bcc.n	800a1e4 <pbuf_add_header_impl+0x34>
    return 1;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e043      	b.n	800a26c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <pbuf_add_header_impl+0x3e>
    return 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e03e      	b.n	800a26c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	891a      	ldrh	r2, [r3, #8]
 800a1f6:	8a7b      	ldrh	r3, [r7, #18]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	8a7a      	ldrh	r2, [r7, #18]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d901      	bls.n	800a206 <pbuf_add_header_impl+0x56>
    return 1;
 800a202:	2301      	movs	r3, #1
 800a204:	e032      	b.n	800a26c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	7b1b      	ldrb	r3, [r3, #12]
 800a20a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a20c:	8a3b      	ldrh	r3, [r7, #16]
 800a20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00c      	beq.n	800a230 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	425b      	negs	r3, r3
 800a21e:	4413      	add	r3, r2
 800a220:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3310      	adds	r3, #16
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d20d      	bcs.n	800a248 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e01d      	b.n	800a26c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	425b      	negs	r3, r3
 800a23e:	4413      	add	r3, r2
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	e001      	b.n	800a248 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a244:	2301      	movs	r3, #1
 800a246:	e011      	b.n	800a26c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	895a      	ldrh	r2, [r3, #10]
 800a252:	8a7b      	ldrh	r3, [r7, #18]
 800a254:	4413      	add	r3, r2
 800a256:	b29a      	uxth	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	891a      	ldrh	r2, [r3, #8]
 800a260:	8a7b      	ldrh	r3, [r7, #18]
 800a262:	4413      	add	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	811a      	strh	r2, [r3, #8]


  return 0;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	0801646c 	.word	0x0801646c
 800a278:	080165d0 	.word	0x080165d0
 800a27c:	080164cc 	.word	0x080164cc

0800a280 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a28a:	2200      	movs	r2, #0
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff ff8e 	bl	800a1b0 <pbuf_add_header_impl>
 800a294:	4603      	mov	r3, r0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <pbuf_remove_header+0x1e>
 800a2b0:	4b20      	ldr	r3, [pc, #128]	; (800a334 <pbuf_remove_header+0x94>)
 800a2b2:	f240 224b 	movw	r2, #587	; 0x24b
 800a2b6:	4920      	ldr	r1, [pc, #128]	; (800a338 <pbuf_remove_header+0x98>)
 800a2b8:	4820      	ldr	r0, [pc, #128]	; (800a33c <pbuf_remove_header+0x9c>)
 800a2ba:	f00a fde5 	bl	8014e88 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <pbuf_remove_header+0x2c>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ca:	d301      	bcc.n	800a2d0 <pbuf_remove_header+0x30>
    return 1;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e02c      	b.n	800a32a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <pbuf_remove_header+0x3a>
    return 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e027      	b.n	800a32a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	895b      	ldrh	r3, [r3, #10]
 800a2e2:	89fa      	ldrh	r2, [r7, #14]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d908      	bls.n	800a2fa <pbuf_remove_header+0x5a>
 800a2e8:	4b12      	ldr	r3, [pc, #72]	; (800a334 <pbuf_remove_header+0x94>)
 800a2ea:	f240 2255 	movw	r2, #597	; 0x255
 800a2ee:	4914      	ldr	r1, [pc, #80]	; (800a340 <pbuf_remove_header+0xa0>)
 800a2f0:	4812      	ldr	r0, [pc, #72]	; (800a33c <pbuf_remove_header+0x9c>)
 800a2f2:	f00a fdc9 	bl	8014e88 <iprintf>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e017      	b.n	800a32a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	441a      	add	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	895a      	ldrh	r2, [r3, #10]
 800a310:	89fb      	ldrh	r3, [r7, #14]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	b29a      	uxth	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	891a      	ldrh	r2, [r3, #8]
 800a31e:	89fb      	ldrh	r3, [r7, #14]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	0801646c 	.word	0x0801646c
 800a338:	080165d0 	.word	0x080165d0
 800a33c:	080164cc 	.word	0x080164cc
 800a340:	080165dc 	.word	0x080165dc

0800a344 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
 800a350:	4613      	mov	r3, r2
 800a352:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da08      	bge.n	800a36e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a35c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a360:	425b      	negs	r3, r3
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ff9b 	bl	800a2a0 <pbuf_remove_header>
 800a36a:	4603      	mov	r3, r0
 800a36c:	e007      	b.n	800a37e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a36e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a372:	787a      	ldrb	r2, [r7, #1]
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff ff1a 	bl	800a1b0 <pbuf_add_header_impl>
 800a37c:	4603      	mov	r3, r0
  }
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a396:	2201      	movs	r2, #1
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff ffd2 	bl	800a344 <pbuf_header_impl>
 800a3a0:	4603      	mov	r3, r0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10b      	bne.n	800a3d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d106      	bne.n	800a3ce <pbuf_free+0x22>
 800a3c0:	4b3b      	ldr	r3, [pc, #236]	; (800a4b0 <pbuf_free+0x104>)
 800a3c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a3c6:	493b      	ldr	r1, [pc, #236]	; (800a4b4 <pbuf_free+0x108>)
 800a3c8:	483b      	ldr	r0, [pc, #236]	; (800a4b8 <pbuf_free+0x10c>)
 800a3ca:	f00a fd5d 	bl	8014e88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e069      	b.n	800a4a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a3d6:	e062      	b.n	800a49e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a3d8:	f00a fc38 	bl	8014c4c <sys_arch_protect>
 800a3dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	7b9b      	ldrb	r3, [r3, #14]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <pbuf_free+0x48>
 800a3e6:	4b32      	ldr	r3, [pc, #200]	; (800a4b0 <pbuf_free+0x104>)
 800a3e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a3ec:	4933      	ldr	r1, [pc, #204]	; (800a4bc <pbuf_free+0x110>)
 800a3ee:	4832      	ldr	r0, [pc, #200]	; (800a4b8 <pbuf_free+0x10c>)
 800a3f0:	f00a fd4a 	bl	8014e88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	7b9b      	ldrb	r3, [r3, #14]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	739a      	strb	r2, [r3, #14]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7b9b      	ldrb	r3, [r3, #14]
 800a404:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800a406:	69b8      	ldr	r0, [r7, #24]
 800a408:	f00a fc2e 	bl	8014c68 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d143      	bne.n	800a49a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7b1b      	ldrb	r3, [r3, #12]
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7b5b      	ldrb	r3, [r3, #13]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d011      	beq.n	800a452 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <pbuf_free+0x9c>
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <pbuf_free+0x104>)
 800a43c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a440:	491f      	ldr	r1, [pc, #124]	; (800a4c0 <pbuf_free+0x114>)
 800a442:	481d      	ldr	r0, [pc, #116]	; (800a4b8 <pbuf_free+0x10c>)
 800a444:	f00a fd20 	bl	8014e88 <iprintf>
        pc->custom_free_function(p);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	4798      	blx	r3
 800a450:	e01d      	b.n	800a48e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d104      	bne.n	800a462 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	200c      	movs	r0, #12
 800a45c:	f7ff f95e 	bl	800971c <memp_free>
 800a460:	e015      	b.n	800a48e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d104      	bne.n	800a472 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	200b      	movs	r0, #11
 800a46c:	f7ff f956 	bl	800971c <memp_free>
 800a470:	e00d      	b.n	800a48e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <pbuf_free+0xd4>
          mem_free(p);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7fe fd9b 	bl	8008fb4 <mem_free>
 800a47e:	e006      	b.n	800a48e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a480:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <pbuf_free+0x104>)
 800a482:	f240 320f 	movw	r2, #783	; 0x30f
 800a486:	490f      	ldr	r1, [pc, #60]	; (800a4c4 <pbuf_free+0x118>)
 800a488:	480b      	ldr	r0, [pc, #44]	; (800a4b8 <pbuf_free+0x10c>)
 800a48a:	f00a fcfd 	bl	8014e88 <iprintf>
        }
      }
      count++;
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	3301      	adds	r3, #1
 800a492:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	e001      	b.n	800a49e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d199      	bne.n	800a3d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a4a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3720      	adds	r7, #32
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0801646c 	.word	0x0801646c
 800a4b4:	080165d0 	.word	0x080165d0
 800a4b8:	080164cc 	.word	0x080164cc
 800a4bc:	080165fc 	.word	0x080165fc
 800a4c0:	08016614 	.word	0x08016614
 800a4c4:	08016638 	.word	0x08016638

0800a4c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a4d4:	e005      	b.n	800a4e2 <pbuf_clen+0x1a>
    ++len;
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f6      	bne.n	800a4d6 <pbuf_clen+0xe>
  }
  return len;
 800a4e8:	89fb      	ldrh	r3, [r7, #14]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d016      	beq.n	800a534 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a506:	f00a fba1 	bl	8014c4c <sys_arch_protect>
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7b9b      	ldrb	r3, [r3, #14]
 800a510:	3301      	adds	r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	739a      	strb	r2, [r3, #14]
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f00a fba5 	bl	8014c68 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	7b9b      	ldrb	r3, [r3, #14]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <pbuf_ref+0x3c>
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <pbuf_ref+0x44>)
 800a528:	f240 3242 	movw	r2, #834	; 0x342
 800a52c:	4904      	ldr	r1, [pc, #16]	; (800a540 <pbuf_ref+0x48>)
 800a52e:	4805      	ldr	r0, [pc, #20]	; (800a544 <pbuf_ref+0x4c>)
 800a530:	f00a fcaa 	bl	8014e88 <iprintf>
  }
}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	0801646c 	.word	0x0801646c
 800a540:	0801664c 	.word	0x0801664c
 800a544:	080164cc 	.word	0x080164cc

0800a548 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <pbuf_cat+0x16>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d107      	bne.n	800a56e <pbuf_cat+0x26>
 800a55e:	4b20      	ldr	r3, [pc, #128]	; (800a5e0 <pbuf_cat+0x98>)
 800a560:	f240 3259 	movw	r2, #857	; 0x359
 800a564:	491f      	ldr	r1, [pc, #124]	; (800a5e4 <pbuf_cat+0x9c>)
 800a566:	4820      	ldr	r0, [pc, #128]	; (800a5e8 <pbuf_cat+0xa0>)
 800a568:	f00a fc8e 	bl	8014e88 <iprintf>
 800a56c:	e034      	b.n	800a5d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	e00a      	b.n	800a58a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	891a      	ldrh	r2, [r3, #8]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	891b      	ldrh	r3, [r3, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1f0      	bne.n	800a574 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	891a      	ldrh	r2, [r3, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	895b      	ldrh	r3, [r3, #10]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d006      	beq.n	800a5ac <pbuf_cat+0x64>
 800a59e:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <pbuf_cat+0x98>)
 800a5a0:	f240 3262 	movw	r2, #866	; 0x362
 800a5a4:	4911      	ldr	r1, [pc, #68]	; (800a5ec <pbuf_cat+0xa4>)
 800a5a6:	4810      	ldr	r0, [pc, #64]	; (800a5e8 <pbuf_cat+0xa0>)
 800a5a8:	f00a fc6e 	bl	8014e88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <pbuf_cat+0x7a>
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <pbuf_cat+0x98>)
 800a5b6:	f240 3263 	movw	r2, #867	; 0x363
 800a5ba:	490d      	ldr	r1, [pc, #52]	; (800a5f0 <pbuf_cat+0xa8>)
 800a5bc:	480a      	ldr	r0, [pc, #40]	; (800a5e8 <pbuf_cat+0xa0>)
 800a5be:	f00a fc63 	bl	8014e88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	891a      	ldrh	r2, [r3, #8]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	891b      	ldrh	r3, [r3, #8]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	0801646c 	.word	0x0801646c
 800a5e4:	08016660 	.word	0x08016660
 800a5e8:	080164cc 	.word	0x080164cc
 800a5ec:	08016698 	.word	0x08016698
 800a5f0:	080166c8 	.word	0x080166c8

0800a5f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff ffa1 	bl	800a548 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a606:	6838      	ldr	r0, [r7, #0]
 800a608:	f7ff ff76 	bl	800a4f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	2300      	movs	r3, #0
 800a624:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <pbuf_copy+0x2a>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <pbuf_copy+0x2a>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	891a      	ldrh	r2, [r3, #8]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	891b      	ldrh	r3, [r3, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d209      	bcs.n	800a652 <pbuf_copy+0x3e>
 800a63e:	4b57      	ldr	r3, [pc, #348]	; (800a79c <pbuf_copy+0x188>)
 800a640:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a644:	4956      	ldr	r1, [pc, #344]	; (800a7a0 <pbuf_copy+0x18c>)
 800a646:	4857      	ldr	r0, [pc, #348]	; (800a7a4 <pbuf_copy+0x190>)
 800a648:	f00a fc1e 	bl	8014e88 <iprintf>
 800a64c:	f06f 030f 	mvn.w	r3, #15
 800a650:	e09f      	b.n	800a792 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	895b      	ldrh	r3, [r3, #10]
 800a656:	461a      	mov	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	895b      	ldrh	r3, [r3, #10]
 800a660:	4619      	mov	r1, r3
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	1acb      	subs	r3, r1, r3
 800a666:	429a      	cmp	r2, r3
 800a668:	d306      	bcc.n	800a678 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	895b      	ldrh	r3, [r3, #10]
 800a66e:	461a      	mov	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	e005      	b.n	800a684 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	895b      	ldrh	r3, [r3, #10]
 800a67c:	461a      	mov	r2, r3
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	18d0      	adds	r0, r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4619      	mov	r1, r3
 800a698:	f00a fd27 	bl	80150ea <memcpy>
    offset_to += len;
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	895b      	ldrh	r3, [r3, #10]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d906      	bls.n	800a6c6 <pbuf_copy+0xb2>
 800a6b8:	4b38      	ldr	r3, [pc, #224]	; (800a79c <pbuf_copy+0x188>)
 800a6ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a6be:	493a      	ldr	r1, [pc, #232]	; (800a7a8 <pbuf_copy+0x194>)
 800a6c0:	4838      	ldr	r0, [pc, #224]	; (800a7a4 <pbuf_copy+0x190>)
 800a6c2:	f00a fbe1 	bl	8014e88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	895b      	ldrh	r3, [r3, #10]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d906      	bls.n	800a6e0 <pbuf_copy+0xcc>
 800a6d2:	4b32      	ldr	r3, [pc, #200]	; (800a79c <pbuf_copy+0x188>)
 800a6d4:	f240 32da 	movw	r2, #986	; 0x3da
 800a6d8:	4934      	ldr	r1, [pc, #208]	; (800a7ac <pbuf_copy+0x198>)
 800a6da:	4832      	ldr	r0, [pc, #200]	; (800a7a4 <pbuf_copy+0x190>)
 800a6dc:	f00a fbd4 	bl	8014e88 <iprintf>
    if (offset_from >= p_from->len) {
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	895b      	ldrh	r3, [r3, #10]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d304      	bcc.n	800a6f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	895b      	ldrh	r3, [r3, #10]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d114      	bne.n	800a72c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10c      	bne.n	800a72c <pbuf_copy+0x118>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d009      	beq.n	800a72c <pbuf_copy+0x118>
 800a718:	4b20      	ldr	r3, [pc, #128]	; (800a79c <pbuf_copy+0x188>)
 800a71a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a71e:	4924      	ldr	r1, [pc, #144]	; (800a7b0 <pbuf_copy+0x19c>)
 800a720:	4820      	ldr	r0, [pc, #128]	; (800a7a4 <pbuf_copy+0x190>)
 800a722:	f00a fbb1 	bl	8014e88 <iprintf>
 800a726:	f06f 030f 	mvn.w	r3, #15
 800a72a:	e032      	b.n	800a792 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d013      	beq.n	800a75a <pbuf_copy+0x146>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	895a      	ldrh	r2, [r3, #10]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	891b      	ldrh	r3, [r3, #8]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d10d      	bne.n	800a75a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <pbuf_copy+0x146>
 800a746:	4b15      	ldr	r3, [pc, #84]	; (800a79c <pbuf_copy+0x188>)
 800a748:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a74c:	4919      	ldr	r1, [pc, #100]	; (800a7b4 <pbuf_copy+0x1a0>)
 800a74e:	4815      	ldr	r0, [pc, #84]	; (800a7a4 <pbuf_copy+0x190>)
 800a750:	f00a fb9a 	bl	8014e88 <iprintf>
 800a754:	f06f 0305 	mvn.w	r3, #5
 800a758:	e01b      	b.n	800a792 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d013      	beq.n	800a788 <pbuf_copy+0x174>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	895a      	ldrh	r2, [r3, #10]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	891b      	ldrh	r3, [r3, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d10d      	bne.n	800a788 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <pbuf_copy+0x174>
 800a774:	4b09      	ldr	r3, [pc, #36]	; (800a79c <pbuf_copy+0x188>)
 800a776:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a77a:	490e      	ldr	r1, [pc, #56]	; (800a7b4 <pbuf_copy+0x1a0>)
 800a77c:	4809      	ldr	r0, [pc, #36]	; (800a7a4 <pbuf_copy+0x190>)
 800a77e:	f00a fb83 	bl	8014e88 <iprintf>
 800a782:	f06f 0305 	mvn.w	r3, #5
 800a786:	e004      	b.n	800a792 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f af61 	bne.w	800a652 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	0801646c 	.word	0x0801646c
 800a7a0:	08016714 	.word	0x08016714
 800a7a4:	080164cc 	.word	0x080164cc
 800a7a8:	08016744 	.word	0x08016744
 800a7ac:	0801675c 	.word	0x0801675c
 800a7b0:	08016778 	.word	0x08016778
 800a7b4:	08016788 	.word	0x08016788

0800a7b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	80fb      	strh	r3, [r7, #6]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d108      	bne.n	800a7ee <pbuf_copy_partial+0x36>
 800a7dc:	4b2b      	ldr	r3, [pc, #172]	; (800a88c <pbuf_copy_partial+0xd4>)
 800a7de:	f240 420a 	movw	r2, #1034	; 0x40a
 800a7e2:	492b      	ldr	r1, [pc, #172]	; (800a890 <pbuf_copy_partial+0xd8>)
 800a7e4:	482b      	ldr	r0, [pc, #172]	; (800a894 <pbuf_copy_partial+0xdc>)
 800a7e6:	f00a fb4f 	bl	8014e88 <iprintf>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e04a      	b.n	800a884 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d108      	bne.n	800a806 <pbuf_copy_partial+0x4e>
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <pbuf_copy_partial+0xd4>)
 800a7f6:	f240 420b 	movw	r2, #1035	; 0x40b
 800a7fa:	4927      	ldr	r1, [pc, #156]	; (800a898 <pbuf_copy_partial+0xe0>)
 800a7fc:	4825      	ldr	r0, [pc, #148]	; (800a894 <pbuf_copy_partial+0xdc>)
 800a7fe:	f00a fb43 	bl	8014e88 <iprintf>
 800a802:	2300      	movs	r3, #0
 800a804:	e03e      	b.n	800a884 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	e034      	b.n	800a876 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a80c:	88bb      	ldrh	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <pbuf_copy_partial+0x70>
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	895b      	ldrh	r3, [r3, #10]
 800a816:	88ba      	ldrh	r2, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d305      	bcc.n	800a828 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	895b      	ldrh	r3, [r3, #10]
 800a820:	88ba      	ldrh	r2, [r7, #4]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	80bb      	strh	r3, [r7, #4]
 800a826:	e023      	b.n	800a870 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	895a      	ldrh	r2, [r3, #10]
 800a82c:	88bb      	ldrh	r3, [r7, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a832:	8b3a      	ldrh	r2, [r7, #24]
 800a834:	88fb      	ldrh	r3, [r7, #6]
 800a836:	429a      	cmp	r2, r3
 800a838:	d901      	bls.n	800a83e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a83a:	88fb      	ldrh	r3, [r7, #6]
 800a83c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a83e:	8b7b      	ldrh	r3, [r7, #26]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	18d0      	adds	r0, r2, r3
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	88bb      	ldrh	r3, [r7, #4]
 800a84a:	4413      	add	r3, r2
 800a84c:	8b3a      	ldrh	r2, [r7, #24]
 800a84e:	4619      	mov	r1, r3
 800a850:	f00a fc4b 	bl	80150ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a854:	8afa      	ldrh	r2, [r7, #22]
 800a856:	8b3b      	ldrh	r3, [r7, #24]
 800a858:	4413      	add	r3, r2
 800a85a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a85c:	8b7a      	ldrh	r2, [r7, #26]
 800a85e:	8b3b      	ldrh	r3, [r7, #24]
 800a860:	4413      	add	r3, r2
 800a862:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	8b3b      	ldrh	r3, [r7, #24]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <pbuf_copy_partial+0xca>
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1c4      	bne.n	800a80c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a882:	8afb      	ldrh	r3, [r7, #22]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3720      	adds	r7, #32
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	0801646c 	.word	0x0801646c
 800a890:	080167b4 	.word	0x080167b4
 800a894:	080164cc 	.word	0x080164cc
 800a898:	080167d4 	.word	0x080167d4

0800a89c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	603a      	str	r2, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	8919      	ldrh	r1, [r3, #8]
 800a8b0:	88ba      	ldrh	r2, [r7, #4]
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fa95 	bl	8009de4 <pbuf_alloc>
 800a8ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <pbuf_clone+0x2a>
    return NULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e011      	b.n	800a8ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fea3 	bl	800a614 <pbuf_copy>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a8d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <pbuf_clone+0x4c>
 800a8da:	4b06      	ldr	r3, [pc, #24]	; (800a8f4 <pbuf_clone+0x58>)
 800a8dc:	f240 5224 	movw	r2, #1316	; 0x524
 800a8e0:	4905      	ldr	r1, [pc, #20]	; (800a8f8 <pbuf_clone+0x5c>)
 800a8e2:	4806      	ldr	r0, [pc, #24]	; (800a8fc <pbuf_clone+0x60>)
 800a8e4:	f00a fad0 	bl	8014e88 <iprintf>
  return q;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0801646c 	.word	0x0801646c
 800a8f8:	080168e0 	.word	0x080168e0
 800a8fc:	080164cc 	.word	0x080164cc

0800a900 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a904:	f00a f9c0 	bl	8014c88 <rand>
 800a908:	4603      	mov	r3, r0
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a910:	b29b      	uxth	r3, r3
 800a912:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a916:	b29a      	uxth	r2, r3
 800a918:	4b01      	ldr	r3, [pc, #4]	; (800a920 <tcp_init+0x20>)
 800a91a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a91c:	bf00      	nop
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000010 	.word	0x20000010

0800a924 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d105      	bne.n	800a940 <tcp_free+0x1c>
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <tcp_free+0x2c>)
 800a936:	22d4      	movs	r2, #212	; 0xd4
 800a938:	4906      	ldr	r1, [pc, #24]	; (800a954 <tcp_free+0x30>)
 800a93a:	4807      	ldr	r0, [pc, #28]	; (800a958 <tcp_free+0x34>)
 800a93c:	f00a faa4 	bl	8014e88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	2001      	movs	r0, #1
 800a944:	f7fe feea 	bl	800971c <memp_free>
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	0801696c 	.word	0x0801696c
 800a954:	0801699c 	.word	0x0801699c
 800a958:	080169b0 	.word	0x080169b0

0800a95c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7d1b      	ldrb	r3, [r3, #20]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d105      	bne.n	800a978 <tcp_free_listen+0x1c>
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <tcp_free_listen+0x2c>)
 800a96e:	22df      	movs	r2, #223	; 0xdf
 800a970:	4906      	ldr	r1, [pc, #24]	; (800a98c <tcp_free_listen+0x30>)
 800a972:	4807      	ldr	r0, [pc, #28]	; (800a990 <tcp_free_listen+0x34>)
 800a974:	f00a fa88 	bl	8014e88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	2002      	movs	r0, #2
 800a97c:	f7fe fece 	bl	800971c <memp_free>
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	0801696c 	.word	0x0801696c
 800a98c:	080169d8 	.word	0x080169d8
 800a990:	080169b0 	.word	0x080169b0

0800a994 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a998:	f000 fea2 	bl	800b6e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a99c:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <tcp_tmr+0x28>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <tcp_tmr+0x28>)
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <tcp_tmr+0x28>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a9b4:	f000 fb54 	bl	800b060 <tcp_slowtmr>
  }
}
 800a9b8:	bf00      	nop
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2000d3d1 	.word	0x2000d3d1

0800a9c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d105      	bne.n	800a9dc <tcp_remove_listener+0x1c>
 800a9d0:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <tcp_remove_listener+0x48>)
 800a9d2:	22ff      	movs	r2, #255	; 0xff
 800a9d4:	490d      	ldr	r1, [pc, #52]	; (800aa0c <tcp_remove_listener+0x4c>)
 800a9d6:	480e      	ldr	r0, [pc, #56]	; (800aa10 <tcp_remove_listener+0x50>)
 800a9d8:	f00a fa56 	bl	8014e88 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e00a      	b.n	800a9f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d102      	bne.n	800a9f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f1      	bne.n	800a9e2 <tcp_remove_listener+0x22>
    }
  }
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	0801696c 	.word	0x0801696c
 800aa0c:	080169f4 	.word	0x080169f4
 800aa10:	080169b0 	.word	0x080169b0

0800aa14 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <tcp_listen_closed+0x1c>
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <tcp_listen_closed+0x60>)
 800aa24:	f240 1211 	movw	r2, #273	; 0x111
 800aa28:	4913      	ldr	r1, [pc, #76]	; (800aa78 <tcp_listen_closed+0x64>)
 800aa2a:	4814      	ldr	r0, [pc, #80]	; (800aa7c <tcp_listen_closed+0x68>)
 800aa2c:	f00a fa2c 	bl	8014e88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	7d1b      	ldrb	r3, [r3, #20]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d006      	beq.n	800aa46 <tcp_listen_closed+0x32>
 800aa38:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <tcp_listen_closed+0x60>)
 800aa3a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aa3e:	4910      	ldr	r1, [pc, #64]	; (800aa80 <tcp_listen_closed+0x6c>)
 800aa40:	480e      	ldr	r0, [pc, #56]	; (800aa7c <tcp_listen_closed+0x68>)
 800aa42:	f00a fa21 	bl	8014e88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa46:	2301      	movs	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e00b      	b.n	800aa64 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aa4c:	4a0d      	ldr	r2, [pc, #52]	; (800aa84 <tcp_listen_closed+0x70>)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff ffb1 	bl	800a9c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3301      	adds	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d9f0      	bls.n	800aa4c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aa6a:	bf00      	nop
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	0801696c 	.word	0x0801696c
 800aa78:	08016a1c 	.word	0x08016a1c
 800aa7c:	080169b0 	.word	0x080169b0
 800aa80:	08016a28 	.word	0x08016a28
 800aa84:	08018d50 	.word	0x08018d50

0800aa88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aa88:	b5b0      	push	{r4, r5, r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <tcp_close_shutdown+0x20>
 800aa9a:	4b63      	ldr	r3, [pc, #396]	; (800ac28 <tcp_close_shutdown+0x1a0>)
 800aa9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aaa0:	4962      	ldr	r1, [pc, #392]	; (800ac2c <tcp_close_shutdown+0x1a4>)
 800aaa2:	4863      	ldr	r0, [pc, #396]	; (800ac30 <tcp_close_shutdown+0x1a8>)
 800aaa4:	f00a f9f0 	bl	8014e88 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d066      	beq.n	800ab7c <tcp_close_shutdown+0xf4>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	7d1b      	ldrb	r3, [r3, #20]
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d003      	beq.n	800aabe <tcp_close_shutdown+0x36>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7d1b      	ldrb	r3, [r3, #20]
 800aaba:	2b07      	cmp	r3, #7
 800aabc:	d15e      	bne.n	800ab7c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <tcp_close_shutdown+0x48>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aace:	d055      	beq.n	800ab7c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8b5b      	ldrh	r3, [r3, #26]
 800aad4:	f003 0310 	and.w	r3, r3, #16
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d106      	bne.n	800aaea <tcp_close_shutdown+0x62>
 800aadc:	4b52      	ldr	r3, [pc, #328]	; (800ac28 <tcp_close_shutdown+0x1a0>)
 800aade:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aae2:	4954      	ldr	r1, [pc, #336]	; (800ac34 <tcp_close_shutdown+0x1ac>)
 800aae4:	4852      	ldr	r0, [pc, #328]	; (800ac30 <tcp_close_shutdown+0x1a8>)
 800aae6:	f00a f9cf 	bl	8014e88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aaf2:	687d      	ldr	r5, [r7, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	8ad2      	ldrh	r2, [r2, #22]
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	8b09      	ldrh	r1, [r1, #24]
 800ab00:	9102      	str	r1, [sp, #8]
 800ab02:	9201      	str	r2, [sp, #4]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	462b      	mov	r3, r5
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f004 fe91 	bl	800f834 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 f8c6 	bl	800bca4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ab18:	4b47      	ldr	r3, [pc, #284]	; (800ac38 <tcp_close_shutdown+0x1b0>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d105      	bne.n	800ab2e <tcp_close_shutdown+0xa6>
 800ab22:	4b45      	ldr	r3, [pc, #276]	; (800ac38 <tcp_close_shutdown+0x1b0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	4a43      	ldr	r2, [pc, #268]	; (800ac38 <tcp_close_shutdown+0x1b0>)
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	e013      	b.n	800ab56 <tcp_close_shutdown+0xce>
 800ab2e:	4b42      	ldr	r3, [pc, #264]	; (800ac38 <tcp_close_shutdown+0x1b0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e00c      	b.n	800ab50 <tcp_close_shutdown+0xc8>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d104      	bne.n	800ab4a <tcp_close_shutdown+0xc2>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	60da      	str	r2, [r3, #12]
 800ab48:	e005      	b.n	800ab56 <tcp_close_shutdown+0xce>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1ef      	bne.n	800ab36 <tcp_close_shutdown+0xae>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60da      	str	r2, [r3, #12]
 800ab5c:	4b37      	ldr	r3, [pc, #220]	; (800ac3c <tcp_close_shutdown+0x1b4>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ab62:	4b37      	ldr	r3, [pc, #220]	; (800ac40 <tcp_close_shutdown+0x1b8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d102      	bne.n	800ab72 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ab6c:	f003 fd5e 	bl	800e62c <tcp_trigger_input_pcb_close>
 800ab70:	e002      	b.n	800ab78 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fed6 	bl	800a924 <tcp_free>
      }
      return ERR_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e050      	b.n	800ac1e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7d1b      	ldrb	r3, [r3, #20]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d03b      	beq.n	800abfc <tcp_close_shutdown+0x174>
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	dc44      	bgt.n	800ac12 <tcp_close_shutdown+0x18a>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <tcp_close_shutdown+0x10a>
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d02a      	beq.n	800abe6 <tcp_close_shutdown+0x15e>
 800ab90:	e03f      	b.n	800ac12 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	8adb      	ldrh	r3, [r3, #22]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d021      	beq.n	800abde <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab9a:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <tcp_close_shutdown+0x1bc>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d105      	bne.n	800abb0 <tcp_close_shutdown+0x128>
 800aba4:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <tcp_close_shutdown+0x1bc>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <tcp_close_shutdown+0x1bc>)
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	e013      	b.n	800abd8 <tcp_close_shutdown+0x150>
 800abb0:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <tcp_close_shutdown+0x1bc>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	60bb      	str	r3, [r7, #8]
 800abb6:	e00c      	b.n	800abd2 <tcp_close_shutdown+0x14a>
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d104      	bne.n	800abcc <tcp_close_shutdown+0x144>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	e005      	b.n	800abd8 <tcp_close_shutdown+0x150>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	60bb      	str	r3, [r7, #8]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1ef      	bne.n	800abb8 <tcp_close_shutdown+0x130>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fea0 	bl	800a924 <tcp_free>
      break;
 800abe4:	e01a      	b.n	800ac1c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff ff14 	bl	800aa14 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	4816      	ldr	r0, [pc, #88]	; (800ac48 <tcp_close_shutdown+0x1c0>)
 800abf0:	f001 f8a8 	bl	800bd44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff feb1 	bl	800a95c <tcp_free_listen>
      break;
 800abfa:	e00f      	b.n	800ac1c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	480e      	ldr	r0, [pc, #56]	; (800ac38 <tcp_close_shutdown+0x1b0>)
 800ac00:	f001 f8a0 	bl	800bd44 <tcp_pcb_remove>
 800ac04:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <tcp_close_shutdown+0x1b4>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff fe8a 	bl	800a924 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ac10:	e004      	b.n	800ac1c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f81a 	bl	800ac4c <tcp_close_shutdown_fin>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	e000      	b.n	800ac1e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bdb0      	pop	{r4, r5, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	0801696c 	.word	0x0801696c
 800ac2c:	08016a40 	.word	0x08016a40
 800ac30:	080169b0 	.word	0x080169b0
 800ac34:	08016a60 	.word	0x08016a60
 800ac38:	2000d3c8 	.word	0x2000d3c8
 800ac3c:	2000d3d0 	.word	0x2000d3d0
 800ac40:	2000d408 	.word	0x2000d408
 800ac44:	2000d3c0 	.word	0x2000d3c0
 800ac48:	2000d3c4 	.word	0x2000d3c4

0800ac4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <tcp_close_shutdown_fin+0x1c>
 800ac5a:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <tcp_close_shutdown_fin+0xc8>)
 800ac5c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ac60:	492d      	ldr	r1, [pc, #180]	; (800ad18 <tcp_close_shutdown_fin+0xcc>)
 800ac62:	482e      	ldr	r0, [pc, #184]	; (800ad1c <tcp_close_shutdown_fin+0xd0>)
 800ac64:	f00a f910 	bl	8014e88 <iprintf>

  switch (pcb->state) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	7d1b      	ldrb	r3, [r3, #20]
 800ac6c:	2b07      	cmp	r3, #7
 800ac6e:	d020      	beq.n	800acb2 <tcp_close_shutdown_fin+0x66>
 800ac70:	2b07      	cmp	r3, #7
 800ac72:	dc2b      	bgt.n	800accc <tcp_close_shutdown_fin+0x80>
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d002      	beq.n	800ac7e <tcp_close_shutdown_fin+0x32>
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d00d      	beq.n	800ac98 <tcp_close_shutdown_fin+0x4c>
 800ac7c:	e026      	b.n	800accc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f003 fee6 	bl	800ea50 <tcp_send_fin>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d11f      	bne.n	800acd0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2205      	movs	r2, #5
 800ac94:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac96:	e01b      	b.n	800acd0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f003 fed9 	bl	800ea50 <tcp_send_fin>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800aca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d114      	bne.n	800acd4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2205      	movs	r2, #5
 800acae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acb0:	e010      	b.n	800acd4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f003 fecc 	bl	800ea50 <tcp_send_fin>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800acbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2209      	movs	r2, #9
 800acc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acca:	e005      	b.n	800acd8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	e01c      	b.n	800ad0a <tcp_close_shutdown_fin+0xbe>
      break;
 800acd0:	bf00      	nop
 800acd2:	e002      	b.n	800acda <tcp_close_shutdown_fin+0x8e>
      break;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <tcp_close_shutdown_fin+0x8e>
      break;
 800acd8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800acda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f003 fff2 	bl	800eccc <tcp_output>
 800ace8:	e00d      	b.n	800ad06 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800acea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf2:	d108      	bne.n	800ad06 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	8b5b      	ldrh	r3, [r3, #26]
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e001      	b.n	800ad0a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ad06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	0801696c 	.word	0x0801696c
 800ad18:	08016a1c 	.word	0x08016a1c
 800ad1c:	080169b0 	.word	0x080169b0

0800ad20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <tcp_close+0x22>
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <tcp_close+0x4c>)
 800ad30:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ad34:	490e      	ldr	r1, [pc, #56]	; (800ad70 <tcp_close+0x50>)
 800ad36:	480f      	ldr	r0, [pc, #60]	; (800ad74 <tcp_close+0x54>)
 800ad38:	f00a f8a6 	bl	8014e88 <iprintf>
 800ad3c:	f06f 030f 	mvn.w	r3, #15
 800ad40:	e00f      	b.n	800ad62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7d1b      	ldrb	r3, [r3, #20]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d006      	beq.n	800ad58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8b5b      	ldrh	r3, [r3, #26]
 800ad4e:	f043 0310 	orr.w	r3, r3, #16
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad58:	2101      	movs	r1, #1
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fe94 	bl	800aa88 <tcp_close_shutdown>
 800ad60:	4603      	mov	r3, r0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0801696c 	.word	0x0801696c
 800ad70:	08016a7c 	.word	0x08016a7c
 800ad74:	080169b0 	.word	0x080169b0

0800ad78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08e      	sub	sp, #56	; 0x38
 800ad7c:	af04      	add	r7, sp, #16
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d107      	bne.n	800ad98 <tcp_abandon+0x20>
 800ad88:	4b52      	ldr	r3, [pc, #328]	; (800aed4 <tcp_abandon+0x15c>)
 800ad8a:	f240 223d 	movw	r2, #573	; 0x23d
 800ad8e:	4952      	ldr	r1, [pc, #328]	; (800aed8 <tcp_abandon+0x160>)
 800ad90:	4852      	ldr	r0, [pc, #328]	; (800aedc <tcp_abandon+0x164>)
 800ad92:	f00a f879 	bl	8014e88 <iprintf>
 800ad96:	e099      	b.n	800aecc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d106      	bne.n	800adae <tcp_abandon+0x36>
 800ada0:	4b4c      	ldr	r3, [pc, #304]	; (800aed4 <tcp_abandon+0x15c>)
 800ada2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ada6:	494e      	ldr	r1, [pc, #312]	; (800aee0 <tcp_abandon+0x168>)
 800ada8:	484c      	ldr	r0, [pc, #304]	; (800aedc <tcp_abandon+0x164>)
 800adaa:	f00a f86d 	bl	8014e88 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7d1b      	ldrb	r3, [r3, #20]
 800adb2:	2b0a      	cmp	r3, #10
 800adb4:	d107      	bne.n	800adc6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	484a      	ldr	r0, [pc, #296]	; (800aee4 <tcp_abandon+0x16c>)
 800adba:	f000 ffc3 	bl	800bd44 <tcp_pcb_remove>
    tcp_free(pcb);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff fdb0 	bl	800a924 <tcp_free>
 800adc4:	e082      	b.n	800aecc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d126      	bne.n	800ae3e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	8adb      	ldrh	r3, [r3, #22]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d02e      	beq.n	800ae56 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800adf8:	4b3b      	ldr	r3, [pc, #236]	; (800aee8 <tcp_abandon+0x170>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d105      	bne.n	800ae0e <tcp_abandon+0x96>
 800ae02:	4b39      	ldr	r3, [pc, #228]	; (800aee8 <tcp_abandon+0x170>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	4a37      	ldr	r2, [pc, #220]	; (800aee8 <tcp_abandon+0x170>)
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	e013      	b.n	800ae36 <tcp_abandon+0xbe>
 800ae0e:	4b36      	ldr	r3, [pc, #216]	; (800aee8 <tcp_abandon+0x170>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	e00c      	b.n	800ae30 <tcp_abandon+0xb8>
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d104      	bne.n	800ae2a <tcp_abandon+0xb2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68da      	ldr	r2, [r3, #12]
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	60da      	str	r2, [r3, #12]
 800ae28:	e005      	b.n	800ae36 <tcp_abandon+0xbe>
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	61fb      	str	r3, [r7, #28]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1ef      	bne.n	800ae16 <tcp_abandon+0x9e>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	60da      	str	r2, [r3, #12]
 800ae3c:	e00b      	b.n	800ae56 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	8adb      	ldrh	r3, [r3, #22]
 800ae46:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4828      	ldr	r0, [pc, #160]	; (800aeec <tcp_abandon+0x174>)
 800ae4c:	f000 ff7a 	bl	800bd44 <tcp_pcb_remove>
 800ae50:	4b27      	ldr	r3, [pc, #156]	; (800aef0 <tcp_abandon+0x178>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fd1c 	bl	800b8a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fd13 	bl	800b8a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fd0a 	bl	800b8a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00e      	beq.n	800aeb0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3304      	adds	r3, #4
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	8b12      	ldrh	r2, [r2, #24]
 800ae9c:	9202      	str	r2, [sp, #8]
 800ae9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aea0:	9201      	str	r2, [sp, #4]
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	460b      	mov	r3, r1
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	69b9      	ldr	r1, [r7, #24]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f004 fcc2 	bl	800f834 <tcp_rst>
    }
    last_state = pcb->state;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7d1b      	ldrb	r3, [r3, #20]
 800aeb4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fd34 	bl	800a924 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d004      	beq.n	800aecc <tcp_abandon+0x154>
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f06f 010c 	mvn.w	r1, #12
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	4798      	blx	r3
  }
}
 800aecc:	3728      	adds	r7, #40	; 0x28
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	0801696c 	.word	0x0801696c
 800aed8:	08016ab0 	.word	0x08016ab0
 800aedc:	080169b0 	.word	0x080169b0
 800aee0:	08016acc 	.word	0x08016acc
 800aee4:	2000d3cc 	.word	0x2000d3cc
 800aee8:	2000d3c0 	.word	0x2000d3c0
 800aeec:	2000d3c8 	.word	0x2000d3c8
 800aef0:	2000d3d0 	.word	0x2000d3d0

0800aef4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aefc:	2101      	movs	r1, #1
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff ff3a 	bl	800ad78 <tcp_abandon>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d106      	bne.n	800af28 <tcp_update_rcv_ann_wnd+0x1c>
 800af1a:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800af1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800af20:	4924      	ldr	r1, [pc, #144]	; (800afb4 <tcp_update_rcv_ann_wnd+0xa8>)
 800af22:	4825      	ldr	r0, [pc, #148]	; (800afb8 <tcp_update_rcv_ann_wnd+0xac>)
 800af24:	f009 ffb0 	bl	8014e88 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800af30:	4413      	add	r3, r2
 800af32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800af3c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800af40:	bf28      	it	cs
 800af42:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800af46:	b292      	uxth	r2, r2
 800af48:	4413      	add	r3, r2
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	db08      	blt.n	800af64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	e020      	b.n	800afa6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd03      	ble.n	800af7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af78:	e014      	b.n	800afa4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af8c:	d306      	bcc.n	800af9c <tcp_update_rcv_ann_wnd+0x90>
 800af8e:	4b08      	ldr	r3, [pc, #32]	; (800afb0 <tcp_update_rcv_ann_wnd+0xa4>)
 800af90:	f240 32b6 	movw	r2, #950	; 0x3b6
 800af94:	4909      	ldr	r1, [pc, #36]	; (800afbc <tcp_update_rcv_ann_wnd+0xb0>)
 800af96:	4808      	ldr	r0, [pc, #32]	; (800afb8 <tcp_update_rcv_ann_wnd+0xac>)
 800af98:	f009 ff76 	bl	8014e88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800afa4:	2300      	movs	r3, #0
  }
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	0801696c 	.word	0x0801696c
 800afb4:	08016bc8 	.word	0x08016bc8
 800afb8:	080169b0 	.word	0x080169b0
 800afbc:	08016bec 	.word	0x08016bec

0800afc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <tcp_recved+0x22>
 800afd2:	4b1f      	ldr	r3, [pc, #124]	; (800b050 <tcp_recved+0x90>)
 800afd4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800afd8:	491e      	ldr	r1, [pc, #120]	; (800b054 <tcp_recved+0x94>)
 800afda:	481f      	ldr	r0, [pc, #124]	; (800b058 <tcp_recved+0x98>)
 800afdc:	f009 ff54 	bl	8014e88 <iprintf>
 800afe0:	e032      	b.n	800b048 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7d1b      	ldrb	r3, [r3, #20]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d106      	bne.n	800aff8 <tcp_recved+0x38>
 800afea:	4b19      	ldr	r3, [pc, #100]	; (800b050 <tcp_recved+0x90>)
 800afec:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aff0:	491a      	ldr	r1, [pc, #104]	; (800b05c <tcp_recved+0x9c>)
 800aff2:	4819      	ldr	r0, [pc, #100]	; (800b058 <tcp_recved+0x98>)
 800aff4:	f009 ff48 	bl	8014e88 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800affc:	887b      	ldrh	r3, [r7, #2]
 800affe:	4413      	add	r3, r2
 800b000:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b002:	89fb      	ldrh	r3, [r7, #14]
 800b004:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b008:	d804      	bhi.n	800b014 <tcp_recved+0x54>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b00e:	89fa      	ldrh	r2, [r7, #14]
 800b010:	429a      	cmp	r2, r3
 800b012:	d204      	bcs.n	800b01e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b01a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b01c:	e002      	b.n	800b024 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	89fa      	ldrh	r2, [r7, #14]
 800b022:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ff71 	bl	800af0c <tcp_update_rcv_ann_wnd>
 800b02a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b032:	d309      	bcc.n	800b048 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	8b5b      	ldrh	r3, [r3, #26]
 800b038:	f043 0302 	orr.w	r3, r3, #2
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f003 fe42 	bl	800eccc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	0801696c 	.word	0x0801696c
 800b054:	08016c08 	.word	0x08016c08
 800b058:	080169b0 	.word	0x080169b0
 800b05c:	08016c20 	.word	0x08016c20

0800b060 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b090      	sub	sp, #64	; 0x40
 800b064:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b06c:	4b94      	ldr	r3, [pc, #592]	; (800b2c0 <tcp_slowtmr+0x260>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	4a93      	ldr	r2, [pc, #588]	; (800b2c0 <tcp_slowtmr+0x260>)
 800b074:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b076:	4b93      	ldr	r3, [pc, #588]	; (800b2c4 <tcp_slowtmr+0x264>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	4b91      	ldr	r3, [pc, #580]	; (800b2c4 <tcp_slowtmr+0x264>)
 800b080:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b086:	4b90      	ldr	r3, [pc, #576]	; (800b2c8 <tcp_slowtmr+0x268>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b08c:	e29d      	b.n	800b5ca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	7d1b      	ldrb	r3, [r3, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <tcp_slowtmr+0x44>
 800b096:	4b8d      	ldr	r3, [pc, #564]	; (800b2cc <tcp_slowtmr+0x26c>)
 800b098:	f240 42be 	movw	r2, #1214	; 0x4be
 800b09c:	498c      	ldr	r1, [pc, #560]	; (800b2d0 <tcp_slowtmr+0x270>)
 800b09e:	488d      	ldr	r0, [pc, #564]	; (800b2d4 <tcp_slowtmr+0x274>)
 800b0a0:	f009 fef2 	bl	8014e88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	7d1b      	ldrb	r3, [r3, #20]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d106      	bne.n	800b0ba <tcp_slowtmr+0x5a>
 800b0ac:	4b87      	ldr	r3, [pc, #540]	; (800b2cc <tcp_slowtmr+0x26c>)
 800b0ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b0b2:	4989      	ldr	r1, [pc, #548]	; (800b2d8 <tcp_slowtmr+0x278>)
 800b0b4:	4887      	ldr	r0, [pc, #540]	; (800b2d4 <tcp_slowtmr+0x274>)
 800b0b6:	f009 fee7 	bl	8014e88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	7d1b      	ldrb	r3, [r3, #20]
 800b0be:	2b0a      	cmp	r3, #10
 800b0c0:	d106      	bne.n	800b0d0 <tcp_slowtmr+0x70>
 800b0c2:	4b82      	ldr	r3, [pc, #520]	; (800b2cc <tcp_slowtmr+0x26c>)
 800b0c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b0c8:	4984      	ldr	r1, [pc, #528]	; (800b2dc <tcp_slowtmr+0x27c>)
 800b0ca:	4882      	ldr	r0, [pc, #520]	; (800b2d4 <tcp_slowtmr+0x274>)
 800b0cc:	f009 fedc 	bl	8014e88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	7f9a      	ldrb	r2, [r3, #30]
 800b0d4:	4b7b      	ldr	r3, [pc, #492]	; (800b2c4 <tcp_slowtmr+0x264>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d105      	bne.n	800b0e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b0e6:	e270      	b.n	800b5ca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b0e8:	4b76      	ldr	r3, [pc, #472]	; (800b2c4 <tcp_slowtmr+0x264>)
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	7d1b      	ldrb	r3, [r3, #20]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d10a      	bne.n	800b11a <tcp_slowtmr+0xba>
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d905      	bls.n	800b11a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b112:	3301      	adds	r3, #1
 800b114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b118:	e11e      	b.n	800b358 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b120:	2b0b      	cmp	r3, #11
 800b122:	d905      	bls.n	800b130 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b128:	3301      	adds	r3, #1
 800b12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b12e:	e113      	b.n	800b358 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b136:	2b00      	cmp	r3, #0
 800b138:	d075      	beq.n	800b226 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <tcp_slowtmr+0xf0>
 800b142:	4b62      	ldr	r3, [pc, #392]	; (800b2cc <tcp_slowtmr+0x26c>)
 800b144:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b148:	4965      	ldr	r1, [pc, #404]	; (800b2e0 <tcp_slowtmr+0x280>)
 800b14a:	4862      	ldr	r0, [pc, #392]	; (800b2d4 <tcp_slowtmr+0x274>)
 800b14c:	f009 fe9c 	bl	8014e88 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <tcp_slowtmr+0x106>
 800b158:	4b5c      	ldr	r3, [pc, #368]	; (800b2cc <tcp_slowtmr+0x26c>)
 800b15a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b15e:	4961      	ldr	r1, [pc, #388]	; (800b2e4 <tcp_slowtmr+0x284>)
 800b160:	485c      	ldr	r0, [pc, #368]	; (800b2d4 <tcp_slowtmr+0x274>)
 800b162:	f009 fe91 	bl	8014e88 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b16c:	2b0b      	cmp	r3, #11
 800b16e:	d905      	bls.n	800b17c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b174:	3301      	adds	r3, #1
 800b176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b17a:	e0ed      	b.n	800b358 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b182:	3b01      	subs	r3, #1
 800b184:	4a58      	ldr	r2, [pc, #352]	; (800b2e8 <tcp_slowtmr+0x288>)
 800b186:	5cd3      	ldrb	r3, [r2, r3]
 800b188:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b190:	7c7a      	ldrb	r2, [r7, #17]
 800b192:	429a      	cmp	r2, r3
 800b194:	d907      	bls.n	800b1a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b19c:	3301      	adds	r3, #1
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b1ac:	7c7a      	ldrb	r2, [r7, #17]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	f200 80d2 	bhi.w	800b358 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d108      	bne.n	800b1d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1c4:	f004 fc2a 	bl	800fa1c <tcp_zero_window_probe>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d014      	beq.n	800b1f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	623b      	str	r3, [r7, #32]
 800b1d2:	e011      	b.n	800b1f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1de:	f003 faef 	bl	800e7c0 <tcp_split_unsent_seg>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d107      	bne.n	800b1f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b1e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1ea:	f003 fd6f 	bl	800eccc <tcp_output>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 80ac 	beq.w	800b358 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b20e:	2b06      	cmp	r3, #6
 800b210:	f200 80a2 	bhi.w	800b358 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b21a:	3301      	adds	r3, #1
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b224:	e098      	b.n	800b358 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b228:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	db0f      	blt.n	800b250 <tcp_slowtmr+0x1f0>
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b236:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d008      	beq.n	800b250 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b244:	b29b      	uxth	r3, r3
 800b246:	3301      	adds	r3, #1
 800b248:	b29b      	uxth	r3, r3
 800b24a:	b21a      	sxth	r2, r3
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b25c:	429a      	cmp	r2, r3
 800b25e:	db7b      	blt.n	800b358 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b262:	f004 f827 	bl	800f2b4 <tcp_rexmit_rto_prepare>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d007      	beq.n	800b27c <tcp_slowtmr+0x21c>
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b270:	2b00      	cmp	r3, #0
 800b272:	d171      	bne.n	800b358 <tcp_slowtmr+0x2f8>
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d06d      	beq.n	800b358 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	7d1b      	ldrb	r3, [r3, #20]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d03a      	beq.n	800b2fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b28a:	2b0c      	cmp	r3, #12
 800b28c:	bf28      	it	cs
 800b28e:	230c      	movcs	r3, #12
 800b290:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b298:	10db      	asrs	r3, r3, #3
 800b29a:	b21b      	sxth	r3, r3
 800b29c:	461a      	mov	r2, r3
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b2a4:	4413      	add	r3, r2
 800b2a6:	7efa      	ldrb	r2, [r7, #27]
 800b2a8:	4910      	ldr	r1, [pc, #64]	; (800b2ec <tcp_slowtmr+0x28c>)
 800b2aa:	5c8a      	ldrb	r2, [r1, r2]
 800b2ac:	4093      	lsls	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	dc1a      	bgt.n	800b2f0 <tcp_slowtmr+0x290>
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	b21a      	sxth	r2, r3
 800b2be:	e019      	b.n	800b2f4 <tcp_slowtmr+0x294>
 800b2c0:	2000d3bc 	.word	0x2000d3bc
 800b2c4:	2000d3d2 	.word	0x2000d3d2
 800b2c8:	2000d3c8 	.word	0x2000d3c8
 800b2cc:	0801696c 	.word	0x0801696c
 800b2d0:	08016cb0 	.word	0x08016cb0
 800b2d4:	080169b0 	.word	0x080169b0
 800b2d8:	08016cdc 	.word	0x08016cdc
 800b2dc:	08016d08 	.word	0x08016d08
 800b2e0:	08016d38 	.word	0x08016d38
 800b2e4:	08016d6c 	.word	0x08016d6c
 800b2e8:	08018d48 	.word	0x08018d48
 800b2ec:	08018d38 	.word	0x08018d38
 800b2f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b30c:	4293      	cmp	r3, r2
 800b30e:	bf28      	it	cs
 800b310:	4613      	movcs	r3, r2
 800b312:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b314:	8a7b      	ldrh	r3, [r7, #18]
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	429a      	cmp	r2, r3
 800b330:	d206      	bcs.n	800b340 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b354:	f004 f81e 	bl	800f394 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
 800b35c:	2b06      	cmp	r3, #6
 800b35e:	d111      	bne.n	800b384 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	8b5b      	ldrh	r3, [r3, #26]
 800b364:	f003 0310 	and.w	r3, r3, #16
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b36c:	4b9c      	ldr	r3, [pc, #624]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	2b28      	cmp	r3, #40	; 0x28
 800b378:	d904      	bls.n	800b384 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b37e:	3301      	adds	r3, #1
 800b380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	7a5b      	ldrb	r3, [r3, #9]
 800b388:	f003 0308 	and.w	r3, r3, #8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d04a      	beq.n	800b426 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b394:	2b04      	cmp	r3, #4
 800b396:	d003      	beq.n	800b3a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	d142      	bne.n	800b426 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3a0:	4b8f      	ldr	r3, [pc, #572]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b3b0:	4b8c      	ldr	r3, [pc, #560]	; (800b5e4 <tcp_slowtmr+0x584>)
 800b3b2:	440b      	add	r3, r1
 800b3b4:	498c      	ldr	r1, [pc, #560]	; (800b5e8 <tcp_slowtmr+0x588>)
 800b3b6:	fba1 1303 	umull	r1, r3, r1, r3
 800b3ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d90a      	bls.n	800b3d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b3ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3d4:	e027      	b.n	800b426 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3d6:	4b82      	ldr	r3, [pc, #520]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	4b7f      	ldr	r3, [pc, #508]	; (800b5ec <tcp_slowtmr+0x58c>)
 800b3f0:	fb00 f303 	mul.w	r3, r0, r3
 800b3f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b3f6:	497c      	ldr	r1, [pc, #496]	; (800b5e8 <tcp_slowtmr+0x588>)
 800b3f8:	fba1 1303 	umull	r1, r3, r1, r3
 800b3fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d911      	bls.n	800b426 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b404:	f004 faca 	bl	800f99c <tcp_keepalive>
 800b408:	4603      	mov	r3, r0
 800b40a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b40e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b412:	2b00      	cmp	r3, #0
 800b414:	d107      	bne.n	800b426 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b41c:	3301      	adds	r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d011      	beq.n	800b452 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b42e:	4b6c      	ldr	r3, [pc, #432]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b43e:	4619      	mov	r1, r3
 800b440:	460b      	mov	r3, r1
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	440b      	add	r3, r1
 800b446:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b44c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b44e:	f000 fddd 	bl	800c00c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	7d1b      	ldrb	r3, [r3, #20]
 800b456:	2b03      	cmp	r3, #3
 800b458:	d10b      	bne.n	800b472 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b45a:	4b61      	ldr	r3, [pc, #388]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2b28      	cmp	r3, #40	; 0x28
 800b466:	d904      	bls.n	800b472 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b46c:	3301      	adds	r3, #1
 800b46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	7d1b      	ldrb	r3, [r3, #20]
 800b476:	2b09      	cmp	r3, #9
 800b478:	d10b      	bne.n	800b492 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b47a:	4b59      	ldr	r3, [pc, #356]	; (800b5e0 <tcp_slowtmr+0x580>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	2bf0      	cmp	r3, #240	; 0xf0
 800b486:	d904      	bls.n	800b492 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b48c:	3301      	adds	r3, #1
 800b48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b496:	2b00      	cmp	r3, #0
 800b498:	d060      	beq.n	800b55c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4a4:	f000 fbfe 	bl	800bca4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d010      	beq.n	800b4d0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b4ae:	4b50      	ldr	r3, [pc, #320]	; (800b5f0 <tcp_slowtmr+0x590>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d106      	bne.n	800b4c6 <tcp_slowtmr+0x466>
 800b4b8:	4b4e      	ldr	r3, [pc, #312]	; (800b5f4 <tcp_slowtmr+0x594>)
 800b4ba:	f240 526d 	movw	r2, #1389	; 0x56d
 800b4be:	494e      	ldr	r1, [pc, #312]	; (800b5f8 <tcp_slowtmr+0x598>)
 800b4c0:	484e      	ldr	r0, [pc, #312]	; (800b5fc <tcp_slowtmr+0x59c>)
 800b4c2:	f009 fce1 	bl	8014e88 <iprintf>
        prev->next = pcb->next;
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	60da      	str	r2, [r3, #12]
 800b4ce:	e00f      	b.n	800b4f0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b4d0:	4b47      	ldr	r3, [pc, #284]	; (800b5f0 <tcp_slowtmr+0x590>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d006      	beq.n	800b4e8 <tcp_slowtmr+0x488>
 800b4da:	4b46      	ldr	r3, [pc, #280]	; (800b5f4 <tcp_slowtmr+0x594>)
 800b4dc:	f240 5271 	movw	r2, #1393	; 0x571
 800b4e0:	4947      	ldr	r1, [pc, #284]	; (800b600 <tcp_slowtmr+0x5a0>)
 800b4e2:	4846      	ldr	r0, [pc, #280]	; (800b5fc <tcp_slowtmr+0x59c>)
 800b4e4:	f009 fcd0 	bl	8014e88 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	4a40      	ldr	r2, [pc, #256]	; (800b5f0 <tcp_slowtmr+0x590>)
 800b4ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b4f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d013      	beq.n	800b520 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b500:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	3304      	adds	r3, #4
 800b506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b508:	8ad2      	ldrh	r2, [r2, #22]
 800b50a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b50c:	8b09      	ldrh	r1, [r1, #24]
 800b50e:	9102      	str	r1, [sp, #8]
 800b510:	9201      	str	r2, [sp, #4]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	462b      	mov	r3, r5
 800b516:	4622      	mov	r2, r4
 800b518:	4601      	mov	r1, r0
 800b51a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b51c:	f004 f98a 	bl	800f834 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	7d1b      	ldrb	r3, [r3, #20]
 800b52a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b536:	6838      	ldr	r0, [r7, #0]
 800b538:	f7ff f9f4 	bl	800a924 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b53c:	4b31      	ldr	r3, [pc, #196]	; (800b604 <tcp_slowtmr+0x5a4>)
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <tcp_slowtmr+0x4f2>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f06f 010c 	mvn.w	r1, #12
 800b54e:	68b8      	ldr	r0, [r7, #8]
 800b550:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b552:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <tcp_slowtmr+0x5a4>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d037      	beq.n	800b5ca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800b55a:	e592      	b.n	800b082 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	7f1b      	ldrb	r3, [r3, #28]
 800b56a:	3301      	adds	r3, #1
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b574:	7f1a      	ldrb	r2, [r3, #28]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	7f5b      	ldrb	r3, [r3, #29]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d325      	bcc.n	800b5ca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b584:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <tcp_slowtmr+0x5a4>)
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <tcp_slowtmr+0x54c>
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b59c:	6912      	ldr	r2, [r2, #16]
 800b59e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b5aa:	e002      	b.n	800b5b2 <tcp_slowtmr+0x552>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <tcp_slowtmr+0x5a4>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d000      	beq.n	800b5bc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b5ba:	e562      	b.n	800b082 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b5bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b5c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5c6:	f003 fb81 	bl	800eccc <tcp_output>
  while (pcb != NULL) {
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f47f ad5e 	bne.w	800b08e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <tcp_slowtmr+0x5a8>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b5dc:	e069      	b.n	800b6b2 <tcp_slowtmr+0x652>
 800b5de:	bf00      	nop
 800b5e0:	2000d3bc 	.word	0x2000d3bc
 800b5e4:	000a4cb8 	.word	0x000a4cb8
 800b5e8:	10624dd3 	.word	0x10624dd3
 800b5ec:	000124f8 	.word	0x000124f8
 800b5f0:	2000d3c8 	.word	0x2000d3c8
 800b5f4:	0801696c 	.word	0x0801696c
 800b5f8:	08016da4 	.word	0x08016da4
 800b5fc:	080169b0 	.word	0x080169b0
 800b600:	08016dd0 	.word	0x08016dd0
 800b604:	2000d3d0 	.word	0x2000d3d0
 800b608:	2000d3cc 	.word	0x2000d3cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	7d1b      	ldrb	r3, [r3, #20]
 800b610:	2b0a      	cmp	r3, #10
 800b612:	d006      	beq.n	800b622 <tcp_slowtmr+0x5c2>
 800b614:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <tcp_slowtmr+0x664>)
 800b616:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b61a:	492b      	ldr	r1, [pc, #172]	; (800b6c8 <tcp_slowtmr+0x668>)
 800b61c:	482b      	ldr	r0, [pc, #172]	; (800b6cc <tcp_slowtmr+0x66c>)
 800b61e:	f009 fc33 	bl	8014e88 <iprintf>
    pcb_remove = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b628:	4b29      	ldr	r3, [pc, #164]	; (800b6d0 <tcp_slowtmr+0x670>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2bf0      	cmp	r3, #240	; 0xf0
 800b634:	d904      	bls.n	800b640 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b63a:	3301      	adds	r3, #1
 800b63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b644:	2b00      	cmp	r3, #0
 800b646:	d02f      	beq.n	800b6a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b64a:	f000 fb2b 	bl	800bca4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b650:	2b00      	cmp	r3, #0
 800b652:	d010      	beq.n	800b676 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b654:	4b1f      	ldr	r3, [pc, #124]	; (800b6d4 <tcp_slowtmr+0x674>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d106      	bne.n	800b66c <tcp_slowtmr+0x60c>
 800b65e:	4b19      	ldr	r3, [pc, #100]	; (800b6c4 <tcp_slowtmr+0x664>)
 800b660:	f240 52af 	movw	r2, #1455	; 0x5af
 800b664:	491c      	ldr	r1, [pc, #112]	; (800b6d8 <tcp_slowtmr+0x678>)
 800b666:	4819      	ldr	r0, [pc, #100]	; (800b6cc <tcp_slowtmr+0x66c>)
 800b668:	f009 fc0e 	bl	8014e88 <iprintf>
        prev->next = pcb->next;
 800b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	60da      	str	r2, [r3, #12]
 800b674:	e00f      	b.n	800b696 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b676:	4b17      	ldr	r3, [pc, #92]	; (800b6d4 <tcp_slowtmr+0x674>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d006      	beq.n	800b68e <tcp_slowtmr+0x62e>
 800b680:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <tcp_slowtmr+0x664>)
 800b682:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b686:	4915      	ldr	r1, [pc, #84]	; (800b6dc <tcp_slowtmr+0x67c>)
 800b688:	4810      	ldr	r0, [pc, #64]	; (800b6cc <tcp_slowtmr+0x66c>)
 800b68a:	f009 fbfd 	bl	8014e88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	4a10      	ldr	r2, [pc, #64]	; (800b6d4 <tcp_slowtmr+0x674>)
 800b694:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b6a0:	69f8      	ldr	r0, [r7, #28]
 800b6a2:	f7ff f93f 	bl	800a924 <tcp_free>
 800b6a6:	e004      	b.n	800b6b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1a9      	bne.n	800b60c <tcp_slowtmr+0x5ac>
    }
  }
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	3730      	adds	r7, #48	; 0x30
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0801696c 	.word	0x0801696c
 800b6c8:	08016dfc 	.word	0x08016dfc
 800b6cc:	080169b0 	.word	0x080169b0
 800b6d0:	2000d3bc 	.word	0x2000d3bc
 800b6d4:	2000d3cc 	.word	0x2000d3cc
 800b6d8:	08016e2c 	.word	0x08016e2c
 800b6dc:	08016e54 	.word	0x08016e54

0800b6e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b6e6:	4b2d      	ldr	r3, [pc, #180]	; (800b79c <tcp_fasttmr+0xbc>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	4b2b      	ldr	r3, [pc, #172]	; (800b79c <tcp_fasttmr+0xbc>)
 800b6f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b6f2:	4b2b      	ldr	r3, [pc, #172]	; (800b7a0 <tcp_fasttmr+0xc0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b6f8:	e048      	b.n	800b78c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7f9a      	ldrb	r2, [r3, #30]
 800b6fe:	4b27      	ldr	r3, [pc, #156]	; (800b79c <tcp_fasttmr+0xbc>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d03f      	beq.n	800b786 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b706:	4b25      	ldr	r3, [pc, #148]	; (800b79c <tcp_fasttmr+0xbc>)
 800b708:	781a      	ldrb	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8b5b      	ldrh	r3, [r3, #26]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	d010      	beq.n	800b73c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	8b5b      	ldrh	r3, [r3, #26]
 800b71e:	f043 0302 	orr.w	r3, r3, #2
 800b722:	b29a      	uxth	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f003 facf 	bl	800eccc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	8b5b      	ldrh	r3, [r3, #26]
 800b732:	f023 0303 	bic.w	r3, r3, #3
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	8b5b      	ldrh	r3, [r3, #26]
 800b740:	f003 0308 	and.w	r3, r3, #8
 800b744:	2b00      	cmp	r3, #0
 800b746:	d009      	beq.n	800b75c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8b5b      	ldrh	r3, [r3, #26]
 800b74c:	f023 0308 	bic.w	r3, r3, #8
 800b750:	b29a      	uxth	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff fa78 	bl	800ac4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00a      	beq.n	800b780 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b76a:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <tcp_fasttmr+0xc4>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f819 	bl	800b7a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b776:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <tcp_fasttmr+0xc4>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d000      	beq.n	800b780 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b77e:	e7b8      	b.n	800b6f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	607b      	str	r3, [r7, #4]
 800b784:	e002      	b.n	800b78c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1b3      	bne.n	800b6fa <tcp_fasttmr+0x1a>
    }
  }
}
 800b792:	bf00      	nop
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	2000d3d2 	.word	0x2000d3d2
 800b7a0:	2000d3c8 	.word	0x2000d3c8
 800b7a4:	2000d3d0 	.word	0x2000d3d0

0800b7a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <tcp_process_refused_data+0x22>
 800b7b6:	4b37      	ldr	r3, [pc, #220]	; (800b894 <tcp_process_refused_data+0xec>)
 800b7b8:	f240 6209 	movw	r2, #1545	; 0x609
 800b7bc:	4936      	ldr	r1, [pc, #216]	; (800b898 <tcp_process_refused_data+0xf0>)
 800b7be:	4837      	ldr	r0, [pc, #220]	; (800b89c <tcp_process_refused_data+0xf4>)
 800b7c0:	f009 fb62 	bl	8014e88 <iprintf>
 800b7c4:	f06f 030f 	mvn.w	r3, #15
 800b7c8:	e060      	b.n	800b88c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ce:	7b5b      	ldrb	r3, [r3, #13]
 800b7d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00b      	beq.n	800b800 <tcp_process_refused_data+0x58>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6918      	ldr	r0, [r3, #16]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	47a0      	blx	r4
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	e007      	b.n	800b810 <tcp_process_refused_data+0x68>
 800b800:	2300      	movs	r3, #0
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	2000      	movs	r0, #0
 800b808:	f000 f8a4 	bl	800b954 <tcp_recv_null>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d12a      	bne.n	800b86e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	f003 0320 	and.w	r3, r3, #32
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d033      	beq.n	800b88a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b826:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b82a:	d005      	beq.n	800b838 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b830:	3301      	adds	r3, #1
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <tcp_process_refused_data+0xb2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6918      	ldr	r0, [r3, #16]
 800b84c:	2300      	movs	r3, #0
 800b84e:	2200      	movs	r2, #0
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	47a0      	blx	r4
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]
 800b858:	e001      	b.n	800b85e <tcp_process_refused_data+0xb6>
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b862:	f113 0f0d 	cmn.w	r3, #13
 800b866:	d110      	bne.n	800b88a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b868:	f06f 030c 	mvn.w	r3, #12
 800b86c:	e00e      	b.n	800b88c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b872:	f113 0f0d 	cmn.w	r3, #13
 800b876:	d102      	bne.n	800b87e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b878:	f06f 030c 	mvn.w	r3, #12
 800b87c:	e006      	b.n	800b88c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b884:	f06f 0304 	mvn.w	r3, #4
 800b888:	e000      	b.n	800b88c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	bd90      	pop	{r4, r7, pc}
 800b894:	0801696c 	.word	0x0801696c
 800b898:	08016e7c 	.word	0x08016e7c
 800b89c:	080169b0 	.word	0x080169b0

0800b8a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b8a8:	e007      	b.n	800b8ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f80a 	bl	800b8ca <tcp_seg_free>
    seg = next;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1f4      	bne.n	800b8aa <tcp_segs_free+0xa>
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00c      	beq.n	800b8f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d004      	beq.n	800b8ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fd61 	bl	800a3ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	2003      	movs	r0, #3
 800b8ee:	f7fd ff15 	bl	800971c <memp_free>
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <tcp_seg_copy+0x1c>
 800b90a:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <tcp_seg_copy+0x4c>)
 800b90c:	f240 6282 	movw	r2, #1666	; 0x682
 800b910:	490e      	ldr	r1, [pc, #56]	; (800b94c <tcp_seg_copy+0x50>)
 800b912:	480f      	ldr	r0, [pc, #60]	; (800b950 <tcp_seg_copy+0x54>)
 800b914:	f009 fab8 	bl	8014e88 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b918:	2003      	movs	r0, #3
 800b91a:	f7fd fe89 	bl	8009630 <memp_malloc>
 800b91e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <tcp_seg_copy+0x2e>
    return NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	e00a      	b.n	800b940 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b92a:	2210      	movs	r2, #16
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f009 fbdb 	bl	80150ea <memcpy>
  pbuf_ref(cseg->p);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe fddd 	bl	800a4f8 <pbuf_ref>
  return cseg;
 800b93e:	68fb      	ldr	r3, [r7, #12]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	0801696c 	.word	0x0801696c
 800b94c:	08016ec0 	.word	0x08016ec0
 800b950:	080169b0 	.word	0x080169b0

0800b954 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d109      	bne.n	800b97c <tcp_recv_null+0x28>
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <tcp_recv_null+0x60>)
 800b96a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b96e:	4912      	ldr	r1, [pc, #72]	; (800b9b8 <tcp_recv_null+0x64>)
 800b970:	4812      	ldr	r0, [pc, #72]	; (800b9bc <tcp_recv_null+0x68>)
 800b972:	f009 fa89 	bl	8014e88 <iprintf>
 800b976:	f06f 030f 	mvn.w	r3, #15
 800b97a:	e016      	b.n	800b9aa <tcp_recv_null+0x56>

  if (p != NULL) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	4619      	mov	r1, r3
 800b988:	68b8      	ldr	r0, [r7, #8]
 800b98a:	f7ff fb19 	bl	800afc0 <tcp_recved>
    pbuf_free(p);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7fe fd0c 	bl	800a3ac <pbuf_free>
 800b994:	e008      	b.n	800b9a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b99e:	68b8      	ldr	r0, [r7, #8]
 800b9a0:	f7ff f9be 	bl	800ad20 <tcp_close>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	e000      	b.n	800b9aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	0801696c 	.word	0x0801696c
 800b9b8:	08016edc 	.word	0x08016edc
 800b9bc:	080169b0 	.word	0x080169b0

0800b9c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	db01      	blt.n	800b9d6 <tcp_kill_prio+0x16>
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	e000      	b.n	800b9d8 <tcp_kill_prio+0x18>
 800b9d6:	237f      	movs	r3, #127	; 0x7f
 800b9d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d034      	beq.n	800ba4a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b9e0:	7afb      	ldrb	r3, [r7, #11]
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ee:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <tcp_kill_prio+0x94>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	e01f      	b.n	800ba36 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	7d5b      	ldrb	r3, [r3, #21]
 800b9fa:	7afa      	ldrb	r2, [r7, #11]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d80c      	bhi.n	800ba1a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ba04:	7afa      	ldrb	r2, [r7, #11]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d112      	bne.n	800ba30 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba0a:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <tcp_kill_prio+0x98>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d80a      	bhi.n	800ba30 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <tcp_kill_prio+0x98>)
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	7d5b      	ldrb	r3, [r3, #21]
 800ba2e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	617b      	str	r3, [r7, #20]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1dc      	bne.n	800b9f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba42:	6938      	ldr	r0, [r7, #16]
 800ba44:	f7ff fa56 	bl	800aef4 <tcp_abort>
 800ba48:	e000      	b.n	800ba4c <tcp_kill_prio+0x8c>
    return;
 800ba4a:	bf00      	nop
  }
}
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2000d3c8 	.word	0x2000d3c8
 800ba58:	2000d3bc 	.word	0x2000d3bc

0800ba5c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2b08      	cmp	r3, #8
 800ba6a:	d009      	beq.n	800ba80 <tcp_kill_state+0x24>
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d006      	beq.n	800ba80 <tcp_kill_state+0x24>
 800ba72:	4b1a      	ldr	r3, [pc, #104]	; (800badc <tcp_kill_state+0x80>)
 800ba74:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ba78:	4919      	ldr	r1, [pc, #100]	; (800bae0 <tcp_kill_state+0x84>)
 800ba7a:	481a      	ldr	r0, [pc, #104]	; (800bae4 <tcp_kill_state+0x88>)
 800ba7c:	f009 fa04 	bl	8014e88 <iprintf>

  inactivity = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba88:	4b17      	ldr	r3, [pc, #92]	; (800bae8 <tcp_kill_state+0x8c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e017      	b.n	800bac0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	7d1b      	ldrb	r3, [r3, #20]
 800ba94:	79fa      	ldrb	r2, [r7, #7]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d10f      	bne.n	800baba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <tcp_kill_state+0x90>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d807      	bhi.n	800baba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800baaa:	4b10      	ldr	r3, [pc, #64]	; (800baec <tcp_kill_state+0x90>)
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e4      	bne.n	800ba90 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bacc:	2100      	movs	r1, #0
 800bace:	6938      	ldr	r0, [r7, #16]
 800bad0:	f7ff f952 	bl	800ad78 <tcp_abandon>
  }
}
 800bad4:	bf00      	nop
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	0801696c 	.word	0x0801696c
 800bae0:	08016ef8 	.word	0x08016ef8
 800bae4:	080169b0 	.word	0x080169b0
 800bae8:	2000d3c8 	.word	0x2000d3c8
 800baec:	2000d3bc 	.word	0x2000d3bc

0800baf0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bafe:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <tcp_kill_timewait+0x58>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e012      	b.n	800bb2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <tcp_kill_timewait+0x5c>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d807      	bhi.n	800bb26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bb16:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <tcp_kill_timewait+0x5c>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e9      	bne.n	800bb06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb38:	68b8      	ldr	r0, [r7, #8]
 800bb3a:	f7ff f9db 	bl	800aef4 <tcp_abort>
  }
}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	2000d3cc 	.word	0x2000d3cc
 800bb4c:	2000d3bc 	.word	0x2000d3bc

0800bb50 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bb56:	4b10      	ldr	r3, [pc, #64]	; (800bb98 <tcp_handle_closepend+0x48>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb5c:	e014      	b.n	800bb88 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8b5b      	ldrh	r3, [r3, #26]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d009      	beq.n	800bb84 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8b5b      	ldrh	r3, [r3, #26]
 800bb74:	f023 0308 	bic.w	r3, r3, #8
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff f864 	bl	800ac4c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e7      	bne.n	800bb5e <tcp_handle_closepend+0xe>
  }
}
 800bb8e:	bf00      	nop
 800bb90:	bf00      	nop
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	2000d3c8 	.word	0x2000d3c8

0800bb9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bba6:	2001      	movs	r0, #1
 800bba8:	f7fd fd42 	bl	8009630 <memp_malloc>
 800bbac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d126      	bne.n	800bc02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bbb4:	f7ff ffcc 	bl	800bb50 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bbb8:	f7ff ff9a 	bl	800baf0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	f7fd fd37 	bl	8009630 <memp_malloc>
 800bbc2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d11b      	bne.n	800bc02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bbca:	2009      	movs	r0, #9
 800bbcc:	f7ff ff46 	bl	800ba5c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	f7fd fd2d 	bl	8009630 <memp_malloc>
 800bbd6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d111      	bne.n	800bc02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bbde:	2008      	movs	r0, #8
 800bbe0:	f7ff ff3c 	bl	800ba5c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f7fd fd23 	bl	8009630 <memp_malloc>
 800bbea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d107      	bne.n	800bc02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bbf2:	79fb      	ldrb	r3, [r7, #7]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff fee3 	bl	800b9c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	f7fd fd18 	bl	8009630 <memp_malloc>
 800bc00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d03f      	beq.n	800bc88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bc08:	229c      	movs	r2, #156	; 0x9c
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f009 f9a0 	bl	8014f52 <memset>
    pcb->prio = prio;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	79fa      	ldrb	r2, [r7, #7]
 800bc16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bc1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bc28:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	22ff      	movs	r2, #255	; 0xff
 800bc36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bc3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2206      	movs	r2, #6
 800bc44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2206      	movs	r2, #6
 800bc4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <tcp_alloc+0xf8>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <tcp_alloc+0xfc>)
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bc74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4a08      	ldr	r2, [pc, #32]	; (800bc9c <tcp_alloc+0x100>)
 800bc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4a07      	ldr	r2, [pc, #28]	; (800bca0 <tcp_alloc+0x104>)
 800bc84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bc88:	68fb      	ldr	r3, [r7, #12]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	2000d3bc 	.word	0x2000d3bc
 800bc98:	2000d3d2 	.word	0x2000d3d2
 800bc9c:	0800b955 	.word	0x0800b955
 800bca0:	006ddd00 	.word	0x006ddd00

0800bca4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d107      	bne.n	800bcc2 <tcp_pcb_purge+0x1e>
 800bcb2:	4b21      	ldr	r3, [pc, #132]	; (800bd38 <tcp_pcb_purge+0x94>)
 800bcb4:	f640 0251 	movw	r2, #2129	; 0x851
 800bcb8:	4920      	ldr	r1, [pc, #128]	; (800bd3c <tcp_pcb_purge+0x98>)
 800bcba:	4821      	ldr	r0, [pc, #132]	; (800bd40 <tcp_pcb_purge+0x9c>)
 800bcbc:	f009 f8e4 	bl	8014e88 <iprintf>
 800bcc0:	e037      	b.n	800bd32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d033      	beq.n	800bd32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bcce:	2b0a      	cmp	r3, #10
 800bcd0:	d02f      	beq.n	800bd32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d02b      	beq.n	800bd32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fb60 	bl	800a3ac <pbuf_free>
      pcb->refused_data = NULL;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d002      	beq.n	800bd00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f986 	bl	800c00c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff fdc7 	bl	800b8a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fdc2 	bl	800b8a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	0801696c 	.word	0x0801696c
 800bd3c:	08016fb8 	.word	0x08016fb8
 800bd40:	080169b0 	.word	0x080169b0

0800bd44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <tcp_pcb_remove+0x1e>
 800bd54:	4b3e      	ldr	r3, [pc, #248]	; (800be50 <tcp_pcb_remove+0x10c>)
 800bd56:	f640 0283 	movw	r2, #2179	; 0x883
 800bd5a:	493e      	ldr	r1, [pc, #248]	; (800be54 <tcp_pcb_remove+0x110>)
 800bd5c:	483e      	ldr	r0, [pc, #248]	; (800be58 <tcp_pcb_remove+0x114>)
 800bd5e:	f009 f893 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <tcp_pcb_remove+0x32>
 800bd68:	4b39      	ldr	r3, [pc, #228]	; (800be50 <tcp_pcb_remove+0x10c>)
 800bd6a:	f640 0284 	movw	r2, #2180	; 0x884
 800bd6e:	493b      	ldr	r1, [pc, #236]	; (800be5c <tcp_pcb_remove+0x118>)
 800bd70:	4839      	ldr	r0, [pc, #228]	; (800be58 <tcp_pcb_remove+0x114>)
 800bd72:	f009 f889 	bl	8014e88 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d105      	bne.n	800bd8c <tcp_pcb_remove+0x48>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68da      	ldr	r2, [r3, #12]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e013      	b.n	800bdb4 <tcp_pcb_remove+0x70>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e00c      	b.n	800bdae <tcp_pcb_remove+0x6a>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	683a      	ldr	r2, [r7, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d104      	bne.n	800bda8 <tcp_pcb_remove+0x64>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	60da      	str	r2, [r3, #12]
 800bda6:	e005      	b.n	800bdb4 <tcp_pcb_remove+0x70>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1ef      	bne.n	800bd94 <tcp_pcb_remove+0x50>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bdba:	6838      	ldr	r0, [r7, #0]
 800bdbc:	f7ff ff72 	bl	800bca4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	7d1b      	ldrb	r3, [r3, #20]
 800bdc4:	2b0a      	cmp	r3, #10
 800bdc6:	d013      	beq.n	800bdf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d00f      	beq.n	800bdf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	8b5b      	ldrh	r3, [r3, #26]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	8b5b      	ldrh	r3, [r3, #26]
 800bde0:	f043 0302 	orr.w	r3, r3, #2
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bdea:	6838      	ldr	r0, [r7, #0]
 800bdec:	f002 ff6e 	bl	800eccc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	7d1b      	ldrb	r3, [r3, #20]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d020      	beq.n	800be3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d006      	beq.n	800be0e <tcp_pcb_remove+0xca>
 800be00:	4b13      	ldr	r3, [pc, #76]	; (800be50 <tcp_pcb_remove+0x10c>)
 800be02:	f640 0293 	movw	r2, #2195	; 0x893
 800be06:	4916      	ldr	r1, [pc, #88]	; (800be60 <tcp_pcb_remove+0x11c>)
 800be08:	4813      	ldr	r0, [pc, #76]	; (800be58 <tcp_pcb_remove+0x114>)
 800be0a:	f009 f83d 	bl	8014e88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <tcp_pcb_remove+0xe0>
 800be16:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <tcp_pcb_remove+0x10c>)
 800be18:	f640 0294 	movw	r2, #2196	; 0x894
 800be1c:	4911      	ldr	r1, [pc, #68]	; (800be64 <tcp_pcb_remove+0x120>)
 800be1e:	480e      	ldr	r0, [pc, #56]	; (800be58 <tcp_pcb_remove+0x114>)
 800be20:	f009 f832 	bl	8014e88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d006      	beq.n	800be3a <tcp_pcb_remove+0xf6>
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <tcp_pcb_remove+0x10c>)
 800be2e:	f640 0296 	movw	r2, #2198	; 0x896
 800be32:	490d      	ldr	r1, [pc, #52]	; (800be68 <tcp_pcb_remove+0x124>)
 800be34:	4808      	ldr	r0, [pc, #32]	; (800be58 <tcp_pcb_remove+0x114>)
 800be36:	f009 f827 	bl	8014e88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2200      	movs	r2, #0
 800be3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2200      	movs	r2, #0
 800be44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0801696c 	.word	0x0801696c
 800be54:	08016fd4 	.word	0x08016fd4
 800be58:	080169b0 	.word	0x080169b0
 800be5c:	08016ff0 	.word	0x08016ff0
 800be60:	08017010 	.word	0x08017010
 800be64:	08017028 	.word	0x08017028
 800be68:	08017044 	.word	0x08017044

0800be6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <tcp_next_iss+0x1c>
 800be7a:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <tcp_next_iss+0x38>)
 800be7c:	f640 02af 	movw	r2, #2223	; 0x8af
 800be80:	4909      	ldr	r1, [pc, #36]	; (800bea8 <tcp_next_iss+0x3c>)
 800be82:	480a      	ldr	r0, [pc, #40]	; (800beac <tcp_next_iss+0x40>)
 800be84:	f009 f800 	bl	8014e88 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <tcp_next_iss+0x44>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <tcp_next_iss+0x48>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4413      	add	r3, r2
 800be92:	4a07      	ldr	r2, [pc, #28]	; (800beb0 <tcp_next_iss+0x44>)
 800be94:	6013      	str	r3, [r2, #0]
  return iss;
 800be96:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <tcp_next_iss+0x44>)
 800be98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	0801696c 	.word	0x0801696c
 800bea8:	0801705c 	.word	0x0801705c
 800beac:	080169b0 	.word	0x080169b0
 800beb0:	20000014 	.word	0x20000014
 800beb4:	2000d3bc 	.word	0x2000d3bc

0800beb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d106      	bne.n	800beda <tcp_eff_send_mss_netif+0x22>
 800becc:	4b14      	ldr	r3, [pc, #80]	; (800bf20 <tcp_eff_send_mss_netif+0x68>)
 800bece:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bed2:	4914      	ldr	r1, [pc, #80]	; (800bf24 <tcp_eff_send_mss_netif+0x6c>)
 800bed4:	4814      	ldr	r0, [pc, #80]	; (800bf28 <tcp_eff_send_mss_netif+0x70>)
 800bed6:	f008 ffd7 	bl	8014e88 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bee0:	89fb      	ldrh	r3, [r7, #14]
 800bee2:	e019      	b.n	800bf18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800beea:	8afb      	ldrh	r3, [r7, #22]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d012      	beq.n	800bf16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bef0:	2328      	movs	r3, #40	; 0x28
 800bef2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bef4:	8afa      	ldrh	r2, [r7, #22]
 800bef6:	8abb      	ldrh	r3, [r7, #20]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d904      	bls.n	800bf06 <tcp_eff_send_mss_netif+0x4e>
 800befc:	8afa      	ldrh	r2, [r7, #22]
 800befe:	8abb      	ldrh	r3, [r7, #20]
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	e000      	b.n	800bf08 <tcp_eff_send_mss_netif+0x50>
 800bf06:	2300      	movs	r3, #0
 800bf08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bf0a:	8a7a      	ldrh	r2, [r7, #18]
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bf28      	it	cs
 800bf12:	4613      	movcs	r3, r2
 800bf14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bf16:	89fb      	ldrh	r3, [r7, #14]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801696c 	.word	0x0801696c
 800bf24:	08017078 	.word	0x08017078
 800bf28:	080169b0 	.word	0x080169b0

0800bf2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d119      	bne.n	800bf74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bf40:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bf42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bf46:	4910      	ldr	r1, [pc, #64]	; (800bf88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bf48:	4810      	ldr	r0, [pc, #64]	; (800bf8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bf4a:	f008 ff9d 	bl	8014e88 <iprintf>

  while (pcb != NULL) {
 800bf4e:	e011      	b.n	800bf74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d108      	bne.n	800bf6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7fe ffc6 	bl	800aef4 <tcp_abort>
      pcb = next;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	e002      	b.n	800bf74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1ea      	bne.n	800bf50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	0801696c 	.word	0x0801696c
 800bf88:	080170a0 	.word	0x080170a0
 800bf8c:	080169b0 	.word	0x080169b0

0800bf90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d02a      	beq.n	800bff6 <tcp_netif_ip_addr_changed+0x66>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d026      	beq.n	800bff6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <tcp_netif_ip_addr_changed+0x70>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff ffbc 	bl	800bf2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bfb4:	4b13      	ldr	r3, [pc, #76]	; (800c004 <tcp_netif_ip_addr_changed+0x74>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff ffb6 	bl	800bf2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d017      	beq.n	800bff6 <tcp_netif_ip_addr_changed+0x66>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d013      	beq.n	800bff6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfce:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <tcp_netif_ip_addr_changed+0x78>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e00c      	b.n	800bff0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d103      	bne.n	800bfea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1ef      	bne.n	800bfd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bff6:	bf00      	nop
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	2000d3c8 	.word	0x2000d3c8
 800c004:	2000d3c0 	.word	0x2000d3c0
 800c008:	2000d3c4 	.word	0x2000d3c4

0800c00c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff fc3d 	bl	800b8a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c034:	b590      	push	{r4, r7, lr}
 800c036:	b08d      	sub	sp, #52	; 0x34
 800c038:	af04      	add	r7, sp, #16
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d105      	bne.n	800c050 <tcp_input+0x1c>
 800c044:	4b9b      	ldr	r3, [pc, #620]	; (800c2b4 <tcp_input+0x280>)
 800c046:	2283      	movs	r2, #131	; 0x83
 800c048:	499b      	ldr	r1, [pc, #620]	; (800c2b8 <tcp_input+0x284>)
 800c04a:	489c      	ldr	r0, [pc, #624]	; (800c2bc <tcp_input+0x288>)
 800c04c:	f008 ff1c 	bl	8014e88 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	4a9a      	ldr	r2, [pc, #616]	; (800c2c0 <tcp_input+0x28c>)
 800c056:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	895b      	ldrh	r3, [r3, #10]
 800c05c:	2b13      	cmp	r3, #19
 800c05e:	f240 83d1 	bls.w	800c804 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c062:	4b98      	ldr	r3, [pc, #608]	; (800c2c4 <tcp_input+0x290>)
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	4a97      	ldr	r2, [pc, #604]	; (800c2c4 <tcp_input+0x290>)
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f007 fdc3 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	f040 83c7 	bne.w	800c808 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c07a:	4b92      	ldr	r3, [pc, #584]	; (800c2c4 <tcp_input+0x290>)
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c082:	2be0      	cmp	r3, #224	; 0xe0
 800c084:	f000 83c0 	beq.w	800c808 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c088:	4b8d      	ldr	r3, [pc, #564]	; (800c2c0 <tcp_input+0x28c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	899b      	ldrh	r3, [r3, #12]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	4618      	mov	r0, r3
 800c092:	f7fc fdf5 	bl	8008c80 <lwip_htons>
 800c096:	4603      	mov	r3, r0
 800c098:	0b1b      	lsrs	r3, r3, #12
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c0a2:	7cbb      	ldrb	r3, [r7, #18]
 800c0a4:	2b13      	cmp	r3, #19
 800c0a6:	f240 83b1 	bls.w	800c80c <tcp_input+0x7d8>
 800c0aa:	7cbb      	ldrb	r3, [r7, #18]
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	891b      	ldrh	r3, [r3, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f200 83aa 	bhi.w	800c80c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c0b8:	7cbb      	ldrb	r3, [r7, #18]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	3b14      	subs	r3, #20
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	4b81      	ldr	r3, [pc, #516]	; (800c2c8 <tcp_input+0x294>)
 800c0c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c0c4:	4b81      	ldr	r3, [pc, #516]	; (800c2cc <tcp_input+0x298>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	895a      	ldrh	r2, [r3, #10]
 800c0ce:	7cbb      	ldrb	r3, [r7, #18]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d309      	bcc.n	800c0ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c0d6:	4b7c      	ldr	r3, [pc, #496]	; (800c2c8 <tcp_input+0x294>)
 800c0d8:	881a      	ldrh	r2, [r3, #0]
 800c0da:	4b7d      	ldr	r3, [pc, #500]	; (800c2d0 <tcp_input+0x29c>)
 800c0dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c0de:	7cbb      	ldrb	r3, [r7, #18]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe f8dc 	bl	800a2a0 <pbuf_remove_header>
 800c0e8:	e04e      	b.n	800c188 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d105      	bne.n	800c0fe <tcp_input+0xca>
 800c0f2:	4b70      	ldr	r3, [pc, #448]	; (800c2b4 <tcp_input+0x280>)
 800c0f4:	22c2      	movs	r2, #194	; 0xc2
 800c0f6:	4977      	ldr	r1, [pc, #476]	; (800c2d4 <tcp_input+0x2a0>)
 800c0f8:	4870      	ldr	r0, [pc, #448]	; (800c2bc <tcp_input+0x288>)
 800c0fa:	f008 fec5 	bl	8014e88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c0fe:	2114      	movs	r1, #20
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fe f8cd 	bl	800a2a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	895a      	ldrh	r2, [r3, #10]
 800c10a:	4b71      	ldr	r3, [pc, #452]	; (800c2d0 <tcp_input+0x29c>)
 800c10c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c10e:	4b6e      	ldr	r3, [pc, #440]	; (800c2c8 <tcp_input+0x294>)
 800c110:	881a      	ldrh	r2, [r3, #0]
 800c112:	4b6f      	ldr	r3, [pc, #444]	; (800c2d0 <tcp_input+0x29c>)
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c11a:	4b6d      	ldr	r3, [pc, #436]	; (800c2d0 <tcp_input+0x29c>)
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7fe f8bd 	bl	800a2a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	895b      	ldrh	r3, [r3, #10]
 800c12c:	8a3a      	ldrh	r2, [r7, #16]
 800c12e:	429a      	cmp	r2, r3
 800c130:	f200 836e 	bhi.w	800c810 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4a64      	ldr	r2, [pc, #400]	; (800c2cc <tcp_input+0x298>)
 800c13c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	8a3a      	ldrh	r2, [r7, #16]
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe f8aa 	bl	800a2a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	891a      	ldrh	r2, [r3, #8]
 800c150:	8a3b      	ldrh	r3, [r7, #16]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	895b      	ldrh	r3, [r3, #10]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <tcp_input+0x13a>
 800c162:	4b54      	ldr	r3, [pc, #336]	; (800c2b4 <tcp_input+0x280>)
 800c164:	22df      	movs	r2, #223	; 0xdf
 800c166:	495c      	ldr	r1, [pc, #368]	; (800c2d8 <tcp_input+0x2a4>)
 800c168:	4854      	ldr	r0, [pc, #336]	; (800c2bc <tcp_input+0x288>)
 800c16a:	f008 fe8d 	bl	8014e88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	891a      	ldrh	r2, [r3, #8]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	891b      	ldrh	r3, [r3, #8]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d005      	beq.n	800c188 <tcp_input+0x154>
 800c17c:	4b4d      	ldr	r3, [pc, #308]	; (800c2b4 <tcp_input+0x280>)
 800c17e:	22e0      	movs	r2, #224	; 0xe0
 800c180:	4956      	ldr	r1, [pc, #344]	; (800c2dc <tcp_input+0x2a8>)
 800c182:	484e      	ldr	r0, [pc, #312]	; (800c2bc <tcp_input+0x288>)
 800c184:	f008 fe80 	bl	8014e88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c188:	4b4d      	ldr	r3, [pc, #308]	; (800c2c0 <tcp_input+0x28c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	4a4b      	ldr	r2, [pc, #300]	; (800c2c0 <tcp_input+0x28c>)
 800c192:	6814      	ldr	r4, [r2, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f7fc fd73 	bl	8008c80 <lwip_htons>
 800c19a:	4603      	mov	r3, r0
 800c19c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c19e:	4b48      	ldr	r3, [pc, #288]	; (800c2c0 <tcp_input+0x28c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	4a46      	ldr	r2, [pc, #280]	; (800c2c0 <tcp_input+0x28c>)
 800c1a8:	6814      	ldr	r4, [r2, #0]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fc fd68 	bl	8008c80 <lwip_htons>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c1b4:	4b42      	ldr	r3, [pc, #264]	; (800c2c0 <tcp_input+0x28c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4a41      	ldr	r2, [pc, #260]	; (800c2c0 <tcp_input+0x28c>)
 800c1bc:	6814      	ldr	r4, [r2, #0]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fc fd73 	bl	8008caa <lwip_htonl>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	6063      	str	r3, [r4, #4]
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	4a45      	ldr	r2, [pc, #276]	; (800c2e0 <tcp_input+0x2ac>)
 800c1cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c1ce:	4b3c      	ldr	r3, [pc, #240]	; (800c2c0 <tcp_input+0x28c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	4a3a      	ldr	r2, [pc, #232]	; (800c2c0 <tcp_input+0x28c>)
 800c1d6:	6814      	ldr	r4, [r2, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fc fd66 	bl	8008caa <lwip_htonl>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	60a3      	str	r3, [r4, #8]
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	4a3f      	ldr	r2, [pc, #252]	; (800c2e4 <tcp_input+0x2b0>)
 800c1e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c1e8:	4b35      	ldr	r3, [pc, #212]	; (800c2c0 <tcp_input+0x28c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	89db      	ldrh	r3, [r3, #14]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	4a33      	ldr	r2, [pc, #204]	; (800c2c0 <tcp_input+0x28c>)
 800c1f2:	6814      	ldr	r4, [r2, #0]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fc fd43 	bl	8008c80 <lwip_htons>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c1fe:	4b30      	ldr	r3, [pc, #192]	; (800c2c0 <tcp_input+0x28c>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	899b      	ldrh	r3, [r3, #12]
 800c204:	b29b      	uxth	r3, r3
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fd3a 	bl	8008c80 <lwip_htons>
 800c20c:	4603      	mov	r3, r0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c214:	b2da      	uxtb	r2, r3
 800c216:	4b34      	ldr	r3, [pc, #208]	; (800c2e8 <tcp_input+0x2b4>)
 800c218:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	891a      	ldrh	r2, [r3, #8]
 800c21e:	4b33      	ldr	r3, [pc, #204]	; (800c2ec <tcp_input+0x2b8>)
 800c220:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c222:	4b31      	ldr	r3, [pc, #196]	; (800c2e8 <tcp_input+0x2b4>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	f003 0303 	and.w	r3, r3, #3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00c      	beq.n	800c248 <tcp_input+0x214>
    tcplen++;
 800c22e:	4b2f      	ldr	r3, [pc, #188]	; (800c2ec <tcp_input+0x2b8>)
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	4b2d      	ldr	r3, [pc, #180]	; (800c2ec <tcp_input+0x2b8>)
 800c238:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	891a      	ldrh	r2, [r3, #8]
 800c23e:	4b2b      	ldr	r3, [pc, #172]	; (800c2ec <tcp_input+0x2b8>)
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	f200 82e6 	bhi.w	800c814 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c248:	2300      	movs	r3, #0
 800c24a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c24c:	4b28      	ldr	r3, [pc, #160]	; (800c2f0 <tcp_input+0x2bc>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	61fb      	str	r3, [r7, #28]
 800c252:	e09d      	b.n	800c390 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	7d1b      	ldrb	r3, [r3, #20]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d105      	bne.n	800c268 <tcp_input+0x234>
 800c25c:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <tcp_input+0x280>)
 800c25e:	22fb      	movs	r2, #251	; 0xfb
 800c260:	4924      	ldr	r1, [pc, #144]	; (800c2f4 <tcp_input+0x2c0>)
 800c262:	4816      	ldr	r0, [pc, #88]	; (800c2bc <tcp_input+0x288>)
 800c264:	f008 fe10 	bl	8014e88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	2b0a      	cmp	r3, #10
 800c26e:	d105      	bne.n	800c27c <tcp_input+0x248>
 800c270:	4b10      	ldr	r3, [pc, #64]	; (800c2b4 <tcp_input+0x280>)
 800c272:	22fc      	movs	r2, #252	; 0xfc
 800c274:	4920      	ldr	r1, [pc, #128]	; (800c2f8 <tcp_input+0x2c4>)
 800c276:	4811      	ldr	r0, [pc, #68]	; (800c2bc <tcp_input+0x288>)
 800c278:	f008 fe06 	bl	8014e88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	7d1b      	ldrb	r3, [r3, #20]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d105      	bne.n	800c290 <tcp_input+0x25c>
 800c284:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <tcp_input+0x280>)
 800c286:	22fd      	movs	r2, #253	; 0xfd
 800c288:	491c      	ldr	r1, [pc, #112]	; (800c2fc <tcp_input+0x2c8>)
 800c28a:	480c      	ldr	r0, [pc, #48]	; (800c2bc <tcp_input+0x288>)
 800c28c:	f008 fdfc 	bl	8014e88 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	7a1b      	ldrb	r3, [r3, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d033      	beq.n	800c300 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	7a1a      	ldrb	r2, [r3, #8]
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <tcp_input+0x290>)
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d029      	beq.n	800c300 <tcp_input+0x2cc>
      prev = pcb;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	61bb      	str	r3, [r7, #24]
      continue;
 800c2b0:	e06b      	b.n	800c38a <tcp_input+0x356>
 800c2b2:	bf00      	nop
 800c2b4:	080170d4 	.word	0x080170d4
 800c2b8:	08017108 	.word	0x08017108
 800c2bc:	08017120 	.word	0x08017120
 800c2c0:	2000d3e4 	.word	0x2000d3e4
 800c2c4:	20009c48 	.word	0x20009c48
 800c2c8:	2000d3e8 	.word	0x2000d3e8
 800c2cc:	2000d3ec 	.word	0x2000d3ec
 800c2d0:	2000d3ea 	.word	0x2000d3ea
 800c2d4:	08017148 	.word	0x08017148
 800c2d8:	08017158 	.word	0x08017158
 800c2dc:	08017164 	.word	0x08017164
 800c2e0:	2000d3f4 	.word	0x2000d3f4
 800c2e4:	2000d3f8 	.word	0x2000d3f8
 800c2e8:	2000d400 	.word	0x2000d400
 800c2ec:	2000d3fe 	.word	0x2000d3fe
 800c2f0:	2000d3c8 	.word	0x2000d3c8
 800c2f4:	08017184 	.word	0x08017184
 800c2f8:	080171ac 	.word	0x080171ac
 800c2fc:	080171d8 	.word	0x080171d8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	8b1a      	ldrh	r2, [r3, #24]
 800c304:	4b72      	ldr	r3, [pc, #456]	; (800c4d0 <tcp_input+0x49c>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d13a      	bne.n	800c386 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	8ada      	ldrh	r2, [r3, #22]
 800c314:	4b6e      	ldr	r3, [pc, #440]	; (800c4d0 <tcp_input+0x49c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d132      	bne.n	800c386 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	4b6b      	ldr	r3, [pc, #428]	; (800c4d4 <tcp_input+0x4a0>)
 800c326:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c328:	429a      	cmp	r2, r3
 800c32a:	d12c      	bne.n	800c386 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b68      	ldr	r3, [pc, #416]	; (800c4d4 <tcp_input+0x4a0>)
 800c332:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c334:	429a      	cmp	r2, r3
 800c336:	d126      	bne.n	800c386 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	69fa      	ldr	r2, [r7, #28]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d106      	bne.n	800c350 <tcp_input+0x31c>
 800c342:	4b65      	ldr	r3, [pc, #404]	; (800c4d8 <tcp_input+0x4a4>)
 800c344:	f240 120d 	movw	r2, #269	; 0x10d
 800c348:	4964      	ldr	r1, [pc, #400]	; (800c4dc <tcp_input+0x4a8>)
 800c34a:	4865      	ldr	r0, [pc, #404]	; (800c4e0 <tcp_input+0x4ac>)
 800c34c:	f008 fd9c 	bl	8014e88 <iprintf>
      if (prev != NULL) {
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00a      	beq.n	800c36c <tcp_input+0x338>
        prev->next = pcb->next;
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c35e:	4b61      	ldr	r3, [pc, #388]	; (800c4e4 <tcp_input+0x4b0>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c366:	4a5f      	ldr	r2, [pc, #380]	; (800c4e4 <tcp_input+0x4b0>)
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	69fa      	ldr	r2, [r7, #28]
 800c372:	429a      	cmp	r2, r3
 800c374:	d111      	bne.n	800c39a <tcp_input+0x366>
 800c376:	4b58      	ldr	r3, [pc, #352]	; (800c4d8 <tcp_input+0x4a4>)
 800c378:	f240 1215 	movw	r2, #277	; 0x115
 800c37c:	495a      	ldr	r1, [pc, #360]	; (800c4e8 <tcp_input+0x4b4>)
 800c37e:	4858      	ldr	r0, [pc, #352]	; (800c4e0 <tcp_input+0x4ac>)
 800c380:	f008 fd82 	bl	8014e88 <iprintf>
      break;
 800c384:	e009      	b.n	800c39a <tcp_input+0x366>
    }
    prev = pcb;
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	61fb      	str	r3, [r7, #28]
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f47f af5e 	bne.w	800c254 <tcp_input+0x220>
 800c398:	e000      	b.n	800c39c <tcp_input+0x368>
      break;
 800c39a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f040 80aa 	bne.w	800c4f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3a4:	4b51      	ldr	r3, [pc, #324]	; (800c4ec <tcp_input+0x4b8>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	e03f      	b.n	800c42c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	7d1b      	ldrb	r3, [r3, #20]
 800c3b0:	2b0a      	cmp	r3, #10
 800c3b2:	d006      	beq.n	800c3c2 <tcp_input+0x38e>
 800c3b4:	4b48      	ldr	r3, [pc, #288]	; (800c4d8 <tcp_input+0x4a4>)
 800c3b6:	f240 121f 	movw	r2, #287	; 0x11f
 800c3ba:	494d      	ldr	r1, [pc, #308]	; (800c4f0 <tcp_input+0x4bc>)
 800c3bc:	4848      	ldr	r0, [pc, #288]	; (800c4e0 <tcp_input+0x4ac>)
 800c3be:	f008 fd63 	bl	8014e88 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	7a1b      	ldrb	r3, [r3, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d009      	beq.n	800c3de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	7a1a      	ldrb	r2, [r3, #8]
 800c3ce:	4b41      	ldr	r3, [pc, #260]	; (800c4d4 <tcp_input+0x4a0>)
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d122      	bne.n	800c424 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	8b1a      	ldrh	r2, [r3, #24]
 800c3e2:	4b3b      	ldr	r3, [pc, #236]	; (800c4d0 <tcp_input+0x49c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d11b      	bne.n	800c426 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	8ada      	ldrh	r2, [r3, #22]
 800c3f2:	4b37      	ldr	r3, [pc, #220]	; (800c4d0 <tcp_input+0x49c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	885b      	ldrh	r3, [r3, #2]
 800c3f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d113      	bne.n	800c426 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	4b34      	ldr	r3, [pc, #208]	; (800c4d4 <tcp_input+0x4a0>)
 800c404:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c406:	429a      	cmp	r2, r3
 800c408:	d10d      	bne.n	800c426 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	4b31      	ldr	r3, [pc, #196]	; (800c4d4 <tcp_input+0x4a0>)
 800c410:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c412:	429a      	cmp	r2, r3
 800c414:	d107      	bne.n	800c426 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c416:	69f8      	ldr	r0, [r7, #28]
 800c418:	f000 fb56 	bl	800cac8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7fd ffc5 	bl	800a3ac <pbuf_free>
        return;
 800c422:	e1fd      	b.n	800c820 <tcp_input+0x7ec>
        continue;
 800c424:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1bc      	bne.n	800c3ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c432:	2300      	movs	r3, #0
 800c434:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c436:	4b2f      	ldr	r3, [pc, #188]	; (800c4f4 <tcp_input+0x4c0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	e02a      	b.n	800c494 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	7a1b      	ldrb	r3, [r3, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00c      	beq.n	800c460 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	7a1a      	ldrb	r2, [r3, #8]
 800c44a:	4b22      	ldr	r3, [pc, #136]	; (800c4d4 <tcp_input+0x4a0>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c452:	3301      	adds	r3, #1
 800c454:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c456:	429a      	cmp	r2, r3
 800c458:	d002      	beq.n	800c460 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	61bb      	str	r3, [r7, #24]
        continue;
 800c45e:	e016      	b.n	800c48e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	8ada      	ldrh	r2, [r3, #22]
 800c464:	4b1a      	ldr	r3, [pc, #104]	; (800c4d0 <tcp_input+0x49c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	885b      	ldrh	r3, [r3, #2]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d10c      	bne.n	800c48a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	4b17      	ldr	r3, [pc, #92]	; (800c4d4 <tcp_input+0x4a0>)
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d00f      	beq.n	800c49c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00d      	beq.n	800c49e <tcp_input+0x46a>
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d009      	beq.n	800c49e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1d1      	bne.n	800c43e <tcp_input+0x40a>
 800c49a:	e000      	b.n	800c49e <tcp_input+0x46a>
            break;
 800c49c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d029      	beq.n	800c4f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c4b2:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <tcp_input+0x4c0>)
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c4ba:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <tcp_input+0x4c0>)
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c4c0:	6978      	ldr	r0, [r7, #20]
 800c4c2:	f000 fa03 	bl	800c8cc <tcp_listen_input>
      }
      pbuf_free(p);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7fd ff70 	bl	800a3ac <pbuf_free>
      return;
 800c4cc:	e1a8      	b.n	800c820 <tcp_input+0x7ec>
 800c4ce:	bf00      	nop
 800c4d0:	2000d3e4 	.word	0x2000d3e4
 800c4d4:	20009c48 	.word	0x20009c48
 800c4d8:	080170d4 	.word	0x080170d4
 800c4dc:	08017200 	.word	0x08017200
 800c4e0:	08017120 	.word	0x08017120
 800c4e4:	2000d3c8 	.word	0x2000d3c8
 800c4e8:	0801722c 	.word	0x0801722c
 800c4ec:	2000d3cc 	.word	0x2000d3cc
 800c4f0:	08017258 	.word	0x08017258
 800c4f4:	2000d3c4 	.word	0x2000d3c4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 8158 	beq.w	800c7b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c500:	4b95      	ldr	r3, [pc, #596]	; (800c758 <tcp_input+0x724>)
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	891a      	ldrh	r2, [r3, #8]
 800c50a:	4b93      	ldr	r3, [pc, #588]	; (800c758 <tcp_input+0x724>)
 800c50c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c50e:	4a92      	ldr	r2, [pc, #584]	; (800c758 <tcp_input+0x724>)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c514:	4b91      	ldr	r3, [pc, #580]	; (800c75c <tcp_input+0x728>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a8f      	ldr	r2, [pc, #572]	; (800c758 <tcp_input+0x724>)
 800c51a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c51c:	4b90      	ldr	r3, [pc, #576]	; (800c760 <tcp_input+0x72c>)
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c522:	4b90      	ldr	r3, [pc, #576]	; (800c764 <tcp_input+0x730>)
 800c524:	2200      	movs	r2, #0
 800c526:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c528:	4b8f      	ldr	r3, [pc, #572]	; (800c768 <tcp_input+0x734>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c52e:	4b8f      	ldr	r3, [pc, #572]	; (800c76c <tcp_input+0x738>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 0308 	and.w	r3, r3, #8
 800c536:	2b00      	cmp	r3, #0
 800c538:	d006      	beq.n	800c548 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7b5b      	ldrb	r3, [r3, #13]
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c550:	69f8      	ldr	r0, [r7, #28]
 800c552:	f7ff f929 	bl	800b7a8 <tcp_process_refused_data>
 800c556:	4603      	mov	r3, r0
 800c558:	f113 0f0d 	cmn.w	r3, #13
 800c55c:	d007      	beq.n	800c56e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00c      	beq.n	800c580 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c566:	4b82      	ldr	r3, [pc, #520]	; (800c770 <tcp_input+0x73c>)
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 80e3 	bne.w	800c73e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c578:	69f8      	ldr	r0, [r7, #28]
 800c57a:	f003 f9ad 	bl	800f8d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c57e:	e0de      	b.n	800c73e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c580:	4a7c      	ldr	r2, [pc, #496]	; (800c774 <tcp_input+0x740>)
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c586:	69f8      	ldr	r0, [r7, #28]
 800c588:	f000 fb18 	bl	800cbbc <tcp_process>
 800c58c:	4603      	mov	r3, r0
 800c58e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c590:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c594:	f113 0f0d 	cmn.w	r3, #13
 800c598:	f000 80d3 	beq.w	800c742 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c59c:	4b71      	ldr	r3, [pc, #452]	; (800c764 <tcp_input+0x730>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 0308 	and.w	r3, r3, #8
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d015      	beq.n	800c5d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d008      	beq.n	800c5c4 <tcp_input+0x590>
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	6912      	ldr	r2, [r2, #16]
 800c5bc:	f06f 010d 	mvn.w	r1, #13
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c5c4:	69f9      	ldr	r1, [r7, #28]
 800c5c6:	486c      	ldr	r0, [pc, #432]	; (800c778 <tcp_input+0x744>)
 800c5c8:	f7ff fbbc 	bl	800bd44 <tcp_pcb_remove>
        tcp_free(pcb);
 800c5cc:	69f8      	ldr	r0, [r7, #28]
 800c5ce:	f7fe f9a9 	bl	800a924 <tcp_free>
 800c5d2:	e0da      	b.n	800c78a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c5d8:	4b63      	ldr	r3, [pc, #396]	; (800c768 <tcp_input+0x734>)
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d01d      	beq.n	800c61c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c5e0:	4b61      	ldr	r3, [pc, #388]	; (800c768 <tcp_input+0x734>)
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <tcp_input+0x5d2>
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5f6:	69fa      	ldr	r2, [r7, #28]
 800c5f8:	6910      	ldr	r0, [r2, #16]
 800c5fa:	89fa      	ldrh	r2, [r7, #14]
 800c5fc:	69f9      	ldr	r1, [r7, #28]
 800c5fe:	4798      	blx	r3
 800c600:	4603      	mov	r3, r0
 800c602:	74fb      	strb	r3, [r7, #19]
 800c604:	e001      	b.n	800c60a <tcp_input+0x5d6>
 800c606:	2300      	movs	r3, #0
 800c608:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c60a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c60e:	f113 0f0d 	cmn.w	r3, #13
 800c612:	f000 8098 	beq.w	800c746 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c616:	4b54      	ldr	r3, [pc, #336]	; (800c768 <tcp_input+0x734>)
 800c618:	2200      	movs	r2, #0
 800c61a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c61c:	69f8      	ldr	r0, [r7, #28]
 800c61e:	f000 f915 	bl	800c84c <tcp_input_delayed_close>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 8090 	bne.w	800c74a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c62a:	4b4d      	ldr	r3, [pc, #308]	; (800c760 <tcp_input+0x72c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d041      	beq.n	800c6b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c636:	2b00      	cmp	r3, #0
 800c638:	d006      	beq.n	800c648 <tcp_input+0x614>
 800c63a:	4b50      	ldr	r3, [pc, #320]	; (800c77c <tcp_input+0x748>)
 800c63c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c640:	494f      	ldr	r1, [pc, #316]	; (800c780 <tcp_input+0x74c>)
 800c642:	4850      	ldr	r0, [pc, #320]	; (800c784 <tcp_input+0x750>)
 800c644:	f008 fc20 	bl	8014e88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	8b5b      	ldrh	r3, [r3, #26]
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b00      	cmp	r3, #0
 800c652:	d008      	beq.n	800c666 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c654:	4b42      	ldr	r3, [pc, #264]	; (800c760 <tcp_input+0x72c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fd fea7 	bl	800a3ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c65e:	69f8      	ldr	r0, [r7, #28]
 800c660:	f7fe fc48 	bl	800aef4 <tcp_abort>
            goto aborted;
 800c664:	e091      	b.n	800c78a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00c      	beq.n	800c68a <tcp_input+0x656>
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	6918      	ldr	r0, [r3, #16]
 800c67a:	4b39      	ldr	r3, [pc, #228]	; (800c760 <tcp_input+0x72c>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	2300      	movs	r3, #0
 800c680:	69f9      	ldr	r1, [r7, #28]
 800c682:	47a0      	blx	r4
 800c684:	4603      	mov	r3, r0
 800c686:	74fb      	strb	r3, [r7, #19]
 800c688:	e008      	b.n	800c69c <tcp_input+0x668>
 800c68a:	4b35      	ldr	r3, [pc, #212]	; (800c760 <tcp_input+0x72c>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	2300      	movs	r3, #0
 800c690:	69f9      	ldr	r1, [r7, #28]
 800c692:	2000      	movs	r0, #0
 800c694:	f7ff f95e 	bl	800b954 <tcp_recv_null>
 800c698:	4603      	mov	r3, r0
 800c69a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c69c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6a0:	f113 0f0d 	cmn.w	r3, #13
 800c6a4:	d053      	beq.n	800c74e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c6a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c6ae:	4b2c      	ldr	r3, [pc, #176]	; (800c760 <tcp_input+0x72c>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c6b6:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <tcp_input+0x730>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	f003 0320 	and.w	r3, r3, #32
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d030      	beq.n	800c724 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d009      	beq.n	800c6de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ce:	7b5a      	ldrb	r2, [r3, #13]
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6d4:	f042 0220 	orr.w	r2, r2, #32
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	735a      	strb	r2, [r3, #13]
 800c6dc:	e022      	b.n	800c724 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c6e6:	d005      	beq.n	800c6f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <tcp_input+0x6e2>
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	6918      	ldr	r0, [r3, #16]
 800c708:	2300      	movs	r3, #0
 800c70a:	2200      	movs	r2, #0
 800c70c:	69f9      	ldr	r1, [r7, #28]
 800c70e:	47a0      	blx	r4
 800c710:	4603      	mov	r3, r0
 800c712:	74fb      	strb	r3, [r7, #19]
 800c714:	e001      	b.n	800c71a <tcp_input+0x6e6>
 800c716:	2300      	movs	r3, #0
 800c718:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c71a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c71e:	f113 0f0d 	cmn.w	r3, #13
 800c722:	d016      	beq.n	800c752 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c724:	4b13      	ldr	r3, [pc, #76]	; (800c774 <tcp_input+0x740>)
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c72a:	69f8      	ldr	r0, [r7, #28]
 800c72c:	f000 f88e 	bl	800c84c <tcp_input_delayed_close>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d128      	bne.n	800c788 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c736:	69f8      	ldr	r0, [r7, #28]
 800c738:	f002 fac8 	bl	800eccc <tcp_output>
 800c73c:	e025      	b.n	800c78a <tcp_input+0x756>
        goto aborted;
 800c73e:	bf00      	nop
 800c740:	e023      	b.n	800c78a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c742:	bf00      	nop
 800c744:	e021      	b.n	800c78a <tcp_input+0x756>
              goto aborted;
 800c746:	bf00      	nop
 800c748:	e01f      	b.n	800c78a <tcp_input+0x756>
          goto aborted;
 800c74a:	bf00      	nop
 800c74c:	e01d      	b.n	800c78a <tcp_input+0x756>
            goto aborted;
 800c74e:	bf00      	nop
 800c750:	e01b      	b.n	800c78a <tcp_input+0x756>
              goto aborted;
 800c752:	bf00      	nop
 800c754:	e019      	b.n	800c78a <tcp_input+0x756>
 800c756:	bf00      	nop
 800c758:	2000d3d4 	.word	0x2000d3d4
 800c75c:	2000d3e4 	.word	0x2000d3e4
 800c760:	2000d404 	.word	0x2000d404
 800c764:	2000d401 	.word	0x2000d401
 800c768:	2000d3fc 	.word	0x2000d3fc
 800c76c:	2000d400 	.word	0x2000d400
 800c770:	2000d3fe 	.word	0x2000d3fe
 800c774:	2000d408 	.word	0x2000d408
 800c778:	2000d3c8 	.word	0x2000d3c8
 800c77c:	080170d4 	.word	0x080170d4
 800c780:	08017288 	.word	0x08017288
 800c784:	08017120 	.word	0x08017120
          goto aborted;
 800c788:	bf00      	nop
    tcp_input_pcb = NULL;
 800c78a:	4b27      	ldr	r3, [pc, #156]	; (800c828 <tcp_input+0x7f4>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c790:	4b26      	ldr	r3, [pc, #152]	; (800c82c <tcp_input+0x7f8>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c796:	4b26      	ldr	r3, [pc, #152]	; (800c830 <tcp_input+0x7fc>)
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d03f      	beq.n	800c81e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c79e:	4b24      	ldr	r3, [pc, #144]	; (800c830 <tcp_input+0x7fc>)
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fd fe02 	bl	800a3ac <pbuf_free>
      inseg.p = NULL;
 800c7a8:	4b21      	ldr	r3, [pc, #132]	; (800c830 <tcp_input+0x7fc>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c7ae:	e036      	b.n	800c81e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c7b0:	4b20      	ldr	r3, [pc, #128]	; (800c834 <tcp_input+0x800>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fc fa61 	bl	8008c80 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	f003 0304 	and.w	r3, r3, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d118      	bne.n	800c7fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7ca:	4b1b      	ldr	r3, [pc, #108]	; (800c838 <tcp_input+0x804>)
 800c7cc:	6819      	ldr	r1, [r3, #0]
 800c7ce:	4b1b      	ldr	r3, [pc, #108]	; (800c83c <tcp_input+0x808>)
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	4b1a      	ldr	r3, [pc, #104]	; (800c840 <tcp_input+0x80c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7da:	4b16      	ldr	r3, [pc, #88]	; (800c834 <tcp_input+0x800>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7de:	885b      	ldrh	r3, [r3, #2]
 800c7e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7e2:	4a14      	ldr	r2, [pc, #80]	; (800c834 <tcp_input+0x800>)
 800c7e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7e6:	8812      	ldrh	r2, [r2, #0]
 800c7e8:	b292      	uxth	r2, r2
 800c7ea:	9202      	str	r2, [sp, #8]
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <tcp_input+0x810>)
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <tcp_input+0x814>)
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f003 f81c 	bl	800f834 <tcp_rst>
    pbuf_free(p);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7fd fdd5 	bl	800a3ac <pbuf_free>
  return;
 800c802:	e00c      	b.n	800c81e <tcp_input+0x7ea>
    goto dropped;
 800c804:	bf00      	nop
 800c806:	e006      	b.n	800c816 <tcp_input+0x7e2>
    goto dropped;
 800c808:	bf00      	nop
 800c80a:	e004      	b.n	800c816 <tcp_input+0x7e2>
    goto dropped;
 800c80c:	bf00      	nop
 800c80e:	e002      	b.n	800c816 <tcp_input+0x7e2>
      goto dropped;
 800c810:	bf00      	nop
 800c812:	e000      	b.n	800c816 <tcp_input+0x7e2>
      goto dropped;
 800c814:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7fd fdc8 	bl	800a3ac <pbuf_free>
 800c81c:	e000      	b.n	800c820 <tcp_input+0x7ec>
  return;
 800c81e:	bf00      	nop
}
 800c820:	3724      	adds	r7, #36	; 0x24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd90      	pop	{r4, r7, pc}
 800c826:	bf00      	nop
 800c828:	2000d408 	.word	0x2000d408
 800c82c:	2000d404 	.word	0x2000d404
 800c830:	2000d3d4 	.word	0x2000d3d4
 800c834:	2000d3e4 	.word	0x2000d3e4
 800c838:	2000d3f8 	.word	0x2000d3f8
 800c83c:	2000d3fe 	.word	0x2000d3fe
 800c840:	2000d3f4 	.word	0x2000d3f4
 800c844:	20009c58 	.word	0x20009c58
 800c848:	20009c5c 	.word	0x20009c5c

0800c84c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d106      	bne.n	800c868 <tcp_input_delayed_close+0x1c>
 800c85a:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <tcp_input_delayed_close+0x6c>)
 800c85c:	f240 225a 	movw	r2, #602	; 0x25a
 800c860:	4916      	ldr	r1, [pc, #88]	; (800c8bc <tcp_input_delayed_close+0x70>)
 800c862:	4817      	ldr	r0, [pc, #92]	; (800c8c0 <tcp_input_delayed_close+0x74>)
 800c864:	f008 fb10 	bl	8014e88 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c868:	4b16      	ldr	r3, [pc, #88]	; (800c8c4 <tcp_input_delayed_close+0x78>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 0310 	and.w	r3, r3, #16
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01c      	beq.n	800c8ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	8b5b      	ldrh	r3, [r3, #26]
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10d      	bne.n	800c89c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c886:	2b00      	cmp	r3, #0
 800c888:	d008      	beq.n	800c89c <tcp_input_delayed_close+0x50>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6912      	ldr	r2, [r2, #16]
 800c894:	f06f 010e 	mvn.w	r1, #14
 800c898:	4610      	mov	r0, r2
 800c89a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	480a      	ldr	r0, [pc, #40]	; (800c8c8 <tcp_input_delayed_close+0x7c>)
 800c8a0:	f7ff fa50 	bl	800bd44 <tcp_pcb_remove>
    tcp_free(pcb);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fe f83d 	bl	800a924 <tcp_free>
    return 1;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	080170d4 	.word	0x080170d4
 800c8bc:	080172a4 	.word	0x080172a4
 800c8c0:	08017120 	.word	0x08017120
 800c8c4:	2000d401 	.word	0x2000d401
 800c8c8:	2000d3c8 	.word	0x2000d3c8

0800c8cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b08b      	sub	sp, #44	; 0x2c
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c8d4:	4b6f      	ldr	r3, [pc, #444]	; (800ca94 <tcp_listen_input+0x1c8>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 80d2 	bne.w	800ca86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <tcp_listen_input+0x2a>
 800c8e8:	4b6b      	ldr	r3, [pc, #428]	; (800ca98 <tcp_listen_input+0x1cc>)
 800c8ea:	f240 2281 	movw	r2, #641	; 0x281
 800c8ee:	496b      	ldr	r1, [pc, #428]	; (800ca9c <tcp_listen_input+0x1d0>)
 800c8f0:	486b      	ldr	r0, [pc, #428]	; (800caa0 <tcp_listen_input+0x1d4>)
 800c8f2:	f008 fac9 	bl	8014e88 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c8f6:	4b67      	ldr	r3, [pc, #412]	; (800ca94 <tcp_listen_input+0x1c8>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	f003 0310 	and.w	r3, r3, #16
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d019      	beq.n	800c936 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c902:	4b68      	ldr	r3, [pc, #416]	; (800caa4 <tcp_listen_input+0x1d8>)
 800c904:	6819      	ldr	r1, [r3, #0]
 800c906:	4b68      	ldr	r3, [pc, #416]	; (800caa8 <tcp_listen_input+0x1dc>)
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	4b67      	ldr	r3, [pc, #412]	; (800caac <tcp_listen_input+0x1e0>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c912:	4b67      	ldr	r3, [pc, #412]	; (800cab0 <tcp_listen_input+0x1e4>)
 800c914:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c916:	885b      	ldrh	r3, [r3, #2]
 800c918:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c91a:	4a65      	ldr	r2, [pc, #404]	; (800cab0 <tcp_listen_input+0x1e4>)
 800c91c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c91e:	8812      	ldrh	r2, [r2, #0]
 800c920:	b292      	uxth	r2, r2
 800c922:	9202      	str	r2, [sp, #8]
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	4b63      	ldr	r3, [pc, #396]	; (800cab4 <tcp_listen_input+0x1e8>)
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	4b63      	ldr	r3, [pc, #396]	; (800cab8 <tcp_listen_input+0x1ec>)
 800c92c:	4602      	mov	r2, r0
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f002 ff80 	bl	800f834 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c934:	e0a9      	b.n	800ca8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c936:	4b57      	ldr	r3, [pc, #348]	; (800ca94 <tcp_listen_input+0x1c8>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 80a3 	beq.w	800ca8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7d5b      	ldrb	r3, [r3, #21]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7ff f927 	bl	800bb9c <tcp_alloc>
 800c94e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d111      	bne.n	800c97a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00a      	beq.n	800c974 <tcp_listen_input+0xa8>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	6910      	ldr	r0, [r2, #16]
 800c966:	f04f 32ff 	mov.w	r2, #4294967295
 800c96a:	2100      	movs	r1, #0
 800c96c:	4798      	blx	r3
 800c96e:	4603      	mov	r3, r0
 800c970:	73bb      	strb	r3, [r7, #14]
      return;
 800c972:	e08b      	b.n	800ca8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c974:	23f0      	movs	r3, #240	; 0xf0
 800c976:	73bb      	strb	r3, [r7, #14]
      return;
 800c978:	e088      	b.n	800ca8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c97a:	4b50      	ldr	r3, [pc, #320]	; (800cabc <tcp_listen_input+0x1f0>)
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c982:	4b4e      	ldr	r3, [pc, #312]	; (800cabc <tcp_listen_input+0x1f0>)
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	8ada      	ldrh	r2, [r3, #22]
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c992:	4b47      	ldr	r3, [pc, #284]	; (800cab0 <tcp_listen_input+0x1e4>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	b29a      	uxth	r2, r3
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	2203      	movs	r2, #3
 800c9a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c9a4:	4b41      	ldr	r3, [pc, #260]	; (800caac <tcp_listen_input+0x1e0>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff fa58 	bl	800be6c <tcp_next_iss>
 800c9bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c9d6:	4b35      	ldr	r3, [pc, #212]	; (800caac <tcp_listen_input+0x1e0>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	1e5a      	subs	r2, r3, #1
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	691a      	ldr	r2, [r3, #16]
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	7a5b      	ldrb	r3, [r3, #9]
 800c9f2:	f003 030c 	and.w	r3, r3, #12
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7a1a      	ldrb	r2, [r3, #8]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ca04:	4b2e      	ldr	r3, [pc, #184]	; (800cac0 <tcp_listen_input+0x1f4>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	60da      	str	r2, [r3, #12]
 800ca0c:	4a2c      	ldr	r2, [pc, #176]	; (800cac0 <tcp_listen_input+0x1f4>)
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	f003 f8d1 	bl	800fbb8 <tcp_timer_needed>
 800ca16:	4b2b      	ldr	r3, [pc, #172]	; (800cac4 <tcp_listen_input+0x1f8>)
 800ca18:	2201      	movs	r2, #1
 800ca1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ca1c:	6978      	ldr	r0, [r7, #20]
 800ca1e:	f001 fd8f 	bl	800e540 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ca22:	4b23      	ldr	r3, [pc, #140]	; (800cab0 <tcp_listen_input+0x1e4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	89db      	ldrh	r3, [r3, #14]
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	3304      	adds	r3, #4
 800ca44:	4618      	mov	r0, r3
 800ca46:	f006 fe23 	bl	8013690 <ip4_route>
 800ca4a:	4601      	mov	r1, r0
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	461a      	mov	r2, r3
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff fa30 	bl	800beb8 <tcp_eff_send_mss_netif>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ca60:	2112      	movs	r1, #18
 800ca62:	6978      	ldr	r0, [r7, #20]
 800ca64:	f002 f844 	bl	800eaf0 <tcp_enqueue_flags>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ca6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d004      	beq.n	800ca7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ca74:	2100      	movs	r1, #0
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f7fe f97e 	bl	800ad78 <tcp_abandon>
      return;
 800ca7c:	e006      	b.n	800ca8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ca7e:	6978      	ldr	r0, [r7, #20]
 800ca80:	f002 f924 	bl	800eccc <tcp_output>
  return;
 800ca84:	e001      	b.n	800ca8a <tcp_listen_input+0x1be>
    return;
 800ca86:	bf00      	nop
 800ca88:	e000      	b.n	800ca8c <tcp_listen_input+0x1c0>
  return;
 800ca8a:	bf00      	nop
}
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd90      	pop	{r4, r7, pc}
 800ca92:	bf00      	nop
 800ca94:	2000d400 	.word	0x2000d400
 800ca98:	080170d4 	.word	0x080170d4
 800ca9c:	080172cc 	.word	0x080172cc
 800caa0:	08017120 	.word	0x08017120
 800caa4:	2000d3f8 	.word	0x2000d3f8
 800caa8:	2000d3fe 	.word	0x2000d3fe
 800caac:	2000d3f4 	.word	0x2000d3f4
 800cab0:	2000d3e4 	.word	0x2000d3e4
 800cab4:	20009c58 	.word	0x20009c58
 800cab8:	20009c5c 	.word	0x20009c5c
 800cabc:	20009c48 	.word	0x20009c48
 800cac0:	2000d3c8 	.word	0x2000d3c8
 800cac4:	2000d3d0 	.word	0x2000d3d0

0800cac8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af04      	add	r7, sp, #16
 800cace:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cad0:	4b2f      	ldr	r3, [pc, #188]	; (800cb90 <tcp_timewait_input+0xc8>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f003 0304 	and.w	r3, r3, #4
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d153      	bne.n	800cb84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <tcp_timewait_input+0x28>
 800cae2:	4b2c      	ldr	r3, [pc, #176]	; (800cb94 <tcp_timewait_input+0xcc>)
 800cae4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cae8:	492b      	ldr	r1, [pc, #172]	; (800cb98 <tcp_timewait_input+0xd0>)
 800caea:	482c      	ldr	r0, [pc, #176]	; (800cb9c <tcp_timewait_input+0xd4>)
 800caec:	f008 f9cc 	bl	8014e88 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800caf0:	4b27      	ldr	r3, [pc, #156]	; (800cb90 <tcp_timewait_input+0xc8>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d02a      	beq.n	800cb52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cafc:	4b28      	ldr	r3, [pc, #160]	; (800cba0 <tcp_timewait_input+0xd8>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	db2d      	blt.n	800cb66 <tcp_timewait_input+0x9e>
 800cb0a:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <tcp_timewait_input+0xd8>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cb16:	440b      	add	r3, r1
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dc23      	bgt.n	800cb66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb1e:	4b21      	ldr	r3, [pc, #132]	; (800cba4 <tcp_timewait_input+0xdc>)
 800cb20:	6819      	ldr	r1, [r3, #0]
 800cb22:	4b21      	ldr	r3, [pc, #132]	; (800cba8 <tcp_timewait_input+0xe0>)
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <tcp_timewait_input+0xd8>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb2e:	4b1f      	ldr	r3, [pc, #124]	; (800cbac <tcp_timewait_input+0xe4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb36:	4a1d      	ldr	r2, [pc, #116]	; (800cbac <tcp_timewait_input+0xe4>)
 800cb38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb3a:	8812      	ldrh	r2, [r2, #0]
 800cb3c:	b292      	uxth	r2, r2
 800cb3e:	9202      	str	r2, [sp, #8]
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	4b1b      	ldr	r3, [pc, #108]	; (800cbb0 <tcp_timewait_input+0xe8>)
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	4b1b      	ldr	r3, [pc, #108]	; (800cbb4 <tcp_timewait_input+0xec>)
 800cb48:	4602      	mov	r2, r0
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f002 fe72 	bl	800f834 <tcp_rst>
      return;
 800cb50:	e01b      	b.n	800cb8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cb52:	4b0f      	ldr	r3, [pc, #60]	; (800cb90 <tcp_timewait_input+0xc8>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cb5e:	4b16      	ldr	r3, [pc, #88]	; (800cbb8 <tcp_timewait_input+0xf0>)
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cb66:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <tcp_timewait_input+0xe0>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	8b5b      	ldrh	r3, [r3, #26]
 800cb72:	f043 0302 	orr.w	r3, r3, #2
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f002 f8a5 	bl	800eccc <tcp_output>
  }
  return;
 800cb82:	e001      	b.n	800cb88 <tcp_timewait_input+0xc0>
    return;
 800cb84:	bf00      	nop
 800cb86:	e000      	b.n	800cb8a <tcp_timewait_input+0xc2>
  return;
 800cb88:	bf00      	nop
}
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	2000d400 	.word	0x2000d400
 800cb94:	080170d4 	.word	0x080170d4
 800cb98:	080172ec 	.word	0x080172ec
 800cb9c:	08017120 	.word	0x08017120
 800cba0:	2000d3f4 	.word	0x2000d3f4
 800cba4:	2000d3f8 	.word	0x2000d3f8
 800cba8:	2000d3fe 	.word	0x2000d3fe
 800cbac:	2000d3e4 	.word	0x2000d3e4
 800cbb0:	20009c58 	.word	0x20009c58
 800cbb4:	20009c5c 	.word	0x20009c5c
 800cbb8:	2000d3bc 	.word	0x2000d3bc

0800cbbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b08d      	sub	sp, #52	; 0x34
 800cbc0:	af04      	add	r7, sp, #16
 800cbc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <tcp_process+0x24>
 800cbd2:	4b9d      	ldr	r3, [pc, #628]	; (800ce48 <tcp_process+0x28c>)
 800cbd4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cbd8:	499c      	ldr	r1, [pc, #624]	; (800ce4c <tcp_process+0x290>)
 800cbda:	489d      	ldr	r0, [pc, #628]	; (800ce50 <tcp_process+0x294>)
 800cbdc:	f008 f954 	bl	8014e88 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cbe0:	4b9c      	ldr	r3, [pc, #624]	; (800ce54 <tcp_process+0x298>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 0304 	and.w	r3, r3, #4
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d04e      	beq.n	800cc8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	7d1b      	ldrb	r3, [r3, #20]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d108      	bne.n	800cc06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbf8:	4b97      	ldr	r3, [pc, #604]	; (800ce58 <tcp_process+0x29c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d123      	bne.n	800cc48 <tcp_process+0x8c>
        acceptable = 1;
 800cc00:	2301      	movs	r3, #1
 800cc02:	76fb      	strb	r3, [r7, #27]
 800cc04:	e020      	b.n	800cc48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc0a:	4b94      	ldr	r3, [pc, #592]	; (800ce5c <tcp_process+0x2a0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d102      	bne.n	800cc18 <tcp_process+0x5c>
        acceptable = 1;
 800cc12:	2301      	movs	r3, #1
 800cc14:	76fb      	strb	r3, [r7, #27]
 800cc16:	e017      	b.n	800cc48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc18:	4b90      	ldr	r3, [pc, #576]	; (800ce5c <tcp_process+0x2a0>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	db10      	blt.n	800cc48 <tcp_process+0x8c>
 800cc26:	4b8d      	ldr	r3, [pc, #564]	; (800ce5c <tcp_process+0x2a0>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc32:	440b      	add	r3, r1
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dc06      	bgt.n	800cc48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8b5b      	ldrh	r3, [r3, #26]
 800cc3e:	f043 0302 	orr.w	r3, r3, #2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cc48:	7efb      	ldrb	r3, [r7, #27]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01b      	beq.n	800cc86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	7d1b      	ldrb	r3, [r3, #20]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d106      	bne.n	800cc64 <tcp_process+0xa8>
 800cc56:	4b7c      	ldr	r3, [pc, #496]	; (800ce48 <tcp_process+0x28c>)
 800cc58:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cc5c:	4980      	ldr	r1, [pc, #512]	; (800ce60 <tcp_process+0x2a4>)
 800cc5e:	487c      	ldr	r0, [pc, #496]	; (800ce50 <tcp_process+0x294>)
 800cc60:	f008 f912 	bl	8014e88 <iprintf>
      recv_flags |= TF_RESET;
 800cc64:	4b7f      	ldr	r3, [pc, #508]	; (800ce64 <tcp_process+0x2a8>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	f043 0308 	orr.w	r3, r3, #8
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	4b7d      	ldr	r3, [pc, #500]	; (800ce64 <tcp_process+0x2a8>)
 800cc70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8b5b      	ldrh	r3, [r3, #26]
 800cc76:	f023 0301 	bic.w	r3, r3, #1
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cc80:	f06f 030d 	mvn.w	r3, #13
 800cc84:	e37a      	b.n	800d37c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e378      	b.n	800d37c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cc8a:	4b72      	ldr	r3, [pc, #456]	; (800ce54 <tcp_process+0x298>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d010      	beq.n	800ccb8 <tcp_process+0xfc>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	7d1b      	ldrb	r3, [r3, #20]
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d00c      	beq.n	800ccb8 <tcp_process+0xfc>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	7d1b      	ldrb	r3, [r3, #20]
 800cca2:	2b03      	cmp	r3, #3
 800cca4:	d008      	beq.n	800ccb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	8b5b      	ldrh	r3, [r3, #26]
 800ccaa:	f043 0302 	orr.w	r3, r3, #2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	e361      	b.n	800d37c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8b5b      	ldrh	r3, [r3, #26]
 800ccbc:	f003 0310 	and.w	r3, r3, #16
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d103      	bne.n	800cccc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ccc4:	4b68      	ldr	r3, [pc, #416]	; (800ce68 <tcp_process+0x2ac>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f001 fc2f 	bl	800e540 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	7d1b      	ldrb	r3, [r3, #20]
 800cce6:	3b02      	subs	r3, #2
 800cce8:	2b07      	cmp	r3, #7
 800ccea:	f200 8337 	bhi.w	800d35c <tcp_process+0x7a0>
 800ccee:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <tcp_process+0x138>)
 800ccf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cf45 	.word	0x0800cf45
 800ccfc:	0800d0bd 	.word	0x0800d0bd
 800cd00:	0800d0e7 	.word	0x0800d0e7
 800cd04:	0800d20b 	.word	0x0800d20b
 800cd08:	0800d0bd 	.word	0x0800d0bd
 800cd0c:	0800d297 	.word	0x0800d297
 800cd10:	0800d327 	.word	0x0800d327
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cd14:	4b4f      	ldr	r3, [pc, #316]	; (800ce54 <tcp_process+0x298>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 80e4 	beq.w	800ceea <tcp_process+0x32e>
 800cd22:	4b4c      	ldr	r3, [pc, #304]	; (800ce54 <tcp_process+0x298>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 0302 	and.w	r3, r3, #2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80dd 	beq.w	800ceea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	4b48      	ldr	r3, [pc, #288]	; (800ce58 <tcp_process+0x29c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	f040 80d5 	bne.w	800ceea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cd40:	4b46      	ldr	r3, [pc, #280]	; (800ce5c <tcp_process+0x2a0>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cd52:	4b41      	ldr	r3, [pc, #260]	; (800ce58 <tcp_process+0x29c>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cd5a:	4b44      	ldr	r3, [pc, #272]	; (800ce6c <tcp_process+0x2b0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	89db      	ldrh	r3, [r3, #14]
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cd74:	4b39      	ldr	r3, [pc, #228]	; (800ce5c <tcp_process+0x2a0>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	1e5a      	subs	r2, r3, #1
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2204      	movs	r2, #4
 800cd82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f006 fc7f 	bl	8013690 <ip4_route>
 800cd92:	4601      	mov	r1, r0
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3304      	adds	r3, #4
 800cd98:	461a      	mov	r2, r3
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7ff f88c 	bl	800beb8 <tcp_eff_send_mss_netif>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdac:	009a      	lsls	r2, r3, #2
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	f241 111c 	movw	r1, #4380	; 0x111c
 800cdb8:	428b      	cmp	r3, r1
 800cdba:	bf38      	it	cc
 800cdbc:	460b      	movcc	r3, r1
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d204      	bcs.n	800cdcc <tcp_process+0x210>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	e00d      	b.n	800cde8 <tcp_process+0x22c>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	f241 121c 	movw	r2, #4380	; 0x111c
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d904      	bls.n	800cde4 <tcp_process+0x228>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	e001      	b.n	800cde8 <tcp_process+0x22c>
 800cde4:	f241 131c 	movw	r3, #4380	; 0x111c
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d106      	bne.n	800ce06 <tcp_process+0x24a>
 800cdf8:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <tcp_process+0x28c>)
 800cdfa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cdfe:	491c      	ldr	r1, [pc, #112]	; (800ce70 <tcp_process+0x2b4>)
 800ce00:	4813      	ldr	r0, [pc, #76]	; (800ce50 <tcp_process+0x294>)
 800ce02:	f008 f841 	bl	8014e88 <iprintf>
        --pcb->snd_queuelen;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d12a      	bne.n	800ce78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <tcp_process+0x280>
 800ce2e:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <tcp_process+0x28c>)
 800ce30:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ce34:	490f      	ldr	r1, [pc, #60]	; (800ce74 <tcp_process+0x2b8>)
 800ce36:	4806      	ldr	r0, [pc, #24]	; (800ce50 <tcp_process+0x294>)
 800ce38:	f008 f826 	bl	8014e88 <iprintf>
          pcb->unsent = rseg->next;
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce44:	e01c      	b.n	800ce80 <tcp_process+0x2c4>
 800ce46:	bf00      	nop
 800ce48:	080170d4 	.word	0x080170d4
 800ce4c:	0801730c 	.word	0x0801730c
 800ce50:	08017120 	.word	0x08017120
 800ce54:	2000d400 	.word	0x2000d400
 800ce58:	2000d3f8 	.word	0x2000d3f8
 800ce5c:	2000d3f4 	.word	0x2000d3f4
 800ce60:	08017328 	.word	0x08017328
 800ce64:	2000d401 	.word	0x2000d401
 800ce68:	2000d3bc 	.word	0x2000d3bc
 800ce6c:	2000d3e4 	.word	0x2000d3e4
 800ce70:	08017348 	.word	0x08017348
 800ce74:	08017360 	.word	0x08017360
        } else {
          pcb->unacked = rseg->next;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ce80:	69f8      	ldr	r0, [r7, #28]
 800ce82:	f7fe fd22 	bl	800b8ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d104      	bne.n	800ce98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce94:	861a      	strh	r2, [r3, #48]	; 0x30
 800ce96:	e006      	b.n	800cea6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00a      	beq.n	800cec6 <tcp_process+0x30a>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	6910      	ldr	r0, [r2, #16]
 800ceba:	2200      	movs	r2, #0
 800cebc:	6879      	ldr	r1, [r7, #4]
 800cebe:	4798      	blx	r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	76bb      	strb	r3, [r7, #26]
 800cec4:	e001      	b.n	800ceca <tcp_process+0x30e>
 800cec6:	2300      	movs	r3, #0
 800cec8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ceca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cece:	f113 0f0d 	cmn.w	r3, #13
 800ced2:	d102      	bne.n	800ceda <tcp_process+0x31e>
          return ERR_ABRT;
 800ced4:	f06f 030c 	mvn.w	r3, #12
 800ced8:	e250      	b.n	800d37c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	8b5b      	ldrh	r3, [r3, #26]
 800cede:	f043 0302 	orr.w	r3, r3, #2
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cee8:	e23a      	b.n	800d360 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ceea:	4b98      	ldr	r3, [pc, #608]	; (800d14c <tcp_process+0x590>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	f003 0310 	and.w	r3, r3, #16
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 8234 	beq.w	800d360 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cef8:	4b95      	ldr	r3, [pc, #596]	; (800d150 <tcp_process+0x594>)
 800cefa:	6819      	ldr	r1, [r3, #0]
 800cefc:	4b95      	ldr	r3, [pc, #596]	; (800d154 <tcp_process+0x598>)
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	461a      	mov	r2, r3
 800cf02:	4b95      	ldr	r3, [pc, #596]	; (800d158 <tcp_process+0x59c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf08:	4b94      	ldr	r3, [pc, #592]	; (800d15c <tcp_process+0x5a0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf0c:	885b      	ldrh	r3, [r3, #2]
 800cf0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf10:	4a92      	ldr	r2, [pc, #584]	; (800d15c <tcp_process+0x5a0>)
 800cf12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf14:	8812      	ldrh	r2, [r2, #0]
 800cf16:	b292      	uxth	r2, r2
 800cf18:	9202      	str	r2, [sp, #8]
 800cf1a:	9301      	str	r3, [sp, #4]
 800cf1c:	4b90      	ldr	r3, [pc, #576]	; (800d160 <tcp_process+0x5a4>)
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	4b90      	ldr	r3, [pc, #576]	; (800d164 <tcp_process+0x5a8>)
 800cf22:	4602      	mov	r2, r0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f002 fc85 	bl	800f834 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf30:	2b05      	cmp	r3, #5
 800cf32:	f200 8215 	bhi.w	800d360 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f002 fa51 	bl	800f3e4 <tcp_rexmit_rto>
      break;
 800cf42:	e20d      	b.n	800d360 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cf44:	4b81      	ldr	r3, [pc, #516]	; (800d14c <tcp_process+0x590>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	f003 0310 	and.w	r3, r3, #16
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 80a1 	beq.w	800d094 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf52:	4b7f      	ldr	r3, [pc, #508]	; (800d150 <tcp_process+0x594>)
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	db7e      	blt.n	800d060 <tcp_process+0x4a4>
 800cf62:	4b7b      	ldr	r3, [pc, #492]	; (800d150 <tcp_process+0x594>)
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dc77      	bgt.n	800d060 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2204      	movs	r2, #4
 800cf74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d102      	bne.n	800cf84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cf7e:	23fa      	movs	r3, #250	; 0xfa
 800cf80:	76bb      	strb	r3, [r7, #26]
 800cf82:	e01d      	b.n	800cfc0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <tcp_process+0x3e0>
 800cf8e:	4b76      	ldr	r3, [pc, #472]	; (800d168 <tcp_process+0x5ac>)
 800cf90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800cf94:	4975      	ldr	r1, [pc, #468]	; (800d16c <tcp_process+0x5b0>)
 800cf96:	4876      	ldr	r0, [pc, #472]	; (800d170 <tcp_process+0x5b4>)
 800cf98:	f007 ff76 	bl	8014e88 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00a      	beq.n	800cfbc <tcp_process+0x400>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	6910      	ldr	r0, [r2, #16]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	4798      	blx	r3
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	76bb      	strb	r3, [r7, #26]
 800cfba:	e001      	b.n	800cfc0 <tcp_process+0x404>
 800cfbc:	23f0      	movs	r3, #240	; 0xf0
 800cfbe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cfc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00a      	beq.n	800cfde <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cfc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cfcc:	f113 0f0d 	cmn.w	r3, #13
 800cfd0:	d002      	beq.n	800cfd8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7fd ff8e 	bl	800aef4 <tcp_abort>
            }
            return ERR_ABRT;
 800cfd8:	f06f 030c 	mvn.w	r3, #12
 800cfdc:	e1ce      	b.n	800d37c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fae0 	bl	800d5a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cfe4:	4b63      	ldr	r3, [pc, #396]	; (800d174 <tcp_process+0x5b8>)
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d005      	beq.n	800cff8 <tcp_process+0x43c>
            recv_acked--;
 800cfec:	4b61      	ldr	r3, [pc, #388]	; (800d174 <tcp_process+0x5b8>)
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	4b5f      	ldr	r3, [pc, #380]	; (800d174 <tcp_process+0x5b8>)
 800cff6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cffc:	009a      	lsls	r2, r3, #2
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	f241 111c 	movw	r1, #4380	; 0x111c
 800d008:	428b      	cmp	r3, r1
 800d00a:	bf38      	it	cc
 800d00c:	460b      	movcc	r3, r1
 800d00e:	429a      	cmp	r2, r3
 800d010:	d204      	bcs.n	800d01c <tcp_process+0x460>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	b29b      	uxth	r3, r3
 800d01a:	e00d      	b.n	800d038 <tcp_process+0x47c>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	f241 121c 	movw	r2, #4380	; 0x111c
 800d026:	4293      	cmp	r3, r2
 800d028:	d904      	bls.n	800d034 <tcp_process+0x478>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	b29b      	uxth	r3, r3
 800d032:	e001      	b.n	800d038 <tcp_process+0x47c>
 800d034:	f241 131c 	movw	r3, #4380	; 0x111c
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d03e:	4b4e      	ldr	r3, [pc, #312]	; (800d178 <tcp_process+0x5bc>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	f003 0320 	and.w	r3, r3, #32
 800d046:	2b00      	cmp	r3, #0
 800d048:	d037      	beq.n	800d0ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	8b5b      	ldrh	r3, [r3, #26]
 800d04e:	f043 0302 	orr.w	r3, r3, #2
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2207      	movs	r2, #7
 800d05c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d05e:	e02c      	b.n	800d0ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d060:	4b3b      	ldr	r3, [pc, #236]	; (800d150 <tcp_process+0x594>)
 800d062:	6819      	ldr	r1, [r3, #0]
 800d064:	4b3b      	ldr	r3, [pc, #236]	; (800d154 <tcp_process+0x598>)
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	461a      	mov	r2, r3
 800d06a:	4b3b      	ldr	r3, [pc, #236]	; (800d158 <tcp_process+0x59c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d070:	4b3a      	ldr	r3, [pc, #232]	; (800d15c <tcp_process+0x5a0>)
 800d072:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d074:	885b      	ldrh	r3, [r3, #2]
 800d076:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d078:	4a38      	ldr	r2, [pc, #224]	; (800d15c <tcp_process+0x5a0>)
 800d07a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d07c:	8812      	ldrh	r2, [r2, #0]
 800d07e:	b292      	uxth	r2, r2
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	4b36      	ldr	r3, [pc, #216]	; (800d160 <tcp_process+0x5a4>)
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	4b36      	ldr	r3, [pc, #216]	; (800d164 <tcp_process+0x5a8>)
 800d08a:	4602      	mov	r2, r0
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f002 fbd1 	bl	800f834 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d092:	e167      	b.n	800d364 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d094:	4b2d      	ldr	r3, [pc, #180]	; (800d14c <tcp_process+0x590>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 0302 	and.w	r3, r3, #2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 8161 	beq.w	800d364 <tcp_process+0x7a8>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a6:	1e5a      	subs	r2, r3, #1
 800d0a8:	4b2b      	ldr	r3, [pc, #172]	; (800d158 <tcp_process+0x59c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	f040 8159 	bne.w	800d364 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f002 f9b8 	bl	800f428 <tcp_rexmit>
      break;
 800d0b8:	e154      	b.n	800d364 <tcp_process+0x7a8>
 800d0ba:	e153      	b.n	800d364 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fa71 	bl	800d5a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d0c2:	4b2d      	ldr	r3, [pc, #180]	; (800d178 <tcp_process+0x5bc>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	f003 0320 	and.w	r3, r3, #32
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f000 814c 	beq.w	800d368 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	8b5b      	ldrh	r3, [r3, #26]
 800d0d4:	f043 0302 	orr.w	r3, r3, #2
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2207      	movs	r2, #7
 800d0e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d0e4:	e140      	b.n	800d368 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fa5c 	bl	800d5a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d0ec:	4b22      	ldr	r3, [pc, #136]	; (800d178 <tcp_process+0x5bc>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	f003 0320 	and.w	r3, r3, #32
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d071      	beq.n	800d1dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0f8:	4b14      	ldr	r3, [pc, #80]	; (800d14c <tcp_process+0x590>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	f003 0310 	and.w	r3, r3, #16
 800d100:	2b00      	cmp	r3, #0
 800d102:	d060      	beq.n	800d1c6 <tcp_process+0x60a>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d108:	4b11      	ldr	r3, [pc, #68]	; (800d150 <tcp_process+0x594>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d15a      	bne.n	800d1c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d114:	2b00      	cmp	r3, #0
 800d116:	d156      	bne.n	800d1c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8b5b      	ldrh	r3, [r3, #26]
 800d11c:	f043 0302 	orr.w	r3, r3, #2
 800d120:	b29a      	uxth	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe fdbc 	bl	800bca4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d12c:	4b13      	ldr	r3, [pc, #76]	; (800d17c <tcp_process+0x5c0>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	429a      	cmp	r2, r3
 800d134:	d105      	bne.n	800d142 <tcp_process+0x586>
 800d136:	4b11      	ldr	r3, [pc, #68]	; (800d17c <tcp_process+0x5c0>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	4a0f      	ldr	r2, [pc, #60]	; (800d17c <tcp_process+0x5c0>)
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	e02e      	b.n	800d1a0 <tcp_process+0x5e4>
 800d142:	4b0e      	ldr	r3, [pc, #56]	; (800d17c <tcp_process+0x5c0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	e027      	b.n	800d19a <tcp_process+0x5de>
 800d14a:	bf00      	nop
 800d14c:	2000d400 	.word	0x2000d400
 800d150:	2000d3f8 	.word	0x2000d3f8
 800d154:	2000d3fe 	.word	0x2000d3fe
 800d158:	2000d3f4 	.word	0x2000d3f4
 800d15c:	2000d3e4 	.word	0x2000d3e4
 800d160:	20009c58 	.word	0x20009c58
 800d164:	20009c5c 	.word	0x20009c5c
 800d168:	080170d4 	.word	0x080170d4
 800d16c:	08017374 	.word	0x08017374
 800d170:	08017120 	.word	0x08017120
 800d174:	2000d3fc 	.word	0x2000d3fc
 800d178:	2000d401 	.word	0x2000d401
 800d17c:	2000d3c8 	.word	0x2000d3c8
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d104      	bne.n	800d194 <tcp_process+0x5d8>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68da      	ldr	r2, [r3, #12]
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	60da      	str	r2, [r3, #12]
 800d192:	e005      	b.n	800d1a0 <tcp_process+0x5e4>
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ef      	bne.n	800d180 <tcp_process+0x5c4>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	60da      	str	r2, [r3, #12]
 800d1a6:	4b77      	ldr	r3, [pc, #476]	; (800d384 <tcp_process+0x7c8>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	220a      	movs	r2, #10
 800d1b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d1b2:	4b75      	ldr	r3, [pc, #468]	; (800d388 <tcp_process+0x7cc>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	60da      	str	r2, [r3, #12]
 800d1ba:	4a73      	ldr	r2, [pc, #460]	; (800d388 <tcp_process+0x7cc>)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	f002 fcfa 	bl	800fbb8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d1c4:	e0d2      	b.n	800d36c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ca:	f043 0302 	orr.w	r3, r3, #2
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2208      	movs	r2, #8
 800d1d8:	751a      	strb	r2, [r3, #20]
      break;
 800d1da:	e0c7      	b.n	800d36c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1dc:	4b6b      	ldr	r3, [pc, #428]	; (800d38c <tcp_process+0x7d0>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 80c1 	beq.w	800d36c <tcp_process+0x7b0>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1ee:	4b68      	ldr	r3, [pc, #416]	; (800d390 <tcp_process+0x7d4>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f040 80ba 	bne.w	800d36c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 80b5 	bne.w	800d36c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2206      	movs	r2, #6
 800d206:	751a      	strb	r2, [r3, #20]
      break;
 800d208:	e0b0      	b.n	800d36c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f9ca 	bl	800d5a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d210:	4b60      	ldr	r3, [pc, #384]	; (800d394 <tcp_process+0x7d8>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	f003 0320 	and.w	r3, r3, #32
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f000 80a9 	beq.w	800d370 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	8b5b      	ldrh	r3, [r3, #26]
 800d222:	f043 0302 	orr.w	r3, r3, #2
 800d226:	b29a      	uxth	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7fe fd39 	bl	800bca4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d232:	4b59      	ldr	r3, [pc, #356]	; (800d398 <tcp_process+0x7dc>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d105      	bne.n	800d248 <tcp_process+0x68c>
 800d23c:	4b56      	ldr	r3, [pc, #344]	; (800d398 <tcp_process+0x7dc>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	4a55      	ldr	r2, [pc, #340]	; (800d398 <tcp_process+0x7dc>)
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	e013      	b.n	800d270 <tcp_process+0x6b4>
 800d248:	4b53      	ldr	r3, [pc, #332]	; (800d398 <tcp_process+0x7dc>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	613b      	str	r3, [r7, #16]
 800d24e:	e00c      	b.n	800d26a <tcp_process+0x6ae>
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	429a      	cmp	r2, r3
 800d258:	d104      	bne.n	800d264 <tcp_process+0x6a8>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	68da      	ldr	r2, [r3, #12]
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	60da      	str	r2, [r3, #12]
 800d262:	e005      	b.n	800d270 <tcp_process+0x6b4>
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1ef      	bne.n	800d250 <tcp_process+0x694>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	4b43      	ldr	r3, [pc, #268]	; (800d384 <tcp_process+0x7c8>)
 800d278:	2201      	movs	r2, #1
 800d27a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	220a      	movs	r2, #10
 800d280:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d282:	4b41      	ldr	r3, [pc, #260]	; (800d388 <tcp_process+0x7cc>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	60da      	str	r2, [r3, #12]
 800d28a:	4a3f      	ldr	r2, [pc, #252]	; (800d388 <tcp_process+0x7cc>)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	f002 fc92 	bl	800fbb8 <tcp_timer_needed>
      }
      break;
 800d294:	e06c      	b.n	800d370 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f984 	bl	800d5a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d29c:	4b3b      	ldr	r3, [pc, #236]	; (800d38c <tcp_process+0x7d0>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d065      	beq.n	800d374 <tcp_process+0x7b8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ac:	4b38      	ldr	r3, [pc, #224]	; (800d390 <tcp_process+0x7d4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d15f      	bne.n	800d374 <tcp_process+0x7b8>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d15b      	bne.n	800d374 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7fe fcf1 	bl	800bca4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d2c2:	4b35      	ldr	r3, [pc, #212]	; (800d398 <tcp_process+0x7dc>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d105      	bne.n	800d2d8 <tcp_process+0x71c>
 800d2cc:	4b32      	ldr	r3, [pc, #200]	; (800d398 <tcp_process+0x7dc>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	4a31      	ldr	r2, [pc, #196]	; (800d398 <tcp_process+0x7dc>)
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	e013      	b.n	800d300 <tcp_process+0x744>
 800d2d8:	4b2f      	ldr	r3, [pc, #188]	; (800d398 <tcp_process+0x7dc>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	e00c      	b.n	800d2fa <tcp_process+0x73e>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d104      	bne.n	800d2f4 <tcp_process+0x738>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	60da      	str	r2, [r3, #12]
 800d2f2:	e005      	b.n	800d300 <tcp_process+0x744>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1ef      	bne.n	800d2e0 <tcp_process+0x724>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	60da      	str	r2, [r3, #12]
 800d306:	4b1f      	ldr	r3, [pc, #124]	; (800d384 <tcp_process+0x7c8>)
 800d308:	2201      	movs	r2, #1
 800d30a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	220a      	movs	r2, #10
 800d310:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <tcp_process+0x7cc>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	60da      	str	r2, [r3, #12]
 800d31a:	4a1b      	ldr	r2, [pc, #108]	; (800d388 <tcp_process+0x7cc>)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	f002 fc4a 	bl	800fbb8 <tcp_timer_needed>
      }
      break;
 800d324:	e026      	b.n	800d374 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f93c 	bl	800d5a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d32c:	4b17      	ldr	r3, [pc, #92]	; (800d38c <tcp_process+0x7d0>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f003 0310 	and.w	r3, r3, #16
 800d334:	2b00      	cmp	r3, #0
 800d336:	d01f      	beq.n	800d378 <tcp_process+0x7bc>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d33c:	4b14      	ldr	r3, [pc, #80]	; (800d390 <tcp_process+0x7d4>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d119      	bne.n	800d378 <tcp_process+0x7bc>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d115      	bne.n	800d378 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d34c:	4b11      	ldr	r3, [pc, #68]	; (800d394 <tcp_process+0x7d8>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	f043 0310 	orr.w	r3, r3, #16
 800d354:	b2da      	uxtb	r2, r3
 800d356:	4b0f      	ldr	r3, [pc, #60]	; (800d394 <tcp_process+0x7d8>)
 800d358:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d35a:	e00d      	b.n	800d378 <tcp_process+0x7bc>
    default:
      break;
 800d35c:	bf00      	nop
 800d35e:	e00c      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d360:	bf00      	nop
 800d362:	e00a      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d364:	bf00      	nop
 800d366:	e008      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d368:	bf00      	nop
 800d36a:	e006      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d36c:	bf00      	nop
 800d36e:	e004      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d370:	bf00      	nop
 800d372:	e002      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d374:	bf00      	nop
 800d376:	e000      	b.n	800d37a <tcp_process+0x7be>
      break;
 800d378:	bf00      	nop
  }
  return ERR_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3724      	adds	r7, #36	; 0x24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd90      	pop	{r4, r7, pc}
 800d384:	2000d3d0 	.word	0x2000d3d0
 800d388:	2000d3cc 	.word	0x2000d3cc
 800d38c:	2000d400 	.word	0x2000d400
 800d390:	2000d3f8 	.word	0x2000d3f8
 800d394:	2000d401 	.word	0x2000d401
 800d398:	2000d3c8 	.word	0x2000d3c8

0800d39c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d39c:	b590      	push	{r4, r7, lr}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d106      	bne.n	800d3ba <tcp_oos_insert_segment+0x1e>
 800d3ac:	4b3b      	ldr	r3, [pc, #236]	; (800d49c <tcp_oos_insert_segment+0x100>)
 800d3ae:	f240 421f 	movw	r2, #1055	; 0x41f
 800d3b2:	493b      	ldr	r1, [pc, #236]	; (800d4a0 <tcp_oos_insert_segment+0x104>)
 800d3b4:	483b      	ldr	r0, [pc, #236]	; (800d4a4 <tcp_oos_insert_segment+0x108>)
 800d3b6:	f007 fd67 	bl	8014e88 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	899b      	ldrh	r3, [r3, #12]
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fb fc5c 	bl	8008c80 <lwip_htons>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d028      	beq.n	800d426 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d3d4:	6838      	ldr	r0, [r7, #0]
 800d3d6:	f7fe fa63 	bl	800b8a0 <tcp_segs_free>
    next = NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	e056      	b.n	800d48e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	899b      	ldrh	r3, [r3, #12]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fb fc49 	bl	8008c80 <lwip_htons>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00d      	beq.n	800d416 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	899b      	ldrh	r3, [r3, #12]
 800d400:	b29c      	uxth	r4, r3
 800d402:	2001      	movs	r0, #1
 800d404:	f7fb fc3c 	bl	8008c80 <lwip_htons>
 800d408:	4603      	mov	r3, r0
 800d40a:	461a      	mov	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	4322      	orrs	r2, r4
 800d412:	b292      	uxth	r2, r2
 800d414:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7fe fa52 	bl	800b8ca <tcp_seg_free>
    while (next &&
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00e      	beq.n	800d44a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	891b      	ldrh	r3, [r3, #8]
 800d430:	461a      	mov	r2, r3
 800d432:	4b1d      	ldr	r3, [pc, #116]	; (800d4a8 <tcp_oos_insert_segment+0x10c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	441a      	add	r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	6839      	ldr	r1, [r7, #0]
 800d440:	8909      	ldrh	r1, [r1, #8]
 800d442:	440b      	add	r3, r1
 800d444:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d446:	2b00      	cmp	r3, #0
 800d448:	daca      	bge.n	800d3e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01e      	beq.n	800d48e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	891b      	ldrh	r3, [r3, #8]
 800d454:	461a      	mov	r2, r3
 800d456:	4b14      	ldr	r3, [pc, #80]	; (800d4a8 <tcp_oos_insert_segment+0x10c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	441a      	add	r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd12      	ble.n	800d48e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	4b0d      	ldr	r3, [pc, #52]	; (800d4a8 <tcp_oos_insert_segment+0x10c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	b29b      	uxth	r3, r3
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685a      	ldr	r2, [r3, #4]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	891b      	ldrh	r3, [r3, #8]
 800d486:	4619      	mov	r1, r3
 800d488:	4610      	mov	r0, r2
 800d48a:	f7fc fe09 	bl	800a0a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	601a      	str	r2, [r3, #0]
}
 800d494:	bf00      	nop
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd90      	pop	{r4, r7, pc}
 800d49c:	080170d4 	.word	0x080170d4
 800d4a0:	08017394 	.word	0x08017394
 800d4a4:	08017120 	.word	0x08017120
 800d4a8:	2000d3f4 	.word	0x2000d3f4

0800d4ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d4ac:	b5b0      	push	{r4, r5, r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d4ba:	e03e      	b.n	800d53a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fc fffc 	bl	800a4c8 <pbuf_clen>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d4da:	8a7a      	ldrh	r2, [r7, #18]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d906      	bls.n	800d4ee <tcp_free_acked_segments+0x42>
 800d4e0:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <tcp_free_acked_segments+0xe0>)
 800d4e2:	f240 4257 	movw	r2, #1111	; 0x457
 800d4e6:	492a      	ldr	r1, [pc, #168]	; (800d590 <tcp_free_acked_segments+0xe4>)
 800d4e8:	482a      	ldr	r0, [pc, #168]	; (800d594 <tcp_free_acked_segments+0xe8>)
 800d4ea:	f007 fccd 	bl	8014e88 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d4f4:	8a7b      	ldrh	r3, [r7, #18]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	891a      	ldrh	r2, [r3, #8]
 800d504:	4b24      	ldr	r3, [pc, #144]	; (800d598 <tcp_free_acked_segments+0xec>)
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	4413      	add	r3, r2
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	4b22      	ldr	r3, [pc, #136]	; (800d598 <tcp_free_acked_segments+0xec>)
 800d50e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d510:	6978      	ldr	r0, [r7, #20]
 800d512:	f7fe f9da 	bl	800b8ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00c      	beq.n	800d53a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d109      	bne.n	800d53a <tcp_free_acked_segments+0x8e>
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d106      	bne.n	800d53a <tcp_free_acked_segments+0x8e>
 800d52c:	4b17      	ldr	r3, [pc, #92]	; (800d58c <tcp_free_acked_segments+0xe0>)
 800d52e:	f240 4261 	movw	r2, #1121	; 0x461
 800d532:	491a      	ldr	r1, [pc, #104]	; (800d59c <tcp_free_acked_segments+0xf0>)
 800d534:	4817      	ldr	r0, [pc, #92]	; (800d594 <tcp_free_acked_segments+0xe8>)
 800d536:	f007 fca7 	bl	8014e88 <iprintf>
  while (seg_list != NULL &&
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d020      	beq.n	800d582 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	f7fb fbaf 	bl	8008caa <lwip_htonl>
 800d54c:	4604      	mov	r4, r0
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	891b      	ldrh	r3, [r3, #8]
 800d552:	461d      	mov	r5, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	899b      	ldrh	r3, [r3, #12]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fb fb8f 	bl	8008c80 <lwip_htons>
 800d562:	4603      	mov	r3, r0
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 0303 	and.w	r3, r3, #3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <tcp_free_acked_segments+0xc6>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <tcp_free_acked_segments+0xc8>
 800d572:	2300      	movs	r3, #0
 800d574:	442b      	add	r3, r5
 800d576:	18e2      	adds	r2, r4, r3
 800d578:	4b09      	ldr	r3, [pc, #36]	; (800d5a0 <tcp_free_acked_segments+0xf4>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dd9c      	ble.n	800d4bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d582:	68bb      	ldr	r3, [r7, #8]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bdb0      	pop	{r4, r5, r7, pc}
 800d58c:	080170d4 	.word	0x080170d4
 800d590:	080173bc 	.word	0x080173bc
 800d594:	08017120 	.word	0x08017120
 800d598:	2000d3fc 	.word	0x2000d3fc
 800d59c:	080173e4 	.word	0x080173e4
 800d5a0:	2000d3f8 	.word	0x2000d3f8

0800d5a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d5a4:	b5b0      	push	{r4, r5, r7, lr}
 800d5a6:	b094      	sub	sp, #80	; 0x50
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <tcp_receive+0x20>
 800d5b6:	4b91      	ldr	r3, [pc, #580]	; (800d7fc <tcp_receive+0x258>)
 800d5b8:	f240 427b 	movw	r2, #1147	; 0x47b
 800d5bc:	4990      	ldr	r1, [pc, #576]	; (800d800 <tcp_receive+0x25c>)
 800d5be:	4891      	ldr	r0, [pc, #580]	; (800d804 <tcp_receive+0x260>)
 800d5c0:	f007 fc62 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	7d1b      	ldrb	r3, [r3, #20]
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d806      	bhi.n	800d5da <tcp_receive+0x36>
 800d5cc:	4b8b      	ldr	r3, [pc, #556]	; (800d7fc <tcp_receive+0x258>)
 800d5ce:	f240 427c 	movw	r2, #1148	; 0x47c
 800d5d2:	498d      	ldr	r1, [pc, #564]	; (800d808 <tcp_receive+0x264>)
 800d5d4:	488b      	ldr	r0, [pc, #556]	; (800d804 <tcp_receive+0x260>)
 800d5d6:	f007 fc57 	bl	8014e88 <iprintf>

  if (flags & TCP_ACK) {
 800d5da:	4b8c      	ldr	r3, [pc, #560]	; (800d80c <tcp_receive+0x268>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f003 0310 	and.w	r3, r3, #16
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f000 8264 	beq.w	800dab0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5f4:	4413      	add	r3, r2
 800d5f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5fc:	4b84      	ldr	r3, [pc, #528]	; (800d810 <tcp_receive+0x26c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	db1b      	blt.n	800d63e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d60a:	4b81      	ldr	r3, [pc, #516]	; (800d810 <tcp_receive+0x26c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d60e:	429a      	cmp	r2, r3
 800d610:	d106      	bne.n	800d620 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d616:	4b7f      	ldr	r3, [pc, #508]	; (800d814 <tcp_receive+0x270>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	db0e      	blt.n	800d63e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d624:	4b7b      	ldr	r3, [pc, #492]	; (800d814 <tcp_receive+0x270>)
 800d626:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d628:	429a      	cmp	r2, r3
 800d62a:	d125      	bne.n	800d678 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d62c:	4b7a      	ldr	r3, [pc, #488]	; (800d818 <tcp_receive+0x274>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	89db      	ldrh	r3, [r3, #14]
 800d632:	b29a      	uxth	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d91c      	bls.n	800d678 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d63e:	4b76      	ldr	r3, [pc, #472]	; (800d818 <tcp_receive+0x274>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	89db      	ldrh	r3, [r3, #14]
 800d644:	b29a      	uxth	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d658:	429a      	cmp	r2, r3
 800d65a:	d205      	bcs.n	800d668 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d668:	4b69      	ldr	r3, [pc, #420]	; (800d810 <tcp_receive+0x26c>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d670:	4b68      	ldr	r3, [pc, #416]	; (800d814 <tcp_receive+0x270>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d678:	4b66      	ldr	r3, [pc, #408]	; (800d814 <tcp_receive+0x270>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	dc58      	bgt.n	800d738 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d686:	4b65      	ldr	r3, [pc, #404]	; (800d81c <tcp_receive+0x278>)
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d14b      	bne.n	800d726 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d698:	4413      	add	r3, r2
 800d69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d142      	bne.n	800d726 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	db3d      	blt.n	800d726 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ae:	4b59      	ldr	r3, [pc, #356]	; (800d814 <tcp_receive+0x270>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d137      	bne.n	800d726 <tcp_receive+0x182>
              found_dupack = 1;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6c0:	2bff      	cmp	r3, #255	; 0xff
 800d6c2:	d007      	beq.n	800d6d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d6da:	2b03      	cmp	r3, #3
 800d6dc:	d91b      	bls.n	800d716 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6e8:	4413      	add	r3, r2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d30a      	bcc.n	800d70c <tcp_receive+0x168>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d700:	4413      	add	r3, r2
 800d702:	b29a      	uxth	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d70a:	e004      	b.n	800d716 <tcp_receive+0x172>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d712:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d902      	bls.n	800d726 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f001 feed 	bl	800f500 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f040 8161 	bne.w	800d9f0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d736:	e15b      	b.n	800d9f0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d738:	4b36      	ldr	r3, [pc, #216]	; (800d814 <tcp_receive+0x270>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	3b01      	subs	r3, #1
 800d744:	2b00      	cmp	r3, #0
 800d746:	f2c0 814e 	blt.w	800d9e6 <tcp_receive+0x442>
 800d74a:	4b32      	ldr	r3, [pc, #200]	; (800d814 <tcp_receive+0x270>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	f300 8146 	bgt.w	800d9e6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	8b5b      	ldrh	r3, [r3, #26]
 800d75e:	f003 0304 	and.w	r3, r3, #4
 800d762:	2b00      	cmp	r3, #0
 800d764:	d010      	beq.n	800d788 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	8b5b      	ldrh	r3, [r3, #26]
 800d76a:	f023 0304 	bic.w	r3, r3, #4
 800d76e:	b29a      	uxth	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d796:	10db      	asrs	r3, r3, #3
 800d798:	b21b      	sxth	r3, r3
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	b21a      	sxth	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d7b0:	4b18      	ldr	r3, [pc, #96]	; (800d814 <tcp_receive+0x270>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d7c8:	4b12      	ldr	r3, [pc, #72]	; (800d814 <tcp_receive+0x270>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7d1b      	ldrb	r3, [r3, #20]
 800d7d4:	2b03      	cmp	r3, #3
 800d7d6:	f240 8097 	bls.w	800d908 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d245      	bcs.n	800d876 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	8b5b      	ldrh	r3, [r3, #26]
 800d7ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d014      	beq.n	800d820 <tcp_receive+0x27c>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e013      	b.n	800d822 <tcp_receive+0x27e>
 800d7fa:	bf00      	nop
 800d7fc:	080170d4 	.word	0x080170d4
 800d800:	08017404 	.word	0x08017404
 800d804:	08017120 	.word	0x08017120
 800d808:	08017420 	.word	0x08017420
 800d80c:	2000d400 	.word	0x2000d400
 800d810:	2000d3f4 	.word	0x2000d3f4
 800d814:	2000d3f8 	.word	0x2000d3f8
 800d818:	2000d3e4 	.word	0x2000d3e4
 800d81c:	2000d3fe 	.word	0x2000d3fe
 800d820:	2302      	movs	r3, #2
 800d822:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d830:	fb12 f303 	smulbb	r3, r2, r3
 800d834:	b29b      	uxth	r3, r3
 800d836:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d838:	4293      	cmp	r3, r2
 800d83a:	bf28      	it	cs
 800d83c:	4613      	movcs	r3, r2
 800d83e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d848:	4413      	add	r3, r2
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d852:	429a      	cmp	r2, r3
 800d854:	d309      	bcc.n	800d86a <tcp_receive+0x2c6>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d85c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d85e:	4413      	add	r3, r2
 800d860:	b29a      	uxth	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d868:	e04e      	b.n	800d908 <tcp_receive+0x364>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d870:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d874:	e048      	b.n	800d908 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d87c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d87e:	4413      	add	r3, r2
 800d880:	b29a      	uxth	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d888:	429a      	cmp	r2, r3
 800d88a:	d309      	bcc.n	800d8a0 <tcp_receive+0x2fc>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d894:	4413      	add	r3, r2
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d89e:	e004      	b.n	800d8aa <tcp_receive+0x306>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d326      	bcc.n	800d908 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8da:	4413      	add	r3, r2
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d30a      	bcc.n	800d8fe <tcp_receive+0x35a>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8f2:	4413      	add	r3, r2
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8fc:	e004      	b.n	800d908 <tcp_receive+0x364>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d904:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d910:	4a98      	ldr	r2, [pc, #608]	; (800db74 <tcp_receive+0x5d0>)
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff fdca 	bl	800d4ac <tcp_free_acked_segments>
 800d918:	4602      	mov	r2, r0
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d926:	4a94      	ldr	r2, [pc, #592]	; (800db78 <tcp_receive+0x5d4>)
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fdbf 	bl	800d4ac <tcp_free_acked_segments>
 800d92e:	4602      	mov	r2, r0
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d942:	861a      	strh	r2, [r3, #48]	; 0x30
 800d944:	e002      	b.n	800d94c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d103      	bne.n	800d962 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d968:	4b84      	ldr	r3, [pc, #528]	; (800db7c <tcp_receive+0x5d8>)
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	4413      	add	r3, r2
 800d96e:	b29a      	uxth	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8b5b      	ldrh	r3, [r3, #26]
 800d97a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d035      	beq.n	800d9ee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d986:	2b00      	cmp	r3, #0
 800d988:	d118      	bne.n	800d9bc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00c      	beq.n	800d9ac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fb f983 	bl	8008caa <lwip_htonl>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	dc20      	bgt.n	800d9ee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	8b5b      	ldrh	r3, [r3, #26]
 800d9b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9ba:	e018      	b.n	800d9ee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fb f96e 	bl	8008caa <lwip_htonl>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	1ae3      	subs	r3, r4, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	dc0b      	bgt.n	800d9ee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8b5b      	ldrh	r3, [r3, #26]
 800d9da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9e4:	e003      	b.n	800d9ee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f001 ff76 	bl	800f8d8 <tcp_send_empty_ack>
 800d9ec:	e000      	b.n	800d9f0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d9ee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d05b      	beq.n	800dab0 <tcp_receive+0x50c>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9fc:	4b60      	ldr	r3, [pc, #384]	; (800db80 <tcp_receive+0x5dc>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	da54      	bge.n	800dab0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800da06:	4b5f      	ldr	r3, [pc, #380]	; (800db84 <tcp_receive+0x5e0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da10:	b29b      	uxth	r3, r3
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	b29b      	uxth	r3, r3
 800da16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800da1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da24:	10db      	asrs	r3, r3, #3
 800da26:	b21b      	sxth	r3, r3
 800da28:	b29b      	uxth	r3, r3
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da38:	b29a      	uxth	r2, r3
 800da3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da3e:	4413      	add	r3, r2
 800da40:	b29b      	uxth	r3, r3
 800da42:	b21a      	sxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800da48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	da05      	bge.n	800da5c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800da50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da54:	425b      	negs	r3, r3
 800da56:	b29b      	uxth	r3, r3
 800da58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800da5c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da66:	109b      	asrs	r3, r3, #2
 800da68:	b21b      	sxth	r3, r3
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da80:	4413      	add	r3, r2
 800da82:	b29b      	uxth	r3, r3
 800da84:	b21a      	sxth	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da90:	10db      	asrs	r3, r3, #3
 800da92:	b21b      	sxth	r3, r3
 800da94:	b29a      	uxth	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	4413      	add	r3, r2
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	b21a      	sxth	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dab0:	4b35      	ldr	r3, [pc, #212]	; (800db88 <tcp_receive+0x5e4>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f000 84e2 	beq.w	800e47e <tcp_receive+0xeda>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7d1b      	ldrb	r3, [r3, #20]
 800dabe:	2b06      	cmp	r3, #6
 800dac0:	f200 84dd 	bhi.w	800e47e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dac8:	4b30      	ldr	r3, [pc, #192]	; (800db8c <tcp_receive+0x5e8>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	3b01      	subs	r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f2c0 808f 	blt.w	800dbf4 <tcp_receive+0x650>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dada:	4b2b      	ldr	r3, [pc, #172]	; (800db88 <tcp_receive+0x5e4>)
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	4619      	mov	r1, r3
 800dae0:	4b2a      	ldr	r3, [pc, #168]	; (800db8c <tcp_receive+0x5e8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	440b      	add	r3, r1
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	3301      	adds	r3, #1
 800daea:	2b00      	cmp	r3, #0
 800daec:	f300 8082 	bgt.w	800dbf4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800daf0:	4b27      	ldr	r3, [pc, #156]	; (800db90 <tcp_receive+0x5ec>)
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dafa:	4b24      	ldr	r3, [pc, #144]	; (800db8c <tcp_receive+0x5e8>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800db02:	4b23      	ldr	r3, [pc, #140]	; (800db90 <tcp_receive+0x5ec>)
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <tcp_receive+0x574>
 800db0a:	4b22      	ldr	r3, [pc, #136]	; (800db94 <tcp_receive+0x5f0>)
 800db0c:	f240 5294 	movw	r2, #1428	; 0x594
 800db10:	4921      	ldr	r1, [pc, #132]	; (800db98 <tcp_receive+0x5f4>)
 800db12:	4822      	ldr	r0, [pc, #136]	; (800db9c <tcp_receive+0x5f8>)
 800db14:	f007 f9b8 	bl	8014e88 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db1e:	4293      	cmp	r3, r2
 800db20:	d906      	bls.n	800db30 <tcp_receive+0x58c>
 800db22:	4b1c      	ldr	r3, [pc, #112]	; (800db94 <tcp_receive+0x5f0>)
 800db24:	f240 5295 	movw	r2, #1429	; 0x595
 800db28:	491d      	ldr	r1, [pc, #116]	; (800dba0 <tcp_receive+0x5fc>)
 800db2a:	481c      	ldr	r0, [pc, #112]	; (800db9c <tcp_receive+0x5f8>)
 800db2c:	f007 f9ac 	bl	8014e88 <iprintf>
      off = (u16_t)off32;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800db36:	4b16      	ldr	r3, [pc, #88]	; (800db90 <tcp_receive+0x5ec>)
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	891b      	ldrh	r3, [r3, #8]
 800db3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800db40:	429a      	cmp	r2, r3
 800db42:	d906      	bls.n	800db52 <tcp_receive+0x5ae>
 800db44:	4b13      	ldr	r3, [pc, #76]	; (800db94 <tcp_receive+0x5f0>)
 800db46:	f240 5297 	movw	r2, #1431	; 0x597
 800db4a:	4916      	ldr	r1, [pc, #88]	; (800dba4 <tcp_receive+0x600>)
 800db4c:	4813      	ldr	r0, [pc, #76]	; (800db9c <tcp_receive+0x5f8>)
 800db4e:	f007 f99b 	bl	8014e88 <iprintf>
      inseg.len -= off;
 800db52:	4b0f      	ldr	r3, [pc, #60]	; (800db90 <tcp_receive+0x5ec>)
 800db54:	891a      	ldrh	r2, [r3, #8]
 800db56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <tcp_receive+0x5ec>)
 800db60:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800db62:	4b0b      	ldr	r3, [pc, #44]	; (800db90 <tcp_receive+0x5ec>)
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	891a      	ldrh	r2, [r3, #8]
 800db68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800db70:	e02a      	b.n	800dbc8 <tcp_receive+0x624>
 800db72:	bf00      	nop
 800db74:	0801743c 	.word	0x0801743c
 800db78:	08017444 	.word	0x08017444
 800db7c:	2000d3fc 	.word	0x2000d3fc
 800db80:	2000d3f8 	.word	0x2000d3f8
 800db84:	2000d3bc 	.word	0x2000d3bc
 800db88:	2000d3fe 	.word	0x2000d3fe
 800db8c:	2000d3f4 	.word	0x2000d3f4
 800db90:	2000d3d4 	.word	0x2000d3d4
 800db94:	080170d4 	.word	0x080170d4
 800db98:	0801744c 	.word	0x0801744c
 800db9c:	08017120 	.word	0x08017120
 800dba0:	0801745c 	.word	0x0801745c
 800dba4:	0801746c 	.word	0x0801746c
        off -= p->len;
 800dba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbaa:	895b      	ldrh	r3, [r3, #10]
 800dbac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dbba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbca:	895b      	ldrh	r3, [r3, #10]
 800dbcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d8e9      	bhi.n	800dba8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dbd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dbd8:	4619      	mov	r1, r3
 800dbda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dbdc:	f7fc fb60 	bl	800a2a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe4:	4a91      	ldr	r2, [pc, #580]	; (800de2c <tcp_receive+0x888>)
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	4b91      	ldr	r3, [pc, #580]	; (800de30 <tcp_receive+0x88c>)
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	4a8f      	ldr	r2, [pc, #572]	; (800de2c <tcp_receive+0x888>)
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dbf2:	e00d      	b.n	800dc10 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dbf4:	4b8d      	ldr	r3, [pc, #564]	; (800de2c <tcp_receive+0x888>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da06      	bge.n	800dc10 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	8b5b      	ldrh	r3, [r3, #26]
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc10:	4b86      	ldr	r3, [pc, #536]	; (800de2c <tcp_receive+0x888>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f2c0 842a 	blt.w	800e474 <tcp_receive+0xed0>
 800dc20:	4b82      	ldr	r3, [pc, #520]	; (800de2c <tcp_receive+0x888>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc2c:	440b      	add	r3, r1
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	3301      	adds	r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f300 841e 	bgt.w	800e474 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc3c:	4b7b      	ldr	r3, [pc, #492]	; (800de2c <tcp_receive+0x888>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	f040 829a 	bne.w	800e17a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dc46:	4b7a      	ldr	r3, [pc, #488]	; (800de30 <tcp_receive+0x88c>)
 800dc48:	891c      	ldrh	r4, [r3, #8]
 800dc4a:	4b79      	ldr	r3, [pc, #484]	; (800de30 <tcp_receive+0x88c>)
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	899b      	ldrh	r3, [r3, #12]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fb f814 	bl	8008c80 <lwip_htons>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 0303 	and.w	r3, r3, #3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <tcp_receive+0x6c4>
 800dc64:	2301      	movs	r3, #1
 800dc66:	e000      	b.n	800dc6a <tcp_receive+0x6c6>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4423      	add	r3, r4
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	4b71      	ldr	r3, [pc, #452]	; (800de34 <tcp_receive+0x890>)
 800dc70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc76:	4b6f      	ldr	r3, [pc, #444]	; (800de34 <tcp_receive+0x890>)
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d275      	bcs.n	800dd6a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc7e:	4b6c      	ldr	r3, [pc, #432]	; (800de30 <tcp_receive+0x88c>)
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	899b      	ldrh	r3, [r3, #12]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fa fffa 	bl	8008c80 <lwip_htons>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01f      	beq.n	800dcd8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dc98:	4b65      	ldr	r3, [pc, #404]	; (800de30 <tcp_receive+0x88c>)
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	899b      	ldrh	r3, [r3, #12]
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	b21b      	sxth	r3, r3
 800dca2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dca6:	b21c      	sxth	r4, r3
 800dca8:	4b61      	ldr	r3, [pc, #388]	; (800de30 <tcp_receive+0x88c>)
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	899b      	ldrh	r3, [r3, #12]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fa ffe5 	bl	8008c80 <lwip_htons>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fa ffdc 	bl	8008c80 <lwip_htons>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	b21b      	sxth	r3, r3
 800dccc:	4323      	orrs	r3, r4
 800dcce:	b21a      	sxth	r2, r3
 800dcd0:	4b57      	ldr	r3, [pc, #348]	; (800de30 <tcp_receive+0x88c>)
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	b292      	uxth	r2, r2
 800dcd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dcdc:	4b54      	ldr	r3, [pc, #336]	; (800de30 <tcp_receive+0x88c>)
 800dcde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dce0:	4b53      	ldr	r3, [pc, #332]	; (800de30 <tcp_receive+0x88c>)
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	899b      	ldrh	r3, [r3, #12]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fa ffc9 	bl	8008c80 <lwip_htons>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	f003 0302 	and.w	r3, r3, #2
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d005      	beq.n	800dd06 <tcp_receive+0x762>
            inseg.len -= 1;
 800dcfa:	4b4d      	ldr	r3, [pc, #308]	; (800de30 <tcp_receive+0x88c>)
 800dcfc:	891b      	ldrh	r3, [r3, #8]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	4b4b      	ldr	r3, [pc, #300]	; (800de30 <tcp_receive+0x88c>)
 800dd04:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dd06:	4b4a      	ldr	r3, [pc, #296]	; (800de30 <tcp_receive+0x88c>)
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	4a49      	ldr	r2, [pc, #292]	; (800de30 <tcp_receive+0x88c>)
 800dd0c:	8912      	ldrh	r2, [r2, #8]
 800dd0e:	4611      	mov	r1, r2
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fc f9c5 	bl	800a0a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dd16:	4b46      	ldr	r3, [pc, #280]	; (800de30 <tcp_receive+0x88c>)
 800dd18:	891c      	ldrh	r4, [r3, #8]
 800dd1a:	4b45      	ldr	r3, [pc, #276]	; (800de30 <tcp_receive+0x88c>)
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	899b      	ldrh	r3, [r3, #12]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fa ffac 	bl	8008c80 <lwip_htons>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f003 0303 	and.w	r3, r3, #3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <tcp_receive+0x794>
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <tcp_receive+0x796>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	4423      	add	r3, r4
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	4b3d      	ldr	r3, [pc, #244]	; (800de34 <tcp_receive+0x890>)
 800dd40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd42:	4b3c      	ldr	r3, [pc, #240]	; (800de34 <tcp_receive+0x890>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	4b38      	ldr	r3, [pc, #224]	; (800de2c <tcp_receive+0x888>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	441a      	add	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd56:	440b      	add	r3, r1
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d006      	beq.n	800dd6a <tcp_receive+0x7c6>
 800dd5c:	4b36      	ldr	r3, [pc, #216]	; (800de38 <tcp_receive+0x894>)
 800dd5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800dd62:	4936      	ldr	r1, [pc, #216]	; (800de3c <tcp_receive+0x898>)
 800dd64:	4836      	ldr	r0, [pc, #216]	; (800de40 <tcp_receive+0x89c>)
 800dd66:	f007 f88f 	bl	8014e88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80e7 	beq.w	800df42 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd74:	4b2e      	ldr	r3, [pc, #184]	; (800de30 <tcp_receive+0x88c>)
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fa ff7f 	bl	8008c80 <lwip_htons>
 800dd82:	4603      	mov	r3, r0
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d010      	beq.n	800ddb0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800dd8e:	e00a      	b.n	800dda6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7fd fd92 	bl	800b8ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1f0      	bne.n	800dd90 <tcp_receive+0x7ec>
 800ddae:	e0c8      	b.n	800df42 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ddb6:	e052      	b.n	800de5e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ddb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	899b      	ldrh	r3, [r3, #12]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fa ff5d 	bl	8008c80 <lwip_htons>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d03d      	beq.n	800de4e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ddd2:	4b17      	ldr	r3, [pc, #92]	; (800de30 <tcp_receive+0x88c>)
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	899b      	ldrh	r3, [r3, #12]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fa ff50 	bl	8008c80 <lwip_htons>
 800dde0:	4603      	mov	r3, r0
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d130      	bne.n	800de4e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ddec:	4b10      	ldr	r3, [pc, #64]	; (800de30 <tcp_receive+0x88c>)
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	899b      	ldrh	r3, [r3, #12]
 800ddf2:	b29c      	uxth	r4, r3
 800ddf4:	2001      	movs	r0, #1
 800ddf6:	f7fa ff43 	bl	8008c80 <lwip_htons>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <tcp_receive+0x88c>)
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	4322      	orrs	r2, r4
 800de04:	b292      	uxth	r2, r2
 800de06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800de08:	4b09      	ldr	r3, [pc, #36]	; (800de30 <tcp_receive+0x88c>)
 800de0a:	891c      	ldrh	r4, [r3, #8]
 800de0c:	4b08      	ldr	r3, [pc, #32]	; (800de30 <tcp_receive+0x88c>)
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	899b      	ldrh	r3, [r3, #12]
 800de12:	b29b      	uxth	r3, r3
 800de14:	4618      	mov	r0, r3
 800de16:	f7fa ff33 	bl	8008c80 <lwip_htons>
 800de1a:	4603      	mov	r3, r0
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0303 	and.w	r3, r3, #3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00e      	beq.n	800de44 <tcp_receive+0x8a0>
 800de26:	2301      	movs	r3, #1
 800de28:	e00d      	b.n	800de46 <tcp_receive+0x8a2>
 800de2a:	bf00      	nop
 800de2c:	2000d3f4 	.word	0x2000d3f4
 800de30:	2000d3d4 	.word	0x2000d3d4
 800de34:	2000d3fe 	.word	0x2000d3fe
 800de38:	080170d4 	.word	0x080170d4
 800de3c:	0801747c 	.word	0x0801747c
 800de40:	08017120 	.word	0x08017120
 800de44:	2300      	movs	r3, #0
 800de46:	4423      	add	r3, r4
 800de48:	b29a      	uxth	r2, r3
 800de4a:	4b98      	ldr	r3, [pc, #608]	; (800e0ac <tcp_receive+0xb08>)
 800de4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800de4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de50:	613b      	str	r3, [r7, #16]
              next = next->next;
 800de52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800de58:	6938      	ldr	r0, [r7, #16]
 800de5a:	f7fd fd36 	bl	800b8ca <tcp_seg_free>
            while (next &&
 800de5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00e      	beq.n	800de82 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800de64:	4b91      	ldr	r3, [pc, #580]	; (800e0ac <tcp_receive+0xb08>)
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	461a      	mov	r2, r3
 800de6a:	4b91      	ldr	r3, [pc, #580]	; (800e0b0 <tcp_receive+0xb0c>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	441a      	add	r2, r3
 800de70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de78:	8909      	ldrh	r1, [r1, #8]
 800de7a:	440b      	add	r3, r1
 800de7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800de7e:	2b00      	cmp	r3, #0
 800de80:	da9a      	bge.n	800ddb8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800de82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d059      	beq.n	800df3c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800de88:	4b88      	ldr	r3, [pc, #544]	; (800e0ac <tcp_receive+0xb08>)
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	461a      	mov	r2, r3
 800de8e:	4b88      	ldr	r3, [pc, #544]	; (800e0b0 <tcp_receive+0xb0c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	441a      	add	r2, r3
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	dd4d      	ble.n	800df3c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800dea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	4b81      	ldr	r3, [pc, #516]	; (800e0b0 <tcp_receive+0xb0c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	b29b      	uxth	r3, r3
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	4b80      	ldr	r3, [pc, #512]	; (800e0b4 <tcp_receive+0xb10>)
 800deb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800deb6:	4b7f      	ldr	r3, [pc, #508]	; (800e0b4 <tcp_receive+0xb10>)
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	899b      	ldrh	r3, [r3, #12]
 800debc:	b29b      	uxth	r3, r3
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fa fede 	bl	8008c80 <lwip_htons>
 800dec4:	4603      	mov	r3, r0
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d005      	beq.n	800dedc <tcp_receive+0x938>
                inseg.len -= 1;
 800ded0:	4b78      	ldr	r3, [pc, #480]	; (800e0b4 <tcp_receive+0xb10>)
 800ded2:	891b      	ldrh	r3, [r3, #8]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	4b76      	ldr	r3, [pc, #472]	; (800e0b4 <tcp_receive+0xb10>)
 800deda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dedc:	4b75      	ldr	r3, [pc, #468]	; (800e0b4 <tcp_receive+0xb10>)
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4a74      	ldr	r2, [pc, #464]	; (800e0b4 <tcp_receive+0xb10>)
 800dee2:	8912      	ldrh	r2, [r2, #8]
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fc f8da 	bl	800a0a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800deec:	4b71      	ldr	r3, [pc, #452]	; (800e0b4 <tcp_receive+0xb10>)
 800deee:	891c      	ldrh	r4, [r3, #8]
 800def0:	4b70      	ldr	r3, [pc, #448]	; (800e0b4 <tcp_receive+0xb10>)
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	899b      	ldrh	r3, [r3, #12]
 800def6:	b29b      	uxth	r3, r3
 800def8:	4618      	mov	r0, r3
 800defa:	f7fa fec1 	bl	8008c80 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <tcp_receive+0x96a>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e000      	b.n	800df10 <tcp_receive+0x96c>
 800df0e:	2300      	movs	r3, #0
 800df10:	4423      	add	r3, r4
 800df12:	b29a      	uxth	r2, r3
 800df14:	4b65      	ldr	r3, [pc, #404]	; (800e0ac <tcp_receive+0xb08>)
 800df16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800df18:	4b64      	ldr	r3, [pc, #400]	; (800e0ac <tcp_receive+0xb08>)
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	461a      	mov	r2, r3
 800df1e:	4b64      	ldr	r3, [pc, #400]	; (800e0b0 <tcp_receive+0xb0c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	441a      	add	r2, r3
 800df24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d006      	beq.n	800df3c <tcp_receive+0x998>
 800df2e:	4b62      	ldr	r3, [pc, #392]	; (800e0b8 <tcp_receive+0xb14>)
 800df30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800df34:	4961      	ldr	r1, [pc, #388]	; (800e0bc <tcp_receive+0xb18>)
 800df36:	4862      	ldr	r0, [pc, #392]	; (800e0c0 <tcp_receive+0xb1c>)
 800df38:	f006 ffa6 	bl	8014e88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800df42:	4b5a      	ldr	r3, [pc, #360]	; (800e0ac <tcp_receive+0xb08>)
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	461a      	mov	r2, r3
 800df48:	4b59      	ldr	r3, [pc, #356]	; (800e0b0 <tcp_receive+0xb0c>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	441a      	add	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df56:	4b55      	ldr	r3, [pc, #340]	; (800e0ac <tcp_receive+0xb08>)
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d206      	bcs.n	800df6c <tcp_receive+0x9c8>
 800df5e:	4b56      	ldr	r3, [pc, #344]	; (800e0b8 <tcp_receive+0xb14>)
 800df60:	f240 6207 	movw	r2, #1543	; 0x607
 800df64:	4957      	ldr	r1, [pc, #348]	; (800e0c4 <tcp_receive+0xb20>)
 800df66:	4856      	ldr	r0, [pc, #344]	; (800e0c0 <tcp_receive+0xb1c>)
 800df68:	f006 ff8e 	bl	8014e88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df70:	4b4e      	ldr	r3, [pc, #312]	; (800e0ac <tcp_receive+0xb08>)
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7fc ffc5 	bl	800af0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800df82:	4b4c      	ldr	r3, [pc, #304]	; (800e0b4 <tcp_receive+0xb10>)
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	891b      	ldrh	r3, [r3, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d006      	beq.n	800df9a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800df8c:	4b49      	ldr	r3, [pc, #292]	; (800e0b4 <tcp_receive+0xb10>)
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	4a4d      	ldr	r2, [pc, #308]	; (800e0c8 <tcp_receive+0xb24>)
 800df92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800df94:	4b47      	ldr	r3, [pc, #284]	; (800e0b4 <tcp_receive+0xb10>)
 800df96:	2200      	movs	r2, #0
 800df98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df9a:	4b46      	ldr	r3, [pc, #280]	; (800e0b4 <tcp_receive+0xb10>)
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	899b      	ldrh	r3, [r3, #12]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fa fe6c 	bl	8008c80 <lwip_htons>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 80b8 	beq.w	800e126 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dfb6:	4b45      	ldr	r3, [pc, #276]	; (800e0cc <tcp_receive+0xb28>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	f043 0320 	orr.w	r3, r3, #32
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	4b42      	ldr	r3, [pc, #264]	; (800e0cc <tcp_receive+0xb28>)
 800dfc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dfc4:	e0af      	b.n	800e126 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	4a36      	ldr	r2, [pc, #216]	; (800e0b0 <tcp_receive+0xb0c>)
 800dfd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	891b      	ldrh	r3, [r3, #8]
 800dfdc:	461c      	mov	r4, r3
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	899b      	ldrh	r3, [r3, #12]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fa fe4a 	bl	8008c80 <lwip_htons>
 800dfec:	4603      	mov	r3, r0
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	f003 0303 	and.w	r3, r3, #3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <tcp_receive+0xa58>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <tcp_receive+0xa5a>
 800dffc:	2300      	movs	r3, #0
 800dffe:	191a      	adds	r2, r3, r4
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	441a      	add	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e00e:	461c      	mov	r4, r3
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	891b      	ldrh	r3, [r3, #8]
 800e014:	461d      	mov	r5, r3
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	899b      	ldrh	r3, [r3, #12]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fa fe2e 	bl	8008c80 <lwip_htons>
 800e024:	4603      	mov	r3, r0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0303 	and.w	r3, r3, #3
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <tcp_receive+0xa90>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <tcp_receive+0xa92>
 800e034:	2300      	movs	r3, #0
 800e036:	442b      	add	r3, r5
 800e038:	429c      	cmp	r4, r3
 800e03a:	d206      	bcs.n	800e04a <tcp_receive+0xaa6>
 800e03c:	4b1e      	ldr	r3, [pc, #120]	; (800e0b8 <tcp_receive+0xb14>)
 800e03e:	f240 622b 	movw	r2, #1579	; 0x62b
 800e042:	4923      	ldr	r1, [pc, #140]	; (800e0d0 <tcp_receive+0xb2c>)
 800e044:	481e      	ldr	r0, [pc, #120]	; (800e0c0 <tcp_receive+0xb1c>)
 800e046:	f006 ff1f 	bl	8014e88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	891b      	ldrh	r3, [r3, #8]
 800e04e:	461c      	mov	r4, r3
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	b29b      	uxth	r3, r3
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fa fe11 	bl	8008c80 <lwip_htons>
 800e05e:	4603      	mov	r3, r0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0303 	and.w	r3, r3, #3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <tcp_receive+0xaca>
 800e06a:	2301      	movs	r3, #1
 800e06c:	e000      	b.n	800e070 <tcp_receive+0xacc>
 800e06e:	2300      	movs	r3, #0
 800e070:	1919      	adds	r1, r3, r4
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e076:	b28b      	uxth	r3, r1
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7fc ff43 	bl	800af0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	891b      	ldrh	r3, [r3, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d028      	beq.n	800e0e2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e090:	4b0d      	ldr	r3, [pc, #52]	; (800e0c8 <tcp_receive+0xb24>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d01d      	beq.n	800e0d4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e098:	4b0b      	ldr	r3, [pc, #44]	; (800e0c8 <tcp_receive+0xb24>)
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f7fc fa50 	bl	800a548 <pbuf_cat>
 800e0a8:	e018      	b.n	800e0dc <tcp_receive+0xb38>
 800e0aa:	bf00      	nop
 800e0ac:	2000d3fe 	.word	0x2000d3fe
 800e0b0:	2000d3f4 	.word	0x2000d3f4
 800e0b4:	2000d3d4 	.word	0x2000d3d4
 800e0b8:	080170d4 	.word	0x080170d4
 800e0bc:	080174b4 	.word	0x080174b4
 800e0c0:	08017120 	.word	0x08017120
 800e0c4:	080174f0 	.word	0x080174f0
 800e0c8:	2000d404 	.word	0x2000d404
 800e0cc:	2000d401 	.word	0x2000d401
 800e0d0:	08017510 	.word	0x08017510
            } else {
              recv_data = cseg->p;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	4a70      	ldr	r2, [pc, #448]	; (800e29c <tcp_receive+0xcf8>)
 800e0da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	899b      	ldrh	r3, [r3, #12]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fa fdc8 	bl	8008c80 <lwip_htons>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00d      	beq.n	800e118 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e0fc:	4b68      	ldr	r3, [pc, #416]	; (800e2a0 <tcp_receive+0xcfc>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	f043 0320 	orr.w	r3, r3, #32
 800e104:	b2da      	uxtb	r2, r3
 800e106:	4b66      	ldr	r3, [pc, #408]	; (800e2a0 <tcp_receive+0xcfc>)
 800e108:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	7d1b      	ldrb	r3, [r3, #20]
 800e10e:	2b04      	cmp	r3, #4
 800e110:	d102      	bne.n	800e118 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2207      	movs	r2, #7
 800e116:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e120:	68b8      	ldr	r0, [r7, #8]
 800e122:	f7fd fbd2 	bl	800b8ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d008      	beq.n	800e140 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	685a      	ldr	r2, [r3, #4]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e13a:	429a      	cmp	r2, r3
 800e13c:	f43f af43 	beq.w	800dfc6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	8b5b      	ldrh	r3, [r3, #26]
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00e      	beq.n	800e16a <tcp_receive+0xbc6>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8b5b      	ldrh	r3, [r3, #26]
 800e150:	f023 0301 	bic.w	r3, r3, #1
 800e154:	b29a      	uxth	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	835a      	strh	r2, [r3, #26]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f043 0302 	orr.w	r3, r3, #2
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e168:	e188      	b.n	800e47c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	8b5b      	ldrh	r3, [r3, #26]
 800e16e:	f043 0301 	orr.w	r3, r3, #1
 800e172:	b29a      	uxth	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e178:	e180      	b.n	800e47c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e182:	4848      	ldr	r0, [pc, #288]	; (800e2a4 <tcp_receive+0xd00>)
 800e184:	f7fd fbba 	bl	800b8fc <tcp_seg_copy>
 800e188:	4602      	mov	r2, r0
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	675a      	str	r2, [r3, #116]	; 0x74
 800e18e:	e16d      	b.n	800e46c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e190:	2300      	movs	r3, #0
 800e192:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e198:	63bb      	str	r3, [r7, #56]	; 0x38
 800e19a:	e157      	b.n	800e44c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	4b41      	ldr	r3, [pc, #260]	; (800e2a8 <tcp_receive+0xd04>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d11d      	bne.n	800e1e6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e1aa:	4b3e      	ldr	r3, [pc, #248]	; (800e2a4 <tcp_receive+0xd00>)
 800e1ac:	891a      	ldrh	r2, [r3, #8]
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	891b      	ldrh	r3, [r3, #8]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	f240 814f 	bls.w	800e456 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e1b8:	483a      	ldr	r0, [pc, #232]	; (800e2a4 <tcp_receive+0xd00>)
 800e1ba:	f7fd fb9f 	bl	800b8fc <tcp_seg_copy>
 800e1be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f000 8149 	beq.w	800e45a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d0:	697a      	ldr	r2, [r7, #20]
 800e1d2:	601a      	str	r2, [r3, #0]
 800e1d4:	e002      	b.n	800e1dc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	697a      	ldr	r2, [r7, #20]
 800e1da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e1dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1de:	6978      	ldr	r0, [r7, #20]
 800e1e0:	f7ff f8dc 	bl	800d39c <tcp_oos_insert_segment>
                }
                break;
 800e1e4:	e139      	b.n	800e45a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d117      	bne.n	800e21c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e1ec:	4b2e      	ldr	r3, [pc, #184]	; (800e2a8 <tcp_receive+0xd04>)
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	da57      	bge.n	800e2ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e1fc:	4829      	ldr	r0, [pc, #164]	; (800e2a4 <tcp_receive+0xd00>)
 800e1fe:	f7fd fb7d 	bl	800b8fc <tcp_seg_copy>
 800e202:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 8129 	beq.w	800e45e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	69ba      	ldr	r2, [r7, #24]
 800e210:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e214:	69b8      	ldr	r0, [r7, #24]
 800e216:	f7ff f8c1 	bl	800d39c <tcp_oos_insert_segment>
                  }
                  break;
 800e21a:	e120      	b.n	800e45e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e21c:	4b22      	ldr	r3, [pc, #136]	; (800e2a8 <tcp_receive+0xd04>)
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	3b01      	subs	r3, #1
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	db3e      	blt.n	800e2ac <tcp_receive+0xd08>
 800e22e:	4b1e      	ldr	r3, [pc, #120]	; (800e2a8 <tcp_receive+0xd04>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	3301      	adds	r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc35      	bgt.n	800e2ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e240:	4818      	ldr	r0, [pc, #96]	; (800e2a4 <tcp_receive+0xd00>)
 800e242:	f7fd fb5b 	bl	800b8fc <tcp_seg_copy>
 800e246:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f000 8109 	beq.w	800e462 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e258:	8912      	ldrh	r2, [r2, #8]
 800e25a:	441a      	add	r2, r3
 800e25c:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <tcp_receive+0xd04>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	dd12      	ble.n	800e28c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e266:	4b10      	ldr	r3, [pc, #64]	; (800e2a8 <tcp_receive+0xd04>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	b29b      	uxth	r3, r3
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	b29a      	uxth	r2, r3
 800e278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27e:	685a      	ldr	r2, [r3, #4]
 800e280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e282:	891b      	ldrh	r3, [r3, #8]
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f7fb ff0a 	bl	800a0a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28e:	69fa      	ldr	r2, [r7, #28]
 800e290:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e294:	69f8      	ldr	r0, [r7, #28]
 800e296:	f7ff f881 	bl	800d39c <tcp_oos_insert_segment>
                  }
                  break;
 800e29a:	e0e2      	b.n	800e462 <tcp_receive+0xebe>
 800e29c:	2000d404 	.word	0x2000d404
 800e2a0:	2000d401 	.word	0x2000d401
 800e2a4:	2000d3d4 	.word	0x2000d3d4
 800e2a8:	2000d3f4 	.word	0x2000d3f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f040 80c6 	bne.w	800e446 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e2ba:	4b80      	ldr	r3, [pc, #512]	; (800e4bc <tcp_receive+0xf18>)
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f340 80bd 	ble.w	800e446 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	899b      	ldrh	r3, [r3, #12]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fa fcd3 	bl	8008c80 <lwip_htons>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f040 80bf 	bne.w	800e466 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e2e8:	4875      	ldr	r0, [pc, #468]	; (800e4c0 <tcp_receive+0xf1c>)
 800e2ea:	f7fd fb07 	bl	800b8fc <tcp_seg_copy>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 80b6 	beq.w	800e46a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e300:	68db      	ldr	r3, [r3, #12]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e306:	8912      	ldrh	r2, [r2, #8]
 800e308:	441a      	add	r2, r3
 800e30a:	4b6c      	ldr	r3, [pc, #432]	; (800e4bc <tcp_receive+0xf18>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	dd12      	ble.n	800e33a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e314:	4b69      	ldr	r3, [pc, #420]	; (800e4bc <tcp_receive+0xf18>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	b29a      	uxth	r2, r3
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	b29b      	uxth	r3, r3
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	b29a      	uxth	r2, r3
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	891b      	ldrh	r3, [r3, #8]
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f7fb feb3 	bl	800a0a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e33a:	4b62      	ldr	r3, [pc, #392]	; (800e4c4 <tcp_receive+0xf20>)
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	461a      	mov	r2, r3
 800e340:	4b5e      	ldr	r3, [pc, #376]	; (800e4bc <tcp_receive+0xf18>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	441a      	add	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e34e:	440b      	add	r3, r1
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	f340 8089 	ble.w	800e46a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	899b      	ldrh	r3, [r3, #12]
 800e360:	b29b      	uxth	r3, r3
 800e362:	4618      	mov	r0, r3
 800e364:	f7fa fc8c 	bl	8008c80 <lwip_htons>
 800e368:	4603      	mov	r3, r0
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	f003 0301 	and.w	r3, r3, #1
 800e370:	2b00      	cmp	r3, #0
 800e372:	d022      	beq.n	800e3ba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	899b      	ldrh	r3, [r3, #12]
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	b21b      	sxth	r3, r3
 800e380:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e384:	b21c      	sxth	r4, r3
 800e386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	899b      	ldrh	r3, [r3, #12]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4618      	mov	r0, r3
 800e392:	f7fa fc75 	bl	8008c80 <lwip_htons>
 800e396:	4603      	mov	r3, r0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fa fc6c 	bl	8008c80 <lwip_htons>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	b21b      	sxth	r3, r3
 800e3ac:	4323      	orrs	r3, r4
 800e3ae:	b21a      	sxth	r2, r3
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3c4:	4413      	add	r3, r2
 800e3c6:	b299      	uxth	r1, r3
 800e3c8:	4b3c      	ldr	r3, [pc, #240]	; (800e4bc <tcp_receive+0xf18>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	1a8a      	subs	r2, r1, r2
 800e3d4:	b292      	uxth	r2, r2
 800e3d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	685a      	ldr	r2, [r3, #4]
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	891b      	ldrh	r3, [r3, #8]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f7fb fe5a 	bl	800a0a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	891c      	ldrh	r4, [r3, #8]
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	899b      	ldrh	r3, [r3, #12]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fa fc3f 	bl	8008c80 <lwip_htons>
 800e402:	4603      	mov	r3, r0
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f003 0303 	and.w	r3, r3, #3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <tcp_receive+0xe6e>
 800e40e:	2301      	movs	r3, #1
 800e410:	e000      	b.n	800e414 <tcp_receive+0xe70>
 800e412:	2300      	movs	r3, #0
 800e414:	4423      	add	r3, r4
 800e416:	b29a      	uxth	r2, r3
 800e418:	4b2a      	ldr	r3, [pc, #168]	; (800e4c4 <tcp_receive+0xf20>)
 800e41a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e41c:	4b29      	ldr	r3, [pc, #164]	; (800e4c4 <tcp_receive+0xf20>)
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	461a      	mov	r2, r3
 800e422:	4b26      	ldr	r3, [pc, #152]	; (800e4bc <tcp_receive+0xf18>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	441a      	add	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e430:	440b      	add	r3, r1
 800e432:	429a      	cmp	r2, r3
 800e434:	d019      	beq.n	800e46a <tcp_receive+0xec6>
 800e436:	4b24      	ldr	r3, [pc, #144]	; (800e4c8 <tcp_receive+0xf24>)
 800e438:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e43c:	4923      	ldr	r1, [pc, #140]	; (800e4cc <tcp_receive+0xf28>)
 800e43e:	4824      	ldr	r0, [pc, #144]	; (800e4d0 <tcp_receive+0xf2c>)
 800e440:	f006 fd22 	bl	8014e88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e444:	e011      	b.n	800e46a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f47f aea4 	bne.w	800e19c <tcp_receive+0xbf8>
 800e454:	e00a      	b.n	800e46c <tcp_receive+0xec8>
                break;
 800e456:	bf00      	nop
 800e458:	e008      	b.n	800e46c <tcp_receive+0xec8>
                break;
 800e45a:	bf00      	nop
 800e45c:	e006      	b.n	800e46c <tcp_receive+0xec8>
                  break;
 800e45e:	bf00      	nop
 800e460:	e004      	b.n	800e46c <tcp_receive+0xec8>
                  break;
 800e462:	bf00      	nop
 800e464:	e002      	b.n	800e46c <tcp_receive+0xec8>
                  break;
 800e466:	bf00      	nop
 800e468:	e000      	b.n	800e46c <tcp_receive+0xec8>
                break;
 800e46a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f001 fa33 	bl	800f8d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e472:	e003      	b.n	800e47c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f001 fa2f 	bl	800f8d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e47a:	e01a      	b.n	800e4b2 <tcp_receive+0xf0e>
 800e47c:	e019      	b.n	800e4b2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e47e:	4b0f      	ldr	r3, [pc, #60]	; (800e4bc <tcp_receive+0xf18>)
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	db0a      	blt.n	800e4a2 <tcp_receive+0xefe>
 800e48c:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <tcp_receive+0xf18>)
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e494:	6879      	ldr	r1, [r7, #4]
 800e496:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e498:	440b      	add	r3, r1
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	3301      	adds	r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	dd07      	ble.n	800e4b2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	8b5b      	ldrh	r3, [r3, #26]
 800e4a6:	f043 0302 	orr.w	r3, r3, #2
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e4b0:	e7ff      	b.n	800e4b2 <tcp_receive+0xf0e>
 800e4b2:	bf00      	nop
 800e4b4:	3750      	adds	r7, #80	; 0x50
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	2000d3f4 	.word	0x2000d3f4
 800e4c0:	2000d3d4 	.word	0x2000d3d4
 800e4c4:	2000d3fe 	.word	0x2000d3fe
 800e4c8:	080170d4 	.word	0x080170d4
 800e4cc:	0801747c 	.word	0x0801747c
 800e4d0:	08017120 	.word	0x08017120

0800e4d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e4da:	4b15      	ldr	r3, [pc, #84]	; (800e530 <tcp_get_next_optbyte+0x5c>)
 800e4dc:	881b      	ldrh	r3, [r3, #0]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	b291      	uxth	r1, r2
 800e4e2:	4a13      	ldr	r2, [pc, #76]	; (800e530 <tcp_get_next_optbyte+0x5c>)
 800e4e4:	8011      	strh	r1, [r2, #0]
 800e4e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e4e8:	4b12      	ldr	r3, [pc, #72]	; (800e534 <tcp_get_next_optbyte+0x60>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <tcp_get_next_optbyte+0x26>
 800e4f0:	4b11      	ldr	r3, [pc, #68]	; (800e538 <tcp_get_next_optbyte+0x64>)
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d208      	bcs.n	800e50c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e4fa:	4b10      	ldr	r3, [pc, #64]	; (800e53c <tcp_get_next_optbyte+0x68>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3314      	adds	r3, #20
 800e500:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e502:	88fb      	ldrh	r3, [r7, #6]
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	4413      	add	r3, r2
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	e00b      	b.n	800e524 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e50c:	88fb      	ldrh	r3, [r7, #6]
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	4b09      	ldr	r3, [pc, #36]	; (800e538 <tcp_get_next_optbyte+0x64>)
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e51a:	4b06      	ldr	r3, [pc, #24]	; (800e534 <tcp_get_next_optbyte+0x60>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	797b      	ldrb	r3, [r7, #5]
 800e520:	4413      	add	r3, r2
 800e522:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	2000d3f0 	.word	0x2000d3f0
 800e534:	2000d3ec 	.word	0x2000d3ec
 800e538:	2000d3ea 	.word	0x2000d3ea
 800e53c:	2000d3e4 	.word	0x2000d3e4

0800e540 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <tcp_parseopt+0x1c>
 800e54e:	4b32      	ldr	r3, [pc, #200]	; (800e618 <tcp_parseopt+0xd8>)
 800e550:	f240 727d 	movw	r2, #1917	; 0x77d
 800e554:	4931      	ldr	r1, [pc, #196]	; (800e61c <tcp_parseopt+0xdc>)
 800e556:	4832      	ldr	r0, [pc, #200]	; (800e620 <tcp_parseopt+0xe0>)
 800e558:	f006 fc96 	bl	8014e88 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e55c:	4b31      	ldr	r3, [pc, #196]	; (800e624 <tcp_parseopt+0xe4>)
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d055      	beq.n	800e610 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e564:	4b30      	ldr	r3, [pc, #192]	; (800e628 <tcp_parseopt+0xe8>)
 800e566:	2200      	movs	r2, #0
 800e568:	801a      	strh	r2, [r3, #0]
 800e56a:	e045      	b.n	800e5f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e56c:	f7ff ffb2 	bl	800e4d4 <tcp_get_next_optbyte>
 800e570:	4603      	mov	r3, r0
 800e572:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d006      	beq.n	800e588 <tcp_parseopt+0x48>
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	dc2b      	bgt.n	800e5d6 <tcp_parseopt+0x96>
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d041      	beq.n	800e606 <tcp_parseopt+0xc6>
 800e582:	2b01      	cmp	r3, #1
 800e584:	d127      	bne.n	800e5d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e586:	e037      	b.n	800e5f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e588:	f7ff ffa4 	bl	800e4d4 <tcp_get_next_optbyte>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b04      	cmp	r3, #4
 800e590:	d13b      	bne.n	800e60a <tcp_parseopt+0xca>
 800e592:	4b25      	ldr	r3, [pc, #148]	; (800e628 <tcp_parseopt+0xe8>)
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	3301      	adds	r3, #1
 800e598:	4a22      	ldr	r2, [pc, #136]	; (800e624 <tcp_parseopt+0xe4>)
 800e59a:	8812      	ldrh	r2, [r2, #0]
 800e59c:	4293      	cmp	r3, r2
 800e59e:	da34      	bge.n	800e60a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e5a0:	f7ff ff98 	bl	800e4d4 <tcp_get_next_optbyte>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	021b      	lsls	r3, r3, #8
 800e5aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e5ac:	f7ff ff92 	bl	800e4d4 <tcp_get_next_optbyte>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	89bb      	ldrh	r3, [r7, #12]
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e5ba:	89bb      	ldrh	r3, [r7, #12]
 800e5bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e5c0:	d804      	bhi.n	800e5cc <tcp_parseopt+0x8c>
 800e5c2:	89bb      	ldrh	r3, [r7, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <tcp_parseopt+0x8c>
 800e5c8:	89ba      	ldrh	r2, [r7, #12]
 800e5ca:	e001      	b.n	800e5d0 <tcp_parseopt+0x90>
 800e5cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e5d4:	e010      	b.n	800e5f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e5d6:	f7ff ff7d 	bl	800e4d4 <tcp_get_next_optbyte>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e5de:	7afb      	ldrb	r3, [r7, #11]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d914      	bls.n	800e60e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <tcp_parseopt+0xe8>)
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	3b02      	subs	r3, #2
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <tcp_parseopt+0xe8>)
 800e5f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e5f8:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <tcp_parseopt+0xe8>)
 800e5fa:	881a      	ldrh	r2, [r3, #0]
 800e5fc:	4b09      	ldr	r3, [pc, #36]	; (800e624 <tcp_parseopt+0xe4>)
 800e5fe:	881b      	ldrh	r3, [r3, #0]
 800e600:	429a      	cmp	r2, r3
 800e602:	d3b3      	bcc.n	800e56c <tcp_parseopt+0x2c>
 800e604:	e004      	b.n	800e610 <tcp_parseopt+0xd0>
          return;
 800e606:	bf00      	nop
 800e608:	e002      	b.n	800e610 <tcp_parseopt+0xd0>
            return;
 800e60a:	bf00      	nop
 800e60c:	e000      	b.n	800e610 <tcp_parseopt+0xd0>
            return;
 800e60e:	bf00      	nop
      }
    }
  }
}
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	080170d4 	.word	0x080170d4
 800e61c:	08017538 	.word	0x08017538
 800e620:	08017120 	.word	0x08017120
 800e624:	2000d3e8 	.word	0x2000d3e8
 800e628:	2000d3f0 	.word	0x2000d3f0

0800e62c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e62c:	b480      	push	{r7}
 800e62e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e630:	4b05      	ldr	r3, [pc, #20]	; (800e648 <tcp_trigger_input_pcb_close+0x1c>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f043 0310 	orr.w	r3, r3, #16
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	4b03      	ldr	r3, [pc, #12]	; (800e648 <tcp_trigger_input_pcb_close+0x1c>)
 800e63c:	701a      	strb	r2, [r3, #0]
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	2000d401 	.word	0x2000d401

0800e64c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <tcp_route+0x28>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	7a1b      	ldrb	r3, [r3, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d006      	beq.n	800e674 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	7a1b      	ldrb	r3, [r3, #8]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fb fb10 	bl	8009c90 <netif_get_by_index>
 800e670:	4603      	mov	r3, r0
 800e672:	e003      	b.n	800e67c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f005 f80b 	bl	8013690 <ip4_route>
 800e67a:	4603      	mov	r3, r0
  }
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e684:	b590      	push	{r4, r7, lr}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	603b      	str	r3, [r7, #0]
 800e690:	4613      	mov	r3, r2
 800e692:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d105      	bne.n	800e6a6 <tcp_create_segment+0x22>
 800e69a:	4b44      	ldr	r3, [pc, #272]	; (800e7ac <tcp_create_segment+0x128>)
 800e69c:	22a3      	movs	r2, #163	; 0xa3
 800e69e:	4944      	ldr	r1, [pc, #272]	; (800e7b0 <tcp_create_segment+0x12c>)
 800e6a0:	4844      	ldr	r0, [pc, #272]	; (800e7b4 <tcp_create_segment+0x130>)
 800e6a2:	f006 fbf1 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d105      	bne.n	800e6b8 <tcp_create_segment+0x34>
 800e6ac:	4b3f      	ldr	r3, [pc, #252]	; (800e7ac <tcp_create_segment+0x128>)
 800e6ae:	22a4      	movs	r2, #164	; 0xa4
 800e6b0:	4941      	ldr	r1, [pc, #260]	; (800e7b8 <tcp_create_segment+0x134>)
 800e6b2:	4840      	ldr	r0, [pc, #256]	; (800e7b4 <tcp_create_segment+0x130>)
 800e6b4:	f006 fbe8 	bl	8014e88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e6b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e6c6:	2003      	movs	r0, #3
 800e6c8:	f7fa ffb2 	bl	8009630 <memp_malloc>
 800e6cc:	6138      	str	r0, [r7, #16]
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d104      	bne.n	800e6de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e6d4:	68b8      	ldr	r0, [r7, #8]
 800e6d6:	f7fb fe69 	bl	800a3ac <pbuf_free>
    return NULL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e061      	b.n	800e7a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e6e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	891a      	ldrh	r2, [r3, #8]
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d205      	bcs.n	800e70a <tcp_create_segment+0x86>
 800e6fe:	4b2b      	ldr	r3, [pc, #172]	; (800e7ac <tcp_create_segment+0x128>)
 800e700:	22b0      	movs	r2, #176	; 0xb0
 800e702:	492e      	ldr	r1, [pc, #184]	; (800e7bc <tcp_create_segment+0x138>)
 800e704:	482b      	ldr	r0, [pc, #172]	; (800e7b4 <tcp_create_segment+0x130>)
 800e706:	f006 fbbf 	bl	8014e88 <iprintf>
  seg->len = p->tot_len - optlen;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	891a      	ldrh	r2, [r3, #8]
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
 800e710:	b29b      	uxth	r3, r3
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	b29a      	uxth	r2, r3
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e71a:	2114      	movs	r1, #20
 800e71c:	68b8      	ldr	r0, [r7, #8]
 800e71e:	f7fb fdaf 	bl	800a280 <pbuf_add_header>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d004      	beq.n	800e732 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e728:	6938      	ldr	r0, [r7, #16]
 800e72a:	f7fd f8ce 	bl	800b8ca <tcp_seg_free>
    return NULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	e037      	b.n	800e7a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	8ada      	ldrh	r2, [r3, #22]
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	68dc      	ldr	r4, [r3, #12]
 800e744:	4610      	mov	r0, r2
 800e746:	f7fa fa9b 	bl	8008c80 <lwip_htons>
 800e74a:	4603      	mov	r3, r0
 800e74c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	8b1a      	ldrh	r2, [r3, #24]
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	68dc      	ldr	r4, [r3, #12]
 800e756:	4610      	mov	r0, r2
 800e758:	f7fa fa92 	bl	8008c80 <lwip_htons>
 800e75c:	4603      	mov	r3, r0
 800e75e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	68dc      	ldr	r4, [r3, #12]
 800e764:	6838      	ldr	r0, [r7, #0]
 800e766:	f7fa faa0 	bl	8008caa <lwip_htonl>
 800e76a:	4603      	mov	r3, r0
 800e76c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e76e:	7dfb      	ldrb	r3, [r7, #23]
 800e770:	089b      	lsrs	r3, r3, #2
 800e772:	b2db      	uxtb	r3, r3
 800e774:	b29b      	uxth	r3, r3
 800e776:	3305      	adds	r3, #5
 800e778:	b29b      	uxth	r3, r3
 800e77a:	031b      	lsls	r3, r3, #12
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	b29b      	uxth	r3, r3
 800e782:	4313      	orrs	r3, r2
 800e784:	b29a      	uxth	r2, r3
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	68dc      	ldr	r4, [r3, #12]
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7fa fa78 	bl	8008c80 <lwip_htons>
 800e790:	4603      	mov	r3, r0
 800e792:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	749a      	strb	r2, [r3, #18]
 800e79c:	2200      	movs	r2, #0
 800e79e:	74da      	strb	r2, [r3, #19]
  return seg;
 800e7a0:	693b      	ldr	r3, [r7, #16]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd90      	pop	{r4, r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08017554 	.word	0x08017554
 800e7b0:	08017588 	.word	0x08017588
 800e7b4:	080175a8 	.word	0x080175a8
 800e7b8:	080175d0 	.word	0x080175d0
 800e7bc:	080175f4 	.word	0x080175f4

0800e7c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e7c0:	b590      	push	{r4, r7, lr}
 800e7c2:	b08b      	sub	sp, #44	; 0x2c
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <tcp_split_unsent_seg+0x2c>
 800e7de:	4b95      	ldr	r3, [pc, #596]	; (800ea34 <tcp_split_unsent_seg+0x274>)
 800e7e0:	f240 324b 	movw	r2, #843	; 0x34b
 800e7e4:	4994      	ldr	r1, [pc, #592]	; (800ea38 <tcp_split_unsent_seg+0x278>)
 800e7e6:	4895      	ldr	r0, [pc, #596]	; (800ea3c <tcp_split_unsent_seg+0x27c>)
 800e7e8:	f006 fb4e 	bl	8014e88 <iprintf>

  useg = pcb->unsent;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d102      	bne.n	800e7fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fc:	e116      	b.n	800ea2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e7fe:	887b      	ldrh	r3, [r7, #2]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d109      	bne.n	800e818 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e804:	4b8b      	ldr	r3, [pc, #556]	; (800ea34 <tcp_split_unsent_seg+0x274>)
 800e806:	f240 3253 	movw	r2, #851	; 0x353
 800e80a:	498d      	ldr	r1, [pc, #564]	; (800ea40 <tcp_split_unsent_seg+0x280>)
 800e80c:	488b      	ldr	r0, [pc, #556]	; (800ea3c <tcp_split_unsent_seg+0x27c>)
 800e80e:	f006 fb3b 	bl	8014e88 <iprintf>
    return ERR_VAL;
 800e812:	f06f 0305 	mvn.w	r3, #5
 800e816:	e109      	b.n	800ea2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	891b      	ldrh	r3, [r3, #8]
 800e81c:	887a      	ldrh	r2, [r7, #2]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d301      	bcc.n	800e826 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	e102      	b.n	800ea2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e82a:	887a      	ldrh	r2, [r7, #2]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d906      	bls.n	800e83e <tcp_split_unsent_seg+0x7e>
 800e830:	4b80      	ldr	r3, [pc, #512]	; (800ea34 <tcp_split_unsent_seg+0x274>)
 800e832:	f240 325b 	movw	r2, #859	; 0x35b
 800e836:	4983      	ldr	r1, [pc, #524]	; (800ea44 <tcp_split_unsent_seg+0x284>)
 800e838:	4880      	ldr	r0, [pc, #512]	; (800ea3c <tcp_split_unsent_seg+0x27c>)
 800e83a:	f006 fb25 	bl	8014e88 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	891b      	ldrh	r3, [r3, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d106      	bne.n	800e854 <tcp_split_unsent_seg+0x94>
 800e846:	4b7b      	ldr	r3, [pc, #492]	; (800ea34 <tcp_split_unsent_seg+0x274>)
 800e848:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e84c:	497e      	ldr	r1, [pc, #504]	; (800ea48 <tcp_split_unsent_seg+0x288>)
 800e84e:	487b      	ldr	r0, [pc, #492]	; (800ea3c <tcp_split_unsent_seg+0x27c>)
 800e850:	f006 fb1a 	bl	8014e88 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	7a9b      	ldrb	r3, [r3, #10]
 800e858:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	f003 0304 	and.w	r3, r3, #4
 800e864:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	891a      	ldrh	r2, [r3, #8]
 800e86a:	887b      	ldrh	r3, [r7, #2]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e870:	7bbb      	ldrb	r3, [r7, #14]
 800e872:	b29a      	uxth	r2, r3
 800e874:	89bb      	ldrh	r3, [r7, #12]
 800e876:	4413      	add	r3, r2
 800e878:	b29b      	uxth	r3, r3
 800e87a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e87e:	4619      	mov	r1, r3
 800e880:	2036      	movs	r0, #54	; 0x36
 800e882:	f7fb faaf 	bl	8009de4 <pbuf_alloc>
 800e886:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 80b7 	beq.w	800e9fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	891a      	ldrh	r2, [r3, #8]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	891b      	ldrh	r3, [r3, #8]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	887b      	ldrh	r3, [r7, #2]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	6858      	ldr	r0, [r3, #4]
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	7bbb      	ldrb	r3, [r7, #14]
 800e8ae:	18d1      	adds	r1, r2, r3
 800e8b0:	897b      	ldrh	r3, [r7, #10]
 800e8b2:	89ba      	ldrh	r2, [r7, #12]
 800e8b4:	f7fb ff80 	bl	800a7b8 <pbuf_copy_partial>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	89bb      	ldrh	r3, [r7, #12]
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	f040 809f 	bne.w	800ea02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	899b      	ldrh	r3, [r3, #12]
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fa f9d7 	bl	8008c80 <lwip_htons>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e8dc:	2300      	movs	r3, #0
 800e8de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e8e0:	7efb      	ldrb	r3, [r7, #27]
 800e8e2:	f003 0308 	and.w	r3, r3, #8
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d007      	beq.n	800e8fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e8ea:	7efb      	ldrb	r3, [r7, #27]
 800e8ec:	f023 0308 	bic.w	r3, r3, #8
 800e8f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e8f2:	7ebb      	ldrb	r3, [r7, #26]
 800e8f4:	f043 0308 	orr.w	r3, r3, #8
 800e8f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e8fa:	7efb      	ldrb	r3, [r7, #27]
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e904:	7efb      	ldrb	r3, [r7, #27]
 800e906:	f023 0301 	bic.w	r3, r3, #1
 800e90a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e90c:	7ebb      	ldrb	r3, [r7, #26]
 800e90e:	f043 0301 	orr.w	r3, r3, #1
 800e912:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fa f9c5 	bl	8008caa <lwip_htonl>
 800e920:	4602      	mov	r2, r0
 800e922:	887b      	ldrh	r3, [r7, #2]
 800e924:	18d1      	adds	r1, r2, r3
 800e926:	7eba      	ldrb	r2, [r7, #26]
 800e928:	7bfb      	ldrb	r3, [r7, #15]
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	460b      	mov	r3, r1
 800e92e:	6939      	ldr	r1, [r7, #16]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff fea7 	bl	800e684 <tcp_create_segment>
 800e936:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d063      	beq.n	800ea06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	f7fb fdc0 	bl	800a4c8 <pbuf_clen>
 800e948:	4603      	mov	r3, r0
 800e94a:	461a      	mov	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e952:	1a9b      	subs	r3, r3, r2
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	6858      	ldr	r0, [r3, #4]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	891a      	ldrh	r2, [r3, #8]
 800e966:	89bb      	ldrh	r3, [r7, #12]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4619      	mov	r1, r3
 800e96e:	f7fb fb97 	bl	800a0a0 <pbuf_realloc>
  useg->len -= remainder;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	891a      	ldrh	r2, [r3, #8]
 800e976:	89bb      	ldrh	r3, [r7, #12]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	b29c      	uxth	r4, r3
 800e988:	7efb      	ldrb	r3, [r7, #27]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fa f977 	bl	8008c80 <lwip_htons>
 800e992:	4603      	mov	r3, r0
 800e994:	461a      	mov	r2, r3
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	4322      	orrs	r2, r4
 800e99c:	b292      	uxth	r2, r2
 800e99e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fb fd8f 	bl	800a4c8 <pbuf_clen>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9b4:	4413      	add	r3, r2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fb fd80 	bl	800a4c8 <pbuf_clen>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9d2:	4413      	add	r3, r2
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d103      	bne.n	800e9fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	e016      	b.n	800ea2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e9fe:	bf00      	nop
 800ea00:	e002      	b.n	800ea08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ea02:	bf00      	nop
 800ea04:	e000      	b.n	800ea08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ea06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d006      	beq.n	800ea1c <tcp_split_unsent_seg+0x25c>
 800ea0e:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <tcp_split_unsent_seg+0x274>)
 800ea10:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ea14:	490d      	ldr	r1, [pc, #52]	; (800ea4c <tcp_split_unsent_seg+0x28c>)
 800ea16:	4809      	ldr	r0, [pc, #36]	; (800ea3c <tcp_split_unsent_seg+0x27c>)
 800ea18:	f006 fa36 	bl	8014e88 <iprintf>
  if (p != NULL) {
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d002      	beq.n	800ea28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ea22:	6938      	ldr	r0, [r7, #16]
 800ea24:	f7fb fcc2 	bl	800a3ac <pbuf_free>
  }

  return ERR_MEM;
 800ea28:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3724      	adds	r7, #36	; 0x24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd90      	pop	{r4, r7, pc}
 800ea34:	08017554 	.word	0x08017554
 800ea38:	080178e8 	.word	0x080178e8
 800ea3c:	080175a8 	.word	0x080175a8
 800ea40:	0801790c 	.word	0x0801790c
 800ea44:	08017930 	.word	0x08017930
 800ea48:	08017940 	.word	0x08017940
 800ea4c:	08017950 	.word	0x08017950

0800ea50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ea50:	b590      	push	{r4, r7, lr}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_send_fin+0x1c>
 800ea5e:	4b21      	ldr	r3, [pc, #132]	; (800eae4 <tcp_send_fin+0x94>)
 800ea60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ea64:	4920      	ldr	r1, [pc, #128]	; (800eae8 <tcp_send_fin+0x98>)
 800ea66:	4821      	ldr	r0, [pc, #132]	; (800eaec <tcp_send_fin+0x9c>)
 800ea68:	f006 fa0e 	bl	8014e88 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d02e      	beq.n	800ead2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	e002      	b.n	800ea82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1f8      	bne.n	800ea7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	899b      	ldrh	r3, [r3, #12]
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fa f8f4 	bl	8008c80 <lwip_htons>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	f003 0307 	and.w	r3, r3, #7
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d116      	bne.n	800ead2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	899b      	ldrh	r3, [r3, #12]
 800eaaa:	b29c      	uxth	r4, r3
 800eaac:	2001      	movs	r0, #1
 800eaae:	f7fa f8e7 	bl	8008c80 <lwip_htons>
 800eab2:	4603      	mov	r3, r0
 800eab4:	461a      	mov	r2, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	4322      	orrs	r2, r4
 800eabc:	b292      	uxth	r2, r2
 800eabe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8b5b      	ldrh	r3, [r3, #26]
 800eac4:	f043 0320 	orr.w	r3, r3, #32
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	e004      	b.n	800eadc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ead2:	2101      	movs	r1, #1
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f80b 	bl	800eaf0 <tcp_enqueue_flags>
 800eada:	4603      	mov	r3, r0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd90      	pop	{r4, r7, pc}
 800eae4:	08017554 	.word	0x08017554
 800eae8:	0801795c 	.word	0x0801795c
 800eaec:	080175a8 	.word	0x080175a8

0800eaf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08a      	sub	sp, #40	; 0x28
 800eaf4:	af02      	add	r7, sp, #8
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eb00:	2300      	movs	r3, #0
 800eb02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eb04:	78fb      	ldrb	r3, [r7, #3]
 800eb06:	f003 0303 	and.w	r3, r3, #3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d106      	bne.n	800eb1c <tcp_enqueue_flags+0x2c>
 800eb0e:	4b67      	ldr	r3, [pc, #412]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800eb10:	f240 4211 	movw	r2, #1041	; 0x411
 800eb14:	4966      	ldr	r1, [pc, #408]	; (800ecb0 <tcp_enqueue_flags+0x1c0>)
 800eb16:	4867      	ldr	r0, [pc, #412]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800eb18:	f006 f9b6 	bl	8014e88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d106      	bne.n	800eb30 <tcp_enqueue_flags+0x40>
 800eb22:	4b62      	ldr	r3, [pc, #392]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800eb24:	f240 4213 	movw	r2, #1043	; 0x413
 800eb28:	4963      	ldr	r1, [pc, #396]	; (800ecb8 <tcp_enqueue_flags+0x1c8>)
 800eb2a:	4862      	ldr	r0, [pc, #392]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800eb2c:	f006 f9ac 	bl	8014e88 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eb3e:	7ffb      	ldrb	r3, [r7, #31]
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	f003 0304 	and.w	r3, r3, #4
 800eb48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb52:	4619      	mov	r1, r3
 800eb54:	2036      	movs	r0, #54	; 0x36
 800eb56:	f7fb f945 	bl	8009de4 <pbuf_alloc>
 800eb5a:	6138      	str	r0, [r7, #16]
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d109      	bne.n	800eb76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	8b5b      	ldrh	r3, [r3, #26]
 800eb66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb70:	f04f 33ff 	mov.w	r3, #4294967295
 800eb74:	e095      	b.n	800eca2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	895a      	ldrh	r2, [r3, #10]
 800eb7a:	7dfb      	ldrb	r3, [r7, #23]
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d206      	bcs.n	800eb90 <tcp_enqueue_flags+0xa0>
 800eb82:	4b4a      	ldr	r3, [pc, #296]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800eb84:	f240 4239 	movw	r2, #1081	; 0x439
 800eb88:	494c      	ldr	r1, [pc, #304]	; (800ecbc <tcp_enqueue_flags+0x1cc>)
 800eb8a:	484a      	ldr	r0, [pc, #296]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800eb8c:	f006 f97c 	bl	8014e88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800eb94:	78fa      	ldrb	r2, [r7, #3]
 800eb96:	7ffb      	ldrb	r3, [r7, #31]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	6939      	ldr	r1, [r7, #16]
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fd70 	bl	800e684 <tcp_create_segment>
 800eba4:	60f8      	str	r0, [r7, #12]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d109      	bne.n	800ebc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	8b5b      	ldrh	r3, [r3, #26]
 800ebb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ebba:	f04f 33ff 	mov.w	r3, #4294967295
 800ebbe:	e070      	b.n	800eca2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	f003 0303 	and.w	r3, r3, #3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d006      	beq.n	800ebda <tcp_enqueue_flags+0xea>
 800ebcc:	4b37      	ldr	r3, [pc, #220]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800ebce:	f240 4242 	movw	r2, #1090	; 0x442
 800ebd2:	493b      	ldr	r1, [pc, #236]	; (800ecc0 <tcp_enqueue_flags+0x1d0>)
 800ebd4:	4837      	ldr	r0, [pc, #220]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800ebd6:	f006 f957 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	891b      	ldrh	r3, [r3, #8]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <tcp_enqueue_flags+0x100>
 800ebe2:	4b32      	ldr	r3, [pc, #200]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800ebe4:	f240 4243 	movw	r2, #1091	; 0x443
 800ebe8:	4936      	ldr	r1, [pc, #216]	; (800ecc4 <tcp_enqueue_flags+0x1d4>)
 800ebea:	4832      	ldr	r0, [pc, #200]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800ebec:	f006 f94c 	bl	8014e88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	66da      	str	r2, [r3, #108]	; 0x6c
 800ebfe:	e00d      	b.n	800ec1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec04:	61bb      	str	r3, [r7, #24]
 800ec06:	e002      	b.n	800ec0e <tcp_enqueue_flags+0x11e>
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	61bb      	str	r3, [r7, #24]
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1f8      	bne.n	800ec08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	f003 0302 	and.w	r3, r3, #2
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d104      	bne.n	800ec38 <tcp_enqueue_flags+0x148>
 800ec2e:	78fb      	ldrb	r3, [r7, #3]
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d004      	beq.n	800ec42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3c:	1c5a      	adds	r2, r3, #1
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d006      	beq.n	800ec5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	8b5b      	ldrh	r3, [r3, #26]
 800ec50:	f043 0320 	orr.w	r3, r3, #32
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fb fc32 	bl	800a4c8 <pbuf_clen>
 800ec64:	4603      	mov	r3, r0
 800ec66:	461a      	mov	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec6e:	4413      	add	r3, r2
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00e      	beq.n	800eca0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10a      	bne.n	800eca0 <tcp_enqueue_flags+0x1b0>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <tcp_enqueue_flags+0x1b0>
 800ec92:	4b06      	ldr	r3, [pc, #24]	; (800ecac <tcp_enqueue_flags+0x1bc>)
 800ec94:	f240 4265 	movw	r2, #1125	; 0x465
 800ec98:	490b      	ldr	r1, [pc, #44]	; (800ecc8 <tcp_enqueue_flags+0x1d8>)
 800ec9a:	4806      	ldr	r0, [pc, #24]	; (800ecb4 <tcp_enqueue_flags+0x1c4>)
 800ec9c:	f006 f8f4 	bl	8014e88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3720      	adds	r7, #32
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	08017554 	.word	0x08017554
 800ecb0:	08017978 	.word	0x08017978
 800ecb4:	080175a8 	.word	0x080175a8
 800ecb8:	080179d0 	.word	0x080179d0
 800ecbc:	080179f0 	.word	0x080179f0
 800ecc0:	08017a2c 	.word	0x08017a2c
 800ecc4:	08017a44 	.word	0x08017a44
 800ecc8:	08017a70 	.word	0x08017a70

0800eccc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eccc:	b5b0      	push	{r4, r5, r7, lr}
 800ecce:	b08a      	sub	sp, #40	; 0x28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <tcp_output+0x1c>
 800ecda:	4b8a      	ldr	r3, [pc, #552]	; (800ef04 <tcp_output+0x238>)
 800ecdc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ece0:	4989      	ldr	r1, [pc, #548]	; (800ef08 <tcp_output+0x23c>)
 800ece2:	488a      	ldr	r0, [pc, #552]	; (800ef0c <tcp_output+0x240>)
 800ece4:	f006 f8d0 	bl	8014e88 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	7d1b      	ldrb	r3, [r3, #20]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d106      	bne.n	800ecfe <tcp_output+0x32>
 800ecf0:	4b84      	ldr	r3, [pc, #528]	; (800ef04 <tcp_output+0x238>)
 800ecf2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ecf6:	4986      	ldr	r1, [pc, #536]	; (800ef10 <tcp_output+0x244>)
 800ecf8:	4884      	ldr	r0, [pc, #528]	; (800ef0c <tcp_output+0x240>)
 800ecfa:	f006 f8c5 	bl	8014e88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ecfe:	4b85      	ldr	r3, [pc, #532]	; (800ef14 <tcp_output+0x248>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d101      	bne.n	800ed0c <tcp_output+0x40>
    return ERR_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	e1ce      	b.n	800f0aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	bf28      	it	cs
 800ed1c:	4613      	movcs	r3, r2
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10b      	bne.n	800ed46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8b5b      	ldrh	r3, [r3, #26]
 800ed32:	f003 0302 	and.w	r3, r3, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 81aa 	beq.w	800f090 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fdcb 	bl	800f8d8 <tcp_send_empty_ack>
 800ed42:	4603      	mov	r3, r0
 800ed44:	e1b1      	b.n	800f0aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff fc7c 	bl	800e64c <tcp_route>
 800ed54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <tcp_output+0x96>
    return ERR_RTE;
 800ed5c:	f06f 0303 	mvn.w	r3, #3
 800ed60:	e1a3      	b.n	800f0aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d003      	beq.n	800ed70 <tcp_output+0xa4>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d111      	bne.n	800ed94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <tcp_output+0xb0>
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3304      	adds	r3, #4
 800ed7a:	e000      	b.n	800ed7e <tcp_output+0xb2>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <tcp_output+0xc0>
      return ERR_RTE;
 800ed86:	f06f 0303 	mvn.w	r3, #3
 800ed8a:	e18e      	b.n	800f0aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f9 ff85 	bl	8008caa <lwip_htonl>
 800eda0:	4602      	mov	r2, r0
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edaa:	8912      	ldrh	r2, [r2, #8]
 800edac:	4413      	add	r3, r2
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d227      	bcs.n	800ee04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edba:	461a      	mov	r2, r3
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d114      	bne.n	800edec <tcp_output+0x120>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d110      	bne.n	800edec <tcp_output+0x120>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10b      	bne.n	800edec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	8b5b      	ldrh	r3, [r3, #26]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 814d 	beq.w	800f094 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 fd6c 	bl	800f8d8 <tcp_send_empty_ack>
 800ee00:	4603      	mov	r3, r0
 800ee02:	e152      	b.n	800f0aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f000 811c 	beq.w	800f052 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ee1a:	e002      	b.n	800ee22 <tcp_output+0x156>
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	623b      	str	r3, [r7, #32]
 800ee22:	6a3b      	ldr	r3, [r7, #32]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1f8      	bne.n	800ee1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ee2a:	e112      	b.n	800f052 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	899b      	ldrh	r3, [r3, #12]
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7f9 ff23 	bl	8008c80 <lwip_htons>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f003 0304 	and.w	r3, r3, #4
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d006      	beq.n	800ee54 <tcp_output+0x188>
 800ee46:	4b2f      	ldr	r3, [pc, #188]	; (800ef04 <tcp_output+0x238>)
 800ee48:	f240 5236 	movw	r2, #1334	; 0x536
 800ee4c:	4932      	ldr	r1, [pc, #200]	; (800ef18 <tcp_output+0x24c>)
 800ee4e:	482f      	ldr	r0, [pc, #188]	; (800ef0c <tcp_output+0x240>)
 800ee50:	f006 f81a 	bl	8014e88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01f      	beq.n	800ee9c <tcp_output+0x1d0>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8b5b      	ldrh	r3, [r3, #26]
 800ee60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d119      	bne.n	800ee9c <tcp_output+0x1d0>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00b      	beq.n	800ee88 <tcp_output+0x1bc>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d110      	bne.n	800ee9c <tcp_output+0x1d0>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee7e:	891a      	ldrh	r2, [r3, #8]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d209      	bcs.n	800ee9c <tcp_output+0x1d0>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d004      	beq.n	800ee9c <tcp_output+0x1d0>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee98:	2b08      	cmp	r3, #8
 800ee9a:	d901      	bls.n	800eea0 <tcp_output+0x1d4>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e000      	b.n	800eea2 <tcp_output+0x1d6>
 800eea0:	2300      	movs	r3, #0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8b5b      	ldrh	r3, [r3, #26]
 800eeaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 80e4 	beq.w	800f07c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d00d      	beq.n	800eed8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	899b      	ldrh	r3, [r3, #12]
 800eec2:	b29c      	uxth	r4, r3
 800eec4:	2010      	movs	r0, #16
 800eec6:	f7f9 fedb 	bl	8008c80 <lwip_htons>
 800eeca:	4603      	mov	r3, r0
 800eecc:	461a      	mov	r2, r3
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	4322      	orrs	r2, r4
 800eed4:	b292      	uxth	r2, r2
 800eed6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800eed8:	697a      	ldr	r2, [r7, #20]
 800eeda:	6879      	ldr	r1, [r7, #4]
 800eedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eede:	f000 f909 	bl	800f0f4 <tcp_output_segment>
 800eee2:	4603      	mov	r3, r0
 800eee4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800eee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d016      	beq.n	800ef1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8b5b      	ldrh	r3, [r3, #26]
 800eef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	835a      	strh	r2, [r3, #26]
      return err;
 800eefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef00:	e0d3      	b.n	800f0aa <tcp_output+0x3de>
 800ef02:	bf00      	nop
 800ef04:	08017554 	.word	0x08017554
 800ef08:	08017a98 	.word	0x08017a98
 800ef0c:	080175a8 	.word	0x080175a8
 800ef10:	08017ab0 	.word	0x08017ab0
 800ef14:	2000d408 	.word	0x2000d408
 800ef18:	08017ad8 	.word	0x08017ad8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	7d1b      	ldrb	r3, [r3, #20]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d006      	beq.n	800ef3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	8b5b      	ldrh	r3, [r3, #26]
 800ef30:	f023 0303 	bic.w	r3, r3, #3
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ef3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7f9 feb2 	bl	8008caa <lwip_htonl>
 800ef46:	4604      	mov	r4, r0
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	891b      	ldrh	r3, [r3, #8]
 800ef4c:	461d      	mov	r5, r3
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	899b      	ldrh	r3, [r3, #12]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7f9 fe92 	bl	8008c80 <lwip_htons>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	f003 0303 	and.w	r3, r3, #3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d001      	beq.n	800ef6c <tcp_output+0x2a0>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e000      	b.n	800ef6e <tcp_output+0x2a2>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	442b      	add	r3, r5
 800ef70:	4423      	add	r3, r4
 800ef72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	da02      	bge.n	800ef86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	891b      	ldrh	r3, [r3, #8]
 800ef8a:	461c      	mov	r4, r3
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	899b      	ldrh	r3, [r3, #12]
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f9 fe73 	bl	8008c80 <lwip_htons>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	f003 0303 	and.w	r3, r3, #3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <tcp_output+0x2de>
 800efa6:	2301      	movs	r3, #1
 800efa8:	e000      	b.n	800efac <tcp_output+0x2e0>
 800efaa:	2300      	movs	r3, #0
 800efac:	4423      	add	r3, r4
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d049      	beq.n	800f046 <tcp_output+0x37a>
      seg->next = NULL;
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d105      	bne.n	800efcc <tcp_output+0x300>
        pcb->unacked = seg;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	623b      	str	r3, [r7, #32]
 800efca:	e03f      	b.n	800f04c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7f9 fe69 	bl	8008caa <lwip_htonl>
 800efd8:	4604      	mov	r4, r0
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f9 fe62 	bl	8008caa <lwip_htonl>
 800efe6:	4603      	mov	r3, r0
 800efe8:	1ae3      	subs	r3, r4, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	da24      	bge.n	800f038 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	3370      	adds	r3, #112	; 0x70
 800eff2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eff4:	e002      	b.n	800effc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d011      	beq.n	800f028 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7f9 fe4c 	bl	8008caa <lwip_htonl>
 800f012:	4604      	mov	r4, r0
 800f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f9 fe45 	bl	8008caa <lwip_htonl>
 800f020:	4603      	mov	r3, r0
 800f022:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f024:	2b00      	cmp	r3, #0
 800f026:	dbe6      	blt.n	800eff6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	e009      	b.n	800f04c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f038:	6a3b      	ldr	r3, [r7, #32]
 800f03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f03c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	623b      	str	r3, [r7, #32]
 800f044:	e002      	b.n	800f04c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f048:	f7fc fc3f 	bl	800b8ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	d012      	beq.n	800f07e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f9 fe23 	bl	8008caa <lwip_htonl>
 800f064:	4602      	mov	r2, r0
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f06e:	8912      	ldrh	r2, [r2, #8]
 800f070:	4413      	add	r3, r2
  while (seg != NULL &&
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	429a      	cmp	r2, r3
 800f076:	f4bf aed9 	bcs.w	800ee2c <tcp_output+0x160>
 800f07a:	e000      	b.n	800f07e <tcp_output+0x3b2>
      break;
 800f07c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f082:	2b00      	cmp	r3, #0
 800f084:	d108      	bne.n	800f098 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f08e:	e004      	b.n	800f09a <tcp_output+0x3ce>
    goto output_done;
 800f090:	bf00      	nop
 800f092:	e002      	b.n	800f09a <tcp_output+0x3ce>
    goto output_done;
 800f094:	bf00      	nop
 800f096:	e000      	b.n	800f09a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f098:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8b5b      	ldrh	r3, [r3, #26]
 800f09e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f0a8:	2300      	movs	r3, #0
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3728      	adds	r7, #40	; 0x28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f0b2:	bf00      	nop

0800f0b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d106      	bne.n	800f0d0 <tcp_output_segment_busy+0x1c>
 800f0c2:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <tcp_output_segment_busy+0x34>)
 800f0c4:	f240 529a 	movw	r2, #1434	; 0x59a
 800f0c8:	4908      	ldr	r1, [pc, #32]	; (800f0ec <tcp_output_segment_busy+0x38>)
 800f0ca:	4809      	ldr	r0, [pc, #36]	; (800f0f0 <tcp_output_segment_busy+0x3c>)
 800f0cc:	f005 fedc 	bl	8014e88 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	7b9b      	ldrb	r3, [r3, #14]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d001      	beq.n	800f0de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e000      	b.n	800f0e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	08017554 	.word	0x08017554
 800f0ec:	08017af0 	.word	0x08017af0
 800f0f0:	080175a8 	.word	0x080175a8

0800f0f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f0f4:	b5b0      	push	{r4, r5, r7, lr}
 800f0f6:	b08c      	sub	sp, #48	; 0x30
 800f0f8:	af04      	add	r7, sp, #16
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <tcp_output_segment+0x20>
 800f106:	4b64      	ldr	r3, [pc, #400]	; (800f298 <tcp_output_segment+0x1a4>)
 800f108:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f10c:	4963      	ldr	r1, [pc, #396]	; (800f29c <tcp_output_segment+0x1a8>)
 800f10e:	4864      	ldr	r0, [pc, #400]	; (800f2a0 <tcp_output_segment+0x1ac>)
 800f110:	f005 feba 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_output_segment+0x34>
 800f11a:	4b5f      	ldr	r3, [pc, #380]	; (800f298 <tcp_output_segment+0x1a4>)
 800f11c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f120:	4960      	ldr	r1, [pc, #384]	; (800f2a4 <tcp_output_segment+0x1b0>)
 800f122:	485f      	ldr	r0, [pc, #380]	; (800f2a0 <tcp_output_segment+0x1ac>)
 800f124:	f005 feb0 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d106      	bne.n	800f13c <tcp_output_segment+0x48>
 800f12e:	4b5a      	ldr	r3, [pc, #360]	; (800f298 <tcp_output_segment+0x1a4>)
 800f130:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f134:	495c      	ldr	r1, [pc, #368]	; (800f2a8 <tcp_output_segment+0x1b4>)
 800f136:	485a      	ldr	r0, [pc, #360]	; (800f2a0 <tcp_output_segment+0x1ac>)
 800f138:	f005 fea6 	bl	8014e88 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f7ff ffb9 	bl	800f0b4 <tcp_output_segment_busy>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d001      	beq.n	800f14c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	e0a1      	b.n	800f290 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	68dc      	ldr	r4, [r3, #12]
 800f154:	4610      	mov	r0, r2
 800f156:	f7f9 fda8 	bl	8008caa <lwip_htonl>
 800f15a:	4603      	mov	r3, r0
 800f15c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	68dc      	ldr	r4, [r3, #12]
 800f166:	4610      	mov	r0, r2
 800f168:	f7f9 fd8a 	bl	8008c80 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f178:	441a      	add	r2, r3
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	3314      	adds	r3, #20
 800f184:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	7a9b      	ldrb	r3, [r3, #10]
 800f18a:	f003 0301 	and.w	r3, r3, #1
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d015      	beq.n	800f1be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	3304      	adds	r3, #4
 800f196:	461a      	mov	r2, r3
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f19e:	f7fc fe8b 	bl	800beb8 <tcp_eff_send_mss_netif>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f1a6:	8b7b      	ldrh	r3, [r7, #26]
 800f1a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7f9 fd7c 	bl	8008caa <lwip_htonl>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	da02      	bge.n	800f1ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10c      	bne.n	800f1f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f1d6:	4b35      	ldr	r3, [pc, #212]	; (800f2ac <tcp_output_segment+0x1b8>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f9 fd60 	bl	8008caa <lwip_htonl>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	8959      	ldrh	r1, [r3, #10]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	8b3a      	ldrh	r2, [r7, #24]
 800f20a:	1a8a      	subs	r2, r1, r2
 800f20c:	b292      	uxth	r2, r2
 800f20e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	8919      	ldrh	r1, [r3, #8]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	8b3a      	ldrh	r2, [r7, #24]
 800f21c:	1a8a      	subs	r2, r1, r2
 800f21e:	b292      	uxth	r2, r2
 800f220:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	68d2      	ldr	r2, [r2, #12]
 800f22a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	741a      	strb	r2, [r3, #16]
 800f234:	2200      	movs	r2, #0
 800f236:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	7a9b      	ldrb	r3, [r3, #10]
 800f240:	f003 0301 	and.w	r3, r3, #1
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <tcp_output_segment+0x158>
 800f248:	2318      	movs	r3, #24
 800f24a:	e000      	b.n	800f24e <tcp_output_segment+0x15a>
 800f24c:	2314      	movs	r3, #20
 800f24e:	4413      	add	r3, r2
 800f250:	69fa      	ldr	r2, [r7, #28]
 800f252:	429a      	cmp	r2, r3
 800f254:	d006      	beq.n	800f264 <tcp_output_segment+0x170>
 800f256:	4b10      	ldr	r3, [pc, #64]	; (800f298 <tcp_output_segment+0x1a4>)
 800f258:	f240 621c 	movw	r2, #1564	; 0x61c
 800f25c:	4914      	ldr	r1, [pc, #80]	; (800f2b0 <tcp_output_segment+0x1bc>)
 800f25e:	4810      	ldr	r0, [pc, #64]	; (800f2a0 <tcp_output_segment+0x1ac>)
 800f260:	f005 fe12 	bl	8014e88 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6858      	ldr	r0, [r3, #4]
 800f268:	68b9      	ldr	r1, [r7, #8]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	1d1c      	adds	r4, r3, #4
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	7add      	ldrb	r5, [r3, #11]
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	7a9b      	ldrb	r3, [r3, #10]
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	9202      	str	r2, [sp, #8]
 800f27a:	2206      	movs	r2, #6
 800f27c:	9201      	str	r2, [sp, #4]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	462b      	mov	r3, r5
 800f282:	4622      	mov	r2, r4
 800f284:	f004 fbe0 	bl	8013a48 <ip4_output_if>
 800f288:	4603      	mov	r3, r0
 800f28a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3720      	adds	r7, #32
 800f294:	46bd      	mov	sp, r7
 800f296:	bdb0      	pop	{r4, r5, r7, pc}
 800f298:	08017554 	.word	0x08017554
 800f29c:	08017b18 	.word	0x08017b18
 800f2a0:	080175a8 	.word	0x080175a8
 800f2a4:	08017b38 	.word	0x08017b38
 800f2a8:	08017b58 	.word	0x08017b58
 800f2ac:	2000d3bc 	.word	0x2000d3bc
 800f2b0:	08017b7c 	.word	0x08017b7c

0800f2b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_rexmit_rto_prepare+0x1c>
 800f2c2:	4b31      	ldr	r3, [pc, #196]	; (800f388 <tcp_rexmit_rto_prepare+0xd4>)
 800f2c4:	f240 6263 	movw	r2, #1635	; 0x663
 800f2c8:	4930      	ldr	r1, [pc, #192]	; (800f38c <tcp_rexmit_rto_prepare+0xd8>)
 800f2ca:	4831      	ldr	r0, [pc, #196]	; (800f390 <tcp_rexmit_rto_prepare+0xdc>)
 800f2cc:	f005 fddc 	bl	8014e88 <iprintf>

  if (pcb->unacked == NULL) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d102      	bne.n	800f2de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f2d8:	f06f 0305 	mvn.w	r3, #5
 800f2dc:	e050      	b.n	800f380 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	e00b      	b.n	800f2fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fee4 	bl	800f0b4 <tcp_output_segment_busy>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d002      	beq.n	800f2f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f2f2:	f06f 0305 	mvn.w	r3, #5
 800f2f6:	e043      	b.n	800f380 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1ef      	bne.n	800f2e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	f7ff fed4 	bl	800f0b4 <tcp_output_segment_busy>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d002      	beq.n	800f318 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f312:	f06f 0305 	mvn.w	r3, #5
 800f316:	e033      	b.n	800f380 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	8b5b      	ldrh	r3, [r3, #26]
 800f332:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f336:	b29a      	uxth	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	f7f9 fcb1 	bl	8008caa <lwip_htonl>
 800f348:	4604      	mov	r4, r0
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	891b      	ldrh	r3, [r3, #8]
 800f34e:	461d      	mov	r5, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	899b      	ldrh	r3, [r3, #12]
 800f356:	b29b      	uxth	r3, r3
 800f358:	4618      	mov	r0, r3
 800f35a:	f7f9 fc91 	bl	8008c80 <lwip_htons>
 800f35e:	4603      	mov	r3, r0
 800f360:	b2db      	uxtb	r3, r3
 800f362:	f003 0303 	and.w	r3, r3, #3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <tcp_rexmit_rto_prepare+0xba>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <tcp_rexmit_rto_prepare+0xbc>
 800f36e:	2300      	movs	r3, #0
 800f370:	442b      	add	r3, r5
 800f372:	18e2      	adds	r2, r4, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f37e:	2300      	movs	r3, #0
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bdb0      	pop	{r4, r5, r7, pc}
 800f388:	08017554 	.word	0x08017554
 800f38c:	08017b90 	.word	0x08017b90
 800f390:	080175a8 	.word	0x080175a8

0800f394 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d106      	bne.n	800f3b0 <tcp_rexmit_rto_commit+0x1c>
 800f3a2:	4b0d      	ldr	r3, [pc, #52]	; (800f3d8 <tcp_rexmit_rto_commit+0x44>)
 800f3a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f3a8:	490c      	ldr	r1, [pc, #48]	; (800f3dc <tcp_rexmit_rto_commit+0x48>)
 800f3aa:	480d      	ldr	r0, [pc, #52]	; (800f3e0 <tcp_rexmit_rto_commit+0x4c>)
 800f3ac:	f005 fd6c 	bl	8014e88 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3b6:	2bff      	cmp	r3, #255	; 0xff
 800f3b8:	d007      	beq.n	800f3ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	b2da      	uxtb	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff fc7e 	bl	800eccc <tcp_output>
}
 800f3d0:	bf00      	nop
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	08017554 	.word	0x08017554
 800f3dc:	08017bb4 	.word	0x08017bb4
 800f3e0:	080175a8 	.word	0x080175a8

0800f3e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d106      	bne.n	800f400 <tcp_rexmit_rto+0x1c>
 800f3f2:	4b0a      	ldr	r3, [pc, #40]	; (800f41c <tcp_rexmit_rto+0x38>)
 800f3f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f3f8:	4909      	ldr	r1, [pc, #36]	; (800f420 <tcp_rexmit_rto+0x3c>)
 800f3fa:	480a      	ldr	r0, [pc, #40]	; (800f424 <tcp_rexmit_rto+0x40>)
 800f3fc:	f005 fd44 	bl	8014e88 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ff57 	bl	800f2b4 <tcp_rexmit_rto_prepare>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d102      	bne.n	800f412 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff ffc1 	bl	800f394 <tcp_rexmit_rto_commit>
  }
}
 800f412:	bf00      	nop
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	08017554 	.word	0x08017554
 800f420:	08017bd8 	.word	0x08017bd8
 800f424:	080175a8 	.word	0x080175a8

0800f428 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f428:	b590      	push	{r4, r7, lr}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d106      	bne.n	800f444 <tcp_rexmit+0x1c>
 800f436:	4b2f      	ldr	r3, [pc, #188]	; (800f4f4 <tcp_rexmit+0xcc>)
 800f438:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f43c:	492e      	ldr	r1, [pc, #184]	; (800f4f8 <tcp_rexmit+0xd0>)
 800f43e:	482f      	ldr	r0, [pc, #188]	; (800f4fc <tcp_rexmit+0xd4>)
 800f440:	f005 fd22 	bl	8014e88 <iprintf>

  if (pcb->unacked == NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d102      	bne.n	800f452 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f44c:	f06f 0305 	mvn.w	r3, #5
 800f450:	e04c      	b.n	800f4ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f456:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f458:	68b8      	ldr	r0, [r7, #8]
 800f45a:	f7ff fe2b 	bl	800f0b4 <tcp_output_segment_busy>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d002      	beq.n	800f46a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f464:	f06f 0305 	mvn.w	r3, #5
 800f468:	e040      	b.n	800f4ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	336c      	adds	r3, #108	; 0x6c
 800f476:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f478:	e002      	b.n	800f480 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d011      	beq.n	800f4ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	4618      	mov	r0, r3
 800f492:	f7f9 fc0a 	bl	8008caa <lwip_htonl>
 800f496:	4604      	mov	r4, r0
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7f9 fc03 	bl	8008caa <lwip_htonl>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dbe6      	blt.n	800f47a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d103      	bne.n	800f4ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4d0:	2bff      	cmp	r3, #255	; 0xff
 800f4d2:	d007      	beq.n	800f4e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4da:	3301      	adds	r3, #1
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	08017554 	.word	0x08017554
 800f4f8:	08017bf4 	.word	0x08017bf4
 800f4fc:	080175a8 	.word	0x080175a8

0800f500 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d106      	bne.n	800f51c <tcp_rexmit_fast+0x1c>
 800f50e:	4b2a      	ldr	r3, [pc, #168]	; (800f5b8 <tcp_rexmit_fast+0xb8>)
 800f510:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f514:	4929      	ldr	r1, [pc, #164]	; (800f5bc <tcp_rexmit_fast+0xbc>)
 800f516:	482a      	ldr	r0, [pc, #168]	; (800f5c0 <tcp_rexmit_fast+0xc0>)
 800f518:	f005 fcb6 	bl	8014e88 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f520:	2b00      	cmp	r3, #0
 800f522:	d045      	beq.n	800f5b0 <tcp_rexmit_fast+0xb0>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	8b5b      	ldrh	r3, [r3, #26]
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d13f      	bne.n	800f5b0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f7ff ff79 	bl	800f428 <tcp_rexmit>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d139      	bne.n	800f5b0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f548:	4293      	cmp	r3, r2
 800f54a:	bf28      	it	cs
 800f54c:	4613      	movcs	r3, r2
 800f54e:	b29b      	uxth	r3, r3
 800f550:	2b00      	cmp	r3, #0
 800f552:	da00      	bge.n	800f556 <tcp_rexmit_fast+0x56>
 800f554:	3301      	adds	r3, #1
 800f556:	105b      	asrs	r3, r3, #1
 800f558:	b29a      	uxth	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f566:	461a      	mov	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	429a      	cmp	r2, r3
 800f570:	d206      	bcs.n	800f580 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	b29a      	uxth	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f58a:	4619      	mov	r1, r3
 800f58c:	0049      	lsls	r1, r1, #1
 800f58e:	440b      	add	r3, r1
 800f590:	b29b      	uxth	r3, r3
 800f592:	4413      	add	r3, r2
 800f594:	b29a      	uxth	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	8b5b      	ldrh	r3, [r3, #26]
 800f5a0:	f043 0304 	orr.w	r3, r3, #4
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f5b0:	bf00      	nop
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	08017554 	.word	0x08017554
 800f5bc:	08017c0c 	.word	0x08017c0c
 800f5c0:	080175a8 	.word	0x080175a8

0800f5c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	607b      	str	r3, [r7, #4]
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	817b      	strh	r3, [r7, #10]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f5d6:	897a      	ldrh	r2, [r7, #10]
 800f5d8:	893b      	ldrh	r3, [r7, #8]
 800f5da:	4413      	add	r3, r2
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	3314      	adds	r3, #20
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	2022      	movs	r0, #34	; 0x22
 800f5ea:	f7fa fbfb 	bl	8009de4 <pbuf_alloc>
 800f5ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d04d      	beq.n	800f692 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f5f6:	897b      	ldrh	r3, [r7, #10]
 800f5f8:	3313      	adds	r3, #19
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	8952      	ldrh	r2, [r2, #10]
 800f5fe:	4293      	cmp	r3, r2
 800f600:	db06      	blt.n	800f610 <tcp_output_alloc_header_common+0x4c>
 800f602:	4b26      	ldr	r3, [pc, #152]	; (800f69c <tcp_output_alloc_header_common+0xd8>)
 800f604:	f240 7223 	movw	r2, #1827	; 0x723
 800f608:	4925      	ldr	r1, [pc, #148]	; (800f6a0 <tcp_output_alloc_header_common+0xdc>)
 800f60a:	4826      	ldr	r0, [pc, #152]	; (800f6a4 <tcp_output_alloc_header_common+0xe0>)
 800f60c:	f005 fc3c 	bl	8014e88 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f616:	8c3b      	ldrh	r3, [r7, #32]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7f9 fb31 	bl	8008c80 <lwip_htons>
 800f61e:	4603      	mov	r3, r0
 800f620:	461a      	mov	r2, r3
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f628:	4618      	mov	r0, r3
 800f62a:	f7f9 fb29 	bl	8008c80 <lwip_htons>
 800f62e:	4603      	mov	r3, r0
 800f630:	461a      	mov	r2, r3
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7f9 fb34 	bl	8008caa <lwip_htonl>
 800f642:	4602      	mov	r2, r0
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f648:	897b      	ldrh	r3, [r7, #10]
 800f64a:	089b      	lsrs	r3, r3, #2
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	3305      	adds	r3, #5
 800f650:	b29b      	uxth	r3, r3
 800f652:	031b      	lsls	r3, r3, #12
 800f654:	b29a      	uxth	r2, r3
 800f656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	4313      	orrs	r3, r2
 800f65e:	b29b      	uxth	r3, r3
 800f660:	4618      	mov	r0, r3
 800f662:	f7f9 fb0d 	bl	8008c80 <lwip_htons>
 800f666:	4603      	mov	r3, r0
 800f668:	461a      	mov	r2, r3
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f66e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f670:	4618      	mov	r0, r3
 800f672:	f7f9 fb05 	bl	8008c80 <lwip_htons>
 800f676:	4603      	mov	r3, r0
 800f678:	461a      	mov	r2, r3
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	2200      	movs	r2, #0
 800f682:	741a      	strb	r2, [r3, #16]
 800f684:	2200      	movs	r2, #0
 800f686:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	2200      	movs	r2, #0
 800f68c:	749a      	strb	r2, [r3, #18]
 800f68e:	2200      	movs	r2, #0
 800f690:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f692:	697b      	ldr	r3, [r7, #20]
}
 800f694:	4618      	mov	r0, r3
 800f696:	3718      	adds	r7, #24
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08017554 	.word	0x08017554
 800f6a0:	08017c2c 	.word	0x08017c2c
 800f6a4:	080175a8 	.word	0x080175a8

0800f6a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f6a8:	b5b0      	push	{r4, r5, r7, lr}
 800f6aa:	b08a      	sub	sp, #40	; 0x28
 800f6ac:	af04      	add	r7, sp, #16
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	607b      	str	r3, [r7, #4]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	817b      	strh	r3, [r7, #10]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <tcp_output_alloc_header+0x26>
 800f6c0:	4b15      	ldr	r3, [pc, #84]	; (800f718 <tcp_output_alloc_header+0x70>)
 800f6c2:	f240 7242 	movw	r2, #1858	; 0x742
 800f6c6:	4915      	ldr	r1, [pc, #84]	; (800f71c <tcp_output_alloc_header+0x74>)
 800f6c8:	4815      	ldr	r0, [pc, #84]	; (800f720 <tcp_output_alloc_header+0x78>)
 800f6ca:	f005 fbdd 	bl	8014e88 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	8adb      	ldrh	r3, [r3, #22]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	8b12      	ldrh	r2, [r2, #24]
 800f6da:	68f9      	ldr	r1, [r7, #12]
 800f6dc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f6de:	893d      	ldrh	r5, [r7, #8]
 800f6e0:	897c      	ldrh	r4, [r7, #10]
 800f6e2:	9103      	str	r1, [sp, #12]
 800f6e4:	2110      	movs	r1, #16
 800f6e6:	9102      	str	r1, [sp, #8]
 800f6e8:	9201      	str	r2, [sp, #4]
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	462a      	mov	r2, r5
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	f7ff ff67 	bl	800f5c4 <tcp_output_alloc_header_common>
 800f6f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d006      	beq.n	800f70c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f706:	441a      	add	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f70c:	697b      	ldr	r3, [r7, #20]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bdb0      	pop	{r4, r5, r7, pc}
 800f716:	bf00      	nop
 800f718:	08017554 	.word	0x08017554
 800f71c:	08017c5c 	.word	0x08017c5c
 800f720:	080175a8 	.word	0x080175a8

0800f724 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	4611      	mov	r1, r2
 800f730:	461a      	mov	r2, r3
 800f732:	460b      	mov	r3, r1
 800f734:	71fb      	strb	r3, [r7, #7]
 800f736:	4613      	mov	r3, r2
 800f738:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d106      	bne.n	800f752 <tcp_output_fill_options+0x2e>
 800f744:	4b12      	ldr	r3, [pc, #72]	; (800f790 <tcp_output_fill_options+0x6c>)
 800f746:	f240 7256 	movw	r2, #1878	; 0x756
 800f74a:	4912      	ldr	r1, [pc, #72]	; (800f794 <tcp_output_fill_options+0x70>)
 800f74c:	4812      	ldr	r0, [pc, #72]	; (800f798 <tcp_output_fill_options+0x74>)
 800f74e:	f005 fb9b 	bl	8014e88 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	3314      	adds	r3, #20
 800f75c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f75e:	8bfb      	ldrh	r3, [r7, #30]
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	461a      	mov	r2, r3
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	f003 0304 	and.w	r3, r3, #4
 800f76c:	4413      	add	r3, r2
 800f76e:	3314      	adds	r3, #20
 800f770:	69ba      	ldr	r2, [r7, #24]
 800f772:	4413      	add	r3, r2
 800f774:	697a      	ldr	r2, [r7, #20]
 800f776:	429a      	cmp	r2, r3
 800f778:	d006      	beq.n	800f788 <tcp_output_fill_options+0x64>
 800f77a:	4b05      	ldr	r3, [pc, #20]	; (800f790 <tcp_output_fill_options+0x6c>)
 800f77c:	f240 7275 	movw	r2, #1909	; 0x775
 800f780:	4906      	ldr	r1, [pc, #24]	; (800f79c <tcp_output_fill_options+0x78>)
 800f782:	4805      	ldr	r0, [pc, #20]	; (800f798 <tcp_output_fill_options+0x74>)
 800f784:	f005 fb80 	bl	8014e88 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f788:	bf00      	nop
 800f78a:	3720      	adds	r7, #32
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	08017554 	.word	0x08017554
 800f794:	08017c84 	.word	0x08017c84
 800f798:	080175a8 	.word	0x080175a8
 800f79c:	08017b7c 	.word	0x08017b7c

0800f7a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08a      	sub	sp, #40	; 0x28
 800f7a4:	af04      	add	r7, sp, #16
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d106      	bne.n	800f7c2 <tcp_output_control_segment+0x22>
 800f7b4:	4b1c      	ldr	r3, [pc, #112]	; (800f828 <tcp_output_control_segment+0x88>)
 800f7b6:	f240 7287 	movw	r2, #1927	; 0x787
 800f7ba:	491c      	ldr	r1, [pc, #112]	; (800f82c <tcp_output_control_segment+0x8c>)
 800f7bc:	481c      	ldr	r0, [pc, #112]	; (800f830 <tcp_output_control_segment+0x90>)
 800f7be:	f005 fb63 	bl	8014e88 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f7fe ff40 	bl	800e64c <tcp_route>
 800f7cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d102      	bne.n	800f7da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f7d4:	23fc      	movs	r3, #252	; 0xfc
 800f7d6:	75fb      	strb	r3, [r7, #23]
 800f7d8:	e01c      	b.n	800f814 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d006      	beq.n	800f7ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	7adb      	ldrb	r3, [r3, #11]
 800f7e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	7a9b      	ldrb	r3, [r3, #10]
 800f7ea:	757b      	strb	r3, [r7, #21]
 800f7ec:	e003      	b.n	800f7f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f7ee:	23ff      	movs	r3, #255	; 0xff
 800f7f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f7f6:	7dba      	ldrb	r2, [r7, #22]
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	9302      	str	r3, [sp, #8]
 800f7fc:	2306      	movs	r3, #6
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	7d7b      	ldrb	r3, [r7, #21]
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	4613      	mov	r3, r2
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f004 f91c 	bl	8013a48 <ip4_output_if>
 800f810:	4603      	mov	r3, r0
 800f812:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f814:	68b8      	ldr	r0, [r7, #8]
 800f816:	f7fa fdc9 	bl	800a3ac <pbuf_free>
  return err;
 800f81a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	08017554 	.word	0x08017554
 800f82c:	08017cac 	.word	0x08017cac
 800f830:	080175a8 	.word	0x080175a8

0800f834 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b08b      	sub	sp, #44	; 0x2c
 800f838:	af04      	add	r7, sp, #16
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d106      	bne.n	800f856 <tcp_rst+0x22>
 800f848:	4b1f      	ldr	r3, [pc, #124]	; (800f8c8 <tcp_rst+0x94>)
 800f84a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f84e:	491f      	ldr	r1, [pc, #124]	; (800f8cc <tcp_rst+0x98>)
 800f850:	481f      	ldr	r0, [pc, #124]	; (800f8d0 <tcp_rst+0x9c>)
 800f852:	f005 fb19 	bl	8014e88 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d106      	bne.n	800f86a <tcp_rst+0x36>
 800f85c:	4b1a      	ldr	r3, [pc, #104]	; (800f8c8 <tcp_rst+0x94>)
 800f85e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f862:	491c      	ldr	r1, [pc, #112]	; (800f8d4 <tcp_rst+0xa0>)
 800f864:	481a      	ldr	r0, [pc, #104]	; (800f8d0 <tcp_rst+0x9c>)
 800f866:	f005 fb0f 	bl	8014e88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f86a:	2300      	movs	r3, #0
 800f86c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f86e:	f246 0308 	movw	r3, #24584	; 0x6008
 800f872:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f874:	7dfb      	ldrb	r3, [r7, #23]
 800f876:	b29c      	uxth	r4, r3
 800f878:	68b8      	ldr	r0, [r7, #8]
 800f87a:	f7f9 fa16 	bl	8008caa <lwip_htonl>
 800f87e:	4602      	mov	r2, r0
 800f880:	8abb      	ldrh	r3, [r7, #20]
 800f882:	9303      	str	r3, [sp, #12]
 800f884:	2314      	movs	r3, #20
 800f886:	9302      	str	r3, [sp, #8]
 800f888:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	4613      	mov	r3, r2
 800f892:	2200      	movs	r2, #0
 800f894:	4621      	mov	r1, r4
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7ff fe94 	bl	800f5c4 <tcp_output_alloc_header_common>
 800f89c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00c      	beq.n	800f8be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	6939      	ldr	r1, [r7, #16]
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff ff3a 	bl	800f724 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	6939      	ldr	r1, [r7, #16]
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f7ff ff72 	bl	800f7a0 <tcp_output_control_segment>
 800f8bc:	e000      	b.n	800f8c0 <tcp_rst+0x8c>
    return;
 800f8be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f8c0:	371c      	adds	r7, #28
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd90      	pop	{r4, r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	08017554 	.word	0x08017554
 800f8cc:	08017cd8 	.word	0x08017cd8
 800f8d0:	080175a8 	.word	0x080175a8
 800f8d4:	08017cf4 	.word	0x08017cf4

0800f8d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <tcp_send_empty_ack+0x24>
 800f8ee:	4b28      	ldr	r3, [pc, #160]	; (800f990 <tcp_send_empty_ack+0xb8>)
 800f8f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f8f4:	4927      	ldr	r1, [pc, #156]	; (800f994 <tcp_send_empty_ack+0xbc>)
 800f8f6:	4828      	ldr	r0, [pc, #160]	; (800f998 <tcp_send_empty_ack+0xc0>)
 800f8f8:	f005 fac6 	bl	8014e88 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8fc:	7dfb      	ldrb	r3, [r7, #23]
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	b2db      	uxtb	r3, r3
 800f902:	f003 0304 	and.w	r3, r3, #4
 800f906:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f908:	7d7b      	ldrb	r3, [r7, #21]
 800f90a:	b29c      	uxth	r4, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f910:	4618      	mov	r0, r3
 800f912:	f7f9 f9ca 	bl	8008caa <lwip_htonl>
 800f916:	4603      	mov	r3, r0
 800f918:	2200      	movs	r2, #0
 800f91a:	4621      	mov	r1, r4
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7ff fec3 	bl	800f6a8 <tcp_output_alloc_header>
 800f922:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d109      	bne.n	800f93e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	8b5b      	ldrh	r3, [r3, #26]
 800f92e:	f043 0303 	orr.w	r3, r3, #3
 800f932:	b29a      	uxth	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f938:	f06f 0301 	mvn.w	r3, #1
 800f93c:	e023      	b.n	800f986 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f93e:	7dbb      	ldrb	r3, [r7, #22]
 800f940:	7dfa      	ldrb	r2, [r7, #23]
 800f942:	6939      	ldr	r1, [r7, #16]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff feed 	bl	800f724 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3304      	adds	r3, #4
 800f950:	6939      	ldr	r1, [r7, #16]
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff ff24 	bl	800f7a0 <tcp_output_control_segment>
 800f958:	4603      	mov	r3, r0
 800f95a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d007      	beq.n	800f974 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8b5b      	ldrh	r3, [r3, #26]
 800f968:	f043 0303 	orr.w	r3, r3, #3
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	835a      	strh	r2, [r3, #26]
 800f972:	e006      	b.n	800f982 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	8b5b      	ldrh	r3, [r3, #26]
 800f978:	f023 0303 	bic.w	r3, r3, #3
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f986:	4618      	mov	r0, r3
 800f988:	371c      	adds	r7, #28
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd90      	pop	{r4, r7, pc}
 800f98e:	bf00      	nop
 800f990:	08017554 	.word	0x08017554
 800f994:	08017d10 	.word	0x08017d10
 800f998:	080175a8 	.word	0x080175a8

0800f99c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f99c:	b590      	push	{r4, r7, lr}
 800f99e:	b087      	sub	sp, #28
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d106      	bne.n	800f9bc <tcp_keepalive+0x20>
 800f9ae:	4b18      	ldr	r3, [pc, #96]	; (800fa10 <tcp_keepalive+0x74>)
 800f9b0:	f640 0224 	movw	r2, #2084	; 0x824
 800f9b4:	4917      	ldr	r1, [pc, #92]	; (800fa14 <tcp_keepalive+0x78>)
 800f9b6:	4818      	ldr	r0, [pc, #96]	; (800fa18 <tcp_keepalive+0x7c>)
 800f9b8:	f005 fa66 	bl	8014e88 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	b29c      	uxth	r4, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f9 f96f 	bl	8008caa <lwip_htonl>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7ff fe68 	bl	800f6a8 <tcp_output_alloc_header>
 800f9d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d102      	bne.n	800f9e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e4:	e010      	b.n	800fa08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	6939      	ldr	r1, [r7, #16]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff fe99 	bl	800f724 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	6939      	ldr	r1, [r7, #16]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff fed0 	bl	800f7a0 <tcp_output_control_segment>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fa04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	371c      	adds	r7, #28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd90      	pop	{r4, r7, pc}
 800fa10:	08017554 	.word	0x08017554
 800fa14:	08017d30 	.word	0x08017d30
 800fa18:	080175a8 	.word	0x080175a8

0800fa1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fa1c:	b590      	push	{r4, r7, lr}
 800fa1e:	b08b      	sub	sp, #44	; 0x2c
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa24:	2300      	movs	r3, #0
 800fa26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d106      	bne.n	800fa3e <tcp_zero_window_probe+0x22>
 800fa30:	4b4c      	ldr	r3, [pc, #304]	; (800fb64 <tcp_zero_window_probe+0x148>)
 800fa32:	f640 024f 	movw	r2, #2127	; 0x84f
 800fa36:	494c      	ldr	r1, [pc, #304]	; (800fb68 <tcp_zero_window_probe+0x14c>)
 800fa38:	484c      	ldr	r0, [pc, #304]	; (800fb6c <tcp_zero_window_probe+0x150>)
 800fa3a:	f005 fa25 	bl	8014e88 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fa44:	6a3b      	ldr	r3, [r7, #32]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e086      	b.n	800fb5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa54:	2bff      	cmp	r3, #255	; 0xff
 800fa56:	d007      	beq.n	800fa68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	899b      	ldrh	r3, [r3, #12]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f9 f905 	bl	8008c80 <lwip_htons>
 800fa76:	4603      	mov	r3, r0
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	f003 0301 	and.w	r3, r3, #1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d005      	beq.n	800fa8e <tcp_zero_window_probe+0x72>
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	891b      	ldrh	r3, [r3, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d101      	bne.n	800fa8e <tcp_zero_window_probe+0x72>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e000      	b.n	800fa90 <tcp_zero_window_probe+0x74>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fa92:	7ffb      	ldrb	r3, [r7, #31]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	bf0c      	ite	eq
 800fa98:	2301      	moveq	r3, #1
 800fa9a:	2300      	movne	r3, #0
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800faa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faa4:	b299      	uxth	r1, r3
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	8bba      	ldrh	r2, [r7, #28]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff fdfa 	bl	800f6a8 <tcp_output_alloc_header>
 800fab4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fabc:	f04f 33ff 	mov.w	r3, #4294967295
 800fac0:	e04c      	b.n	800fb5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fac8:	7ffb      	ldrb	r3, [r7, #31]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d011      	beq.n	800faf2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	899b      	ldrh	r3, [r3, #12]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	b21b      	sxth	r3, r3
 800fad6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fada:	b21c      	sxth	r4, r3
 800fadc:	2011      	movs	r0, #17
 800fade:	f7f9 f8cf 	bl	8008c80 <lwip_htons>
 800fae2:	4603      	mov	r3, r0
 800fae4:	b21b      	sxth	r3, r3
 800fae6:	4323      	orrs	r3, r4
 800fae8:	b21b      	sxth	r3, r3
 800faea:	b29a      	uxth	r2, r3
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	819a      	strh	r2, [r3, #12]
 800faf0:	e010      	b.n	800fb14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	3314      	adds	r3, #20
 800faf8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fafa:	6a3b      	ldr	r3, [r7, #32]
 800fafc:	6858      	ldr	r0, [r3, #4]
 800fafe:	6a3b      	ldr	r3, [r7, #32]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	891a      	ldrh	r2, [r3, #8]
 800fb04:	6a3b      	ldr	r3, [r7, #32]
 800fb06:	891b      	ldrh	r3, [r3, #8]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	6939      	ldr	r1, [r7, #16]
 800fb10:	f7fa fe52 	bl	800a7b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fb14:	6a3b      	ldr	r3, [r7, #32]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7f9 f8c5 	bl	8008caa <lwip_htonl>
 800fb20:	4603      	mov	r3, r0
 800fb22:	3301      	adds	r3, #1
 800fb24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	da02      	bge.n	800fb38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	69b9      	ldr	r1, [r7, #24]
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7ff fdef 	bl	800f724 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	69b9      	ldr	r1, [r7, #24]
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fe26 	bl	800f7a0 <tcp_output_control_segment>
 800fb54:	4603      	mov	r3, r0
 800fb56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fb58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	372c      	adds	r7, #44	; 0x2c
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd90      	pop	{r4, r7, pc}
 800fb64:	08017554 	.word	0x08017554
 800fb68:	08017d4c 	.word	0x08017d4c
 800fb6c:	080175a8 	.word	0x080175a8

0800fb70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fb78:	f7fa ff0c 	bl	800a994 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	; (800fba8 <tcpip_tcp_timer+0x38>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d103      	bne.n	800fb8c <tcpip_tcp_timer+0x1c>
 800fb84:	4b09      	ldr	r3, [pc, #36]	; (800fbac <tcpip_tcp_timer+0x3c>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d005      	beq.n	800fb98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	4908      	ldr	r1, [pc, #32]	; (800fbb0 <tcpip_tcp_timer+0x40>)
 800fb90:	20fa      	movs	r0, #250	; 0xfa
 800fb92:	f000 f8f3 	bl	800fd7c <sys_timeout>
 800fb96:	e003      	b.n	800fba0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fb98:	4b06      	ldr	r3, [pc, #24]	; (800fbb4 <tcpip_tcp_timer+0x44>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]
  }
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	2000d3c8 	.word	0x2000d3c8
 800fbac:	2000d3cc 	.word	0x2000d3cc
 800fbb0:	0800fb71 	.word	0x0800fb71
 800fbb4:	2000d414 	.word	0x2000d414

0800fbb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fbbc:	4b0a      	ldr	r3, [pc, #40]	; (800fbe8 <tcp_timer_needed+0x30>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10f      	bne.n	800fbe4 <tcp_timer_needed+0x2c>
 800fbc4:	4b09      	ldr	r3, [pc, #36]	; (800fbec <tcp_timer_needed+0x34>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d103      	bne.n	800fbd4 <tcp_timer_needed+0x1c>
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <tcp_timer_needed+0x38>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d007      	beq.n	800fbe4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fbd4:	4b04      	ldr	r3, [pc, #16]	; (800fbe8 <tcp_timer_needed+0x30>)
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fbda:	2200      	movs	r2, #0
 800fbdc:	4905      	ldr	r1, [pc, #20]	; (800fbf4 <tcp_timer_needed+0x3c>)
 800fbde:	20fa      	movs	r0, #250	; 0xfa
 800fbe0:	f000 f8cc 	bl	800fd7c <sys_timeout>
  }
}
 800fbe4:	bf00      	nop
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	2000d414 	.word	0x2000d414
 800fbec:	2000d3c8 	.word	0x2000d3c8
 800fbf0:	2000d3cc 	.word	0x2000d3cc
 800fbf4:	0800fb71 	.word	0x0800fb71

0800fbf8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fc04:	200a      	movs	r0, #10
 800fc06:	f7f9 fd13 	bl	8009630 <memp_malloc>
 800fc0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d109      	bne.n	800fc26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d151      	bne.n	800fcbc <sys_timeout_abs+0xc4>
 800fc18:	4b2a      	ldr	r3, [pc, #168]	; (800fcc4 <sys_timeout_abs+0xcc>)
 800fc1a:	22be      	movs	r2, #190	; 0xbe
 800fc1c:	492a      	ldr	r1, [pc, #168]	; (800fcc8 <sys_timeout_abs+0xd0>)
 800fc1e:	482b      	ldr	r0, [pc, #172]	; (800fccc <sys_timeout_abs+0xd4>)
 800fc20:	f005 f932 	bl	8014e88 <iprintf>
    return;
 800fc24:	e04a      	b.n	800fcbc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fc3e:	4b24      	ldr	r3, [pc, #144]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fc46:	4a22      	ldr	r2, [pc, #136]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	6013      	str	r3, [r2, #0]
    return;
 800fc4c:	e037      	b.n	800fcbe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	4b1f      	ldr	r3, [pc, #124]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	0fdb      	lsrs	r3, r3, #31
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d007      	beq.n	800fc76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fc66:	4b1a      	ldr	r3, [pc, #104]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fc6e:	4a18      	ldr	r2, [pc, #96]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	6013      	str	r3, [r2, #0]
 800fc74:	e023      	b.n	800fcbe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc76:	4b16      	ldr	r3, [pc, #88]	; (800fcd0 <sys_timeout_abs+0xd8>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	617b      	str	r3, [r7, #20]
 800fc7c:	e01a      	b.n	800fcb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00b      	beq.n	800fc9e <sys_timeout_abs+0xa6>
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	685a      	ldr	r2, [r3, #4]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	0fdb      	lsrs	r3, r3, #31
 800fc94:	f003 0301 	and.w	r3, r3, #1
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d007      	beq.n	800fcae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	601a      	str	r2, [r3, #0]
        break;
 800fcac:	e007      	b.n	800fcbe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e1      	bne.n	800fc7e <sys_timeout_abs+0x86>
 800fcba:	e000      	b.n	800fcbe <sys_timeout_abs+0xc6>
    return;
 800fcbc:	bf00      	nop
      }
    }
  }
}
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	08017d70 	.word	0x08017d70
 800fcc8:	08017da4 	.word	0x08017da4
 800fccc:	08017de4 	.word	0x08017de4
 800fcd0:	2000d40c 	.word	0x2000d40c

0800fcd4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4798      	blx	r3

  now = sys_now();
 800fce6:	f7f4 fe3d 	bl	8004964 <sys_now>
 800fcea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b0f      	ldr	r3, [pc, #60]	; (800fd30 <lwip_cyclic_timer+0x5c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	0fdb      	lsrs	r3, r3, #31
 800fd00:	f003 0301 	and.w	r3, r3, #1
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d009      	beq.n	800fd1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	4413      	add	r3, r2
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	4907      	ldr	r1, [pc, #28]	; (800fd34 <lwip_cyclic_timer+0x60>)
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff ff6e 	bl	800fbf8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fd1c:	e004      	b.n	800fd28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	4904      	ldr	r1, [pc, #16]	; (800fd34 <lwip_cyclic_timer+0x60>)
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff ff68 	bl	800fbf8 <sys_timeout_abs>
}
 800fd28:	bf00      	nop
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	2000d410 	.word	0x2000d410
 800fd34:	0800fcd5 	.word	0x0800fcd5

0800fd38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd3e:	2301      	movs	r3, #1
 800fd40:	607b      	str	r3, [r7, #4]
 800fd42:	e00e      	b.n	800fd62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fd44:	4a0b      	ldr	r2, [pc, #44]	; (800fd74 <sys_timeouts_init+0x3c>)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	4a08      	ldr	r2, [pc, #32]	; (800fd74 <sys_timeouts_init+0x3c>)
 800fd52:	4413      	add	r3, r2
 800fd54:	461a      	mov	r2, r3
 800fd56:	4908      	ldr	r1, [pc, #32]	; (800fd78 <sys_timeouts_init+0x40>)
 800fd58:	f000 f810 	bl	800fd7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	607b      	str	r3, [r7, #4]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	d9ed      	bls.n	800fd44 <sys_timeouts_init+0xc>
  }
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	08018d60 	.word	0x08018d60
 800fd78:	0800fcd5 	.word	0x0800fcd5

0800fd7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b086      	sub	sp, #24
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd8e:	d306      	bcc.n	800fd9e <sys_timeout+0x22>
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <sys_timeout+0x40>)
 800fd92:	f240 1229 	movw	r2, #297	; 0x129
 800fd96:	490a      	ldr	r1, [pc, #40]	; (800fdc0 <sys_timeout+0x44>)
 800fd98:	480a      	ldr	r0, [pc, #40]	; (800fdc4 <sys_timeout+0x48>)
 800fd9a:	f005 f875 	bl	8014e88 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fd9e:	f7f4 fde1 	bl	8004964 <sys_now>
 800fda2:	4602      	mov	r2, r0
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	4413      	add	r3, r2
 800fda8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	68b9      	ldr	r1, [r7, #8]
 800fdae:	6978      	ldr	r0, [r7, #20]
 800fdb0:	f7ff ff22 	bl	800fbf8 <sys_timeout_abs>
#endif
}
 800fdb4:	bf00      	nop
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	08017d70 	.word	0x08017d70
 800fdc0:	08017e0c 	.word	0x08017e0c
 800fdc4:	08017de4 	.word	0x08017de4

0800fdc8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fdce:	f7f4 fdc9 	bl	8004964 <sys_now>
 800fdd2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800fdd4:	4b17      	ldr	r3, [pc, #92]	; (800fe34 <sys_check_timeouts+0x6c>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d022      	beq.n	800fe26 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	0fdb      	lsrs	r3, r3, #31
 800fdea:	f003 0301 	and.w	r3, r3, #1
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d11a      	bne.n	800fe2a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a0e      	ldr	r2, [pc, #56]	; (800fe34 <sys_check_timeouts+0x6c>)
 800fdfa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	4a0a      	ldr	r2, [pc, #40]	; (800fe38 <sys_check_timeouts+0x70>)
 800fe0e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fe10:	68b9      	ldr	r1, [r7, #8]
 800fe12:	200a      	movs	r0, #10
 800fe14:	f7f9 fc82 	bl	800971c <memp_free>
    if (handler != NULL) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d0da      	beq.n	800fdd4 <sys_check_timeouts+0xc>
      handler(arg);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6838      	ldr	r0, [r7, #0]
 800fe22:	4798      	blx	r3
  do {
 800fe24:	e7d6      	b.n	800fdd4 <sys_check_timeouts+0xc>
      return;
 800fe26:	bf00      	nop
 800fe28:	e000      	b.n	800fe2c <sys_check_timeouts+0x64>
      return;
 800fe2a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	2000d40c 	.word	0x2000d40c
 800fe38:	2000d410 	.word	0x2000d410

0800fe3c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800fe42:	4b16      	ldr	r3, [pc, #88]	; (800fe9c <sys_timeouts_sleeptime+0x60>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800fe4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4e:	e020      	b.n	800fe92 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800fe50:	f7f4 fd88 	bl	8004964 <sys_now>
 800fe54:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800fe56:	4b11      	ldr	r3, [pc, #68]	; (800fe9c <sys_timeouts_sleeptime+0x60>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	0fdb      	lsrs	r3, r3, #31
 800fe62:	f003 0301 	and.w	r3, r3, #1
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <sys_timeouts_sleeptime+0x34>
    return 0;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	e010      	b.n	800fe92 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800fe70:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <sys_timeouts_sleeptime+0x60>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	da06      	bge.n	800fe90 <sys_timeouts_sleeptime+0x54>
 800fe82:	4b07      	ldr	r3, [pc, #28]	; (800fea0 <sys_timeouts_sleeptime+0x64>)
 800fe84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fe88:	4906      	ldr	r1, [pc, #24]	; (800fea4 <sys_timeouts_sleeptime+0x68>)
 800fe8a:	4807      	ldr	r0, [pc, #28]	; (800fea8 <sys_timeouts_sleeptime+0x6c>)
 800fe8c:	f004 fffc 	bl	8014e88 <iprintf>
    return ret;
 800fe90:	683b      	ldr	r3, [r7, #0]
  }
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000d40c 	.word	0x2000d40c
 800fea0:	08017d70 	.word	0x08017d70
 800fea4:	08017e44 	.word	0x08017e44
 800fea8:	08017de4 	.word	0x08017de4

0800feac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800feb0:	f004 feea 	bl	8014c88 <rand>
 800feb4:	4603      	mov	r3, r0
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800febc:	b29b      	uxth	r3, r3
 800febe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	4b01      	ldr	r3, [pc, #4]	; (800fecc <udp_init+0x20>)
 800fec6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fec8:	bf00      	nop
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	20000018 	.word	0x20000018

0800fed0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800feda:	4b17      	ldr	r3, [pc, #92]	; (800ff38 <udp_new_port+0x68>)
 800fedc:	881b      	ldrh	r3, [r3, #0]
 800fede:	1c5a      	adds	r2, r3, #1
 800fee0:	b291      	uxth	r1, r2
 800fee2:	4a15      	ldr	r2, [pc, #84]	; (800ff38 <udp_new_port+0x68>)
 800fee4:	8011      	strh	r1, [r2, #0]
 800fee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800feea:	4293      	cmp	r3, r2
 800feec:	d103      	bne.n	800fef6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800feee:	4b12      	ldr	r3, [pc, #72]	; (800ff38 <udp_new_port+0x68>)
 800fef0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fef4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fef6:	4b11      	ldr	r3, [pc, #68]	; (800ff3c <udp_new_port+0x6c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	603b      	str	r3, [r7, #0]
 800fefc:	e011      	b.n	800ff22 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	8a5a      	ldrh	r2, [r3, #18]
 800ff02:	4b0d      	ldr	r3, [pc, #52]	; (800ff38 <udp_new_port+0x68>)
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d108      	bne.n	800ff1c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ff0a:	88fb      	ldrh	r3, [r7, #6]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	80fb      	strh	r3, [r7, #6]
 800ff10:	88fb      	ldrh	r3, [r7, #6]
 800ff12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff16:	d3e0      	bcc.n	800feda <udp_new_port+0xa>
        return 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e007      	b.n	800ff2c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	603b      	str	r3, [r7, #0]
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1ea      	bne.n	800fefe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ff28:	4b03      	ldr	r3, [pc, #12]	; (800ff38 <udp_new_port+0x68>)
 800ff2a:	881b      	ldrh	r3, [r3, #0]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	20000018 	.word	0x20000018
 800ff3c:	2000d418 	.word	0x2000d418

0800ff40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d105      	bne.n	800ff60 <udp_input_local_match+0x20>
 800ff54:	4b27      	ldr	r3, [pc, #156]	; (800fff4 <udp_input_local_match+0xb4>)
 800ff56:	2287      	movs	r2, #135	; 0x87
 800ff58:	4927      	ldr	r1, [pc, #156]	; (800fff8 <udp_input_local_match+0xb8>)
 800ff5a:	4828      	ldr	r0, [pc, #160]	; (800fffc <udp_input_local_match+0xbc>)
 800ff5c:	f004 ff94 	bl	8014e88 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d105      	bne.n	800ff72 <udp_input_local_match+0x32>
 800ff66:	4b23      	ldr	r3, [pc, #140]	; (800fff4 <udp_input_local_match+0xb4>)
 800ff68:	2288      	movs	r2, #136	; 0x88
 800ff6a:	4925      	ldr	r1, [pc, #148]	; (8010000 <udp_input_local_match+0xc0>)
 800ff6c:	4823      	ldr	r0, [pc, #140]	; (800fffc <udp_input_local_match+0xbc>)
 800ff6e:	f004 ff8b 	bl	8014e88 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	7a1b      	ldrb	r3, [r3, #8]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00b      	beq.n	800ff92 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	7a1a      	ldrb	r2, [r3, #8]
 800ff7e:	4b21      	ldr	r3, [pc, #132]	; (8010004 <udp_input_local_match+0xc4>)
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff86:	3301      	adds	r3, #1
 800ff88:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d001      	beq.n	800ff92 <udp_input_local_match+0x52>
    return 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e02b      	b.n	800ffea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d018      	beq.n	800ffca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d013      	beq.n	800ffc6 <udp_input_local_match+0x86>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00f      	beq.n	800ffc6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ffa6:	4b17      	ldr	r3, [pc, #92]	; (8010004 <udp_input_local_match+0xc4>)
 800ffa8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ffaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffae:	d00a      	beq.n	800ffc6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	4b13      	ldr	r3, [pc, #76]	; (8010004 <udp_input_local_match+0xc4>)
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	405a      	eors	r2, r3
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d110      	bne.n	800ffe8 <udp_input_local_match+0xa8>
          return 1;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e00f      	b.n	800ffea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d009      	beq.n	800ffe4 <udp_input_local_match+0xa4>
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <udp_input_local_match+0xa4>
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	4b09      	ldr	r3, [pc, #36]	; (8010004 <udp_input_local_match+0xc4>)
 800ffde:	695b      	ldr	r3, [r3, #20]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d101      	bne.n	800ffe8 <udp_input_local_match+0xa8>
        return 1;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e000      	b.n	800ffea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	08017e58 	.word	0x08017e58
 800fff8:	08017e88 	.word	0x08017e88
 800fffc:	08017eac 	.word	0x08017eac
 8010000:	08017ed4 	.word	0x08017ed4
 8010004:	20009c48 	.word	0x20009c48

08010008 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010008:	b590      	push	{r4, r7, lr}
 801000a:	b08d      	sub	sp, #52	; 0x34
 801000c:	af02      	add	r7, sp, #8
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d105      	bne.n	8010028 <udp_input+0x20>
 801001c:	4b7c      	ldr	r3, [pc, #496]	; (8010210 <udp_input+0x208>)
 801001e:	22cf      	movs	r2, #207	; 0xcf
 8010020:	497c      	ldr	r1, [pc, #496]	; (8010214 <udp_input+0x20c>)
 8010022:	487d      	ldr	r0, [pc, #500]	; (8010218 <udp_input+0x210>)
 8010024:	f004 ff30 	bl	8014e88 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d105      	bne.n	801003a <udp_input+0x32>
 801002e:	4b78      	ldr	r3, [pc, #480]	; (8010210 <udp_input+0x208>)
 8010030:	22d0      	movs	r2, #208	; 0xd0
 8010032:	497a      	ldr	r1, [pc, #488]	; (801021c <udp_input+0x214>)
 8010034:	4878      	ldr	r0, [pc, #480]	; (8010218 <udp_input+0x210>)
 8010036:	f004 ff27 	bl	8014e88 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	895b      	ldrh	r3, [r3, #10]
 801003e:	2b07      	cmp	r3, #7
 8010040:	d803      	bhi.n	801004a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7fa f9b2 	bl	800a3ac <pbuf_free>
    goto end;
 8010048:	e0de      	b.n	8010208 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010050:	4b73      	ldr	r3, [pc, #460]	; (8010220 <udp_input+0x218>)
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	4a72      	ldr	r2, [pc, #456]	; (8010220 <udp_input+0x218>)
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	4611      	mov	r1, r2
 801005a:	4618      	mov	r0, r3
 801005c:	f003 fdcc 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 8010060:	4603      	mov	r3, r0
 8010062:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	881b      	ldrh	r3, [r3, #0]
 8010068:	b29b      	uxth	r3, r3
 801006a:	4618      	mov	r0, r3
 801006c:	f7f8 fe08 	bl	8008c80 <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	885b      	ldrh	r3, [r3, #2]
 8010078:	b29b      	uxth	r3, r3
 801007a:	4618      	mov	r0, r3
 801007c:	f7f8 fe00 	bl	8008c80 <lwip_htons>
 8010080:	4603      	mov	r3, r0
 8010082:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010084:	2300      	movs	r3, #0
 8010086:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010088:	2300      	movs	r3, #0
 801008a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801008c:	2300      	movs	r3, #0
 801008e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010090:	4b64      	ldr	r3, [pc, #400]	; (8010224 <udp_input+0x21c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	627b      	str	r3, [r7, #36]	; 0x24
 8010096:	e054      	b.n	8010142 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	8a5b      	ldrh	r3, [r3, #18]
 801009c:	89fa      	ldrh	r2, [r7, #14]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d14a      	bne.n	8010138 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80100a2:	7cfb      	ldrb	r3, [r7, #19]
 80100a4:	461a      	mov	r2, r3
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100aa:	f7ff ff49 	bl	800ff40 <udp_input_local_match>
 80100ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d041      	beq.n	8010138 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	7c1b      	ldrb	r3, [r3, #16]
 80100b8:	f003 0304 	and.w	r3, r3, #4
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d11d      	bne.n	80100fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	61fb      	str	r3, [r7, #28]
 80100ca:	e017      	b.n	80100fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80100cc:	7cfb      	ldrb	r3, [r7, #19]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d014      	beq.n	80100fc <udp_input+0xf4>
 80100d2:	4b53      	ldr	r3, [pc, #332]	; (8010220 <udp_input+0x218>)
 80100d4:	695b      	ldr	r3, [r3, #20]
 80100d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100da:	d10f      	bne.n	80100fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	3304      	adds	r3, #4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d008      	beq.n	80100fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	3304      	adds	r3, #4
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d101      	bne.n	80100fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80100f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	8a9b      	ldrh	r3, [r3, #20]
 8010100:	8a3a      	ldrh	r2, [r7, #16]
 8010102:	429a      	cmp	r2, r3
 8010104:	d118      	bne.n	8010138 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010108:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801010a:	2b00      	cmp	r3, #0
 801010c:	d005      	beq.n	801011a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	685a      	ldr	r2, [r3, #4]
 8010112:	4b43      	ldr	r3, [pc, #268]	; (8010220 <udp_input+0x218>)
 8010114:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010116:	429a      	cmp	r2, r3
 8010118:	d10e      	bne.n	8010138 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801011a:	6a3b      	ldr	r3, [r7, #32]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d014      	beq.n	801014a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010122:	68da      	ldr	r2, [r3, #12]
 8010124:	6a3b      	ldr	r3, [r7, #32]
 8010126:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010128:	4b3e      	ldr	r3, [pc, #248]	; (8010224 <udp_input+0x21c>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010130:	4a3c      	ldr	r2, [pc, #240]	; (8010224 <udp_input+0x21c>)
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010136:	e008      	b.n	801014a <udp_input+0x142>
      }
    }

    prev = pcb;
 8010138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	627b      	str	r3, [r7, #36]	; 0x24
 8010142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1a7      	bne.n	8010098 <udp_input+0x90>
 8010148:	e000      	b.n	801014c <udp_input+0x144>
        break;
 801014a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	2b00      	cmp	r3, #0
 8010150:	d101      	bne.n	8010156 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <udp_input+0x15a>
    for_us = 1;
 801015c:	2301      	movs	r3, #1
 801015e:	76fb      	strb	r3, [r7, #27]
 8010160:	e00a      	b.n	8010178 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	3304      	adds	r3, #4
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	4b2d      	ldr	r3, [pc, #180]	; (8010220 <udp_input+0x218>)
 801016a:	695b      	ldr	r3, [r3, #20]
 801016c:	429a      	cmp	r2, r3
 801016e:	bf0c      	ite	eq
 8010170:	2301      	moveq	r3, #1
 8010172:	2300      	movne	r3, #0
 8010174:	b2db      	uxtb	r3, r3
 8010176:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010178:	7efb      	ldrb	r3, [r7, #27]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d041      	beq.n	8010202 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801017e:	2108      	movs	r1, #8
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7fa f88d 	bl	800a2a0 <pbuf_remove_header>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00a      	beq.n	80101a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801018c:	4b20      	ldr	r3, [pc, #128]	; (8010210 <udp_input+0x208>)
 801018e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010192:	4925      	ldr	r1, [pc, #148]	; (8010228 <udp_input+0x220>)
 8010194:	4820      	ldr	r0, [pc, #128]	; (8010218 <udp_input+0x210>)
 8010196:	f004 fe77 	bl	8014e88 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7fa f906 	bl	800a3ac <pbuf_free>
      goto end;
 80101a0:	e032      	b.n	8010208 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d012      	beq.n	80101ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00a      	beq.n	80101c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	699c      	ldr	r4, [r3, #24]
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	69d8      	ldr	r0, [r3, #28]
 80101b8:	8a3b      	ldrh	r3, [r7, #16]
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	4b1b      	ldr	r3, [pc, #108]	; (801022c <udp_input+0x224>)
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80101c4:	e021      	b.n	801020a <udp_input+0x202>
        pbuf_free(p);
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7fa f8f0 	bl	800a3ac <pbuf_free>
        goto end;
 80101cc:	e01c      	b.n	8010208 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80101ce:	7cfb      	ldrb	r3, [r7, #19]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d112      	bne.n	80101fa <udp_input+0x1f2>
 80101d4:	4b12      	ldr	r3, [pc, #72]	; (8010220 <udp_input+0x218>)
 80101d6:	695b      	ldr	r3, [r3, #20]
 80101d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101dc:	2be0      	cmp	r3, #224	; 0xe0
 80101de:	d00c      	beq.n	80101fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80101e0:	4b0f      	ldr	r3, [pc, #60]	; (8010220 <udp_input+0x218>)
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	3308      	adds	r3, #8
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	b21b      	sxth	r3, r3
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7fa f8ca 	bl	800a386 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80101f2:	2103      	movs	r1, #3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f003 f9c1 	bl	801357c <icmp_dest_unreach>
      pbuf_free(p);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fa f8d6 	bl	800a3ac <pbuf_free>
  return;
 8010200:	e003      	b.n	801020a <udp_input+0x202>
    pbuf_free(p);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7fa f8d2 	bl	800a3ac <pbuf_free>
  return;
 8010208:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801020a:	372c      	adds	r7, #44	; 0x2c
 801020c:	46bd      	mov	sp, r7
 801020e:	bd90      	pop	{r4, r7, pc}
 8010210:	08017e58 	.word	0x08017e58
 8010214:	08017efc 	.word	0x08017efc
 8010218:	08017eac 	.word	0x08017eac
 801021c:	08017f14 	.word	0x08017f14
 8010220:	20009c48 	.word	0x20009c48
 8010224:	2000d418 	.word	0x2000d418
 8010228:	08017f30 	.word	0x08017f30
 801022c:	20009c58 	.word	0x20009c58

08010230 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b088      	sub	sp, #32
 8010234:	af02      	add	r7, sp, #8
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
 801023c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d109      	bne.n	8010258 <udp_sendto_if+0x28>
 8010244:	4b2e      	ldr	r3, [pc, #184]	; (8010300 <udp_sendto_if+0xd0>)
 8010246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801024a:	492e      	ldr	r1, [pc, #184]	; (8010304 <udp_sendto_if+0xd4>)
 801024c:	482e      	ldr	r0, [pc, #184]	; (8010308 <udp_sendto_if+0xd8>)
 801024e:	f004 fe1b 	bl	8014e88 <iprintf>
 8010252:	f06f 030f 	mvn.w	r3, #15
 8010256:	e04f      	b.n	80102f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d109      	bne.n	8010272 <udp_sendto_if+0x42>
 801025e:	4b28      	ldr	r3, [pc, #160]	; (8010300 <udp_sendto_if+0xd0>)
 8010260:	f240 2281 	movw	r2, #641	; 0x281
 8010264:	4929      	ldr	r1, [pc, #164]	; (801030c <udp_sendto_if+0xdc>)
 8010266:	4828      	ldr	r0, [pc, #160]	; (8010308 <udp_sendto_if+0xd8>)
 8010268:	f004 fe0e 	bl	8014e88 <iprintf>
 801026c:	f06f 030f 	mvn.w	r3, #15
 8010270:	e042      	b.n	80102f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d109      	bne.n	801028c <udp_sendto_if+0x5c>
 8010278:	4b21      	ldr	r3, [pc, #132]	; (8010300 <udp_sendto_if+0xd0>)
 801027a:	f240 2282 	movw	r2, #642	; 0x282
 801027e:	4924      	ldr	r1, [pc, #144]	; (8010310 <udp_sendto_if+0xe0>)
 8010280:	4821      	ldr	r0, [pc, #132]	; (8010308 <udp_sendto_if+0xd8>)
 8010282:	f004 fe01 	bl	8014e88 <iprintf>
 8010286:	f06f 030f 	mvn.w	r3, #15
 801028a:	e035      	b.n	80102f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801028c:	6a3b      	ldr	r3, [r7, #32]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d109      	bne.n	80102a6 <udp_sendto_if+0x76>
 8010292:	4b1b      	ldr	r3, [pc, #108]	; (8010300 <udp_sendto_if+0xd0>)
 8010294:	f240 2283 	movw	r2, #643	; 0x283
 8010298:	491e      	ldr	r1, [pc, #120]	; (8010314 <udp_sendto_if+0xe4>)
 801029a:	481b      	ldr	r0, [pc, #108]	; (8010308 <udp_sendto_if+0xd8>)
 801029c:	f004 fdf4 	bl	8014e88 <iprintf>
 80102a0:	f06f 030f 	mvn.w	r3, #15
 80102a4:	e028      	b.n	80102f8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d009      	beq.n	80102c0 <udp_sendto_if+0x90>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d005      	beq.n	80102c0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80102bc:	2be0      	cmp	r3, #224	; 0xe0
 80102be:	d103      	bne.n	80102c8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	3304      	adds	r3, #4
 80102c4:	617b      	str	r3, [r7, #20]
 80102c6:	e00b      	b.n	80102e0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	3304      	adds	r3, #4
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d002      	beq.n	80102dc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80102d6:	f06f 0303 	mvn.w	r3, #3
 80102da:	e00d      	b.n	80102f8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80102e0:	887a      	ldrh	r2, [r7, #2]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	4613      	mov	r3, r2
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	68b9      	ldr	r1, [r7, #8]
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f000 f811 	bl	8010318 <udp_sendto_if_src>
 80102f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	08017e58 	.word	0x08017e58
 8010304:	08017fcc 	.word	0x08017fcc
 8010308:	08017eac 	.word	0x08017eac
 801030c:	08017fe8 	.word	0x08017fe8
 8010310:	08018004 	.word	0x08018004
 8010314:	08018024 	.word	0x08018024

08010318 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b08c      	sub	sp, #48	; 0x30
 801031c:	af04      	add	r7, sp, #16
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d109      	bne.n	8010340 <udp_sendto_if_src+0x28>
 801032c:	4b65      	ldr	r3, [pc, #404]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 801032e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010332:	4965      	ldr	r1, [pc, #404]	; (80104c8 <udp_sendto_if_src+0x1b0>)
 8010334:	4865      	ldr	r0, [pc, #404]	; (80104cc <udp_sendto_if_src+0x1b4>)
 8010336:	f004 fda7 	bl	8014e88 <iprintf>
 801033a:	f06f 030f 	mvn.w	r3, #15
 801033e:	e0bc      	b.n	80104ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d109      	bne.n	801035a <udp_sendto_if_src+0x42>
 8010346:	4b5f      	ldr	r3, [pc, #380]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 8010348:	f240 22d2 	movw	r2, #722	; 0x2d2
 801034c:	4960      	ldr	r1, [pc, #384]	; (80104d0 <udp_sendto_if_src+0x1b8>)
 801034e:	485f      	ldr	r0, [pc, #380]	; (80104cc <udp_sendto_if_src+0x1b4>)
 8010350:	f004 fd9a 	bl	8014e88 <iprintf>
 8010354:	f06f 030f 	mvn.w	r3, #15
 8010358:	e0af      	b.n	80104ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d109      	bne.n	8010374 <udp_sendto_if_src+0x5c>
 8010360:	4b58      	ldr	r3, [pc, #352]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 8010362:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010366:	495b      	ldr	r1, [pc, #364]	; (80104d4 <udp_sendto_if_src+0x1bc>)
 8010368:	4858      	ldr	r0, [pc, #352]	; (80104cc <udp_sendto_if_src+0x1b4>)
 801036a:	f004 fd8d 	bl	8014e88 <iprintf>
 801036e:	f06f 030f 	mvn.w	r3, #15
 8010372:	e0a2      	b.n	80104ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010376:	2b00      	cmp	r3, #0
 8010378:	d109      	bne.n	801038e <udp_sendto_if_src+0x76>
 801037a:	4b52      	ldr	r3, [pc, #328]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 801037c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010380:	4955      	ldr	r1, [pc, #340]	; (80104d8 <udp_sendto_if_src+0x1c0>)
 8010382:	4852      	ldr	r0, [pc, #328]	; (80104cc <udp_sendto_if_src+0x1b4>)
 8010384:	f004 fd80 	bl	8014e88 <iprintf>
 8010388:	f06f 030f 	mvn.w	r3, #15
 801038c:	e095      	b.n	80104ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801038e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010390:	2b00      	cmp	r3, #0
 8010392:	d109      	bne.n	80103a8 <udp_sendto_if_src+0x90>
 8010394:	4b4b      	ldr	r3, [pc, #300]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 8010396:	f240 22d5 	movw	r2, #725	; 0x2d5
 801039a:	4950      	ldr	r1, [pc, #320]	; (80104dc <udp_sendto_if_src+0x1c4>)
 801039c:	484b      	ldr	r0, [pc, #300]	; (80104cc <udp_sendto_if_src+0x1b4>)
 801039e:	f004 fd73 	bl	8014e88 <iprintf>
 80103a2:	f06f 030f 	mvn.w	r3, #15
 80103a6:	e088      	b.n	80104ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	8a5b      	ldrh	r3, [r3, #18]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d10f      	bne.n	80103d0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80103b0:	68f9      	ldr	r1, [r7, #12]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	8a5b      	ldrh	r3, [r3, #18]
 80103b6:	461a      	mov	r2, r3
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f000 f893 	bl	80104e4 <udp_bind>
 80103be:	4603      	mov	r3, r0
 80103c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80103c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80103ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80103ce:	e074      	b.n	80104ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	891b      	ldrh	r3, [r3, #8]
 80103d4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80103d8:	4293      	cmp	r3, r2
 80103da:	d902      	bls.n	80103e2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80103dc:	f04f 33ff 	mov.w	r3, #4294967295
 80103e0:	e06b      	b.n	80104ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80103e2:	2108      	movs	r1, #8
 80103e4:	68b8      	ldr	r0, [r7, #8]
 80103e6:	f7f9 ff4b 	bl	800a280 <pbuf_add_header>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d015      	beq.n	801041c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80103f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103f4:	2108      	movs	r1, #8
 80103f6:	2022      	movs	r0, #34	; 0x22
 80103f8:	f7f9 fcf4 	bl	8009de4 <pbuf_alloc>
 80103fc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d102      	bne.n	801040a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010404:	f04f 33ff 	mov.w	r3, #4294967295
 8010408:	e057      	b.n	80104ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	891b      	ldrh	r3, [r3, #8]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d006      	beq.n	8010420 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010412:	68b9      	ldr	r1, [r7, #8]
 8010414:	69f8      	ldr	r0, [r7, #28]
 8010416:	f7fa f8ed 	bl	800a5f4 <pbuf_chain>
 801041a:	e001      	b.n	8010420 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	895b      	ldrh	r3, [r3, #10]
 8010424:	2b07      	cmp	r3, #7
 8010426:	d806      	bhi.n	8010436 <udp_sendto_if_src+0x11e>
 8010428:	4b26      	ldr	r3, [pc, #152]	; (80104c4 <udp_sendto_if_src+0x1ac>)
 801042a:	f240 320d 	movw	r2, #781	; 0x30d
 801042e:	492c      	ldr	r1, [pc, #176]	; (80104e0 <udp_sendto_if_src+0x1c8>)
 8010430:	4826      	ldr	r0, [pc, #152]	; (80104cc <udp_sendto_if_src+0x1b4>)
 8010432:	f004 fd29 	bl	8014e88 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	8a5b      	ldrh	r3, [r3, #18]
 8010440:	4618      	mov	r0, r3
 8010442:	f7f8 fc1d 	bl	8008c80 <lwip_htons>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801044e:	887b      	ldrh	r3, [r7, #2]
 8010450:	4618      	mov	r0, r3
 8010452:	f7f8 fc15 	bl	8008c80 <lwip_htons>
 8010456:	4603      	mov	r3, r0
 8010458:	461a      	mov	r2, r3
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	2200      	movs	r2, #0
 8010462:	719a      	strb	r2, [r3, #6]
 8010464:	2200      	movs	r2, #0
 8010466:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	891b      	ldrh	r3, [r3, #8]
 801046c:	4618      	mov	r0, r3
 801046e:	f7f8 fc07 	bl	8008c80 <lwip_htons>
 8010472:	4603      	mov	r3, r0
 8010474:	461a      	mov	r2, r3
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801047a:	2311      	movs	r3, #17
 801047c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	7adb      	ldrb	r3, [r3, #11]
 8010482:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	7a9b      	ldrb	r3, [r3, #10]
 8010488:	7cb9      	ldrb	r1, [r7, #18]
 801048a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801048c:	9202      	str	r2, [sp, #8]
 801048e:	7cfa      	ldrb	r2, [r7, #19]
 8010490:	9201      	str	r2, [sp, #4]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	460b      	mov	r3, r1
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801049a:	69f8      	ldr	r0, [r7, #28]
 801049c:	f003 fafe 	bl	8013a9c <ip4_output_if_src>
 80104a0:	4603      	mov	r3, r0
 80104a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80104a4:	69fa      	ldr	r2, [r7, #28]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d004      	beq.n	80104b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80104ac:	69f8      	ldr	r0, [r7, #28]
 80104ae:	f7f9 ff7d 	bl	800a3ac <pbuf_free>
    q = NULL;
 80104b2:	2300      	movs	r3, #0
 80104b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80104b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3720      	adds	r7, #32
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	08017e58 	.word	0x08017e58
 80104c8:	08018044 	.word	0x08018044
 80104cc:	08017eac 	.word	0x08017eac
 80104d0:	08018064 	.word	0x08018064
 80104d4:	08018084 	.word	0x08018084
 80104d8:	080180a8 	.word	0x080180a8
 80104dc:	080180cc 	.word	0x080180cc
 80104e0:	080180f0 	.word	0x080180f0

080104e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	4613      	mov	r3, r2
 80104f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80104f8:	4b39      	ldr	r3, [pc, #228]	; (80105e0 <udp_bind+0xfc>)
 80104fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d109      	bne.n	8010516 <udp_bind+0x32>
 8010502:	4b38      	ldr	r3, [pc, #224]	; (80105e4 <udp_bind+0x100>)
 8010504:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010508:	4937      	ldr	r1, [pc, #220]	; (80105e8 <udp_bind+0x104>)
 801050a:	4838      	ldr	r0, [pc, #224]	; (80105ec <udp_bind+0x108>)
 801050c:	f004 fcbc 	bl	8014e88 <iprintf>
 8010510:	f06f 030f 	mvn.w	r3, #15
 8010514:	e060      	b.n	80105d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801051a:	4b35      	ldr	r3, [pc, #212]	; (80105f0 <udp_bind+0x10c>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	617b      	str	r3, [r7, #20]
 8010520:	e009      	b.n	8010536 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010522:	68fa      	ldr	r2, [r7, #12]
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	429a      	cmp	r2, r3
 8010528:	d102      	bne.n	8010530 <udp_bind+0x4c>
      rebind = 1;
 801052a:	2301      	movs	r3, #1
 801052c:	74fb      	strb	r3, [r7, #19]
      break;
 801052e:	e005      	b.n	801053c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	617b      	str	r3, [r7, #20]
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1f2      	bne.n	8010522 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801053c:	88fb      	ldrh	r3, [r7, #6]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d109      	bne.n	8010556 <udp_bind+0x72>
    port = udp_new_port();
 8010542:	f7ff fcc5 	bl	800fed0 <udp_new_port>
 8010546:	4603      	mov	r3, r0
 8010548:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801054a:	88fb      	ldrh	r3, [r7, #6]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d12c      	bne.n	80105aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010550:	f06f 0307 	mvn.w	r3, #7
 8010554:	e040      	b.n	80105d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010556:	4b26      	ldr	r3, [pc, #152]	; (80105f0 <udp_bind+0x10c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	e022      	b.n	80105a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	429a      	cmp	r2, r3
 8010564:	d01b      	beq.n	801059e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	8a5b      	ldrh	r3, [r3, #18]
 801056a:	88fa      	ldrh	r2, [r7, #6]
 801056c:	429a      	cmp	r2, r3
 801056e:	d116      	bne.n	801059e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010578:	429a      	cmp	r2, r3
 801057a:	d00d      	beq.n	8010598 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00a      	beq.n	8010598 <udp_bind+0xb4>
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d006      	beq.n	8010598 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801058a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801058c:	2b00      	cmp	r3, #0
 801058e:	d003      	beq.n	8010598 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d102      	bne.n	801059e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010598:	f06f 0307 	mvn.w	r3, #7
 801059c:	e01c      	b.n	80105d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	617b      	str	r3, [r7, #20]
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1d9      	bne.n	801055e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d002      	beq.n	80105b6 <udp_bind+0xd2>
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	e000      	b.n	80105b8 <udp_bind+0xd4>
 80105b6:	2300      	movs	r3, #0
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	88fa      	ldrh	r2, [r7, #6]
 80105c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80105c2:	7cfb      	ldrb	r3, [r7, #19]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d106      	bne.n	80105d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80105c8:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <udp_bind+0x10c>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80105d0:	4a07      	ldr	r2, [pc, #28]	; (80105f0 <udp_bind+0x10c>)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	08018d88 	.word	0x08018d88
 80105e4:	08017e58 	.word	0x08017e58
 80105e8:	08018120 	.word	0x08018120
 80105ec:	08017eac 	.word	0x08017eac
 80105f0:	2000d418 	.word	0x2000d418

080105f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b086      	sub	sp, #24
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	4613      	mov	r3, r2
 8010600:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d109      	bne.n	801061c <udp_connect+0x28>
 8010608:	4b2c      	ldr	r3, [pc, #176]	; (80106bc <udp_connect+0xc8>)
 801060a:	f240 4235 	movw	r2, #1077	; 0x435
 801060e:	492c      	ldr	r1, [pc, #176]	; (80106c0 <udp_connect+0xcc>)
 8010610:	482c      	ldr	r0, [pc, #176]	; (80106c4 <udp_connect+0xd0>)
 8010612:	f004 fc39 	bl	8014e88 <iprintf>
 8010616:	f06f 030f 	mvn.w	r3, #15
 801061a:	e04b      	b.n	80106b4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d109      	bne.n	8010636 <udp_connect+0x42>
 8010622:	4b26      	ldr	r3, [pc, #152]	; (80106bc <udp_connect+0xc8>)
 8010624:	f240 4236 	movw	r2, #1078	; 0x436
 8010628:	4927      	ldr	r1, [pc, #156]	; (80106c8 <udp_connect+0xd4>)
 801062a:	4826      	ldr	r0, [pc, #152]	; (80106c4 <udp_connect+0xd0>)
 801062c:	f004 fc2c 	bl	8014e88 <iprintf>
 8010630:	f06f 030f 	mvn.w	r3, #15
 8010634:	e03e      	b.n	80106b4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	8a5b      	ldrh	r3, [r3, #18]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10f      	bne.n	801065e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801063e:	68f9      	ldr	r1, [r7, #12]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	8a5b      	ldrh	r3, [r3, #18]
 8010644:	461a      	mov	r2, r3
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff ff4c 	bl	80104e4 <udp_bind>
 801064c:	4603      	mov	r3, r0
 801064e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <udp_connect+0x6a>
      return err;
 8010658:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801065c:	e02a      	b.n	80106b4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d002      	beq.n	801066a <udp_connect+0x76>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	e000      	b.n	801066c <udp_connect+0x78>
 801066a:	2300      	movs	r3, #0
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	88fa      	ldrh	r2, [r7, #6]
 8010674:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	7c1b      	ldrb	r3, [r3, #16]
 801067a:	f043 0304 	orr.w	r3, r3, #4
 801067e:	b2da      	uxtb	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010684:	4b11      	ldr	r3, [pc, #68]	; (80106cc <udp_connect+0xd8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	617b      	str	r3, [r7, #20]
 801068a:	e008      	b.n	801069e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	429a      	cmp	r2, r3
 8010692:	d101      	bne.n	8010698 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010694:	2300      	movs	r3, #0
 8010696:	e00d      	b.n	80106b4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1f3      	bne.n	801068c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80106a4:	4b09      	ldr	r3, [pc, #36]	; (80106cc <udp_connect+0xd8>)
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80106ac:	4a07      	ldr	r2, [pc, #28]	; (80106cc <udp_connect+0xd8>)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3718      	adds	r7, #24
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	08017e58 	.word	0x08017e58
 80106c0:	08018138 	.word	0x08018138
 80106c4:	08017eac 	.word	0x08017eac
 80106c8:	08018154 	.word	0x08018154
 80106cc:	2000d418 	.word	0x2000d418

080106d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d107      	bne.n	80106f2 <udp_recv+0x22>
 80106e2:	4b08      	ldr	r3, [pc, #32]	; (8010704 <udp_recv+0x34>)
 80106e4:	f240 428a 	movw	r2, #1162	; 0x48a
 80106e8:	4907      	ldr	r1, [pc, #28]	; (8010708 <udp_recv+0x38>)
 80106ea:	4808      	ldr	r0, [pc, #32]	; (801070c <udp_recv+0x3c>)
 80106ec:	f004 fbcc 	bl	8014e88 <iprintf>
 80106f0:	e005      	b.n	80106fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	61da      	str	r2, [r3, #28]
}
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	08017e58 	.word	0x08017e58
 8010708:	0801818c 	.word	0x0801818c
 801070c:	08017eac 	.word	0x08017eac

08010710 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d107      	bne.n	801072e <udp_remove+0x1e>
 801071e:	4b19      	ldr	r3, [pc, #100]	; (8010784 <udp_remove+0x74>)
 8010720:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010724:	4918      	ldr	r1, [pc, #96]	; (8010788 <udp_remove+0x78>)
 8010726:	4819      	ldr	r0, [pc, #100]	; (801078c <udp_remove+0x7c>)
 8010728:	f004 fbae 	bl	8014e88 <iprintf>
 801072c:	e026      	b.n	801077c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801072e:	4b18      	ldr	r3, [pc, #96]	; (8010790 <udp_remove+0x80>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	429a      	cmp	r2, r3
 8010736:	d105      	bne.n	8010744 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010738:	4b15      	ldr	r3, [pc, #84]	; (8010790 <udp_remove+0x80>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	4a14      	ldr	r2, [pc, #80]	; (8010790 <udp_remove+0x80>)
 8010740:	6013      	str	r3, [r2, #0]
 8010742:	e017      	b.n	8010774 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010744:	4b12      	ldr	r3, [pc, #72]	; (8010790 <udp_remove+0x80>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	60fb      	str	r3, [r7, #12]
 801074a:	e010      	b.n	801076e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d009      	beq.n	8010768 <udp_remove+0x58>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	429a      	cmp	r2, r3
 801075c:	d104      	bne.n	8010768 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	60da      	str	r2, [r3, #12]
        break;
 8010766:	e005      	b.n	8010774 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	60fb      	str	r3, [r7, #12]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1eb      	bne.n	801074c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	2000      	movs	r0, #0
 8010778:	f7f8 ffd0 	bl	800971c <memp_free>
}
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	08017e58 	.word	0x08017e58
 8010788:	080181a4 	.word	0x080181a4
 801078c:	08017eac 	.word	0x08017eac
 8010790:	2000d418 	.word	0x2000d418

08010794 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801079a:	2000      	movs	r0, #0
 801079c:	f7f8 ff48 	bl	8009630 <memp_malloc>
 80107a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d007      	beq.n	80107b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80107a8:	2220      	movs	r2, #32
 80107aa:	2100      	movs	r1, #0
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f004 fbd0 	bl	8014f52 <memset>
    pcb->ttl = UDP_TTL;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	22ff      	movs	r2, #255	; 0xff
 80107b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80107b8:	687b      	ldr	r3, [r7, #4]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d01e      	beq.n	8010812 <udp_netif_ip_addr_changed+0x4e>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01a      	beq.n	8010812 <udp_netif_ip_addr_changed+0x4e>
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d017      	beq.n	8010812 <udp_netif_ip_addr_changed+0x4e>
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d013      	beq.n	8010812 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107ea:	4b0d      	ldr	r3, [pc, #52]	; (8010820 <udp_netif_ip_addr_changed+0x5c>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	60fb      	str	r3, [r7, #12]
 80107f0:	e00c      	b.n	801080c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d103      	bne.n	8010806 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	60fb      	str	r3, [r7, #12]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1ef      	bne.n	80107f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010812:	bf00      	nop
 8010814:	3714      	adds	r7, #20
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	2000d418 	.word	0x2000d418

08010824 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010828:	4b20      	ldr	r3, [pc, #128]	; (80108ac <dhcp_inc_pcb_refcount+0x88>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d133      	bne.n	8010898 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010830:	4b1f      	ldr	r3, [pc, #124]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d005      	beq.n	8010844 <dhcp_inc_pcb_refcount+0x20>
 8010838:	4b1e      	ldr	r3, [pc, #120]	; (80108b4 <dhcp_inc_pcb_refcount+0x90>)
 801083a:	22e5      	movs	r2, #229	; 0xe5
 801083c:	491e      	ldr	r1, [pc, #120]	; (80108b8 <dhcp_inc_pcb_refcount+0x94>)
 801083e:	481f      	ldr	r0, [pc, #124]	; (80108bc <dhcp_inc_pcb_refcount+0x98>)
 8010840:	f004 fb22 	bl	8014e88 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010844:	f7ff ffa6 	bl	8010794 <udp_new>
 8010848:	4603      	mov	r3, r0
 801084a:	4a19      	ldr	r2, [pc, #100]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 801084c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801084e:	4b18      	ldr	r3, [pc, #96]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d102      	bne.n	801085c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010856:	f04f 33ff 	mov.w	r3, #4294967295
 801085a:	e024      	b.n	80108a6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801085c:	4b14      	ldr	r3, [pc, #80]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	7a5a      	ldrb	r2, [r3, #9]
 8010862:	4b13      	ldr	r3, [pc, #76]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f042 0220 	orr.w	r2, r2, #32
 801086a:	b2d2      	uxtb	r2, r2
 801086c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801086e:	4b10      	ldr	r3, [pc, #64]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2244      	movs	r2, #68	; 0x44
 8010874:	4912      	ldr	r1, [pc, #72]	; (80108c0 <dhcp_inc_pcb_refcount+0x9c>)
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff fe34 	bl	80104e4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801087c:	4b0c      	ldr	r3, [pc, #48]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2243      	movs	r2, #67	; 0x43
 8010882:	490f      	ldr	r1, [pc, #60]	; (80108c0 <dhcp_inc_pcb_refcount+0x9c>)
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff feb5 	bl	80105f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801088a:	4b09      	ldr	r3, [pc, #36]	; (80108b0 <dhcp_inc_pcb_refcount+0x8c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2200      	movs	r2, #0
 8010890:	490c      	ldr	r1, [pc, #48]	; (80108c4 <dhcp_inc_pcb_refcount+0xa0>)
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff ff1c 	bl	80106d0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010898:	4b04      	ldr	r3, [pc, #16]	; (80108ac <dhcp_inc_pcb_refcount+0x88>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	3301      	adds	r3, #1
 801089e:	b2da      	uxtb	r2, r3
 80108a0:	4b02      	ldr	r3, [pc, #8]	; (80108ac <dhcp_inc_pcb_refcount+0x88>)
 80108a2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	2000d448 	.word	0x2000d448
 80108b0:	2000d444 	.word	0x2000d444
 80108b4:	080181bc 	.word	0x080181bc
 80108b8:	080181f4 	.word	0x080181f4
 80108bc:	0801821c 	.word	0x0801821c
 80108c0:	08018d88 	.word	0x08018d88
 80108c4:	080120e5 	.word	0x080120e5

080108c8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80108cc:	4b0e      	ldr	r3, [pc, #56]	; (8010908 <dhcp_dec_pcb_refcount+0x40>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d105      	bne.n	80108e0 <dhcp_dec_pcb_refcount+0x18>
 80108d4:	4b0d      	ldr	r3, [pc, #52]	; (801090c <dhcp_dec_pcb_refcount+0x44>)
 80108d6:	22ff      	movs	r2, #255	; 0xff
 80108d8:	490d      	ldr	r1, [pc, #52]	; (8010910 <dhcp_dec_pcb_refcount+0x48>)
 80108da:	480e      	ldr	r0, [pc, #56]	; (8010914 <dhcp_dec_pcb_refcount+0x4c>)
 80108dc:	f004 fad4 	bl	8014e88 <iprintf>
  dhcp_pcb_refcount--;
 80108e0:	4b09      	ldr	r3, [pc, #36]	; (8010908 <dhcp_dec_pcb_refcount+0x40>)
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	4b07      	ldr	r3, [pc, #28]	; (8010908 <dhcp_dec_pcb_refcount+0x40>)
 80108ea:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80108ec:	4b06      	ldr	r3, [pc, #24]	; (8010908 <dhcp_dec_pcb_refcount+0x40>)
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d107      	bne.n	8010904 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80108f4:	4b08      	ldr	r3, [pc, #32]	; (8010918 <dhcp_dec_pcb_refcount+0x50>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff ff09 	bl	8010710 <udp_remove>
    dhcp_pcb = NULL;
 80108fe:	4b06      	ldr	r3, [pc, #24]	; (8010918 <dhcp_dec_pcb_refcount+0x50>)
 8010900:	2200      	movs	r2, #0
 8010902:	601a      	str	r2, [r3, #0]
  }
}
 8010904:	bf00      	nop
 8010906:	bd80      	pop	{r7, pc}
 8010908:	2000d448 	.word	0x2000d448
 801090c:	080181bc 	.word	0x080181bc
 8010910:	08018244 	.word	0x08018244
 8010914:	0801821c 	.word	0x0801821c
 8010918:	2000d444 	.word	0x2000d444

0801091c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010928:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801092a:	210c      	movs	r1, #12
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f001 f81b 	bl	8011968 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010932:	4b06      	ldr	r3, [pc, #24]	; (801094c <dhcp_handle_nak+0x30>)
 8010934:	4a05      	ldr	r2, [pc, #20]	; (801094c <dhcp_handle_nak+0x30>)
 8010936:	4905      	ldr	r1, [pc, #20]	; (801094c <dhcp_handle_nak+0x30>)
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7f9 f891 	bl	8009a60 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 fc0e 	bl	8011160 <dhcp_discover>
}
 8010944:	bf00      	nop
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	08018d88 	.word	0x08018d88

08010950 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801095e:	2108      	movs	r1, #8
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f001 f801 	bl	8011968 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	331c      	adds	r3, #28
 801096a:	2200      	movs	r2, #0
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f002 fb02 	bl	8012f78 <etharp_query>
 8010974:	4603      	mov	r3, r0
 8010976:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	799b      	ldrb	r3, [r3, #6]
 801097c:	2bff      	cmp	r3, #255	; 0xff
 801097e:	d005      	beq.n	801098c <dhcp_check+0x3c>
    dhcp->tries++;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	799b      	ldrb	r3, [r3, #6]
 8010984:	3301      	adds	r3, #1
 8010986:	b2da      	uxtb	r2, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801098c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010990:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010992:	893b      	ldrh	r3, [r7, #8]
 8010994:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010998:	4a06      	ldr	r2, [pc, #24]	; (80109b4 <dhcp_check+0x64>)
 801099a:	fb82 1203 	smull	r1, r2, r2, r3
 801099e:	1152      	asrs	r2, r2, #5
 80109a0:	17db      	asrs	r3, r3, #31
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	10624dd3 	.word	0x10624dd3

080109b8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80109c8:	4b0c      	ldr	r3, [pc, #48]	; (80109fc <dhcp_handle_offer+0x44>)
 80109ca:	789b      	ldrb	r3, [r3, #2]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d011      	beq.n	80109f4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80109d6:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <dhcp_handle_offer+0x48>)
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f8 f965 	bl	8008caa <lwip_htonl>
 80109e0:	4602      	mov	r2, r0
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	691a      	ldr	r2, [r3, #16]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 f808 	bl	8010a04 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80109f4:	bf00      	nop
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	2000d43c 	.word	0x2000d43c
 8010a00:	2000d41c 	.word	0x2000d41c

08010a04 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010a04:	b5b0      	push	{r4, r5, r7, lr}
 8010a06:	b08a      	sub	sp, #40	; 0x28
 8010a08:	af02      	add	r7, sp, #8
 8010a0a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d109      	bne.n	8010a26 <dhcp_select+0x22>
 8010a12:	4b71      	ldr	r3, [pc, #452]	; (8010bd8 <dhcp_select+0x1d4>)
 8010a14:	f240 1277 	movw	r2, #375	; 0x177
 8010a18:	4970      	ldr	r1, [pc, #448]	; (8010bdc <dhcp_select+0x1d8>)
 8010a1a:	4871      	ldr	r0, [pc, #452]	; (8010be0 <dhcp_select+0x1dc>)
 8010a1c:	f004 fa34 	bl	8014e88 <iprintf>
 8010a20:	f06f 030f 	mvn.w	r3, #15
 8010a24:	e0d3      	b.n	8010bce <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d109      	bne.n	8010a46 <dhcp_select+0x42>
 8010a32:	4b69      	ldr	r3, [pc, #420]	; (8010bd8 <dhcp_select+0x1d4>)
 8010a34:	f240 1279 	movw	r2, #377	; 0x179
 8010a38:	496a      	ldr	r1, [pc, #424]	; (8010be4 <dhcp_select+0x1e0>)
 8010a3a:	4869      	ldr	r0, [pc, #420]	; (8010be0 <dhcp_select+0x1dc>)
 8010a3c:	f004 fa24 	bl	8014e88 <iprintf>
 8010a40:	f06f 0305 	mvn.w	r3, #5
 8010a44:	e0c3      	b.n	8010bce <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010a46:	2101      	movs	r1, #1
 8010a48:	69b8      	ldr	r0, [r7, #24]
 8010a4a:	f000 ff8d 	bl	8011968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	2203      	movs	r2, #3
 8010a54:	69b9      	ldr	r1, [r7, #24]
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f001 fc12 	bl	8012280 <dhcp_create_msg>
 8010a5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 8085 	beq.w	8010b70 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010a6c:	89b8      	ldrh	r0, [r7, #12]
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a74:	2302      	movs	r3, #2
 8010a76:	2239      	movs	r2, #57	; 0x39
 8010a78:	f000 ff90 	bl	801199c <dhcp_option>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010a80:	89b8      	ldrh	r0, [r7, #12]
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	f000 ffdf 	bl	8011a50 <dhcp_option_short>
 8010a92:	4603      	mov	r3, r0
 8010a94:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010a96:	89b8      	ldrh	r0, [r7, #12]
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a9e:	2304      	movs	r3, #4
 8010aa0:	2232      	movs	r2, #50	; 0x32
 8010aa2:	f000 ff7b 	bl	801199c <dhcp_option>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010aaa:	89bc      	ldrh	r4, [r7, #12]
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7f8 f8f7 	bl	8008caa <lwip_htonl>
 8010abc:	4603      	mov	r3, r0
 8010abe:	461a      	mov	r2, r3
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 fff6 	bl	8011ab4 <dhcp_option_long>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010acc:	89b8      	ldrh	r0, [r7, #12]
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010ad4:	2304      	movs	r3, #4
 8010ad6:	2236      	movs	r2, #54	; 0x36
 8010ad8:	f000 ff60 	bl	801199c <dhcp_option>
 8010adc:	4603      	mov	r3, r0
 8010ade:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010ae0:	89bc      	ldrh	r4, [r7, #12]
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f8 f8dc 	bl	8008caa <lwip_htonl>
 8010af2:	4603      	mov	r3, r0
 8010af4:	461a      	mov	r2, r3
 8010af6:	4629      	mov	r1, r5
 8010af8:	4620      	mov	r0, r4
 8010afa:	f000 ffdb 	bl	8011ab4 <dhcp_option_long>
 8010afe:	4603      	mov	r3, r0
 8010b00:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010b02:	89b8      	ldrh	r0, [r7, #12]
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	2237      	movs	r2, #55	; 0x37
 8010b0e:	f000 ff45 	bl	801199c <dhcp_option>
 8010b12:	4603      	mov	r3, r0
 8010b14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b16:	2300      	movs	r3, #0
 8010b18:	77bb      	strb	r3, [r7, #30]
 8010b1a:	e00e      	b.n	8010b3a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010b1c:	89b8      	ldrh	r0, [r7, #12]
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b24:	7fbb      	ldrb	r3, [r7, #30]
 8010b26:	4a30      	ldr	r2, [pc, #192]	; (8010be8 <dhcp_select+0x1e4>)
 8010b28:	5cd3      	ldrb	r3, [r2, r3]
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	f000 ff6a 	bl	8011a04 <dhcp_option_byte>
 8010b30:	4603      	mov	r3, r0
 8010b32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b34:	7fbb      	ldrb	r3, [r7, #30]
 8010b36:	3301      	adds	r3, #1
 8010b38:	77bb      	strb	r3, [r7, #30]
 8010b3a:	7fbb      	ldrb	r3, [r7, #30]
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d9ed      	bls.n	8010b1c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010b40:	89b8      	ldrh	r0, [r7, #12]
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	33f0      	adds	r3, #240	; 0xf0
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	f001 fc6f 	bl	801242c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010b4e:	4b27      	ldr	r3, [pc, #156]	; (8010bec <dhcp_select+0x1e8>)
 8010b50:	6818      	ldr	r0, [r3, #0]
 8010b52:	4b27      	ldr	r3, [pc, #156]	; (8010bf0 <dhcp_select+0x1ec>)
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	9300      	str	r3, [sp, #0]
 8010b5a:	2343      	movs	r3, #67	; 0x43
 8010b5c:	4a25      	ldr	r2, [pc, #148]	; (8010bf4 <dhcp_select+0x1f0>)
 8010b5e:	6979      	ldr	r1, [r7, #20]
 8010b60:	f7ff fbda 	bl	8010318 <udp_sendto_if_src>
 8010b64:	4603      	mov	r3, r0
 8010b66:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010b68:	6978      	ldr	r0, [r7, #20]
 8010b6a:	f7f9 fc1f 	bl	800a3ac <pbuf_free>
 8010b6e:	e001      	b.n	8010b74 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010b70:	23ff      	movs	r3, #255	; 0xff
 8010b72:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	799b      	ldrb	r3, [r3, #6]
 8010b78:	2bff      	cmp	r3, #255	; 0xff
 8010b7a:	d005      	beq.n	8010b88 <dhcp_select+0x184>
    dhcp->tries++;
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	799b      	ldrb	r3, [r3, #6]
 8010b80:	3301      	adds	r3, #1
 8010b82:	b2da      	uxtb	r2, r3
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	799b      	ldrb	r3, [r3, #6]
 8010b8c:	2b05      	cmp	r3, #5
 8010b8e:	d80d      	bhi.n	8010bac <dhcp_select+0x1a8>
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	799b      	ldrb	r3, [r3, #6]
 8010b94:	461a      	mov	r2, r3
 8010b96:	2301      	movs	r3, #1
 8010b98:	4093      	lsls	r3, r2
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	0152      	lsls	r2, r2, #5
 8010ba0:	1ad2      	subs	r2, r2, r3
 8010ba2:	0092      	lsls	r2, r2, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	e001      	b.n	8010bb0 <dhcp_select+0x1ac>
 8010bac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010bb0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010bb2:	89fb      	ldrh	r3, [r7, #14]
 8010bb4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010bb8:	4a0f      	ldr	r2, [pc, #60]	; (8010bf8 <dhcp_select+0x1f4>)
 8010bba:	fb82 1203 	smull	r1, r2, r2, r3
 8010bbe:	1152      	asrs	r2, r2, #5
 8010bc0:	17db      	asrs	r3, r3, #31
 8010bc2:	1ad3      	subs	r3, r2, r3
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	080181bc 	.word	0x080181bc
 8010bdc:	08018268 	.word	0x08018268
 8010be0:	0801821c 	.word	0x0801821c
 8010be4:	08018284 	.word	0x08018284
 8010be8:	2000001c 	.word	0x2000001c
 8010bec:	2000d444 	.word	0x2000d444
 8010bf0:	08018d88 	.word	0x08018d88
 8010bf4:	08018d8c 	.word	0x08018d8c
 8010bf8:	10624dd3 	.word	0x10624dd3

08010bfc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010c02:	4b27      	ldr	r3, [pc, #156]	; (8010ca0 <dhcp_coarse_tmr+0xa4>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	607b      	str	r3, [r7, #4]
 8010c08:	e042      	b.n	8010c90 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c0e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d039      	beq.n	8010c8a <dhcp_coarse_tmr+0x8e>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	795b      	ldrb	r3, [r3, #5]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d035      	beq.n	8010c8a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	8a9b      	ldrh	r3, [r3, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d012      	beq.n	8010c4c <dhcp_coarse_tmr+0x50>
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	8a5b      	ldrh	r3, [r3, #18]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	825a      	strh	r2, [r3, #18]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	8a5a      	ldrh	r2, [r3, #18]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	8a9b      	ldrh	r3, [r3, #20]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d106      	bne.n	8010c4c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fdf8 	bl	8011834 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f96b 	bl	8010f20 <dhcp_start>
 8010c4a:	e01e      	b.n	8010c8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	8a1b      	ldrh	r3, [r3, #16]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00b      	beq.n	8010c6c <dhcp_coarse_tmr+0x70>
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	8a1b      	ldrh	r3, [r3, #16]
 8010c58:	1e5a      	subs	r2, r3, #1
 8010c5a:	b291      	uxth	r1, r2
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	8211      	strh	r1, [r2, #16]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d103      	bne.n	8010c6c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f000 f8c7 	bl	8010df8 <dhcp_t2_timeout>
 8010c6a:	e00e      	b.n	8010c8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	89db      	ldrh	r3, [r3, #14]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00a      	beq.n	8010c8a <dhcp_coarse_tmr+0x8e>
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	89db      	ldrh	r3, [r3, #14]
 8010c78:	1e5a      	subs	r2, r3, #1
 8010c7a:	b291      	uxth	r1, r2
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	81d1      	strh	r1, [r2, #14]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d102      	bne.n	8010c8a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 f888 	bl	8010d9a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	607b      	str	r3, [r7, #4]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1b9      	bne.n	8010c0a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010c96:	bf00      	nop
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	2000d3b0 	.word	0x2000d3b0

08010ca4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010caa:	4b16      	ldr	r3, [pc, #88]	; (8010d04 <dhcp_fine_tmr+0x60>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	607b      	str	r3, [r7, #4]
 8010cb0:	e020      	b.n	8010cf4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d017      	beq.n	8010cee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	891b      	ldrh	r3, [r3, #8]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d906      	bls.n	8010cd4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	891b      	ldrh	r3, [r3, #8]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	811a      	strh	r2, [r3, #8]
 8010cd2:	e00c      	b.n	8010cee <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	891b      	ldrh	r3, [r3, #8]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d108      	bne.n	8010cee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	891b      	ldrh	r3, [r3, #8]
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 f80d 	bl	8010d08 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	607b      	str	r3, [r7, #4]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1db      	bne.n	8010cb2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010cfa:	bf00      	nop
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	2000d3b0 	.word	0x2000d3b0

08010d08 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d14:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	795b      	ldrb	r3, [r3, #5]
 8010d1a:	2b0c      	cmp	r3, #12
 8010d1c:	d003      	beq.n	8010d26 <dhcp_timeout+0x1e>
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	795b      	ldrb	r3, [r3, #5]
 8010d22:	2b06      	cmp	r3, #6
 8010d24:	d103      	bne.n	8010d2e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 fa1a 	bl	8011160 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010d2c:	e031      	b.n	8010d92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	795b      	ldrb	r3, [r3, #5]
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d10e      	bne.n	8010d54 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	799b      	ldrb	r3, [r3, #6]
 8010d3a:	2b05      	cmp	r3, #5
 8010d3c:	d803      	bhi.n	8010d46 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f7ff fe60 	bl	8010a04 <dhcp_select>
}
 8010d44:	e025      	b.n	8010d92 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 fd74 	bl	8011834 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 f8e7 	bl	8010f20 <dhcp_start>
}
 8010d52:	e01e      	b.n	8010d92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	795b      	ldrb	r3, [r3, #5]
 8010d58:	2b08      	cmp	r3, #8
 8010d5a:	d10b      	bne.n	8010d74 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	799b      	ldrb	r3, [r3, #6]
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d803      	bhi.n	8010d6c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fdf3 	bl	8010950 <dhcp_check>
}
 8010d6a:	e012      	b.n	8010d92 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 fa99 	bl	80112a4 <dhcp_bind>
}
 8010d72:	e00e      	b.n	8010d92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	795b      	ldrb	r3, [r3, #5]
 8010d78:	2b03      	cmp	r3, #3
 8010d7a:	d10a      	bne.n	8010d92 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	799b      	ldrb	r3, [r3, #6]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d803      	bhi.n	8010d8c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 fc9f 	bl	80116c8 <dhcp_reboot>
}
 8010d8a:	e002      	b.n	8010d92 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f000 f9e7 	bl	8011160 <dhcp_discover>
}
 8010d92:	bf00      	nop
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b084      	sub	sp, #16
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	795b      	ldrb	r3, [r3, #5]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d007      	beq.n	8010dc0 <dhcp_t1_timeout+0x26>
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	795b      	ldrb	r3, [r3, #5]
 8010db4:	2b0a      	cmp	r3, #10
 8010db6:	d003      	beq.n	8010dc0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010dbc:	2b05      	cmp	r3, #5
 8010dbe:	d117      	bne.n	8010df0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 fb49 	bl	8011458 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	8a5b      	ldrh	r3, [r3, #18]
 8010dd0:	1ad3      	subs	r3, r2, r3
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	dd0c      	ble.n	8010df0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	899b      	ldrh	r3, [r3, #12]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	8a5b      	ldrh	r3, [r3, #18]
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	da00      	bge.n	8010de8 <dhcp_t1_timeout+0x4e>
 8010de6:	3301      	adds	r3, #1
 8010de8:	105b      	asrs	r3, r3, #1
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010df0:	bf00      	nop
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	795b      	ldrb	r3, [r3, #5]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d00b      	beq.n	8010e26 <dhcp_t2_timeout+0x2e>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	795b      	ldrb	r3, [r3, #5]
 8010e12:	2b0a      	cmp	r3, #10
 8010e14:	d007      	beq.n	8010e26 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010e1a:	2b05      	cmp	r3, #5
 8010e1c:	d003      	beq.n	8010e26 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	795b      	ldrb	r3, [r3, #5]
 8010e22:	2b04      	cmp	r3, #4
 8010e24:	d117      	bne.n	8010e56 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fbb2 	bl	8011590 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	8a9b      	ldrh	r3, [r3, #20]
 8010e30:	461a      	mov	r2, r3
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	8a5b      	ldrh	r3, [r3, #18]
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	dd0c      	ble.n	8010e56 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	8a9b      	ldrh	r3, [r3, #20]
 8010e40:	461a      	mov	r2, r3
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	8a5b      	ldrh	r3, [r3, #18]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	da00      	bge.n	8010e4e <dhcp_t2_timeout+0x56>
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	105b      	asrs	r3, r3, #1
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010e56:	bf00      	nop
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
	...

08010e60 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2200      	movs	r2, #0
 8010e74:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010e7c:	4b26      	ldr	r3, [pc, #152]	; (8010f18 <dhcp_handle_ack+0xb8>)
 8010e7e:	78db      	ldrb	r3, [r3, #3]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d003      	beq.n	8010e8c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010e84:	4b25      	ldr	r3, [pc, #148]	; (8010f1c <dhcp_handle_ack+0xbc>)
 8010e86:	68da      	ldr	r2, [r3, #12]
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010e8c:	4b22      	ldr	r3, [pc, #136]	; (8010f18 <dhcp_handle_ack+0xb8>)
 8010e8e:	791b      	ldrb	r3, [r3, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d004      	beq.n	8010e9e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010e94:	4b21      	ldr	r3, [pc, #132]	; (8010f1c <dhcp_handle_ack+0xbc>)
 8010e96:	691a      	ldr	r2, [r3, #16]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8010e9c:	e004      	b.n	8010ea8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ea2:	085a      	lsrs	r2, r3, #1
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8010ea8:	4b1b      	ldr	r3, [pc, #108]	; (8010f18 <dhcp_handle_ack+0xb8>)
 8010eaa:	795b      	ldrb	r3, [r3, #5]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010eb0:	4b1a      	ldr	r3, [pc, #104]	; (8010f1c <dhcp_handle_ack+0xbc>)
 8010eb2:	695a      	ldr	r2, [r3, #20]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8010eb8:	e007      	b.n	8010eca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	1a9b      	subs	r3, r3, r2
 8010ec4:	08da      	lsrs	r2, r3, #3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	691a      	ldr	r2, [r3, #16]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010ed2:	4b11      	ldr	r3, [pc, #68]	; (8010f18 <dhcp_handle_ack+0xb8>)
 8010ed4:	799b      	ldrb	r3, [r3, #6]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00b      	beq.n	8010ef2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010eda:	4b10      	ldr	r3, [pc, #64]	; (8010f1c <dhcp_handle_ack+0xbc>)
 8010edc:	699b      	ldr	r3, [r3, #24]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f7 fee3 	bl	8008caa <lwip_htonl>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2201      	movs	r2, #1
 8010eee:	71da      	strb	r2, [r3, #7]
 8010ef0:	e002      	b.n	8010ef8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010ef8:	4b07      	ldr	r3, [pc, #28]	; (8010f18 <dhcp_handle_ack+0xb8>)
 8010efa:	79db      	ldrb	r3, [r3, #7]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d007      	beq.n	8010f10 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010f00:	4b06      	ldr	r3, [pc, #24]	; (8010f1c <dhcp_handle_ack+0xbc>)
 8010f02:	69db      	ldr	r3, [r3, #28]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7f7 fed0 	bl	8008caa <lwip_htonl>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010f10:	bf00      	nop
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	2000d43c 	.word	0x2000d43c
 8010f1c:	2000d41c 	.word	0x2000d41c

08010f20 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d109      	bne.n	8010f42 <dhcp_start+0x22>
 8010f2e:	4b37      	ldr	r3, [pc, #220]	; (801100c <dhcp_start+0xec>)
 8010f30:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010f34:	4936      	ldr	r1, [pc, #216]	; (8011010 <dhcp_start+0xf0>)
 8010f36:	4837      	ldr	r0, [pc, #220]	; (8011014 <dhcp_start+0xf4>)
 8010f38:	f003 ffa6 	bl	8014e88 <iprintf>
 8010f3c:	f06f 030f 	mvn.w	r3, #15
 8010f40:	e060      	b.n	8011004 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f48:	f003 0301 	and.w	r3, r3, #1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d109      	bne.n	8010f64 <dhcp_start+0x44>
 8010f50:	4b2e      	ldr	r3, [pc, #184]	; (801100c <dhcp_start+0xec>)
 8010f52:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010f56:	4930      	ldr	r1, [pc, #192]	; (8011018 <dhcp_start+0xf8>)
 8010f58:	482e      	ldr	r0, [pc, #184]	; (8011014 <dhcp_start+0xf4>)
 8010f5a:	f003 ff95 	bl	8014e88 <iprintf>
 8010f5e:	f06f 030f 	mvn.w	r3, #15
 8010f62:	e04f      	b.n	8011004 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f68:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f6e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010f72:	d202      	bcs.n	8010f7a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010f74:	f04f 33ff 	mov.w	r3, #4294967295
 8010f78:	e044      	b.n	8011004 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10d      	bne.n	8010f9c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010f80:	2034      	movs	r0, #52	; 0x34
 8010f82:	f7f8 f9b1 	bl	80092e8 <mem_malloc>
 8010f86:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d102      	bne.n	8010f94 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f92:	e037      	b.n	8011004 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	625a      	str	r2, [r3, #36]	; 0x24
 8010f9a:	e005      	b.n	8010fa8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	791b      	ldrb	r3, [r3, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010fa4:	f7ff fc90 	bl	80108c8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010fa8:	2234      	movs	r2, #52	; 0x34
 8010faa:	2100      	movs	r1, #0
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f003 ffd0 	bl	8014f52 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010fb2:	f7ff fc37 	bl	8010824 <dhcp_inc_pcb_refcount>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <dhcp_start+0xa2>
    return ERR_MEM;
 8010fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc0:	e020      	b.n	8011004 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fce:	f003 0304 	and.w	r3, r3, #4
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d105      	bne.n	8010fe2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010fd6:	2102      	movs	r1, #2
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f000 fcc5 	bl	8011968 <dhcp_set_state>
    return ERR_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	e010      	b.n	8011004 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 f8bc 	bl	8011160 <dhcp_discover>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010fec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d005      	beq.n	8011000 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fc1d 	bl	8011834 <dhcp_release_and_stop>
    return ERR_MEM;
 8010ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8010ffe:	e001      	b.n	8011004 <dhcp_start+0xe4>
  }
  return result;
 8011000:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	080181bc 	.word	0x080181bc
 8011010:	080182a0 	.word	0x080182a0
 8011014:	0801821c 	.word	0x0801821c
 8011018:	080182e4 	.word	0x080182e4

0801101c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d107      	bne.n	801103c <dhcp_arp_reply+0x20>
 801102c:	4b0e      	ldr	r3, [pc, #56]	; (8011068 <dhcp_arp_reply+0x4c>)
 801102e:	f240 328b 	movw	r2, #907	; 0x38b
 8011032:	490e      	ldr	r1, [pc, #56]	; (801106c <dhcp_arp_reply+0x50>)
 8011034:	480e      	ldr	r0, [pc, #56]	; (8011070 <dhcp_arp_reply+0x54>)
 8011036:	f003 ff27 	bl	8014e88 <iprintf>
 801103a:	e012      	b.n	8011062 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011040:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00c      	beq.n	8011062 <dhcp_arp_reply+0x46>
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	795b      	ldrb	r3, [r3, #5]
 801104c:	2b08      	cmp	r3, #8
 801104e:	d108      	bne.n	8011062 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	69db      	ldr	r3, [r3, #28]
 8011058:	429a      	cmp	r2, r3
 801105a:	d102      	bne.n	8011062 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 f809 	bl	8011074 <dhcp_decline>
    }
  }
}
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	080181bc 	.word	0x080181bc
 801106c:	080182a0 	.word	0x080182a0
 8011070:	0801821c 	.word	0x0801821c

08011074 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011074:	b5b0      	push	{r4, r5, r7, lr}
 8011076:	b08a      	sub	sp, #40	; 0x28
 8011078:	af02      	add	r7, sp, #8
 801107a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011080:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011082:	210c      	movs	r1, #12
 8011084:	69b8      	ldr	r0, [r7, #24]
 8011086:	f000 fc6f 	bl	8011968 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801108a:	f107 030c 	add.w	r3, r7, #12
 801108e:	2204      	movs	r2, #4
 8011090:	69b9      	ldr	r1, [r7, #24]
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f001 f8f4 	bl	8012280 <dhcp_create_msg>
 8011098:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d035      	beq.n	801110c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80110a6:	89b8      	ldrh	r0, [r7, #12]
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80110ae:	2304      	movs	r3, #4
 80110b0:	2232      	movs	r2, #50	; 0x32
 80110b2:	f000 fc73 	bl	801199c <dhcp_option>
 80110b6:	4603      	mov	r3, r0
 80110b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80110ba:	89bc      	ldrh	r4, [r7, #12]
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	69db      	ldr	r3, [r3, #28]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7f7 fdef 	bl	8008caa <lwip_htonl>
 80110cc:	4603      	mov	r3, r0
 80110ce:	461a      	mov	r2, r3
 80110d0:	4629      	mov	r1, r5
 80110d2:	4620      	mov	r0, r4
 80110d4:	f000 fcee 	bl	8011ab4 <dhcp_option_long>
 80110d8:	4603      	mov	r3, r0
 80110da:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80110dc:	89b8      	ldrh	r0, [r7, #12]
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	33f0      	adds	r3, #240	; 0xf0
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	4619      	mov	r1, r3
 80110e6:	f001 f9a1 	bl	801242c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80110ea:	4b19      	ldr	r3, [pc, #100]	; (8011150 <dhcp_decline+0xdc>)
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	4b19      	ldr	r3, [pc, #100]	; (8011154 <dhcp_decline+0xe0>)
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	2343      	movs	r3, #67	; 0x43
 80110f8:	4a17      	ldr	r2, [pc, #92]	; (8011158 <dhcp_decline+0xe4>)
 80110fa:	6979      	ldr	r1, [r7, #20]
 80110fc:	f7ff f90c 	bl	8010318 <udp_sendto_if_src>
 8011100:	4603      	mov	r3, r0
 8011102:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011104:	6978      	ldr	r0, [r7, #20]
 8011106:	f7f9 f951 	bl	800a3ac <pbuf_free>
 801110a:	e001      	b.n	8011110 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801110c:	23ff      	movs	r3, #255	; 0xff
 801110e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	799b      	ldrb	r3, [r3, #6]
 8011114:	2bff      	cmp	r3, #255	; 0xff
 8011116:	d005      	beq.n	8011124 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	799b      	ldrb	r3, [r3, #6]
 801111c:	3301      	adds	r3, #1
 801111e:	b2da      	uxtb	r2, r3
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011124:	f242 7310 	movw	r3, #10000	; 0x2710
 8011128:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801112a:	89fb      	ldrh	r3, [r7, #14]
 801112c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011130:	4a0a      	ldr	r2, [pc, #40]	; (801115c <dhcp_decline+0xe8>)
 8011132:	fb82 1203 	smull	r1, r2, r2, r3
 8011136:	1152      	asrs	r2, r2, #5
 8011138:	17db      	asrs	r3, r3, #31
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	b29a      	uxth	r2, r3
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011142:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3720      	adds	r7, #32
 801114a:	46bd      	mov	sp, r7
 801114c:	bdb0      	pop	{r4, r5, r7, pc}
 801114e:	bf00      	nop
 8011150:	2000d444 	.word	0x2000d444
 8011154:	08018d88 	.word	0x08018d88
 8011158:	08018d8c 	.word	0x08018d8c
 801115c:	10624dd3 	.word	0x10624dd3

08011160 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b08a      	sub	sp, #40	; 0x28
 8011164:	af02      	add	r7, sp, #8
 8011166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801116e:	2300      	movs	r3, #0
 8011170:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	2200      	movs	r2, #0
 8011176:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011178:	2106      	movs	r1, #6
 801117a:	69b8      	ldr	r0, [r7, #24]
 801117c:	f000 fbf4 	bl	8011968 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011180:	f107 0308 	add.w	r3, r7, #8
 8011184:	2201      	movs	r2, #1
 8011186:	69b9      	ldr	r1, [r7, #24]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f001 f879 	bl	8012280 <dhcp_create_msg>
 801118e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d04b      	beq.n	801122e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801119c:	8938      	ldrh	r0, [r7, #8]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111a4:	2302      	movs	r3, #2
 80111a6:	2239      	movs	r2, #57	; 0x39
 80111a8:	f000 fbf8 	bl	801199c <dhcp_option>
 80111ac:	4603      	mov	r3, r0
 80111ae:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80111b0:	8938      	ldrh	r0, [r7, #8]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111bc:	461a      	mov	r2, r3
 80111be:	f000 fc47 	bl	8011a50 <dhcp_option_short>
 80111c2:	4603      	mov	r3, r0
 80111c4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80111c6:	8938      	ldrh	r0, [r7, #8]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111ce:	2303      	movs	r3, #3
 80111d0:	2237      	movs	r2, #55	; 0x37
 80111d2:	f000 fbe3 	bl	801199c <dhcp_option>
 80111d6:	4603      	mov	r3, r0
 80111d8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80111da:	2300      	movs	r3, #0
 80111dc:	77fb      	strb	r3, [r7, #31]
 80111de:	e00e      	b.n	80111fe <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80111e0:	8938      	ldrh	r0, [r7, #8]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111e8:	7ffb      	ldrb	r3, [r7, #31]
 80111ea:	4a29      	ldr	r2, [pc, #164]	; (8011290 <dhcp_discover+0x130>)
 80111ec:	5cd3      	ldrb	r3, [r2, r3]
 80111ee:	461a      	mov	r2, r3
 80111f0:	f000 fc08 	bl	8011a04 <dhcp_option_byte>
 80111f4:	4603      	mov	r3, r0
 80111f6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80111f8:	7ffb      	ldrb	r3, [r7, #31]
 80111fa:	3301      	adds	r3, #1
 80111fc:	77fb      	strb	r3, [r7, #31]
 80111fe:	7ffb      	ldrb	r3, [r7, #31]
 8011200:	2b02      	cmp	r3, #2
 8011202:	d9ed      	bls.n	80111e0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011204:	8938      	ldrh	r0, [r7, #8]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	33f0      	adds	r3, #240	; 0xf0
 801120a:	693a      	ldr	r2, [r7, #16]
 801120c:	4619      	mov	r1, r3
 801120e:	f001 f90d 	bl	801242c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011212:	4b20      	ldr	r3, [pc, #128]	; (8011294 <dhcp_discover+0x134>)
 8011214:	6818      	ldr	r0, [r3, #0]
 8011216:	4b20      	ldr	r3, [pc, #128]	; (8011298 <dhcp_discover+0x138>)
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	2343      	movs	r3, #67	; 0x43
 8011220:	4a1e      	ldr	r2, [pc, #120]	; (801129c <dhcp_discover+0x13c>)
 8011222:	6939      	ldr	r1, [r7, #16]
 8011224:	f7ff f878 	bl	8010318 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011228:	6938      	ldr	r0, [r7, #16]
 801122a:	f7f9 f8bf 	bl	800a3ac <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	799b      	ldrb	r3, [r3, #6]
 8011232:	2bff      	cmp	r3, #255	; 0xff
 8011234:	d005      	beq.n	8011242 <dhcp_discover+0xe2>
    dhcp->tries++;
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	799b      	ldrb	r3, [r3, #6]
 801123a:	3301      	adds	r3, #1
 801123c:	b2da      	uxtb	r2, r3
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	799b      	ldrb	r3, [r3, #6]
 8011246:	2b05      	cmp	r3, #5
 8011248:	d80d      	bhi.n	8011266 <dhcp_discover+0x106>
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	799b      	ldrb	r3, [r3, #6]
 801124e:	461a      	mov	r2, r3
 8011250:	2301      	movs	r3, #1
 8011252:	4093      	lsls	r3, r2
 8011254:	b29b      	uxth	r3, r3
 8011256:	461a      	mov	r2, r3
 8011258:	0152      	lsls	r2, r2, #5
 801125a:	1ad2      	subs	r2, r2, r3
 801125c:	0092      	lsls	r2, r2, #2
 801125e:	4413      	add	r3, r2
 8011260:	00db      	lsls	r3, r3, #3
 8011262:	b29b      	uxth	r3, r3
 8011264:	e001      	b.n	801126a <dhcp_discover+0x10a>
 8011266:	f64e 2360 	movw	r3, #60000	; 0xea60
 801126a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801126c:	897b      	ldrh	r3, [r7, #10]
 801126e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011272:	4a0b      	ldr	r2, [pc, #44]	; (80112a0 <dhcp_discover+0x140>)
 8011274:	fb82 1203 	smull	r1, r2, r2, r3
 8011278:	1152      	asrs	r2, r2, #5
 801127a:	17db      	asrs	r3, r3, #31
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	b29a      	uxth	r2, r3
 8011280:	69bb      	ldr	r3, [r7, #24]
 8011282:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3720      	adds	r7, #32
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	2000001c 	.word	0x2000001c
 8011294:	2000d444 	.word	0x2000d444
 8011298:	08018d88 	.word	0x08018d88
 801129c:	08018d8c 	.word	0x08018d8c
 80112a0:	10624dd3 	.word	0x10624dd3

080112a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b088      	sub	sp, #32
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d107      	bne.n	80112c2 <dhcp_bind+0x1e>
 80112b2:	4b64      	ldr	r3, [pc, #400]	; (8011444 <dhcp_bind+0x1a0>)
 80112b4:	f240 4215 	movw	r2, #1045	; 0x415
 80112b8:	4963      	ldr	r1, [pc, #396]	; (8011448 <dhcp_bind+0x1a4>)
 80112ba:	4864      	ldr	r0, [pc, #400]	; (801144c <dhcp_bind+0x1a8>)
 80112bc:	f003 fde4 	bl	8014e88 <iprintf>
 80112c0:	e0bc      	b.n	801143c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d107      	bne.n	80112de <dhcp_bind+0x3a>
 80112ce:	4b5d      	ldr	r3, [pc, #372]	; (8011444 <dhcp_bind+0x1a0>)
 80112d0:	f240 4217 	movw	r2, #1047	; 0x417
 80112d4:	495e      	ldr	r1, [pc, #376]	; (8011450 <dhcp_bind+0x1ac>)
 80112d6:	485d      	ldr	r0, [pc, #372]	; (801144c <dhcp_bind+0x1a8>)
 80112d8:	f003 fdd6 	bl	8014e88 <iprintf>
 80112dc:	e0ae      	b.n	801143c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	2200      	movs	r2, #0
 80112e2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ec:	d019      	beq.n	8011322 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f2:	331e      	adds	r3, #30
 80112f4:	4a57      	ldr	r2, [pc, #348]	; (8011454 <dhcp_bind+0x1b0>)
 80112f6:	fba2 2303 	umull	r2, r3, r2, r3
 80112fa:	095b      	lsrs	r3, r3, #5
 80112fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011304:	d302      	bcc.n	801130c <dhcp_bind+0x68>
      timeout = 0xffff;
 8011306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801130a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	b29a      	uxth	r2, r3
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	8a9b      	ldrh	r3, [r3, #20]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d102      	bne.n	8011322 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	2201      	movs	r2, #1
 8011320:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132a:	d01d      	beq.n	8011368 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011330:	331e      	adds	r3, #30
 8011332:	4a48      	ldr	r2, [pc, #288]	; (8011454 <dhcp_bind+0x1b0>)
 8011334:	fba2 2303 	umull	r2, r3, r2, r3
 8011338:	095b      	lsrs	r3, r3, #5
 801133a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011342:	d302      	bcc.n	801134a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011348:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	b29a      	uxth	r2, r3
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011352:	69bb      	ldr	r3, [r7, #24]
 8011354:	895b      	ldrh	r3, [r3, #10]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d102      	bne.n	8011360 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	2201      	movs	r2, #1
 801135e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	895a      	ldrh	r2, [r3, #10]
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011370:	d01d      	beq.n	80113ae <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011376:	331e      	adds	r3, #30
 8011378:	4a36      	ldr	r2, [pc, #216]	; (8011454 <dhcp_bind+0x1b0>)
 801137a:	fba2 2303 	umull	r2, r3, r2, r3
 801137e:	095b      	lsrs	r3, r3, #5
 8011380:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011388:	d302      	bcc.n	8011390 <dhcp_bind+0xec>
      timeout = 0xffff;
 801138a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801138e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	b29a      	uxth	r2, r3
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	899b      	ldrh	r3, [r3, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	2201      	movs	r2, #1
 80113a4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	899a      	ldrh	r2, [r3, #12]
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	895a      	ldrh	r2, [r3, #10]
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	899b      	ldrh	r3, [r3, #12]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d306      	bcc.n	80113c8 <dhcp_bind+0x124>
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	899b      	ldrh	r3, [r3, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d002      	beq.n	80113c8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	2200      	movs	r2, #0
 80113c6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	79db      	ldrb	r3, [r3, #7]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d003      	beq.n	80113d8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	6a1b      	ldr	r3, [r3, #32]
 80113d4:	613b      	str	r3, [r7, #16]
 80113d6:	e014      	b.n	8011402 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	331c      	adds	r3, #28
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80113e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	db02      	blt.n	80113ee <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80113e8:	23ff      	movs	r3, #255	; 0xff
 80113ea:	613b      	str	r3, [r7, #16]
 80113ec:	e009      	b.n	8011402 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80113ee:	7dfb      	ldrb	r3, [r7, #23]
 80113f0:	2bbf      	cmp	r3, #191	; 0xbf
 80113f2:	d903      	bls.n	80113fc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80113f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80113f8:	613b      	str	r3, [r7, #16]
 80113fa:	e002      	b.n	8011402 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80113fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011400:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011406:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d108      	bne.n	8011420 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	69da      	ldr	r2, [r3, #28]
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	4013      	ands	r3, r2
 8011416:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801141e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011420:	210a      	movs	r1, #10
 8011422:	69b8      	ldr	r0, [r7, #24]
 8011424:	f000 faa0 	bl	8011968 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	f103 011c 	add.w	r1, r3, #28
 801142e:	f107 030c 	add.w	r3, r7, #12
 8011432:	f107 0210 	add.w	r2, r7, #16
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7f8 fb12 	bl	8009a60 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	080181bc 	.word	0x080181bc
 8011448:	0801831c 	.word	0x0801831c
 801144c:	0801821c 	.word	0x0801821c
 8011450:	08018338 	.word	0x08018338
 8011454:	88888889 	.word	0x88888889

08011458 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b08a      	sub	sp, #40	; 0x28
 801145c:	af02      	add	r7, sp, #8
 801145e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011464:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011466:	2105      	movs	r1, #5
 8011468:	69b8      	ldr	r0, [r7, #24]
 801146a:	f000 fa7d 	bl	8011968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801146e:	f107 030c 	add.w	r3, r7, #12
 8011472:	2203      	movs	r2, #3
 8011474:	69b9      	ldr	r1, [r7, #24]
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 ff02 	bl	8012280 <dhcp_create_msg>
 801147c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d04e      	beq.n	8011522 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801148a:	89b8      	ldrh	r0, [r7, #12]
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011492:	2302      	movs	r3, #2
 8011494:	2239      	movs	r2, #57	; 0x39
 8011496:	f000 fa81 	bl	801199c <dhcp_option>
 801149a:	4603      	mov	r3, r0
 801149c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801149e:	89b8      	ldrh	r0, [r7, #12]
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114aa:	461a      	mov	r2, r3
 80114ac:	f000 fad0 	bl	8011a50 <dhcp_option_short>
 80114b0:	4603      	mov	r3, r0
 80114b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80114b4:	89b8      	ldrh	r0, [r7, #12]
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114bc:	2303      	movs	r3, #3
 80114be:	2237      	movs	r2, #55	; 0x37
 80114c0:	f000 fa6c 	bl	801199c <dhcp_option>
 80114c4:	4603      	mov	r3, r0
 80114c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80114c8:	2300      	movs	r3, #0
 80114ca:	77bb      	strb	r3, [r7, #30]
 80114cc:	e00e      	b.n	80114ec <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80114ce:	89b8      	ldrh	r0, [r7, #12]
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80114d6:	7fbb      	ldrb	r3, [r7, #30]
 80114d8:	4a2a      	ldr	r2, [pc, #168]	; (8011584 <dhcp_renew+0x12c>)
 80114da:	5cd3      	ldrb	r3, [r2, r3]
 80114dc:	461a      	mov	r2, r3
 80114de:	f000 fa91 	bl	8011a04 <dhcp_option_byte>
 80114e2:	4603      	mov	r3, r0
 80114e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80114e6:	7fbb      	ldrb	r3, [r7, #30]
 80114e8:	3301      	adds	r3, #1
 80114ea:	77bb      	strb	r3, [r7, #30]
 80114ec:	7fbb      	ldrb	r3, [r7, #30]
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	d9ed      	bls.n	80114ce <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80114f2:	89b8      	ldrh	r0, [r7, #12]
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	33f0      	adds	r3, #240	; 0xf0
 80114f8:	697a      	ldr	r2, [r7, #20]
 80114fa:	4619      	mov	r1, r3
 80114fc:	f000 ff96 	bl	801242c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011500:	4b21      	ldr	r3, [pc, #132]	; (8011588 <dhcp_renew+0x130>)
 8011502:	6818      	ldr	r0, [r3, #0]
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	f103 0218 	add.w	r2, r3, #24
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	2343      	movs	r3, #67	; 0x43
 8011510:	6979      	ldr	r1, [r7, #20]
 8011512:	f7fe fe8d 	bl	8010230 <udp_sendto_if>
 8011516:	4603      	mov	r3, r0
 8011518:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801151a:	6978      	ldr	r0, [r7, #20]
 801151c:	f7f8 ff46 	bl	800a3ac <pbuf_free>
 8011520:	e001      	b.n	8011526 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011522:	23ff      	movs	r3, #255	; 0xff
 8011524:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	799b      	ldrb	r3, [r3, #6]
 801152a:	2bff      	cmp	r3, #255	; 0xff
 801152c:	d005      	beq.n	801153a <dhcp_renew+0xe2>
    dhcp->tries++;
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	799b      	ldrb	r3, [r3, #6]
 8011532:	3301      	adds	r3, #1
 8011534:	b2da      	uxtb	r2, r3
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	799b      	ldrb	r3, [r3, #6]
 801153e:	2b09      	cmp	r3, #9
 8011540:	d80a      	bhi.n	8011558 <dhcp_renew+0x100>
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	799b      	ldrb	r3, [r3, #6]
 8011546:	b29b      	uxth	r3, r3
 8011548:	461a      	mov	r2, r3
 801154a:	0152      	lsls	r2, r2, #5
 801154c:	1ad2      	subs	r2, r2, r3
 801154e:	0092      	lsls	r2, r2, #2
 8011550:	4413      	add	r3, r2
 8011552:	011b      	lsls	r3, r3, #4
 8011554:	b29b      	uxth	r3, r3
 8011556:	e001      	b.n	801155c <dhcp_renew+0x104>
 8011558:	f644 6320 	movw	r3, #20000	; 0x4e20
 801155c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801155e:	89fb      	ldrh	r3, [r7, #14]
 8011560:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011564:	4a09      	ldr	r2, [pc, #36]	; (801158c <dhcp_renew+0x134>)
 8011566:	fb82 1203 	smull	r1, r2, r2, r3
 801156a:	1152      	asrs	r2, r2, #5
 801156c:	17db      	asrs	r3, r3, #31
 801156e:	1ad3      	subs	r3, r2, r3
 8011570:	b29a      	uxth	r2, r3
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011576:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3720      	adds	r7, #32
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	2000001c 	.word	0x2000001c
 8011588:	2000d444 	.word	0x2000d444
 801158c:	10624dd3 	.word	0x10624dd3

08011590 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b08a      	sub	sp, #40	; 0x28
 8011594:	af02      	add	r7, sp, #8
 8011596:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801159c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801159e:	2104      	movs	r1, #4
 80115a0:	69b8      	ldr	r0, [r7, #24]
 80115a2:	f000 f9e1 	bl	8011968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80115a6:	f107 030c 	add.w	r3, r7, #12
 80115aa:	2203      	movs	r2, #3
 80115ac:	69b9      	ldr	r1, [r7, #24]
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 fe66 	bl	8012280 <dhcp_create_msg>
 80115b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d04c      	beq.n	8011656 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80115c2:	89b8      	ldrh	r0, [r7, #12]
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115ca:	2302      	movs	r3, #2
 80115cc:	2239      	movs	r2, #57	; 0x39
 80115ce:	f000 f9e5 	bl	801199c <dhcp_option>
 80115d2:	4603      	mov	r3, r0
 80115d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80115d6:	89b8      	ldrh	r0, [r7, #12]
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115e2:	461a      	mov	r2, r3
 80115e4:	f000 fa34 	bl	8011a50 <dhcp_option_short>
 80115e8:	4603      	mov	r3, r0
 80115ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80115ec:	89b8      	ldrh	r0, [r7, #12]
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115f4:	2303      	movs	r3, #3
 80115f6:	2237      	movs	r2, #55	; 0x37
 80115f8:	f000 f9d0 	bl	801199c <dhcp_option>
 80115fc:	4603      	mov	r3, r0
 80115fe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011600:	2300      	movs	r3, #0
 8011602:	77bb      	strb	r3, [r7, #30]
 8011604:	e00e      	b.n	8011624 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011606:	89b8      	ldrh	r0, [r7, #12]
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801160e:	7fbb      	ldrb	r3, [r7, #30]
 8011610:	4a29      	ldr	r2, [pc, #164]	; (80116b8 <dhcp_rebind+0x128>)
 8011612:	5cd3      	ldrb	r3, [r2, r3]
 8011614:	461a      	mov	r2, r3
 8011616:	f000 f9f5 	bl	8011a04 <dhcp_option_byte>
 801161a:	4603      	mov	r3, r0
 801161c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801161e:	7fbb      	ldrb	r3, [r7, #30]
 8011620:	3301      	adds	r3, #1
 8011622:	77bb      	strb	r3, [r7, #30]
 8011624:	7fbb      	ldrb	r3, [r7, #30]
 8011626:	2b02      	cmp	r3, #2
 8011628:	d9ed      	bls.n	8011606 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801162a:	89b8      	ldrh	r0, [r7, #12]
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	33f0      	adds	r3, #240	; 0xf0
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	4619      	mov	r1, r3
 8011634:	f000 fefa 	bl	801242c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011638:	4b20      	ldr	r3, [pc, #128]	; (80116bc <dhcp_rebind+0x12c>)
 801163a:	6818      	ldr	r0, [r3, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	2343      	movs	r3, #67	; 0x43
 8011642:	4a1f      	ldr	r2, [pc, #124]	; (80116c0 <dhcp_rebind+0x130>)
 8011644:	6979      	ldr	r1, [r7, #20]
 8011646:	f7fe fdf3 	bl	8010230 <udp_sendto_if>
 801164a:	4603      	mov	r3, r0
 801164c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801164e:	6978      	ldr	r0, [r7, #20]
 8011650:	f7f8 feac 	bl	800a3ac <pbuf_free>
 8011654:	e001      	b.n	801165a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011656:	23ff      	movs	r3, #255	; 0xff
 8011658:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	799b      	ldrb	r3, [r3, #6]
 801165e:	2bff      	cmp	r3, #255	; 0xff
 8011660:	d005      	beq.n	801166e <dhcp_rebind+0xde>
    dhcp->tries++;
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	799b      	ldrb	r3, [r3, #6]
 8011666:	3301      	adds	r3, #1
 8011668:	b2da      	uxtb	r2, r3
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	799b      	ldrb	r3, [r3, #6]
 8011672:	2b09      	cmp	r3, #9
 8011674:	d80a      	bhi.n	801168c <dhcp_rebind+0xfc>
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	799b      	ldrb	r3, [r3, #6]
 801167a:	b29b      	uxth	r3, r3
 801167c:	461a      	mov	r2, r3
 801167e:	0152      	lsls	r2, r2, #5
 8011680:	1ad2      	subs	r2, r2, r3
 8011682:	0092      	lsls	r2, r2, #2
 8011684:	4413      	add	r3, r2
 8011686:	00db      	lsls	r3, r3, #3
 8011688:	b29b      	uxth	r3, r3
 801168a:	e001      	b.n	8011690 <dhcp_rebind+0x100>
 801168c:	f242 7310 	movw	r3, #10000	; 0x2710
 8011690:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011692:	89fb      	ldrh	r3, [r7, #14]
 8011694:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011698:	4a0a      	ldr	r2, [pc, #40]	; (80116c4 <dhcp_rebind+0x134>)
 801169a:	fb82 1203 	smull	r1, r2, r2, r3
 801169e:	1152      	asrs	r2, r2, #5
 80116a0:	17db      	asrs	r3, r3, #31
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80116aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3720      	adds	r7, #32
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	2000001c 	.word	0x2000001c
 80116bc:	2000d444 	.word	0x2000d444
 80116c0:	08018d8c 	.word	0x08018d8c
 80116c4:	10624dd3 	.word	0x10624dd3

080116c8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80116c8:	b5b0      	push	{r4, r5, r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af02      	add	r7, sp, #8
 80116ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80116d6:	2103      	movs	r1, #3
 80116d8:	69b8      	ldr	r0, [r7, #24]
 80116da:	f000 f945 	bl	8011968 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80116de:	f107 030c 	add.w	r3, r7, #12
 80116e2:	2203      	movs	r2, #3
 80116e4:	69b9      	ldr	r1, [r7, #24]
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 fdca 	bl	8012280 <dhcp_create_msg>
 80116ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d066      	beq.n	80117c2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80116fa:	89b8      	ldrh	r0, [r7, #12]
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011702:	2302      	movs	r3, #2
 8011704:	2239      	movs	r2, #57	; 0x39
 8011706:	f000 f949 	bl	801199c <dhcp_option>
 801170a:	4603      	mov	r3, r0
 801170c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801170e:	89b8      	ldrh	r0, [r7, #12]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	33f0      	adds	r3, #240	; 0xf0
 8011714:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011718:	4619      	mov	r1, r3
 801171a:	f000 f999 	bl	8011a50 <dhcp_option_short>
 801171e:	4603      	mov	r3, r0
 8011720:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011722:	89b8      	ldrh	r0, [r7, #12]
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801172a:	2304      	movs	r3, #4
 801172c:	2232      	movs	r2, #50	; 0x32
 801172e:	f000 f935 	bl	801199c <dhcp_option>
 8011732:	4603      	mov	r3, r0
 8011734:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011736:	89bc      	ldrh	r4, [r7, #12]
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	4618      	mov	r0, r3
 8011744:	f7f7 fab1 	bl	8008caa <lwip_htonl>
 8011748:	4603      	mov	r3, r0
 801174a:	461a      	mov	r2, r3
 801174c:	4629      	mov	r1, r5
 801174e:	4620      	mov	r0, r4
 8011750:	f000 f9b0 	bl	8011ab4 <dhcp_option_long>
 8011754:	4603      	mov	r3, r0
 8011756:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011758:	89b8      	ldrh	r0, [r7, #12]
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011760:	2303      	movs	r3, #3
 8011762:	2237      	movs	r2, #55	; 0x37
 8011764:	f000 f91a 	bl	801199c <dhcp_option>
 8011768:	4603      	mov	r3, r0
 801176a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801176c:	2300      	movs	r3, #0
 801176e:	77bb      	strb	r3, [r7, #30]
 8011770:	e00e      	b.n	8011790 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011772:	89b8      	ldrh	r0, [r7, #12]
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801177a:	7fbb      	ldrb	r3, [r7, #30]
 801177c:	4a29      	ldr	r2, [pc, #164]	; (8011824 <dhcp_reboot+0x15c>)
 801177e:	5cd3      	ldrb	r3, [r2, r3]
 8011780:	461a      	mov	r2, r3
 8011782:	f000 f93f 	bl	8011a04 <dhcp_option_byte>
 8011786:	4603      	mov	r3, r0
 8011788:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801178a:	7fbb      	ldrb	r3, [r7, #30]
 801178c:	3301      	adds	r3, #1
 801178e:	77bb      	strb	r3, [r7, #30]
 8011790:	7fbb      	ldrb	r3, [r7, #30]
 8011792:	2b02      	cmp	r3, #2
 8011794:	d9ed      	bls.n	8011772 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011796:	89b8      	ldrh	r0, [r7, #12]
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	33f0      	adds	r3, #240	; 0xf0
 801179c:	697a      	ldr	r2, [r7, #20]
 801179e:	4619      	mov	r1, r3
 80117a0:	f000 fe44 	bl	801242c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80117a4:	4b20      	ldr	r3, [pc, #128]	; (8011828 <dhcp_reboot+0x160>)
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	2343      	movs	r3, #67	; 0x43
 80117ae:	4a1f      	ldr	r2, [pc, #124]	; (801182c <dhcp_reboot+0x164>)
 80117b0:	6979      	ldr	r1, [r7, #20]
 80117b2:	f7fe fd3d 	bl	8010230 <udp_sendto_if>
 80117b6:	4603      	mov	r3, r0
 80117b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80117ba:	6978      	ldr	r0, [r7, #20]
 80117bc:	f7f8 fdf6 	bl	800a3ac <pbuf_free>
 80117c0:	e001      	b.n	80117c6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80117c2:	23ff      	movs	r3, #255	; 0xff
 80117c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	799b      	ldrb	r3, [r3, #6]
 80117ca:	2bff      	cmp	r3, #255	; 0xff
 80117cc:	d005      	beq.n	80117da <dhcp_reboot+0x112>
    dhcp->tries++;
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	799b      	ldrb	r3, [r3, #6]
 80117d2:	3301      	adds	r3, #1
 80117d4:	b2da      	uxtb	r2, r3
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	799b      	ldrb	r3, [r3, #6]
 80117de:	2b09      	cmp	r3, #9
 80117e0:	d80a      	bhi.n	80117f8 <dhcp_reboot+0x130>
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	799b      	ldrb	r3, [r3, #6]
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	0152      	lsls	r2, r2, #5
 80117ec:	1ad2      	subs	r2, r2, r3
 80117ee:	0092      	lsls	r2, r2, #2
 80117f0:	4413      	add	r3, r2
 80117f2:	00db      	lsls	r3, r3, #3
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	e001      	b.n	80117fc <dhcp_reboot+0x134>
 80117f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80117fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117fe:	89fb      	ldrh	r3, [r7, #14]
 8011800:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011804:	4a0a      	ldr	r2, [pc, #40]	; (8011830 <dhcp_reboot+0x168>)
 8011806:	fb82 1203 	smull	r1, r2, r2, r3
 801180a:	1152      	asrs	r2, r2, #5
 801180c:	17db      	asrs	r3, r3, #31
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	b29a      	uxth	r2, r3
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011816:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801181a:	4618      	mov	r0, r3
 801181c:	3720      	adds	r7, #32
 801181e:	46bd      	mov	sp, r7
 8011820:	bdb0      	pop	{r4, r5, r7, pc}
 8011822:	bf00      	nop
 8011824:	2000001c 	.word	0x2000001c
 8011828:	2000d444 	.word	0x2000d444
 801182c:	08018d8c 	.word	0x08018d8c
 8011830:	10624dd3 	.word	0x10624dd3

08011834 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011834:	b5b0      	push	{r4, r5, r7, lr}
 8011836:	b08a      	sub	sp, #40	; 0x28
 8011838:	af02      	add	r7, sp, #8
 801183a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011840:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	2b00      	cmp	r3, #0
 8011846:	f000 8084 	beq.w	8011952 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	795b      	ldrb	r3, [r3, #5]
 801184e:	2b00      	cmp	r3, #0
 8011850:	f000 8081 	beq.w	8011956 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	699b      	ldr	r3, [r3, #24]
 8011858:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	2200      	movs	r2, #0
 801185e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	2200      	movs	r2, #0
 8011864:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	2200      	movs	r2, #0
 801186a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	2200      	movs	r2, #0
 8011870:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	2200      	movs	r2, #0
 8011876:	631a      	str	r2, [r3, #48]	; 0x30
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	62da      	str	r2, [r3, #44]	; 0x2c
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	2200      	movs	r2, #0
 801188c:	829a      	strh	r2, [r3, #20]
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	8a9a      	ldrh	r2, [r3, #20]
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	825a      	strh	r2, [r3, #18]
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	8a5a      	ldrh	r2, [r3, #18]
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	821a      	strh	r2, [r3, #16]
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	8a1a      	ldrh	r2, [r3, #16]
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 fdee 	bl	8012488 <dhcp_supplied_address>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d03b      	beq.n	801192a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80118b2:	f107 030e 	add.w	r3, r7, #14
 80118b6:	2207      	movs	r2, #7
 80118b8:	69f9      	ldr	r1, [r7, #28]
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 fce0 	bl	8012280 <dhcp_create_msg>
 80118c0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d030      	beq.n	801192a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80118ce:	89f8      	ldrh	r0, [r7, #14]
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118d6:	2304      	movs	r3, #4
 80118d8:	2236      	movs	r2, #54	; 0x36
 80118da:	f000 f85f 	bl	801199c <dhcp_option>
 80118de:	4603      	mov	r3, r0
 80118e0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80118e2:	89fc      	ldrh	r4, [r7, #14]
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7f7 f9dc 	bl	8008caa <lwip_htonl>
 80118f2:	4603      	mov	r3, r0
 80118f4:	461a      	mov	r2, r3
 80118f6:	4629      	mov	r1, r5
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 f8db 	bl	8011ab4 <dhcp_option_long>
 80118fe:	4603      	mov	r3, r0
 8011900:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011902:	89f8      	ldrh	r0, [r7, #14]
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	33f0      	adds	r3, #240	; 0xf0
 8011908:	69ba      	ldr	r2, [r7, #24]
 801190a:	4619      	mov	r1, r3
 801190c:	f000 fd8e 	bl	801242c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011910:	4b13      	ldr	r3, [pc, #76]	; (8011960 <dhcp_release_and_stop+0x12c>)
 8011912:	6818      	ldr	r0, [r3, #0]
 8011914:	f107 0210 	add.w	r2, r7, #16
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	2343      	movs	r3, #67	; 0x43
 801191e:	69b9      	ldr	r1, [r7, #24]
 8011920:	f7fe fc86 	bl	8010230 <udp_sendto_if>
      pbuf_free(p_out);
 8011924:	69b8      	ldr	r0, [r7, #24]
 8011926:	f7f8 fd41 	bl	800a3ac <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801192a:	4b0e      	ldr	r3, [pc, #56]	; (8011964 <dhcp_release_and_stop+0x130>)
 801192c:	4a0d      	ldr	r2, [pc, #52]	; (8011964 <dhcp_release_and_stop+0x130>)
 801192e:	490d      	ldr	r1, [pc, #52]	; (8011964 <dhcp_release_and_stop+0x130>)
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7f8 f895 	bl	8009a60 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011936:	2100      	movs	r1, #0
 8011938:	69f8      	ldr	r0, [r7, #28]
 801193a:	f000 f815 	bl	8011968 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	791b      	ldrb	r3, [r3, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d008      	beq.n	8011958 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011946:	f7fe ffbf 	bl	80108c8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	2200      	movs	r2, #0
 801194e:	711a      	strb	r2, [r3, #4]
 8011950:	e002      	b.n	8011958 <dhcp_release_and_stop+0x124>
    return;
 8011952:	bf00      	nop
 8011954:	e000      	b.n	8011958 <dhcp_release_and_stop+0x124>
    return;
 8011956:	bf00      	nop
  }
}
 8011958:	3720      	adds	r7, #32
 801195a:	46bd      	mov	sp, r7
 801195c:	bdb0      	pop	{r4, r5, r7, pc}
 801195e:	bf00      	nop
 8011960:	2000d444 	.word	0x2000d444
 8011964:	08018d88 	.word	0x08018d88

08011968 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	460b      	mov	r3, r1
 8011972:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	795b      	ldrb	r3, [r3, #5]
 8011978:	78fa      	ldrb	r2, [r7, #3]
 801197a:	429a      	cmp	r2, r3
 801197c:	d008      	beq.n	8011990 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	78fa      	ldrb	r2, [r7, #3]
 8011982:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	811a      	strh	r2, [r3, #8]
  }
}
 8011990:	bf00      	nop
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6039      	str	r1, [r7, #0]
 80119a4:	4611      	mov	r1, r2
 80119a6:	461a      	mov	r2, r3
 80119a8:	4603      	mov	r3, r0
 80119aa:	80fb      	strh	r3, [r7, #6]
 80119ac:	460b      	mov	r3, r1
 80119ae:	717b      	strb	r3, [r7, #5]
 80119b0:	4613      	mov	r3, r2
 80119b2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80119b4:	88fa      	ldrh	r2, [r7, #6]
 80119b6:	793b      	ldrb	r3, [r7, #4]
 80119b8:	4413      	add	r3, r2
 80119ba:	3302      	adds	r3, #2
 80119bc:	2b44      	cmp	r3, #68	; 0x44
 80119be:	d906      	bls.n	80119ce <dhcp_option+0x32>
 80119c0:	4b0d      	ldr	r3, [pc, #52]	; (80119f8 <dhcp_option+0x5c>)
 80119c2:	f240 529a 	movw	r2, #1434	; 0x59a
 80119c6:	490d      	ldr	r1, [pc, #52]	; (80119fc <dhcp_option+0x60>)
 80119c8:	480d      	ldr	r0, [pc, #52]	; (8011a00 <dhcp_option+0x64>)
 80119ca:	f003 fa5d 	bl	8014e88 <iprintf>
  options[options_out_len++] = option_type;
 80119ce:	88fb      	ldrh	r3, [r7, #6]
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	80fa      	strh	r2, [r7, #6]
 80119d4:	461a      	mov	r2, r3
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	4413      	add	r3, r2
 80119da:	797a      	ldrb	r2, [r7, #5]
 80119dc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80119de:	88fb      	ldrh	r3, [r7, #6]
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	80fa      	strh	r2, [r7, #6]
 80119e4:	461a      	mov	r2, r3
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	4413      	add	r3, r2
 80119ea:	793a      	ldrb	r2, [r7, #4]
 80119ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80119ee:	88fb      	ldrh	r3, [r7, #6]
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	080181bc 	.word	0x080181bc
 80119fc:	08018350 	.word	0x08018350
 8011a00:	0801821c 	.word	0x0801821c

08011a04 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	6039      	str	r1, [r7, #0]
 8011a0e:	80fb      	strh	r3, [r7, #6]
 8011a10:	4613      	mov	r3, r2
 8011a12:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011a14:	88fb      	ldrh	r3, [r7, #6]
 8011a16:	2b43      	cmp	r3, #67	; 0x43
 8011a18:	d906      	bls.n	8011a28 <dhcp_option_byte+0x24>
 8011a1a:	4b0a      	ldr	r3, [pc, #40]	; (8011a44 <dhcp_option_byte+0x40>)
 8011a1c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011a20:	4909      	ldr	r1, [pc, #36]	; (8011a48 <dhcp_option_byte+0x44>)
 8011a22:	480a      	ldr	r0, [pc, #40]	; (8011a4c <dhcp_option_byte+0x48>)
 8011a24:	f003 fa30 	bl	8014e88 <iprintf>
  options[options_out_len++] = value;
 8011a28:	88fb      	ldrh	r3, [r7, #6]
 8011a2a:	1c5a      	adds	r2, r3, #1
 8011a2c:	80fa      	strh	r2, [r7, #6]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	4413      	add	r3, r2
 8011a34:	797a      	ldrb	r2, [r7, #5]
 8011a36:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011a38:	88fb      	ldrh	r3, [r7, #6]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3708      	adds	r7, #8
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	080181bc 	.word	0x080181bc
 8011a48:	08018394 	.word	0x08018394
 8011a4c:	0801821c 	.word	0x0801821c

08011a50 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4603      	mov	r3, r0
 8011a58:	6039      	str	r1, [r7, #0]
 8011a5a:	80fb      	strh	r3, [r7, #6]
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011a60:	88fb      	ldrh	r3, [r7, #6]
 8011a62:	3302      	adds	r3, #2
 8011a64:	2b44      	cmp	r3, #68	; 0x44
 8011a66:	d906      	bls.n	8011a76 <dhcp_option_short+0x26>
 8011a68:	4b0f      	ldr	r3, [pc, #60]	; (8011aa8 <dhcp_option_short+0x58>)
 8011a6a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011a6e:	490f      	ldr	r1, [pc, #60]	; (8011aac <dhcp_option_short+0x5c>)
 8011a70:	480f      	ldr	r0, [pc, #60]	; (8011ab0 <dhcp_option_short+0x60>)
 8011a72:	f003 fa09 	bl	8014e88 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011a76:	88bb      	ldrh	r3, [r7, #4]
 8011a78:	0a1b      	lsrs	r3, r3, #8
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	88fb      	ldrh	r3, [r7, #6]
 8011a7e:	1c59      	adds	r1, r3, #1
 8011a80:	80f9      	strh	r1, [r7, #6]
 8011a82:	4619      	mov	r1, r3
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	440b      	add	r3, r1
 8011a88:	b2d2      	uxtb	r2, r2
 8011a8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011a8c:	88fb      	ldrh	r3, [r7, #6]
 8011a8e:	1c5a      	adds	r2, r3, #1
 8011a90:	80fa      	strh	r2, [r7, #6]
 8011a92:	461a      	mov	r2, r3
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	4413      	add	r3, r2
 8011a98:	88ba      	ldrh	r2, [r7, #4]
 8011a9a:	b2d2      	uxtb	r2, r2
 8011a9c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011a9e:	88fb      	ldrh	r3, [r7, #6]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	080181bc 	.word	0x080181bc
 8011aac:	080183cc 	.word	0x080183cc
 8011ab0:	0801821c 	.word	0x0801821c

08011ab4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	4603      	mov	r3, r0
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
 8011ac0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011ac2:	89fb      	ldrh	r3, [r7, #14]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	2b44      	cmp	r3, #68	; 0x44
 8011ac8:	d906      	bls.n	8011ad8 <dhcp_option_long+0x24>
 8011aca:	4b19      	ldr	r3, [pc, #100]	; (8011b30 <dhcp_option_long+0x7c>)
 8011acc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011ad0:	4918      	ldr	r1, [pc, #96]	; (8011b34 <dhcp_option_long+0x80>)
 8011ad2:	4819      	ldr	r0, [pc, #100]	; (8011b38 <dhcp_option_long+0x84>)
 8011ad4:	f003 f9d8 	bl	8014e88 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	0e1a      	lsrs	r2, r3, #24
 8011adc:	89fb      	ldrh	r3, [r7, #14]
 8011ade:	1c59      	adds	r1, r3, #1
 8011ae0:	81f9      	strh	r1, [r7, #14]
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	440b      	add	r3, r1
 8011ae8:	b2d2      	uxtb	r2, r2
 8011aea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	0c1a      	lsrs	r2, r3, #16
 8011af0:	89fb      	ldrh	r3, [r7, #14]
 8011af2:	1c59      	adds	r1, r3, #1
 8011af4:	81f9      	strh	r1, [r7, #14]
 8011af6:	4619      	mov	r1, r3
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	440b      	add	r3, r1
 8011afc:	b2d2      	uxtb	r2, r2
 8011afe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	0a1a      	lsrs	r2, r3, #8
 8011b04:	89fb      	ldrh	r3, [r7, #14]
 8011b06:	1c59      	adds	r1, r3, #1
 8011b08:	81f9      	strh	r1, [r7, #14]
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	440b      	add	r3, r1
 8011b10:	b2d2      	uxtb	r2, r2
 8011b12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011b14:	89fb      	ldrh	r3, [r7, #14]
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	81fa      	strh	r2, [r7, #14]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	4413      	add	r3, r2
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	b2d2      	uxtb	r2, r2
 8011b24:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011b26:	89fb      	ldrh	r3, [r7, #14]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	080181bc 	.word	0x080181bc
 8011b34:	08018408 	.word	0x08018408
 8011b38:	0801821c 	.word	0x0801821c

08011b3c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b090      	sub	sp, #64	; 0x40
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011b4e:	2208      	movs	r2, #8
 8011b50:	2100      	movs	r1, #0
 8011b52:	48b5      	ldr	r0, [pc, #724]	; (8011e28 <dhcp_parse_reply+0x2ec>)
 8011b54:	f003 f9fd 	bl	8014f52 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	895b      	ldrh	r3, [r3, #10]
 8011b5c:	2b2b      	cmp	r3, #43	; 0x2b
 8011b5e:	d802      	bhi.n	8011b66 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011b60:	f06f 0301 	mvn.w	r3, #1
 8011b64:	e2a7      	b.n	80120b6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011b6c:	23f0      	movs	r3, #240	; 0xf0
 8011b6e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	891b      	ldrh	r3, [r3, #8]
 8011b74:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011b7a:	e00c      	b.n	8011b96 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7e:	895b      	ldrh	r3, [r3, #10]
 8011b80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b82:	1ad3      	subs	r3, r2, r3
 8011b84:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	895b      	ldrh	r3, [r3, #10]
 8011b8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d004      	beq.n	8011ba6 <dhcp_parse_reply+0x6a>
 8011b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9e:	895b      	ldrh	r3, [r3, #10]
 8011ba0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d2ea      	bcs.n	8011b7c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d102      	bne.n	8011bb2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011bac:	f06f 0301 	mvn.w	r3, #1
 8011bb0:	e281      	b.n	80120b6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8011bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011bb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011bb8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011bc0:	e239      	b.n	8012036 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8011bc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bc6:	4413      	add	r3, r2
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011bd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bda:	3302      	adds	r3, #2
 8011bdc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011bde:	8bfa      	ldrh	r2, [r7, #30]
 8011be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d202      	bcs.n	8011bec <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011be6:	f06f 0301 	mvn.w	r3, #1
 8011bea:	e264      	b.n	80120b6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011bec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bee:	3301      	adds	r3, #1
 8011bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bf2:	8952      	ldrh	r2, [r2, #10]
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	da07      	bge.n	8011c08 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011bfe:	4413      	add	r3, r2
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c06:	e00b      	b.n	8011c20 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <dhcp_parse_reply+0xde>
 8011c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	e000      	b.n	8011c1c <dhcp_parse_reply+0xe0>
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011c28:	7dfb      	ldrb	r3, [r7, #23]
 8011c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8011c2c:	f200 812c 	bhi.w	8011e88 <dhcp_parse_reply+0x34c>
 8011c30:	a201      	add	r2, pc, #4	; (adr r2, 8011c38 <dhcp_parse_reply+0xfc>)
 8011c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c36:	bf00      	nop
 8011c38:	08011d29 	.word	0x08011d29
 8011c3c:	08011d39 	.word	0x08011d39
 8011c40:	08011e89 	.word	0x08011e89
 8011c44:	08011d5b 	.word	0x08011d5b
 8011c48:	08011e89 	.word	0x08011e89
 8011c4c:	08011e89 	.word	0x08011e89
 8011c50:	08011e89 	.word	0x08011e89
 8011c54:	08011e89 	.word	0x08011e89
 8011c58:	08011e89 	.word	0x08011e89
 8011c5c:	08011e89 	.word	0x08011e89
 8011c60:	08011e89 	.word	0x08011e89
 8011c64:	08011e89 	.word	0x08011e89
 8011c68:	08011e89 	.word	0x08011e89
 8011c6c:	08011e89 	.word	0x08011e89
 8011c70:	08011e89 	.word	0x08011e89
 8011c74:	08011e89 	.word	0x08011e89
 8011c78:	08011e89 	.word	0x08011e89
 8011c7c:	08011e89 	.word	0x08011e89
 8011c80:	08011e89 	.word	0x08011e89
 8011c84:	08011e89 	.word	0x08011e89
 8011c88:	08011e89 	.word	0x08011e89
 8011c8c:	08011e89 	.word	0x08011e89
 8011c90:	08011e89 	.word	0x08011e89
 8011c94:	08011e89 	.word	0x08011e89
 8011c98:	08011e89 	.word	0x08011e89
 8011c9c:	08011e89 	.word	0x08011e89
 8011ca0:	08011e89 	.word	0x08011e89
 8011ca4:	08011e89 	.word	0x08011e89
 8011ca8:	08011e89 	.word	0x08011e89
 8011cac:	08011e89 	.word	0x08011e89
 8011cb0:	08011e89 	.word	0x08011e89
 8011cb4:	08011e89 	.word	0x08011e89
 8011cb8:	08011e89 	.word	0x08011e89
 8011cbc:	08011e89 	.word	0x08011e89
 8011cc0:	08011e89 	.word	0x08011e89
 8011cc4:	08011e89 	.word	0x08011e89
 8011cc8:	08011e89 	.word	0x08011e89
 8011ccc:	08011e89 	.word	0x08011e89
 8011cd0:	08011e89 	.word	0x08011e89
 8011cd4:	08011e89 	.word	0x08011e89
 8011cd8:	08011e89 	.word	0x08011e89
 8011cdc:	08011e89 	.word	0x08011e89
 8011ce0:	08011e89 	.word	0x08011e89
 8011ce4:	08011e89 	.word	0x08011e89
 8011ce8:	08011e89 	.word	0x08011e89
 8011cec:	08011e89 	.word	0x08011e89
 8011cf0:	08011e89 	.word	0x08011e89
 8011cf4:	08011e89 	.word	0x08011e89
 8011cf8:	08011e89 	.word	0x08011e89
 8011cfc:	08011e89 	.word	0x08011e89
 8011d00:	08011e89 	.word	0x08011e89
 8011d04:	08011d87 	.word	0x08011d87
 8011d08:	08011da9 	.word	0x08011da9
 8011d0c:	08011de5 	.word	0x08011de5
 8011d10:	08011e07 	.word	0x08011e07
 8011d14:	08011e89 	.word	0x08011e89
 8011d18:	08011e89 	.word	0x08011e89
 8011d1c:	08011e89 	.word	0x08011e89
 8011d20:	08011e45 	.word	0x08011e45
 8011d24:	08011e67 	.word	0x08011e67
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011d36:	e0ab      	b.n	8011e90 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	d009      	beq.n	8011d54 <dhcp_parse_reply+0x218>
 8011d40:	4b3a      	ldr	r3, [pc, #232]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011d42:	f240 622e 	movw	r2, #1582	; 0x62e
 8011d46:	493a      	ldr	r1, [pc, #232]	; (8011e30 <dhcp_parse_reply+0x2f4>)
 8011d48:	483a      	ldr	r0, [pc, #232]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011d4a:	f003 f89d 	bl	8014e88 <iprintf>
 8011d4e:	f06f 0305 	mvn.w	r3, #5
 8011d52:	e1b0      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011d54:	2306      	movs	r3, #6
 8011d56:	623b      	str	r3, [r7, #32]
        break;
 8011d58:	e09a      	b.n	8011e90 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011d5a:	2304      	movs	r3, #4
 8011d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011d60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d209      	bcs.n	8011d80 <dhcp_parse_reply+0x244>
 8011d6c:	4b2f      	ldr	r3, [pc, #188]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011d6e:	f240 6233 	movw	r2, #1587	; 0x633
 8011d72:	4931      	ldr	r1, [pc, #196]	; (8011e38 <dhcp_parse_reply+0x2fc>)
 8011d74:	482f      	ldr	r0, [pc, #188]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011d76:	f003 f887 	bl	8014e88 <iprintf>
 8011d7a:	f06f 0305 	mvn.w	r3, #5
 8011d7e:	e19a      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011d80:	2307      	movs	r3, #7
 8011d82:	623b      	str	r3, [r7, #32]
        break;
 8011d84:	e084      	b.n	8011e90 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d8a:	2b04      	cmp	r3, #4
 8011d8c:	d009      	beq.n	8011da2 <dhcp_parse_reply+0x266>
 8011d8e:	4b27      	ldr	r3, [pc, #156]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011d90:	f240 6241 	movw	r2, #1601	; 0x641
 8011d94:	4926      	ldr	r1, [pc, #152]	; (8011e30 <dhcp_parse_reply+0x2f4>)
 8011d96:	4827      	ldr	r0, [pc, #156]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011d98:	f003 f876 	bl	8014e88 <iprintf>
 8011d9c:	f06f 0305 	mvn.w	r3, #5
 8011da0:	e189      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011da2:	2303      	movs	r3, #3
 8011da4:	623b      	str	r3, [r7, #32]
        break;
 8011da6:	e073      	b.n	8011e90 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d009      	beq.n	8011dc4 <dhcp_parse_reply+0x288>
 8011db0:	4b1e      	ldr	r3, [pc, #120]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011db2:	f240 624f 	movw	r2, #1615	; 0x64f
 8011db6:	4921      	ldr	r1, [pc, #132]	; (8011e3c <dhcp_parse_reply+0x300>)
 8011db8:	481e      	ldr	r0, [pc, #120]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011dba:	f003 f865 	bl	8014e88 <iprintf>
 8011dbe:	f06f 0305 	mvn.w	r3, #5
 8011dc2:	e178      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011dc6:	2bf0      	cmp	r3, #240	; 0xf0
 8011dc8:	d009      	beq.n	8011dde <dhcp_parse_reply+0x2a2>
 8011dca:	4b18      	ldr	r3, [pc, #96]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011dcc:	f240 6251 	movw	r2, #1617	; 0x651
 8011dd0:	491b      	ldr	r1, [pc, #108]	; (8011e40 <dhcp_parse_reply+0x304>)
 8011dd2:	4818      	ldr	r0, [pc, #96]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011dd4:	f003 f858 	bl	8014e88 <iprintf>
 8011dd8:	f06f 0305 	mvn.w	r3, #5
 8011ddc:	e16b      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8011dde:	2300      	movs	r3, #0
 8011de0:	623b      	str	r3, [r7, #32]
        break;
 8011de2:	e055      	b.n	8011e90 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d009      	beq.n	8011e00 <dhcp_parse_reply+0x2c4>
 8011dec:	4b0f      	ldr	r3, [pc, #60]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011dee:	f240 6255 	movw	r2, #1621	; 0x655
 8011df2:	4912      	ldr	r1, [pc, #72]	; (8011e3c <dhcp_parse_reply+0x300>)
 8011df4:	480f      	ldr	r0, [pc, #60]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011df6:	f003 f847 	bl	8014e88 <iprintf>
 8011dfa:	f06f 0305 	mvn.w	r3, #5
 8011dfe:	e15a      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011e00:	2301      	movs	r3, #1
 8011e02:	623b      	str	r3, [r7, #32]
        break;
 8011e04:	e044      	b.n	8011e90 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e0a:	2b04      	cmp	r3, #4
 8011e0c:	d009      	beq.n	8011e22 <dhcp_parse_reply+0x2e6>
 8011e0e:	4b07      	ldr	r3, [pc, #28]	; (8011e2c <dhcp_parse_reply+0x2f0>)
 8011e10:	f240 6259 	movw	r2, #1625	; 0x659
 8011e14:	4906      	ldr	r1, [pc, #24]	; (8011e30 <dhcp_parse_reply+0x2f4>)
 8011e16:	4807      	ldr	r0, [pc, #28]	; (8011e34 <dhcp_parse_reply+0x2f8>)
 8011e18:	f003 f836 	bl	8014e88 <iprintf>
 8011e1c:	f06f 0305 	mvn.w	r3, #5
 8011e20:	e149      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011e22:	2302      	movs	r3, #2
 8011e24:	623b      	str	r3, [r7, #32]
        break;
 8011e26:	e033      	b.n	8011e90 <dhcp_parse_reply+0x354>
 8011e28:	2000d43c 	.word	0x2000d43c
 8011e2c:	080181bc 	.word	0x080181bc
 8011e30:	08018444 	.word	0x08018444
 8011e34:	0801821c 	.word	0x0801821c
 8011e38:	08018450 	.word	0x08018450
 8011e3c:	08018464 	.word	0x08018464
 8011e40:	08018470 	.word	0x08018470
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e48:	2b04      	cmp	r3, #4
 8011e4a:	d009      	beq.n	8011e60 <dhcp_parse_reply+0x324>
 8011e4c:	4b9c      	ldr	r3, [pc, #624]	; (80120c0 <dhcp_parse_reply+0x584>)
 8011e4e:	f240 625d 	movw	r2, #1629	; 0x65d
 8011e52:	499c      	ldr	r1, [pc, #624]	; (80120c4 <dhcp_parse_reply+0x588>)
 8011e54:	489c      	ldr	r0, [pc, #624]	; (80120c8 <dhcp_parse_reply+0x58c>)
 8011e56:	f003 f817 	bl	8014e88 <iprintf>
 8011e5a:	f06f 0305 	mvn.w	r3, #5
 8011e5e:	e12a      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011e60:	2304      	movs	r3, #4
 8011e62:	623b      	str	r3, [r7, #32]
        break;
 8011e64:	e014      	b.n	8011e90 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e6a:	2b04      	cmp	r3, #4
 8011e6c:	d009      	beq.n	8011e82 <dhcp_parse_reply+0x346>
 8011e6e:	4b94      	ldr	r3, [pc, #592]	; (80120c0 <dhcp_parse_reply+0x584>)
 8011e70:	f240 6261 	movw	r2, #1633	; 0x661
 8011e74:	4993      	ldr	r1, [pc, #588]	; (80120c4 <dhcp_parse_reply+0x588>)
 8011e76:	4894      	ldr	r0, [pc, #592]	; (80120c8 <dhcp_parse_reply+0x58c>)
 8011e78:	f003 f806 	bl	8014e88 <iprintf>
 8011e7c:	f06f 0305 	mvn.w	r3, #5
 8011e80:	e119      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011e82:	2305      	movs	r3, #5
 8011e84:	623b      	str	r3, [r7, #32]
        break;
 8011e86:	e003      	b.n	8011e90 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011e8e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d103      	bne.n	8011e9e <dhcp_parse_reply+0x362>
      offset++;
 8011e96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e98:	3301      	adds	r3, #1
 8011e9a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011e9c:	e0a1      	b.n	8011fe2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011e9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ea4:	4413      	add	r3, r2
 8011ea6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	dd02      	ble.n	8011eb4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8011eae:	f06f 0301 	mvn.w	r3, #1
 8011eb2:	e100      	b.n	80120b6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8011eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ebc:	4413      	add	r3, r2
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	3302      	adds	r3, #2
 8011ec2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f000 808a 	beq.w	8011fe2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011ed2:	6a3b      	ldr	r3, [r7, #32]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	db02      	blt.n	8011ede <dhcp_parse_reply+0x3a2>
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	2b07      	cmp	r3, #7
 8011edc:	dd06      	ble.n	8011eec <dhcp_parse_reply+0x3b0>
 8011ede:	4b78      	ldr	r3, [pc, #480]	; (80120c0 <dhcp_parse_reply+0x584>)
 8011ee0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011ee4:	4979      	ldr	r1, [pc, #484]	; (80120cc <dhcp_parse_reply+0x590>)
 8011ee6:	4878      	ldr	r0, [pc, #480]	; (80120c8 <dhcp_parse_reply+0x58c>)
 8011ee8:	f002 ffce 	bl	8014e88 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011eec:	4a78      	ldr	r2, [pc, #480]	; (80120d0 <dhcp_parse_reply+0x594>)
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d174      	bne.n	8011fe2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8011ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011efc:	2b04      	cmp	r3, #4
 8011efe:	bf28      	it	cs
 8011f00:	2304      	movcs	r3, #4
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011f06:	8bfb      	ldrh	r3, [r7, #30]
 8011f08:	8aba      	ldrh	r2, [r7, #20]
 8011f0a:	f107 0108 	add.w	r1, r7, #8
 8011f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f10:	f7f8 fc52 	bl	800a7b8 <pbuf_copy_partial>
 8011f14:	4603      	mov	r3, r0
 8011f16:	461a      	mov	r2, r3
 8011f18:	8abb      	ldrh	r3, [r7, #20]
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d002      	beq.n	8011f24 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8011f1e:	f06f 0301 	mvn.w	r3, #1
 8011f22:	e0c8      	b.n	80120b6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8011f24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f28:	2b04      	cmp	r3, #4
 8011f2a:	d933      	bls.n	8011f94 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f30:	f003 0303 	and.w	r3, r3, #3
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d009      	beq.n	8011f4e <dhcp_parse_reply+0x412>
 8011f3a:	4b61      	ldr	r3, [pc, #388]	; (80120c0 <dhcp_parse_reply+0x584>)
 8011f3c:	f240 6281 	movw	r2, #1665	; 0x681
 8011f40:	4964      	ldr	r1, [pc, #400]	; (80120d4 <dhcp_parse_reply+0x598>)
 8011f42:	4861      	ldr	r0, [pc, #388]	; (80120c8 <dhcp_parse_reply+0x58c>)
 8011f44:	f002 ffa0 	bl	8014e88 <iprintf>
 8011f48:	f06f 0305 	mvn.w	r3, #5
 8011f4c:	e0b3      	b.n	80120b6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8011f4e:	4a60      	ldr	r2, [pc, #384]	; (80120d0 <dhcp_parse_reply+0x594>)
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	4413      	add	r3, r2
 8011f54:	2201      	movs	r2, #1
 8011f56:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7f6 fea5 	bl	8008caa <lwip_htonl>
 8011f60:	4602      	mov	r2, r0
 8011f62:	495d      	ldr	r1, [pc, #372]	; (80120d8 <dhcp_parse_reply+0x59c>)
 8011f64:	6a3b      	ldr	r3, [r7, #32]
 8011f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f6e:	3b04      	subs	r3, #4
 8011f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011f74:	8bfb      	ldrh	r3, [r7, #30]
 8011f76:	3304      	adds	r3, #4
 8011f78:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011f7a:	8a7a      	ldrh	r2, [r7, #18]
 8011f7c:	8bfb      	ldrh	r3, [r7, #30]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d202      	bcs.n	8011f88 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8011f82:	f06f 0301 	mvn.w	r3, #1
 8011f86:	e096      	b.n	80120b6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8011f88:	8a7b      	ldrh	r3, [r7, #18]
 8011f8a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011f8c:	6a3b      	ldr	r3, [r7, #32]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011f92:	e79e      	b.n	8011ed2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8011f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f98:	2b04      	cmp	r3, #4
 8011f9a:	d106      	bne.n	8011faa <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7f6 fe83 	bl	8008caa <lwip_htonl>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	60bb      	str	r3, [r7, #8]
 8011fa8:	e011      	b.n	8011fce <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d009      	beq.n	8011fc6 <dhcp_parse_reply+0x48a>
 8011fb2:	4b43      	ldr	r3, [pc, #268]	; (80120c0 <dhcp_parse_reply+0x584>)
 8011fb4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011fb8:	4948      	ldr	r1, [pc, #288]	; (80120dc <dhcp_parse_reply+0x5a0>)
 8011fba:	4843      	ldr	r0, [pc, #268]	; (80120c8 <dhcp_parse_reply+0x58c>)
 8011fbc:	f002 ff64 	bl	8014e88 <iprintf>
 8011fc0:	f06f 0305 	mvn.w	r3, #5
 8011fc4:	e077      	b.n	80120b6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011fce:	4a40      	ldr	r2, [pc, #256]	; (80120d0 <dhcp_parse_reply+0x594>)
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	493f      	ldr	r1, [pc, #252]	; (80120d8 <dhcp_parse_reply+0x59c>)
 8011fdc:	6a3b      	ldr	r3, [r7, #32]
 8011fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe4:	895b      	ldrh	r3, [r3, #10]
 8011fe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d324      	bcc.n	8012036 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8011fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fee:	895b      	ldrh	r3, [r3, #10]
 8011ff0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff8:	895b      	ldrh	r3, [r3, #10]
 8011ffa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011ffc:	1ad3      	subs	r3, r2, r3
 8011ffe:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012000:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012002:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012004:	429a      	cmp	r2, r3
 8012006:	d213      	bcs.n	8012030 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	2b00      	cmp	r3, #0
 8012012:	d109      	bne.n	8012028 <dhcp_parse_reply+0x4ec>
 8012014:	4b2a      	ldr	r3, [pc, #168]	; (80120c0 <dhcp_parse_reply+0x584>)
 8012016:	f240 629d 	movw	r2, #1693	; 0x69d
 801201a:	4931      	ldr	r1, [pc, #196]	; (80120e0 <dhcp_parse_reply+0x5a4>)
 801201c:	482a      	ldr	r0, [pc, #168]	; (80120c8 <dhcp_parse_reply+0x58c>)
 801201e:	f002 ff33 	bl	8014e88 <iprintf>
 8012022:	f06f 0305 	mvn.w	r3, #5
 8012026:	e046      	b.n	80120b6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801202e:	e002      	b.n	8012036 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012030:	f06f 0301 	mvn.w	r3, #1
 8012034:	e03f      	b.n	80120b6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00a      	beq.n	8012052 <dhcp_parse_reply+0x516>
 801203c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801203e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012040:	429a      	cmp	r2, r3
 8012042:	d206      	bcs.n	8012052 <dhcp_parse_reply+0x516>
 8012044:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012048:	4413      	add	r3, r2
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2bff      	cmp	r3, #255	; 0xff
 801204e:	f47f adb8 	bne.w	8011bc2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012052:	4b1f      	ldr	r3, [pc, #124]	; (80120d0 <dhcp_parse_reply+0x594>)
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d018      	beq.n	801208c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801205a:	4b1f      	ldr	r3, [pc, #124]	; (80120d8 <dhcp_parse_reply+0x59c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012060:	4b1b      	ldr	r3, [pc, #108]	; (80120d0 <dhcp_parse_reply+0x594>)
 8012062:	2200      	movs	r2, #0
 8012064:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d102      	bne.n	8012072 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801206c:	2301      	movs	r3, #1
 801206e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012070:	e00c      	b.n	801208c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2b02      	cmp	r3, #2
 8012076:	d102      	bne.n	801207e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8012078:	2301      	movs	r3, #1
 801207a:	62bb      	str	r3, [r7, #40]	; 0x28
 801207c:	e006      	b.n	801208c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2b03      	cmp	r3, #3
 8012082:	d103      	bne.n	801208c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012084:	2301      	movs	r3, #1
 8012086:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012088:	2301      	movs	r3, #1
 801208a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	2b00      	cmp	r3, #0
 8012090:	d006      	beq.n	80120a0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012096:	236c      	movs	r3, #108	; 0x6c
 8012098:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801209a:	23ec      	movs	r3, #236	; 0xec
 801209c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801209e:	e56a      	b.n	8011b76 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80120a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d006      	beq.n	80120b4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80120a6:	2300      	movs	r3, #0
 80120a8:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80120aa:	232c      	movs	r3, #44	; 0x2c
 80120ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80120ae:	236c      	movs	r3, #108	; 0x6c
 80120b0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80120b2:	e560      	b.n	8011b76 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3740      	adds	r7, #64	; 0x40
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	080181bc 	.word	0x080181bc
 80120c4:	08018444 	.word	0x08018444
 80120c8:	0801821c 	.word	0x0801821c
 80120cc:	08018488 	.word	0x08018488
 80120d0:	2000d43c 	.word	0x2000d43c
 80120d4:	0801849c 	.word	0x0801849c
 80120d8:	2000d41c 	.word	0x2000d41c
 80120dc:	080184b4 	.word	0x080184b4
 80120e0:	080184c8 	.word	0x080184c8

080120e4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08a      	sub	sp, #40	; 0x28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
 80120f0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80120f2:	4b60      	ldr	r3, [pc, #384]	; (8012274 <dhcp_recv+0x190>)
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 809d 	beq.w	8012246 <dhcp_recv+0x162>
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	791b      	ldrb	r3, [r3, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 8098 	beq.w	8012246 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	895b      	ldrh	r3, [r3, #10]
 801211a:	2b2b      	cmp	r3, #43	; 0x2b
 801211c:	f240 8095 	bls.w	801224a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	2b02      	cmp	r3, #2
 8012126:	f040 8092 	bne.w	801224e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801212a:	2300      	movs	r3, #0
 801212c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012130:	e012      	b.n	8012158 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012136:	6a3a      	ldr	r2, [r7, #32]
 8012138:	4413      	add	r3, r2
 801213a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801213e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012142:	69b9      	ldr	r1, [r7, #24]
 8012144:	440b      	add	r3, r1
 8012146:	7f1b      	ldrb	r3, [r3, #28]
 8012148:	429a      	cmp	r2, r3
 801214a:	f040 8082 	bne.w	8012252 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801214e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012152:	3301      	adds	r3, #1
 8012154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801215e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012162:	429a      	cmp	r2, r3
 8012164:	d203      	bcs.n	801216e <dhcp_recv+0x8a>
 8012166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801216a:	2b05      	cmp	r3, #5
 801216c:	d9e1      	bls.n	8012132 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4618      	mov	r0, r3
 8012174:	f7f6 fd99 	bl	8008caa <lwip_htonl>
 8012178:	4602      	mov	r2, r0
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	429a      	cmp	r2, r3
 8012180:	d169      	bne.n	8012256 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012182:	69f9      	ldr	r1, [r7, #28]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff fcd9 	bl	8011b3c <dhcp_parse_reply>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d164      	bne.n	801225a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012190:	4b39      	ldr	r3, [pc, #228]	; (8012278 <dhcp_recv+0x194>)
 8012192:	785b      	ldrb	r3, [r3, #1]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d062      	beq.n	801225e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801219e:	4b37      	ldr	r3, [pc, #220]	; (801227c <dhcp_recv+0x198>)
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80121a4:	7cfb      	ldrb	r3, [r7, #19]
 80121a6:	2b05      	cmp	r3, #5
 80121a8:	d12a      	bne.n	8012200 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	795b      	ldrb	r3, [r3, #5]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d112      	bne.n	80121d8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80121b2:	6979      	ldr	r1, [r7, #20]
 80121b4:	6a38      	ldr	r0, [r7, #32]
 80121b6:	f7fe fe53 	bl	8010e60 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121c0:	f003 0308 	and.w	r3, r3, #8
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d003      	beq.n	80121d0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80121c8:	6a38      	ldr	r0, [r7, #32]
 80121ca:	f7fe fbc1 	bl	8010950 <dhcp_check>
 80121ce:	e049      	b.n	8012264 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80121d0:	6a38      	ldr	r0, [r7, #32]
 80121d2:	f7ff f867 	bl	80112a4 <dhcp_bind>
 80121d6:	e045      	b.n	8012264 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	795b      	ldrb	r3, [r3, #5]
 80121dc:	2b03      	cmp	r3, #3
 80121de:	d007      	beq.n	80121f0 <dhcp_recv+0x10c>
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	795b      	ldrb	r3, [r3, #5]
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	d003      	beq.n	80121f0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80121ec:	2b05      	cmp	r3, #5
 80121ee:	d139      	bne.n	8012264 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80121f0:	6979      	ldr	r1, [r7, #20]
 80121f2:	6a38      	ldr	r0, [r7, #32]
 80121f4:	f7fe fe34 	bl	8010e60 <dhcp_handle_ack>
      dhcp_bind(netif);
 80121f8:	6a38      	ldr	r0, [r7, #32]
 80121fa:	f7ff f853 	bl	80112a4 <dhcp_bind>
 80121fe:	e031      	b.n	8012264 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012200:	7cfb      	ldrb	r3, [r7, #19]
 8012202:	2b06      	cmp	r3, #6
 8012204:	d113      	bne.n	801222e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801220a:	2b03      	cmp	r3, #3
 801220c:	d00b      	beq.n	8012226 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	795b      	ldrb	r3, [r3, #5]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d007      	beq.n	8012226 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801221a:	2b04      	cmp	r3, #4
 801221c:	d003      	beq.n	8012226 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	795b      	ldrb	r3, [r3, #5]
 8012222:	2b05      	cmp	r3, #5
 8012224:	d103      	bne.n	801222e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012226:	6a38      	ldr	r0, [r7, #32]
 8012228:	f7fe fb78 	bl	801091c <dhcp_handle_nak>
 801222c:	e01a      	b.n	8012264 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801222e:	7cfb      	ldrb	r3, [r7, #19]
 8012230:	2b02      	cmp	r3, #2
 8012232:	d116      	bne.n	8012262 <dhcp_recv+0x17e>
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	795b      	ldrb	r3, [r3, #5]
 8012238:	2b06      	cmp	r3, #6
 801223a:	d112      	bne.n	8012262 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801223c:	6979      	ldr	r1, [r7, #20]
 801223e:	6a38      	ldr	r0, [r7, #32]
 8012240:	f7fe fbba 	bl	80109b8 <dhcp_handle_offer>
 8012244:	e00e      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012246:	bf00      	nop
 8012248:	e00c      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801224a:	bf00      	nop
 801224c:	e00a      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801224e:	bf00      	nop
 8012250:	e008      	b.n	8012264 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012252:	bf00      	nop
 8012254:	e006      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012256:	bf00      	nop
 8012258:	e004      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801225a:	bf00      	nop
 801225c:	e002      	b.n	8012264 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801225e:	bf00      	nop
 8012260:	e000      	b.n	8012264 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012262:	bf00      	nop
  pbuf_free(p);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7f8 f8a1 	bl	800a3ac <pbuf_free>
}
 801226a:	bf00      	nop
 801226c:	3728      	adds	r7, #40	; 0x28
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20009c48 	.word	0x20009c48
 8012278:	2000d43c 	.word	0x2000d43c
 801227c:	2000d41c 	.word	0x2000d41c

08012280 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b088      	sub	sp, #32
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	603b      	str	r3, [r7, #0]
 801228c:	4613      	mov	r3, r2
 801228e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d108      	bne.n	80122a8 <dhcp_create_msg+0x28>
 8012296:	4b5f      	ldr	r3, [pc, #380]	; (8012414 <dhcp_create_msg+0x194>)
 8012298:	f240 7269 	movw	r2, #1897	; 0x769
 801229c:	495e      	ldr	r1, [pc, #376]	; (8012418 <dhcp_create_msg+0x198>)
 801229e:	485f      	ldr	r0, [pc, #380]	; (801241c <dhcp_create_msg+0x19c>)
 80122a0:	f002 fdf2 	bl	8014e88 <iprintf>
 80122a4:	2300      	movs	r3, #0
 80122a6:	e0b1      	b.n	801240c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d108      	bne.n	80122c0 <dhcp_create_msg+0x40>
 80122ae:	4b59      	ldr	r3, [pc, #356]	; (8012414 <dhcp_create_msg+0x194>)
 80122b0:	f240 726a 	movw	r2, #1898	; 0x76a
 80122b4:	495a      	ldr	r1, [pc, #360]	; (8012420 <dhcp_create_msg+0x1a0>)
 80122b6:	4859      	ldr	r0, [pc, #356]	; (801241c <dhcp_create_msg+0x19c>)
 80122b8:	f002 fde6 	bl	8014e88 <iprintf>
 80122bc:	2300      	movs	r3, #0
 80122be:	e0a5      	b.n	801240c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80122c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122c4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80122c8:	2036      	movs	r0, #54	; 0x36
 80122ca:	f7f7 fd8b 	bl	8009de4 <pbuf_alloc>
 80122ce:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d101      	bne.n	80122da <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	e098      	b.n	801240c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80122e2:	d206      	bcs.n	80122f2 <dhcp_create_msg+0x72>
 80122e4:	4b4b      	ldr	r3, [pc, #300]	; (8012414 <dhcp_create_msg+0x194>)
 80122e6:	f240 7271 	movw	r2, #1905	; 0x771
 80122ea:	494e      	ldr	r1, [pc, #312]	; (8012424 <dhcp_create_msg+0x1a4>)
 80122ec:	484b      	ldr	r0, [pc, #300]	; (801241c <dhcp_create_msg+0x19c>)
 80122ee:	f002 fdcb 	bl	8014e88 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80122f2:	79fb      	ldrb	r3, [r7, #7]
 80122f4:	2b03      	cmp	r3, #3
 80122f6:	d103      	bne.n	8012300 <dhcp_create_msg+0x80>
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	795b      	ldrb	r3, [r3, #5]
 80122fc:	2b03      	cmp	r3, #3
 80122fe:	d10d      	bne.n	801231c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	799b      	ldrb	r3, [r3, #6]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d105      	bne.n	8012314 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012308:	f002 fcbe 	bl	8014c88 <rand>
 801230c:	4603      	mov	r3, r0
 801230e:	461a      	mov	r2, r3
 8012310:	4b45      	ldr	r3, [pc, #276]	; (8012428 <dhcp_create_msg+0x1a8>)
 8012312:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012314:	4b44      	ldr	r3, [pc, #272]	; (8012428 <dhcp_create_msg+0x1a8>)
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012322:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012326:	2100      	movs	r1, #0
 8012328:	6978      	ldr	r0, [r7, #20]
 801232a:	f002 fe12 	bl	8014f52 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	2201      	movs	r2, #1
 8012332:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	2201      	movs	r2, #1
 8012338:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4618      	mov	r0, r3
 801234a:	f7f6 fcae 	bl	8008caa <lwip_htonl>
 801234e:	4602      	mov	r2, r0
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012354:	79fb      	ldrb	r3, [r7, #7]
 8012356:	2b08      	cmp	r3, #8
 8012358:	d010      	beq.n	801237c <dhcp_create_msg+0xfc>
 801235a:	79fb      	ldrb	r3, [r7, #7]
 801235c:	2b04      	cmp	r3, #4
 801235e:	d00d      	beq.n	801237c <dhcp_create_msg+0xfc>
 8012360:	79fb      	ldrb	r3, [r7, #7]
 8012362:	2b07      	cmp	r3, #7
 8012364:	d00a      	beq.n	801237c <dhcp_create_msg+0xfc>
 8012366:	79fb      	ldrb	r3, [r7, #7]
 8012368:	2b03      	cmp	r3, #3
 801236a:	d10c      	bne.n	8012386 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012370:	2b05      	cmp	r3, #5
 8012372:	d003      	beq.n	801237c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	795b      	ldrb	r3, [r3, #5]
 8012378:	2b04      	cmp	r3, #4
 801237a:	d104      	bne.n	8012386 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3304      	adds	r3, #4
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012386:	2300      	movs	r3, #0
 8012388:	83fb      	strh	r3, [r7, #30]
 801238a:	e00c      	b.n	80123a6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801238c:	8bfa      	ldrh	r2, [r7, #30]
 801238e:	8bfb      	ldrh	r3, [r7, #30]
 8012390:	68f9      	ldr	r1, [r7, #12]
 8012392:	440a      	add	r2, r1
 8012394:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	4413      	add	r3, r2
 801239c:	460a      	mov	r2, r1
 801239e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123a0:	8bfb      	ldrh	r3, [r7, #30]
 80123a2:	3301      	adds	r3, #1
 80123a4:	83fb      	strh	r3, [r7, #30]
 80123a6:	8bfb      	ldrh	r3, [r7, #30]
 80123a8:	2b05      	cmp	r3, #5
 80123aa:	d9ef      	bls.n	801238c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80123b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80123b8:	2200      	movs	r2, #0
 80123ba:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80123be:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80123c2:	2200      	movs	r2, #0
 80123c4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80123c8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80123cc:	2200      	movs	r2, #0
 80123ce:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80123d2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123dc:	2301      	movs	r3, #1
 80123de:	2235      	movs	r2, #53	; 0x35
 80123e0:	2000      	movs	r0, #0
 80123e2:	f7ff fadb 	bl	801199c <dhcp_option>
 80123e6:	4603      	mov	r3, r0
 80123e8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123f0:	79fa      	ldrb	r2, [r7, #7]
 80123f2:	8a7b      	ldrh	r3, [r7, #18]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fb05 	bl	8011a04 <dhcp_option_byte>
 80123fa:	4603      	mov	r3, r0
 80123fc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	8a7a      	ldrh	r2, [r7, #18]
 8012408:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801240a:	69bb      	ldr	r3, [r7, #24]
}
 801240c:	4618      	mov	r0, r3
 801240e:	3720      	adds	r7, #32
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	080181bc 	.word	0x080181bc
 8012418:	080184dc 	.word	0x080184dc
 801241c:	0801821c 	.word	0x0801821c
 8012420:	080184fc 	.word	0x080184fc
 8012424:	0801851c 	.word	0x0801851c
 8012428:	2000d44c 	.word	0x2000d44c

0801242c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	4603      	mov	r3, r0
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801243a:	89fb      	ldrh	r3, [r7, #14]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	81fa      	strh	r2, [r7, #14]
 8012440:	461a      	mov	r2, r3
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	4413      	add	r3, r2
 8012446:	22ff      	movs	r2, #255	; 0xff
 8012448:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801244a:	e007      	b.n	801245c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801244c:	89fb      	ldrh	r3, [r7, #14]
 801244e:	1c5a      	adds	r2, r3, #1
 8012450:	81fa      	strh	r2, [r7, #14]
 8012452:	461a      	mov	r2, r3
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	4413      	add	r3, r2
 8012458:	2200      	movs	r2, #0
 801245a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801245c:	89fb      	ldrh	r3, [r7, #14]
 801245e:	2b43      	cmp	r3, #67	; 0x43
 8012460:	d904      	bls.n	801246c <dhcp_option_trailer+0x40>
 8012462:	89fb      	ldrh	r3, [r7, #14]
 8012464:	f003 0303 	and.w	r3, r3, #3
 8012468:	2b00      	cmp	r3, #0
 801246a:	d002      	beq.n	8012472 <dhcp_option_trailer+0x46>
 801246c:	89fb      	ldrh	r3, [r7, #14]
 801246e:	2b43      	cmp	r3, #67	; 0x43
 8012470:	d9ec      	bls.n	801244c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012472:	89fb      	ldrh	r3, [r7, #14]
 8012474:	33f0      	adds	r3, #240	; 0xf0
 8012476:	b29b      	uxth	r3, r3
 8012478:	4619      	mov	r1, r3
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7f7 fe10 	bl	800a0a0 <pbuf_realloc>
}
 8012480:	bf00      	nop
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012488:	b480      	push	{r7}
 801248a:	b085      	sub	sp, #20
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d017      	beq.n	80124c6 <dhcp_supplied_address+0x3e>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249a:	2b00      	cmp	r3, #0
 801249c:	d013      	beq.n	80124c6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	795b      	ldrb	r3, [r3, #5]
 80124a8:	2b0a      	cmp	r3, #10
 80124aa:	d007      	beq.n	80124bc <dhcp_supplied_address+0x34>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	795b      	ldrb	r3, [r3, #5]
 80124b0:	2b05      	cmp	r3, #5
 80124b2:	d003      	beq.n	80124bc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80124b8:	2b04      	cmp	r3, #4
 80124ba:	d101      	bne.n	80124c0 <dhcp_supplied_address+0x38>
 80124bc:	2301      	movs	r3, #1
 80124be:	e000      	b.n	80124c2 <dhcp_supplied_address+0x3a>
 80124c0:	2300      	movs	r3, #0
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	e000      	b.n	80124c8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3714      	adds	r7, #20
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80124dc:	4915      	ldr	r1, [pc, #84]	; (8012534 <etharp_free_entry+0x60>)
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	4613      	mov	r3, r2
 80124e2:	005b      	lsls	r3, r3, #1
 80124e4:	4413      	add	r3, r2
 80124e6:	00db      	lsls	r3, r3, #3
 80124e8:	440b      	add	r3, r1
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d013      	beq.n	8012518 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80124f0:	4910      	ldr	r1, [pc, #64]	; (8012534 <etharp_free_entry+0x60>)
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	4613      	mov	r3, r2
 80124f6:	005b      	lsls	r3, r3, #1
 80124f8:	4413      	add	r3, r2
 80124fa:	00db      	lsls	r3, r3, #3
 80124fc:	440b      	add	r3, r1
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4618      	mov	r0, r3
 8012502:	f7f7 ff53 	bl	800a3ac <pbuf_free>
    arp_table[i].q = NULL;
 8012506:	490b      	ldr	r1, [pc, #44]	; (8012534 <etharp_free_entry+0x60>)
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	4613      	mov	r3, r2
 801250c:	005b      	lsls	r3, r3, #1
 801250e:	4413      	add	r3, r2
 8012510:	00db      	lsls	r3, r3, #3
 8012512:	440b      	add	r3, r1
 8012514:	2200      	movs	r2, #0
 8012516:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012518:	4906      	ldr	r1, [pc, #24]	; (8012534 <etharp_free_entry+0x60>)
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	4613      	mov	r3, r2
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	4413      	add	r3, r2
 8012522:	00db      	lsls	r3, r3, #3
 8012524:	440b      	add	r3, r1
 8012526:	3314      	adds	r3, #20
 8012528:	2200      	movs	r2, #0
 801252a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801252c:	bf00      	nop
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	2000d450 	.word	0x2000d450

08012538 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801253e:	2300      	movs	r3, #0
 8012540:	607b      	str	r3, [r7, #4]
 8012542:	e096      	b.n	8012672 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012544:	494f      	ldr	r1, [pc, #316]	; (8012684 <etharp_tmr+0x14c>)
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	4613      	mov	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	4413      	add	r3, r2
 801254e:	00db      	lsls	r3, r3, #3
 8012550:	440b      	add	r3, r1
 8012552:	3314      	adds	r3, #20
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012558:	78fb      	ldrb	r3, [r7, #3]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 8086 	beq.w	801266c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012560:	4948      	ldr	r1, [pc, #288]	; (8012684 <etharp_tmr+0x14c>)
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	4613      	mov	r3, r2
 8012566:	005b      	lsls	r3, r3, #1
 8012568:	4413      	add	r3, r2
 801256a:	00db      	lsls	r3, r3, #3
 801256c:	440b      	add	r3, r1
 801256e:	3312      	adds	r3, #18
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	3301      	adds	r3, #1
 8012574:	b298      	uxth	r0, r3
 8012576:	4943      	ldr	r1, [pc, #268]	; (8012684 <etharp_tmr+0x14c>)
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	4613      	mov	r3, r2
 801257c:	005b      	lsls	r3, r3, #1
 801257e:	4413      	add	r3, r2
 8012580:	00db      	lsls	r3, r3, #3
 8012582:	440b      	add	r3, r1
 8012584:	3312      	adds	r3, #18
 8012586:	4602      	mov	r2, r0
 8012588:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801258a:	493e      	ldr	r1, [pc, #248]	; (8012684 <etharp_tmr+0x14c>)
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	4613      	mov	r3, r2
 8012590:	005b      	lsls	r3, r3, #1
 8012592:	4413      	add	r3, r2
 8012594:	00db      	lsls	r3, r3, #3
 8012596:	440b      	add	r3, r1
 8012598:	3312      	adds	r3, #18
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80125a0:	d215      	bcs.n	80125ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80125a2:	4938      	ldr	r1, [pc, #224]	; (8012684 <etharp_tmr+0x14c>)
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	4613      	mov	r3, r2
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	4413      	add	r3, r2
 80125ac:	00db      	lsls	r3, r3, #3
 80125ae:	440b      	add	r3, r1
 80125b0:	3314      	adds	r3, #20
 80125b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d10e      	bne.n	80125d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80125b8:	4932      	ldr	r1, [pc, #200]	; (8012684 <etharp_tmr+0x14c>)
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	4613      	mov	r3, r2
 80125be:	005b      	lsls	r3, r3, #1
 80125c0:	4413      	add	r3, r2
 80125c2:	00db      	lsls	r3, r3, #3
 80125c4:	440b      	add	r3, r1
 80125c6:	3312      	adds	r3, #18
 80125c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80125ca:	2b04      	cmp	r3, #4
 80125cc:	d903      	bls.n	80125d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff ff80 	bl	80124d4 <etharp_free_entry>
 80125d4:	e04a      	b.n	801266c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80125d6:	492b      	ldr	r1, [pc, #172]	; (8012684 <etharp_tmr+0x14c>)
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	4613      	mov	r3, r2
 80125dc:	005b      	lsls	r3, r3, #1
 80125de:	4413      	add	r3, r2
 80125e0:	00db      	lsls	r3, r3, #3
 80125e2:	440b      	add	r3, r1
 80125e4:	3314      	adds	r3, #20
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b03      	cmp	r3, #3
 80125ea:	d10a      	bne.n	8012602 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125ec:	4925      	ldr	r1, [pc, #148]	; (8012684 <etharp_tmr+0x14c>)
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	4613      	mov	r3, r2
 80125f2:	005b      	lsls	r3, r3, #1
 80125f4:	4413      	add	r3, r2
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	440b      	add	r3, r1
 80125fa:	3314      	adds	r3, #20
 80125fc:	2204      	movs	r2, #4
 80125fe:	701a      	strb	r2, [r3, #0]
 8012600:	e034      	b.n	801266c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012602:	4920      	ldr	r1, [pc, #128]	; (8012684 <etharp_tmr+0x14c>)
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	4613      	mov	r3, r2
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	4413      	add	r3, r2
 801260c:	00db      	lsls	r3, r3, #3
 801260e:	440b      	add	r3, r1
 8012610:	3314      	adds	r3, #20
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b04      	cmp	r3, #4
 8012616:	d10a      	bne.n	801262e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012618:	491a      	ldr	r1, [pc, #104]	; (8012684 <etharp_tmr+0x14c>)
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	4613      	mov	r3, r2
 801261e:	005b      	lsls	r3, r3, #1
 8012620:	4413      	add	r3, r2
 8012622:	00db      	lsls	r3, r3, #3
 8012624:	440b      	add	r3, r1
 8012626:	3314      	adds	r3, #20
 8012628:	2202      	movs	r2, #2
 801262a:	701a      	strb	r2, [r3, #0]
 801262c:	e01e      	b.n	801266c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801262e:	4915      	ldr	r1, [pc, #84]	; (8012684 <etharp_tmr+0x14c>)
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	4613      	mov	r3, r2
 8012634:	005b      	lsls	r3, r3, #1
 8012636:	4413      	add	r3, r2
 8012638:	00db      	lsls	r3, r3, #3
 801263a:	440b      	add	r3, r1
 801263c:	3314      	adds	r3, #20
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	2b01      	cmp	r3, #1
 8012642:	d113      	bne.n	801266c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012644:	490f      	ldr	r1, [pc, #60]	; (8012684 <etharp_tmr+0x14c>)
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	4613      	mov	r3, r2
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	4413      	add	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	440b      	add	r3, r1
 8012652:	3308      	adds	r3, #8
 8012654:	6818      	ldr	r0, [r3, #0]
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	4613      	mov	r3, r2
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4413      	add	r3, r2
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	4a08      	ldr	r2, [pc, #32]	; (8012684 <etharp_tmr+0x14c>)
 8012662:	4413      	add	r3, r2
 8012664:	3304      	adds	r3, #4
 8012666:	4619      	mov	r1, r3
 8012668:	f000 fe72 	bl	8013350 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	3301      	adds	r3, #1
 8012670:	607b      	str	r3, [r7, #4]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b09      	cmp	r3, #9
 8012676:	f77f af65 	ble.w	8012544 <etharp_tmr+0xc>
      }
    }
  }
}
 801267a:	bf00      	nop
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}
 8012684:	2000d450 	.word	0x2000d450

08012688 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b08a      	sub	sp, #40	; 0x28
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	460b      	mov	r3, r1
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012696:	230a      	movs	r3, #10
 8012698:	84fb      	strh	r3, [r7, #38]	; 0x26
 801269a:	230a      	movs	r3, #10
 801269c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801269e:	230a      	movs	r3, #10
 80126a0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80126a6:	230a      	movs	r3, #10
 80126a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	83bb      	strh	r3, [r7, #28]
 80126ae:	2300      	movs	r3, #0
 80126b0:	837b      	strh	r3, [r7, #26]
 80126b2:	2300      	movs	r3, #0
 80126b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126b6:	2300      	movs	r3, #0
 80126b8:	843b      	strh	r3, [r7, #32]
 80126ba:	e0ae      	b.n	801281a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80126bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80126c0:	49a6      	ldr	r1, [pc, #664]	; (801295c <etharp_find_entry+0x2d4>)
 80126c2:	4613      	mov	r3, r2
 80126c4:	005b      	lsls	r3, r3, #1
 80126c6:	4413      	add	r3, r2
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	440b      	add	r3, r1
 80126cc:	3314      	adds	r3, #20
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80126d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80126d6:	2b0a      	cmp	r3, #10
 80126d8:	d105      	bne.n	80126e6 <etharp_find_entry+0x5e>
 80126da:	7dfb      	ldrb	r3, [r7, #23]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d102      	bne.n	80126e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80126e0:	8c3b      	ldrh	r3, [r7, #32]
 80126e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80126e4:	e095      	b.n	8012812 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80126e6:	7dfb      	ldrb	r3, [r7, #23]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 8092 	beq.w	8012812 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d009      	beq.n	8012708 <etharp_find_entry+0x80>
 80126f4:	7dfb      	ldrb	r3, [r7, #23]
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d806      	bhi.n	8012708 <etharp_find_entry+0x80>
 80126fa:	4b99      	ldr	r3, [pc, #612]	; (8012960 <etharp_find_entry+0x2d8>)
 80126fc:	f240 1223 	movw	r2, #291	; 0x123
 8012700:	4998      	ldr	r1, [pc, #608]	; (8012964 <etharp_find_entry+0x2dc>)
 8012702:	4899      	ldr	r0, [pc, #612]	; (8012968 <etharp_find_entry+0x2e0>)
 8012704:	f002 fbc0 	bl	8014e88 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d020      	beq.n	8012750 <etharp_find_entry+0xc8>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6819      	ldr	r1, [r3, #0]
 8012712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012716:	4891      	ldr	r0, [pc, #580]	; (801295c <etharp_find_entry+0x2d4>)
 8012718:	4613      	mov	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	4413      	add	r3, r2
 801271e:	00db      	lsls	r3, r3, #3
 8012720:	4403      	add	r3, r0
 8012722:	3304      	adds	r3, #4
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4299      	cmp	r1, r3
 8012728:	d112      	bne.n	8012750 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d00c      	beq.n	801274a <etharp_find_entry+0xc2>
 8012730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012734:	4989      	ldr	r1, [pc, #548]	; (801295c <etharp_find_entry+0x2d4>)
 8012736:	4613      	mov	r3, r2
 8012738:	005b      	lsls	r3, r3, #1
 801273a:	4413      	add	r3, r2
 801273c:	00db      	lsls	r3, r3, #3
 801273e:	440b      	add	r3, r1
 8012740:	3308      	adds	r3, #8
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	429a      	cmp	r2, r3
 8012748:	d102      	bne.n	8012750 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801274a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801274e:	e100      	b.n	8012952 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012750:	7dfb      	ldrb	r3, [r7, #23]
 8012752:	2b01      	cmp	r3, #1
 8012754:	d140      	bne.n	80127d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801275a:	4980      	ldr	r1, [pc, #512]	; (801295c <etharp_find_entry+0x2d4>)
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	440b      	add	r3, r1
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d01a      	beq.n	80127a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801276c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012770:	497a      	ldr	r1, [pc, #488]	; (801295c <etharp_find_entry+0x2d4>)
 8012772:	4613      	mov	r3, r2
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	4413      	add	r3, r2
 8012778:	00db      	lsls	r3, r3, #3
 801277a:	440b      	add	r3, r1
 801277c:	3312      	adds	r3, #18
 801277e:	881b      	ldrh	r3, [r3, #0]
 8012780:	8bba      	ldrh	r2, [r7, #28]
 8012782:	429a      	cmp	r2, r3
 8012784:	d845      	bhi.n	8012812 <etharp_find_entry+0x18a>
            old_queue = i;
 8012786:	8c3b      	ldrh	r3, [r7, #32]
 8012788:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801278a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801278e:	4973      	ldr	r1, [pc, #460]	; (801295c <etharp_find_entry+0x2d4>)
 8012790:	4613      	mov	r3, r2
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	440b      	add	r3, r1
 801279a:	3312      	adds	r3, #18
 801279c:	881b      	ldrh	r3, [r3, #0]
 801279e:	83bb      	strh	r3, [r7, #28]
 80127a0:	e037      	b.n	8012812 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80127a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127a6:	496d      	ldr	r1, [pc, #436]	; (801295c <etharp_find_entry+0x2d4>)
 80127a8:	4613      	mov	r3, r2
 80127aa:	005b      	lsls	r3, r3, #1
 80127ac:	4413      	add	r3, r2
 80127ae:	00db      	lsls	r3, r3, #3
 80127b0:	440b      	add	r3, r1
 80127b2:	3312      	adds	r3, #18
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	8b7a      	ldrh	r2, [r7, #26]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d82a      	bhi.n	8012812 <etharp_find_entry+0x18a>
            old_pending = i;
 80127bc:	8c3b      	ldrh	r3, [r7, #32]
 80127be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80127c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127c4:	4965      	ldr	r1, [pc, #404]	; (801295c <etharp_find_entry+0x2d4>)
 80127c6:	4613      	mov	r3, r2
 80127c8:	005b      	lsls	r3, r3, #1
 80127ca:	4413      	add	r3, r2
 80127cc:	00db      	lsls	r3, r3, #3
 80127ce:	440b      	add	r3, r1
 80127d0:	3312      	adds	r3, #18
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	837b      	strh	r3, [r7, #26]
 80127d6:	e01c      	b.n	8012812 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80127d8:	7dfb      	ldrb	r3, [r7, #23]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d919      	bls.n	8012812 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80127de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80127e2:	495e      	ldr	r1, [pc, #376]	; (801295c <etharp_find_entry+0x2d4>)
 80127e4:	4613      	mov	r3, r2
 80127e6:	005b      	lsls	r3, r3, #1
 80127e8:	4413      	add	r3, r2
 80127ea:	00db      	lsls	r3, r3, #3
 80127ec:	440b      	add	r3, r1
 80127ee:	3312      	adds	r3, #18
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	8b3a      	ldrh	r2, [r7, #24]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d80c      	bhi.n	8012812 <etharp_find_entry+0x18a>
            old_stable = i;
 80127f8:	8c3b      	ldrh	r3, [r7, #32]
 80127fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80127fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012800:	4956      	ldr	r1, [pc, #344]	; (801295c <etharp_find_entry+0x2d4>)
 8012802:	4613      	mov	r3, r2
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	4413      	add	r3, r2
 8012808:	00db      	lsls	r3, r3, #3
 801280a:	440b      	add	r3, r1
 801280c:	3312      	adds	r3, #18
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012812:	8c3b      	ldrh	r3, [r7, #32]
 8012814:	3301      	adds	r3, #1
 8012816:	b29b      	uxth	r3, r3
 8012818:	843b      	strh	r3, [r7, #32]
 801281a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801281e:	2b09      	cmp	r3, #9
 8012820:	f77f af4c 	ble.w	80126bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012824:	7afb      	ldrb	r3, [r7, #11]
 8012826:	f003 0302 	and.w	r3, r3, #2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d108      	bne.n	8012840 <etharp_find_entry+0x1b8>
 801282e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012832:	2b0a      	cmp	r3, #10
 8012834:	d107      	bne.n	8012846 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012836:	7afb      	ldrb	r3, [r7, #11]
 8012838:	f003 0301 	and.w	r3, r3, #1
 801283c:	2b00      	cmp	r3, #0
 801283e:	d102      	bne.n	8012846 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012840:	f04f 33ff 	mov.w	r3, #4294967295
 8012844:	e085      	b.n	8012952 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012846:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801284a:	2b09      	cmp	r3, #9
 801284c:	dc02      	bgt.n	8012854 <etharp_find_entry+0x1cc>
    i = empty;
 801284e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012850:	843b      	strh	r3, [r7, #32]
 8012852:	e039      	b.n	80128c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012854:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012858:	2b09      	cmp	r3, #9
 801285a:	dc14      	bgt.n	8012886 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801285c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801285e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012860:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012864:	493d      	ldr	r1, [pc, #244]	; (801295c <etharp_find_entry+0x2d4>)
 8012866:	4613      	mov	r3, r2
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4413      	add	r3, r2
 801286c:	00db      	lsls	r3, r3, #3
 801286e:	440b      	add	r3, r1
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d018      	beq.n	80128a8 <etharp_find_entry+0x220>
 8012876:	4b3a      	ldr	r3, [pc, #232]	; (8012960 <etharp_find_entry+0x2d8>)
 8012878:	f240 126d 	movw	r2, #365	; 0x16d
 801287c:	493b      	ldr	r1, [pc, #236]	; (801296c <etharp_find_entry+0x2e4>)
 801287e:	483a      	ldr	r0, [pc, #232]	; (8012968 <etharp_find_entry+0x2e0>)
 8012880:	f002 fb02 	bl	8014e88 <iprintf>
 8012884:	e010      	b.n	80128a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012886:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801288a:	2b09      	cmp	r3, #9
 801288c:	dc02      	bgt.n	8012894 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801288e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012890:	843b      	strh	r3, [r7, #32]
 8012892:	e009      	b.n	80128a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012894:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012898:	2b09      	cmp	r3, #9
 801289a:	dc02      	bgt.n	80128a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801289c:	8bfb      	ldrh	r3, [r7, #30]
 801289e:	843b      	strh	r3, [r7, #32]
 80128a0:	e002      	b.n	80128a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80128a2:	f04f 33ff 	mov.w	r3, #4294967295
 80128a6:	e054      	b.n	8012952 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80128a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128ac:	2b09      	cmp	r3, #9
 80128ae:	dd06      	ble.n	80128be <etharp_find_entry+0x236>
 80128b0:	4b2b      	ldr	r3, [pc, #172]	; (8012960 <etharp_find_entry+0x2d8>)
 80128b2:	f240 127f 	movw	r2, #383	; 0x17f
 80128b6:	492e      	ldr	r1, [pc, #184]	; (8012970 <etharp_find_entry+0x2e8>)
 80128b8:	482b      	ldr	r0, [pc, #172]	; (8012968 <etharp_find_entry+0x2e0>)
 80128ba:	f002 fae5 	bl	8014e88 <iprintf>
    etharp_free_entry(i);
 80128be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7ff fe06 	bl	80124d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80128c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80128cc:	2b09      	cmp	r3, #9
 80128ce:	dd06      	ble.n	80128de <etharp_find_entry+0x256>
 80128d0:	4b23      	ldr	r3, [pc, #140]	; (8012960 <etharp_find_entry+0x2d8>)
 80128d2:	f240 1283 	movw	r2, #387	; 0x183
 80128d6:	4926      	ldr	r1, [pc, #152]	; (8012970 <etharp_find_entry+0x2e8>)
 80128d8:	4823      	ldr	r0, [pc, #140]	; (8012968 <etharp_find_entry+0x2e0>)
 80128da:	f002 fad5 	bl	8014e88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80128de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80128e2:	491e      	ldr	r1, [pc, #120]	; (801295c <etharp_find_entry+0x2d4>)
 80128e4:	4613      	mov	r3, r2
 80128e6:	005b      	lsls	r3, r3, #1
 80128e8:	4413      	add	r3, r2
 80128ea:	00db      	lsls	r3, r3, #3
 80128ec:	440b      	add	r3, r1
 80128ee:	3314      	adds	r3, #20
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d006      	beq.n	8012904 <etharp_find_entry+0x27c>
 80128f6:	4b1a      	ldr	r3, [pc, #104]	; (8012960 <etharp_find_entry+0x2d8>)
 80128f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80128fc:	491d      	ldr	r1, [pc, #116]	; (8012974 <etharp_find_entry+0x2ec>)
 80128fe:	481a      	ldr	r0, [pc, #104]	; (8012968 <etharp_find_entry+0x2e0>)
 8012900:	f002 fac2 	bl	8014e88 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00b      	beq.n	8012922 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801290a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	6819      	ldr	r1, [r3, #0]
 8012912:	4812      	ldr	r0, [pc, #72]	; (801295c <etharp_find_entry+0x2d4>)
 8012914:	4613      	mov	r3, r2
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	4413      	add	r3, r2
 801291a:	00db      	lsls	r3, r3, #3
 801291c:	4403      	add	r3, r0
 801291e:	3304      	adds	r3, #4
 8012920:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012926:	490d      	ldr	r1, [pc, #52]	; (801295c <etharp_find_entry+0x2d4>)
 8012928:	4613      	mov	r3, r2
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	4413      	add	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	440b      	add	r3, r1
 8012932:	3312      	adds	r3, #18
 8012934:	2200      	movs	r2, #0
 8012936:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801293c:	4907      	ldr	r1, [pc, #28]	; (801295c <etharp_find_entry+0x2d4>)
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	440b      	add	r3, r1
 8012948:	3308      	adds	r3, #8
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801294e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012952:	4618      	mov	r0, r3
 8012954:	3728      	adds	r7, #40	; 0x28
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	2000d450 	.word	0x2000d450
 8012960:	0801855c 	.word	0x0801855c
 8012964:	08018594 	.word	0x08018594
 8012968:	080185d4 	.word	0x080185d4
 801296c:	080185fc 	.word	0x080185fc
 8012970:	08018614 	.word	0x08018614
 8012974:	08018628 	.word	0x08018628

08012978 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b088      	sub	sp, #32
 801297c:	af02      	add	r7, sp, #8
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	607a      	str	r2, [r7, #4]
 8012984:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801298c:	2b06      	cmp	r3, #6
 801298e:	d006      	beq.n	801299e <etharp_update_arp_entry+0x26>
 8012990:	4b48      	ldr	r3, [pc, #288]	; (8012ab4 <etharp_update_arp_entry+0x13c>)
 8012992:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012996:	4948      	ldr	r1, [pc, #288]	; (8012ab8 <etharp_update_arp_entry+0x140>)
 8012998:	4848      	ldr	r0, [pc, #288]	; (8012abc <etharp_update_arp_entry+0x144>)
 801299a:	f002 fa75 	bl	8014e88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d012      	beq.n	80129ca <etharp_update_arp_entry+0x52>
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00e      	beq.n	80129ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68f9      	ldr	r1, [r7, #12]
 80129b2:	4618      	mov	r0, r3
 80129b4:	f001 f920 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 80129b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d105      	bne.n	80129ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80129c6:	2be0      	cmp	r3, #224	; 0xe0
 80129c8:	d102      	bne.n	80129d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80129ca:	f06f 030f 	mvn.w	r3, #15
 80129ce:	e06c      	b.n	8012aaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80129d0:	78fb      	ldrb	r3, [r7, #3]
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	4619      	mov	r1, r3
 80129d6:	68b8      	ldr	r0, [r7, #8]
 80129d8:	f7ff fe56 	bl	8012688 <etharp_find_entry>
 80129dc:	4603      	mov	r3, r0
 80129de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80129e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	da02      	bge.n	80129ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80129e8:	8afb      	ldrh	r3, [r7, #22]
 80129ea:	b25b      	sxtb	r3, r3
 80129ec:	e05d      	b.n	8012aaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80129ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80129f2:	4933      	ldr	r1, [pc, #204]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 80129f4:	4613      	mov	r3, r2
 80129f6:	005b      	lsls	r3, r3, #1
 80129f8:	4413      	add	r3, r2
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	440b      	add	r3, r1
 80129fe:	3314      	adds	r3, #20
 8012a00:	2202      	movs	r2, #2
 8012a02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a08:	492d      	ldr	r1, [pc, #180]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	00db      	lsls	r3, r3, #3
 8012a12:	440b      	add	r3, r1
 8012a14:	3308      	adds	r3, #8
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a1e:	4613      	mov	r3, r2
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	4413      	add	r3, r2
 8012a24:	00db      	lsls	r3, r3, #3
 8012a26:	3308      	adds	r3, #8
 8012a28:	4a25      	ldr	r2, [pc, #148]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a2a:	4413      	add	r3, r2
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	2206      	movs	r2, #6
 8012a30:	6879      	ldr	r1, [r7, #4]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f002 fb59 	bl	80150ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012a38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a3c:	4920      	ldr	r1, [pc, #128]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a3e:	4613      	mov	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4413      	add	r3, r2
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	440b      	add	r3, r1
 8012a48:	3312      	adds	r3, #18
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012a4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a52:	491b      	ldr	r1, [pc, #108]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a54:	4613      	mov	r3, r2
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	4413      	add	r3, r2
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	440b      	add	r3, r1
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d021      	beq.n	8012aa8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012a64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a68:	4915      	ldr	r1, [pc, #84]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	005b      	lsls	r3, r3, #1
 8012a6e:	4413      	add	r3, r2
 8012a70:	00db      	lsls	r3, r3, #3
 8012a72:	440b      	add	r3, r1
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012a78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a7c:	4910      	ldr	r1, [pc, #64]	; (8012ac0 <etharp_update_arp_entry+0x148>)
 8012a7e:	4613      	mov	r3, r2
 8012a80:	005b      	lsls	r3, r3, #1
 8012a82:	4413      	add	r3, r2
 8012a84:	00db      	lsls	r3, r3, #3
 8012a86:	440b      	add	r3, r1
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6939      	ldr	r1, [r7, #16]
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f001 ffb9 	bl	8014a14 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012aa2:	6938      	ldr	r0, [r7, #16]
 8012aa4:	f7f7 fc82 	bl	800a3ac <pbuf_free>
  }
  return ERR_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3718      	adds	r7, #24
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	0801855c 	.word	0x0801855c
 8012ab8:	08018654 	.word	0x08018654
 8012abc:	080185d4 	.word	0x080185d4
 8012ac0:	2000d450 	.word	0x2000d450

08012ac4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012acc:	2300      	movs	r3, #0
 8012ace:	60fb      	str	r3, [r7, #12]
 8012ad0:	e01e      	b.n	8012b10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012ad2:	4913      	ldr	r1, [pc, #76]	; (8012b20 <etharp_cleanup_netif+0x5c>)
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	4413      	add	r3, r2
 8012adc:	00db      	lsls	r3, r3, #3
 8012ade:	440b      	add	r3, r1
 8012ae0:	3314      	adds	r3, #20
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012ae6:	7afb      	ldrb	r3, [r7, #11]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00e      	beq.n	8012b0a <etharp_cleanup_netif+0x46>
 8012aec:	490c      	ldr	r1, [pc, #48]	; (8012b20 <etharp_cleanup_netif+0x5c>)
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	4613      	mov	r3, r2
 8012af2:	005b      	lsls	r3, r3, #1
 8012af4:	4413      	add	r3, r2
 8012af6:	00db      	lsls	r3, r3, #3
 8012af8:	440b      	add	r3, r1
 8012afa:	3308      	adds	r3, #8
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d102      	bne.n	8012b0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	f7ff fce5 	bl	80124d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	dddd      	ble.n	8012ad2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012b16:	bf00      	nop
 8012b18:	bf00      	nop
 8012b1a:	3710      	adds	r7, #16
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	2000d450 	.word	0x2000d450

08012b24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012b24:	b5b0      	push	{r4, r5, r7, lr}
 8012b26:	b08a      	sub	sp, #40	; 0x28
 8012b28:	af04      	add	r7, sp, #16
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d107      	bne.n	8012b44 <etharp_input+0x20>
 8012b34:	4b3f      	ldr	r3, [pc, #252]	; (8012c34 <etharp_input+0x110>)
 8012b36:	f240 228a 	movw	r2, #650	; 0x28a
 8012b3a:	493f      	ldr	r1, [pc, #252]	; (8012c38 <etharp_input+0x114>)
 8012b3c:	483f      	ldr	r0, [pc, #252]	; (8012c3c <etharp_input+0x118>)
 8012b3e:	f002 f9a3 	bl	8014e88 <iprintf>
 8012b42:	e074      	b.n	8012c2e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b54:	d10c      	bne.n	8012b70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012b5a:	2b06      	cmp	r3, #6
 8012b5c:	d108      	bne.n	8012b70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012b62:	2b04      	cmp	r3, #4
 8012b64:	d104      	bne.n	8012b70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	885b      	ldrh	r3, [r3, #2]
 8012b6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012b6c:	2b08      	cmp	r3, #8
 8012b6e:	d003      	beq.n	8012b78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7f7 fc1b 	bl	800a3ac <pbuf_free>
    return;
 8012b76:	e05a      	b.n	8012c2e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	330e      	adds	r3, #14
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	3318      	adds	r3, #24
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d102      	bne.n	8012b98 <etharp_input+0x74>
    for_us = 0;
 8012b92:	2300      	movs	r3, #0
 8012b94:	75fb      	strb	r3, [r7, #23]
 8012b96:	e009      	b.n	8012bac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	3304      	adds	r3, #4
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	bf0c      	ite	eq
 8012ba4:	2301      	moveq	r3, #1
 8012ba6:	2300      	movne	r3, #0
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	f103 0208 	add.w	r2, r3, #8
 8012bb2:	7dfb      	ldrb	r3, [r7, #23]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <etharp_input+0x98>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	e000      	b.n	8012bbe <etharp_input+0x9a>
 8012bbc:	2302      	movs	r3, #2
 8012bbe:	f107 010c 	add.w	r1, r7, #12
 8012bc2:	6838      	ldr	r0, [r7, #0]
 8012bc4:	f7ff fed8 	bl	8012978 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	88db      	ldrh	r3, [r3, #6]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bd2:	d003      	beq.n	8012bdc <etharp_input+0xb8>
 8012bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bd8:	d01e      	beq.n	8012c18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012bda:	e025      	b.n	8012c28 <etharp_input+0x104>
      if (for_us) {
 8012bdc:	7dfb      	ldrb	r3, [r7, #23]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d021      	beq.n	8012c26 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012bfc:	2102      	movs	r1, #2
 8012bfe:	9103      	str	r1, [sp, #12]
 8012c00:	f107 010c 	add.w	r1, r7, #12
 8012c04:	9102      	str	r1, [sp, #8]
 8012c06:	9201      	str	r2, [sp, #4]
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	462b      	mov	r3, r5
 8012c0c:	4622      	mov	r2, r4
 8012c0e:	4601      	mov	r1, r0
 8012c10:	6838      	ldr	r0, [r7, #0]
 8012c12:	f000 faef 	bl	80131f4 <etharp_raw>
      break;
 8012c16:	e006      	b.n	8012c26 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012c18:	f107 030c 	add.w	r3, r7, #12
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6838      	ldr	r0, [r7, #0]
 8012c20:	f7fe f9fc 	bl	801101c <dhcp_arp_reply>
      break;
 8012c24:	e000      	b.n	8012c28 <etharp_input+0x104>
      break;
 8012c26:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7f7 fbbf 	bl	800a3ac <pbuf_free>
}
 8012c2e:	3718      	adds	r7, #24
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bdb0      	pop	{r4, r5, r7, pc}
 8012c34:	0801855c 	.word	0x0801855c
 8012c38:	080186ac 	.word	0x080186ac
 8012c3c:	080185d4 	.word	0x080185d4

08012c40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b086      	sub	sp, #24
 8012c44:	af02      	add	r7, sp, #8
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012c4e:	79fa      	ldrb	r2, [r7, #7]
 8012c50:	4944      	ldr	r1, [pc, #272]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012c52:	4613      	mov	r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	00db      	lsls	r3, r3, #3
 8012c5a:	440b      	add	r3, r1
 8012c5c:	3314      	adds	r3, #20
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d806      	bhi.n	8012c72 <etharp_output_to_arp_index+0x32>
 8012c64:	4b40      	ldr	r3, [pc, #256]	; (8012d68 <etharp_output_to_arp_index+0x128>)
 8012c66:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012c6a:	4940      	ldr	r1, [pc, #256]	; (8012d6c <etharp_output_to_arp_index+0x12c>)
 8012c6c:	4840      	ldr	r0, [pc, #256]	; (8012d70 <etharp_output_to_arp_index+0x130>)
 8012c6e:	f002 f90b 	bl	8014e88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	493b      	ldr	r1, [pc, #236]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012c76:	4613      	mov	r3, r2
 8012c78:	005b      	lsls	r3, r3, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	00db      	lsls	r3, r3, #3
 8012c7e:	440b      	add	r3, r1
 8012c80:	3314      	adds	r3, #20
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d153      	bne.n	8012d30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012c88:	79fa      	ldrb	r2, [r7, #7]
 8012c8a:	4936      	ldr	r1, [pc, #216]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	005b      	lsls	r3, r3, #1
 8012c90:	4413      	add	r3, r2
 8012c92:	00db      	lsls	r3, r3, #3
 8012c94:	440b      	add	r3, r1
 8012c96:	3312      	adds	r3, #18
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012c9e:	d919      	bls.n	8012cd4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012ca0:	79fa      	ldrb	r2, [r7, #7]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	4413      	add	r3, r2
 8012ca8:	00db      	lsls	r3, r3, #3
 8012caa:	4a2e      	ldr	r2, [pc, #184]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012cac:	4413      	add	r3, r2
 8012cae:	3304      	adds	r3, #4
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f000 fb4c 	bl	8013350 <etharp_request>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d138      	bne.n	8012d30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012cbe:	79fa      	ldrb	r2, [r7, #7]
 8012cc0:	4928      	ldr	r1, [pc, #160]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	005b      	lsls	r3, r3, #1
 8012cc6:	4413      	add	r3, r2
 8012cc8:	00db      	lsls	r3, r3, #3
 8012cca:	440b      	add	r3, r1
 8012ccc:	3314      	adds	r3, #20
 8012cce:	2203      	movs	r2, #3
 8012cd0:	701a      	strb	r2, [r3, #0]
 8012cd2:	e02d      	b.n	8012d30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012cd4:	79fa      	ldrb	r2, [r7, #7]
 8012cd6:	4923      	ldr	r1, [pc, #140]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012cd8:	4613      	mov	r3, r2
 8012cda:	005b      	lsls	r3, r3, #1
 8012cdc:	4413      	add	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	440b      	add	r3, r1
 8012ce2:	3312      	adds	r3, #18
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012cea:	d321      	bcc.n	8012d30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012cec:	79fa      	ldrb	r2, [r7, #7]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	005b      	lsls	r3, r3, #1
 8012cf2:	4413      	add	r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	4a1b      	ldr	r2, [pc, #108]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012cf8:	4413      	add	r3, r2
 8012cfa:	1d19      	adds	r1, r3, #4
 8012cfc:	79fa      	ldrb	r2, [r7, #7]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	3308      	adds	r3, #8
 8012d08:	4a16      	ldr	r2, [pc, #88]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012d0a:	4413      	add	r3, r2
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	461a      	mov	r2, r3
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	f000 fafb 	bl	801330c <etharp_request_dst>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d109      	bne.n	8012d30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012d1c:	79fa      	ldrb	r2, [r7, #7]
 8012d1e:	4911      	ldr	r1, [pc, #68]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012d20:	4613      	mov	r3, r2
 8012d22:	005b      	lsls	r3, r3, #1
 8012d24:	4413      	add	r3, r2
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	440b      	add	r3, r1
 8012d2a:	3314      	adds	r3, #20
 8012d2c:	2203      	movs	r2, #3
 8012d2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012d36:	79fa      	ldrb	r2, [r7, #7]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	3308      	adds	r3, #8
 8012d42:	4a08      	ldr	r2, [pc, #32]	; (8012d64 <etharp_output_to_arp_index+0x124>)
 8012d44:	4413      	add	r3, r2
 8012d46:	3304      	adds	r3, #4
 8012d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d4c:	9200      	str	r2, [sp, #0]
 8012d4e:	460a      	mov	r2, r1
 8012d50:	68b9      	ldr	r1, [r7, #8]
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f001 fe5e 	bl	8014a14 <ethernet_output>
 8012d58:	4603      	mov	r3, r0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3710      	adds	r7, #16
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	2000d450 	.word	0x2000d450
 8012d68:	0801855c 	.word	0x0801855c
 8012d6c:	080186cc 	.word	0x080186cc
 8012d70:	080185d4 	.word	0x080185d4

08012d74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b08a      	sub	sp, #40	; 0x28
 8012d78:	af02      	add	r7, sp, #8
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <etharp_output+0x24>
 8012d8a:	4b73      	ldr	r3, [pc, #460]	; (8012f58 <etharp_output+0x1e4>)
 8012d8c:	f240 321e 	movw	r2, #798	; 0x31e
 8012d90:	4972      	ldr	r1, [pc, #456]	; (8012f5c <etharp_output+0x1e8>)
 8012d92:	4873      	ldr	r0, [pc, #460]	; (8012f60 <etharp_output+0x1ec>)
 8012d94:	f002 f878 	bl	8014e88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d106      	bne.n	8012dac <etharp_output+0x38>
 8012d9e:	4b6e      	ldr	r3, [pc, #440]	; (8012f58 <etharp_output+0x1e4>)
 8012da0:	f240 321f 	movw	r2, #799	; 0x31f
 8012da4:	496f      	ldr	r1, [pc, #444]	; (8012f64 <etharp_output+0x1f0>)
 8012da6:	486e      	ldr	r0, [pc, #440]	; (8012f60 <etharp_output+0x1ec>)
 8012da8:	f002 f86e 	bl	8014e88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <etharp_output+0x4c>
 8012db2:	4b69      	ldr	r3, [pc, #420]	; (8012f58 <etharp_output+0x1e4>)
 8012db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012db8:	496b      	ldr	r1, [pc, #428]	; (8012f68 <etharp_output+0x1f4>)
 8012dba:	4869      	ldr	r0, [pc, #420]	; (8012f60 <etharp_output+0x1ec>)
 8012dbc:	f002 f864 	bl	8014e88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	68f9      	ldr	r1, [r7, #12]
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f000 ff16 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d002      	beq.n	8012dd8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012dd2:	4b66      	ldr	r3, [pc, #408]	; (8012f6c <etharp_output+0x1f8>)
 8012dd4:	61fb      	str	r3, [r7, #28]
 8012dd6:	e0af      	b.n	8012f38 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012de0:	2be0      	cmp	r3, #224	; 0xe0
 8012de2:	d118      	bne.n	8012e16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012de4:	2301      	movs	r3, #1
 8012de6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012de8:	2300      	movs	r3, #0
 8012dea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012dec:	235e      	movs	r3, #94	; 0x5e
 8012dee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	3301      	adds	r3, #1
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	3302      	adds	r3, #2
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	3303      	adds	r3, #3
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012e0e:	f107 0310 	add.w	r3, r7, #16
 8012e12:	61fb      	str	r3, [r7, #28]
 8012e14:	e090      	b.n	8012f38 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	405a      	eors	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	3308      	adds	r3, #8
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4013      	ands	r3, r2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d012      	beq.n	8012e54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012e34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d00b      	beq.n	8012e54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	330c      	adds	r3, #12
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	330c      	adds	r3, #12
 8012e4a:	61bb      	str	r3, [r7, #24]
 8012e4c:	e002      	b.n	8012e54 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012e4e:	f06f 0303 	mvn.w	r3, #3
 8012e52:	e07d      	b.n	8012f50 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e54:	4b46      	ldr	r3, [pc, #280]	; (8012f70 <etharp_output+0x1fc>)
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4a46      	ldr	r2, [pc, #280]	; (8012f74 <etharp_output+0x200>)
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	005b      	lsls	r3, r3, #1
 8012e60:	440b      	add	r3, r1
 8012e62:	00db      	lsls	r3, r3, #3
 8012e64:	4413      	add	r3, r2
 8012e66:	3314      	adds	r3, #20
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d925      	bls.n	8012eba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012e6e:	4b40      	ldr	r3, [pc, #256]	; (8012f70 <etharp_output+0x1fc>)
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	4619      	mov	r1, r3
 8012e74:	4a3f      	ldr	r2, [pc, #252]	; (8012f74 <etharp_output+0x200>)
 8012e76:	460b      	mov	r3, r1
 8012e78:	005b      	lsls	r3, r3, #1
 8012e7a:	440b      	add	r3, r1
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	4413      	add	r3, r2
 8012e80:	3308      	adds	r3, #8
 8012e82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d117      	bne.n	8012eba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b38      	ldr	r3, [pc, #224]	; (8012f70 <etharp_output+0x1fc>)
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	4618      	mov	r0, r3
 8012e94:	4937      	ldr	r1, [pc, #220]	; (8012f74 <etharp_output+0x200>)
 8012e96:	4603      	mov	r3, r0
 8012e98:	005b      	lsls	r3, r3, #1
 8012e9a:	4403      	add	r3, r0
 8012e9c:	00db      	lsls	r3, r3, #3
 8012e9e:	440b      	add	r3, r1
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d108      	bne.n	8012eba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012ea8:	4b31      	ldr	r3, [pc, #196]	; (8012f70 <etharp_output+0x1fc>)
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	461a      	mov	r2, r3
 8012eae:	68b9      	ldr	r1, [r7, #8]
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f7ff fec5 	bl	8012c40 <etharp_output_to_arp_index>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	e04a      	b.n	8012f50 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012eba:	2300      	movs	r3, #0
 8012ebc:	75fb      	strb	r3, [r7, #23]
 8012ebe:	e031      	b.n	8012f24 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ec0:	7dfa      	ldrb	r2, [r7, #23]
 8012ec2:	492c      	ldr	r1, [pc, #176]	; (8012f74 <etharp_output+0x200>)
 8012ec4:	4613      	mov	r3, r2
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	4413      	add	r3, r2
 8012eca:	00db      	lsls	r3, r3, #3
 8012ecc:	440b      	add	r3, r1
 8012ece:	3314      	adds	r3, #20
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d923      	bls.n	8012f1e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012ed6:	7dfa      	ldrb	r2, [r7, #23]
 8012ed8:	4926      	ldr	r1, [pc, #152]	; (8012f74 <etharp_output+0x200>)
 8012eda:	4613      	mov	r3, r2
 8012edc:	005b      	lsls	r3, r3, #1
 8012ede:	4413      	add	r3, r2
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	440b      	add	r3, r1
 8012ee4:	3308      	adds	r3, #8
 8012ee6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d117      	bne.n	8012f1e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	6819      	ldr	r1, [r3, #0]
 8012ef2:	7dfa      	ldrb	r2, [r7, #23]
 8012ef4:	481f      	ldr	r0, [pc, #124]	; (8012f74 <etharp_output+0x200>)
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	005b      	lsls	r3, r3, #1
 8012efa:	4413      	add	r3, r2
 8012efc:	00db      	lsls	r3, r3, #3
 8012efe:	4403      	add	r3, r0
 8012f00:	3304      	adds	r3, #4
 8012f02:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012f04:	4299      	cmp	r1, r3
 8012f06:	d10a      	bne.n	8012f1e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012f08:	4a19      	ldr	r2, [pc, #100]	; (8012f70 <etharp_output+0x1fc>)
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
 8012f0c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012f0e:	7dfb      	ldrb	r3, [r7, #23]
 8012f10:	461a      	mov	r2, r3
 8012f12:	68b9      	ldr	r1, [r7, #8]
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f7ff fe93 	bl	8012c40 <etharp_output_to_arp_index>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	e018      	b.n	8012f50 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012f1e:	7dfb      	ldrb	r3, [r7, #23]
 8012f20:	3301      	adds	r3, #1
 8012f22:	75fb      	strb	r3, [r7, #23]
 8012f24:	7dfb      	ldrb	r3, [r7, #23]
 8012f26:	2b09      	cmp	r3, #9
 8012f28:	d9ca      	bls.n	8012ec0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	69b9      	ldr	r1, [r7, #24]
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f000 f822 	bl	8012f78 <etharp_query>
 8012f34:	4603      	mov	r3, r0
 8012f36:	e00b      	b.n	8012f50 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	68b9      	ldr	r1, [r7, #8]
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f001 fd63 	bl	8014a14 <ethernet_output>
 8012f4e:	4603      	mov	r3, r0
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3720      	adds	r7, #32
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	0801855c 	.word	0x0801855c
 8012f5c:	080186ac 	.word	0x080186ac
 8012f60:	080185d4 	.word	0x080185d4
 8012f64:	080186fc 	.word	0x080186fc
 8012f68:	0801869c 	.word	0x0801869c
 8012f6c:	08018d90 	.word	0x08018d90
 8012f70:	2000d540 	.word	0x2000d540
 8012f74:	2000d450 	.word	0x2000d450

08012f78 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b08c      	sub	sp, #48	; 0x30
 8012f7c:	af02      	add	r7, sp, #8
 8012f7e:	60f8      	str	r0, [r7, #12]
 8012f80:	60b9      	str	r1, [r7, #8]
 8012f82:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	332a      	adds	r3, #42	; 0x2a
 8012f88:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012f8a:	23ff      	movs	r3, #255	; 0xff
 8012f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012f90:	2300      	movs	r3, #0
 8012f92:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	68f9      	ldr	r1, [r7, #12]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f000 fe2c 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d10c      	bne.n	8012fc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012fae:	2be0      	cmp	r3, #224	; 0xe0
 8012fb0:	d006      	beq.n	8012fc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d003      	beq.n	8012fc0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d102      	bne.n	8012fc6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012fc0:	f06f 030f 	mvn.w	r3, #15
 8012fc4:	e101      	b.n	80131ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	2101      	movs	r1, #1
 8012fca:	68b8      	ldr	r0, [r7, #8]
 8012fcc:	f7ff fb5c 	bl	8012688 <etharp_find_entry>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	da02      	bge.n	8012fe2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012fdc:	8a7b      	ldrh	r3, [r7, #18]
 8012fde:	b25b      	sxtb	r3, r3
 8012fe0:	e0f3      	b.n	80131ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012fe2:	8a7b      	ldrh	r3, [r7, #18]
 8012fe4:	2b7e      	cmp	r3, #126	; 0x7e
 8012fe6:	d906      	bls.n	8012ff6 <etharp_query+0x7e>
 8012fe8:	4b7a      	ldr	r3, [pc, #488]	; (80131d4 <etharp_query+0x25c>)
 8012fea:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012fee:	497a      	ldr	r1, [pc, #488]	; (80131d8 <etharp_query+0x260>)
 8012ff0:	487a      	ldr	r0, [pc, #488]	; (80131dc <etharp_query+0x264>)
 8012ff2:	f001 ff49 	bl	8014e88 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012ff6:	8a7b      	ldrh	r3, [r7, #18]
 8012ff8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012ffa:	7c7a      	ldrb	r2, [r7, #17]
 8012ffc:	4978      	ldr	r1, [pc, #480]	; (80131e0 <etharp_query+0x268>)
 8012ffe:	4613      	mov	r3, r2
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	4413      	add	r3, r2
 8013004:	00db      	lsls	r3, r3, #3
 8013006:	440b      	add	r3, r1
 8013008:	3314      	adds	r3, #20
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d115      	bne.n	801303c <etharp_query+0xc4>
    is_new_entry = 1;
 8013010:	2301      	movs	r3, #1
 8013012:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013014:	7c7a      	ldrb	r2, [r7, #17]
 8013016:	4972      	ldr	r1, [pc, #456]	; (80131e0 <etharp_query+0x268>)
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	00db      	lsls	r3, r3, #3
 8013020:	440b      	add	r3, r1
 8013022:	3314      	adds	r3, #20
 8013024:	2201      	movs	r2, #1
 8013026:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013028:	7c7a      	ldrb	r2, [r7, #17]
 801302a:	496d      	ldr	r1, [pc, #436]	; (80131e0 <etharp_query+0x268>)
 801302c:	4613      	mov	r3, r2
 801302e:	005b      	lsls	r3, r3, #1
 8013030:	4413      	add	r3, r2
 8013032:	00db      	lsls	r3, r3, #3
 8013034:	440b      	add	r3, r1
 8013036:	3308      	adds	r3, #8
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801303c:	7c7a      	ldrb	r2, [r7, #17]
 801303e:	4968      	ldr	r1, [pc, #416]	; (80131e0 <etharp_query+0x268>)
 8013040:	4613      	mov	r3, r2
 8013042:	005b      	lsls	r3, r3, #1
 8013044:	4413      	add	r3, r2
 8013046:	00db      	lsls	r3, r3, #3
 8013048:	440b      	add	r3, r1
 801304a:	3314      	adds	r3, #20
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d011      	beq.n	8013076 <etharp_query+0xfe>
 8013052:	7c7a      	ldrb	r2, [r7, #17]
 8013054:	4962      	ldr	r1, [pc, #392]	; (80131e0 <etharp_query+0x268>)
 8013056:	4613      	mov	r3, r2
 8013058:	005b      	lsls	r3, r3, #1
 801305a:	4413      	add	r3, r2
 801305c:	00db      	lsls	r3, r3, #3
 801305e:	440b      	add	r3, r1
 8013060:	3314      	adds	r3, #20
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	2b01      	cmp	r3, #1
 8013066:	d806      	bhi.n	8013076 <etharp_query+0xfe>
 8013068:	4b5a      	ldr	r3, [pc, #360]	; (80131d4 <etharp_query+0x25c>)
 801306a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801306e:	495d      	ldr	r1, [pc, #372]	; (80131e4 <etharp_query+0x26c>)
 8013070:	485a      	ldr	r0, [pc, #360]	; (80131dc <etharp_query+0x264>)
 8013072:	f001 ff09 	bl	8014e88 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d102      	bne.n	8013082 <etharp_query+0x10a>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d10c      	bne.n	801309c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013082:	68b9      	ldr	r1, [r7, #8]
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 f963 	bl	8013350 <etharp_request>
 801308a:	4603      	mov	r3, r0
 801308c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d102      	bne.n	801309c <etharp_query+0x124>
      return result;
 8013096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801309a:	e096      	b.n	80131ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d106      	bne.n	80130b0 <etharp_query+0x138>
 80130a2:	4b4c      	ldr	r3, [pc, #304]	; (80131d4 <etharp_query+0x25c>)
 80130a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80130a8:	494f      	ldr	r1, [pc, #316]	; (80131e8 <etharp_query+0x270>)
 80130aa:	484c      	ldr	r0, [pc, #304]	; (80131dc <etharp_query+0x264>)
 80130ac:	f001 feec 	bl	8014e88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80130b0:	7c7a      	ldrb	r2, [r7, #17]
 80130b2:	494b      	ldr	r1, [pc, #300]	; (80131e0 <etharp_query+0x268>)
 80130b4:	4613      	mov	r3, r2
 80130b6:	005b      	lsls	r3, r3, #1
 80130b8:	4413      	add	r3, r2
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	440b      	add	r3, r1
 80130be:	3314      	adds	r3, #20
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d917      	bls.n	80130f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80130c6:	4a49      	ldr	r2, [pc, #292]	; (80131ec <etharp_query+0x274>)
 80130c8:	7c7b      	ldrb	r3, [r7, #17]
 80130ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80130cc:	7c7a      	ldrb	r2, [r7, #17]
 80130ce:	4613      	mov	r3, r2
 80130d0:	005b      	lsls	r3, r3, #1
 80130d2:	4413      	add	r3, r2
 80130d4:	00db      	lsls	r3, r3, #3
 80130d6:	3308      	adds	r3, #8
 80130d8:	4a41      	ldr	r2, [pc, #260]	; (80131e0 <etharp_query+0x268>)
 80130da:	4413      	add	r3, r2
 80130dc:	3304      	adds	r3, #4
 80130de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130e2:	9200      	str	r2, [sp, #0]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	6879      	ldr	r1, [r7, #4]
 80130e8:	68f8      	ldr	r0, [r7, #12]
 80130ea:	f001 fc93 	bl	8014a14 <ethernet_output>
 80130ee:	4603      	mov	r3, r0
 80130f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130f4:	e067      	b.n	80131c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80130f6:	7c7a      	ldrb	r2, [r7, #17]
 80130f8:	4939      	ldr	r1, [pc, #228]	; (80131e0 <etharp_query+0x268>)
 80130fa:	4613      	mov	r3, r2
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	4413      	add	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	440b      	add	r3, r1
 8013104:	3314      	adds	r3, #20
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	2b01      	cmp	r3, #1
 801310a:	d15c      	bne.n	80131c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801310c:	2300      	movs	r3, #0
 801310e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013114:	e01c      	b.n	8013150 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	895a      	ldrh	r2, [r3, #10]
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	891b      	ldrh	r3, [r3, #8]
 801311e:	429a      	cmp	r2, r3
 8013120:	d10a      	bne.n	8013138 <etharp_query+0x1c0>
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d006      	beq.n	8013138 <etharp_query+0x1c0>
 801312a:	4b2a      	ldr	r3, [pc, #168]	; (80131d4 <etharp_query+0x25c>)
 801312c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013130:	492f      	ldr	r1, [pc, #188]	; (80131f0 <etharp_query+0x278>)
 8013132:	482a      	ldr	r0, [pc, #168]	; (80131dc <etharp_query+0x264>)
 8013134:	f001 fea8 	bl	8014e88 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	7b1b      	ldrb	r3, [r3, #12]
 801313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013140:	2b00      	cmp	r3, #0
 8013142:	d002      	beq.n	801314a <etharp_query+0x1d2>
        copy_needed = 1;
 8013144:	2301      	movs	r3, #1
 8013146:	61bb      	str	r3, [r7, #24]
        break;
 8013148:	e005      	b.n	8013156 <etharp_query+0x1de>
      }
      p = p->next;
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d1df      	bne.n	8013116 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d007      	beq.n	801316c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013162:	200e      	movs	r0, #14
 8013164:	f7f7 fb9a 	bl	800a89c <pbuf_clone>
 8013168:	61f8      	str	r0, [r7, #28]
 801316a:	e004      	b.n	8013176 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013170:	69f8      	ldr	r0, [r7, #28]
 8013172:	f7f7 f9c1 	bl	800a4f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d021      	beq.n	80131c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801317c:	7c7a      	ldrb	r2, [r7, #17]
 801317e:	4918      	ldr	r1, [pc, #96]	; (80131e0 <etharp_query+0x268>)
 8013180:	4613      	mov	r3, r2
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	4413      	add	r3, r2
 8013186:	00db      	lsls	r3, r3, #3
 8013188:	440b      	add	r3, r1
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00a      	beq.n	80131a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013190:	7c7a      	ldrb	r2, [r7, #17]
 8013192:	4913      	ldr	r1, [pc, #76]	; (80131e0 <etharp_query+0x268>)
 8013194:	4613      	mov	r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	4413      	add	r3, r2
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	440b      	add	r3, r1
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f7 f903 	bl	800a3ac <pbuf_free>
      }
      arp_table[i].q = p;
 80131a6:	7c7a      	ldrb	r2, [r7, #17]
 80131a8:	490d      	ldr	r1, [pc, #52]	; (80131e0 <etharp_query+0x268>)
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	69fa      	ldr	r2, [r7, #28]
 80131b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80131b8:	2300      	movs	r3, #0
 80131ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131be:	e002      	b.n	80131c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80131c0:	23ff      	movs	r3, #255	; 0xff
 80131c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80131c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3728      	adds	r7, #40	; 0x28
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	0801855c 	.word	0x0801855c
 80131d8:	08018708 	.word	0x08018708
 80131dc:	080185d4 	.word	0x080185d4
 80131e0:	2000d450 	.word	0x2000d450
 80131e4:	08018718 	.word	0x08018718
 80131e8:	080186fc 	.word	0x080186fc
 80131ec:	2000d540 	.word	0x2000d540
 80131f0:	08018740 	.word	0x08018740

080131f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b08a      	sub	sp, #40	; 0x28
 80131f8:	af02      	add	r7, sp, #8
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
 8013200:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013202:	2300      	movs	r3, #0
 8013204:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d106      	bne.n	801321a <etharp_raw+0x26>
 801320c:	4b3a      	ldr	r3, [pc, #232]	; (80132f8 <etharp_raw+0x104>)
 801320e:	f240 4257 	movw	r2, #1111	; 0x457
 8013212:	493a      	ldr	r1, [pc, #232]	; (80132fc <etharp_raw+0x108>)
 8013214:	483a      	ldr	r0, [pc, #232]	; (8013300 <etharp_raw+0x10c>)
 8013216:	f001 fe37 	bl	8014e88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801321a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801321e:	211c      	movs	r1, #28
 8013220:	200e      	movs	r0, #14
 8013222:	f7f6 fddf 	bl	8009de4 <pbuf_alloc>
 8013226:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d102      	bne.n	8013234 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801322e:	f04f 33ff 	mov.w	r3, #4294967295
 8013232:	e05d      	b.n	80132f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	895b      	ldrh	r3, [r3, #10]
 8013238:	2b1b      	cmp	r3, #27
 801323a:	d806      	bhi.n	801324a <etharp_raw+0x56>
 801323c:	4b2e      	ldr	r3, [pc, #184]	; (80132f8 <etharp_raw+0x104>)
 801323e:	f240 4262 	movw	r2, #1122	; 0x462
 8013242:	4930      	ldr	r1, [pc, #192]	; (8013304 <etharp_raw+0x110>)
 8013244:	482e      	ldr	r0, [pc, #184]	; (8013300 <etharp_raw+0x10c>)
 8013246:	f001 fe1f 	bl	8014e88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013250:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013252:	4618      	mov	r0, r3
 8013254:	f7f5 fd14 	bl	8008c80 <lwip_htons>
 8013258:	4603      	mov	r3, r0
 801325a:	461a      	mov	r2, r3
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013266:	2b06      	cmp	r3, #6
 8013268:	d006      	beq.n	8013278 <etharp_raw+0x84>
 801326a:	4b23      	ldr	r3, [pc, #140]	; (80132f8 <etharp_raw+0x104>)
 801326c:	f240 4269 	movw	r2, #1129	; 0x469
 8013270:	4925      	ldr	r1, [pc, #148]	; (8013308 <etharp_raw+0x114>)
 8013272:	4823      	ldr	r0, [pc, #140]	; (8013300 <etharp_raw+0x10c>)
 8013274:	f001 fe08 	bl	8014e88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	3308      	adds	r3, #8
 801327c:	2206      	movs	r2, #6
 801327e:	6839      	ldr	r1, [r7, #0]
 8013280:	4618      	mov	r0, r3
 8013282:	f001 ff32 	bl	80150ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	3312      	adds	r3, #18
 801328a:	2206      	movs	r2, #6
 801328c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801328e:	4618      	mov	r0, r3
 8013290:	f001 ff2b 	bl	80150ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	330e      	adds	r3, #14
 8013298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801329a:	6812      	ldr	r2, [r2, #0]
 801329c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	3318      	adds	r3, #24
 80132a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132a4:	6812      	ldr	r2, [r2, #0]
 80132a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	2200      	movs	r2, #0
 80132ac:	701a      	strb	r2, [r3, #0]
 80132ae:	2200      	movs	r2, #0
 80132b0:	f042 0201 	orr.w	r2, r2, #1
 80132b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	2200      	movs	r2, #0
 80132ba:	f042 0208 	orr.w	r2, r2, #8
 80132be:	709a      	strb	r2, [r3, #2]
 80132c0:	2200      	movs	r2, #0
 80132c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	2206      	movs	r2, #6
 80132c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	2204      	movs	r2, #4
 80132ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80132d0:	f640 0306 	movw	r3, #2054	; 0x806
 80132d4:	9300      	str	r3, [sp, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	68ba      	ldr	r2, [r7, #8]
 80132da:	69b9      	ldr	r1, [r7, #24]
 80132dc:	68f8      	ldr	r0, [r7, #12]
 80132de:	f001 fb99 	bl	8014a14 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80132e2:	69b8      	ldr	r0, [r7, #24]
 80132e4:	f7f7 f862 	bl	800a3ac <pbuf_free>
  p = NULL;
 80132e8:	2300      	movs	r3, #0
 80132ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80132ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3720      	adds	r7, #32
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	0801855c 	.word	0x0801855c
 80132fc:	080186ac 	.word	0x080186ac
 8013300:	080185d4 	.word	0x080185d4
 8013304:	0801875c 	.word	0x0801875c
 8013308:	08018790 	.word	0x08018790

0801330c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b088      	sub	sp, #32
 8013310:	af04      	add	r7, sp, #16
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013328:	2201      	movs	r2, #1
 801332a:	9203      	str	r2, [sp, #12]
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	9202      	str	r2, [sp, #8]
 8013330:	4a06      	ldr	r2, [pc, #24]	; (801334c <etharp_request_dst+0x40>)
 8013332:	9201      	str	r2, [sp, #4]
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	4603      	mov	r3, r0
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7ff ff5a 	bl	80131f4 <etharp_raw>
 8013340:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013342:	4618      	mov	r0, r3
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	08018d98 	.word	0x08018d98

08013350 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801335a:	4a05      	ldr	r2, [pc, #20]	; (8013370 <etharp_request+0x20>)
 801335c:	6839      	ldr	r1, [r7, #0]
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7ff ffd4 	bl	801330c <etharp_request_dst>
 8013364:	4603      	mov	r3, r0
}
 8013366:	4618      	mov	r0, r3
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	08018d90 	.word	0x08018d90

08013374 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b08e      	sub	sp, #56	; 0x38
 8013378:	af04      	add	r7, sp, #16
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801337e:	4b79      	ldr	r3, [pc, #484]	; (8013564 <icmp_input+0x1f0>)
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 030f 	and.w	r3, r3, #15
 801338c:	b2db      	uxtb	r3, r3
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	b2db      	uxtb	r3, r3
 8013392:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013396:	2b13      	cmp	r3, #19
 8013398:	f240 80cd 	bls.w	8013536 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	895b      	ldrh	r3, [r3, #10]
 80133a0:	2b03      	cmp	r3, #3
 80133a2:	f240 80ca 	bls.w	801353a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80133b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	f000 80b7 	beq.w	8013528 <icmp_input+0x1b4>
 80133ba:	2b08      	cmp	r3, #8
 80133bc:	f040 80b7 	bne.w	801352e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80133c0:	4b69      	ldr	r3, [pc, #420]	; (8013568 <icmp_input+0x1f4>)
 80133c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133c4:	4b67      	ldr	r3, [pc, #412]	; (8013564 <icmp_input+0x1f0>)
 80133c6:	695b      	ldr	r3, [r3, #20]
 80133c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133cc:	2be0      	cmp	r3, #224	; 0xe0
 80133ce:	f000 80bb 	beq.w	8013548 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80133d2:	4b64      	ldr	r3, [pc, #400]	; (8013564 <icmp_input+0x1f0>)
 80133d4:	695b      	ldr	r3, [r3, #20]
 80133d6:	4a63      	ldr	r2, [pc, #396]	; (8013564 <icmp_input+0x1f0>)
 80133d8:	6812      	ldr	r2, [r2, #0]
 80133da:	4611      	mov	r1, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f000 fc0b 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f040 80b1 	bne.w	801354c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	891b      	ldrh	r3, [r3, #8]
 80133ee:	2b07      	cmp	r3, #7
 80133f0:	f240 80a5 	bls.w	801353e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80133f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133f6:	330e      	adds	r3, #14
 80133f8:	4619      	mov	r1, r3
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7f6 ff40 	bl	800a280 <pbuf_add_header>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d04b      	beq.n	801349e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	891a      	ldrh	r2, [r3, #8]
 801340a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801340c:	4413      	add	r3, r2
 801340e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	891b      	ldrh	r3, [r3, #8]
 8013414:	8b7a      	ldrh	r2, [r7, #26]
 8013416:	429a      	cmp	r2, r3
 8013418:	f0c0 809a 	bcc.w	8013550 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801341c:	8b7b      	ldrh	r3, [r7, #26]
 801341e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013422:	4619      	mov	r1, r3
 8013424:	200e      	movs	r0, #14
 8013426:	f7f6 fcdd 	bl	8009de4 <pbuf_alloc>
 801342a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f000 8090 	beq.w	8013554 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	895b      	ldrh	r3, [r3, #10]
 8013438:	461a      	mov	r2, r3
 801343a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801343c:	3308      	adds	r3, #8
 801343e:	429a      	cmp	r2, r3
 8013440:	d203      	bcs.n	801344a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013442:	6978      	ldr	r0, [r7, #20]
 8013444:	f7f6 ffb2 	bl	800a3ac <pbuf_free>
          goto icmperr;
 8013448:	e085      	b.n	8013556 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013452:	4618      	mov	r0, r3
 8013454:	f001 fe49 	bl	80150ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801345a:	4619      	mov	r1, r3
 801345c:	6978      	ldr	r0, [r7, #20]
 801345e:	f7f6 ff1f 	bl	800a2a0 <pbuf_remove_header>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d009      	beq.n	801347c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013468:	4b40      	ldr	r3, [pc, #256]	; (801356c <icmp_input+0x1f8>)
 801346a:	22b6      	movs	r2, #182	; 0xb6
 801346c:	4940      	ldr	r1, [pc, #256]	; (8013570 <icmp_input+0x1fc>)
 801346e:	4841      	ldr	r0, [pc, #260]	; (8013574 <icmp_input+0x200>)
 8013470:	f001 fd0a 	bl	8014e88 <iprintf>
          pbuf_free(r);
 8013474:	6978      	ldr	r0, [r7, #20]
 8013476:	f7f6 ff99 	bl	800a3ac <pbuf_free>
          goto icmperr;
 801347a:	e06c      	b.n	8013556 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801347c:	6879      	ldr	r1, [r7, #4]
 801347e:	6978      	ldr	r0, [r7, #20]
 8013480:	f7f7 f8c8 	bl	800a614 <pbuf_copy>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d003      	beq.n	8013492 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801348a:	6978      	ldr	r0, [r7, #20]
 801348c:	f7f6 ff8e 	bl	800a3ac <pbuf_free>
          goto icmperr;
 8013490:	e061      	b.n	8013556 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f7f6 ff8a 	bl	800a3ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	607b      	str	r3, [r7, #4]
 801349c:	e00f      	b.n	80134be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801349e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134a0:	330e      	adds	r3, #14
 80134a2:	4619      	mov	r1, r3
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7f6 fefb 	bl	800a2a0 <pbuf_remove_header>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d006      	beq.n	80134be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80134b0:	4b2e      	ldr	r3, [pc, #184]	; (801356c <icmp_input+0x1f8>)
 80134b2:	22c7      	movs	r2, #199	; 0xc7
 80134b4:	4930      	ldr	r1, [pc, #192]	; (8013578 <icmp_input+0x204>)
 80134b6:	482f      	ldr	r0, [pc, #188]	; (8013574 <icmp_input+0x200>)
 80134b8:	f001 fce6 	bl	8014e88 <iprintf>
          goto icmperr;
 80134bc:	e04b      	b.n	8013556 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80134c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134c6:	4619      	mov	r1, r3
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f7f6 fed9 	bl	800a280 <pbuf_add_header>
 80134ce:	4603      	mov	r3, r0
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d12b      	bne.n	801352c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	681a      	ldr	r2, [r3, #0]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80134e2:	4b20      	ldr	r3, [pc, #128]	; (8013564 <icmp_input+0x1f0>)
 80134e4:	691a      	ldr	r2, [r3, #16]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2200      	movs	r2, #0
 80134ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	2200      	movs	r2, #0
 80134f4:	709a      	strb	r2, [r3, #2]
 80134f6:	2200      	movs	r2, #0
 80134f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	22ff      	movs	r2, #255	; 0xff
 80134fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2200      	movs	r2, #0
 8013504:	729a      	strb	r2, [r3, #10]
 8013506:	2200      	movs	r2, #0
 8013508:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	9302      	str	r3, [sp, #8]
 801350e:	2301      	movs	r3, #1
 8013510:	9301      	str	r3, [sp, #4]
 8013512:	2300      	movs	r3, #0
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	23ff      	movs	r3, #255	; 0xff
 8013518:	2200      	movs	r2, #0
 801351a:	69f9      	ldr	r1, [r7, #28]
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 fa93 	bl	8013a48 <ip4_output_if>
 8013522:	4603      	mov	r3, r0
 8013524:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013526:	e001      	b.n	801352c <icmp_input+0x1b8>
      break;
 8013528:	bf00      	nop
 801352a:	e000      	b.n	801352e <icmp_input+0x1ba>
      break;
 801352c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7f6 ff3c 	bl	800a3ac <pbuf_free>
  return;
 8013534:	e013      	b.n	801355e <icmp_input+0x1ea>
    goto lenerr;
 8013536:	bf00      	nop
 8013538:	e002      	b.n	8013540 <icmp_input+0x1cc>
    goto lenerr;
 801353a:	bf00      	nop
 801353c:	e000      	b.n	8013540 <icmp_input+0x1cc>
        goto lenerr;
 801353e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7f6 ff33 	bl	800a3ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013546:	e00a      	b.n	801355e <icmp_input+0x1ea>
        goto icmperr;
 8013548:	bf00      	nop
 801354a:	e004      	b.n	8013556 <icmp_input+0x1e2>
        goto icmperr;
 801354c:	bf00      	nop
 801354e:	e002      	b.n	8013556 <icmp_input+0x1e2>
          goto icmperr;
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <icmp_input+0x1e2>
          goto icmperr;
 8013554:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f7f6 ff28 	bl	800a3ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801355c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801355e:	3728      	adds	r7, #40	; 0x28
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	20009c48 	.word	0x20009c48
 8013568:	20009c5c 	.word	0x20009c5c
 801356c:	080187d4 	.word	0x080187d4
 8013570:	0801880c 	.word	0x0801880c
 8013574:	08018844 	.word	0x08018844
 8013578:	0801886c 	.word	0x0801886c

0801357c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	460b      	mov	r3, r1
 8013586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013588:	78fb      	ldrb	r3, [r7, #3]
 801358a:	461a      	mov	r2, r3
 801358c:	2103      	movs	r1, #3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f000 f814 	bl	80135bc <icmp_send_response>
}
 8013594:	bf00      	nop
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	460b      	mov	r3, r1
 80135a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80135a8:	78fb      	ldrb	r3, [r7, #3]
 80135aa:	461a      	mov	r2, r3
 80135ac:	210b      	movs	r1, #11
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 f804 	bl	80135bc <icmp_send_response>
}
 80135b4:	bf00      	nop
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08c      	sub	sp, #48	; 0x30
 80135c0:	af04      	add	r7, sp, #16
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	460b      	mov	r3, r1
 80135c6:	70fb      	strb	r3, [r7, #3]
 80135c8:	4613      	mov	r3, r2
 80135ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80135cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135d0:	2124      	movs	r1, #36	; 0x24
 80135d2:	2022      	movs	r0, #34	; 0x22
 80135d4:	f7f6 fc06 	bl	8009de4 <pbuf_alloc>
 80135d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80135da:	69fb      	ldr	r3, [r7, #28]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d04c      	beq.n	801367a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	895b      	ldrh	r3, [r3, #10]
 80135e4:	2b23      	cmp	r3, #35	; 0x23
 80135e6:	d806      	bhi.n	80135f6 <icmp_send_response+0x3a>
 80135e8:	4b26      	ldr	r3, [pc, #152]	; (8013684 <icmp_send_response+0xc8>)
 80135ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80135ee:	4926      	ldr	r1, [pc, #152]	; (8013688 <icmp_send_response+0xcc>)
 80135f0:	4826      	ldr	r0, [pc, #152]	; (801368c <icmp_send_response+0xd0>)
 80135f2:	f001 fc49 	bl	8014e88 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	78fa      	ldrb	r2, [r7, #3]
 8013606:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	78ba      	ldrb	r2, [r7, #2]
 801360c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	2200      	movs	r2, #0
 8013612:	711a      	strb	r2, [r3, #4]
 8013614:	2200      	movs	r2, #0
 8013616:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	2200      	movs	r2, #0
 801361c:	719a      	strb	r2, [r3, #6]
 801361e:	2200      	movs	r2, #0
 8013620:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	f103 0008 	add.w	r0, r3, #8
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	221c      	movs	r2, #28
 8013630:	4619      	mov	r1, r3
 8013632:	f001 fd5a 	bl	80150ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801363c:	f107 030c 	add.w	r3, r7, #12
 8013640:	4618      	mov	r0, r3
 8013642:	f000 f825 	bl	8013690 <ip4_route>
 8013646:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d011      	beq.n	8013672 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	2200      	movs	r2, #0
 8013652:	709a      	strb	r2, [r3, #2]
 8013654:	2200      	movs	r2, #0
 8013656:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013658:	f107 020c 	add.w	r2, r7, #12
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	9302      	str	r3, [sp, #8]
 8013660:	2301      	movs	r3, #1
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	2300      	movs	r3, #0
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	23ff      	movs	r3, #255	; 0xff
 801366a:	2100      	movs	r1, #0
 801366c:	69f8      	ldr	r0, [r7, #28]
 801366e:	f000 f9eb 	bl	8013a48 <ip4_output_if>
  }
  pbuf_free(q);
 8013672:	69f8      	ldr	r0, [r7, #28]
 8013674:	f7f6 fe9a 	bl	800a3ac <pbuf_free>
 8013678:	e000      	b.n	801367c <icmp_send_response+0xc0>
    return;
 801367a:	bf00      	nop
}
 801367c:	3720      	adds	r7, #32
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	080187d4 	.word	0x080187d4
 8013688:	080188a0 	.word	0x080188a0
 801368c:	08018844 	.word	0x08018844

08013690 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013690:	b480      	push	{r7}
 8013692:	b085      	sub	sp, #20
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013698:	4b33      	ldr	r3, [pc, #204]	; (8013768 <ip4_route+0xd8>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	60fb      	str	r3, [r7, #12]
 801369e:	e036      	b.n	801370e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136a6:	f003 0301 	and.w	r3, r3, #1
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d02b      	beq.n	8013708 <ip4_route+0x78>
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136b6:	089b      	lsrs	r3, r3, #2
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d022      	beq.n	8013708 <ip4_route+0x78>
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	3304      	adds	r3, #4
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d01d      	beq.n	8013708 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	3304      	adds	r3, #4
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	405a      	eors	r2, r3
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	3308      	adds	r3, #8
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	4013      	ands	r3, r2
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	e038      	b.n	801375a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136ee:	f003 0302 	and.w	r3, r3, #2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d108      	bne.n	8013708 <ip4_route+0x78>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	330c      	adds	r3, #12
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	429a      	cmp	r2, r3
 8013702:	d101      	bne.n	8013708 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	e028      	b.n	801375a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	60fb      	str	r3, [r7, #12]
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1c5      	bne.n	80136a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013714:	4b15      	ldr	r3, [pc, #84]	; (801376c <ip4_route+0xdc>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d01a      	beq.n	8013752 <ip4_route+0xc2>
 801371c:	4b13      	ldr	r3, [pc, #76]	; (801376c <ip4_route+0xdc>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013724:	f003 0301 	and.w	r3, r3, #1
 8013728:	2b00      	cmp	r3, #0
 801372a:	d012      	beq.n	8013752 <ip4_route+0xc2>
 801372c:	4b0f      	ldr	r3, [pc, #60]	; (801376c <ip4_route+0xdc>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00a      	beq.n	8013752 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801373c:	4b0b      	ldr	r3, [pc, #44]	; (801376c <ip4_route+0xdc>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	3304      	adds	r3, #4
 8013742:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013744:	2b00      	cmp	r3, #0
 8013746:	d004      	beq.n	8013752 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b7f      	cmp	r3, #127	; 0x7f
 8013750:	d101      	bne.n	8013756 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013752:	2300      	movs	r3, #0
 8013754:	e001      	b.n	801375a <ip4_route+0xca>
  }

  return netif_default;
 8013756:	4b05      	ldr	r3, [pc, #20]	; (801376c <ip4_route+0xdc>)
 8013758:	681b      	ldr	r3, [r3, #0]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3714      	adds	r7, #20
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	2000d3b0 	.word	0x2000d3b0
 801376c:	2000d3b4 	.word	0x2000d3b4

08013770 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801377e:	f003 0301 	and.w	r3, r3, #1
 8013782:	b2db      	uxtb	r3, r3
 8013784:	2b00      	cmp	r3, #0
 8013786:	d016      	beq.n	80137b6 <ip4_input_accept+0x46>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3304      	adds	r3, #4
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d011      	beq.n	80137b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013792:	4b0b      	ldr	r3, [pc, #44]	; (80137c0 <ip4_input_accept+0x50>)
 8013794:	695a      	ldr	r2, [r3, #20]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3304      	adds	r3, #4
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	429a      	cmp	r2, r3
 801379e:	d008      	beq.n	80137b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80137a0:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <ip4_input_accept+0x50>)
 80137a2:	695b      	ldr	r3, [r3, #20]
 80137a4:	6879      	ldr	r1, [r7, #4]
 80137a6:	4618      	mov	r0, r3
 80137a8:	f000 fa26 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 80137ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d001      	beq.n	80137b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80137b2:	2301      	movs	r3, #1
 80137b4:	e000      	b.n	80137b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80137b6:	2300      	movs	r3, #0
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	20009c48 	.word	0x20009c48

080137c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80137ce:	2301      	movs	r3, #1
 80137d0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	091b      	lsrs	r3, r3, #4
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	2b04      	cmp	r3, #4
 80137e2:	d004      	beq.n	80137ee <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f7f6 fde1 	bl	800a3ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80137ea:	2300      	movs	r3, #0
 80137ec:	e123      	b.n	8013a36 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f003 030f 	and.w	r3, r3, #15
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	885b      	ldrh	r3, [r3, #2]
 8013802:	b29b      	uxth	r3, r3
 8013804:	4618      	mov	r0, r3
 8013806:	f7f5 fa3b 	bl	8008c80 <lwip_htons>
 801380a:	4603      	mov	r3, r0
 801380c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	891b      	ldrh	r3, [r3, #8]
 8013812:	8a3a      	ldrh	r2, [r7, #16]
 8013814:	429a      	cmp	r2, r3
 8013816:	d204      	bcs.n	8013822 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013818:	8a3b      	ldrh	r3, [r7, #16]
 801381a:	4619      	mov	r1, r3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f7f6 fc3f 	bl	800a0a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	895b      	ldrh	r3, [r3, #10]
 8013826:	8a7a      	ldrh	r2, [r7, #18]
 8013828:	429a      	cmp	r2, r3
 801382a:	d807      	bhi.n	801383c <ip4_input+0x78>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	891b      	ldrh	r3, [r3, #8]
 8013830:	8a3a      	ldrh	r2, [r7, #16]
 8013832:	429a      	cmp	r2, r3
 8013834:	d802      	bhi.n	801383c <ip4_input+0x78>
 8013836:	8a7b      	ldrh	r3, [r7, #18]
 8013838:	2b13      	cmp	r3, #19
 801383a:	d804      	bhi.n	8013846 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7f6 fdb5 	bl	800a3ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013842:	2300      	movs	r3, #0
 8013844:	e0f7      	b.n	8013a36 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	4a7d      	ldr	r2, [pc, #500]	; (8013a40 <ip4_input+0x27c>)
 801384c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801384e:	69fb      	ldr	r3, [r7, #28]
 8013850:	68db      	ldr	r3, [r3, #12]
 8013852:	4a7b      	ldr	r2, [pc, #492]	; (8013a40 <ip4_input+0x27c>)
 8013854:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013856:	4b7a      	ldr	r3, [pc, #488]	; (8013a40 <ip4_input+0x27c>)
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801385e:	2be0      	cmp	r3, #224	; 0xe0
 8013860:	d112      	bne.n	8013888 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	b2db      	uxtb	r3, r3
 801386e:	2b00      	cmp	r3, #0
 8013870:	d007      	beq.n	8013882 <ip4_input+0xbe>
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	3304      	adds	r3, #4
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d002      	beq.n	8013882 <ip4_input+0xbe>
      netif = inp;
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	61bb      	str	r3, [r7, #24]
 8013880:	e02a      	b.n	80138d8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8013882:	2300      	movs	r3, #0
 8013884:	61bb      	str	r3, [r7, #24]
 8013886:	e027      	b.n	80138d8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013888:	6838      	ldr	r0, [r7, #0]
 801388a:	f7ff ff71 	bl	8013770 <ip4_input_accept>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d002      	beq.n	801389a <ip4_input+0xd6>
      netif = inp;
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	61bb      	str	r3, [r7, #24]
 8013898:	e01e      	b.n	80138d8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801389e:	4b68      	ldr	r3, [pc, #416]	; (8013a40 <ip4_input+0x27c>)
 80138a0:	695b      	ldr	r3, [r3, #20]
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	2b7f      	cmp	r3, #127	; 0x7f
 80138a6:	d017      	beq.n	80138d8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80138a8:	4b66      	ldr	r3, [pc, #408]	; (8013a44 <ip4_input+0x280>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	61bb      	str	r3, [r7, #24]
 80138ae:	e00e      	b.n	80138ce <ip4_input+0x10a>
          if (netif == inp) {
 80138b0:	69ba      	ldr	r2, [r7, #24]
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d006      	beq.n	80138c6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80138b8:	69b8      	ldr	r0, [r7, #24]
 80138ba:	f7ff ff59 	bl	8013770 <ip4_input_accept>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d108      	bne.n	80138d6 <ip4_input+0x112>
 80138c4:	e000      	b.n	80138c8 <ip4_input+0x104>
            continue;
 80138c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	61bb      	str	r3, [r7, #24]
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1ed      	bne.n	80138b0 <ip4_input+0xec>
 80138d4:	e000      	b.n	80138d8 <ip4_input+0x114>
            break;
 80138d6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d111      	bne.n	8013902 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	7a5b      	ldrb	r3, [r3, #9]
 80138e2:	2b11      	cmp	r3, #17
 80138e4:	d10d      	bne.n	8013902 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80138e6:	8a7b      	ldrh	r3, [r7, #18]
 80138e8:	69fa      	ldr	r2, [r7, #28]
 80138ea:	4413      	add	r3, r2
 80138ec:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	885b      	ldrh	r3, [r3, #2]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80138f8:	d103      	bne.n	8013902 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80138fe:	2300      	movs	r3, #0
 8013900:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d017      	beq.n	8013938 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013908:	4b4d      	ldr	r3, [pc, #308]	; (8013a40 <ip4_input+0x27c>)
 801390a:	691b      	ldr	r3, [r3, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d013      	beq.n	8013938 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013910:	4b4b      	ldr	r3, [pc, #300]	; (8013a40 <ip4_input+0x27c>)
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	4618      	mov	r0, r3
 8013918:	f000 f96e 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 801391c:	4603      	mov	r3, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	d105      	bne.n	801392e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013922:	4b47      	ldr	r3, [pc, #284]	; (8013a40 <ip4_input+0x27c>)
 8013924:	691b      	ldr	r3, [r3, #16]
 8013926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801392a:	2be0      	cmp	r3, #224	; 0xe0
 801392c:	d104      	bne.n	8013938 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7f6 fd3c 	bl	800a3ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013934:	2300      	movs	r3, #0
 8013936:	e07e      	b.n	8013a36 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d104      	bne.n	8013948 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7f6 fd34 	bl	800a3ac <pbuf_free>
    return ERR_OK;
 8013944:	2300      	movs	r3, #0
 8013946:	e076      	b.n	8013a36 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	88db      	ldrh	r3, [r3, #6]
 801394c:	b29b      	uxth	r3, r3
 801394e:	461a      	mov	r2, r3
 8013950:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013954:	4013      	ands	r3, r2
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00b      	beq.n	8013972 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fc92 	bl	8014284 <ip4_reass>
 8013960:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d101      	bne.n	801396c <ip4_input+0x1a8>
      return ERR_OK;
 8013968:	2300      	movs	r3, #0
 801396a:	e064      	b.n	8013a36 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013972:	4a33      	ldr	r2, [pc, #204]	; (8013a40 <ip4_input+0x27c>)
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013978:	4a31      	ldr	r2, [pc, #196]	; (8013a40 <ip4_input+0x27c>)
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801397e:	4a30      	ldr	r2, [pc, #192]	; (8013a40 <ip4_input+0x27c>)
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	f003 030f 	and.w	r3, r3, #15
 801398c:	b2db      	uxtb	r3, r3
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	b2db      	uxtb	r3, r3
 8013992:	b29a      	uxth	r2, r3
 8013994:	4b2a      	ldr	r3, [pc, #168]	; (8013a40 <ip4_input+0x27c>)
 8013996:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013998:	8a7b      	ldrh	r3, [r7, #18]
 801399a:	4619      	mov	r1, r3
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7f6 fc7f 	bl	800a2a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	7a5b      	ldrb	r3, [r3, #9]
 80139a6:	2b11      	cmp	r3, #17
 80139a8:	d006      	beq.n	80139b8 <ip4_input+0x1f4>
 80139aa:	2b11      	cmp	r3, #17
 80139ac:	dc13      	bgt.n	80139d6 <ip4_input+0x212>
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d00c      	beq.n	80139cc <ip4_input+0x208>
 80139b2:	2b06      	cmp	r3, #6
 80139b4:	d005      	beq.n	80139c2 <ip4_input+0x1fe>
 80139b6:	e00e      	b.n	80139d6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7fc fb24 	bl	8010008 <udp_input>
        break;
 80139c0:	e026      	b.n	8013a10 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7f8 fb35 	bl	800c034 <tcp_input>
        break;
 80139ca:	e021      	b.n	8013a10 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80139cc:	6839      	ldr	r1, [r7, #0]
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f7ff fcd0 	bl	8013374 <icmp_input>
        break;
 80139d4:	e01c      	b.n	8013a10 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80139d6:	4b1a      	ldr	r3, [pc, #104]	; (8013a40 <ip4_input+0x27c>)
 80139d8:	695b      	ldr	r3, [r3, #20]
 80139da:	69b9      	ldr	r1, [r7, #24]
 80139dc:	4618      	mov	r0, r3
 80139de:	f000 f90b 	bl	8013bf8 <ip4_addr_isbroadcast_u32>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10f      	bne.n	8013a08 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80139e8:	4b15      	ldr	r3, [pc, #84]	; (8013a40 <ip4_input+0x27c>)
 80139ea:	695b      	ldr	r3, [r3, #20]
 80139ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80139f0:	2be0      	cmp	r3, #224	; 0xe0
 80139f2:	d009      	beq.n	8013a08 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80139f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80139f8:	4619      	mov	r1, r3
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	f7f6 fcc3 	bl	800a386 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013a00:	2102      	movs	r1, #2
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f7ff fdba 	bl	801357c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f7f6 fccf 	bl	800a3ac <pbuf_free>
        break;
 8013a0e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013a10:	4b0b      	ldr	r3, [pc, #44]	; (8013a40 <ip4_input+0x27c>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013a16:	4b0a      	ldr	r3, [pc, #40]	; (8013a40 <ip4_input+0x27c>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013a1c:	4b08      	ldr	r3, [pc, #32]	; (8013a40 <ip4_input+0x27c>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013a22:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <ip4_input+0x27c>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013a28:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <ip4_input+0x27c>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013a2e:	4b04      	ldr	r3, [pc, #16]	; (8013a40 <ip4_input+0x27c>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3720      	adds	r7, #32
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
 8013a3e:	bf00      	nop
 8013a40:	20009c48 	.word	0x20009c48
 8013a44:	2000d3b0 	.word	0x2000d3b0

08013a48 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b08a      	sub	sp, #40	; 0x28
 8013a4c:	af04      	add	r7, sp, #16
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d009      	beq.n	8013a74 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d003      	beq.n	8013a6e <ip4_output_if+0x26>
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d102      	bne.n	8013a74 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a70:	3304      	adds	r3, #4
 8013a72:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013a74:	78fa      	ldrb	r2, [r7, #3]
 8013a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a78:	9302      	str	r3, [sp, #8]
 8013a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a84:	9300      	str	r3, [sp, #0]
 8013a86:	4613      	mov	r3, r2
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	6979      	ldr	r1, [r7, #20]
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f000 f805 	bl	8013a9c <ip4_output_if_src>
 8013a92:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3718      	adds	r7, #24
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b088      	sub	sp, #32
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	7b9b      	ldrb	r3, [r3, #14]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d006      	beq.n	8013ac0 <ip4_output_if_src+0x24>
 8013ab2:	4b4b      	ldr	r3, [pc, #300]	; (8013be0 <ip4_output_if_src+0x144>)
 8013ab4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013ab8:	494a      	ldr	r1, [pc, #296]	; (8013be4 <ip4_output_if_src+0x148>)
 8013aba:	484b      	ldr	r0, [pc, #300]	; (8013be8 <ip4_output_if_src+0x14c>)
 8013abc:	f001 f9e4 	bl	8014e88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d060      	beq.n	8013b88 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013ac6:	2314      	movs	r3, #20
 8013ac8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013aca:	2114      	movs	r1, #20
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7f6 fbd7 	bl	800a280 <pbuf_add_header>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ad8:	f06f 0301 	mvn.w	r3, #1
 8013adc:	e07c      	b.n	8013bd8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	895b      	ldrh	r3, [r3, #10]
 8013ae8:	2b13      	cmp	r3, #19
 8013aea:	d806      	bhi.n	8013afa <ip4_output_if_src+0x5e>
 8013aec:	4b3c      	ldr	r3, [pc, #240]	; (8013be0 <ip4_output_if_src+0x144>)
 8013aee:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013af2:	493e      	ldr	r1, [pc, #248]	; (8013bec <ip4_output_if_src+0x150>)
 8013af4:	483c      	ldr	r0, [pc, #240]	; (8013be8 <ip4_output_if_src+0x14c>)
 8013af6:	f001 f9c7 	bl	8014e88 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	78fa      	ldrb	r2, [r7, #3]
 8013afe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013b06:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013b10:	8b7b      	ldrh	r3, [r7, #26]
 8013b12:	089b      	lsrs	r3, r3, #2
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013b28:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	891b      	ldrh	r3, [r3, #8]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7f5 f8a6 	bl	8008c80 <lwip_htons>
 8013b34:	4603      	mov	r3, r0
 8013b36:	461a      	mov	r2, r3
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	719a      	strb	r2, [r3, #6]
 8013b42:	2200      	movs	r2, #0
 8013b44:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013b46:	4b2a      	ldr	r3, [pc, #168]	; (8013bf0 <ip4_output_if_src+0x154>)
 8013b48:	881b      	ldrh	r3, [r3, #0]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f5 f898 	bl	8008c80 <lwip_htons>
 8013b50:	4603      	mov	r3, r0
 8013b52:	461a      	mov	r2, r3
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013b58:	4b25      	ldr	r3, [pc, #148]	; (8013bf0 <ip4_output_if_src+0x154>)
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	4b23      	ldr	r3, [pc, #140]	; (8013bf0 <ip4_output_if_src+0x154>)
 8013b62:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d104      	bne.n	8013b74 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013b6a:	4b22      	ldr	r3, [pc, #136]	; (8013bf4 <ip4_output_if_src+0x158>)
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	60da      	str	r2, [r3, #12]
 8013b72:	e003      	b.n	8013b7c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	729a      	strb	r2, [r3, #10]
 8013b82:	2200      	movs	r2, #0
 8013b84:	72da      	strb	r2, [r3, #11]
 8013b86:	e00f      	b.n	8013ba8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	895b      	ldrh	r3, [r3, #10]
 8013b8c:	2b13      	cmp	r3, #19
 8013b8e:	d802      	bhi.n	8013b96 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013b90:	f06f 0301 	mvn.w	r3, #1
 8013b94:	e020      	b.n	8013bd8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	691b      	ldr	r3, [r3, #16]
 8013ba0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ba2:	f107 0314 	add.w	r3, r7, #20
 8013ba6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00c      	beq.n	8013bca <ip4_output_if_src+0x12e>
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	891a      	ldrh	r2, [r3, #8]
 8013bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d906      	bls.n	8013bca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f000 fd53 	bl	801466c <ip4_frag>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	e006      	b.n	8013bd8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bcc:	695b      	ldr	r3, [r3, #20]
 8013bce:	687a      	ldr	r2, [r7, #4]
 8013bd0:	68f9      	ldr	r1, [r7, #12]
 8013bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bd4:	4798      	blx	r3
 8013bd6:	4603      	mov	r3, r0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3720      	adds	r7, #32
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	080188cc 	.word	0x080188cc
 8013be4:	08018900 	.word	0x08018900
 8013be8:	0801890c 	.word	0x0801890c
 8013bec:	08018934 	.word	0x08018934
 8013bf0:	2000d542 	.word	0x2000d542
 8013bf4:	08018d88 	.word	0x08018d88

08013bf8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0c:	d002      	beq.n	8013c14 <ip4_addr_isbroadcast_u32+0x1c>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d101      	bne.n	8013c18 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013c14:	2301      	movs	r3, #1
 8013c16:	e02a      	b.n	8013c6e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c1e:	f003 0302 	and.w	r3, r3, #2
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d101      	bne.n	8013c2a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013c26:	2300      	movs	r3, #0
 8013c28:	e021      	b.n	8013c6e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d101      	bne.n	8013c3a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	e019      	b.n	8013c6e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	3304      	adds	r3, #4
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	405a      	eors	r2, r3
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	3308      	adds	r3, #8
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d10d      	bne.n	8013c6c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	3308      	adds	r3, #8
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	43da      	mvns	r2, r3
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	3308      	adds	r3, #8
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d101      	bne.n	8013c6c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e000      	b.n	8013c6e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013c6c:	2300      	movs	r3, #0
  }
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3714      	adds	r7, #20
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
	...

08013c7c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013c86:	4b12      	ldr	r3, [pc, #72]	; (8013cd0 <ip_reass_tmr+0x54>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013c8c:	e018      	b.n	8013cc0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	7fdb      	ldrb	r3, [r3, #31]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d00b      	beq.n	8013cae <ip_reass_tmr+0x32>
      r->timer--;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	7fdb      	ldrb	r3, [r3, #31]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	60fb      	str	r3, [r7, #12]
 8013cac:	e008      	b.n	8013cc0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013cb8:	68b9      	ldr	r1, [r7, #8]
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 f80a 	bl	8013cd4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1e3      	bne.n	8013c8e <ip_reass_tmr+0x12>
    }
  }
}
 8013cc6:	bf00      	nop
 8013cc8:	bf00      	nop
 8013cca:	3710      	adds	r7, #16
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	2000d544 	.word	0x2000d544

08013cd4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b088      	sub	sp, #32
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d105      	bne.n	8013cf6 <ip_reass_free_complete_datagram+0x22>
 8013cea:	4b45      	ldr	r3, [pc, #276]	; (8013e00 <ip_reass_free_complete_datagram+0x12c>)
 8013cec:	22ab      	movs	r2, #171	; 0xab
 8013cee:	4945      	ldr	r1, [pc, #276]	; (8013e04 <ip_reass_free_complete_datagram+0x130>)
 8013cf0:	4845      	ldr	r0, [pc, #276]	; (8013e08 <ip_reass_free_complete_datagram+0x134>)
 8013cf2:	f001 f8c9 	bl	8014e88 <iprintf>
  if (prev != NULL) {
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d00a      	beq.n	8013d12 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d005      	beq.n	8013d12 <ip_reass_free_complete_datagram+0x3e>
 8013d06:	4b3e      	ldr	r3, [pc, #248]	; (8013e00 <ip_reass_free_complete_datagram+0x12c>)
 8013d08:	22ad      	movs	r2, #173	; 0xad
 8013d0a:	4940      	ldr	r1, [pc, #256]	; (8013e0c <ip_reass_free_complete_datagram+0x138>)
 8013d0c:	483e      	ldr	r0, [pc, #248]	; (8013e08 <ip_reass_free_complete_datagram+0x134>)
 8013d0e:	f001 f8bb 	bl	8014e88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	889b      	ldrh	r3, [r3, #4]
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d12a      	bne.n	8013d7a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013d32:	69bb      	ldr	r3, [r7, #24]
 8013d34:	6858      	ldr	r0, [r3, #4]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	3308      	adds	r3, #8
 8013d3a:	2214      	movs	r2, #20
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	f001 f9d4 	bl	80150ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013d42:	2101      	movs	r1, #1
 8013d44:	69b8      	ldr	r0, [r7, #24]
 8013d46:	f7ff fc29 	bl	801359c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013d4a:	69b8      	ldr	r0, [r7, #24]
 8013d4c:	f7f6 fbbc 	bl	800a4c8 <pbuf_clen>
 8013d50:	4603      	mov	r3, r0
 8013d52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d54:	8bfa      	ldrh	r2, [r7, #30]
 8013d56:	8a7b      	ldrh	r3, [r7, #18]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d5e:	db05      	blt.n	8013d6c <ip_reass_free_complete_datagram+0x98>
 8013d60:	4b27      	ldr	r3, [pc, #156]	; (8013e00 <ip_reass_free_complete_datagram+0x12c>)
 8013d62:	22bc      	movs	r2, #188	; 0xbc
 8013d64:	492a      	ldr	r1, [pc, #168]	; (8013e10 <ip_reass_free_complete_datagram+0x13c>)
 8013d66:	4828      	ldr	r0, [pc, #160]	; (8013e08 <ip_reass_free_complete_datagram+0x134>)
 8013d68:	f001 f88e 	bl	8014e88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013d6c:	8bfa      	ldrh	r2, [r7, #30]
 8013d6e:	8a7b      	ldrh	r3, [r7, #18]
 8013d70:	4413      	add	r3, r2
 8013d72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013d74:	69b8      	ldr	r0, [r7, #24]
 8013d76:	f7f6 fb19 	bl	800a3ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013d80:	e01f      	b.n	8013dc2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013d82:	69bb      	ldr	r3, [r7, #24]
 8013d84:	685b      	ldr	r3, [r3, #4]
 8013d86:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013d92:	68f8      	ldr	r0, [r7, #12]
 8013d94:	f7f6 fb98 	bl	800a4c8 <pbuf_clen>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013d9c:	8bfa      	ldrh	r2, [r7, #30]
 8013d9e:	8a7b      	ldrh	r3, [r7, #18]
 8013da0:	4413      	add	r3, r2
 8013da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013da6:	db05      	blt.n	8013db4 <ip_reass_free_complete_datagram+0xe0>
 8013da8:	4b15      	ldr	r3, [pc, #84]	; (8013e00 <ip_reass_free_complete_datagram+0x12c>)
 8013daa:	22cc      	movs	r2, #204	; 0xcc
 8013dac:	4918      	ldr	r1, [pc, #96]	; (8013e10 <ip_reass_free_complete_datagram+0x13c>)
 8013dae:	4816      	ldr	r0, [pc, #88]	; (8013e08 <ip_reass_free_complete_datagram+0x134>)
 8013db0:	f001 f86a 	bl	8014e88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013db4:	8bfa      	ldrh	r2, [r7, #30]
 8013db6:	8a7b      	ldrh	r3, [r7, #18]
 8013db8:	4413      	add	r3, r2
 8013dba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7f6 faf5 	bl	800a3ac <pbuf_free>
  while (p != NULL) {
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1dc      	bne.n	8013d82 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013dc8:	6839      	ldr	r1, [r7, #0]
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 f8c2 	bl	8013f54 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013dd0:	4b10      	ldr	r3, [pc, #64]	; (8013e14 <ip_reass_free_complete_datagram+0x140>)
 8013dd2:	881b      	ldrh	r3, [r3, #0]
 8013dd4:	8bfa      	ldrh	r2, [r7, #30]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d905      	bls.n	8013de6 <ip_reass_free_complete_datagram+0x112>
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <ip_reass_free_complete_datagram+0x12c>)
 8013ddc:	22d2      	movs	r2, #210	; 0xd2
 8013dde:	490e      	ldr	r1, [pc, #56]	; (8013e18 <ip_reass_free_complete_datagram+0x144>)
 8013de0:	4809      	ldr	r0, [pc, #36]	; (8013e08 <ip_reass_free_complete_datagram+0x134>)
 8013de2:	f001 f851 	bl	8014e88 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013de6:	4b0b      	ldr	r3, [pc, #44]	; (8013e14 <ip_reass_free_complete_datagram+0x140>)
 8013de8:	881a      	ldrh	r2, [r3, #0]
 8013dea:	8bfb      	ldrh	r3, [r7, #30]
 8013dec:	1ad3      	subs	r3, r2, r3
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	4b08      	ldr	r3, [pc, #32]	; (8013e14 <ip_reass_free_complete_datagram+0x140>)
 8013df2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013df4:	8bfb      	ldrh	r3, [r7, #30]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3720      	adds	r7, #32
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	08018964 	.word	0x08018964
 8013e04:	080189a0 	.word	0x080189a0
 8013e08:	080189ac 	.word	0x080189ac
 8013e0c:	080189d4 	.word	0x080189d4
 8013e10:	080189e8 	.word	0x080189e8
 8013e14:	2000d548 	.word	0x2000d548
 8013e18:	08018a08 	.word	0x08018a08

08013e1c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	; 0x28
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013e26:	2300      	movs	r3, #0
 8013e28:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013e36:	2300      	movs	r3, #0
 8013e38:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013e3a:	4b28      	ldr	r3, [pc, #160]	; (8013edc <ip_reass_remove_oldest_datagram+0xc0>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013e40:	e030      	b.n	8013ea4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e44:	695a      	ldr	r2, [r3, #20]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	68db      	ldr	r3, [r3, #12]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d10c      	bne.n	8013e68 <ip_reass_remove_oldest_datagram+0x4c>
 8013e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e50:	699a      	ldr	r2, [r3, #24]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	691b      	ldr	r3, [r3, #16]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d106      	bne.n	8013e68 <ip_reass_remove_oldest_datagram+0x4c>
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5c:	899a      	ldrh	r2, [r3, #12]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	889b      	ldrh	r3, [r3, #4]
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d014      	beq.n	8013e92 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013e6e:	6a3b      	ldr	r3, [r7, #32]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d104      	bne.n	8013e7e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e76:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	61bb      	str	r3, [r7, #24]
 8013e7c:	e009      	b.n	8013e92 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	7fda      	ldrb	r2, [r3, #31]
 8013e82:	6a3b      	ldr	r3, [r7, #32]
 8013e84:	7fdb      	ldrb	r3, [r3, #31]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d803      	bhi.n	8013e92 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d001      	beq.n	8013e9e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1cb      	bne.n	8013e42 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d008      	beq.n	8013ec2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013eb0:	69b9      	ldr	r1, [r7, #24]
 8013eb2:	6a38      	ldr	r0, [r7, #32]
 8013eb4:	f7ff ff0e 	bl	8013cd4 <ip_reass_free_complete_datagram>
 8013eb8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	4413      	add	r3, r2
 8013ec0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013ec2:	697a      	ldr	r2, [r7, #20]
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	da02      	bge.n	8013ed0 <ip_reass_remove_oldest_datagram+0xb4>
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	dcac      	bgt.n	8013e2a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013ed0:	697b      	ldr	r3, [r7, #20]
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3728      	adds	r7, #40	; 0x28
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	2000d544 	.word	0x2000d544

08013ee0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013eea:	2004      	movs	r0, #4
 8013eec:	f7f5 fba0 	bl	8009630 <memp_malloc>
 8013ef0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d110      	bne.n	8013f1a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013ef8:	6839      	ldr	r1, [r7, #0]
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f7ff ff8e 	bl	8013e1c <ip_reass_remove_oldest_datagram>
 8013f00:	4602      	mov	r2, r0
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	4293      	cmp	r3, r2
 8013f06:	dc03      	bgt.n	8013f10 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013f08:	2004      	movs	r0, #4
 8013f0a:	f7f5 fb91 	bl	8009630 <memp_malloc>
 8013f0e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d101      	bne.n	8013f1a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013f16:	2300      	movs	r3, #0
 8013f18:	e016      	b.n	8013f48 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013f1a:	2220      	movs	r2, #32
 8013f1c:	2100      	movs	r1, #0
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	f001 f817 	bl	8014f52 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	220f      	movs	r2, #15
 8013f28:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013f2a:	4b09      	ldr	r3, [pc, #36]	; (8013f50 <ip_reass_enqueue_new_datagram+0x70>)
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013f32:	4a07      	ldr	r2, [pc, #28]	; (8013f50 <ip_reass_enqueue_new_datagram+0x70>)
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	3308      	adds	r3, #8
 8013f3c:	2214      	movs	r2, #20
 8013f3e:	6879      	ldr	r1, [r7, #4]
 8013f40:	4618      	mov	r0, r3
 8013f42:	f001 f8d2 	bl	80150ea <memcpy>
  return ipr;
 8013f46:	68fb      	ldr	r3, [r7, #12]
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3710      	adds	r7, #16
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	2000d544 	.word	0x2000d544

08013f54 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013f5e:	4b10      	ldr	r3, [pc, #64]	; (8013fa0 <ip_reass_dequeue_datagram+0x4c>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d104      	bne.n	8013f72 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a0c      	ldr	r2, [pc, #48]	; (8013fa0 <ip_reass_dequeue_datagram+0x4c>)
 8013f6e:	6013      	str	r3, [r2, #0]
 8013f70:	e00d      	b.n	8013f8e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <ip_reass_dequeue_datagram+0x32>
 8013f78:	4b0a      	ldr	r3, [pc, #40]	; (8013fa4 <ip_reass_dequeue_datagram+0x50>)
 8013f7a:	f240 1245 	movw	r2, #325	; 0x145
 8013f7e:	490a      	ldr	r1, [pc, #40]	; (8013fa8 <ip_reass_dequeue_datagram+0x54>)
 8013f80:	480a      	ldr	r0, [pc, #40]	; (8013fac <ip_reass_dequeue_datagram+0x58>)
 8013f82:	f000 ff81 	bl	8014e88 <iprintf>
    prev->next = ipr->next;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013f8e:	6879      	ldr	r1, [r7, #4]
 8013f90:	2004      	movs	r0, #4
 8013f92:	f7f5 fbc3 	bl	800971c <memp_free>
}
 8013f96:	bf00      	nop
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	2000d544 	.word	0x2000d544
 8013fa4:	08018964 	.word	0x08018964
 8013fa8:	08018a2c 	.word	0x08018a2c
 8013fac:	080189ac 	.word	0x080189ac

08013fb0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b08c      	sub	sp, #48	; 0x30
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013fca:	69fb      	ldr	r3, [r7, #28]
 8013fcc:	885b      	ldrh	r3, [r3, #2]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7f4 fe55 	bl	8008c80 <lwip_htons>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	f003 030f 	and.w	r3, r3, #15
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013fe8:	7e7b      	ldrb	r3, [r7, #25]
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	8b7a      	ldrh	r2, [r7, #26]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d202      	bcs.n	8013ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff6:	e135      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013ff8:	7e7b      	ldrb	r3, [r7, #25]
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	8b7a      	ldrh	r2, [r7, #26]
 8013ffe:	1ad3      	subs	r3, r2, r3
 8014000:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014002:	69fb      	ldr	r3, [r7, #28]
 8014004:	88db      	ldrh	r3, [r3, #6]
 8014006:	b29b      	uxth	r3, r3
 8014008:	4618      	mov	r0, r3
 801400a:	f7f4 fe39 	bl	8008c80 <lwip_htons>
 801400e:	4603      	mov	r3, r0
 8014010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014014:	b29b      	uxth	r3, r3
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014022:	2200      	movs	r2, #0
 8014024:	701a      	strb	r2, [r3, #0]
 8014026:	2200      	movs	r2, #0
 8014028:	705a      	strb	r2, [r3, #1]
 801402a:	2200      	movs	r2, #0
 801402c:	709a      	strb	r2, [r3, #2]
 801402e:	2200      	movs	r2, #0
 8014030:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014034:	8afa      	ldrh	r2, [r7, #22]
 8014036:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014038:	8afa      	ldrh	r2, [r7, #22]
 801403a:	8b7b      	ldrh	r3, [r7, #26]
 801403c:	4413      	add	r3, r2
 801403e:	b29a      	uxth	r2, r3
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014046:	88db      	ldrh	r3, [r3, #6]
 8014048:	b29b      	uxth	r3, r3
 801404a:	8afa      	ldrh	r2, [r7, #22]
 801404c:	429a      	cmp	r2, r3
 801404e:	d902      	bls.n	8014056 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014050:	f04f 33ff 	mov.w	r3, #4294967295
 8014054:	e106      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	627b      	str	r3, [r7, #36]	; 0x24
 801405c:	e068      	b.n	8014130 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014066:	889b      	ldrh	r3, [r3, #4]
 8014068:	b29a      	uxth	r2, r3
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	889b      	ldrh	r3, [r3, #4]
 801406e:	b29b      	uxth	r3, r3
 8014070:	429a      	cmp	r2, r3
 8014072:	d235      	bcs.n	80140e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014078:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407c:	2b00      	cmp	r3, #0
 801407e:	d020      	beq.n	80140c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	889b      	ldrh	r3, [r3, #4]
 8014084:	b29a      	uxth	r2, r3
 8014086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014088:	88db      	ldrh	r3, [r3, #6]
 801408a:	b29b      	uxth	r3, r3
 801408c:	429a      	cmp	r2, r3
 801408e:	d307      	bcc.n	80140a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	88db      	ldrh	r3, [r3, #6]
 8014094:	b29a      	uxth	r2, r3
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	889b      	ldrh	r3, [r3, #4]
 801409a:	b29b      	uxth	r3, r3
 801409c:	429a      	cmp	r2, r3
 801409e:	d902      	bls.n	80140a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140a0:	f04f 33ff 	mov.w	r3, #4294967295
 80140a4:	e0de      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80140a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a8:	68ba      	ldr	r2, [r7, #8]
 80140aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	88db      	ldrh	r3, [r3, #6]
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b4:	889b      	ldrh	r3, [r3, #4]
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d03d      	beq.n	8014138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80140bc:	2300      	movs	r3, #0
 80140be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80140c0:	e03a      	b.n	8014138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80140c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c4:	88db      	ldrh	r3, [r3, #6]
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	889b      	ldrh	r3, [r3, #4]
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d902      	bls.n	80140d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140d2:	f04f 33ff 	mov.w	r3, #4294967295
 80140d6:	e0c5      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	68ba      	ldr	r2, [r7, #8]
 80140dc:	605a      	str	r2, [r3, #4]
      break;
 80140de:	e02b      	b.n	8014138 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	889b      	ldrh	r3, [r3, #4]
 80140e4:	b29a      	uxth	r2, r3
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	889b      	ldrh	r3, [r3, #4]
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d102      	bne.n	80140f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80140f0:	f04f 33ff 	mov.w	r3, #4294967295
 80140f4:	e0b6      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80140f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f8:	889b      	ldrh	r3, [r3, #4]
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	88db      	ldrh	r3, [r3, #6]
 8014100:	b29b      	uxth	r3, r3
 8014102:	429a      	cmp	r2, r3
 8014104:	d202      	bcs.n	801410c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014106:	f04f 33ff 	mov.w	r3, #4294967295
 801410a:	e0ab      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410e:	2b00      	cmp	r3, #0
 8014110:	d009      	beq.n	8014126 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014114:	88db      	ldrh	r3, [r3, #6]
 8014116:	b29a      	uxth	r2, r3
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	889b      	ldrh	r3, [r3, #4]
 801411c:	b29b      	uxth	r3, r3
 801411e:	429a      	cmp	r2, r3
 8014120:	d001      	beq.n	8014126 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014122:	2300      	movs	r3, #0
 8014124:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	2b00      	cmp	r3, #0
 8014134:	d193      	bne.n	801405e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014136:	e000      	b.n	801413a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014138:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	2b00      	cmp	r3, #0
 801413e:	d12d      	bne.n	801419c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014142:	2b00      	cmp	r3, #0
 8014144:	d01c      	beq.n	8014180 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014148:	88db      	ldrh	r3, [r3, #6]
 801414a:	b29a      	uxth	r2, r3
 801414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414e:	889b      	ldrh	r3, [r3, #4]
 8014150:	b29b      	uxth	r3, r3
 8014152:	429a      	cmp	r2, r3
 8014154:	d906      	bls.n	8014164 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014156:	4b45      	ldr	r3, [pc, #276]	; (801426c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014158:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801415c:	4944      	ldr	r1, [pc, #272]	; (8014270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801415e:	4845      	ldr	r0, [pc, #276]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014160:	f000 fe92 	bl	8014e88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014166:	68ba      	ldr	r2, [r7, #8]
 8014168:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416c:	88db      	ldrh	r3, [r3, #6]
 801416e:	b29a      	uxth	r2, r3
 8014170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014172:	889b      	ldrh	r3, [r3, #4]
 8014174:	b29b      	uxth	r3, r3
 8014176:	429a      	cmp	r2, r3
 8014178:	d010      	beq.n	801419c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801417a:	2300      	movs	r3, #0
 801417c:	623b      	str	r3, [r7, #32]
 801417e:	e00d      	b.n	801419c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d006      	beq.n	8014196 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014188:	4b38      	ldr	r3, [pc, #224]	; (801426c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801418a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801418e:	493a      	ldr	r1, [pc, #232]	; (8014278 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014190:	4838      	ldr	r0, [pc, #224]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014192:	f000 fe79 	bl	8014e88 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d105      	bne.n	80141ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	7f9b      	ldrb	r3, [r3, #30]
 80141a6:	f003 0301 	and.w	r3, r3, #1
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d059      	beq.n	8014262 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80141ae:	6a3b      	ldr	r3, [r7, #32]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d04f      	beq.n	8014254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d006      	beq.n	80141ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	889b      	ldrh	r3, [r3, #4]
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d002      	beq.n	80141d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80141ca:	2300      	movs	r3, #0
 80141cc:	623b      	str	r3, [r7, #32]
 80141ce:	e041      	b.n	8014254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80141d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80141da:	e012      	b.n	8014202 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80141e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e4:	88db      	ldrh	r3, [r3, #6]
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ea:	889b      	ldrh	r3, [r3, #4]
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d002      	beq.n	80141f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80141f2:	2300      	movs	r3, #0
 80141f4:	623b      	str	r3, [r7, #32]
            break;
 80141f6:	e007      	b.n	8014208 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80141f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80141fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014204:	2b00      	cmp	r3, #0
 8014206:	d1e9      	bne.n	80141dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014208:	6a3b      	ldr	r3, [r7, #32]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d022      	beq.n	8014254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d106      	bne.n	8014224 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014216:	4b15      	ldr	r3, [pc, #84]	; (801426c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014218:	f240 12df 	movw	r2, #479	; 0x1df
 801421c:	4917      	ldr	r1, [pc, #92]	; (801427c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801421e:	4815      	ldr	r0, [pc, #84]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014220:	f000 fe32 	bl	8014e88 <iprintf>
          LWIP_ASSERT("sanity check",
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801422c:	429a      	cmp	r2, r3
 801422e:	d106      	bne.n	801423e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014230:	4b0e      	ldr	r3, [pc, #56]	; (801426c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014232:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014236:	4911      	ldr	r1, [pc, #68]	; (801427c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014238:	480e      	ldr	r0, [pc, #56]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801423a:	f000 fe25 	bl	8014e88 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d006      	beq.n	8014254 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014246:	4b09      	ldr	r3, [pc, #36]	; (801426c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014248:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801424c:	490c      	ldr	r1, [pc, #48]	; (8014280 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801424e:	4809      	ldr	r0, [pc, #36]	; (8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014250:	f000 fe1a 	bl	8014e88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014254:	6a3b      	ldr	r3, [r7, #32]
 8014256:	2b00      	cmp	r3, #0
 8014258:	bf14      	ite	ne
 801425a:	2301      	movne	r3, #1
 801425c:	2300      	moveq	r3, #0
 801425e:	b2db      	uxtb	r3, r3
 8014260:	e000      	b.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014262:	2300      	movs	r3, #0
}
 8014264:	4618      	mov	r0, r3
 8014266:	3730      	adds	r7, #48	; 0x30
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08018964 	.word	0x08018964
 8014270:	08018a48 	.word	0x08018a48
 8014274:	080189ac 	.word	0x080189ac
 8014278:	08018a68 	.word	0x08018a68
 801427c:	08018aa0 	.word	0x08018aa0
 8014280:	08018ab0 	.word	0x08018ab0

08014284 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b08e      	sub	sp, #56	; 0x38
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	f003 030f 	and.w	r3, r3, #15
 801429a:	b2db      	uxtb	r3, r3
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	2b14      	cmp	r3, #20
 80142a2:	f040 8171 	bne.w	8014588 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	88db      	ldrh	r3, [r3, #6]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7f4 fce7 	bl	8008c80 <lwip_htons>
 80142b2:	4603      	mov	r3, r0
 80142b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	00db      	lsls	r3, r3, #3
 80142bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	885b      	ldrh	r3, [r3, #2]
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7f4 fcdb 	bl	8008c80 <lwip_htons>
 80142ca:	4603      	mov	r3, r0
 80142cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80142ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	f003 030f 	and.w	r3, r3, #15
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80142de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142e6:	429a      	cmp	r2, r3
 80142e8:	f0c0 8150 	bcc.w	801458c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80142ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7f6 f8e5 	bl	800a4c8 <pbuf_clen>
 80142fe:	4603      	mov	r3, r0
 8014300:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014302:	4b8c      	ldr	r3, [pc, #560]	; (8014534 <ip4_reass+0x2b0>)
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	461a      	mov	r2, r3
 8014308:	8c3b      	ldrh	r3, [r7, #32]
 801430a:	4413      	add	r3, r2
 801430c:	2b0a      	cmp	r3, #10
 801430e:	dd10      	ble.n	8014332 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014310:	8c3b      	ldrh	r3, [r7, #32]
 8014312:	4619      	mov	r1, r3
 8014314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014316:	f7ff fd81 	bl	8013e1c <ip_reass_remove_oldest_datagram>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	f000 8137 	beq.w	8014590 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014322:	4b84      	ldr	r3, [pc, #528]	; (8014534 <ip4_reass+0x2b0>)
 8014324:	881b      	ldrh	r3, [r3, #0]
 8014326:	461a      	mov	r2, r3
 8014328:	8c3b      	ldrh	r3, [r7, #32]
 801432a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801432c:	2b0a      	cmp	r3, #10
 801432e:	f300 812f 	bgt.w	8014590 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014332:	4b81      	ldr	r3, [pc, #516]	; (8014538 <ip4_reass+0x2b4>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	633b      	str	r3, [r7, #48]	; 0x30
 8014338:	e015      	b.n	8014366 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	695a      	ldr	r2, [r3, #20]
 801433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	429a      	cmp	r2, r3
 8014344:	d10c      	bne.n	8014360 <ip4_reass+0xdc>
 8014346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014348:	699a      	ldr	r2, [r3, #24]
 801434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434c:	691b      	ldr	r3, [r3, #16]
 801434e:	429a      	cmp	r2, r3
 8014350:	d106      	bne.n	8014360 <ip4_reass+0xdc>
 8014352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014354:	899a      	ldrh	r2, [r3, #12]
 8014356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014358:	889b      	ldrh	r3, [r3, #4]
 801435a:	b29b      	uxth	r3, r3
 801435c:	429a      	cmp	r2, r3
 801435e:	d006      	beq.n	801436e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	633b      	str	r3, [r7, #48]	; 0x30
 8014366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1e6      	bne.n	801433a <ip4_reass+0xb6>
 801436c:	e000      	b.n	8014370 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801436e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014372:	2b00      	cmp	r3, #0
 8014374:	d109      	bne.n	801438a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014376:	8c3b      	ldrh	r3, [r7, #32]
 8014378:	4619      	mov	r1, r3
 801437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801437c:	f7ff fdb0 	bl	8013ee0 <ip_reass_enqueue_new_datagram>
 8014380:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014384:	2b00      	cmp	r3, #0
 8014386:	d11c      	bne.n	80143c2 <ip4_reass+0x13e>
      goto nullreturn;
 8014388:	e105      	b.n	8014596 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438c:	88db      	ldrh	r3, [r3, #6]
 801438e:	b29b      	uxth	r3, r3
 8014390:	4618      	mov	r0, r3
 8014392:	f7f4 fc75 	bl	8008c80 <lwip_htons>
 8014396:	4603      	mov	r3, r0
 8014398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801439c:	2b00      	cmp	r3, #0
 801439e:	d110      	bne.n	80143c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80143a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a2:	89db      	ldrh	r3, [r3, #14]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7f4 fc6b 	bl	8008c80 <lwip_htons>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d006      	beq.n	80143c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80143b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b6:	3308      	adds	r3, #8
 80143b8:	2214      	movs	r2, #20
 80143ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143bc:	4618      	mov	r0, r3
 80143be:	f000 fe94 	bl	80150ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80143c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c4:	88db      	ldrh	r3, [r3, #6]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	f003 0320 	and.w	r3, r3, #32
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	bf0c      	ite	eq
 80143d0:	2301      	moveq	r3, #1
 80143d2:	2300      	movne	r3, #0
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00e      	beq.n	80143fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80143de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80143e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143e2:	4413      	add	r3, r2
 80143e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80143e6:	8b7a      	ldrh	r2, [r7, #26]
 80143e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143ea:	429a      	cmp	r2, r3
 80143ec:	f0c0 80a0 	bcc.w	8014530 <ip4_reass+0x2ac>
 80143f0:	8b7b      	ldrh	r3, [r7, #26]
 80143f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80143f6:	4293      	cmp	r3, r2
 80143f8:	f200 809a 	bhi.w	8014530 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80143fc:	69fa      	ldr	r2, [r7, #28]
 80143fe:	6879      	ldr	r1, [r7, #4]
 8014400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014402:	f7ff fdd5 	bl	8013fb0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014406:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440e:	f000 809b 	beq.w	8014548 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014412:	4b48      	ldr	r3, [pc, #288]	; (8014534 <ip4_reass+0x2b0>)
 8014414:	881a      	ldrh	r2, [r3, #0]
 8014416:	8c3b      	ldrh	r3, [r7, #32]
 8014418:	4413      	add	r3, r2
 801441a:	b29a      	uxth	r2, r3
 801441c:	4b45      	ldr	r3, [pc, #276]	; (8014534 <ip4_reass+0x2b0>)
 801441e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d00d      	beq.n	8014442 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801442a:	4413      	add	r3, r2
 801442c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014430:	8a7a      	ldrh	r2, [r7, #18]
 8014432:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014436:	7f9b      	ldrb	r3, [r3, #30]
 8014438:	f043 0301 	orr.w	r3, r3, #1
 801443c:	b2da      	uxtb	r2, r3
 801443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014440:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	2b01      	cmp	r3, #1
 8014446:	d171      	bne.n	801452c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444a:	8b9b      	ldrh	r3, [r3, #28]
 801444c:	3314      	adds	r3, #20
 801444e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	3308      	adds	r3, #8
 8014466:	2214      	movs	r2, #20
 8014468:	4619      	mov	r1, r3
 801446a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801446c:	f000 fe3d 	bl	80150ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014470:	8a3b      	ldrh	r3, [r7, #16]
 8014472:	4618      	mov	r0, r3
 8014474:	f7f4 fc04 	bl	8008c80 <lwip_htons>
 8014478:	4603      	mov	r3, r0
 801447a:	461a      	mov	r2, r3
 801447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	2200      	movs	r2, #0
 8014484:	719a      	strb	r2, [r3, #6]
 8014486:	2200      	movs	r2, #0
 8014488:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448c:	2200      	movs	r2, #0
 801448e:	729a      	strb	r2, [r3, #10]
 8014490:	2200      	movs	r2, #0
 8014492:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801449a:	e00d      	b.n	80144b8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80144a2:	2114      	movs	r1, #20
 80144a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80144a6:	f7f5 fefb 	bl	800a2a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80144aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7f6 f84b 	bl	800a548 <pbuf_cat>
      r = iprh->next_pbuf;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80144b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d1ee      	bne.n	801449c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80144be:	4b1e      	ldr	r3, [pc, #120]	; (8014538 <ip4_reass+0x2b4>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d102      	bne.n	80144ce <ip4_reass+0x24a>
      ipr_prev = NULL;
 80144c8:	2300      	movs	r3, #0
 80144ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144cc:	e010      	b.n	80144f0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80144ce:	4b1a      	ldr	r3, [pc, #104]	; (8014538 <ip4_reass+0x2b4>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144d4:	e007      	b.n	80144e6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80144d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144dc:	429a      	cmp	r2, r3
 80144de:	d006      	beq.n	80144ee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80144e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1f4      	bne.n	80144d6 <ip4_reass+0x252>
 80144ec:	e000      	b.n	80144f0 <ip4_reass+0x26c>
          break;
 80144ee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80144f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144f4:	f7ff fd2e 	bl	8013f54 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7f5 ffe5 	bl	800a4c8 <pbuf_clen>
 80144fe:	4603      	mov	r3, r0
 8014500:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014502:	4b0c      	ldr	r3, [pc, #48]	; (8014534 <ip4_reass+0x2b0>)
 8014504:	881b      	ldrh	r3, [r3, #0]
 8014506:	8c3a      	ldrh	r2, [r7, #32]
 8014508:	429a      	cmp	r2, r3
 801450a:	d906      	bls.n	801451a <ip4_reass+0x296>
 801450c:	4b0b      	ldr	r3, [pc, #44]	; (801453c <ip4_reass+0x2b8>)
 801450e:	f240 229b 	movw	r2, #667	; 0x29b
 8014512:	490b      	ldr	r1, [pc, #44]	; (8014540 <ip4_reass+0x2bc>)
 8014514:	480b      	ldr	r0, [pc, #44]	; (8014544 <ip4_reass+0x2c0>)
 8014516:	f000 fcb7 	bl	8014e88 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801451a:	4b06      	ldr	r3, [pc, #24]	; (8014534 <ip4_reass+0x2b0>)
 801451c:	881a      	ldrh	r2, [r3, #0]
 801451e:	8c3b      	ldrh	r3, [r7, #32]
 8014520:	1ad3      	subs	r3, r2, r3
 8014522:	b29a      	uxth	r2, r3
 8014524:	4b03      	ldr	r3, [pc, #12]	; (8014534 <ip4_reass+0x2b0>)
 8014526:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	e038      	b.n	801459e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801452c:	2300      	movs	r3, #0
 801452e:	e036      	b.n	801459e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014530:	bf00      	nop
 8014532:	e00a      	b.n	801454a <ip4_reass+0x2c6>
 8014534:	2000d548 	.word	0x2000d548
 8014538:	2000d544 	.word	0x2000d544
 801453c:	08018964 	.word	0x08018964
 8014540:	08018ad4 	.word	0x08018ad4
 8014544:	080189ac 	.word	0x080189ac
    goto nullreturn_ipr;
 8014548:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454c:	2b00      	cmp	r3, #0
 801454e:	d106      	bne.n	801455e <ip4_reass+0x2da>
 8014550:	4b15      	ldr	r3, [pc, #84]	; (80145a8 <ip4_reass+0x324>)
 8014552:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014556:	4915      	ldr	r1, [pc, #84]	; (80145ac <ip4_reass+0x328>)
 8014558:	4815      	ldr	r0, [pc, #84]	; (80145b0 <ip4_reass+0x32c>)
 801455a:	f000 fc95 	bl	8014e88 <iprintf>
  if (ipr->p == NULL) {
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d116      	bne.n	8014594 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014566:	4b13      	ldr	r3, [pc, #76]	; (80145b4 <ip4_reass+0x330>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801456c:	429a      	cmp	r2, r3
 801456e:	d006      	beq.n	801457e <ip4_reass+0x2fa>
 8014570:	4b0d      	ldr	r3, [pc, #52]	; (80145a8 <ip4_reass+0x324>)
 8014572:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014576:	4910      	ldr	r1, [pc, #64]	; (80145b8 <ip4_reass+0x334>)
 8014578:	480d      	ldr	r0, [pc, #52]	; (80145b0 <ip4_reass+0x32c>)
 801457a:	f000 fc85 	bl	8014e88 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801457e:	2100      	movs	r1, #0
 8014580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014582:	f7ff fce7 	bl	8013f54 <ip_reass_dequeue_datagram>
 8014586:	e006      	b.n	8014596 <ip4_reass+0x312>
    goto nullreturn;
 8014588:	bf00      	nop
 801458a:	e004      	b.n	8014596 <ip4_reass+0x312>
    goto nullreturn;
 801458c:	bf00      	nop
 801458e:	e002      	b.n	8014596 <ip4_reass+0x312>
      goto nullreturn;
 8014590:	bf00      	nop
 8014592:	e000      	b.n	8014596 <ip4_reass+0x312>
  }

nullreturn:
 8014594:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f7f5 ff08 	bl	800a3ac <pbuf_free>
  return NULL;
 801459c:	2300      	movs	r3, #0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3738      	adds	r7, #56	; 0x38
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	08018964 	.word	0x08018964
 80145ac:	08018af0 	.word	0x08018af0
 80145b0:	080189ac 	.word	0x080189ac
 80145b4:	2000d544 	.word	0x2000d544
 80145b8:	08018afc 	.word	0x08018afc

080145bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80145c0:	2005      	movs	r0, #5
 80145c2:	f7f5 f835 	bl	8009630 <memp_malloc>
 80145c6:	4603      	mov	r3, r0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	bd80      	pop	{r7, pc}

080145cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d106      	bne.n	80145e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80145da:	4b07      	ldr	r3, [pc, #28]	; (80145f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80145dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80145e0:	4906      	ldr	r1, [pc, #24]	; (80145fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80145e2:	4807      	ldr	r0, [pc, #28]	; (8014600 <ip_frag_free_pbuf_custom_ref+0x34>)
 80145e4:	f000 fc50 	bl	8014e88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80145e8:	6879      	ldr	r1, [r7, #4]
 80145ea:	2005      	movs	r0, #5
 80145ec:	f7f5 f896 	bl	800971c <memp_free>
}
 80145f0:	bf00      	nop
 80145f2:	3708      	adds	r7, #8
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	08018964 	.word	0x08018964
 80145fc:	08018b1c 	.word	0x08018b1c
 8014600:	080189ac 	.word	0x080189ac

08014604 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <ipfrag_free_pbuf_custom+0x20>
 8014616:	4b11      	ldr	r3, [pc, #68]	; (801465c <ipfrag_free_pbuf_custom+0x58>)
 8014618:	f240 22ce 	movw	r2, #718	; 0x2ce
 801461c:	4910      	ldr	r1, [pc, #64]	; (8014660 <ipfrag_free_pbuf_custom+0x5c>)
 801461e:	4811      	ldr	r0, [pc, #68]	; (8014664 <ipfrag_free_pbuf_custom+0x60>)
 8014620:	f000 fc32 	bl	8014e88 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014624:	68fa      	ldr	r2, [r7, #12]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	429a      	cmp	r2, r3
 801462a:	d006      	beq.n	801463a <ipfrag_free_pbuf_custom+0x36>
 801462c:	4b0b      	ldr	r3, [pc, #44]	; (801465c <ipfrag_free_pbuf_custom+0x58>)
 801462e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014632:	490d      	ldr	r1, [pc, #52]	; (8014668 <ipfrag_free_pbuf_custom+0x64>)
 8014634:	480b      	ldr	r0, [pc, #44]	; (8014664 <ipfrag_free_pbuf_custom+0x60>)
 8014636:	f000 fc27 	bl	8014e88 <iprintf>
  if (pcr->original != NULL) {
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	695b      	ldr	r3, [r3, #20]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d004      	beq.n	801464c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	695b      	ldr	r3, [r3, #20]
 8014646:	4618      	mov	r0, r3
 8014648:	f7f5 feb0 	bl	800a3ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f7ff ffbd 	bl	80145cc <ip_frag_free_pbuf_custom_ref>
}
 8014652:	bf00      	nop
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	08018964 	.word	0x08018964
 8014660:	08018b28 	.word	0x08018b28
 8014664:	080189ac 	.word	0x080189ac
 8014668:	08018b34 	.word	0x08018b34

0801466c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b094      	sub	sp, #80	; 0x50
 8014670:	af02      	add	r7, sp, #8
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	60b9      	str	r1, [r7, #8]
 8014676:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014678:	2300      	movs	r3, #0
 801467a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014682:	3b14      	subs	r3, #20
 8014684:	2b00      	cmp	r3, #0
 8014686:	da00      	bge.n	801468a <ip4_frag+0x1e>
 8014688:	3307      	adds	r3, #7
 801468a:	10db      	asrs	r3, r3, #3
 801468c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801468e:	2314      	movs	r3, #20
 8014690:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801469a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	f003 030f 	and.w	r3, r3, #15
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2b14      	cmp	r3, #20
 80146ac:	d002      	beq.n	80146b4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80146ae:	f06f 0305 	mvn.w	r3, #5
 80146b2:	e110      	b.n	80148d6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	895b      	ldrh	r3, [r3, #10]
 80146b8:	2b13      	cmp	r3, #19
 80146ba:	d809      	bhi.n	80146d0 <ip4_frag+0x64>
 80146bc:	4b88      	ldr	r3, [pc, #544]	; (80148e0 <ip4_frag+0x274>)
 80146be:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80146c2:	4988      	ldr	r1, [pc, #544]	; (80148e4 <ip4_frag+0x278>)
 80146c4:	4888      	ldr	r0, [pc, #544]	; (80148e8 <ip4_frag+0x27c>)
 80146c6:	f000 fbdf 	bl	8014e88 <iprintf>
 80146ca:	f06f 0305 	mvn.w	r3, #5
 80146ce:	e102      	b.n	80148d6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80146d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d2:	88db      	ldrh	r3, [r3, #6]
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7f4 fad2 	bl	8008c80 <lwip_htons>
 80146dc:	4603      	mov	r3, r0
 80146de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80146e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80146e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80146ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80146ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80146f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	891b      	ldrh	r3, [r3, #8]
 80146f6:	3b14      	subs	r3, #20
 80146f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80146fc:	e0e1      	b.n	80148c2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80146fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	b29b      	uxth	r3, r3
 8014704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014708:	4293      	cmp	r3, r2
 801470a:	bf28      	it	cs
 801470c:	4613      	movcs	r3, r2
 801470e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014710:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014714:	2114      	movs	r1, #20
 8014716:	200e      	movs	r0, #14
 8014718:	f7f5 fb64 	bl	8009de4 <pbuf_alloc>
 801471c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014720:	2b00      	cmp	r3, #0
 8014722:	f000 80d5 	beq.w	80148d0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	895b      	ldrh	r3, [r3, #10]
 801472a:	2b13      	cmp	r3, #19
 801472c:	d806      	bhi.n	801473c <ip4_frag+0xd0>
 801472e:	4b6c      	ldr	r3, [pc, #432]	; (80148e0 <ip4_frag+0x274>)
 8014730:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014734:	496d      	ldr	r1, [pc, #436]	; (80148ec <ip4_frag+0x280>)
 8014736:	486c      	ldr	r0, [pc, #432]	; (80148e8 <ip4_frag+0x27c>)
 8014738:	f000 fba6 	bl	8014e88 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	2214      	movs	r2, #20
 8014742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014744:	4618      	mov	r0, r3
 8014746:	f000 fcd0 	bl	80150ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014752:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014756:	e064      	b.n	8014822 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	895a      	ldrh	r2, [r3, #10]
 801475c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	895b      	ldrh	r3, [r3, #10]
 8014766:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014768:	429a      	cmp	r2, r3
 801476a:	d906      	bls.n	801477a <ip4_frag+0x10e>
 801476c:	4b5c      	ldr	r3, [pc, #368]	; (80148e0 <ip4_frag+0x274>)
 801476e:	f240 322d 	movw	r2, #813	; 0x32d
 8014772:	495f      	ldr	r1, [pc, #380]	; (80148f0 <ip4_frag+0x284>)
 8014774:	485c      	ldr	r0, [pc, #368]	; (80148e8 <ip4_frag+0x27c>)
 8014776:	f000 fb87 	bl	8014e88 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801477a:	8bfa      	ldrh	r2, [r7, #30]
 801477c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014780:	4293      	cmp	r3, r2
 8014782:	bf28      	it	cs
 8014784:	4613      	movcs	r3, r2
 8014786:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801478a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801478e:	2b00      	cmp	r3, #0
 8014790:	d105      	bne.n	801479e <ip4_frag+0x132>
        poff = 0;
 8014792:	2300      	movs	r3, #0
 8014794:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	60fb      	str	r3, [r7, #12]
        continue;
 801479c:	e041      	b.n	8014822 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801479e:	f7ff ff0d 	bl	80145bc <ip_frag_alloc_pbuf_custom_ref>
 80147a2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d103      	bne.n	80147b2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80147aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147ac:	f7f5 fdfe 	bl	800a3ac <pbuf_free>
        goto memerr;
 80147b0:	e08f      	b.n	80148d2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80147b2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80147b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80147ba:	4413      	add	r3, r2
 80147bc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80147c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80147c4:	9201      	str	r2, [sp, #4]
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	4603      	mov	r3, r0
 80147ca:	2241      	movs	r2, #65	; 0x41
 80147cc:	2000      	movs	r0, #0
 80147ce:	f7f5 fc33 	bl	800a038 <pbuf_alloced_custom>
 80147d2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d106      	bne.n	80147e8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80147da:	69b8      	ldr	r0, [r7, #24]
 80147dc:	f7ff fef6 	bl	80145cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80147e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147e2:	f7f5 fde3 	bl	800a3ac <pbuf_free>
        goto memerr;
 80147e6:	e074      	b.n	80148d2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80147e8:	68f8      	ldr	r0, [r7, #12]
 80147ea:	f7f5 fe85 	bl	800a4f8 <pbuf_ref>
      pcr->original = p;
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	68fa      	ldr	r2, [r7, #12]
 80147f2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80147f4:	69bb      	ldr	r3, [r7, #24]
 80147f6:	4a3f      	ldr	r2, [pc, #252]	; (80148f4 <ip4_frag+0x288>)
 80147f8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80147fa:	6979      	ldr	r1, [r7, #20]
 80147fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147fe:	f7f5 fea3 	bl	800a548 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014802:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801480a:	1ad3      	subs	r3, r2, r3
 801480c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014810:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014814:	2b00      	cmp	r3, #0
 8014816:	d004      	beq.n	8014822 <ip4_frag+0x1b6>
        poff = 0;
 8014818:	2300      	movs	r3, #0
 801481a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014822:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014826:	2b00      	cmp	r3, #0
 8014828:	d196      	bne.n	8014758 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801482a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801482c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014830:	4413      	add	r3, r2
 8014832:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014838:	f1a3 0213 	sub.w	r2, r3, #19
 801483c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014840:	429a      	cmp	r2, r3
 8014842:	bfcc      	ite	gt
 8014844:	2301      	movgt	r3, #1
 8014846:	2300      	movle	r3, #0
 8014848:	b2db      	uxtb	r3, r3
 801484a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801484c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014854:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014856:	6a3b      	ldr	r3, [r7, #32]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d002      	beq.n	8014862 <ip4_frag+0x1f6>
 801485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485e:	2b00      	cmp	r3, #0
 8014860:	d003      	beq.n	801486a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014868:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801486a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801486c:	4618      	mov	r0, r3
 801486e:	f7f4 fa07 	bl	8008c80 <lwip_htons>
 8014872:	4603      	mov	r3, r0
 8014874:	461a      	mov	r2, r3
 8014876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014878:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801487a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801487c:	3314      	adds	r3, #20
 801487e:	b29b      	uxth	r3, r3
 8014880:	4618      	mov	r0, r3
 8014882:	f7f4 f9fd 	bl	8008c80 <lwip_htons>
 8014886:	4603      	mov	r3, r0
 8014888:	461a      	mov	r2, r3
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014890:	2200      	movs	r2, #0
 8014892:	729a      	strb	r2, [r3, #10]
 8014894:	2200      	movs	r2, #0
 8014896:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	695b      	ldr	r3, [r3, #20]
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80148a0:	68b8      	ldr	r0, [r7, #8]
 80148a2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80148a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148a6:	f7f5 fd81 	bl	800a3ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 80148aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80148b0:	1ad3      	subs	r3, r2, r3
 80148b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80148b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80148ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80148bc:	4413      	add	r3, r2
 80148be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80148c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f47f af19 	bne.w	80146fe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80148cc:	2300      	movs	r3, #0
 80148ce:	e002      	b.n	80148d6 <ip4_frag+0x26a>
      goto memerr;
 80148d0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80148d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80148d6:	4618      	mov	r0, r3
 80148d8:	3748      	adds	r7, #72	; 0x48
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	08018964 	.word	0x08018964
 80148e4:	08018b40 	.word	0x08018b40
 80148e8:	080189ac 	.word	0x080189ac
 80148ec:	08018b5c 	.word	0x08018b5c
 80148f0:	08018b7c 	.word	0x08018b7c
 80148f4:	08014605 	.word	0x08014605

080148f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b086      	sub	sp, #24
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014902:	230e      	movs	r3, #14
 8014904:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	895b      	ldrh	r3, [r3, #10]
 801490a:	2b0e      	cmp	r3, #14
 801490c:	d96e      	bls.n	80149ec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	7bdb      	ldrb	r3, [r3, #15]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801491c:	3301      	adds	r3, #1
 801491e:	b2da      	uxtb	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	7b1a      	ldrb	r2, [r3, #12]
 801492e:	7b5b      	ldrb	r3, [r3, #13]
 8014930:	021b      	lsls	r3, r3, #8
 8014932:	4313      	orrs	r3, r2
 8014934:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	f003 0301 	and.w	r3, r3, #1
 801493e:	2b00      	cmp	r3, #0
 8014940:	d023      	beq.n	801498a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	2b01      	cmp	r3, #1
 8014948:	d10f      	bne.n	801496a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	785b      	ldrb	r3, [r3, #1]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d11b      	bne.n	801498a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014956:	2b5e      	cmp	r3, #94	; 0x5e
 8014958:	d117      	bne.n	801498a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	7b5b      	ldrb	r3, [r3, #13]
 801495e:	f043 0310 	orr.w	r3, r3, #16
 8014962:	b2da      	uxtb	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	735a      	strb	r2, [r3, #13]
 8014968:	e00f      	b.n	801498a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	2206      	movs	r2, #6
 801496e:	4928      	ldr	r1, [pc, #160]	; (8014a10 <ethernet_input+0x118>)
 8014970:	4618      	mov	r0, r3
 8014972:	f000 fade 	bl	8014f32 <memcmp>
 8014976:	4603      	mov	r3, r0
 8014978:	2b00      	cmp	r3, #0
 801497a:	d106      	bne.n	801498a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	7b5b      	ldrb	r3, [r3, #13]
 8014980:	f043 0308 	orr.w	r3, r3, #8
 8014984:	b2da      	uxtb	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801498a:	89fb      	ldrh	r3, [r7, #14]
 801498c:	2b08      	cmp	r3, #8
 801498e:	d003      	beq.n	8014998 <ethernet_input+0xa0>
 8014990:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014994:	d014      	beq.n	80149c0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014996:	e032      	b.n	80149fe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801499e:	f003 0308 	and.w	r3, r3, #8
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d024      	beq.n	80149f0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80149a6:	8afb      	ldrh	r3, [r7, #22]
 80149a8:	4619      	mov	r1, r3
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7f5 fc78 	bl	800a2a0 <pbuf_remove_header>
 80149b0:	4603      	mov	r3, r0
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d11e      	bne.n	80149f4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80149b6:	6839      	ldr	r1, [r7, #0]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7fe ff03 	bl	80137c4 <ip4_input>
      break;
 80149be:	e013      	b.n	80149e8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149c6:	f003 0308 	and.w	r3, r3, #8
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d014      	beq.n	80149f8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80149ce:	8afb      	ldrh	r3, [r7, #22]
 80149d0:	4619      	mov	r1, r3
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7f5 fc64 	bl	800a2a0 <pbuf_remove_header>
 80149d8:	4603      	mov	r3, r0
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d10e      	bne.n	80149fc <ethernet_input+0x104>
        etharp_input(p, netif);
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f7fe f89f 	bl	8012b24 <etharp_input>
      break;
 80149e6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80149e8:	2300      	movs	r3, #0
 80149ea:	e00c      	b.n	8014a06 <ethernet_input+0x10e>
    goto free_and_return;
 80149ec:	bf00      	nop
 80149ee:	e006      	b.n	80149fe <ethernet_input+0x106>
        goto free_and_return;
 80149f0:	bf00      	nop
 80149f2:	e004      	b.n	80149fe <ethernet_input+0x106>
        goto free_and_return;
 80149f4:	bf00      	nop
 80149f6:	e002      	b.n	80149fe <ethernet_input+0x106>
        goto free_and_return;
 80149f8:	bf00      	nop
 80149fa:	e000      	b.n	80149fe <ethernet_input+0x106>
        goto free_and_return;
 80149fc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f7f5 fcd4 	bl	800a3ac <pbuf_free>
  return ERR_OK;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3718      	adds	r7, #24
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	08018d90 	.word	0x08018d90

08014a14 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b086      	sub	sp, #24
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
 8014a20:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014a22:	8c3b      	ldrh	r3, [r7, #32]
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7f4 f92b 	bl	8008c80 <lwip_htons>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014a2e:	210e      	movs	r1, #14
 8014a30:	68b8      	ldr	r0, [r7, #8]
 8014a32:	f7f5 fc25 	bl	800a280 <pbuf_add_header>
 8014a36:	4603      	mov	r3, r0
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d125      	bne.n	8014a88 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	8afa      	ldrh	r2, [r7, #22]
 8014a46:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	2206      	movs	r2, #6
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 fb4b 	bl	80150ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	3306      	adds	r3, #6
 8014a58:	2206      	movs	r2, #6
 8014a5a:	6879      	ldr	r1, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f000 fb44 	bl	80150ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a68:	2b06      	cmp	r3, #6
 8014a6a:	d006      	beq.n	8014a7a <ethernet_output+0x66>
 8014a6c:	4b0a      	ldr	r3, [pc, #40]	; (8014a98 <ethernet_output+0x84>)
 8014a6e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014a72:	490a      	ldr	r1, [pc, #40]	; (8014a9c <ethernet_output+0x88>)
 8014a74:	480a      	ldr	r0, [pc, #40]	; (8014aa0 <ethernet_output+0x8c>)
 8014a76:	f000 fa07 	bl	8014e88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	699b      	ldr	r3, [r3, #24]
 8014a7e:	68b9      	ldr	r1, [r7, #8]
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	4798      	blx	r3
 8014a84:	4603      	mov	r3, r0
 8014a86:	e002      	b.n	8014a8e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014a88:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014a8a:	f06f 0301 	mvn.w	r3, #1
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3718      	adds	r7, #24
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	08018b8c 	.word	0x08018b8c
 8014a9c:	08018bc4 	.word	0x08018bc4
 8014aa0:	08018bf8 	.word	0x08018bf8

08014aa4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	2104      	movs	r1, #4
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7f0 fbf1 	bl	800529c <osMessageQueueNew>
 8014aba:	4602      	mov	r2, r0
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d102      	bne.n	8014ace <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8014acc:	e000      	b.n	8014ad0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3708      	adds	r7, #8
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6818      	ldr	r0, [r3, #0]
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	2300      	movs	r3, #0
 8014aea:	2200      	movs	r2, #0
 8014aec:	f7f0 fc5c 	bl	80053a8 <osMessageQueuePut>
 8014af0:	4603      	mov	r3, r0
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d102      	bne.n	8014afc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014af6:	2300      	movs	r3, #0
 8014af8:	73fb      	strb	r3, [r7, #15]
 8014afa:	e001      	b.n	8014b00 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014afc:	23ff      	movs	r3, #255	; 0xff
 8014afe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b086      	sub	sp, #24
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014b18:	f7f0 f822 	bl	8004b60 <osKernelGetTickCount>
 8014b1c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d013      	beq.n	8014b4c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	6818      	ldr	r0, [r3, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	68b9      	ldr	r1, [r7, #8]
 8014b2e:	f7f0 fcaf 	bl	8005490 <osMessageQueueGet>
 8014b32:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d105      	bne.n	8014b46 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014b3a:	f7f0 f811 	bl	8004b60 <osKernelGetTickCount>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	1ad3      	subs	r3, r2, r3
 8014b44:	e00f      	b.n	8014b66 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014b46:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4a:	e00c      	b.n	8014b66 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	6818      	ldr	r0, [r3, #0]
 8014b50:	f04f 33ff 	mov.w	r3, #4294967295
 8014b54:	2200      	movs	r2, #0
 8014b56:	68b9      	ldr	r1, [r7, #8]
 8014b58:	f7f0 fc9a 	bl	8005490 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014b5c:	f7f0 f800 	bl	8004b60 <osKernelGetTickCount>
 8014b60:	4602      	mov	r2, r0
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3718      	adds	r7, #24
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}

08014b6e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014b6e:	b480      	push	{r7}
 8014b70:	b083      	sub	sp, #12
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d101      	bne.n	8014b82 <sys_mbox_valid+0x14>
    return 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	e000      	b.n	8014b84 <sys_mbox_valid+0x16>
  else
    return 1;
 8014b82:	2301      	movs	r3, #1
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	370c      	adds	r7, #12
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8014b94:	2000      	movs	r0, #0
 8014b96:	f7f0 f8df 	bl	8004d58 <osMutexNew>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	4a01      	ldr	r2, [pc, #4]	; (8014ba4 <sys_init+0x14>)
 8014b9e:	6013      	str	r3, [r2, #0]
#endif
}
 8014ba0:	bf00      	nop
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	2000d54c 	.word	0x2000d54c

08014ba8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	f7f0 f8d1 	bl	8004d58 <osMutexNew>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d102      	bne.n	8014bca <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc8:	e000      	b.n	8014bcc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014bca:	2300      	movs	r3, #0
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3708      	adds	r7, #8
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f04f 31ff 	mov.w	r1, #4294967295
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7f0 f951 	bl	8004e8c <osMutexAcquire>
#endif
}
 8014bea:	bf00      	nop
 8014bec:	3708      	adds	r7, #8
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b082      	sub	sp, #8
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7f0 f9a2 	bl	8004f48 <osMutexRelease>
}
 8014c04:	bf00      	nop
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b08e      	sub	sp, #56	; 0x38
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
 8014c18:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014c1a:	f107 0314 	add.w	r3, r7, #20
 8014c1e:	2224      	movs	r2, #36	; 0x24
 8014c20:	2100      	movs	r1, #0
 8014c22:	4618      	mov	r0, r3
 8014c24:	f000 f995 	bl	8014f52 <memset>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	617b      	str	r3, [r7, #20]
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c32:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014c34:	f107 0314 	add.w	r3, r7, #20
 8014c38:	461a      	mov	r2, r3
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	68b8      	ldr	r0, [r7, #8]
 8014c3e:	f7ef ffb7 	bl	8004bb0 <osThreadNew>
 8014c42:	4603      	mov	r3, r0
#endif
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3738      	adds	r7, #56	; 0x38
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}

08014c4c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014c50:	4b04      	ldr	r3, [pc, #16]	; (8014c64 <sys_arch_protect+0x18>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	f04f 31ff 	mov.w	r1, #4294967295
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7f0 f917 	bl	8004e8c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8014c5e:	2301      	movs	r3, #1
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	2000d54c 	.word	0x2000d54c

08014c68 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014c70:	4b04      	ldr	r3, [pc, #16]	; (8014c84 <sys_arch_unprotect+0x1c>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7f0 f967 	bl	8004f48 <osMutexRelease>
}
 8014c7a:	bf00      	nop
 8014c7c:	3708      	adds	r7, #8
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	2000d54c 	.word	0x2000d54c

08014c88 <rand>:
 8014c88:	4b16      	ldr	r3, [pc, #88]	; (8014ce4 <rand+0x5c>)
 8014c8a:	b510      	push	{r4, lr}
 8014c8c:	681c      	ldr	r4, [r3, #0]
 8014c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014c90:	b9b3      	cbnz	r3, 8014cc0 <rand+0x38>
 8014c92:	2018      	movs	r0, #24
 8014c94:	f000 faa2 	bl	80151dc <malloc>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	6320      	str	r0, [r4, #48]	; 0x30
 8014c9c:	b920      	cbnz	r0, 8014ca8 <rand+0x20>
 8014c9e:	4b12      	ldr	r3, [pc, #72]	; (8014ce8 <rand+0x60>)
 8014ca0:	4812      	ldr	r0, [pc, #72]	; (8014cec <rand+0x64>)
 8014ca2:	2152      	movs	r1, #82	; 0x52
 8014ca4:	f000 fa30 	bl	8015108 <__assert_func>
 8014ca8:	4911      	ldr	r1, [pc, #68]	; (8014cf0 <rand+0x68>)
 8014caa:	4b12      	ldr	r3, [pc, #72]	; (8014cf4 <rand+0x6c>)
 8014cac:	e9c0 1300 	strd	r1, r3, [r0]
 8014cb0:	4b11      	ldr	r3, [pc, #68]	; (8014cf8 <rand+0x70>)
 8014cb2:	6083      	str	r3, [r0, #8]
 8014cb4:	230b      	movs	r3, #11
 8014cb6:	8183      	strh	r3, [r0, #12]
 8014cb8:	2100      	movs	r1, #0
 8014cba:	2001      	movs	r0, #1
 8014cbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014cc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014cc2:	480e      	ldr	r0, [pc, #56]	; (8014cfc <rand+0x74>)
 8014cc4:	690b      	ldr	r3, [r1, #16]
 8014cc6:	694c      	ldr	r4, [r1, #20]
 8014cc8:	4a0d      	ldr	r2, [pc, #52]	; (8014d00 <rand+0x78>)
 8014cca:	4358      	muls	r0, r3
 8014ccc:	fb02 0004 	mla	r0, r2, r4, r0
 8014cd0:	fba3 3202 	umull	r3, r2, r3, r2
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	eb40 0002 	adc.w	r0, r0, r2
 8014cda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014cde:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014ce2:	bd10      	pop	{r4, pc}
 8014ce4:	20000078 	.word	0x20000078
 8014ce8:	08018d9e 	.word	0x08018d9e
 8014cec:	08018db5 	.word	0x08018db5
 8014cf0:	abcd330e 	.word	0xabcd330e
 8014cf4:	e66d1234 	.word	0xe66d1234
 8014cf8:	0005deec 	.word	0x0005deec
 8014cfc:	5851f42d 	.word	0x5851f42d
 8014d00:	4c957f2d 	.word	0x4c957f2d

08014d04 <std>:
 8014d04:	2300      	movs	r3, #0
 8014d06:	b510      	push	{r4, lr}
 8014d08:	4604      	mov	r4, r0
 8014d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8014d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d12:	6083      	str	r3, [r0, #8]
 8014d14:	8181      	strh	r1, [r0, #12]
 8014d16:	6643      	str	r3, [r0, #100]	; 0x64
 8014d18:	81c2      	strh	r2, [r0, #14]
 8014d1a:	6183      	str	r3, [r0, #24]
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	2208      	movs	r2, #8
 8014d20:	305c      	adds	r0, #92	; 0x5c
 8014d22:	f000 f916 	bl	8014f52 <memset>
 8014d26:	4b0d      	ldr	r3, [pc, #52]	; (8014d5c <std+0x58>)
 8014d28:	6263      	str	r3, [r4, #36]	; 0x24
 8014d2a:	4b0d      	ldr	r3, [pc, #52]	; (8014d60 <std+0x5c>)
 8014d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d2e:	4b0d      	ldr	r3, [pc, #52]	; (8014d64 <std+0x60>)
 8014d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d32:	4b0d      	ldr	r3, [pc, #52]	; (8014d68 <std+0x64>)
 8014d34:	6323      	str	r3, [r4, #48]	; 0x30
 8014d36:	4b0d      	ldr	r3, [pc, #52]	; (8014d6c <std+0x68>)
 8014d38:	6224      	str	r4, [r4, #32]
 8014d3a:	429c      	cmp	r4, r3
 8014d3c:	d006      	beq.n	8014d4c <std+0x48>
 8014d3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014d42:	4294      	cmp	r4, r2
 8014d44:	d002      	beq.n	8014d4c <std+0x48>
 8014d46:	33d0      	adds	r3, #208	; 0xd0
 8014d48:	429c      	cmp	r4, r3
 8014d4a:	d105      	bne.n	8014d58 <std+0x54>
 8014d4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d54:	f000 b9c6 	b.w	80150e4 <__retarget_lock_init_recursive>
 8014d58:	bd10      	pop	{r4, pc}
 8014d5a:	bf00      	nop
 8014d5c:	08014ead 	.word	0x08014ead
 8014d60:	08014ecf 	.word	0x08014ecf
 8014d64:	08014f07 	.word	0x08014f07
 8014d68:	08014f2b 	.word	0x08014f2b
 8014d6c:	2000d550 	.word	0x2000d550

08014d70 <stdio_exit_handler>:
 8014d70:	4a02      	ldr	r2, [pc, #8]	; (8014d7c <stdio_exit_handler+0xc>)
 8014d72:	4903      	ldr	r1, [pc, #12]	; (8014d80 <stdio_exit_handler+0x10>)
 8014d74:	4803      	ldr	r0, [pc, #12]	; (8014d84 <stdio_exit_handler+0x14>)
 8014d76:	f000 b869 	b.w	8014e4c <_fwalk_sglue>
 8014d7a:	bf00      	nop
 8014d7c:	20000020 	.word	0x20000020
 8014d80:	080159f9 	.word	0x080159f9
 8014d84:	2000002c 	.word	0x2000002c

08014d88 <cleanup_stdio>:
 8014d88:	6841      	ldr	r1, [r0, #4]
 8014d8a:	4b0c      	ldr	r3, [pc, #48]	; (8014dbc <cleanup_stdio+0x34>)
 8014d8c:	4299      	cmp	r1, r3
 8014d8e:	b510      	push	{r4, lr}
 8014d90:	4604      	mov	r4, r0
 8014d92:	d001      	beq.n	8014d98 <cleanup_stdio+0x10>
 8014d94:	f000 fe30 	bl	80159f8 <_fflush_r>
 8014d98:	68a1      	ldr	r1, [r4, #8]
 8014d9a:	4b09      	ldr	r3, [pc, #36]	; (8014dc0 <cleanup_stdio+0x38>)
 8014d9c:	4299      	cmp	r1, r3
 8014d9e:	d002      	beq.n	8014da6 <cleanup_stdio+0x1e>
 8014da0:	4620      	mov	r0, r4
 8014da2:	f000 fe29 	bl	80159f8 <_fflush_r>
 8014da6:	68e1      	ldr	r1, [r4, #12]
 8014da8:	4b06      	ldr	r3, [pc, #24]	; (8014dc4 <cleanup_stdio+0x3c>)
 8014daa:	4299      	cmp	r1, r3
 8014dac:	d004      	beq.n	8014db8 <cleanup_stdio+0x30>
 8014dae:	4620      	mov	r0, r4
 8014db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db4:	f000 be20 	b.w	80159f8 <_fflush_r>
 8014db8:	bd10      	pop	{r4, pc}
 8014dba:	bf00      	nop
 8014dbc:	2000d550 	.word	0x2000d550
 8014dc0:	2000d5b8 	.word	0x2000d5b8
 8014dc4:	2000d620 	.word	0x2000d620

08014dc8 <global_stdio_init.part.0>:
 8014dc8:	b510      	push	{r4, lr}
 8014dca:	4b0b      	ldr	r3, [pc, #44]	; (8014df8 <global_stdio_init.part.0+0x30>)
 8014dcc:	4c0b      	ldr	r4, [pc, #44]	; (8014dfc <global_stdio_init.part.0+0x34>)
 8014dce:	4a0c      	ldr	r2, [pc, #48]	; (8014e00 <global_stdio_init.part.0+0x38>)
 8014dd0:	601a      	str	r2, [r3, #0]
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	2104      	movs	r1, #4
 8014dd8:	f7ff ff94 	bl	8014d04 <std>
 8014ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014de0:	2201      	movs	r2, #1
 8014de2:	2109      	movs	r1, #9
 8014de4:	f7ff ff8e 	bl	8014d04 <std>
 8014de8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014dec:	2202      	movs	r2, #2
 8014dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014df2:	2112      	movs	r1, #18
 8014df4:	f7ff bf86 	b.w	8014d04 <std>
 8014df8:	2000d688 	.word	0x2000d688
 8014dfc:	2000d550 	.word	0x2000d550
 8014e00:	08014d71 	.word	0x08014d71

08014e04 <__sfp_lock_acquire>:
 8014e04:	4801      	ldr	r0, [pc, #4]	; (8014e0c <__sfp_lock_acquire+0x8>)
 8014e06:	f000 b96e 	b.w	80150e6 <__retarget_lock_acquire_recursive>
 8014e0a:	bf00      	nop
 8014e0c:	2000d691 	.word	0x2000d691

08014e10 <__sfp_lock_release>:
 8014e10:	4801      	ldr	r0, [pc, #4]	; (8014e18 <__sfp_lock_release+0x8>)
 8014e12:	f000 b969 	b.w	80150e8 <__retarget_lock_release_recursive>
 8014e16:	bf00      	nop
 8014e18:	2000d691 	.word	0x2000d691

08014e1c <__sinit>:
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	4604      	mov	r4, r0
 8014e20:	f7ff fff0 	bl	8014e04 <__sfp_lock_acquire>
 8014e24:	6a23      	ldr	r3, [r4, #32]
 8014e26:	b11b      	cbz	r3, 8014e30 <__sinit+0x14>
 8014e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e2c:	f7ff bff0 	b.w	8014e10 <__sfp_lock_release>
 8014e30:	4b04      	ldr	r3, [pc, #16]	; (8014e44 <__sinit+0x28>)
 8014e32:	6223      	str	r3, [r4, #32]
 8014e34:	4b04      	ldr	r3, [pc, #16]	; (8014e48 <__sinit+0x2c>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d1f5      	bne.n	8014e28 <__sinit+0xc>
 8014e3c:	f7ff ffc4 	bl	8014dc8 <global_stdio_init.part.0>
 8014e40:	e7f2      	b.n	8014e28 <__sinit+0xc>
 8014e42:	bf00      	nop
 8014e44:	08014d89 	.word	0x08014d89
 8014e48:	2000d688 	.word	0x2000d688

08014e4c <_fwalk_sglue>:
 8014e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e50:	4607      	mov	r7, r0
 8014e52:	4688      	mov	r8, r1
 8014e54:	4614      	mov	r4, r2
 8014e56:	2600      	movs	r6, #0
 8014e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8014e60:	d505      	bpl.n	8014e6e <_fwalk_sglue+0x22>
 8014e62:	6824      	ldr	r4, [r4, #0]
 8014e64:	2c00      	cmp	r4, #0
 8014e66:	d1f7      	bne.n	8014e58 <_fwalk_sglue+0xc>
 8014e68:	4630      	mov	r0, r6
 8014e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e6e:	89ab      	ldrh	r3, [r5, #12]
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	d907      	bls.n	8014e84 <_fwalk_sglue+0x38>
 8014e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	d003      	beq.n	8014e84 <_fwalk_sglue+0x38>
 8014e7c:	4629      	mov	r1, r5
 8014e7e:	4638      	mov	r0, r7
 8014e80:	47c0      	blx	r8
 8014e82:	4306      	orrs	r6, r0
 8014e84:	3568      	adds	r5, #104	; 0x68
 8014e86:	e7e9      	b.n	8014e5c <_fwalk_sglue+0x10>

08014e88 <iprintf>:
 8014e88:	b40f      	push	{r0, r1, r2, r3}
 8014e8a:	b507      	push	{r0, r1, r2, lr}
 8014e8c:	4906      	ldr	r1, [pc, #24]	; (8014ea8 <iprintf+0x20>)
 8014e8e:	ab04      	add	r3, sp, #16
 8014e90:	6808      	ldr	r0, [r1, #0]
 8014e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e96:	6881      	ldr	r1, [r0, #8]
 8014e98:	9301      	str	r3, [sp, #4]
 8014e9a:	f000 fa7d 	bl	8015398 <_vfiprintf_r>
 8014e9e:	b003      	add	sp, #12
 8014ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ea4:	b004      	add	sp, #16
 8014ea6:	4770      	bx	lr
 8014ea8:	20000078 	.word	0x20000078

08014eac <__sread>:
 8014eac:	b510      	push	{r4, lr}
 8014eae:	460c      	mov	r4, r1
 8014eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eb4:	f000 f8ce 	bl	8015054 <_read_r>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	bfab      	itete	ge
 8014ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8014ec0:	181b      	addge	r3, r3, r0
 8014ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ec6:	bfac      	ite	ge
 8014ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014eca:	81a3      	strhlt	r3, [r4, #12]
 8014ecc:	bd10      	pop	{r4, pc}

08014ece <__swrite>:
 8014ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed2:	461f      	mov	r7, r3
 8014ed4:	898b      	ldrh	r3, [r1, #12]
 8014ed6:	05db      	lsls	r3, r3, #23
 8014ed8:	4605      	mov	r5, r0
 8014eda:	460c      	mov	r4, r1
 8014edc:	4616      	mov	r6, r2
 8014ede:	d505      	bpl.n	8014eec <__swrite+0x1e>
 8014ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ee4:	2302      	movs	r3, #2
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f000 f8a2 	bl	8015030 <_lseek_r>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	4632      	mov	r2, r6
 8014efa:	463b      	mov	r3, r7
 8014efc:	4628      	mov	r0, r5
 8014efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f02:	f000 b8b9 	b.w	8015078 <_write_r>

08014f06 <__sseek>:
 8014f06:	b510      	push	{r4, lr}
 8014f08:	460c      	mov	r4, r1
 8014f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f0e:	f000 f88f 	bl	8015030 <_lseek_r>
 8014f12:	1c43      	adds	r3, r0, #1
 8014f14:	89a3      	ldrh	r3, [r4, #12]
 8014f16:	bf15      	itete	ne
 8014f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f22:	81a3      	strheq	r3, [r4, #12]
 8014f24:	bf18      	it	ne
 8014f26:	81a3      	strhne	r3, [r4, #12]
 8014f28:	bd10      	pop	{r4, pc}

08014f2a <__sclose>:
 8014f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f2e:	f000 b819 	b.w	8014f64 <_close_r>

08014f32 <memcmp>:
 8014f32:	b510      	push	{r4, lr}
 8014f34:	3901      	subs	r1, #1
 8014f36:	4402      	add	r2, r0
 8014f38:	4290      	cmp	r0, r2
 8014f3a:	d101      	bne.n	8014f40 <memcmp+0xe>
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e005      	b.n	8014f4c <memcmp+0x1a>
 8014f40:	7803      	ldrb	r3, [r0, #0]
 8014f42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014f46:	42a3      	cmp	r3, r4
 8014f48:	d001      	beq.n	8014f4e <memcmp+0x1c>
 8014f4a:	1b18      	subs	r0, r3, r4
 8014f4c:	bd10      	pop	{r4, pc}
 8014f4e:	3001      	adds	r0, #1
 8014f50:	e7f2      	b.n	8014f38 <memcmp+0x6>

08014f52 <memset>:
 8014f52:	4402      	add	r2, r0
 8014f54:	4603      	mov	r3, r0
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d100      	bne.n	8014f5c <memset+0xa>
 8014f5a:	4770      	bx	lr
 8014f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8014f60:	e7f9      	b.n	8014f56 <memset+0x4>
	...

08014f64 <_close_r>:
 8014f64:	b538      	push	{r3, r4, r5, lr}
 8014f66:	4d06      	ldr	r5, [pc, #24]	; (8014f80 <_close_r+0x1c>)
 8014f68:	2300      	movs	r3, #0
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	4608      	mov	r0, r1
 8014f6e:	602b      	str	r3, [r5, #0]
 8014f70:	f7eb fe59 	bl	8000c26 <_close>
 8014f74:	1c43      	adds	r3, r0, #1
 8014f76:	d102      	bne.n	8014f7e <_close_r+0x1a>
 8014f78:	682b      	ldr	r3, [r5, #0]
 8014f7a:	b103      	cbz	r3, 8014f7e <_close_r+0x1a>
 8014f7c:	6023      	str	r3, [r4, #0]
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}
 8014f80:	2000d68c 	.word	0x2000d68c

08014f84 <_reclaim_reent>:
 8014f84:	4b29      	ldr	r3, [pc, #164]	; (801502c <_reclaim_reent+0xa8>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	4283      	cmp	r3, r0
 8014f8a:	b570      	push	{r4, r5, r6, lr}
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	d04b      	beq.n	8015028 <_reclaim_reent+0xa4>
 8014f90:	69c3      	ldr	r3, [r0, #28]
 8014f92:	b143      	cbz	r3, 8014fa6 <_reclaim_reent+0x22>
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d144      	bne.n	8015024 <_reclaim_reent+0xa0>
 8014f9a:	69e3      	ldr	r3, [r4, #28]
 8014f9c:	6819      	ldr	r1, [r3, #0]
 8014f9e:	b111      	cbz	r1, 8014fa6 <_reclaim_reent+0x22>
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	f000 f8cf 	bl	8015144 <_free_r>
 8014fa6:	6961      	ldr	r1, [r4, #20]
 8014fa8:	b111      	cbz	r1, 8014fb0 <_reclaim_reent+0x2c>
 8014faa:	4620      	mov	r0, r4
 8014fac:	f000 f8ca 	bl	8015144 <_free_r>
 8014fb0:	69e1      	ldr	r1, [r4, #28]
 8014fb2:	b111      	cbz	r1, 8014fba <_reclaim_reent+0x36>
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	f000 f8c5 	bl	8015144 <_free_r>
 8014fba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014fbc:	b111      	cbz	r1, 8014fc4 <_reclaim_reent+0x40>
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f000 f8c0 	bl	8015144 <_free_r>
 8014fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fc6:	b111      	cbz	r1, 8014fce <_reclaim_reent+0x4a>
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f000 f8bb 	bl	8015144 <_free_r>
 8014fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014fd0:	b111      	cbz	r1, 8014fd8 <_reclaim_reent+0x54>
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f000 f8b6 	bl	8015144 <_free_r>
 8014fd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014fda:	b111      	cbz	r1, 8014fe2 <_reclaim_reent+0x5e>
 8014fdc:	4620      	mov	r0, r4
 8014fde:	f000 f8b1 	bl	8015144 <_free_r>
 8014fe2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014fe4:	b111      	cbz	r1, 8014fec <_reclaim_reent+0x68>
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	f000 f8ac 	bl	8015144 <_free_r>
 8014fec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014fee:	b111      	cbz	r1, 8014ff6 <_reclaim_reent+0x72>
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	f000 f8a7 	bl	8015144 <_free_r>
 8014ff6:	6a23      	ldr	r3, [r4, #32]
 8014ff8:	b1b3      	cbz	r3, 8015028 <_reclaim_reent+0xa4>
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015000:	4718      	bx	r3
 8015002:	5949      	ldr	r1, [r1, r5]
 8015004:	b941      	cbnz	r1, 8015018 <_reclaim_reent+0x94>
 8015006:	3504      	adds	r5, #4
 8015008:	69e3      	ldr	r3, [r4, #28]
 801500a:	2d80      	cmp	r5, #128	; 0x80
 801500c:	68d9      	ldr	r1, [r3, #12]
 801500e:	d1f8      	bne.n	8015002 <_reclaim_reent+0x7e>
 8015010:	4620      	mov	r0, r4
 8015012:	f000 f897 	bl	8015144 <_free_r>
 8015016:	e7c0      	b.n	8014f9a <_reclaim_reent+0x16>
 8015018:	680e      	ldr	r6, [r1, #0]
 801501a:	4620      	mov	r0, r4
 801501c:	f000 f892 	bl	8015144 <_free_r>
 8015020:	4631      	mov	r1, r6
 8015022:	e7ef      	b.n	8015004 <_reclaim_reent+0x80>
 8015024:	2500      	movs	r5, #0
 8015026:	e7ef      	b.n	8015008 <_reclaim_reent+0x84>
 8015028:	bd70      	pop	{r4, r5, r6, pc}
 801502a:	bf00      	nop
 801502c:	20000078 	.word	0x20000078

08015030 <_lseek_r>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	4d07      	ldr	r5, [pc, #28]	; (8015050 <_lseek_r+0x20>)
 8015034:	4604      	mov	r4, r0
 8015036:	4608      	mov	r0, r1
 8015038:	4611      	mov	r1, r2
 801503a:	2200      	movs	r2, #0
 801503c:	602a      	str	r2, [r5, #0]
 801503e:	461a      	mov	r2, r3
 8015040:	f7eb fe18 	bl	8000c74 <_lseek>
 8015044:	1c43      	adds	r3, r0, #1
 8015046:	d102      	bne.n	801504e <_lseek_r+0x1e>
 8015048:	682b      	ldr	r3, [r5, #0]
 801504a:	b103      	cbz	r3, 801504e <_lseek_r+0x1e>
 801504c:	6023      	str	r3, [r4, #0]
 801504e:	bd38      	pop	{r3, r4, r5, pc}
 8015050:	2000d68c 	.word	0x2000d68c

08015054 <_read_r>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4d07      	ldr	r5, [pc, #28]	; (8015074 <_read_r+0x20>)
 8015058:	4604      	mov	r4, r0
 801505a:	4608      	mov	r0, r1
 801505c:	4611      	mov	r1, r2
 801505e:	2200      	movs	r2, #0
 8015060:	602a      	str	r2, [r5, #0]
 8015062:	461a      	mov	r2, r3
 8015064:	f7eb fda6 	bl	8000bb4 <_read>
 8015068:	1c43      	adds	r3, r0, #1
 801506a:	d102      	bne.n	8015072 <_read_r+0x1e>
 801506c:	682b      	ldr	r3, [r5, #0]
 801506e:	b103      	cbz	r3, 8015072 <_read_r+0x1e>
 8015070:	6023      	str	r3, [r4, #0]
 8015072:	bd38      	pop	{r3, r4, r5, pc}
 8015074:	2000d68c 	.word	0x2000d68c

08015078 <_write_r>:
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4d07      	ldr	r5, [pc, #28]	; (8015098 <_write_r+0x20>)
 801507c:	4604      	mov	r4, r0
 801507e:	4608      	mov	r0, r1
 8015080:	4611      	mov	r1, r2
 8015082:	2200      	movs	r2, #0
 8015084:	602a      	str	r2, [r5, #0]
 8015086:	461a      	mov	r2, r3
 8015088:	f7eb fdb1 	bl	8000bee <_write>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_write_r+0x1e>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_write_r+0x1e>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	2000d68c 	.word	0x2000d68c

0801509c <__libc_init_array>:
 801509c:	b570      	push	{r4, r5, r6, lr}
 801509e:	4d0d      	ldr	r5, [pc, #52]	; (80150d4 <__libc_init_array+0x38>)
 80150a0:	4c0d      	ldr	r4, [pc, #52]	; (80150d8 <__libc_init_array+0x3c>)
 80150a2:	1b64      	subs	r4, r4, r5
 80150a4:	10a4      	asrs	r4, r4, #2
 80150a6:	2600      	movs	r6, #0
 80150a8:	42a6      	cmp	r6, r4
 80150aa:	d109      	bne.n	80150c0 <__libc_init_array+0x24>
 80150ac:	4d0b      	ldr	r5, [pc, #44]	; (80150dc <__libc_init_array+0x40>)
 80150ae:	4c0c      	ldr	r4, [pc, #48]	; (80150e0 <__libc_init_array+0x44>)
 80150b0:	f000 fe52 	bl	8015d58 <_init>
 80150b4:	1b64      	subs	r4, r4, r5
 80150b6:	10a4      	asrs	r4, r4, #2
 80150b8:	2600      	movs	r6, #0
 80150ba:	42a6      	cmp	r6, r4
 80150bc:	d105      	bne.n	80150ca <__libc_init_array+0x2e>
 80150be:	bd70      	pop	{r4, r5, r6, pc}
 80150c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80150c4:	4798      	blx	r3
 80150c6:	3601      	adds	r6, #1
 80150c8:	e7ee      	b.n	80150a8 <__libc_init_array+0xc>
 80150ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80150ce:	4798      	blx	r3
 80150d0:	3601      	adds	r6, #1
 80150d2:	e7f2      	b.n	80150ba <__libc_init_array+0x1e>
 80150d4:	08018e84 	.word	0x08018e84
 80150d8:	08018e84 	.word	0x08018e84
 80150dc:	08018e84 	.word	0x08018e84
 80150e0:	08018e88 	.word	0x08018e88

080150e4 <__retarget_lock_init_recursive>:
 80150e4:	4770      	bx	lr

080150e6 <__retarget_lock_acquire_recursive>:
 80150e6:	4770      	bx	lr

080150e8 <__retarget_lock_release_recursive>:
 80150e8:	4770      	bx	lr

080150ea <memcpy>:
 80150ea:	440a      	add	r2, r1
 80150ec:	4291      	cmp	r1, r2
 80150ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80150f2:	d100      	bne.n	80150f6 <memcpy+0xc>
 80150f4:	4770      	bx	lr
 80150f6:	b510      	push	{r4, lr}
 80150f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015100:	4291      	cmp	r1, r2
 8015102:	d1f9      	bne.n	80150f8 <memcpy+0xe>
 8015104:	bd10      	pop	{r4, pc}
	...

08015108 <__assert_func>:
 8015108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801510a:	4614      	mov	r4, r2
 801510c:	461a      	mov	r2, r3
 801510e:	4b09      	ldr	r3, [pc, #36]	; (8015134 <__assert_func+0x2c>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	4605      	mov	r5, r0
 8015114:	68d8      	ldr	r0, [r3, #12]
 8015116:	b14c      	cbz	r4, 801512c <__assert_func+0x24>
 8015118:	4b07      	ldr	r3, [pc, #28]	; (8015138 <__assert_func+0x30>)
 801511a:	9100      	str	r1, [sp, #0]
 801511c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015120:	4906      	ldr	r1, [pc, #24]	; (801513c <__assert_func+0x34>)
 8015122:	462b      	mov	r3, r5
 8015124:	f000 fc90 	bl	8015a48 <fiprintf>
 8015128:	f000 fd46 	bl	8015bb8 <abort>
 801512c:	4b04      	ldr	r3, [pc, #16]	; (8015140 <__assert_func+0x38>)
 801512e:	461c      	mov	r4, r3
 8015130:	e7f3      	b.n	801511a <__assert_func+0x12>
 8015132:	bf00      	nop
 8015134:	20000078 	.word	0x20000078
 8015138:	08018e0d 	.word	0x08018e0d
 801513c:	08018e1a 	.word	0x08018e1a
 8015140:	08018e48 	.word	0x08018e48

08015144 <_free_r>:
 8015144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015146:	2900      	cmp	r1, #0
 8015148:	d044      	beq.n	80151d4 <_free_r+0x90>
 801514a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801514e:	9001      	str	r0, [sp, #4]
 8015150:	2b00      	cmp	r3, #0
 8015152:	f1a1 0404 	sub.w	r4, r1, #4
 8015156:	bfb8      	it	lt
 8015158:	18e4      	addlt	r4, r4, r3
 801515a:	f000 f8e7 	bl	801532c <__malloc_lock>
 801515e:	4a1e      	ldr	r2, [pc, #120]	; (80151d8 <_free_r+0x94>)
 8015160:	9801      	ldr	r0, [sp, #4]
 8015162:	6813      	ldr	r3, [r2, #0]
 8015164:	b933      	cbnz	r3, 8015174 <_free_r+0x30>
 8015166:	6063      	str	r3, [r4, #4]
 8015168:	6014      	str	r4, [r2, #0]
 801516a:	b003      	add	sp, #12
 801516c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015170:	f000 b8e2 	b.w	8015338 <__malloc_unlock>
 8015174:	42a3      	cmp	r3, r4
 8015176:	d908      	bls.n	801518a <_free_r+0x46>
 8015178:	6825      	ldr	r5, [r4, #0]
 801517a:	1961      	adds	r1, r4, r5
 801517c:	428b      	cmp	r3, r1
 801517e:	bf01      	itttt	eq
 8015180:	6819      	ldreq	r1, [r3, #0]
 8015182:	685b      	ldreq	r3, [r3, #4]
 8015184:	1949      	addeq	r1, r1, r5
 8015186:	6021      	streq	r1, [r4, #0]
 8015188:	e7ed      	b.n	8015166 <_free_r+0x22>
 801518a:	461a      	mov	r2, r3
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	b10b      	cbz	r3, 8015194 <_free_r+0x50>
 8015190:	42a3      	cmp	r3, r4
 8015192:	d9fa      	bls.n	801518a <_free_r+0x46>
 8015194:	6811      	ldr	r1, [r2, #0]
 8015196:	1855      	adds	r5, r2, r1
 8015198:	42a5      	cmp	r5, r4
 801519a:	d10b      	bne.n	80151b4 <_free_r+0x70>
 801519c:	6824      	ldr	r4, [r4, #0]
 801519e:	4421      	add	r1, r4
 80151a0:	1854      	adds	r4, r2, r1
 80151a2:	42a3      	cmp	r3, r4
 80151a4:	6011      	str	r1, [r2, #0]
 80151a6:	d1e0      	bne.n	801516a <_free_r+0x26>
 80151a8:	681c      	ldr	r4, [r3, #0]
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	6053      	str	r3, [r2, #4]
 80151ae:	440c      	add	r4, r1
 80151b0:	6014      	str	r4, [r2, #0]
 80151b2:	e7da      	b.n	801516a <_free_r+0x26>
 80151b4:	d902      	bls.n	80151bc <_free_r+0x78>
 80151b6:	230c      	movs	r3, #12
 80151b8:	6003      	str	r3, [r0, #0]
 80151ba:	e7d6      	b.n	801516a <_free_r+0x26>
 80151bc:	6825      	ldr	r5, [r4, #0]
 80151be:	1961      	adds	r1, r4, r5
 80151c0:	428b      	cmp	r3, r1
 80151c2:	bf04      	itt	eq
 80151c4:	6819      	ldreq	r1, [r3, #0]
 80151c6:	685b      	ldreq	r3, [r3, #4]
 80151c8:	6063      	str	r3, [r4, #4]
 80151ca:	bf04      	itt	eq
 80151cc:	1949      	addeq	r1, r1, r5
 80151ce:	6021      	streq	r1, [r4, #0]
 80151d0:	6054      	str	r4, [r2, #4]
 80151d2:	e7ca      	b.n	801516a <_free_r+0x26>
 80151d4:	b003      	add	sp, #12
 80151d6:	bd30      	pop	{r4, r5, pc}
 80151d8:	2000d694 	.word	0x2000d694

080151dc <malloc>:
 80151dc:	4b02      	ldr	r3, [pc, #8]	; (80151e8 <malloc+0xc>)
 80151de:	4601      	mov	r1, r0
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	f000 b823 	b.w	801522c <_malloc_r>
 80151e6:	bf00      	nop
 80151e8:	20000078 	.word	0x20000078

080151ec <sbrk_aligned>:
 80151ec:	b570      	push	{r4, r5, r6, lr}
 80151ee:	4e0e      	ldr	r6, [pc, #56]	; (8015228 <sbrk_aligned+0x3c>)
 80151f0:	460c      	mov	r4, r1
 80151f2:	6831      	ldr	r1, [r6, #0]
 80151f4:	4605      	mov	r5, r0
 80151f6:	b911      	cbnz	r1, 80151fe <sbrk_aligned+0x12>
 80151f8:	f000 fcce 	bl	8015b98 <_sbrk_r>
 80151fc:	6030      	str	r0, [r6, #0]
 80151fe:	4621      	mov	r1, r4
 8015200:	4628      	mov	r0, r5
 8015202:	f000 fcc9 	bl	8015b98 <_sbrk_r>
 8015206:	1c43      	adds	r3, r0, #1
 8015208:	d00a      	beq.n	8015220 <sbrk_aligned+0x34>
 801520a:	1cc4      	adds	r4, r0, #3
 801520c:	f024 0403 	bic.w	r4, r4, #3
 8015210:	42a0      	cmp	r0, r4
 8015212:	d007      	beq.n	8015224 <sbrk_aligned+0x38>
 8015214:	1a21      	subs	r1, r4, r0
 8015216:	4628      	mov	r0, r5
 8015218:	f000 fcbe 	bl	8015b98 <_sbrk_r>
 801521c:	3001      	adds	r0, #1
 801521e:	d101      	bne.n	8015224 <sbrk_aligned+0x38>
 8015220:	f04f 34ff 	mov.w	r4, #4294967295
 8015224:	4620      	mov	r0, r4
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	2000d698 	.word	0x2000d698

0801522c <_malloc_r>:
 801522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015230:	1ccd      	adds	r5, r1, #3
 8015232:	f025 0503 	bic.w	r5, r5, #3
 8015236:	3508      	adds	r5, #8
 8015238:	2d0c      	cmp	r5, #12
 801523a:	bf38      	it	cc
 801523c:	250c      	movcc	r5, #12
 801523e:	2d00      	cmp	r5, #0
 8015240:	4607      	mov	r7, r0
 8015242:	db01      	blt.n	8015248 <_malloc_r+0x1c>
 8015244:	42a9      	cmp	r1, r5
 8015246:	d905      	bls.n	8015254 <_malloc_r+0x28>
 8015248:	230c      	movs	r3, #12
 801524a:	603b      	str	r3, [r7, #0]
 801524c:	2600      	movs	r6, #0
 801524e:	4630      	mov	r0, r6
 8015250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015328 <_malloc_r+0xfc>
 8015258:	f000 f868 	bl	801532c <__malloc_lock>
 801525c:	f8d8 3000 	ldr.w	r3, [r8]
 8015260:	461c      	mov	r4, r3
 8015262:	bb5c      	cbnz	r4, 80152bc <_malloc_r+0x90>
 8015264:	4629      	mov	r1, r5
 8015266:	4638      	mov	r0, r7
 8015268:	f7ff ffc0 	bl	80151ec <sbrk_aligned>
 801526c:	1c43      	adds	r3, r0, #1
 801526e:	4604      	mov	r4, r0
 8015270:	d155      	bne.n	801531e <_malloc_r+0xf2>
 8015272:	f8d8 4000 	ldr.w	r4, [r8]
 8015276:	4626      	mov	r6, r4
 8015278:	2e00      	cmp	r6, #0
 801527a:	d145      	bne.n	8015308 <_malloc_r+0xdc>
 801527c:	2c00      	cmp	r4, #0
 801527e:	d048      	beq.n	8015312 <_malloc_r+0xe6>
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	4631      	mov	r1, r6
 8015284:	4638      	mov	r0, r7
 8015286:	eb04 0903 	add.w	r9, r4, r3
 801528a:	f000 fc85 	bl	8015b98 <_sbrk_r>
 801528e:	4581      	cmp	r9, r0
 8015290:	d13f      	bne.n	8015312 <_malloc_r+0xe6>
 8015292:	6821      	ldr	r1, [r4, #0]
 8015294:	1a6d      	subs	r5, r5, r1
 8015296:	4629      	mov	r1, r5
 8015298:	4638      	mov	r0, r7
 801529a:	f7ff ffa7 	bl	80151ec <sbrk_aligned>
 801529e:	3001      	adds	r0, #1
 80152a0:	d037      	beq.n	8015312 <_malloc_r+0xe6>
 80152a2:	6823      	ldr	r3, [r4, #0]
 80152a4:	442b      	add	r3, r5
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	f8d8 3000 	ldr.w	r3, [r8]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d038      	beq.n	8015322 <_malloc_r+0xf6>
 80152b0:	685a      	ldr	r2, [r3, #4]
 80152b2:	42a2      	cmp	r2, r4
 80152b4:	d12b      	bne.n	801530e <_malloc_r+0xe2>
 80152b6:	2200      	movs	r2, #0
 80152b8:	605a      	str	r2, [r3, #4]
 80152ba:	e00f      	b.n	80152dc <_malloc_r+0xb0>
 80152bc:	6822      	ldr	r2, [r4, #0]
 80152be:	1b52      	subs	r2, r2, r5
 80152c0:	d41f      	bmi.n	8015302 <_malloc_r+0xd6>
 80152c2:	2a0b      	cmp	r2, #11
 80152c4:	d917      	bls.n	80152f6 <_malloc_r+0xca>
 80152c6:	1961      	adds	r1, r4, r5
 80152c8:	42a3      	cmp	r3, r4
 80152ca:	6025      	str	r5, [r4, #0]
 80152cc:	bf18      	it	ne
 80152ce:	6059      	strne	r1, [r3, #4]
 80152d0:	6863      	ldr	r3, [r4, #4]
 80152d2:	bf08      	it	eq
 80152d4:	f8c8 1000 	streq.w	r1, [r8]
 80152d8:	5162      	str	r2, [r4, r5]
 80152da:	604b      	str	r3, [r1, #4]
 80152dc:	4638      	mov	r0, r7
 80152de:	f104 060b 	add.w	r6, r4, #11
 80152e2:	f000 f829 	bl	8015338 <__malloc_unlock>
 80152e6:	f026 0607 	bic.w	r6, r6, #7
 80152ea:	1d23      	adds	r3, r4, #4
 80152ec:	1af2      	subs	r2, r6, r3
 80152ee:	d0ae      	beq.n	801524e <_malloc_r+0x22>
 80152f0:	1b9b      	subs	r3, r3, r6
 80152f2:	50a3      	str	r3, [r4, r2]
 80152f4:	e7ab      	b.n	801524e <_malloc_r+0x22>
 80152f6:	42a3      	cmp	r3, r4
 80152f8:	6862      	ldr	r2, [r4, #4]
 80152fa:	d1dd      	bne.n	80152b8 <_malloc_r+0x8c>
 80152fc:	f8c8 2000 	str.w	r2, [r8]
 8015300:	e7ec      	b.n	80152dc <_malloc_r+0xb0>
 8015302:	4623      	mov	r3, r4
 8015304:	6864      	ldr	r4, [r4, #4]
 8015306:	e7ac      	b.n	8015262 <_malloc_r+0x36>
 8015308:	4634      	mov	r4, r6
 801530a:	6876      	ldr	r6, [r6, #4]
 801530c:	e7b4      	b.n	8015278 <_malloc_r+0x4c>
 801530e:	4613      	mov	r3, r2
 8015310:	e7cc      	b.n	80152ac <_malloc_r+0x80>
 8015312:	230c      	movs	r3, #12
 8015314:	603b      	str	r3, [r7, #0]
 8015316:	4638      	mov	r0, r7
 8015318:	f000 f80e 	bl	8015338 <__malloc_unlock>
 801531c:	e797      	b.n	801524e <_malloc_r+0x22>
 801531e:	6025      	str	r5, [r4, #0]
 8015320:	e7dc      	b.n	80152dc <_malloc_r+0xb0>
 8015322:	605b      	str	r3, [r3, #4]
 8015324:	deff      	udf	#255	; 0xff
 8015326:	bf00      	nop
 8015328:	2000d694 	.word	0x2000d694

0801532c <__malloc_lock>:
 801532c:	4801      	ldr	r0, [pc, #4]	; (8015334 <__malloc_lock+0x8>)
 801532e:	f7ff beda 	b.w	80150e6 <__retarget_lock_acquire_recursive>
 8015332:	bf00      	nop
 8015334:	2000d690 	.word	0x2000d690

08015338 <__malloc_unlock>:
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__malloc_unlock+0x8>)
 801533a:	f7ff bed5 	b.w	80150e8 <__retarget_lock_release_recursive>
 801533e:	bf00      	nop
 8015340:	2000d690 	.word	0x2000d690

08015344 <__sfputc_r>:
 8015344:	6893      	ldr	r3, [r2, #8]
 8015346:	3b01      	subs	r3, #1
 8015348:	2b00      	cmp	r3, #0
 801534a:	b410      	push	{r4}
 801534c:	6093      	str	r3, [r2, #8]
 801534e:	da08      	bge.n	8015362 <__sfputc_r+0x1e>
 8015350:	6994      	ldr	r4, [r2, #24]
 8015352:	42a3      	cmp	r3, r4
 8015354:	db01      	blt.n	801535a <__sfputc_r+0x16>
 8015356:	290a      	cmp	r1, #10
 8015358:	d103      	bne.n	8015362 <__sfputc_r+0x1e>
 801535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801535e:	f000 bb85 	b.w	8015a6c <__swbuf_r>
 8015362:	6813      	ldr	r3, [r2, #0]
 8015364:	1c58      	adds	r0, r3, #1
 8015366:	6010      	str	r0, [r2, #0]
 8015368:	7019      	strb	r1, [r3, #0]
 801536a:	4608      	mov	r0, r1
 801536c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015370:	4770      	bx	lr

08015372 <__sfputs_r>:
 8015372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015374:	4606      	mov	r6, r0
 8015376:	460f      	mov	r7, r1
 8015378:	4614      	mov	r4, r2
 801537a:	18d5      	adds	r5, r2, r3
 801537c:	42ac      	cmp	r4, r5
 801537e:	d101      	bne.n	8015384 <__sfputs_r+0x12>
 8015380:	2000      	movs	r0, #0
 8015382:	e007      	b.n	8015394 <__sfputs_r+0x22>
 8015384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015388:	463a      	mov	r2, r7
 801538a:	4630      	mov	r0, r6
 801538c:	f7ff ffda 	bl	8015344 <__sfputc_r>
 8015390:	1c43      	adds	r3, r0, #1
 8015392:	d1f3      	bne.n	801537c <__sfputs_r+0xa>
 8015394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015398 <_vfiprintf_r>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	460d      	mov	r5, r1
 801539e:	b09d      	sub	sp, #116	; 0x74
 80153a0:	4614      	mov	r4, r2
 80153a2:	4698      	mov	r8, r3
 80153a4:	4606      	mov	r6, r0
 80153a6:	b118      	cbz	r0, 80153b0 <_vfiprintf_r+0x18>
 80153a8:	6a03      	ldr	r3, [r0, #32]
 80153aa:	b90b      	cbnz	r3, 80153b0 <_vfiprintf_r+0x18>
 80153ac:	f7ff fd36 	bl	8014e1c <__sinit>
 80153b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153b2:	07d9      	lsls	r1, r3, #31
 80153b4:	d405      	bmi.n	80153c2 <_vfiprintf_r+0x2a>
 80153b6:	89ab      	ldrh	r3, [r5, #12]
 80153b8:	059a      	lsls	r2, r3, #22
 80153ba:	d402      	bmi.n	80153c2 <_vfiprintf_r+0x2a>
 80153bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153be:	f7ff fe92 	bl	80150e6 <__retarget_lock_acquire_recursive>
 80153c2:	89ab      	ldrh	r3, [r5, #12]
 80153c4:	071b      	lsls	r3, r3, #28
 80153c6:	d501      	bpl.n	80153cc <_vfiprintf_r+0x34>
 80153c8:	692b      	ldr	r3, [r5, #16]
 80153ca:	b99b      	cbnz	r3, 80153f4 <_vfiprintf_r+0x5c>
 80153cc:	4629      	mov	r1, r5
 80153ce:	4630      	mov	r0, r6
 80153d0:	f000 fb8a 	bl	8015ae8 <__swsetup_r>
 80153d4:	b170      	cbz	r0, 80153f4 <_vfiprintf_r+0x5c>
 80153d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153d8:	07dc      	lsls	r4, r3, #31
 80153da:	d504      	bpl.n	80153e6 <_vfiprintf_r+0x4e>
 80153dc:	f04f 30ff 	mov.w	r0, #4294967295
 80153e0:	b01d      	add	sp, #116	; 0x74
 80153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e6:	89ab      	ldrh	r3, [r5, #12]
 80153e8:	0598      	lsls	r0, r3, #22
 80153ea:	d4f7      	bmi.n	80153dc <_vfiprintf_r+0x44>
 80153ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153ee:	f7ff fe7b 	bl	80150e8 <__retarget_lock_release_recursive>
 80153f2:	e7f3      	b.n	80153dc <_vfiprintf_r+0x44>
 80153f4:	2300      	movs	r3, #0
 80153f6:	9309      	str	r3, [sp, #36]	; 0x24
 80153f8:	2320      	movs	r3, #32
 80153fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015402:	2330      	movs	r3, #48	; 0x30
 8015404:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80155b8 <_vfiprintf_r+0x220>
 8015408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801540c:	f04f 0901 	mov.w	r9, #1
 8015410:	4623      	mov	r3, r4
 8015412:	469a      	mov	sl, r3
 8015414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015418:	b10a      	cbz	r2, 801541e <_vfiprintf_r+0x86>
 801541a:	2a25      	cmp	r2, #37	; 0x25
 801541c:	d1f9      	bne.n	8015412 <_vfiprintf_r+0x7a>
 801541e:	ebba 0b04 	subs.w	fp, sl, r4
 8015422:	d00b      	beq.n	801543c <_vfiprintf_r+0xa4>
 8015424:	465b      	mov	r3, fp
 8015426:	4622      	mov	r2, r4
 8015428:	4629      	mov	r1, r5
 801542a:	4630      	mov	r0, r6
 801542c:	f7ff ffa1 	bl	8015372 <__sfputs_r>
 8015430:	3001      	adds	r0, #1
 8015432:	f000 80a9 	beq.w	8015588 <_vfiprintf_r+0x1f0>
 8015436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015438:	445a      	add	r2, fp
 801543a:	9209      	str	r2, [sp, #36]	; 0x24
 801543c:	f89a 3000 	ldrb.w	r3, [sl]
 8015440:	2b00      	cmp	r3, #0
 8015442:	f000 80a1 	beq.w	8015588 <_vfiprintf_r+0x1f0>
 8015446:	2300      	movs	r3, #0
 8015448:	f04f 32ff 	mov.w	r2, #4294967295
 801544c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015450:	f10a 0a01 	add.w	sl, sl, #1
 8015454:	9304      	str	r3, [sp, #16]
 8015456:	9307      	str	r3, [sp, #28]
 8015458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801545c:	931a      	str	r3, [sp, #104]	; 0x68
 801545e:	4654      	mov	r4, sl
 8015460:	2205      	movs	r2, #5
 8015462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015466:	4854      	ldr	r0, [pc, #336]	; (80155b8 <_vfiprintf_r+0x220>)
 8015468:	f7ea feea 	bl	8000240 <memchr>
 801546c:	9a04      	ldr	r2, [sp, #16]
 801546e:	b9d8      	cbnz	r0, 80154a8 <_vfiprintf_r+0x110>
 8015470:	06d1      	lsls	r1, r2, #27
 8015472:	bf44      	itt	mi
 8015474:	2320      	movmi	r3, #32
 8015476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801547a:	0713      	lsls	r3, r2, #28
 801547c:	bf44      	itt	mi
 801547e:	232b      	movmi	r3, #43	; 0x2b
 8015480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015484:	f89a 3000 	ldrb.w	r3, [sl]
 8015488:	2b2a      	cmp	r3, #42	; 0x2a
 801548a:	d015      	beq.n	80154b8 <_vfiprintf_r+0x120>
 801548c:	9a07      	ldr	r2, [sp, #28]
 801548e:	4654      	mov	r4, sl
 8015490:	2000      	movs	r0, #0
 8015492:	f04f 0c0a 	mov.w	ip, #10
 8015496:	4621      	mov	r1, r4
 8015498:	f811 3b01 	ldrb.w	r3, [r1], #1
 801549c:	3b30      	subs	r3, #48	; 0x30
 801549e:	2b09      	cmp	r3, #9
 80154a0:	d94d      	bls.n	801553e <_vfiprintf_r+0x1a6>
 80154a2:	b1b0      	cbz	r0, 80154d2 <_vfiprintf_r+0x13a>
 80154a4:	9207      	str	r2, [sp, #28]
 80154a6:	e014      	b.n	80154d2 <_vfiprintf_r+0x13a>
 80154a8:	eba0 0308 	sub.w	r3, r0, r8
 80154ac:	fa09 f303 	lsl.w	r3, r9, r3
 80154b0:	4313      	orrs	r3, r2
 80154b2:	9304      	str	r3, [sp, #16]
 80154b4:	46a2      	mov	sl, r4
 80154b6:	e7d2      	b.n	801545e <_vfiprintf_r+0xc6>
 80154b8:	9b03      	ldr	r3, [sp, #12]
 80154ba:	1d19      	adds	r1, r3, #4
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	9103      	str	r1, [sp, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	bfbb      	ittet	lt
 80154c4:	425b      	neglt	r3, r3
 80154c6:	f042 0202 	orrlt.w	r2, r2, #2
 80154ca:	9307      	strge	r3, [sp, #28]
 80154cc:	9307      	strlt	r3, [sp, #28]
 80154ce:	bfb8      	it	lt
 80154d0:	9204      	strlt	r2, [sp, #16]
 80154d2:	7823      	ldrb	r3, [r4, #0]
 80154d4:	2b2e      	cmp	r3, #46	; 0x2e
 80154d6:	d10c      	bne.n	80154f2 <_vfiprintf_r+0x15a>
 80154d8:	7863      	ldrb	r3, [r4, #1]
 80154da:	2b2a      	cmp	r3, #42	; 0x2a
 80154dc:	d134      	bne.n	8015548 <_vfiprintf_r+0x1b0>
 80154de:	9b03      	ldr	r3, [sp, #12]
 80154e0:	1d1a      	adds	r2, r3, #4
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	9203      	str	r2, [sp, #12]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	bfb8      	it	lt
 80154ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80154ee:	3402      	adds	r4, #2
 80154f0:	9305      	str	r3, [sp, #20]
 80154f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80155c8 <_vfiprintf_r+0x230>
 80154f6:	7821      	ldrb	r1, [r4, #0]
 80154f8:	2203      	movs	r2, #3
 80154fa:	4650      	mov	r0, sl
 80154fc:	f7ea fea0 	bl	8000240 <memchr>
 8015500:	b138      	cbz	r0, 8015512 <_vfiprintf_r+0x17a>
 8015502:	9b04      	ldr	r3, [sp, #16]
 8015504:	eba0 000a 	sub.w	r0, r0, sl
 8015508:	2240      	movs	r2, #64	; 0x40
 801550a:	4082      	lsls	r2, r0
 801550c:	4313      	orrs	r3, r2
 801550e:	3401      	adds	r4, #1
 8015510:	9304      	str	r3, [sp, #16]
 8015512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015516:	4829      	ldr	r0, [pc, #164]	; (80155bc <_vfiprintf_r+0x224>)
 8015518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801551c:	2206      	movs	r2, #6
 801551e:	f7ea fe8f 	bl	8000240 <memchr>
 8015522:	2800      	cmp	r0, #0
 8015524:	d03f      	beq.n	80155a6 <_vfiprintf_r+0x20e>
 8015526:	4b26      	ldr	r3, [pc, #152]	; (80155c0 <_vfiprintf_r+0x228>)
 8015528:	bb1b      	cbnz	r3, 8015572 <_vfiprintf_r+0x1da>
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	3307      	adds	r3, #7
 801552e:	f023 0307 	bic.w	r3, r3, #7
 8015532:	3308      	adds	r3, #8
 8015534:	9303      	str	r3, [sp, #12]
 8015536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015538:	443b      	add	r3, r7
 801553a:	9309      	str	r3, [sp, #36]	; 0x24
 801553c:	e768      	b.n	8015410 <_vfiprintf_r+0x78>
 801553e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015542:	460c      	mov	r4, r1
 8015544:	2001      	movs	r0, #1
 8015546:	e7a6      	b.n	8015496 <_vfiprintf_r+0xfe>
 8015548:	2300      	movs	r3, #0
 801554a:	3401      	adds	r4, #1
 801554c:	9305      	str	r3, [sp, #20]
 801554e:	4619      	mov	r1, r3
 8015550:	f04f 0c0a 	mov.w	ip, #10
 8015554:	4620      	mov	r0, r4
 8015556:	f810 2b01 	ldrb.w	r2, [r0], #1
 801555a:	3a30      	subs	r2, #48	; 0x30
 801555c:	2a09      	cmp	r2, #9
 801555e:	d903      	bls.n	8015568 <_vfiprintf_r+0x1d0>
 8015560:	2b00      	cmp	r3, #0
 8015562:	d0c6      	beq.n	80154f2 <_vfiprintf_r+0x15a>
 8015564:	9105      	str	r1, [sp, #20]
 8015566:	e7c4      	b.n	80154f2 <_vfiprintf_r+0x15a>
 8015568:	fb0c 2101 	mla	r1, ip, r1, r2
 801556c:	4604      	mov	r4, r0
 801556e:	2301      	movs	r3, #1
 8015570:	e7f0      	b.n	8015554 <_vfiprintf_r+0x1bc>
 8015572:	ab03      	add	r3, sp, #12
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	462a      	mov	r2, r5
 8015578:	4b12      	ldr	r3, [pc, #72]	; (80155c4 <_vfiprintf_r+0x22c>)
 801557a:	a904      	add	r1, sp, #16
 801557c:	4630      	mov	r0, r6
 801557e:	f3af 8000 	nop.w
 8015582:	4607      	mov	r7, r0
 8015584:	1c78      	adds	r0, r7, #1
 8015586:	d1d6      	bne.n	8015536 <_vfiprintf_r+0x19e>
 8015588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801558a:	07d9      	lsls	r1, r3, #31
 801558c:	d405      	bmi.n	801559a <_vfiprintf_r+0x202>
 801558e:	89ab      	ldrh	r3, [r5, #12]
 8015590:	059a      	lsls	r2, r3, #22
 8015592:	d402      	bmi.n	801559a <_vfiprintf_r+0x202>
 8015594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015596:	f7ff fda7 	bl	80150e8 <__retarget_lock_release_recursive>
 801559a:	89ab      	ldrh	r3, [r5, #12]
 801559c:	065b      	lsls	r3, r3, #25
 801559e:	f53f af1d 	bmi.w	80153dc <_vfiprintf_r+0x44>
 80155a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155a4:	e71c      	b.n	80153e0 <_vfiprintf_r+0x48>
 80155a6:	ab03      	add	r3, sp, #12
 80155a8:	9300      	str	r3, [sp, #0]
 80155aa:	462a      	mov	r2, r5
 80155ac:	4b05      	ldr	r3, [pc, #20]	; (80155c4 <_vfiprintf_r+0x22c>)
 80155ae:	a904      	add	r1, sp, #16
 80155b0:	4630      	mov	r0, r6
 80155b2:	f000 f879 	bl	80156a8 <_printf_i>
 80155b6:	e7e4      	b.n	8015582 <_vfiprintf_r+0x1ea>
 80155b8:	08018e49 	.word	0x08018e49
 80155bc:	08018e53 	.word	0x08018e53
 80155c0:	00000000 	.word	0x00000000
 80155c4:	08015373 	.word	0x08015373
 80155c8:	08018e4f 	.word	0x08018e4f

080155cc <_printf_common>:
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	4616      	mov	r6, r2
 80155d2:	4699      	mov	r9, r3
 80155d4:	688a      	ldr	r2, [r1, #8]
 80155d6:	690b      	ldr	r3, [r1, #16]
 80155d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80155dc:	4293      	cmp	r3, r2
 80155de:	bfb8      	it	lt
 80155e0:	4613      	movlt	r3, r2
 80155e2:	6033      	str	r3, [r6, #0]
 80155e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80155e8:	4607      	mov	r7, r0
 80155ea:	460c      	mov	r4, r1
 80155ec:	b10a      	cbz	r2, 80155f2 <_printf_common+0x26>
 80155ee:	3301      	adds	r3, #1
 80155f0:	6033      	str	r3, [r6, #0]
 80155f2:	6823      	ldr	r3, [r4, #0]
 80155f4:	0699      	lsls	r1, r3, #26
 80155f6:	bf42      	ittt	mi
 80155f8:	6833      	ldrmi	r3, [r6, #0]
 80155fa:	3302      	addmi	r3, #2
 80155fc:	6033      	strmi	r3, [r6, #0]
 80155fe:	6825      	ldr	r5, [r4, #0]
 8015600:	f015 0506 	ands.w	r5, r5, #6
 8015604:	d106      	bne.n	8015614 <_printf_common+0x48>
 8015606:	f104 0a19 	add.w	sl, r4, #25
 801560a:	68e3      	ldr	r3, [r4, #12]
 801560c:	6832      	ldr	r2, [r6, #0]
 801560e:	1a9b      	subs	r3, r3, r2
 8015610:	42ab      	cmp	r3, r5
 8015612:	dc26      	bgt.n	8015662 <_printf_common+0x96>
 8015614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015618:	1e13      	subs	r3, r2, #0
 801561a:	6822      	ldr	r2, [r4, #0]
 801561c:	bf18      	it	ne
 801561e:	2301      	movne	r3, #1
 8015620:	0692      	lsls	r2, r2, #26
 8015622:	d42b      	bmi.n	801567c <_printf_common+0xb0>
 8015624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015628:	4649      	mov	r1, r9
 801562a:	4638      	mov	r0, r7
 801562c:	47c0      	blx	r8
 801562e:	3001      	adds	r0, #1
 8015630:	d01e      	beq.n	8015670 <_printf_common+0xa4>
 8015632:	6823      	ldr	r3, [r4, #0]
 8015634:	6922      	ldr	r2, [r4, #16]
 8015636:	f003 0306 	and.w	r3, r3, #6
 801563a:	2b04      	cmp	r3, #4
 801563c:	bf02      	ittt	eq
 801563e:	68e5      	ldreq	r5, [r4, #12]
 8015640:	6833      	ldreq	r3, [r6, #0]
 8015642:	1aed      	subeq	r5, r5, r3
 8015644:	68a3      	ldr	r3, [r4, #8]
 8015646:	bf0c      	ite	eq
 8015648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801564c:	2500      	movne	r5, #0
 801564e:	4293      	cmp	r3, r2
 8015650:	bfc4      	itt	gt
 8015652:	1a9b      	subgt	r3, r3, r2
 8015654:	18ed      	addgt	r5, r5, r3
 8015656:	2600      	movs	r6, #0
 8015658:	341a      	adds	r4, #26
 801565a:	42b5      	cmp	r5, r6
 801565c:	d11a      	bne.n	8015694 <_printf_common+0xc8>
 801565e:	2000      	movs	r0, #0
 8015660:	e008      	b.n	8015674 <_printf_common+0xa8>
 8015662:	2301      	movs	r3, #1
 8015664:	4652      	mov	r2, sl
 8015666:	4649      	mov	r1, r9
 8015668:	4638      	mov	r0, r7
 801566a:	47c0      	blx	r8
 801566c:	3001      	adds	r0, #1
 801566e:	d103      	bne.n	8015678 <_printf_common+0xac>
 8015670:	f04f 30ff 	mov.w	r0, #4294967295
 8015674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015678:	3501      	adds	r5, #1
 801567a:	e7c6      	b.n	801560a <_printf_common+0x3e>
 801567c:	18e1      	adds	r1, r4, r3
 801567e:	1c5a      	adds	r2, r3, #1
 8015680:	2030      	movs	r0, #48	; 0x30
 8015682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015686:	4422      	add	r2, r4
 8015688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801568c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015690:	3302      	adds	r3, #2
 8015692:	e7c7      	b.n	8015624 <_printf_common+0x58>
 8015694:	2301      	movs	r3, #1
 8015696:	4622      	mov	r2, r4
 8015698:	4649      	mov	r1, r9
 801569a:	4638      	mov	r0, r7
 801569c:	47c0      	blx	r8
 801569e:	3001      	adds	r0, #1
 80156a0:	d0e6      	beq.n	8015670 <_printf_common+0xa4>
 80156a2:	3601      	adds	r6, #1
 80156a4:	e7d9      	b.n	801565a <_printf_common+0x8e>
	...

080156a8 <_printf_i>:
 80156a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156ac:	7e0f      	ldrb	r7, [r1, #24]
 80156ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80156b0:	2f78      	cmp	r7, #120	; 0x78
 80156b2:	4691      	mov	r9, r2
 80156b4:	4680      	mov	r8, r0
 80156b6:	460c      	mov	r4, r1
 80156b8:	469a      	mov	sl, r3
 80156ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80156be:	d807      	bhi.n	80156d0 <_printf_i+0x28>
 80156c0:	2f62      	cmp	r7, #98	; 0x62
 80156c2:	d80a      	bhi.n	80156da <_printf_i+0x32>
 80156c4:	2f00      	cmp	r7, #0
 80156c6:	f000 80d4 	beq.w	8015872 <_printf_i+0x1ca>
 80156ca:	2f58      	cmp	r7, #88	; 0x58
 80156cc:	f000 80c0 	beq.w	8015850 <_printf_i+0x1a8>
 80156d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80156d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80156d8:	e03a      	b.n	8015750 <_printf_i+0xa8>
 80156da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80156de:	2b15      	cmp	r3, #21
 80156e0:	d8f6      	bhi.n	80156d0 <_printf_i+0x28>
 80156e2:	a101      	add	r1, pc, #4	; (adr r1, 80156e8 <_printf_i+0x40>)
 80156e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80156e8:	08015741 	.word	0x08015741
 80156ec:	08015755 	.word	0x08015755
 80156f0:	080156d1 	.word	0x080156d1
 80156f4:	080156d1 	.word	0x080156d1
 80156f8:	080156d1 	.word	0x080156d1
 80156fc:	080156d1 	.word	0x080156d1
 8015700:	08015755 	.word	0x08015755
 8015704:	080156d1 	.word	0x080156d1
 8015708:	080156d1 	.word	0x080156d1
 801570c:	080156d1 	.word	0x080156d1
 8015710:	080156d1 	.word	0x080156d1
 8015714:	08015859 	.word	0x08015859
 8015718:	08015781 	.word	0x08015781
 801571c:	08015813 	.word	0x08015813
 8015720:	080156d1 	.word	0x080156d1
 8015724:	080156d1 	.word	0x080156d1
 8015728:	0801587b 	.word	0x0801587b
 801572c:	080156d1 	.word	0x080156d1
 8015730:	08015781 	.word	0x08015781
 8015734:	080156d1 	.word	0x080156d1
 8015738:	080156d1 	.word	0x080156d1
 801573c:	0801581b 	.word	0x0801581b
 8015740:	682b      	ldr	r3, [r5, #0]
 8015742:	1d1a      	adds	r2, r3, #4
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	602a      	str	r2, [r5, #0]
 8015748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801574c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015750:	2301      	movs	r3, #1
 8015752:	e09f      	b.n	8015894 <_printf_i+0x1ec>
 8015754:	6820      	ldr	r0, [r4, #0]
 8015756:	682b      	ldr	r3, [r5, #0]
 8015758:	0607      	lsls	r7, r0, #24
 801575a:	f103 0104 	add.w	r1, r3, #4
 801575e:	6029      	str	r1, [r5, #0]
 8015760:	d501      	bpl.n	8015766 <_printf_i+0xbe>
 8015762:	681e      	ldr	r6, [r3, #0]
 8015764:	e003      	b.n	801576e <_printf_i+0xc6>
 8015766:	0646      	lsls	r6, r0, #25
 8015768:	d5fb      	bpl.n	8015762 <_printf_i+0xba>
 801576a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801576e:	2e00      	cmp	r6, #0
 8015770:	da03      	bge.n	801577a <_printf_i+0xd2>
 8015772:	232d      	movs	r3, #45	; 0x2d
 8015774:	4276      	negs	r6, r6
 8015776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801577a:	485a      	ldr	r0, [pc, #360]	; (80158e4 <_printf_i+0x23c>)
 801577c:	230a      	movs	r3, #10
 801577e:	e012      	b.n	80157a6 <_printf_i+0xfe>
 8015780:	682b      	ldr	r3, [r5, #0]
 8015782:	6820      	ldr	r0, [r4, #0]
 8015784:	1d19      	adds	r1, r3, #4
 8015786:	6029      	str	r1, [r5, #0]
 8015788:	0605      	lsls	r5, r0, #24
 801578a:	d501      	bpl.n	8015790 <_printf_i+0xe8>
 801578c:	681e      	ldr	r6, [r3, #0]
 801578e:	e002      	b.n	8015796 <_printf_i+0xee>
 8015790:	0641      	lsls	r1, r0, #25
 8015792:	d5fb      	bpl.n	801578c <_printf_i+0xe4>
 8015794:	881e      	ldrh	r6, [r3, #0]
 8015796:	4853      	ldr	r0, [pc, #332]	; (80158e4 <_printf_i+0x23c>)
 8015798:	2f6f      	cmp	r7, #111	; 0x6f
 801579a:	bf0c      	ite	eq
 801579c:	2308      	moveq	r3, #8
 801579e:	230a      	movne	r3, #10
 80157a0:	2100      	movs	r1, #0
 80157a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80157a6:	6865      	ldr	r5, [r4, #4]
 80157a8:	60a5      	str	r5, [r4, #8]
 80157aa:	2d00      	cmp	r5, #0
 80157ac:	bfa2      	ittt	ge
 80157ae:	6821      	ldrge	r1, [r4, #0]
 80157b0:	f021 0104 	bicge.w	r1, r1, #4
 80157b4:	6021      	strge	r1, [r4, #0]
 80157b6:	b90e      	cbnz	r6, 80157bc <_printf_i+0x114>
 80157b8:	2d00      	cmp	r5, #0
 80157ba:	d04b      	beq.n	8015854 <_printf_i+0x1ac>
 80157bc:	4615      	mov	r5, r2
 80157be:	fbb6 f1f3 	udiv	r1, r6, r3
 80157c2:	fb03 6711 	mls	r7, r3, r1, r6
 80157c6:	5dc7      	ldrb	r7, [r0, r7]
 80157c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80157cc:	4637      	mov	r7, r6
 80157ce:	42bb      	cmp	r3, r7
 80157d0:	460e      	mov	r6, r1
 80157d2:	d9f4      	bls.n	80157be <_printf_i+0x116>
 80157d4:	2b08      	cmp	r3, #8
 80157d6:	d10b      	bne.n	80157f0 <_printf_i+0x148>
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	07de      	lsls	r6, r3, #31
 80157dc:	d508      	bpl.n	80157f0 <_printf_i+0x148>
 80157de:	6923      	ldr	r3, [r4, #16]
 80157e0:	6861      	ldr	r1, [r4, #4]
 80157e2:	4299      	cmp	r1, r3
 80157e4:	bfde      	ittt	le
 80157e6:	2330      	movle	r3, #48	; 0x30
 80157e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80157ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80157f0:	1b52      	subs	r2, r2, r5
 80157f2:	6122      	str	r2, [r4, #16]
 80157f4:	f8cd a000 	str.w	sl, [sp]
 80157f8:	464b      	mov	r3, r9
 80157fa:	aa03      	add	r2, sp, #12
 80157fc:	4621      	mov	r1, r4
 80157fe:	4640      	mov	r0, r8
 8015800:	f7ff fee4 	bl	80155cc <_printf_common>
 8015804:	3001      	adds	r0, #1
 8015806:	d14a      	bne.n	801589e <_printf_i+0x1f6>
 8015808:	f04f 30ff 	mov.w	r0, #4294967295
 801580c:	b004      	add	sp, #16
 801580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015812:	6823      	ldr	r3, [r4, #0]
 8015814:	f043 0320 	orr.w	r3, r3, #32
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	4833      	ldr	r0, [pc, #204]	; (80158e8 <_printf_i+0x240>)
 801581c:	2778      	movs	r7, #120	; 0x78
 801581e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	6829      	ldr	r1, [r5, #0]
 8015826:	061f      	lsls	r7, r3, #24
 8015828:	f851 6b04 	ldr.w	r6, [r1], #4
 801582c:	d402      	bmi.n	8015834 <_printf_i+0x18c>
 801582e:	065f      	lsls	r7, r3, #25
 8015830:	bf48      	it	mi
 8015832:	b2b6      	uxthmi	r6, r6
 8015834:	07df      	lsls	r7, r3, #31
 8015836:	bf48      	it	mi
 8015838:	f043 0320 	orrmi.w	r3, r3, #32
 801583c:	6029      	str	r1, [r5, #0]
 801583e:	bf48      	it	mi
 8015840:	6023      	strmi	r3, [r4, #0]
 8015842:	b91e      	cbnz	r6, 801584c <_printf_i+0x1a4>
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	f023 0320 	bic.w	r3, r3, #32
 801584a:	6023      	str	r3, [r4, #0]
 801584c:	2310      	movs	r3, #16
 801584e:	e7a7      	b.n	80157a0 <_printf_i+0xf8>
 8015850:	4824      	ldr	r0, [pc, #144]	; (80158e4 <_printf_i+0x23c>)
 8015852:	e7e4      	b.n	801581e <_printf_i+0x176>
 8015854:	4615      	mov	r5, r2
 8015856:	e7bd      	b.n	80157d4 <_printf_i+0x12c>
 8015858:	682b      	ldr	r3, [r5, #0]
 801585a:	6826      	ldr	r6, [r4, #0]
 801585c:	6961      	ldr	r1, [r4, #20]
 801585e:	1d18      	adds	r0, r3, #4
 8015860:	6028      	str	r0, [r5, #0]
 8015862:	0635      	lsls	r5, r6, #24
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	d501      	bpl.n	801586c <_printf_i+0x1c4>
 8015868:	6019      	str	r1, [r3, #0]
 801586a:	e002      	b.n	8015872 <_printf_i+0x1ca>
 801586c:	0670      	lsls	r0, r6, #25
 801586e:	d5fb      	bpl.n	8015868 <_printf_i+0x1c0>
 8015870:	8019      	strh	r1, [r3, #0]
 8015872:	2300      	movs	r3, #0
 8015874:	6123      	str	r3, [r4, #16]
 8015876:	4615      	mov	r5, r2
 8015878:	e7bc      	b.n	80157f4 <_printf_i+0x14c>
 801587a:	682b      	ldr	r3, [r5, #0]
 801587c:	1d1a      	adds	r2, r3, #4
 801587e:	602a      	str	r2, [r5, #0]
 8015880:	681d      	ldr	r5, [r3, #0]
 8015882:	6862      	ldr	r2, [r4, #4]
 8015884:	2100      	movs	r1, #0
 8015886:	4628      	mov	r0, r5
 8015888:	f7ea fcda 	bl	8000240 <memchr>
 801588c:	b108      	cbz	r0, 8015892 <_printf_i+0x1ea>
 801588e:	1b40      	subs	r0, r0, r5
 8015890:	6060      	str	r0, [r4, #4]
 8015892:	6863      	ldr	r3, [r4, #4]
 8015894:	6123      	str	r3, [r4, #16]
 8015896:	2300      	movs	r3, #0
 8015898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801589c:	e7aa      	b.n	80157f4 <_printf_i+0x14c>
 801589e:	6923      	ldr	r3, [r4, #16]
 80158a0:	462a      	mov	r2, r5
 80158a2:	4649      	mov	r1, r9
 80158a4:	4640      	mov	r0, r8
 80158a6:	47d0      	blx	sl
 80158a8:	3001      	adds	r0, #1
 80158aa:	d0ad      	beq.n	8015808 <_printf_i+0x160>
 80158ac:	6823      	ldr	r3, [r4, #0]
 80158ae:	079b      	lsls	r3, r3, #30
 80158b0:	d413      	bmi.n	80158da <_printf_i+0x232>
 80158b2:	68e0      	ldr	r0, [r4, #12]
 80158b4:	9b03      	ldr	r3, [sp, #12]
 80158b6:	4298      	cmp	r0, r3
 80158b8:	bfb8      	it	lt
 80158ba:	4618      	movlt	r0, r3
 80158bc:	e7a6      	b.n	801580c <_printf_i+0x164>
 80158be:	2301      	movs	r3, #1
 80158c0:	4632      	mov	r2, r6
 80158c2:	4649      	mov	r1, r9
 80158c4:	4640      	mov	r0, r8
 80158c6:	47d0      	blx	sl
 80158c8:	3001      	adds	r0, #1
 80158ca:	d09d      	beq.n	8015808 <_printf_i+0x160>
 80158cc:	3501      	adds	r5, #1
 80158ce:	68e3      	ldr	r3, [r4, #12]
 80158d0:	9903      	ldr	r1, [sp, #12]
 80158d2:	1a5b      	subs	r3, r3, r1
 80158d4:	42ab      	cmp	r3, r5
 80158d6:	dcf2      	bgt.n	80158be <_printf_i+0x216>
 80158d8:	e7eb      	b.n	80158b2 <_printf_i+0x20a>
 80158da:	2500      	movs	r5, #0
 80158dc:	f104 0619 	add.w	r6, r4, #25
 80158e0:	e7f5      	b.n	80158ce <_printf_i+0x226>
 80158e2:	bf00      	nop
 80158e4:	08018e5a 	.word	0x08018e5a
 80158e8:	08018e6b 	.word	0x08018e6b

080158ec <__sflush_r>:
 80158ec:	898a      	ldrh	r2, [r1, #12]
 80158ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158f2:	4605      	mov	r5, r0
 80158f4:	0710      	lsls	r0, r2, #28
 80158f6:	460c      	mov	r4, r1
 80158f8:	d458      	bmi.n	80159ac <__sflush_r+0xc0>
 80158fa:	684b      	ldr	r3, [r1, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	dc05      	bgt.n	801590c <__sflush_r+0x20>
 8015900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015902:	2b00      	cmp	r3, #0
 8015904:	dc02      	bgt.n	801590c <__sflush_r+0x20>
 8015906:	2000      	movs	r0, #0
 8015908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801590c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801590e:	2e00      	cmp	r6, #0
 8015910:	d0f9      	beq.n	8015906 <__sflush_r+0x1a>
 8015912:	2300      	movs	r3, #0
 8015914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015918:	682f      	ldr	r7, [r5, #0]
 801591a:	6a21      	ldr	r1, [r4, #32]
 801591c:	602b      	str	r3, [r5, #0]
 801591e:	d032      	beq.n	8015986 <__sflush_r+0x9a>
 8015920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015922:	89a3      	ldrh	r3, [r4, #12]
 8015924:	075a      	lsls	r2, r3, #29
 8015926:	d505      	bpl.n	8015934 <__sflush_r+0x48>
 8015928:	6863      	ldr	r3, [r4, #4]
 801592a:	1ac0      	subs	r0, r0, r3
 801592c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801592e:	b10b      	cbz	r3, 8015934 <__sflush_r+0x48>
 8015930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015932:	1ac0      	subs	r0, r0, r3
 8015934:	2300      	movs	r3, #0
 8015936:	4602      	mov	r2, r0
 8015938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801593a:	6a21      	ldr	r1, [r4, #32]
 801593c:	4628      	mov	r0, r5
 801593e:	47b0      	blx	r6
 8015940:	1c43      	adds	r3, r0, #1
 8015942:	89a3      	ldrh	r3, [r4, #12]
 8015944:	d106      	bne.n	8015954 <__sflush_r+0x68>
 8015946:	6829      	ldr	r1, [r5, #0]
 8015948:	291d      	cmp	r1, #29
 801594a:	d82b      	bhi.n	80159a4 <__sflush_r+0xb8>
 801594c:	4a29      	ldr	r2, [pc, #164]	; (80159f4 <__sflush_r+0x108>)
 801594e:	410a      	asrs	r2, r1
 8015950:	07d6      	lsls	r6, r2, #31
 8015952:	d427      	bmi.n	80159a4 <__sflush_r+0xb8>
 8015954:	2200      	movs	r2, #0
 8015956:	6062      	str	r2, [r4, #4]
 8015958:	04d9      	lsls	r1, r3, #19
 801595a:	6922      	ldr	r2, [r4, #16]
 801595c:	6022      	str	r2, [r4, #0]
 801595e:	d504      	bpl.n	801596a <__sflush_r+0x7e>
 8015960:	1c42      	adds	r2, r0, #1
 8015962:	d101      	bne.n	8015968 <__sflush_r+0x7c>
 8015964:	682b      	ldr	r3, [r5, #0]
 8015966:	b903      	cbnz	r3, 801596a <__sflush_r+0x7e>
 8015968:	6560      	str	r0, [r4, #84]	; 0x54
 801596a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801596c:	602f      	str	r7, [r5, #0]
 801596e:	2900      	cmp	r1, #0
 8015970:	d0c9      	beq.n	8015906 <__sflush_r+0x1a>
 8015972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015976:	4299      	cmp	r1, r3
 8015978:	d002      	beq.n	8015980 <__sflush_r+0x94>
 801597a:	4628      	mov	r0, r5
 801597c:	f7ff fbe2 	bl	8015144 <_free_r>
 8015980:	2000      	movs	r0, #0
 8015982:	6360      	str	r0, [r4, #52]	; 0x34
 8015984:	e7c0      	b.n	8015908 <__sflush_r+0x1c>
 8015986:	2301      	movs	r3, #1
 8015988:	4628      	mov	r0, r5
 801598a:	47b0      	blx	r6
 801598c:	1c41      	adds	r1, r0, #1
 801598e:	d1c8      	bne.n	8015922 <__sflush_r+0x36>
 8015990:	682b      	ldr	r3, [r5, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d0c5      	beq.n	8015922 <__sflush_r+0x36>
 8015996:	2b1d      	cmp	r3, #29
 8015998:	d001      	beq.n	801599e <__sflush_r+0xb2>
 801599a:	2b16      	cmp	r3, #22
 801599c:	d101      	bne.n	80159a2 <__sflush_r+0xb6>
 801599e:	602f      	str	r7, [r5, #0]
 80159a0:	e7b1      	b.n	8015906 <__sflush_r+0x1a>
 80159a2:	89a3      	ldrh	r3, [r4, #12]
 80159a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159a8:	81a3      	strh	r3, [r4, #12]
 80159aa:	e7ad      	b.n	8015908 <__sflush_r+0x1c>
 80159ac:	690f      	ldr	r7, [r1, #16]
 80159ae:	2f00      	cmp	r7, #0
 80159b0:	d0a9      	beq.n	8015906 <__sflush_r+0x1a>
 80159b2:	0793      	lsls	r3, r2, #30
 80159b4:	680e      	ldr	r6, [r1, #0]
 80159b6:	bf08      	it	eq
 80159b8:	694b      	ldreq	r3, [r1, #20]
 80159ba:	600f      	str	r7, [r1, #0]
 80159bc:	bf18      	it	ne
 80159be:	2300      	movne	r3, #0
 80159c0:	eba6 0807 	sub.w	r8, r6, r7
 80159c4:	608b      	str	r3, [r1, #8]
 80159c6:	f1b8 0f00 	cmp.w	r8, #0
 80159ca:	dd9c      	ble.n	8015906 <__sflush_r+0x1a>
 80159cc:	6a21      	ldr	r1, [r4, #32]
 80159ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159d0:	4643      	mov	r3, r8
 80159d2:	463a      	mov	r2, r7
 80159d4:	4628      	mov	r0, r5
 80159d6:	47b0      	blx	r6
 80159d8:	2800      	cmp	r0, #0
 80159da:	dc06      	bgt.n	80159ea <__sflush_r+0xfe>
 80159dc:	89a3      	ldrh	r3, [r4, #12]
 80159de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159e2:	81a3      	strh	r3, [r4, #12]
 80159e4:	f04f 30ff 	mov.w	r0, #4294967295
 80159e8:	e78e      	b.n	8015908 <__sflush_r+0x1c>
 80159ea:	4407      	add	r7, r0
 80159ec:	eba8 0800 	sub.w	r8, r8, r0
 80159f0:	e7e9      	b.n	80159c6 <__sflush_r+0xda>
 80159f2:	bf00      	nop
 80159f4:	dfbffffe 	.word	0xdfbffffe

080159f8 <_fflush_r>:
 80159f8:	b538      	push	{r3, r4, r5, lr}
 80159fa:	690b      	ldr	r3, [r1, #16]
 80159fc:	4605      	mov	r5, r0
 80159fe:	460c      	mov	r4, r1
 8015a00:	b913      	cbnz	r3, 8015a08 <_fflush_r+0x10>
 8015a02:	2500      	movs	r5, #0
 8015a04:	4628      	mov	r0, r5
 8015a06:	bd38      	pop	{r3, r4, r5, pc}
 8015a08:	b118      	cbz	r0, 8015a12 <_fflush_r+0x1a>
 8015a0a:	6a03      	ldr	r3, [r0, #32]
 8015a0c:	b90b      	cbnz	r3, 8015a12 <_fflush_r+0x1a>
 8015a0e:	f7ff fa05 	bl	8014e1c <__sinit>
 8015a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d0f3      	beq.n	8015a02 <_fflush_r+0xa>
 8015a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a1c:	07d0      	lsls	r0, r2, #31
 8015a1e:	d404      	bmi.n	8015a2a <_fflush_r+0x32>
 8015a20:	0599      	lsls	r1, r3, #22
 8015a22:	d402      	bmi.n	8015a2a <_fflush_r+0x32>
 8015a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a26:	f7ff fb5e 	bl	80150e6 <__retarget_lock_acquire_recursive>
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	f7ff ff5d 	bl	80158ec <__sflush_r>
 8015a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a34:	07da      	lsls	r2, r3, #31
 8015a36:	4605      	mov	r5, r0
 8015a38:	d4e4      	bmi.n	8015a04 <_fflush_r+0xc>
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	059b      	lsls	r3, r3, #22
 8015a3e:	d4e1      	bmi.n	8015a04 <_fflush_r+0xc>
 8015a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a42:	f7ff fb51 	bl	80150e8 <__retarget_lock_release_recursive>
 8015a46:	e7dd      	b.n	8015a04 <_fflush_r+0xc>

08015a48 <fiprintf>:
 8015a48:	b40e      	push	{r1, r2, r3}
 8015a4a:	b503      	push	{r0, r1, lr}
 8015a4c:	4601      	mov	r1, r0
 8015a4e:	ab03      	add	r3, sp, #12
 8015a50:	4805      	ldr	r0, [pc, #20]	; (8015a68 <fiprintf+0x20>)
 8015a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a56:	6800      	ldr	r0, [r0, #0]
 8015a58:	9301      	str	r3, [sp, #4]
 8015a5a:	f7ff fc9d 	bl	8015398 <_vfiprintf_r>
 8015a5e:	b002      	add	sp, #8
 8015a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a64:	b003      	add	sp, #12
 8015a66:	4770      	bx	lr
 8015a68:	20000078 	.word	0x20000078

08015a6c <__swbuf_r>:
 8015a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a6e:	460e      	mov	r6, r1
 8015a70:	4614      	mov	r4, r2
 8015a72:	4605      	mov	r5, r0
 8015a74:	b118      	cbz	r0, 8015a7e <__swbuf_r+0x12>
 8015a76:	6a03      	ldr	r3, [r0, #32]
 8015a78:	b90b      	cbnz	r3, 8015a7e <__swbuf_r+0x12>
 8015a7a:	f7ff f9cf 	bl	8014e1c <__sinit>
 8015a7e:	69a3      	ldr	r3, [r4, #24]
 8015a80:	60a3      	str	r3, [r4, #8]
 8015a82:	89a3      	ldrh	r3, [r4, #12]
 8015a84:	071a      	lsls	r2, r3, #28
 8015a86:	d525      	bpl.n	8015ad4 <__swbuf_r+0x68>
 8015a88:	6923      	ldr	r3, [r4, #16]
 8015a8a:	b31b      	cbz	r3, 8015ad4 <__swbuf_r+0x68>
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	6922      	ldr	r2, [r4, #16]
 8015a90:	1a98      	subs	r0, r3, r2
 8015a92:	6963      	ldr	r3, [r4, #20]
 8015a94:	b2f6      	uxtb	r6, r6
 8015a96:	4283      	cmp	r3, r0
 8015a98:	4637      	mov	r7, r6
 8015a9a:	dc04      	bgt.n	8015aa6 <__swbuf_r+0x3a>
 8015a9c:	4621      	mov	r1, r4
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	f7ff ffaa 	bl	80159f8 <_fflush_r>
 8015aa4:	b9e0      	cbnz	r0, 8015ae0 <__swbuf_r+0x74>
 8015aa6:	68a3      	ldr	r3, [r4, #8]
 8015aa8:	3b01      	subs	r3, #1
 8015aaa:	60a3      	str	r3, [r4, #8]
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	1c5a      	adds	r2, r3, #1
 8015ab0:	6022      	str	r2, [r4, #0]
 8015ab2:	701e      	strb	r6, [r3, #0]
 8015ab4:	6962      	ldr	r2, [r4, #20]
 8015ab6:	1c43      	adds	r3, r0, #1
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d004      	beq.n	8015ac6 <__swbuf_r+0x5a>
 8015abc:	89a3      	ldrh	r3, [r4, #12]
 8015abe:	07db      	lsls	r3, r3, #31
 8015ac0:	d506      	bpl.n	8015ad0 <__swbuf_r+0x64>
 8015ac2:	2e0a      	cmp	r6, #10
 8015ac4:	d104      	bne.n	8015ad0 <__swbuf_r+0x64>
 8015ac6:	4621      	mov	r1, r4
 8015ac8:	4628      	mov	r0, r5
 8015aca:	f7ff ff95 	bl	80159f8 <_fflush_r>
 8015ace:	b938      	cbnz	r0, 8015ae0 <__swbuf_r+0x74>
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad4:	4621      	mov	r1, r4
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	f000 f806 	bl	8015ae8 <__swsetup_r>
 8015adc:	2800      	cmp	r0, #0
 8015ade:	d0d5      	beq.n	8015a8c <__swbuf_r+0x20>
 8015ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8015ae4:	e7f4      	b.n	8015ad0 <__swbuf_r+0x64>
	...

08015ae8 <__swsetup_r>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4b2a      	ldr	r3, [pc, #168]	; (8015b94 <__swsetup_r+0xac>)
 8015aec:	4605      	mov	r5, r0
 8015aee:	6818      	ldr	r0, [r3, #0]
 8015af0:	460c      	mov	r4, r1
 8015af2:	b118      	cbz	r0, 8015afc <__swsetup_r+0x14>
 8015af4:	6a03      	ldr	r3, [r0, #32]
 8015af6:	b90b      	cbnz	r3, 8015afc <__swsetup_r+0x14>
 8015af8:	f7ff f990 	bl	8014e1c <__sinit>
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b02:	0718      	lsls	r0, r3, #28
 8015b04:	d422      	bmi.n	8015b4c <__swsetup_r+0x64>
 8015b06:	06d9      	lsls	r1, r3, #27
 8015b08:	d407      	bmi.n	8015b1a <__swsetup_r+0x32>
 8015b0a:	2309      	movs	r3, #9
 8015b0c:	602b      	str	r3, [r5, #0]
 8015b0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015b12:	81a3      	strh	r3, [r4, #12]
 8015b14:	f04f 30ff 	mov.w	r0, #4294967295
 8015b18:	e034      	b.n	8015b84 <__swsetup_r+0x9c>
 8015b1a:	0758      	lsls	r0, r3, #29
 8015b1c:	d512      	bpl.n	8015b44 <__swsetup_r+0x5c>
 8015b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b20:	b141      	cbz	r1, 8015b34 <__swsetup_r+0x4c>
 8015b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b26:	4299      	cmp	r1, r3
 8015b28:	d002      	beq.n	8015b30 <__swsetup_r+0x48>
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7ff fb0a 	bl	8015144 <_free_r>
 8015b30:	2300      	movs	r3, #0
 8015b32:	6363      	str	r3, [r4, #52]	; 0x34
 8015b34:	89a3      	ldrh	r3, [r4, #12]
 8015b36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b3a:	81a3      	strh	r3, [r4, #12]
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	6063      	str	r3, [r4, #4]
 8015b40:	6923      	ldr	r3, [r4, #16]
 8015b42:	6023      	str	r3, [r4, #0]
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	f043 0308 	orr.w	r3, r3, #8
 8015b4a:	81a3      	strh	r3, [r4, #12]
 8015b4c:	6923      	ldr	r3, [r4, #16]
 8015b4e:	b94b      	cbnz	r3, 8015b64 <__swsetup_r+0x7c>
 8015b50:	89a3      	ldrh	r3, [r4, #12]
 8015b52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b5a:	d003      	beq.n	8015b64 <__swsetup_r+0x7c>
 8015b5c:	4621      	mov	r1, r4
 8015b5e:	4628      	mov	r0, r5
 8015b60:	f000 f857 	bl	8015c12 <__smakebuf_r>
 8015b64:	89a0      	ldrh	r0, [r4, #12]
 8015b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b6a:	f010 0301 	ands.w	r3, r0, #1
 8015b6e:	d00a      	beq.n	8015b86 <__swsetup_r+0x9e>
 8015b70:	2300      	movs	r3, #0
 8015b72:	60a3      	str	r3, [r4, #8]
 8015b74:	6963      	ldr	r3, [r4, #20]
 8015b76:	425b      	negs	r3, r3
 8015b78:	61a3      	str	r3, [r4, #24]
 8015b7a:	6923      	ldr	r3, [r4, #16]
 8015b7c:	b943      	cbnz	r3, 8015b90 <__swsetup_r+0xa8>
 8015b7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b82:	d1c4      	bne.n	8015b0e <__swsetup_r+0x26>
 8015b84:	bd38      	pop	{r3, r4, r5, pc}
 8015b86:	0781      	lsls	r1, r0, #30
 8015b88:	bf58      	it	pl
 8015b8a:	6963      	ldrpl	r3, [r4, #20]
 8015b8c:	60a3      	str	r3, [r4, #8]
 8015b8e:	e7f4      	b.n	8015b7a <__swsetup_r+0x92>
 8015b90:	2000      	movs	r0, #0
 8015b92:	e7f7      	b.n	8015b84 <__swsetup_r+0x9c>
 8015b94:	20000078 	.word	0x20000078

08015b98 <_sbrk_r>:
 8015b98:	b538      	push	{r3, r4, r5, lr}
 8015b9a:	4d06      	ldr	r5, [pc, #24]	; (8015bb4 <_sbrk_r+0x1c>)
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	4608      	mov	r0, r1
 8015ba2:	602b      	str	r3, [r5, #0]
 8015ba4:	f7eb f874 	bl	8000c90 <_sbrk>
 8015ba8:	1c43      	adds	r3, r0, #1
 8015baa:	d102      	bne.n	8015bb2 <_sbrk_r+0x1a>
 8015bac:	682b      	ldr	r3, [r5, #0]
 8015bae:	b103      	cbz	r3, 8015bb2 <_sbrk_r+0x1a>
 8015bb0:	6023      	str	r3, [r4, #0]
 8015bb2:	bd38      	pop	{r3, r4, r5, pc}
 8015bb4:	2000d68c 	.word	0x2000d68c

08015bb8 <abort>:
 8015bb8:	b508      	push	{r3, lr}
 8015bba:	2006      	movs	r0, #6
 8015bbc:	f000 f88e 	bl	8015cdc <raise>
 8015bc0:	2001      	movs	r0, #1
 8015bc2:	f7ea ffed 	bl	8000ba0 <_exit>

08015bc6 <__swhatbuf_r>:
 8015bc6:	b570      	push	{r4, r5, r6, lr}
 8015bc8:	460c      	mov	r4, r1
 8015bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bce:	2900      	cmp	r1, #0
 8015bd0:	b096      	sub	sp, #88	; 0x58
 8015bd2:	4615      	mov	r5, r2
 8015bd4:	461e      	mov	r6, r3
 8015bd6:	da0d      	bge.n	8015bf4 <__swhatbuf_r+0x2e>
 8015bd8:	89a3      	ldrh	r3, [r4, #12]
 8015bda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015bde:	f04f 0100 	mov.w	r1, #0
 8015be2:	bf0c      	ite	eq
 8015be4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015be8:	2340      	movne	r3, #64	; 0x40
 8015bea:	2000      	movs	r0, #0
 8015bec:	6031      	str	r1, [r6, #0]
 8015bee:	602b      	str	r3, [r5, #0]
 8015bf0:	b016      	add	sp, #88	; 0x58
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}
 8015bf4:	466a      	mov	r2, sp
 8015bf6:	f000 f879 	bl	8015cec <_fstat_r>
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	dbec      	blt.n	8015bd8 <__swhatbuf_r+0x12>
 8015bfe:	9901      	ldr	r1, [sp, #4]
 8015c00:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015c04:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015c08:	4259      	negs	r1, r3
 8015c0a:	4159      	adcs	r1, r3
 8015c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c10:	e7eb      	b.n	8015bea <__swhatbuf_r+0x24>

08015c12 <__smakebuf_r>:
 8015c12:	898b      	ldrh	r3, [r1, #12]
 8015c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c16:	079d      	lsls	r5, r3, #30
 8015c18:	4606      	mov	r6, r0
 8015c1a:	460c      	mov	r4, r1
 8015c1c:	d507      	bpl.n	8015c2e <__smakebuf_r+0x1c>
 8015c1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c22:	6023      	str	r3, [r4, #0]
 8015c24:	6123      	str	r3, [r4, #16]
 8015c26:	2301      	movs	r3, #1
 8015c28:	6163      	str	r3, [r4, #20]
 8015c2a:	b002      	add	sp, #8
 8015c2c:	bd70      	pop	{r4, r5, r6, pc}
 8015c2e:	ab01      	add	r3, sp, #4
 8015c30:	466a      	mov	r2, sp
 8015c32:	f7ff ffc8 	bl	8015bc6 <__swhatbuf_r>
 8015c36:	9900      	ldr	r1, [sp, #0]
 8015c38:	4605      	mov	r5, r0
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7ff faf6 	bl	801522c <_malloc_r>
 8015c40:	b948      	cbnz	r0, 8015c56 <__smakebuf_r+0x44>
 8015c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c46:	059a      	lsls	r2, r3, #22
 8015c48:	d4ef      	bmi.n	8015c2a <__smakebuf_r+0x18>
 8015c4a:	f023 0303 	bic.w	r3, r3, #3
 8015c4e:	f043 0302 	orr.w	r3, r3, #2
 8015c52:	81a3      	strh	r3, [r4, #12]
 8015c54:	e7e3      	b.n	8015c1e <__smakebuf_r+0xc>
 8015c56:	89a3      	ldrh	r3, [r4, #12]
 8015c58:	6020      	str	r0, [r4, #0]
 8015c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c5e:	81a3      	strh	r3, [r4, #12]
 8015c60:	9b00      	ldr	r3, [sp, #0]
 8015c62:	6163      	str	r3, [r4, #20]
 8015c64:	9b01      	ldr	r3, [sp, #4]
 8015c66:	6120      	str	r0, [r4, #16]
 8015c68:	b15b      	cbz	r3, 8015c82 <__smakebuf_r+0x70>
 8015c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c6e:	4630      	mov	r0, r6
 8015c70:	f000 f84e 	bl	8015d10 <_isatty_r>
 8015c74:	b128      	cbz	r0, 8015c82 <__smakebuf_r+0x70>
 8015c76:	89a3      	ldrh	r3, [r4, #12]
 8015c78:	f023 0303 	bic.w	r3, r3, #3
 8015c7c:	f043 0301 	orr.w	r3, r3, #1
 8015c80:	81a3      	strh	r3, [r4, #12]
 8015c82:	89a3      	ldrh	r3, [r4, #12]
 8015c84:	431d      	orrs	r5, r3
 8015c86:	81a5      	strh	r5, [r4, #12]
 8015c88:	e7cf      	b.n	8015c2a <__smakebuf_r+0x18>

08015c8a <_raise_r>:
 8015c8a:	291f      	cmp	r1, #31
 8015c8c:	b538      	push	{r3, r4, r5, lr}
 8015c8e:	4604      	mov	r4, r0
 8015c90:	460d      	mov	r5, r1
 8015c92:	d904      	bls.n	8015c9e <_raise_r+0x14>
 8015c94:	2316      	movs	r3, #22
 8015c96:	6003      	str	r3, [r0, #0]
 8015c98:	f04f 30ff 	mov.w	r0, #4294967295
 8015c9c:	bd38      	pop	{r3, r4, r5, pc}
 8015c9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015ca0:	b112      	cbz	r2, 8015ca8 <_raise_r+0x1e>
 8015ca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ca6:	b94b      	cbnz	r3, 8015cbc <_raise_r+0x32>
 8015ca8:	4620      	mov	r0, r4
 8015caa:	f000 f853 	bl	8015d54 <_getpid_r>
 8015cae:	462a      	mov	r2, r5
 8015cb0:	4601      	mov	r1, r0
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cb8:	f000 b83a 	b.w	8015d30 <_kill_r>
 8015cbc:	2b01      	cmp	r3, #1
 8015cbe:	d00a      	beq.n	8015cd6 <_raise_r+0x4c>
 8015cc0:	1c59      	adds	r1, r3, #1
 8015cc2:	d103      	bne.n	8015ccc <_raise_r+0x42>
 8015cc4:	2316      	movs	r3, #22
 8015cc6:	6003      	str	r3, [r0, #0]
 8015cc8:	2001      	movs	r0, #1
 8015cca:	e7e7      	b.n	8015c9c <_raise_r+0x12>
 8015ccc:	2400      	movs	r4, #0
 8015cce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	4798      	blx	r3
 8015cd6:	2000      	movs	r0, #0
 8015cd8:	e7e0      	b.n	8015c9c <_raise_r+0x12>
	...

08015cdc <raise>:
 8015cdc:	4b02      	ldr	r3, [pc, #8]	; (8015ce8 <raise+0xc>)
 8015cde:	4601      	mov	r1, r0
 8015ce0:	6818      	ldr	r0, [r3, #0]
 8015ce2:	f7ff bfd2 	b.w	8015c8a <_raise_r>
 8015ce6:	bf00      	nop
 8015ce8:	20000078 	.word	0x20000078

08015cec <_fstat_r>:
 8015cec:	b538      	push	{r3, r4, r5, lr}
 8015cee:	4d07      	ldr	r5, [pc, #28]	; (8015d0c <_fstat_r+0x20>)
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	4608      	mov	r0, r1
 8015cf6:	4611      	mov	r1, r2
 8015cf8:	602b      	str	r3, [r5, #0]
 8015cfa:	f7ea ffa0 	bl	8000c3e <_fstat>
 8015cfe:	1c43      	adds	r3, r0, #1
 8015d00:	d102      	bne.n	8015d08 <_fstat_r+0x1c>
 8015d02:	682b      	ldr	r3, [r5, #0]
 8015d04:	b103      	cbz	r3, 8015d08 <_fstat_r+0x1c>
 8015d06:	6023      	str	r3, [r4, #0]
 8015d08:	bd38      	pop	{r3, r4, r5, pc}
 8015d0a:	bf00      	nop
 8015d0c:	2000d68c 	.word	0x2000d68c

08015d10 <_isatty_r>:
 8015d10:	b538      	push	{r3, r4, r5, lr}
 8015d12:	4d06      	ldr	r5, [pc, #24]	; (8015d2c <_isatty_r+0x1c>)
 8015d14:	2300      	movs	r3, #0
 8015d16:	4604      	mov	r4, r0
 8015d18:	4608      	mov	r0, r1
 8015d1a:	602b      	str	r3, [r5, #0]
 8015d1c:	f7ea ff9f 	bl	8000c5e <_isatty>
 8015d20:	1c43      	adds	r3, r0, #1
 8015d22:	d102      	bne.n	8015d2a <_isatty_r+0x1a>
 8015d24:	682b      	ldr	r3, [r5, #0]
 8015d26:	b103      	cbz	r3, 8015d2a <_isatty_r+0x1a>
 8015d28:	6023      	str	r3, [r4, #0]
 8015d2a:	bd38      	pop	{r3, r4, r5, pc}
 8015d2c:	2000d68c 	.word	0x2000d68c

08015d30 <_kill_r>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4d07      	ldr	r5, [pc, #28]	; (8015d50 <_kill_r+0x20>)
 8015d34:	2300      	movs	r3, #0
 8015d36:	4604      	mov	r4, r0
 8015d38:	4608      	mov	r0, r1
 8015d3a:	4611      	mov	r1, r2
 8015d3c:	602b      	str	r3, [r5, #0]
 8015d3e:	f7ea ff1d 	bl	8000b7c <_kill>
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	d102      	bne.n	8015d4c <_kill_r+0x1c>
 8015d46:	682b      	ldr	r3, [r5, #0]
 8015d48:	b103      	cbz	r3, 8015d4c <_kill_r+0x1c>
 8015d4a:	6023      	str	r3, [r4, #0]
 8015d4c:	bd38      	pop	{r3, r4, r5, pc}
 8015d4e:	bf00      	nop
 8015d50:	2000d68c 	.word	0x2000d68c

08015d54 <_getpid_r>:
 8015d54:	f7ea bf09 	b.w	8000b6a <_getpid>

08015d58 <_init>:
 8015d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d5a:	bf00      	nop
 8015d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d5e:	bc08      	pop	{r3}
 8015d60:	469e      	mov	lr, r3
 8015d62:	4770      	bx	lr

08015d64 <_fini>:
 8015d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d66:	bf00      	nop
 8015d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d6a:	bc08      	pop	{r3}
 8015d6c:	469e      	mov	lr, r3
 8015d6e:	4770      	bx	lr
