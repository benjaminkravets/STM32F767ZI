
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ba0  08011c28  08011c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157c8  080157c8  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  080157c8  080157c8  000257c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157d0  080157d0  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157d0  080157d0  000257d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157d4  080157d4  000257d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080157d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08015860  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08015900  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008cf0  200001c8  080159a0  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008eb8  080159a0  00038eb8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022dbf  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ded  00000000  00000000  00052ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001968  00000000  00000000  00058de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001423  00000000  00000000  0005a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003595c  00000000  00000000  0005bb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002c237  00000000  00000000  000914cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010debb  00000000  00000000  000bd706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007070  00000000  00000000  001cb5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001d2634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08011c10 	.word	0x08011c10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08011c10 	.word	0x08011c10

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fd16 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f80e 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f8dc 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f87c 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000620:	f000 f8aa 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000624:	f004 fb2c 	bl	8004c80 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  httpd_init();
 8000628:	f005 fe5c 	bl	80062e4 <httpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800062c:	f004 fc74 	bl	8004f18 <MX_LWIP_Process>
 8000630:	e7fc      	b.n	800062c <main+0x20>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f010 fc19 	bl	8010e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f002 fa5a 	bl	8002b10 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <SystemClock_Config+0xdc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a2b      	ldr	r2, [pc, #172]	; (8000710 <SystemClock_Config+0xdc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xdc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a25      	ldr	r2, [pc, #148]	; (8000714 <SystemClock_Config+0xe0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xe0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fa87 	bl	8002bd0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 f926 	bl	8000918 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f002 fa30 	bl	8002b30 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d6:	f000 f91f 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2103      	movs	r1, #3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fd18 	bl	800312c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000702:	f000 f909 	bl	8000918 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f003 fb34 	bl	8003dc8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8d7 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001e4 	.word	0x200001e4
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2206      	movs	r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f002 f85f 	bl	800287e <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8a7 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000026c 	.word	0x2000026c

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MX_GPIO_Init+0x134>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <MX_GPIO_Init+0x134>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <MX_GPIO_Init+0x134>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x134>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x138>)
 8000882:	f001 ffe3 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x13c>)
 800088c:	f001 ffde 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x140>)
 80008a8:	f001 fe24 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ac:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x138>)
 80008c6:	f001 fe15 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 fe07 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008fa:	f001 fdfb 	bl	80024f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ae      	sub	sp, #184	; 0xb8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2290      	movs	r2, #144	; 0x90
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f010 fa74 	bl	8010e7a <memset>
  if(huart->Instance==USART3)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <HAL_UART_MspInit+0xb4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13c      	bne.n	8000a16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fde4 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009b6:	f7ff ffaf 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a04:	2307      	movs	r3, #7
 8000a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0xbc>)
 8000a12:	f001 fd6f 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	37b8      	adds	r7, #184	; 0xb8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004800 	.word	0x40004800
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0ae      	sub	sp, #184	; 0xb8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2290      	movs	r2, #144	; 0x90
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f010 fa14 	bl	8010e7a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5a:	d159      	bne.n	8000b10 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fd83 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a78:	f7ff ff4e 	bl	8000918 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <HAL_PCD_MspInit+0xf0>)
 8000abc:	f001 fd1a 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4810      	ldr	r0, [pc, #64]	; (8000b1c <HAL_PCD_MspInit+0xf0>)
 8000adc:	f001 fd0a 	bl	80024f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aea:	6353      	str	r3, [r2, #52]	; 0x34
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <HAL_PCD_MspInit+0xec>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	37b8      	adds	r7, #184	; 0xb8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 faa6 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return 1;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_kill>:

int _kill(int pid, int sig)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <_kill+0x20>)
 8000b90:	2216      	movs	r2, #22
 8000b92:	601a      	str	r2, [r3, #0]
  return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	20008ea8 	.word	0x20008ea8

08000ba8 <_exit>:

void _exit (int status)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ffe5 	bl	8000b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bba:	e7fe      	b.n	8000bba <_exit+0x12>

08000bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bce:	f3af 8000 	nop.w
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <_read+0x12>
  }

  return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e009      	b.n	8000c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf1      	blt.n	8000c08 <_write+0x12>
  }
  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c56:	605a      	str	r2, [r3, #4]
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_isatty>:

int _isatty(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d205      	bcs.n	8000cd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <_sbrk+0x6c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	371c      	adds	r7, #28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20080000 	.word	0x20080000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000774 	.word	0x20000774
 8000d00:	20008eb8 	.word	0x20008eb8
 8000d04:	20008ea8 	.word	0x20008ea8

08000d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ffd7 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f010 f8fb 	bl	8010f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc55 	bl	800060c <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d70:	080157d8 	.word	0x080157d8
  ldr r2, =_sbss
 8000d74:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000d78:	20008eb8 	.word	0x20008eb8

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>

08000d7e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <LAN8742_RegisterBusIO+0x28>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <LAN8742_RegisterBusIO+0x28>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <LAN8742_RegisterBusIO+0x28>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e014      	b.n	8000dd6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d17c      	bne.n	8000efc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e01c      	b.n	8000e56 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f107 0208 	add.w	r2, r7, #8
 8000e24:	2112      	movs	r1, #18
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	4798      	blx	r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da03      	bge.n	8000e38 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000e30:	f06f 0304 	mvn.w	r3, #4
 8000e34:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e36:	e00b      	b.n	8000e50 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d105      	bne.n	8000e50 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
         break;
 8000e4e:	e005      	b.n	8000e5c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b1f      	cmp	r3, #31
 8000e5a:	d9df      	bls.n	8000e1c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b1f      	cmp	r3, #31
 8000e62:	d902      	bls.n	8000e6a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e64:	f06f 0302 	mvn.w	r3, #2
 8000e68:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d145      	bne.n	8000efc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6810      	ldr	r0, [r2, #0]
 8000e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4798      	blx	r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db37      	blt.n	8000ef6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6810      	ldr	r0, [r2, #0]
 8000e8e:	f107 0208 	add.w	r2, r7, #8
 8000e92:	2100      	movs	r1, #0
 8000e94:	4798      	blx	r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db28      	blt.n	8000eee <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4798      	blx	r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ea6:	e01c      	b.n	8000ee2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4798      	blx	r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eba:	d80e      	bhi.n	8000eda <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6810      	ldr	r0, [r2, #0]
 8000ec4:	f107 0208 	add.w	r2, r7, #8
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4798      	blx	r3
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da07      	bge.n	8000ee2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000ed2:	f06f 0304 	mvn.w	r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
                 break;
 8000ed8:	e010      	b.n	8000efc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000eda:	f06f 0301 	mvn.w	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
               break;
 8000ee0:	e00c      	b.n	8000efc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1dd      	bne.n	8000ea8 <LAN8742_Init+0xc6>
 8000eec:	e006      	b.n	8000efc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000eee:	f06f 0304 	mvn.w	r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e002      	b.n	8000efc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000ef6:	f06f 0303 	mvn.w	r3, #3
 8000efa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d112      	bne.n	8000f28 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4798      	blx	r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f0c:	bf00      	nop
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4798      	blx	r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f20:	d9f5      	bls.n	8000f0e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000f28:	693b      	ldr	r3, [r7, #16]
 }
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6810      	ldr	r0, [r2, #0]
 8000f46:	f107 020c 	add.w	r2, r7, #12
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4798      	blx	r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da02      	bge.n	8000f5a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f54:	f06f 0304 	mvn.w	r3, #4
 8000f58:	e06e      	b.n	8001038 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6810      	ldr	r0, [r2, #0]
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	2101      	movs	r1, #1
 8000f68:	4798      	blx	r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da02      	bge.n	8000f76 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f70:	f06f 0304 	mvn.w	r3, #4
 8000f74:	e060      	b.n	8001038 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f80:	2301      	movs	r3, #1
 8000f82:	e059      	b.n	8001038 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6810      	ldr	r0, [r2, #0]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	2100      	movs	r1, #0
 8000f92:	4798      	blx	r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da02      	bge.n	8000fa0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f9a:	f06f 0304 	mvn.w	r3, #4
 8000f9e:	e04b      	b.n	8001038 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11b      	bne.n	8000fe2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <LAN8742_GetLinkState+0x90>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e03a      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e033      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e02c      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e02a      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6810      	ldr	r0, [r2, #0]
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	211f      	movs	r1, #31
 8000ff0:	4798      	blx	r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da02      	bge.n	8000ffe <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ff8:	f06f 0304 	mvn.w	r3, #4
 8000ffc:	e01c      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001008:	2306      	movs	r3, #6
 800100a:	e015      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 031c 	and.w	r3, r3, #28
 8001012:	2b18      	cmp	r3, #24
 8001014:	d101      	bne.n	800101a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001016:	2302      	movs	r3, #2
 8001018:	e00e      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f003 031c 	and.w	r3, r3, #28
 8001020:	2b08      	cmp	r3, #8
 8001022:	d101      	bne.n	8001028 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001024:	2303      	movs	r3, #3
 8001026:	e007      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 031c 	and.w	r3, r3, #28
 800102e:	2b14      	cmp	r3, #20
 8001030:	d101      	bne.n	8001036 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001032:	2304      	movs	r3, #4
 8001034:	e000      	b.n	8001038 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001036:	2305      	movs	r3, #5
    }				
  }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f92f 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f806 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fc68 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f93b 	bl	80012f6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f911 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000778 	.word	0x20000778

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000778 	.word	0x20000778

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	4313      	orrs	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	05fa0000 	.word	0x05fa0000

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff47 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff5c 	bl	800118c <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff8e 	bl	80011fc <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffb0 	bl	8001264 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06a      	b.n	80013f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2223      	movs	r2, #35	; 0x23
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f003 ffd7 	bl	80052e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_ETH_Init+0xf0>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_ETH_Init+0xf0>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_ETH_Init+0xf0>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_ETH_Init+0xf4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <HAL_ETH_Init+0xf4>)
 8001358:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800135c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_ETH_Init+0xf4>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4927      	ldr	r1, [pc, #156]	; (8001404 <HAL_ETH_Init+0xf4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_ETH_Init+0xf4>)
 800136e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff feac 	bl	80010e4 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800138e:	e011      	b.n	80013b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001390:	f7ff fea8 	bl	80010e4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800139e:	d909      	bls.n	80013b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2204      	movs	r2, #4
 80013a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	22e0      	movs	r2, #224	; 0xe0
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e021      	b.n	80013f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e4      	bne.n	8001390 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fdf0 	bl	8001fac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fe97 	bl	8002100 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 feed 	bl	80021b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fe55 	bl	8002090 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2210      	movs	r2, #16
 80013f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800

08001408 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001416:	2b10      	cmp	r3, #16
 8001418:	d150      	bne.n	80014bc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2223      	movs	r2, #35	; 0x23
 800141e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f9fd 	bl	8001828 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 0208 	orr.w	r2, r2, #8
 800143c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fe58 	bl	80010fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0204 	orr.w	r2, r2, #4
 8001462:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fe45 	bl	80010fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fc36 	bl	8001cec <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001496:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ae:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2223      	movs	r2, #35	; 0x23
 80014b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e000      	b.n	80014be <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
  }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d4:	2b23      	cmp	r3, #35	; 0x23
 80014d6:	d14a      	bne.n	800156e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2223      	movs	r2, #35	; 0x23
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	f023 0302 	bic.w	r3, r3, #2
 800150a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800150e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fde7 	bl	80010fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fbd8 	bl	8001cec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0208 	bic.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fdd1 	bl	80010fc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2210      	movs	r2, #16
 8001566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07c      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a4:	2b23      	cmp	r3, #35	; 0x23
 80015a6:	d176      	bne.n	8001696 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015a8:	2200      	movs	r2, #0
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fe6d 	bl	800228c <ETH_Prepare_Tx_Descriptors>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	f043 0202 	orr.w	r2, r3, #2
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e065      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015cc:	f3bf 8f4f 	dsb	sy
}
 80015d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3206      	adds	r2, #6
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d904      	bls.n	80015fc <HAL_ETH_Transmit+0x84>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	1f1a      	subs	r2, r3, #4
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3106      	adds	r1, #6
 8001608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800160c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001610:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001612:	f7ff fd67 	bl	80010e4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001618:	e037      	b.n	800168a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d011      	beq.n	8001650 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	f043 0208 	orr.w	r2, r3, #8
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e023      	b.n	8001698 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001656:	d018      	beq.n	800168a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001658:	f7ff fd44 	bl	80010e4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d302      	bcc.n	800166e <HAL_ETH_Transmit+0xf6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001684:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e006      	b.n	8001698 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dbc3      	blt.n	800161a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a8      	b.n	800181e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d2:	2b23      	cmp	r3, #35	; 0x23
 80016d4:	d001      	beq.n	80016da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0a1      	b.n	800181e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	3212      	adds	r2, #18
 80016e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016f0:	f1c3 0304 	rsb	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016f6:	e06a      	b.n	80017ce <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <HAL_ETH_ReadData+0x88>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d040      	beq.n	80017aa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800175c:	3b04      	subs	r3, #4
 800175e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001784:	461a      	mov	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f003 ff6f 	bl	800566c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	441a      	add	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d902      	bls.n	80017bc <HAL_ETH_ReadData+0x11c>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b04      	subs	r3, #4
 80017ba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	3212      	adds	r2, #18
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db06      	blt.n	80017e4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d202      	bcs.n	80017e4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d089      	beq.n	80016f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	441a      	add	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f815 	bl	8001828 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001834:	2301      	movs	r3, #1
 8001836:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800183c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	3212      	adds	r2, #18
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001850:	e040      	b.n	80018d4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d112      	bne.n	8001880 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fed4 	bl	800560c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	74fb      	strb	r3, [r7, #19]
 800186e:	e007      	b.n	8001880 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	461a      	mov	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	461a      	mov	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d026      	beq.n	80018d4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <ETH_UpdateDescriptor+0xe4>)
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	e003      	b.n	800189e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800189c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800189e:	f3bf 8f5f 	dmb	sy
}
 80018a2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d902      	bls.n	80018c2 <ETH_UpdateDescriptor+0x9a>
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3b04      	subs	r3, #4
 80018c0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	3212      	adds	r2, #18
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	617b      	str	r3, [r7, #20]
      desccount--;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <ETH_UpdateDescriptor+0xb8>
 80018da:	7cfb      	ldrb	r3, [r7, #19]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1b8      	bne.n	8001852 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d00c      	beq.n	8001904 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	461a      	mov	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	80004600 	.word	0x80004600

08001910 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 031c 	and.w	r3, r3, #28
 800192c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	02db      	lsls	r3, r3, #11
 8001932:	b29b      	uxth	r3, r3
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f023 0302 	bic.w	r3, r3, #2
 800194e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001960:	f7ff fbc0 	bl	80010e4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001966:	e00d      	b.n	8001984 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001968:	f7ff fbbc 	bl	80010e4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d301      	bcc.n	800197c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e010      	b.n	800199e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ec      	bne.n	8001968 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 031c 	and.w	r3, r3, #28
 80019c2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	02db      	lsls	r3, r3, #11
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	019b      	lsls	r3, r3, #6
 80019d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	4313      	orrs	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff fb70 	bl	80010e4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a06:	e00d      	b.n	8001a24 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a08:	f7ff fb6c 	bl	80010e4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d301      	bcc.n	8001a1c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e009      	b.n	8001a30 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ec      	bne.n	8001a08 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d9      	b.n	8001c00 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf0c      	ite	eq
 8001b0a:	2301      	moveq	r3, #1
 8001b0c:	2300      	movne	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e00b      	b.n	8001c38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d105      	bne.n	8001c36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f883 	bl	8001d38 <ETH_SetMACConfig>

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 031c 	bic.w	r3, r3, #28
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c58:	f001 fc5a 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8001c5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d908      	bls.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x38>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d804      	bhi.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e027      	b.n	8001cc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d908      	bls.n	8001c92 <HAL_ETH_SetMDIOClockRange+0x52>
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d204      	bcs.n	8001c92 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f043 030c 	orr.w	r3, r3, #12
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e01a      	b.n	8001cc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d303      	bcc.n	8001ca2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d911      	bls.n	8001cc6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d908      	bls.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x7c>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d804      	bhi.n	8001cbc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e005      	b.n	8001cc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e000      	b.n	8001cc8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cc6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	611a      	str	r2, [r3, #16]
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	01312cff 	.word	0x01312cff
 8001cdc:	02160ebf 	.word	0x02160ebf
 8001ce0:	03938700 	.word	0x03938700
 8001ce4:	05f5e0ff 	.word	0x05f5e0ff
 8001ce8:	08f0d17f 	.word	0x08f0d17f

08001cec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d0e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff f9ed 	bl	80010fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d2c:	6193      	str	r3, [r2, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <ETH_SetMACConfig+0x15c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	7c1b      	ldrb	r3, [r3, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <ETH_SetMACConfig+0x28>
 8001d5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d5e:	e000      	b.n	8001d62 <ETH_SetMACConfig+0x2a>
 8001d60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7c5b      	ldrb	r3, [r3, #17]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <ETH_SetMACConfig+0x38>
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	e000      	b.n	8001d72 <ETH_SetMACConfig+0x3a>
 8001d70:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d72:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	7fdb      	ldrb	r3, [r3, #31]
 8001d7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d80:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	7f92      	ldrb	r2, [r2, #30]
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	d102      	bne.n	8001d96 <ETH_SetMACConfig+0x5e>
 8001d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d94:	e000      	b.n	8001d98 <ETH_SetMACConfig+0x60>
 8001d96:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7f1b      	ldrb	r3, [r3, #28]
 8001d9e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001da0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001da6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d102      	bne.n	8001dc0 <ETH_SetMACConfig+0x88>
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	e000      	b.n	8001dc2 <ETH_SetMACConfig+0x8a>
 8001dc0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	7bdb      	ldrb	r3, [r3, #15]
 8001dc8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dd8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff f982 	bl	80010fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <ETH_SetMACConfig+0xee>
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	e000      	b.n	8001e28 <ETH_SetMACConfig+0xf0>
 8001e26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e36:	2a01      	cmp	r2, #1
 8001e38:	d101      	bne.n	8001e3e <ETH_SetMACConfig+0x106>
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	e000      	b.n	8001e40 <ETH_SetMACConfig+0x108>
 8001e3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e48:	2a01      	cmp	r2, #1
 8001e4a:	d101      	bne.n	8001e50 <ETH_SetMACConfig+0x118>
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	e000      	b.n	8001e52 <ETH_SetMACConfig+0x11a>
 8001e50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e5a:	2a01      	cmp	r2, #1
 8001e5c:	d101      	bne.n	8001e62 <ETH_SetMACConfig+0x12a>
 8001e5e:	2202      	movs	r2, #2
 8001e60:	e000      	b.n	8001e64 <ETH_SetMACConfig+0x12c>
 8001e62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e64:	4313      	orrs	r3, r2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff f93d 	bl	80010fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	ff20810f 	.word	0xff20810f

08001e98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <ETH_SetDMAConfig+0x110>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	7b1b      	ldrb	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <ETH_SetDMAConfig+0x2c>
 8001ebe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ec2:	e000      	b.n	8001ec6 <ETH_SetDMAConfig+0x2e>
 8001ec4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ecc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	7f52      	ldrb	r2, [r2, #29]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d102      	bne.n	8001edc <ETH_SetDMAConfig+0x44>
 8001ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eda:	e000      	b.n	8001ede <ETH_SetDMAConfig+0x46>
 8001edc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ede:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	7b9b      	ldrb	r3, [r3, #14]
 8001ee4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ee6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001eec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7f1b      	ldrb	r3, [r3, #28]
 8001ef2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ef4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	7f9b      	ldrb	r3, [r3, #30]
 8001efa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001efc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff f8e4 	bl	80010fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff f8b5 	bl	80010fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	f8de3f23 	.word	0xf8de3f23

08001fac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0a6      	sub	sp, #152	; 0x98
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800200e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002018:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fe86 	bl	8001d38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800202c:	2301      	movs	r3, #1
 800202e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002030:	2301      	movs	r3, #1
 8002032:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002058:	2301      	movs	r3, #1
 800205a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800205c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002060:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002066:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff08 	bl	8001e98 <ETH_SetDMAConfig>
}
 8002088:	bf00      	nop
 800208a:	3798      	adds	r7, #152	; 0x98
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3305      	adds	r3, #5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	3204      	adds	r2, #4
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <ETH_MACAddressConfig+0x68>)
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061a      	lsls	r2, r3, #24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3302      	adds	r3, #2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	4313      	orrs	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <ETH_MACAddressConfig+0x6c>)
 80020e2:	4413      	add	r3, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40028040 	.word	0x40028040
 80020fc:	40028044 	.word	0x40028044

08002100 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e03e      	b.n	800218c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68d9      	ldr	r1, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	3206      	adds	r2, #6
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d80c      	bhi.n	8002170 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	e004      	b.n	800217a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d9bd      	bls.n	800210e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e046      	b.n	800224e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2200      	movs	r2, #0
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002204:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	3212      	adds	r2, #18
 800221a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d80c      	bhi.n	800223e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6919      	ldr	r1, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	e004      	b.n	8002248 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d9b5      	bls.n	80021c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800228c:	b480      	push	{r7}
 800228e:	b08d      	sub	sp, #52	; 0x34
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3318      	adds	r3, #24
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ce:	d007      	beq.n	80022e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	3304      	adds	r3, #4
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0ff      	b.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	3301      	adds	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4b7d      	ldr	r3, [pc, #500]	; (80024f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	6852      	ldr	r2, [r2, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	431a      	orrs	r2, r3
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002366:	f3bf 8f5f 	dmb	sy
}
 800236a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002378:	e082      	b.n	8002480 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e005      	b.n	80023a6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d902      	bls.n	80023b8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	3b04      	subs	r3, #4
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023da:	d007      	beq.n	80023ec <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	3304      	adds	r3, #4
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d029      	beq.n	8002440 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fe:	e019      	b.n	8002434 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002400:	f3bf 8f5f 	dmb	sy
}
 8002404:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	3301      	adds	r3, #1
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	2b03      	cmp	r3, #3
 800241c:	d902      	bls.n	8002424 <ETH_Prepare_Tx_Descriptors+0x198>
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	3b04      	subs	r3, #4
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	3301      	adds	r3, #1
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
 8002434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	429a      	cmp	r2, r3
 800243a:	d3e1      	bcc.n	8002400 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	e051      	b.n	80024e4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3301      	adds	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800245c:	4013      	ands	r3, r2
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	6852      	ldr	r2, [r2, #4]
 8002462:	431a      	orrs	r2, r3
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	3301      	adds	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800246e:	f3bf 8f5f 	dmb	sy
}
 8002472:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f af78 	bne.w	800237a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e005      	b.n	80024aa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ba:	6979      	ldr	r1, [r7, #20]
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	3304      	adds	r3, #4
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80024de:	b662      	cpsie	i
}
 80024e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3734      	adds	r7, #52	; 0x34
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	ffffe000 	.word	0xffffe000

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e175      	b.n	8002800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 8164 	bne.w	80027fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x56>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80be 	beq.w	80027fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_GPIO_Init+0x324>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_GPIO_Init+0x324>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_GPIO_Init+0x324>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002696:	4a61      	ldr	r2, [pc, #388]	; (800281c <HAL_GPIO_Init+0x328>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_GPIO_Init+0x32c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d037      	beq.n	8002732 <HAL_GPIO_Init+0x23e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a57      	ldr	r2, [pc, #348]	; (8002824 <HAL_GPIO_Init+0x330>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_GPIO_Init+0x23a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_GPIO_Init+0x334>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <HAL_GPIO_Init+0x236>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a55      	ldr	r2, [pc, #340]	; (800282c <HAL_GPIO_Init+0x338>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d025      	beq.n	8002726 <HAL_GPIO_Init+0x232>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a54      	ldr	r2, [pc, #336]	; (8002830 <HAL_GPIO_Init+0x33c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x22e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a53      	ldr	r2, [pc, #332]	; (8002834 <HAL_GPIO_Init+0x340>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x22a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_GPIO_Init+0x344>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x226>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_GPIO_Init+0x348>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x222>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_GPIO_Init+0x34c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x21e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x350>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x21a>
 800270a:	2309      	movs	r3, #9
 800270c:	e012      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800270e:	230a      	movs	r3, #10
 8002710:	e010      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002712:	2308      	movs	r3, #8
 8002714:	e00e      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002716:	2307      	movs	r3, #7
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800271a:	2306      	movs	r3, #6
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x240>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x240>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_GPIO_Init+0x328>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_GPIO_Init+0x354>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b32      	ldr	r3, [pc, #200]	; (8002848 <HAL_GPIO_Init+0x354>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a29      	ldr	r2, [pc, #164]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_GPIO_Init+0x354>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae86 	bls.w	8002514 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40021c00 	.word	0x40021c00
 8002840:	40022000 	.word	0x40022000
 8002844:	40022400 	.word	0x40022400
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b08f      	sub	sp, #60	; 0x3c
 8002882:	af0a      	add	r7, sp, #40	; 0x28
 8002884:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e116      	b.n	8002abe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f8be 	bl	8000a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 ff3a 	bl	8004748 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f001 fece 	bl	8004698 <USB_CoreInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0d7      	b.n	8002abe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f001 ff28 	bl	800476a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e04a      	b.n	80029b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	333c      	adds	r3, #60	; 0x3c
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	b298      	uxth	r0, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3344      	adds	r3, #68	; 0x44
 800295c:	4602      	mov	r2, r0
 800295e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3340      	adds	r3, #64	; 0x40
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334c      	adds	r3, #76	; 0x4c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3354      	adds	r3, #84	; 0x54
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	3301      	adds	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3af      	bcc.n	8002920 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e044      	b.n	8002a50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3b5      	bcc.n	80029c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	687e      	ldr	r6, [r7, #4]
 8002a62:	466d      	mov	r5, sp
 8002a64:	f106 0410 	add.w	r4, r6, #16
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a78:	1d33      	adds	r3, r6, #4
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f001 fec1 	bl	8004804 <USB_DevInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e014      	b.n	8002abe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f80b 	bl	8002ac8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f87f 	bl	8004bba <USB_DevDisconnect>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ac8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_PCDEx_ActivateLPM+0x44>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	10000003 	.word	0x10000003

08002b10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40007000 	.word	0x40007000

08002b30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5e:	f7fe fac1 	bl	80010e4 <HAL_GetTick>
 8002b62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b64:	e009      	b.n	8002b7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b66:	f7fe fabd 	bl	80010e4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b74:	d901      	bls.n	8002b7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e022      	b.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d1ee      	bne.n	8002b66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b94:	f7fe faa6 	bl	80010e4 <HAL_GetTick>
 8002b98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b9a:	e009      	b.n	8002bb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b9c:	f7fe faa2 	bl	80010e4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002baa:	d901      	bls.n	8002bb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e007      	b.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e29b      	b.n	800311e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8087 	beq.w	8002d02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf4:	4b96      	ldr	r3, [pc, #600]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c00:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0x62>
 8002c0c:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x130>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d168      	bne.n	8002d00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e275      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7a>
 8002c3c:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a83      	ldr	r2, [pc, #524]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e02e      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x9c>
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7e      	ldr	r2, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7b      	ldr	r2, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a72      	ldr	r2, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd8>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fa18 	bl	80010e4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fa14 	bl	80010e4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e229      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fa04 	bl	80010e4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fa00 	bl	80010e4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e215      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x110>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d069      	beq.n	8002de2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x190>
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1e9      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	493d      	ldr	r1, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e040      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d023      	beq.n	8002db0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f9b6 	bl	80010e4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe f9b2 	bl	80010e4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1c7      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4929      	ldr	r1, [pc, #164]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
 8002dae:	e018      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f992 	bl	80010e4 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f98e 	bl	80010e4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1a3      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d038      	beq.n	8002e60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe f96f 	bl	80010e4 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f96b 	bl	80010e4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e180      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x23a>
 8002e28:	e01a      	b.n	8002e60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x280>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe f955 	bl	80010e4 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe f951 	bl	80010e4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d903      	bls.n	8002e54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e166      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
 8002e50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a4 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a88      	ldr	r2, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ea2:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7f      	ldr	r2, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe f919 	bl	80010e4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe f915 	bl	80010e4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e12a      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x4d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x31a>
 8002edc:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a6f      	ldr	r2, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	e02d      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x33c>
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	e01c      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x35e>
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	f043 0304 	orr.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f8c9 	bl	80010e4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe f8c5 	bl	80010e4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0d8      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RCC_OscConfig+0x386>
 8002f78:	e014      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f8b3 	bl	80010e4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe f8af 	bl	80010e4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0c2      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80ae 	beq.w	800311c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc0:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d06d      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d14b      	bne.n	800306c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f880 	bl	80010e4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f87c 	bl	80010e4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e091      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f84e 	bl	80010e4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe f84a 	bl	80010e4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e05f      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x47c>
 800306a:	e057      	b.n	800311c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f834 	bl	80010e4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f830 	bl	80010e4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e045      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x4b0>
 800309e:	e03d      	b.n	800311c <HAL_RCC_OscConfig+0x54c>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_OscConfig+0x558>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d129      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d119      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10f      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d910      	bls.n	8003174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4965      	ldr	r1, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d040      	beq.n	8003250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e073      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4936      	ldr	r1, [pc, #216]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fd ff60 	bl	80010e4 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fd ff5c 	bl	80010e4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e053      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 020f 	bic.w	r2, r3, #15
 8003266:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1cc>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1d0>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd febc 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08014828 	.word	0x08014828
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b094      	sub	sp, #80	; 0x50
 800330a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	2300      	movs	r3, #0
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331c:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d00d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 80e1 	bhi.w	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003336:	e0db      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333c:	e0db      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b73      	ldr	r3, [pc, #460]	; (800350c <HAL_RCC_GetSysClockFreq+0x208>)
 8003340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003342:	e0d8      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
 8003372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4621      	mov	r1, r4
 8003390:	1a51      	subs	r1, r2, r1
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	4629      	mov	r1, r5
 8003396:	eb63 0301 	sbc.w	r3, r3, r1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033a8:	4659      	mov	r1, fp
 80033aa:	018b      	lsls	r3, r1, #6
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b2:	4651      	mov	r1, sl
 80033b4:	018a      	lsls	r2, r1, #6
 80033b6:	4651      	mov	r1, sl
 80033b8:	ebb2 0801 	subs.w	r8, r2, r1
 80033bc:	4659      	mov	r1, fp
 80033be:	eb63 0901 	sbc.w	r9, r3, r1
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d6:	4690      	mov	r8, r2
 80033d8:	4699      	mov	r9, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	eb18 0303 	adds.w	r3, r8, r3
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	462b      	mov	r3, r5
 80033e4:	eb49 0303 	adc.w	r3, r9, r3
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033f6:	4629      	mov	r1, r5
 80033f8:	024b      	lsls	r3, r1, #9
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003400:	4621      	mov	r1, r4
 8003402:	024a      	lsls	r2, r1, #9
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003414:	f7fc ff7c 	bl	8000310 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	e058      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	4618      	mov	r0, r3
 800342c:	4611      	mov	r1, r2
 800342e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	0159      	lsls	r1, r3, #5
 800344a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344e:	0150      	lsls	r0, r2, #5
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4641      	mov	r1, r8
 8003456:	ebb2 0a01 	subs.w	sl, r2, r1
 800345a:	4649      	mov	r1, r9
 800345c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800346c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003474:	ebb2 040a 	subs.w	r4, r2, sl
 8003478:	eb63 050b 	sbc.w	r5, r3, fp
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	464b      	mov	r3, r9
 8003498:	eb45 0303 	adc.w	r3, r5, r3
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034aa:	4629      	mov	r1, r5
 80034ac:	028b      	lsls	r3, r1, #10
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b4:	4621      	mov	r1, r4
 80034b6:	028a      	lsls	r2, r1, #10
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	61fa      	str	r2, [r7, #28]
 80034c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c8:	f7fc ff22 	bl	8000310 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	3301      	adds	r3, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3750      	adds	r7, #80	; 0x50
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200

08003510 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000000 	.word	0x20000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08014838 	.word	0x08014838

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003554:	f7ff ffdc 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0b5b      	lsrs	r3, r3, #13
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	08014838 	.word	0x08014838

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a68      	ldr	r2, [pc, #416]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	4964      	ldr	r1, [pc, #400]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d017      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	4959      	ldr	r1, [pc, #356]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360e:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003614:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	494a      	ldr	r1, [pc, #296]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800364a:	2301      	movs	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 808b 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	6413      	str	r3, [r2, #64]	; 0x40
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003674:	4b35      	ldr	r3, [pc, #212]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a34      	ldr	r2, [pc, #208]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd fd30 	bl	80010e4 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fd fd2c 	bl	80010e4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e38f      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d035      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d02e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d114      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd fcf4 	bl	80010e4 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fd fcf0 	bl	80010e4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e351      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ee      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372e:	d111      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800373e:	400b      	ands	r3, r1
 8003740:	4901      	ldr	r1, [pc, #4]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
 8003750:	0ffffcff 	.word	0x0ffffcff
 8003754:	4bac      	ldr	r3, [pc, #688]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4aab      	ldr	r2, [pc, #684]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	4ba9      	ldr	r3, [pc, #676]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	49a6      	ldr	r1, [pc, #664]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376e:	4313      	orrs	r3, r2
 8003770:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800377e:	4ba2      	ldr	r3, [pc, #648]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003784:	4aa0      	ldr	r2, [pc, #640]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800378e:	4b9e      	ldr	r3, [pc, #632]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003790:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	499b      	ldr	r1, [pc, #620]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ac:	4b96      	ldr	r3, [pc, #600]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ba:	4993      	ldr	r1, [pc, #588]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ce:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037dc:	498a      	ldr	r1, [pc, #552]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f0:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fe:	4982      	ldr	r1, [pc, #520]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4979      	ldr	r1, [pc, #484]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003834:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f023 0203 	bic.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4971      	ldr	r1, [pc, #452]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f023 020c 	bic.w	r2, r3, #12
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	4968      	ldr	r1, [pc, #416]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003878:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4960      	ldr	r1, [pc, #384]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800389a:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	4957      	ldr	r1, [pc, #348]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038bc:	4b52      	ldr	r3, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	494f      	ldr	r1, [pc, #316]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	4946      	ldr	r1, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	493e      	ldr	r1, [pc, #248]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003952:	492d      	ldr	r1, [pc, #180]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	4924      	ldr	r1, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b4:	4914      	ldr	r1, [pc, #80]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d8:	490b      	ldr	r1, [pc, #44]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	4902      	ldr	r1, [pc, #8]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a18:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	4986      	ldr	r1, [pc, #536]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a3c:	4b81      	ldr	r3, [pc, #516]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	497d      	ldr	r1, [pc, #500]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d006      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80d6 	beq.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a68:	4b76      	ldr	r3, [pc, #472]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a75      	ldr	r2, [pc, #468]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd fb36 	bl	80010e4 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a7c:	f7fd fb32 	bl	80010e4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e195      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d021      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aae:	4b65      	ldr	r3, [pc, #404]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003abc:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac2:	0e1b      	lsrs	r3, r3, #24
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	019a      	lsls	r2, r3, #6
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	4958      	ldr	r1, [pc, #352]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02e      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d129      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b16:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b24:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2a:	0f1b      	lsrs	r3, r3, #28
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	019a      	lsls	r2, r3, #6
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	071b      	lsls	r3, r3, #28
 8003b4a:	493e      	ldr	r1, [pc, #248]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b52:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b58:	f023 021f 	bic.w	r2, r3, #31
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	3b01      	subs	r3, #1
 8003b62:	4938      	ldr	r1, [pc, #224]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01d      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7c:	0e1b      	lsrs	r3, r3, #24
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	0f1b      	lsrs	r3, r3, #28
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	019a      	lsls	r2, r3, #6
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	071b      	lsls	r3, r3, #28
 8003baa:	4926      	ldr	r1, [pc, #152]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	071b      	lsls	r3, r3, #28
 8003bda:	491a      	ldr	r1, [pc, #104]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd fa79 	bl	80010e4 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bf6:	f7fd fa75 	bl	80010e4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	; 0x64
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0d8      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	f040 80ce 	bne.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c28:	f7fd fa5c 	bl	80010e4 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c30:	f7fd fa58 	bl	80010e4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d904      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0bb      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c48:	4b5e      	ldr	r3, [pc, #376]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d0ec      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d12a      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c7e:	4b51      	ldr	r3, [pc, #324]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c8c:	4b4d      	ldr	r3, [pc, #308]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	0f1b      	lsrs	r3, r3, #28
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	4944      	ldr	r1, [pc, #272]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cba:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	493d      	ldr	r1, [pc, #244]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d022      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce8:	d11d      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	0f1b      	lsrs	r3, r3, #28
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	019a      	lsls	r2, r3, #6
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	4929      	ldr	r1, [pc, #164]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d028      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	0e1b      	lsrs	r3, r3, #24
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d40:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	0c1b      	lsrs	r3, r3, #16
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	019a      	lsls	r2, r3, #6
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	071b      	lsls	r3, r3, #28
 8003d66:	4917      	ldr	r1, [pc, #92]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4911      	ldr	r1, [pc, #68]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d90:	f7fd f9a8 	bl	80010e4 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d98:	f7fd f9a4 	bl	80010e4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e007      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db6:	d1ef      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800

08003dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e040      	b.n	8003e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fc fdbe 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f82c 	bl	8003e64 <UART_SetConfig>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e022      	b.n	8003e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa84 	bl	800432c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb0b 	bl	8004470 <UART_CheckIdleState>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4ba6      	ldr	r3, [pc, #664]	; (8004128 <UART_SetConfig+0x2c4>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a94      	ldr	r2, [pc, #592]	; (800412c <UART_SetConfig+0x2c8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d120      	bne.n	8003f22 <UART_SetConfig+0xbe>
 8003ee0:	4b93      	ldr	r3, [pc, #588]	; (8004130 <UART_SetConfig+0x2cc>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d816      	bhi.n	8003f1c <UART_SetConfig+0xb8>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x90>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f11 	.word	0x08003f11
 8003efc:	08003f0b 	.word	0x08003f0b
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e150      	b.n	80041ac <UART_SetConfig+0x348>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e14d      	b.n	80041ac <UART_SetConfig+0x348>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e14a      	b.n	80041ac <UART_SetConfig+0x348>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e147      	b.n	80041ac <UART_SetConfig+0x348>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e144      	b.n	80041ac <UART_SetConfig+0x348>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a83      	ldr	r2, [pc, #524]	; (8004134 <UART_SetConfig+0x2d0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d132      	bne.n	8003f92 <UART_SetConfig+0x12e>
 8003f2c:	4b80      	ldr	r3, [pc, #512]	; (8004130 <UART_SetConfig+0x2cc>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d828      	bhi.n	8003f8c <UART_SetConfig+0x128>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0xdc>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f8d 	.word	0x08003f8d
 8003f48:	08003f8d 	.word	0x08003f8d
 8003f4c:	08003f8d 	.word	0x08003f8d
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003f7b 	.word	0x08003f7b
 8003f64:	08003f8d 	.word	0x08003f8d
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08003f87 	.word	0x08003f87
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e118      	b.n	80041ac <UART_SetConfig+0x348>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e115      	b.n	80041ac <UART_SetConfig+0x348>
 8003f80:	2304      	movs	r3, #4
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e112      	b.n	80041ac <UART_SetConfig+0x348>
 8003f86:	2308      	movs	r3, #8
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e10f      	b.n	80041ac <UART_SetConfig+0x348>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e10c      	b.n	80041ac <UART_SetConfig+0x348>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a68      	ldr	r2, [pc, #416]	; (8004138 <UART_SetConfig+0x2d4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d120      	bne.n	8003fde <UART_SetConfig+0x17a>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <UART_SetConfig+0x2cc>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fa6:	2b30      	cmp	r3, #48	; 0x30
 8003fa8:	d013      	beq.n	8003fd2 <UART_SetConfig+0x16e>
 8003faa:	2b30      	cmp	r3, #48	; 0x30
 8003fac:	d814      	bhi.n	8003fd8 <UART_SetConfig+0x174>
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d009      	beq.n	8003fc6 <UART_SetConfig+0x162>
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d810      	bhi.n	8003fd8 <UART_SetConfig+0x174>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <UART_SetConfig+0x15c>
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x168>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x174>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e0f2      	b.n	80041ac <UART_SetConfig+0x348>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e0ef      	b.n	80041ac <UART_SetConfig+0x348>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e0ec      	b.n	80041ac <UART_SetConfig+0x348>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e0e9      	b.n	80041ac <UART_SetConfig+0x348>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e0e6      	b.n	80041ac <UART_SetConfig+0x348>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a56      	ldr	r2, [pc, #344]	; (800413c <UART_SetConfig+0x2d8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d120      	bne.n	800402a <UART_SetConfig+0x1c6>
 8003fe8:	4b51      	ldr	r3, [pc, #324]	; (8004130 <UART_SetConfig+0x2cc>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff4:	d013      	beq.n	800401e <UART_SetConfig+0x1ba>
 8003ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ff8:	d814      	bhi.n	8004024 <UART_SetConfig+0x1c0>
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d009      	beq.n	8004012 <UART_SetConfig+0x1ae>
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d810      	bhi.n	8004024 <UART_SetConfig+0x1c0>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <UART_SetConfig+0x1a8>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d006      	beq.n	8004018 <UART_SetConfig+0x1b4>
 800400a:	e00b      	b.n	8004024 <UART_SetConfig+0x1c0>
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e0cc      	b.n	80041ac <UART_SetConfig+0x348>
 8004012:	2302      	movs	r3, #2
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e0c9      	b.n	80041ac <UART_SetConfig+0x348>
 8004018:	2304      	movs	r3, #4
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e0c6      	b.n	80041ac <UART_SetConfig+0x348>
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e0c3      	b.n	80041ac <UART_SetConfig+0x348>
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e0c0      	b.n	80041ac <UART_SetConfig+0x348>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a44      	ldr	r2, [pc, #272]	; (8004140 <UART_SetConfig+0x2dc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d125      	bne.n	8004080 <UART_SetConfig+0x21c>
 8004034:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <UART_SetConfig+0x2cc>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004042:	d017      	beq.n	8004074 <UART_SetConfig+0x210>
 8004044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004048:	d817      	bhi.n	800407a <UART_SetConfig+0x216>
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	d00b      	beq.n	8004068 <UART_SetConfig+0x204>
 8004050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004054:	d811      	bhi.n	800407a <UART_SetConfig+0x216>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <UART_SetConfig+0x1fe>
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d006      	beq.n	800406e <UART_SetConfig+0x20a>
 8004060:	e00b      	b.n	800407a <UART_SetConfig+0x216>
 8004062:	2300      	movs	r3, #0
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0a1      	b.n	80041ac <UART_SetConfig+0x348>
 8004068:	2302      	movs	r3, #2
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e09e      	b.n	80041ac <UART_SetConfig+0x348>
 800406e:	2304      	movs	r3, #4
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e09b      	b.n	80041ac <UART_SetConfig+0x348>
 8004074:	2308      	movs	r3, #8
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e098      	b.n	80041ac <UART_SetConfig+0x348>
 800407a:	2310      	movs	r3, #16
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e095      	b.n	80041ac <UART_SetConfig+0x348>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <UART_SetConfig+0x2e0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d125      	bne.n	80040d6 <UART_SetConfig+0x272>
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <UART_SetConfig+0x2cc>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004098:	d017      	beq.n	80040ca <UART_SetConfig+0x266>
 800409a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800409e:	d817      	bhi.n	80040d0 <UART_SetConfig+0x26c>
 80040a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a4:	d00b      	beq.n	80040be <UART_SetConfig+0x25a>
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040aa:	d811      	bhi.n	80040d0 <UART_SetConfig+0x26c>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <UART_SetConfig+0x254>
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b4:	d006      	beq.n	80040c4 <UART_SetConfig+0x260>
 80040b6:	e00b      	b.n	80040d0 <UART_SetConfig+0x26c>
 80040b8:	2301      	movs	r3, #1
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e076      	b.n	80041ac <UART_SetConfig+0x348>
 80040be:	2302      	movs	r3, #2
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e073      	b.n	80041ac <UART_SetConfig+0x348>
 80040c4:	2304      	movs	r3, #4
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e070      	b.n	80041ac <UART_SetConfig+0x348>
 80040ca:	2308      	movs	r3, #8
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e06d      	b.n	80041ac <UART_SetConfig+0x348>
 80040d0:	2310      	movs	r3, #16
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e06a      	b.n	80041ac <UART_SetConfig+0x348>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <UART_SetConfig+0x2e4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d138      	bne.n	8004152 <UART_SetConfig+0x2ee>
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <UART_SetConfig+0x2cc>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ee:	d017      	beq.n	8004120 <UART_SetConfig+0x2bc>
 80040f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f4:	d82a      	bhi.n	800414c <UART_SetConfig+0x2e8>
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fa:	d00b      	beq.n	8004114 <UART_SetConfig+0x2b0>
 80040fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004100:	d824      	bhi.n	800414c <UART_SetConfig+0x2e8>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <UART_SetConfig+0x2aa>
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410a:	d006      	beq.n	800411a <UART_SetConfig+0x2b6>
 800410c:	e01e      	b.n	800414c <UART_SetConfig+0x2e8>
 800410e:	2300      	movs	r3, #0
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e04b      	b.n	80041ac <UART_SetConfig+0x348>
 8004114:	2302      	movs	r3, #2
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e048      	b.n	80041ac <UART_SetConfig+0x348>
 800411a:	2304      	movs	r3, #4
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e045      	b.n	80041ac <UART_SetConfig+0x348>
 8004120:	2308      	movs	r3, #8
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e042      	b.n	80041ac <UART_SetConfig+0x348>
 8004126:	bf00      	nop
 8004128:	efff69f3 	.word	0xefff69f3
 800412c:	40011000 	.word	0x40011000
 8004130:	40023800 	.word	0x40023800
 8004134:	40004400 	.word	0x40004400
 8004138:	40004800 	.word	0x40004800
 800413c:	40004c00 	.word	0x40004c00
 8004140:	40005000 	.word	0x40005000
 8004144:	40011400 	.word	0x40011400
 8004148:	40007800 	.word	0x40007800
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e02c      	b.n	80041ac <UART_SetConfig+0x348>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a72      	ldr	r2, [pc, #456]	; (8004320 <UART_SetConfig+0x4bc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d125      	bne.n	80041a8 <UART_SetConfig+0x344>
 800415c:	4b71      	ldr	r3, [pc, #452]	; (8004324 <UART_SetConfig+0x4c0>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004166:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800416a:	d017      	beq.n	800419c <UART_SetConfig+0x338>
 800416c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004170:	d817      	bhi.n	80041a2 <UART_SetConfig+0x33e>
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d00b      	beq.n	8004190 <UART_SetConfig+0x32c>
 8004178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417c:	d811      	bhi.n	80041a2 <UART_SetConfig+0x33e>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <UART_SetConfig+0x326>
 8004182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004186:	d006      	beq.n	8004196 <UART_SetConfig+0x332>
 8004188:	e00b      	b.n	80041a2 <UART_SetConfig+0x33e>
 800418a:	2300      	movs	r3, #0
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e00d      	b.n	80041ac <UART_SetConfig+0x348>
 8004190:	2302      	movs	r3, #2
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e00a      	b.n	80041ac <UART_SetConfig+0x348>
 8004196:	2304      	movs	r3, #4
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e007      	b.n	80041ac <UART_SetConfig+0x348>
 800419c:	2308      	movs	r3, #8
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e004      	b.n	80041ac <UART_SetConfig+0x348>
 80041a2:	2310      	movs	r3, #16
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e001      	b.n	80041ac <UART_SetConfig+0x348>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d15b      	bne.n	800426e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d828      	bhi.n	800420e <UART_SetConfig+0x3aa>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x360>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004207 	.word	0x08004207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7ff f99e 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e013      	b.n	8004218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7ff f9ae 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 80041f4:	61b8      	str	r0, [r7, #24]
        break;
 80041f6:	e00f      	b.n	8004218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <UART_SetConfig+0x4c4>)
 80041fa:	61bb      	str	r3, [r7, #24]
        break;
 80041fc:	e00c      	b.n	8004218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7ff f881 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004202:	61b8      	str	r0, [r7, #24]
        break;
 8004204:	e008      	b.n	8004218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	61bb      	str	r3, [r7, #24]
        break;
 800420c:	e004      	b.n	8004218 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	77bb      	strb	r3, [r7, #30]
        break;
 8004216:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d074      	beq.n	8004308 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	005a      	lsls	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	085b      	lsrs	r3, r3, #1
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d916      	bls.n	8004268 <UART_SetConfig+0x404>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d212      	bcs.n	8004268 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	b29a      	uxth	r2, r3
 8004258:	89fb      	ldrh	r3, [r7, #14]
 800425a:	4313      	orrs	r3, r2
 800425c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	89fa      	ldrh	r2, [r7, #14]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e04f      	b.n	8004308 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77bb      	strb	r3, [r7, #30]
 800426c:	e04c      	b.n	8004308 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d828      	bhi.n	80042c6 <UART_SetConfig+0x462>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x418>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c7 	.word	0x080042c7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042c7 	.word	0x080042c7
 8004294:	080042c7 	.word	0x080042c7
 8004298:	080042c7 	.word	0x080042c7
 800429c:	080042bf 	.word	0x080042bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7ff f942 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80042a4:	61b8      	str	r0, [r7, #24]
        break;
 80042a6:	e013      	b.n	80042d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7ff f952 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 80042ac:	61b8      	str	r0, [r7, #24]
        break;
 80042ae:	e00f      	b.n	80042d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <UART_SetConfig+0x4c4>)
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e00c      	b.n	80042d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7ff f825 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80042ba:	61b8      	str	r0, [r7, #24]
        break;
 80042bc:	e008      	b.n	80042d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c2:	61bb      	str	r3, [r7, #24]
        break;
 80042c4:	e004      	b.n	80042d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77bb      	strb	r3, [r7, #30]
        break;
 80042ce:	bf00      	nop
    }

    if (pclk != 0U)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d018      	beq.n	8004308 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	085a      	lsrs	r2, r3, #1
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	441a      	add	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b0f      	cmp	r3, #15
 80042ee:	d909      	bls.n	8004304 <UART_SetConfig+0x4a0>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f6:	d205      	bcs.n	8004304 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	e001      	b.n	8004308 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004314:	7fbb      	ldrb	r3, [r7, #30]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40007c00 	.word	0x40007c00
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400

0800432c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d10a      	bne.n	8004442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004480:	f7fc fe30 	bl	80010e4 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d10e      	bne.n	80044b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f831 	bl	800450a <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e027      	b.n	8004502 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d10e      	bne.n	80044de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f81b 	bl	800450a <UART_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e011      	b.n	8004502 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b09c      	sub	sp, #112	; 0x70
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451a:	e0a7      	b.n	800466c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	f000 80a3 	beq.w	800466c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fc fddd 	bl	80010e4 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <UART_WaitOnFlagUntilTimeout+0x32>
 8004536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004538:	2b00      	cmp	r3, #0
 800453a:	d13f      	bne.n	80045bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004550:	667b      	str	r3, [r7, #100]	; 0x64
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800455a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800455c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	663b      	str	r3, [r7, #96]	; 0x60
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800458e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e068      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d050      	beq.n	800466c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d8:	d148      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
 8004604:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	66bb      	str	r3, [r7, #104]	; 0x68
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004636:	623a      	str	r2, [r7, #32]
 8004638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	69f9      	ldr	r1, [r7, #28]
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	61bb      	str	r3, [r7, #24]
   return(result);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e010      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	429a      	cmp	r2, r3
 8004688:	f43f af48 	beq.w	800451c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3770      	adds	r7, #112	; 0x70
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004698:	b084      	sub	sp, #16
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	f107 001c 	add.w	r0, r7, #28
 80046a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d120      	bne.n	80046f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <USB_CoreInit+0xac>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa96 	bl	8004c18 <USB_CoreReset>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e010      	b.n	8004714 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa8a 	bl	8004c18 <USB_CoreReset>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2b01      	cmp	r3, #1
 8004718:	d10b      	bne.n	8004732 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f043 0206 	orr.w	r2, r3, #6
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800473e:	b004      	add	sp, #16
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	ffbdffbf 	.word	0xffbdffbf

08004748 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 0201 	bic.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d115      	bne.n	80047b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004798:	2001      	movs	r0, #1
 800479a:	f7fc fcaf 	bl	80010fc <HAL_Delay>
      ms++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3301      	adds	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fa29 	bl	8004bfc <USB_GetMode>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d01e      	beq.n	80047ee <USB_SetCurrentMode+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b31      	cmp	r3, #49	; 0x31
 80047b4:	d9f0      	bls.n	8004798 <USB_SetCurrentMode+0x2e>
 80047b6:	e01a      	b.n	80047ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d115      	bne.n	80047ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7fc fc96 	bl	80010fc <HAL_Delay>
      ms++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa10 	bl	8004bfc <USB_GetMode>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <USB_SetCurrentMode+0x84>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b31      	cmp	r3, #49	; 0x31
 80047e6:	d9f0      	bls.n	80047ca <USB_SetCurrentMode+0x60>
 80047e8:	e001      	b.n	80047ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e005      	b.n	80047fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b32      	cmp	r3, #50	; 0x32
 80047f2:	d101      	bne.n	80047f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e009      	b.n	8004838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3340      	adds	r3, #64	; 0x40
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d9f2      	bls.n	8004824 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11c      	bne.n	800487e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f043 0302 	orr.w	r3, r3, #2
 8004856:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e005      	b.n	800488a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	461a      	mov	r2, r3
 8004892:	2300      	movs	r3, #0
 8004894:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	4619      	mov	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	461a      	mov	r2, r3
 80048a6:	680b      	ldr	r3, [r1, #0]
 80048a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048b6:	2100      	movs	r1, #0
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f965 	bl	8004b88 <USB_SetDevSpeed>
 80048be:	e008      	b.n	80048d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048c0:	2101      	movs	r1, #1
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f960 	bl	8004b88 <USB_SetDevSpeed>
 80048c8:	e003      	b.n	80048d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ca:	2103      	movs	r1, #3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f95b 	bl	8004b88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048d2:	2110      	movs	r1, #16
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8f3 	bl	8004ac0 <USB_FlushTxFifo>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f91f 	bl	8004b28 <USB_FlushRxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e043      	b.n	80049a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004934:	d118      	bne.n	8004968 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e013      	b.n	800497a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	461a      	mov	r2, r3
 8004960:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e008      	b.n	800497a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	461a      	mov	r2, r3
 8004976:	2300      	movs	r3, #0
 8004978:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	461a      	mov	r2, r3
 800499a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800499e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3301      	adds	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b7      	bcc.n	800491e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e043      	b.n	8004a3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ca:	d118      	bne.n	80049fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e013      	b.n	8004a10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e008      	b.n	8004a10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3b7      	bcc.n	80049b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f043 0210 	orr.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <USB_DevInit+0x2b4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <USB_DevInit+0x2b8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab4:	b004      	add	sp, #16
 8004ab6:	4770      	bx	lr
 8004ab8:	803c3800 	.word	0x803c3800
 8004abc:	40000004 	.word	0x40000004

08004ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <USB_FlushTxFifo+0x64>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e01b      	b.n	8004b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	daf2      	bge.n	8004ace <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	019b      	lsls	r3, r3, #6
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <USB_FlushTxFifo+0x64>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e006      	b.n	8004b18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d0f0      	beq.n	8004af8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	00030d40 	.word	0x00030d40

08004b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <USB_FlushRxFifo+0x5c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e018      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	daf2      	bge.n	8004b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2210      	movs	r2, #16
 8004b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <USB_FlushRxFifo+0x5c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e006      	b.n	8004b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d0f0      	beq.n	8004b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	00030d40 	.word	0x00030d40

08004b88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0301 	and.w	r3, r3, #1
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <USB_CoreReset+0x64>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e01b      	b.n	8004c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	daf2      	bge.n	8004c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f043 0201 	orr.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <USB_CoreReset+0x64>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e006      	b.n	8004c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d0f0      	beq.n	8004c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004c86:	4b8d      	ldr	r3, [pc, #564]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004c88:	22c0      	movs	r2, #192	; 0xc0
 8004c8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004c8c:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004c8e:	22a8      	movs	r2, #168	; 0xa8
 8004c90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004c92:	4b8a      	ldr	r3, [pc, #552]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004c98:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004c9a:	226f      	movs	r2, #111	; 0x6f
 8004c9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c9e:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ca4:	4b86      	ldr	r3, [pc, #536]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004caa:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004cb0:	4b83      	ldr	r3, [pc, #524]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004cb6:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004cb8:	22c0      	movs	r2, #192	; 0xc0
 8004cba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004cbc:	4b81      	ldr	r3, [pc, #516]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004cbe:	22a8      	movs	r2, #168	; 0xa8
 8004cc0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004cc2:	4b80      	ldr	r3, [pc, #512]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004cc8:	4b7e      	ldr	r3, [pc, #504]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004cce:	f001 fb8d 	bl	80063ec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004cd2:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	061a      	lsls	r2, r3, #24
 8004cd8:	4b78      	ldr	r3, [pc, #480]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004ce2:	789b      	ldrb	r3, [r3, #2]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	4a74      	ldr	r2, [pc, #464]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004cea:	78d2      	ldrb	r2, [r2, #3]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	061a      	lsls	r2, r3, #24
 8004cf0:	4b72      	ldr	r3, [pc, #456]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	0619      	lsls	r1, r3, #24
 8004cf6:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	4319      	orrs	r1, r3
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d00:	789b      	ldrb	r3, [r3, #2]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	430b      	orrs	r3, r1
 8004d06:	496d      	ldr	r1, [pc, #436]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d08:	78c9      	ldrb	r1, [r1, #3]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d12:	431a      	orrs	r2, r3
 8004d14:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	0619      	lsls	r1, r3, #24
 8004d1a:	4b68      	ldr	r3, [pc, #416]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	4319      	orrs	r1, r3
 8004d22:	4b66      	ldr	r3, [pc, #408]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d24:	789b      	ldrb	r3, [r3, #2]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	4964      	ldr	r1, [pc, #400]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d2c:	78c9      	ldrb	r1, [r1, #3]
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d36:	431a      	orrs	r2, r3
 8004d38:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	0619      	lsls	r1, r3, #24
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	4319      	orrs	r1, r3
 8004d46:	4b5d      	ldr	r3, [pc, #372]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d48:	789b      	ldrb	r3, [r3, #2]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	495b      	ldr	r1, [pc, #364]	; (8004ebc <MX_LWIP_Init+0x23c>)
 8004d50:	78c9      	ldrb	r1, [r1, #3]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	4313      	orrs	r3, r2
 8004d58:	4a5b      	ldr	r2, [pc, #364]	; (8004ec8 <MX_LWIP_Init+0x248>)
 8004d5a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d5c:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	061a      	lsls	r2, r3, #24
 8004d62:	4b57      	ldr	r3, [pc, #348]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	4b55      	ldr	r3, [pc, #340]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d6c:	789b      	ldrb	r3, [r3, #2]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	4313      	orrs	r3, r2
 8004d72:	4a53      	ldr	r2, [pc, #332]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d74:	78d2      	ldrb	r2, [r2, #3]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	061a      	lsls	r2, r3, #24
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	0619      	lsls	r1, r3, #24
 8004d80:	4b4f      	ldr	r3, [pc, #316]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	4319      	orrs	r1, r3
 8004d88:	4b4d      	ldr	r3, [pc, #308]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d8a:	789b      	ldrb	r3, [r3, #2]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	494b      	ldr	r1, [pc, #300]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004d92:	78c9      	ldrb	r1, [r1, #3]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	0619      	lsls	r1, r3, #24
 8004da4:	4b46      	ldr	r3, [pc, #280]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	4319      	orrs	r1, r3
 8004dac:	4b44      	ldr	r3, [pc, #272]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	430b      	orrs	r3, r1
 8004db4:	4942      	ldr	r1, [pc, #264]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004db6:	78c9      	ldrb	r1, [r1, #3]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	0619      	lsls	r1, r3, #24
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	4319      	orrs	r1, r3
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004dd2:	789b      	ldrb	r3, [r3, #2]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	4939      	ldr	r1, [pc, #228]	; (8004ec0 <MX_LWIP_Init+0x240>)
 8004dda:	78c9      	ldrb	r1, [r1, #3]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	0e1b      	lsrs	r3, r3, #24
 8004de0:	4313      	orrs	r3, r2
 8004de2:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <MX_LWIP_Init+0x24c>)
 8004de4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	061a      	lsls	r2, r3, #24
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004dee:	785b      	ldrb	r3, [r3, #1]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004df6:	789b      	ldrb	r3, [r3, #2]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004dfe:	78d2      	ldrb	r2, [r2, #3]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	061a      	lsls	r2, r3, #24
 8004e04:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	0619      	lsls	r1, r3, #24
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	4319      	orrs	r1, r3
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	492a      	ldr	r1, [pc, #168]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e1c:	78c9      	ldrb	r1, [r1, #3]
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e26:	431a      	orrs	r2, r3
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	0619      	lsls	r1, r3, #24
 8004e2e:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	4319      	orrs	r1, r3
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e38:	789b      	ldrb	r3, [r3, #2]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	4921      	ldr	r1, [pc, #132]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e40:	78c9      	ldrb	r1, [r1, #3]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	0619      	lsls	r1, r3, #24
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	4319      	orrs	r1, r3
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e5c:	789b      	ldrb	r3, [r3, #2]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	430b      	orrs	r3, r1
 8004e62:	4918      	ldr	r1, [pc, #96]	; (8004ec4 <MX_LWIP_Init+0x244>)
 8004e64:	78c9      	ldrb	r1, [r1, #3]
 8004e66:	430b      	orrs	r3, r1
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <MX_LWIP_Init+0x250>)
 8004e6e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <MX_LWIP_Init+0x254>)
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <MX_LWIP_Init+0x258>)
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <MX_LWIP_Init+0x250>)
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <MX_LWIP_Init+0x24c>)
 8004e80:	4911      	ldr	r1, [pc, #68]	; (8004ec8 <MX_LWIP_Init+0x248>)
 8004e82:	4816      	ldr	r0, [pc, #88]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004e84:	f001 ff9e 	bl	8006dc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004e88:	4814      	ldr	r0, [pc, #80]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004e8a:	f002 f94d 	bl	8007128 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004e90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ea0:	480e      	ldr	r0, [pc, #56]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004ea2:	f002 f951 	bl	8007148 <netif_set_up>
 8004ea6:	e002      	b.n	8004eae <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004ea8:	480c      	ldr	r0, [pc, #48]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004eaa:	f002 f9b9 	bl	8007220 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004eae:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <MX_LWIP_Init+0x260>)
 8004eb0:	480a      	ldr	r0, [pc, #40]	; (8004edc <MX_LWIP_Init+0x25c>)
 8004eb2:	f002 fa4b 	bl	800734c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200007c0 	.word	0x200007c0
 8004ec0:	200007c4 	.word	0x200007c4
 8004ec4:	200007c8 	.word	0x200007c8
 8004ec8:	200007b4 	.word	0x200007b4
 8004ecc:	200007b8 	.word	0x200007b8
 8004ed0:	200007bc 	.word	0x200007bc
 8004ed4:	08010a05 	.word	0x08010a05
 8004ed8:	08005249 	.word	0x08005249
 8004edc:	20000780 	.word	0x20000780
 8004ee0:	08004f35 	.word	0x08004f35

08004ee4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004eec:	f7fc f8fa 	bl	80010e4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <Ethernet_Link_Periodic_Handle+0x30>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b63      	cmp	r3, #99	; 0x63
 8004efa:	d907      	bls.n	8004f0c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004efc:	f7fc f8f2 	bl	80010e4 <HAL_GetTick>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <Ethernet_Link_Periodic_Handle+0x30>)
 8004f04:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 faf4 	bl	80054f4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	2000077c 	.word	0x2000077c

08004f18 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004f1c:	4804      	ldr	r0, [pc, #16]	; (8004f30 <MX_LWIP_Process+0x18>)
 8004f1e:	f000 f973 	bl	8005208 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004f22:	f009 f983 	bl	800e22c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004f26:	4802      	ldr	r0, [pc, #8]	; (8004f30 <MX_LWIP_Process+0x18>)
 8004f28:	f7ff ffdc 	bl	8004ee4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000780 	.word	0x20000780

08004f34 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <SCB_InvalidateDCache_by_Addr>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f5e:	f3bf 8f4f 	dsb	sy
}
 8004f62:	bf00      	nop
    while (op_size > 0) {
 8004f64:	e00b      	b.n	8004f7e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <SCB_InvalidateDCache_by_Addr+0x54>)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dcf0      	bgt.n	8004f66 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f84:	f3bf 8f4f 	dsb	sy
}
 8004f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f8a:	f3bf 8f6f 	isb	sy
}
 8004f8e:	bf00      	nop
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004fac:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <low_level_init+0x110>)
 8004fae:	4a41      	ldr	r2, [pc, #260]	; (80050b4 <low_level_init+0x114>)
 8004fb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004fba:	23e1      	movs	r3, #225	; 0xe1
 8004fbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004fca:	4a39      	ldr	r2, [pc, #228]	; (80050b0 <low_level_init+0x110>)
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <low_level_init+0x110>)
 8004fd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <low_level_init+0x110>)
 8004fdc:	4a36      	ldr	r2, [pc, #216]	; (80050b8 <low_level_init+0x118>)
 8004fde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <low_level_init+0x110>)
 8004fe2:	4a36      	ldr	r2, [pc, #216]	; (80050bc <low_level_init+0x11c>)
 8004fe4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <low_level_init+0x110>)
 8004fe8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004fec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004fee:	4830      	ldr	r0, [pc, #192]	; (80050b0 <low_level_init+0x110>)
 8004ff0:	f7fc f98e 	bl	8001310 <HAL_ETH_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ff8:	2238      	movs	r2, #56	; 0x38
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4830      	ldr	r0, [pc, #192]	; (80050c0 <low_level_init+0x120>)
 8004ffe:	f00b ff3c 	bl	8010e7a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <low_level_init+0x120>)
 8005004:	2221      	movs	r2, #33	; 0x21
 8005006:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <low_level_init+0x120>)
 800500a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800500e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <low_level_init+0x120>)
 8005012:	2200      	movs	r2, #0
 8005014:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005016:	482b      	ldr	r0, [pc, #172]	; (80050c4 <low_level_init+0x124>)
 8005018:	f001 fd9c 	bl	8006b54 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2206      	movs	r2, #6
 8005020:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005024:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <low_level_init+0x110>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <low_level_init+0x110>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	785a      	ldrb	r2, [r3, #1]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <low_level_init+0x110>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	789a      	ldrb	r2, [r3, #2]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <low_level_init+0x110>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	78da      	ldrb	r2, [r3, #3]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <low_level_init+0x110>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	791a      	ldrb	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <low_level_init+0x110>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	795a      	ldrb	r2, [r3, #5]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005072:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800507a:	f043 030a 	orr.w	r3, r3, #10
 800507e:	b2da      	uxtb	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005086:	4910      	ldr	r1, [pc, #64]	; (80050c8 <low_level_init+0x128>)
 8005088:	4810      	ldr	r0, [pc, #64]	; (80050cc <low_level_init+0x12c>)
 800508a:	f7fb fe78 	bl	8000d7e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800508e:	480f      	ldr	r0, [pc, #60]	; (80050cc <low_level_init+0x12c>)
 8005090:	f7fb fea7 	bl	8000de2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa2a 	bl	80054f4 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80050a0:	e001      	b.n	80050a6 <low_level_init+0x106>
    Error_Handler();
 80050a2:	f7fb fc39 	bl	8000918 <Error_Handler>
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20005158 	.word	0x20005158
 80050b4:	40028000 	.word	0x40028000
 80050b8:	20000128 	.word	0x20000128
 80050bc:	20000088 	.word	0x20000088
 80050c0:	20005208 	.word	0x20005208
 80050c4:	08014840 	.word	0x08014840
 80050c8:	2000000c 	.word	0x2000000c
 80050cc:	20005240 	.word	0x20005240

080050d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b092      	sub	sp, #72	; 0x48
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	2230      	movs	r2, #48	; 0x30
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f00b fec2 	bl	8010e7a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	2230      	movs	r2, #48	; 0x30
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f00b febb 	bl	8010e7a <memset>

  for(q = p; q != NULL; q = q->next)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	643b      	str	r3, [r7, #64]	; 0x40
 8005108:	e045      	b.n	8005196 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800510a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510c:	2b03      	cmp	r3, #3
 800510e:	d902      	bls.n	8005116 <low_level_output+0x46>
      return ERR_IF;
 8005110:	f06f 030b 	mvn.w	r3, #11
 8005114:	e055      	b.n	80051c2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3348      	adds	r3, #72	; 0x48
 8005126:	443b      	add	r3, r7
 8005128:	3b3c      	subs	r3, #60	; 0x3c
 800512a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	895b      	ldrh	r3, [r3, #10]
 8005130:	4619      	mov	r1, r3
 8005132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	3348      	adds	r3, #72	; 0x48
 800513e:	443b      	add	r3, r7
 8005140:	3b38      	subs	r3, #56	; 0x38
 8005142:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800514a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514c:	1e5a      	subs	r2, r3, #1
 800514e:	f107 000c 	add.w	r0, r7, #12
 8005152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005154:	460b      	mov	r3, r1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	440b      	add	r3, r1
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	18c1      	adds	r1, r0, r3
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	3348      	adds	r3, #72	; 0x48
 8005168:	443b      	add	r3, r7
 800516a:	3b34      	subs	r3, #52	; 0x34
 800516c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	3348      	adds	r3, #72	; 0x48
 8005182:	443b      	add	r3, r7
 8005184:	3b34      	subs	r3, #52	; 0x34
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    }

    i++;
 800518a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518c:	3301      	adds	r3, #1
 800518e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	643b      	str	r3, [r7, #64]	; 0x40
 8005196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1b6      	bne.n	800510a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	891b      	ldrh	r3, [r3, #8]
 80051a0:	461a      	mov	r2, r3
 80051a2:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <low_level_output+0xfc>)
 80051a4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <low_level_output+0xfc>)
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80051ae:	4a07      	ldr	r2, [pc, #28]	; (80051cc <low_level_output+0xfc>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80051b4:	2214      	movs	r2, #20
 80051b6:	4905      	ldr	r1, [pc, #20]	; (80051cc <low_level_output+0xfc>)
 80051b8:	4805      	ldr	r0, [pc, #20]	; (80051d0 <low_level_output+0x100>)
 80051ba:	f7fc f9dd 	bl	8001578 <HAL_ETH_Transmit>

  return errval;
 80051be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3748      	adds	r7, #72	; 0x48
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20005208 	.word	0x20005208
 80051d0:	20005158 	.word	0x20005158

080051d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <low_level_input+0x2c>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	4619      	mov	r1, r3
 80051ee:	4805      	ldr	r0, [pc, #20]	; (8005204 <low_level_input+0x30>)
 80051f0:	f7fc fa56 	bl	80016a0 <HAL_ETH_ReadData>
  }

  return p;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20005154 	.word	0x20005154
 8005204:	20005158 	.word	0x20005158

08005208 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ffdd 	bl	80051d4 <low_level_input>
 800521a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	4798      	blx	r3
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f002 fc0a 	bl	8007a4c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ea      	bne.n	8005214 <ethernetif_input+0xc>
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <ethernetif_init+0x1c>
 8005256:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <ethernetif_init+0x48>)
 8005258:	f240 127b 	movw	r2, #379	; 0x17b
 800525c:	490d      	ldr	r1, [pc, #52]	; (8005294 <ethernetif_init+0x4c>)
 800525e:	480e      	ldr	r0, [pc, #56]	; (8005298 <ethernetif_init+0x50>)
 8005260:	f00b fda6 	bl	8010db0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2273      	movs	r2, #115	; 0x73
 8005268:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2274      	movs	r2, #116	; 0x74
 8005270:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <ethernetif_init+0x54>)
 8005278:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <ethernetif_init+0x58>)
 800527e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fe8d 	bl	8004fa0 <low_level_init>

  return ERR_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	08011c28 	.word	0x08011c28
 8005294:	08011c44 	.word	0x08011c44
 8005298:	08011c54 	.word	0x08011c54
 800529c:	0800eebd 	.word	0x0800eebd
 80052a0:	080050d1 	.word	0x080050d1

080052a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80052b0:	68f9      	ldr	r1, [r7, #12]
 80052b2:	4807      	ldr	r0, [pc, #28]	; (80052d0 <pbuf_free_custom+0x2c>)
 80052b4:	f001 fd30 	bl	8006d18 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <pbuf_free_custom+0x30>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d102      	bne.n	80052c6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <pbuf_free_custom+0x30>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
  }
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	08014840 	.word	0x08014840
 80052d4:	20005154 	.word	0x20005154

080052d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052dc:	f7fb ff02 	bl	80010e4 <HAL_GetTick>
 80052e0:	4603      	mov	r3, r0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a4e      	ldr	r2, [pc, #312]	; (8005440 <HAL_ETH_MspInit+0x158>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f040 8096 	bne.w	8005438 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800530c:	4b4d      	ldr	r3, [pc, #308]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	4a4c      	ldr	r2, [pc, #304]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005316:	6313      	str	r3, [r2, #48]	; 0x30
 8005318:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	4a46      	ldr	r2, [pc, #280]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800532a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800532e:	6313      	str	r3, [r2, #48]	; 0x30
 8005330:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4a40      	ldr	r2, [pc, #256]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005346:	6313      	str	r3, [r2, #48]	; 0x30
 8005348:	4b3e      	ldr	r3, [pc, #248]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005354:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6313      	str	r3, [r2, #48]	; 0x30
 8005360:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	4a34      	ldr	r2, [pc, #208]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6313      	str	r3, [r2, #48]	; 0x30
 8005378:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005384:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	6313      	str	r3, [r2, #48]	; 0x30
 8005390:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800539c:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 80053a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a6:	6313      	str	r3, [r2, #48]	; 0x30
 80053a8:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_ETH_MspInit+0x15c>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80053b4:	2332      	movs	r3, #50	; 0x32
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b8:	2302      	movs	r3, #2
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c0:	2303      	movs	r3, #3
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053c4:	230b      	movs	r3, #11
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053cc:	4619      	mov	r1, r3
 80053ce:	481e      	ldr	r0, [pc, #120]	; (8005448 <HAL_ETH_MspInit+0x160>)
 80053d0:	f7fd f890 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80053d4:	2386      	movs	r3, #134	; 0x86
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d8:	2302      	movs	r3, #2
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e0:	2303      	movs	r3, #3
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053e4:	230b      	movs	r3, #11
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ec:	4619      	mov	r1, r3
 80053ee:	4817      	ldr	r0, [pc, #92]	; (800544c <HAL_ETH_MspInit+0x164>)
 80053f0:	f7fd f880 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 80053f4:	f242 0301 	movw	r3, #8193	; 0x2001
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053fa:	2302      	movs	r3, #2
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005402:	2303      	movs	r3, #3
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005406:	230b      	movs	r3, #11
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800540a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800540e:	4619      	mov	r1, r3
 8005410:	480f      	ldr	r0, [pc, #60]	; (8005450 <HAL_ETH_MspInit+0x168>)
 8005412:	f7fd f86f 	bl	80024f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005416:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541c:	2302      	movs	r3, #2
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005424:	2303      	movs	r3, #3
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005428:	230b      	movs	r3, #11
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800542c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005430:	4619      	mov	r1, r3
 8005432:	4808      	ldr	r0, [pc, #32]	; (8005454 <HAL_ETH_MspInit+0x16c>)
 8005434:	f7fd f85e 	bl	80024f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005438:	bf00      	nop
 800543a:	3738      	adds	r7, #56	; 0x38
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40028000 	.word	0x40028000
 8005444:	40023800 	.word	0x40023800
 8005448:	40020800 	.word	0x40020800
 800544c:	40020000 	.word	0x40020000
 8005450:	40020400 	.word	0x40020400
 8005454:	40021800 	.word	0x40021800

08005458 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800545c:	4802      	ldr	r0, [pc, #8]	; (8005468 <ETH_PHY_IO_Init+0x10>)
 800545e:	f7fc fbef 	bl	8001c40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20005158 	.word	0x20005158

0800546c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return 0;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4807      	ldr	r0, [pc, #28]	; (80054ac <ETH_PHY_IO_ReadReg+0x30>)
 8005490:	f7fc fa3e 	bl	8001910 <HAL_ETH_ReadPHYRegister>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e000      	b.n	80054a2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20005158 	.word	0x20005158

080054b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	4807      	ldr	r0, [pc, #28]	; (80054e0 <ETH_PHY_IO_WriteReg+0x30>)
 80054c4:	f7fc fa6f 	bl	80019a6 <HAL_ETH_WritePHYRegister>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	e000      	b.n	80054d6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20005158 	.word	0x20005158

080054e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054e8:	f7fb fdfc 	bl	80010e4 <HAL_GetTick>
 80054ec:	4603      	mov	r3, r0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0a0      	sub	sp, #128	; 0x80
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	2264      	movs	r2, #100	; 0x64
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f00b fcb8 	bl	8010e7a <memset>
  int32_t PHYLinkState = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005512:	2300      	movs	r3, #0
 8005514:	67bb      	str	r3, [r7, #120]	; 0x78
 8005516:	2300      	movs	r3, #0
 8005518:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800551a:	483a      	ldr	r0, [pc, #232]	; (8005604 <ethernet_link_check_state+0x110>)
 800551c:	f7fb fd09 	bl	8000f32 <LAN8742_GetLinkState>
 8005520:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <ethernet_link_check_state+0x5a>
 8005534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005536:	2b01      	cmp	r3, #1
 8005538:	dc09      	bgt.n	800554e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800553a:	4833      	ldr	r0, [pc, #204]	; (8005608 <ethernet_link_check_state+0x114>)
 800553c:	f7fb ffc3 	bl	80014c6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 fe6d 	bl	8007220 <netif_set_down>
    netif_set_link_down(netif);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fed0 	bl	80072ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800554c:	e055      	b.n	80055fa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d14e      	bne.n	80055fa <ethernet_link_check_state+0x106>
 800555c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800555e:	2b01      	cmp	r3, #1
 8005560:	dd4b      	ble.n	80055fa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005564:	3b02      	subs	r3, #2
 8005566:	2b03      	cmp	r3, #3
 8005568:	d82a      	bhi.n	80055c0 <ethernet_link_check_state+0xcc>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <ethernet_link_check_state+0x7c>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005581 	.word	0x08005581
 8005574:	08005593 	.word	0x08005593
 8005578:	080055a3 	.word	0x080055a3
 800557c:	080055b3 	.word	0x080055b3
      duplex = ETH_FULLDUPLEX_MODE;
 8005580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005584:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800558a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800558c:	2301      	movs	r3, #1
 800558e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005590:	e017      	b.n	80055c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005592:	2300      	movs	r3, #0
 8005594:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800559a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055a0:	e00f      	b.n	80055c2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80055a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055a6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80055a8:	2300      	movs	r3, #0
 80055aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055b0:	e007      	b.n	80055c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80055b6:	2300      	movs	r3, #0
 80055b8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055be:	e000      	b.n	80055c2 <ethernet_link_check_state+0xce>
      break;
 80055c0:	bf00      	nop
    if(linkchanged)
 80055c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d018      	beq.n	80055fa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80055c8:	f107 030c 	add.w	r3, r7, #12
 80055cc:	4619      	mov	r1, r3
 80055ce:	480e      	ldr	r0, [pc, #56]	; (8005608 <ethernet_link_check_state+0x114>)
 80055d0:	f7fc fa32 	bl	8001a38 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80055d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055da:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80055dc:	f107 030c 	add.w	r3, r7, #12
 80055e0:	4619      	mov	r1, r3
 80055e2:	4809      	ldr	r0, [pc, #36]	; (8005608 <ethernet_link_check_state+0x114>)
 80055e4:	f7fc fb12 	bl	8001c0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80055e8:	4807      	ldr	r0, [pc, #28]	; (8005608 <ethernet_link_check_state+0x114>)
 80055ea:	f7fb ff0d 	bl	8001408 <HAL_ETH_Start>
      netif_set_up(netif);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 fdaa 	bl	8007148 <netif_set_up>
      netif_set_link_up(netif);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fe45 	bl	8007284 <netif_set_link_up>
}
 80055fa:	bf00      	nop
 80055fc:	3780      	adds	r7, #128	; 0x80
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20005240 	.word	0x20005240
 8005608:	20005158 	.word	0x20005158

0800560c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005614:	4812      	ldr	r0, [pc, #72]	; (8005660 <HAL_ETH_RxAllocateCallback+0x54>)
 8005616:	f001 fb11 	bl	8006c3c <memp_malloc_pool>
 800561a:	60f8      	str	r0, [r7, #12]
  if (p)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d014      	beq.n	800564c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f103 0220 	add.w	r2, r3, #32
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_ETH_RxAllocateCallback+0x58>)
 8005630:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2241      	movs	r2, #65	; 0x41
 8005642:	2100      	movs	r1, #0
 8005644:	2000      	movs	r0, #0
 8005646:	f002 f847 	bl	80076d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800564a:	e005      	b.n	8005658 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <HAL_ETH_RxAllocateCallback+0x5c>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	08014840 	.word	0x08014840
 8005664:	080052a5 	.word	0x080052a5
 8005668:	20005154 	.word	0x20005154

0800566c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3b20      	subs	r3, #32
 800568a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2200      	movs	r2, #0
 8005696:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e003      	b.n	80056b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e009      	b.n	80056d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	891a      	ldrh	r2, [r3, #8]
 80056c8:	887b      	ldrh	r3, [r7, #2]
 80056ca:	4413      	add	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f2      	bne.n	80056c4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fc30 	bl	8004f48 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80056e8:	bf00      	nop
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <fs_open+0x16>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <fs_open+0x1c>
    return ERR_ARG;
 8005706:	f06f 030f 	mvn.w	r3, #15
 800570a:	e028      	b.n	800575e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <fs_open+0x78>)
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e020      	b.n	8005754 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4619      	mov	r1, r3
 8005718:	6838      	ldr	r0, [r7, #0]
 800571a:	f7fa fd91 	bl	8000240 <strcmp>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d114      	bne.n	800574e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	7c1a      	ldrb	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e007      	b.n	800575e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1db      	bne.n	8005712 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800575a:	f06f 0305 	mvn.w	r3, #5
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	080155cc 	.word	0x080155cc

0800576c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	1ad3      	subs	r3, r2, r3
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80057a6:	222c      	movs	r2, #44	; 0x2c
 80057a8:	2100      	movs	r1, #0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f00b fb65 	bl	8010e7a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80057be:	202c      	movs	r0, #44	; 0x2c
 80057c0:	f001 f8ce 	bl	8006960 <mem_malloc>
 80057c4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ffe6 	bl	800579e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80057d2:	687b      	ldr	r3, [r7, #4]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ffbb 	bl	800576c <fs_close>
    hs->handle = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4618      	mov	r0, r3
 800580a:	f002 f91f 	bl	8007a4c <pbuf_free>
    hs->req = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <http_state_free+0x1a>
    http_state_eof(hs);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ffd6 	bl	80057dc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ff2f 	bl	8006694 <mem_free>
  }
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <http_write+0x22>
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <http_write+0xc8>)
 8005856:	f240 2219 	movw	r2, #537	; 0x219
 800585a:	492c      	ldr	r1, [pc, #176]	; (800590c <http_write+0xcc>)
 800585c:	482c      	ldr	r0, [pc, #176]	; (8005910 <http_write+0xd0>)
 800585e:	f00b faa7 	bl	8010db0 <iprintf>
  len = *length;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005868:	8afb      	ldrh	r3, [r7, #22]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <http_write+0x32>
    return ERR_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e045      	b.n	80058fe <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005878:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800587a:	8aba      	ldrh	r2, [r7, #20]
 800587c:	8afb      	ldrh	r3, [r7, #22]
 800587e:	429a      	cmp	r2, r3
 8005880:	d201      	bcs.n	8005886 <http_write+0x46>
    len = max_len;
 8005882:	8abb      	ldrh	r3, [r7, #20]
 8005884:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800588e:	8afa      	ldrh	r2, [r7, #22]
 8005890:	8abb      	ldrh	r3, [r7, #20]
 8005892:	429a      	cmp	r2, r3
 8005894:	d901      	bls.n	800589a <http_write+0x5a>
    len = max_len;
 8005896:	8abb      	ldrh	r3, [r7, #20]
 8005898:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	8afa      	ldrh	r2, [r7, #22]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f006 fe5b 	bl	800c55c <tcp_write>
 80058a6:	4603      	mov	r3, r0
 80058a8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80058aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d10f      	bne.n	80058d4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d902      	bls.n	80058ce <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80058c8:	2301      	movs	r3, #1
 80058ca:	82fb      	strh	r3, [r7, #22]
 80058cc:	e002      	b.n	80058d4 <http_write+0x94>
      } else {
        len /= 2;
 80058ce:	8afb      	ldrh	r3, [r7, #22]
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80058d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d102      	bne.n	80058e4 <http_write+0xa4>
 80058de:	8afb      	ldrh	r3, [r7, #22]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d8da      	bhi.n	800589a <http_write+0x5a>

  if (err == ERR_OK) {
 80058e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8afa      	ldrh	r2, [r7, #22]
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	e002      	b.n	80058fa <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80058fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	08011cbc 	.word	0x08011cbc
 800590c:	08011cf4 	.word	0x08011cf4
 8005910:	08011d04 	.word	0x08011d04

08005914 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005922:	2100      	movs	r1, #0
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f003 fed7 	bl	80096d8 <tcp_arg>
  altcp_recv(pcb, NULL);
 800592a:	2100      	movs	r1, #0
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f003 fee5 	bl	80096fc <tcp_recv>
  altcp_err(pcb, NULL);
 8005932:	2100      	movs	r1, #0
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f003 ff25 	bl	8009784 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800593a:	2200      	movs	r2, #0
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f003 ff5a 	bl	80097f8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005944:	2100      	movs	r1, #0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f003 fefa 	bl	8009740 <tcp_sent>
  if (hs != NULL) {
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005952:	68b8      	ldr	r0, [r7, #8]
 8005954:	f7ff ff62 	bl	800581c <http_state_free>
  }

  if (abort_conn) {
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f002 fdfc 	bl	800855c <tcp_abort>
    return ERR_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e00f      	b.n	8005988 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f002 fd0d 	bl	8008388 <tcp_close>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800597a:	2204      	movs	r2, #4
 800597c:	4904      	ldr	r1, [pc, #16]	; (8005990 <http_close_or_abort_conn+0x7c>)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f003 ff3a 	bl	80097f8 <tcp_poll>
  }
  return err;
 8005984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	08006057 	.word	0x08006057

08005994 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800599e:	2200      	movs	r2, #0
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ffb6 	bl	8005914 <http_close_or_abort_conn>
 80059a8:	4603      	mov	r3, r0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff ffe8 	bl	8005994 <http_close_conn>
  }
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ffe6 	bl	80059b2 <http_eof>
    return 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e016      	b.n	8005a18 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fec6 	bl	8005780 <fs_bytes_left>
 80059f4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dc05      	bgt.n	8005a08 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ffd7 	bl	80059b2 <http_eof>
    return 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e007      	b.n	8005a18 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <http_check_eof+0x54>)
 8005a0a:	f240 429d 	movw	r2, #1181	; 0x49d
 8005a0e:	4905      	ldr	r1, [pc, #20]	; (8005a24 <http_check_eof+0x58>)
 8005a10:	4805      	ldr	r0, [pc, #20]	; (8005a28 <http_check_eof+0x5c>)
 8005a12:	f00b f9cd 	bl	8010db0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005a16:	2301      	movs	r3, #1
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	08011cbc 	.word	0x08011cbc
 8005a24:	08011d2c 	.word	0x08011d2c
 8005a28:	08011d04 	.word	0x08011d04

08005a2c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d803      	bhi.n	8005a4e <http_send_data_nonssi+0x22>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	e001      	b.n	8005a52 <http_send_data_nonssi+0x26>
 8005a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a52:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	f107 020c 	add.w	r2, r7, #12
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff feee 	bl	8005840 <http_write>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10d      	bne.n	8005a8c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	89ba      	ldrh	r2, [r7, #12]
 8005a7a:	441a      	add	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	89ba      	ldrh	r2, [r7, #12]
 8005a86:	1a9a      	subs	r2, r3, r2
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <http_send+0x18>
    return 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e025      	b.n	8005afa <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ff87 	bl	80059cc <http_check_eof>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <http_send+0x32>
      return 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e018      	b.n	8005afa <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff ffae 	bl	8005a2c <http_send_data_nonssi>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10d      	bne.n	8005af8 <http_send+0x62>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fe4d 	bl	8005780 <fs_bytes_left>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dc05      	bgt.n	8005af8 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ff5f 	bl	80059b2 <http_eof>
    return 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <http_get_404_file+0x80>)
 8005b12:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7ff fde7 	bl	80056f0 <fs_open>
 8005b22:	4603      	mov	r3, r0
 8005b24:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d024      	beq.n	8005b78 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <http_get_404_file+0x84>)
 8005b32:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7ff fdd7 	bl	80056f0 <fs_open>
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d014      	beq.n	8005b78 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	4a0e      	ldr	r2, [pc, #56]	; (8005b8c <http_get_404_file+0x88>)
 8005b52:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7ff fdc7 	bl	80056f0 <fs_open>
 8005b62:	4603      	mov	r3, r0
 8005b64:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
        return NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005b78:	687b      	ldr	r3, [r7, #4]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	08011d64 	.word	0x08011d64
 8005b88:	08011d70 	.word	0x08011d70
 8005b8c:	08011d7c 	.word	0x08011d7c

08005b90 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <http_parse_request+0x24>
 8005ba6:	4b65      	ldr	r3, [pc, #404]	; (8005d3c <http_parse_request+0x1ac>)
 8005ba8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005bac:	4964      	ldr	r1, [pc, #400]	; (8005d40 <http_parse_request+0x1b0>)
 8005bae:	4865      	ldr	r0, [pc, #404]	; (8005d44 <http_parse_request+0x1b4>)
 8005bb0:	f00b f8fe 	bl	8010db0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <http_parse_request+0x38>
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <http_parse_request+0x1ac>)
 8005bbc:	f240 72af 	movw	r2, #1967	; 0x7af
 8005bc0:	4961      	ldr	r1, [pc, #388]	; (8005d48 <http_parse_request+0x1b8>)
 8005bc2:	4860      	ldr	r0, [pc, #384]	; (8005d44 <http_parse_request+0x1b4>)
 8005bc4:	f00b f8f4 	bl	8010db0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <http_parse_request+0x48>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005bd8:	f06f 0307 	mvn.w	r3, #7
 8005bdc:	e0a9      	b.n	8005d32 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	621a      	str	r2, [r3, #32]
 8005bec:	e005      	b.n	8005bfa <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 ffeb 	bl	8007bd0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bfc:	f001 ffc6 	bl	8007b8c <pbuf_ref>

  if (hs->req->next != NULL) {
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	891b      	ldrh	r3, [r3, #8]
 8005c10:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bf28      	it	cs
 8005c18:	4613      	movcs	r3, r2
 8005c1a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6a18      	ldr	r0, [r3, #32]
 8005c20:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005c22:	2300      	movs	r3, #0
 8005c24:	4949      	ldr	r1, [pc, #292]	; (8005d4c <http_parse_request+0x1bc>)
 8005c26:	f002 f8fb 	bl	8007e20 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005c2a:	4b48      	ldr	r3, [pc, #288]	; (8005d4c <http_parse_request+0x1bc>)
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2e:	e005      	b.n	8005c3c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	895b      	ldrh	r3, [r3, #10]
 8005c3a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005c3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d962      	bls.n	8005d08 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005c42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c44:	461a      	mov	r2, r3
 8005c46:	4942      	ldr	r1, [pc, #264]	; (8005d50 <http_parse_request+0x1c0>)
 8005c48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c4a:	f000 fb99 	bl	8006380 <lwip_strnstr>
 8005c4e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d058      	beq.n	8005d08 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	493d      	ldr	r1, [pc, #244]	; (8005d54 <http_parse_request+0x1c4>)
 8005c5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c60:	f00b f920 	bl	8010ea4 <strncmp>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d116      	bne.n	8005c98 <http_parse_request+0x108>
        sp1 = data + 3;
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	3303      	adds	r3, #3
 8005c6e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3301      	adds	r3, #1
 8005c84:	8b7a      	ldrh	r2, [r7, #26]
 8005c86:	4934      	ldr	r1, [pc, #208]	; (8005d58 <http_parse_request+0x1c8>)
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb79 	bl	8006380 <lwip_strnstr>
 8005c8e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d111      	bne.n	8005cba <http_parse_request+0x12a>
 8005c96:	e006      	b.n	8005ca6 <http_parse_request+0x116>
        data[4] = 0;
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005ca0:	f06f 030f 	mvn.w	r3, #15
 8005ca4:	e045      	b.n	8005d32 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	8b7a      	ldrh	r2, [r7, #26]
 8005cac:	4928      	ldr	r1, [pc, #160]	; (8005d50 <http_parse_request+0x1c0>)
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fb66 	bl	8006380 <lwip_strnstr>
 8005cb4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01e      	beq.n	8005d08 <http_parse_request+0x178>
 8005cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d91a      	bls.n	8005d08 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005cd2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4921      	ldr	r1, [pc, #132]	; (8005d5c <http_parse_request+0x1cc>)
 8005cd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cda:	f000 fb51 	bl	8006380 <lwip_strnstr>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d011      	beq.n	8005d08 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005cf0:	8b3b      	ldrh	r3, [r7, #24]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	6979      	ldr	r1, [r7, #20]
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f000 f82e 	bl	8005d60 <http_find_file>
 8005d04:	4603      	mov	r3, r0
 8005d06:	e014      	b.n	8005d32 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 ff25 	bl	8007b5c <pbuf_clen>
 8005d12:	4603      	mov	r3, r0
 8005d14:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	891b      	ldrh	r3, [r3, #8]
 8005d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d20:	d205      	bcs.n	8005d2e <http_parse_request+0x19e>
 8005d22:	8a7b      	ldrh	r3, [r7, #18]
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d802      	bhi.n	8005d2e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005d28:	f06f 0304 	mvn.w	r3, #4
 8005d2c:	e001      	b.n	8005d32 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005d2e:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3738      	adds	r7, #56	; 0x38
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08011cbc 	.word	0x08011cbc
 8005d40:	08011d88 	.word	0x08011d88
 8005d44:	08011d04 	.word	0x08011d04
 8005d48:	08011d94 	.word	0x08011d94
 8005d4c:	20005260 	.word	0x20005260
 8005d50:	08011da0 	.word	0x08011da0
 8005d54:	08011da4 	.word	0x08011da4
 8005d58:	08011dac 	.word	0x08011dac
 8005d5c:	08011db0 	.word	0x08011db0

08005d60 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b092      	sub	sp, #72	; 0x48
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fa69 	bl	8000254 <strlen>
 8005d82:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d06b      	beq.n	8005e62 <http_find_file+0x102>
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	4413      	add	r3, r2
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b2f      	cmp	r3, #47	; 0x2f
 8005d96:	d164      	bne.n	8005e62 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005d98:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005d9a:	4a53      	ldr	r2, [pc, #332]	; (8005ee8 <http_find_file+0x188>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d102      	bne.n	8005da6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d15d      	bne.n	8005e62 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b3f      	cmp	r3, #63	; 0x3f
 8005dac:	bf28      	it	cs
 8005dae:	233f      	movcs	r3, #63	; 0x3f
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	484a      	ldr	r0, [pc, #296]	; (8005ee8 <http_find_file+0x188>)
 8005dc0:	f00b f8ef 	bl	8010fa2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005dc4:	4a48      	ldr	r2, [pc, #288]	; (8005ee8 <http_find_file+0x188>)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	4413      	add	r3, r2
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005dce:	2300      	movs	r3, #0
 8005dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd2:	e043      	b.n	8005e5c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d028      	beq.n	8005e2c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005de0:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01e      	beq.n	8005e26 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8005de8:	4a40      	ldr	r2, [pc, #256]	; (8005eec <http_find_file+0x18c>)
 8005dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fa fa2f 	bl	8000254 <strlen>
 8005df6:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	bf28      	it	cs
 8005e00:	4613      	movcs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	4a38      	ldr	r2, [pc, #224]	; (8005ee8 <http_find_file+0x188>)
 8005e08:	1898      	adds	r0, r3, r2
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <http_find_file+0x18c>)
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4619      	mov	r1, r3
 8005e16:	f00b f8c4 	bl	8010fa2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	4413      	add	r3, r2
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <http_find_file+0x188>)
 8005e22:	2100      	movs	r1, #0
 8005e24:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <http_find_file+0x188>)
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2a:	e004      	b.n	8005e36 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005e2c:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <http_find_file+0x18c>)
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff fc58 	bl	80056f0 <fs_open>
 8005e40:	4603      	mov	r3, r0
 8005e42:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8005e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <http_find_file+0xf6>
        uri = file_name;
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8005e54:	e005      	b.n	8005e62 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	3301      	adds	r3, #1
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d9b8      	bls.n	8005dd4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d124      	bne.n	8005eb2 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	213f      	movs	r1, #63	; 0x3f
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f00b f80c 	bl	8010e8a <strchr>
 8005e72:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
      params++;
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	3301      	adds	r3, #1
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fc2f 	bl	80056f0 <fs_open>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <http_find_file+0x144>
      file = &hs->file_handle;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ea2:	e006      	b.n	8005eb2 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fe2a 	bl	8005b04 <http_get_404_file>
 8005eb0:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8005eb8:	f107 0308 	add.w	r3, r7, #8
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fe20 	bl	8005b04 <http_get_404_file>
 8005ec4:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f809 	bl	8005ef0 <http_init_file>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3740      	adds	r7, #64	; 0x40
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20005660 	.word	0x20005660
 8005eec:	080155e0 	.word	0x080155e0

08005ef0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d05c      	beq.n	8005fbe <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <http_init_file+0x2a>
 8005f0c:	4b35      	ldr	r3, [pc, #212]	; (8005fe4 <http_init_file+0xf4>)
 8005f0e:	f640 120b 	movw	r2, #2315	; 0x90b
 8005f12:	4935      	ldr	r1, [pc, #212]	; (8005fe8 <http_init_file+0xf8>)
 8005f14:	4835      	ldr	r0, [pc, #212]	; (8005fec <http_init_file+0xfc>)
 8005f16:	f00a ff4b 	bl	8010db0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da06      	bge.n	8005f3e <http_init_file+0x4e>
 8005f30:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <http_init_file+0xf4>)
 8005f32:	f640 1234 	movw	r2, #2356	; 0x934
 8005f36:	492e      	ldr	r1, [pc, #184]	; (8005ff0 <http_init_file+0x100>)
 8005f38:	482c      	ldr	r0, [pc, #176]	; (8005fec <http_init_file+0xfc>)
 8005f3a:	f00a ff39 	bl	8010db0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	7c1b      	ldrb	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <http_init_file+0x7c>
 8005f5e:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <http_init_file+0xf4>)
 8005f60:	f640 1243 	movw	r2, #2371	; 0x943
 8005f64:	4923      	ldr	r1, [pc, #140]	; (8005ff4 <http_init_file+0x104>)
 8005f66:	4821      	ldr	r0, [pc, #132]	; (8005fec <http_init_file+0xfc>)
 8005f68:	f00a ff22 	bl	8010db0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d032      	beq.n	8005fd8 <http_init_file+0xe8>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	7c1b      	ldrb	r3, [r3, #16]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02b      	beq.n	8005fd8 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6998      	ldr	r0, [r3, #24]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	461a      	mov	r2, r3
 8005f8a:	491b      	ldr	r1, [pc, #108]	; (8005ff8 <http_init_file+0x108>)
 8005f8c:	f000 f9f8 	bl	8006380 <lwip_strnstr>
 8005f90:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24
 8005fbc:	e00c      	b.n	8005fd8 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08011cbc 	.word	0x08011cbc
 8005fe8:	08011db8 	.word	0x08011db8
 8005fec:	08011d04 	.word	0x08011d04
 8005ff0:	08011dcc 	.word	0x08011dcc
 8005ff4:	08011dec 	.word	0x08011dec
 8005ff8:	08011db0 	.word	0x08011db0

08005ffc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <http_err+0x1c>
    http_state_free(hs);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fc02 	bl	800581c <http_state_free>
  }
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <http_sent+0x1c>
    return ERR_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e008      	b.n	800604e <http_sent+0x2e>
  }

  hs->retries = 0;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f7ff fd25 	bl	8005a96 <http_send>

  return ERR_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d107      	bne.n	800607a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800606a:	2100      	movs	r1, #0
 800606c:	6838      	ldr	r0, [r7, #0]
 800606e:	f7ff fc91 	bl	8005994 <http_close_conn>
 8006072:	4603      	mov	r3, r0
 8006074:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e021      	b.n	80060be <http_poll+0x68>
  } else {
    hs->retries++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006080:	3301      	adds	r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006090:	2b04      	cmp	r3, #4
 8006092:	d105      	bne.n	80060a0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	6838      	ldr	r0, [r7, #0]
 8006098:	f7ff fc7c 	bl	8005994 <http_close_conn>
      return ERR_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e00e      	b.n	80060be <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	6838      	ldr	r0, [r7, #0]
 80060ac:	f7ff fcf3 	bl	8005a96 <http_send>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80060b6:	6838      	ldr	r0, [r7, #0]
 80060b8:	f007 f83a 	bl	800d130 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80060da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <http_recv+0x26>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <http_recv+0x26>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d111      	bne.n	8006112 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	891b      	ldrh	r3, [r3, #8]
 80060f8:	4619      	mov	r1, r3
 80060fa:	68b8      	ldr	r0, [r7, #8]
 80060fc:	f002 fc08 	bl	8008910 <tcp_recved>
      pbuf_free(p);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fca3 	bl	8007a4c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	68b8      	ldr	r0, [r7, #8]
 800610a:	f7ff fc43 	bl	8005994 <http_close_conn>
    return ERR_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e055      	b.n	80061be <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	891b      	ldrh	r3, [r3, #8]
 8006116:	4619      	mov	r1, r3
 8006118:	68b8      	ldr	r0, [r7, #8]
 800611a:	f002 fbf9 	bl	8008910 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d147      	bne.n	80061b6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fd30 	bl	8005b90 <http_parse_request>
 8006130:	4603      	mov	r3, r0
 8006132:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <http_recv+0xa0>
 800613c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006140:	f113 0f05 	cmn.w	r3, #5
 8006144:	d010      	beq.n	8006168 <http_recv+0xa0>
 8006146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800614a:	f113 0f10 	cmn.w	r3, #16
 800614e:	d00b      	beq.n	8006168 <http_recv+0xa0>
 8006150:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006154:	f113 0f08 	cmn.w	r3, #8
 8006158:	d006      	beq.n	8006168 <http_recv+0xa0>
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <http_recv+0x100>)
 800615c:	f640 2204 	movw	r2, #2564	; 0xa04
 8006160:	491a      	ldr	r1, [pc, #104]	; (80061cc <http_recv+0x104>)
 8006162:	481b      	ldr	r0, [pc, #108]	; (80061d0 <http_recv+0x108>)
 8006164:	f00a fe24 	bl	8010db0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800616c:	f113 0f05 	cmn.w	r3, #5
 8006170:	d00b      	beq.n	800618a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <http_recv+0xc2>
          pbuf_free(hs->req);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	4618      	mov	r0, r3
 8006180:	f001 fc64 	bl	8007a4c <pbuf_free>
          hs->req = NULL;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2200      	movs	r2, #0
 8006188:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fc5e 	bl	8007a4c <pbuf_free>
      if (parsed == ERR_OK) {
 8006190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f7ff fc7b 	bl	8005a96 <http_send>
 80061a0:	e00c      	b.n	80061bc <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80061a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061a6:	f113 0f10 	cmn.w	r3, #16
 80061aa:	d107      	bne.n	80061bc <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80061ac:	6979      	ldr	r1, [r7, #20]
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f7ff fbf0 	bl	8005994 <http_close_conn>
 80061b4:	e002      	b.n	80061bc <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fc48 	bl	8007a4c <pbuf_free>
    }
  }
  return ERR_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	08011cbc 	.word	0x08011cbc
 80061cc:	08011e18 	.word	0x08011e18
 80061d0:	08011d04 	.word	0x08011d04

080061d4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <http_accept+0x1c>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <http_accept+0x22>
    return ERR_VAL;
 80061f0:	f06f 0305 	mvn.w	r3, #5
 80061f4:	e025      	b.n	8006242 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80061f6:	2101      	movs	r1, #1
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f003 f86d 	bl	80092d8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80061fe:	f7ff fadb 	bl	80057b8 <http_state_alloc>
 8006202:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800620a:	f04f 33ff 	mov.w	r3, #4294967295
 800620e:	e018      	b.n	8006242 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	68b8      	ldr	r0, [r7, #8]
 800621a:	f003 fa5d 	bl	80096d8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800621e:	490b      	ldr	r1, [pc, #44]	; (800624c <http_accept+0x78>)
 8006220:	68b8      	ldr	r0, [r7, #8]
 8006222:	f003 fa6b 	bl	80096fc <tcp_recv>
  altcp_err(pcb, http_err);
 8006226:	490a      	ldr	r1, [pc, #40]	; (8006250 <http_accept+0x7c>)
 8006228:	68b8      	ldr	r0, [r7, #8]
 800622a:	f003 faab 	bl	8009784 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800622e:	2204      	movs	r2, #4
 8006230:	4908      	ldr	r1, [pc, #32]	; (8006254 <http_accept+0x80>)
 8006232:	68b8      	ldr	r0, [r7, #8]
 8006234:	f003 fae0 	bl	80097f8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006238:	4907      	ldr	r1, [pc, #28]	; (8006258 <http_accept+0x84>)
 800623a:	68b8      	ldr	r0, [r7, #8]
 800623c:	f003 fa80 	bl	8009740 <tcp_sent>

  return ERR_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	080060c9 	.word	0x080060c9
 8006250:	08005ffd 	.word	0x08005ffd
 8006254:	08006057 	.word	0x08006057
 8006258:	08006021 	.word	0x08006021

0800625c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d029      	beq.n	80062c2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800626e:	2101      	movs	r1, #1
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f003 f831 	bl	80092d8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	461a      	mov	r2, r3
 800627a:	4914      	ldr	r1, [pc, #80]	; (80062cc <httpd_init_pcb+0x70>)
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 f979 	bl	8008574 <tcp_bind>
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <httpd_init_pcb+0x40>
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <httpd_init_pcb+0x74>)
 8006290:	f640 2257 	movw	r2, #2647	; 0xa57
 8006294:	490f      	ldr	r1, [pc, #60]	; (80062d4 <httpd_init_pcb+0x78>)
 8006296:	4810      	ldr	r0, [pc, #64]	; (80062d8 <httpd_init_pcb+0x7c>)
 8006298:	f00a fd8a 	bl	8010db0 <iprintf>
    pcb = altcp_listen(pcb);
 800629c:	21ff      	movs	r1, #255	; 0xff
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f002 fa20 	bl	80086e4 <tcp_listen_with_backlog>
 80062a4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <httpd_init_pcb+0x5e>
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <httpd_init_pcb+0x74>)
 80062ae:	f640 2259 	movw	r2, #2649	; 0xa59
 80062b2:	490a      	ldr	r1, [pc, #40]	; (80062dc <httpd_init_pcb+0x80>)
 80062b4:	4808      	ldr	r0, [pc, #32]	; (80062d8 <httpd_init_pcb+0x7c>)
 80062b6:	f00a fd7b 	bl	8010db0 <iprintf>
    altcp_accept(pcb, http_accept);
 80062ba:	4909      	ldr	r1, [pc, #36]	; (80062e0 <httpd_init_pcb+0x84>)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f003 fa83 	bl	80097c8 <tcp_accept>
  }
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	080156d8 	.word	0x080156d8
 80062d0:	08011cbc 	.word	0x08011cbc
 80062d4:	08011e44 	.word	0x08011e44
 80062d8:	08011d04 	.word	0x08011d04
 80062dc:	08011e60 	.word	0x08011e60
 80062e0:	080061d5 	.word	0x080061d5

080062e4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80062ea:	202e      	movs	r0, #46	; 0x2e
 80062ec:	f003 f9e6 	bl	80096bc <tcp_new_ip_type>
 80062f0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <httpd_init+0x22>
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <httpd_init+0x34>)
 80062fa:	f640 2272 	movw	r2, #2674	; 0xa72
 80062fe:	4907      	ldr	r1, [pc, #28]	; (800631c <httpd_init+0x38>)
 8006300:	4807      	ldr	r0, [pc, #28]	; (8006320 <httpd_init+0x3c>)
 8006302:	f00a fd55 	bl	8010db0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006306:	2150      	movs	r1, #80	; 0x50
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ffa7 	bl	800625c <httpd_init_pcb>
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	08011cbc 	.word	0x08011cbc
 800631c:	08011e80 	.word	0x08011e80
 8006320:	08011d04 	.word	0x08011d04

08006324 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	b21a      	sxth	r2, r3
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	b29b      	uxth	r3, r3
 800633a:	b21b      	sxth	r3, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	b21b      	sxth	r3, r3
 8006340:	b29b      	uxth	r3, r3
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	061a      	lsls	r2, r3, #24
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0e1b      	lsrs	r3, r3, #24
 8006372:	4313      	orrs	r3, r2
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800638c:	68b8      	ldr	r0, [r7, #8]
 800638e:	f7f9 ff61 	bl	8000254 <strlen>
 8006392:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	e022      	b.n	80063e4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e012      	b.n	80063ca <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d109      	bne.n	80063c4 <lwip_strnstr+0x44>
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	6978      	ldr	r0, [r7, #20]
 80063b6:	f00a fd75 	bl	8010ea4 <strncmp>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e00f      	b.n	80063e4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3301      	adds	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <lwip_strnstr+0x62>
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	441a      	add	r2, r3
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	440b      	add	r3, r1
 80063de:	429a      	cmp	r2, r3
 80063e0:	d9e0      	bls.n	80063a4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80063f6:	f000 f8d5 	bl	80065a4 <mem_init>
  memp_init();
 80063fa:	f000 fbdb 	bl	8006bb4 <memp_init>
  pbuf_init();
  netif_init();
 80063fe:	f000 fcd9 	bl	8006db4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006402:	f007 ff55 	bl	800e2b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006406:	f001 fdaf 	bl	8007f68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800640a:	f007 fec7 	bl	800e19c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <ptr_to_mem+0x20>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	4413      	add	r3, r2
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20005d0c 	.word	0x20005d0c

0800643c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <mem_to_ptr+0x20>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	b29b      	uxth	r3, r3
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20005d0c 	.word	0x20005d0c

08006460 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006468:	4b45      	ldr	r3, [pc, #276]	; (8006580 <plug_holes+0x120>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d206      	bcs.n	8006480 <plug_holes+0x20>
 8006472:	4b44      	ldr	r3, [pc, #272]	; (8006584 <plug_holes+0x124>)
 8006474:	f240 12df 	movw	r2, #479	; 0x1df
 8006478:	4943      	ldr	r1, [pc, #268]	; (8006588 <plug_holes+0x128>)
 800647a:	4844      	ldr	r0, [pc, #272]	; (800658c <plug_holes+0x12c>)
 800647c:	f00a fc98 	bl	8010db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006480:	4b43      	ldr	r3, [pc, #268]	; (8006590 <plug_holes+0x130>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d306      	bcc.n	8006498 <plug_holes+0x38>
 800648a:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <plug_holes+0x124>)
 800648c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006490:	4940      	ldr	r1, [pc, #256]	; (8006594 <plug_holes+0x134>)
 8006492:	483e      	ldr	r0, [pc, #248]	; (800658c <plug_holes+0x12c>)
 8006494:	f00a fc8c 	bl	8010db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	791b      	ldrb	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d006      	beq.n	80064ae <plug_holes+0x4e>
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <plug_holes+0x124>)
 80064a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80064a6:	493c      	ldr	r1, [pc, #240]	; (8006598 <plug_holes+0x138>)
 80064a8:	4838      	ldr	r0, [pc, #224]	; (800658c <plug_holes+0x12c>)
 80064aa:	f00a fc81 	bl	8010db0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064b6:	d906      	bls.n	80064c6 <plug_holes+0x66>
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <plug_holes+0x124>)
 80064ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80064be:	4937      	ldr	r1, [pc, #220]	; (800659c <plug_holes+0x13c>)
 80064c0:	4832      	ldr	r0, [pc, #200]	; (800658c <plug_holes+0x12c>)
 80064c2:	f00a fc75 	bl	8010db0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff ffa4 	bl	8006418 <ptr_to_mem>
 80064d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d024      	beq.n	8006524 <plug_holes+0xc4>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	791b      	ldrb	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d120      	bne.n	8006524 <plug_holes+0xc4>
 80064e2:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <plug_holes+0x130>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d01b      	beq.n	8006524 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80064ec:	4b2c      	ldr	r3, [pc, #176]	; (80065a0 <plug_holes+0x140>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d102      	bne.n	80064fc <plug_holes+0x9c>
      lfree = mem;
 80064f6:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <plug_holes+0x140>)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800650c:	d00a      	beq.n	8006524 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff ff80 	bl	8006418 <ptr_to_mem>
 8006518:	4604      	mov	r4, r0
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff8e 	bl	800643c <mem_to_ptr>
 8006520:	4603      	mov	r3, r0
 8006522:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	885b      	ldrh	r3, [r3, #2]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ff75 	bl	8006418 <ptr_to_mem>
 800652e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d01f      	beq.n	8006578 <plug_holes+0x118>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	791b      	ldrb	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11b      	bne.n	8006578 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <plug_holes+0x140>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d102      	bne.n	8006550 <plug_holes+0xf0>
      lfree = pmem;
 800654a:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <plug_holes+0x140>)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	881a      	ldrh	r2, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006560:	d00a      	beq.n	8006578 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff56 	bl	8006418 <ptr_to_mem>
 800656c:	4604      	mov	r4, r0
 800656e:	68b8      	ldr	r0, [r7, #8]
 8006570:	f7ff ff64 	bl	800643c <mem_to_ptr>
 8006574:	4603      	mov	r3, r0
 8006576:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	20005d0c 	.word	0x20005d0c
 8006584:	08011e9c 	.word	0x08011e9c
 8006588:	08011ecc 	.word	0x08011ecc
 800658c:	08011ee4 	.word	0x08011ee4
 8006590:	20005d10 	.word	0x20005d10
 8006594:	08011f0c 	.word	0x08011f0c
 8006598:	08011f28 	.word	0x08011f28
 800659c:	08011f44 	.word	0x08011f44
 80065a0:	20005d14 	.word	0x20005d14

080065a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80065aa:	4b18      	ldr	r3, [pc, #96]	; (800660c <mem_init+0x68>)
 80065ac:	3303      	adds	r3, #3
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <mem_init+0x6c>)
 80065b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <mem_init+0x6c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80065d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80065d6:	f7ff ff1f 	bl	8006418 <ptr_to_mem>
 80065da:	4603      	mov	r3, r0
 80065dc:	4a0d      	ldr	r2, [pc, #52]	; (8006614 <mem_init+0x70>)
 80065de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <mem_init+0x70>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <mem_init+0x70>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <mem_init+0x70>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80065fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <mem_init+0x6c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a05      	ldr	r2, [pc, #20]	; (8006618 <mem_init+0x74>)
 8006602:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200056b8 	.word	0x200056b8
 8006610:	20005d0c 	.word	0x20005d0c
 8006614:	20005d10 	.word	0x20005d10
 8006618:	20005d14 	.word	0x20005d14

0800661c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ff09 	bl	800643c <mem_to_ptr>
 800662a:	4603      	mov	r3, r0
 800662c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fef0 	bl	8006418 <ptr_to_mem>
 8006638:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff feea 	bl	8006418 <ptr_to_mem>
 8006644:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800664e:	d818      	bhi.n	8006682 <mem_link_valid+0x66>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006658:	d813      	bhi.n	8006682 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800665e:	8afa      	ldrh	r2, [r7, #22]
 8006660:	429a      	cmp	r2, r3
 8006662:	d004      	beq.n	800666e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	8afa      	ldrh	r2, [r7, #22]
 800666a:	429a      	cmp	r2, r3
 800666c:	d109      	bne.n	8006682 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <mem_link_valid+0x74>)
 8006670:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	429a      	cmp	r2, r3
 8006676:	d006      	beq.n	8006686 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	8afa      	ldrh	r2, [r7, #22]
 800667e:	429a      	cmp	r2, r3
 8006680:	d001      	beq.n	8006686 <mem_link_valid+0x6a>
    return 0;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <mem_link_valid+0x6c>
  }
  return 1;
 8006686:	2301      	movs	r3, #1
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20005d10 	.word	0x20005d10

08006694 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04c      	beq.n	800673c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <mem_free+0xb0>)
 80066ae:	f240 2273 	movw	r2, #627	; 0x273
 80066b2:	4925      	ldr	r1, [pc, #148]	; (8006748 <mem_free+0xb4>)
 80066b4:	4825      	ldr	r0, [pc, #148]	; (800674c <mem_free+0xb8>)
 80066b6:	f00a fb7b 	bl	8010db0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066ba:	e040      	b.n	800673e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3b08      	subs	r3, #8
 80066c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80066c2:	4b23      	ldr	r3, [pc, #140]	; (8006750 <mem_free+0xbc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d306      	bcc.n	80066da <mem_free+0x46>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f103 020c 	add.w	r2, r3, #12
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <mem_free+0xc0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d907      	bls.n	80066ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <mem_free+0xb0>)
 80066dc:	f240 227f 	movw	r2, #639	; 0x27f
 80066e0:	491d      	ldr	r1, [pc, #116]	; (8006758 <mem_free+0xc4>)
 80066e2:	481a      	ldr	r0, [pc, #104]	; (800674c <mem_free+0xb8>)
 80066e4:	f00a fb64 	bl	8010db0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80066e8:	e029      	b.n	800673e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <mem_free+0xb0>)
 80066f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80066f8:	4918      	ldr	r1, [pc, #96]	; (800675c <mem_free+0xc8>)
 80066fa:	4814      	ldr	r0, [pc, #80]	; (800674c <mem_free+0xb8>)
 80066fc:	f00a fb58 	bl	8010db0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006700:	e01d      	b.n	800673e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff ff8a 	bl	800661c <mem_link_valid>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <mem_free+0xb0>)
 8006710:	f240 2295 	movw	r2, #661	; 0x295
 8006714:	4912      	ldr	r1, [pc, #72]	; (8006760 <mem_free+0xcc>)
 8006716:	480d      	ldr	r0, [pc, #52]	; (800674c <mem_free+0xb8>)
 8006718:	f00a fb4a 	bl	8010db0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800671c:	e00f      	b.n	800673e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <mem_free+0xd0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	429a      	cmp	r2, r3
 800672c:	d202      	bcs.n	8006734 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800672e:	4a0d      	ldr	r2, [pc, #52]	; (8006764 <mem_free+0xd0>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fe93 	bl	8006460 <plug_holes>
 800673a:	e000      	b.n	800673e <mem_free+0xaa>
    return;
 800673c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08011e9c 	.word	0x08011e9c
 8006748:	08011f70 	.word	0x08011f70
 800674c:	08011ee4 	.word	0x08011ee4
 8006750:	20005d0c 	.word	0x20005d0c
 8006754:	20005d10 	.word	0x20005d10
 8006758:	08011f94 	.word	0x08011f94
 800675c:	08011fb0 	.word	0x08011fb0
 8006760:	08011fd8 	.word	0x08011fd8
 8006764:	20005d14 	.word	0x20005d14

08006768 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	3303      	adds	r3, #3
 8006778:	b29b      	uxth	r3, r3
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006780:	8bfb      	ldrh	r3, [r7, #30]
 8006782:	2b0b      	cmp	r3, #11
 8006784:	d801      	bhi.n	800678a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006786:	230c      	movs	r3, #12
 8006788:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800678a:	8bfb      	ldrh	r3, [r7, #30]
 800678c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006790:	d803      	bhi.n	800679a <mem_trim+0x32>
 8006792:	8bfa      	ldrh	r2, [r7, #30]
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	429a      	cmp	r2, r3
 8006798:	d201      	bcs.n	800679e <mem_trim+0x36>
    return NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	e0cc      	b.n	8006938 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800679e:	4b68      	ldr	r3, [pc, #416]	; (8006940 <mem_trim+0x1d8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d304      	bcc.n	80067b2 <mem_trim+0x4a>
 80067a8:	4b66      	ldr	r3, [pc, #408]	; (8006944 <mem_trim+0x1dc>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d306      	bcc.n	80067c0 <mem_trim+0x58>
 80067b2:	4b65      	ldr	r3, [pc, #404]	; (8006948 <mem_trim+0x1e0>)
 80067b4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80067b8:	4964      	ldr	r1, [pc, #400]	; (800694c <mem_trim+0x1e4>)
 80067ba:	4865      	ldr	r0, [pc, #404]	; (8006950 <mem_trim+0x1e8>)
 80067bc:	f00a faf8 	bl	8010db0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80067c0:	4b5f      	ldr	r3, [pc, #380]	; (8006940 <mem_trim+0x1d8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d304      	bcc.n	80067d4 <mem_trim+0x6c>
 80067ca:	4b5e      	ldr	r3, [pc, #376]	; (8006944 <mem_trim+0x1dc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d301      	bcc.n	80067d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	e0af      	b.n	8006938 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3b08      	subs	r3, #8
 80067dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80067de:	69b8      	ldr	r0, [r7, #24]
 80067e0:	f7ff fe2c 	bl	800643c <mem_to_ptr>
 80067e4:	4603      	mov	r3, r0
 80067e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	881a      	ldrh	r2, [r3, #0]
 80067ec:	8afb      	ldrh	r3, [r7, #22]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b08      	subs	r3, #8
 80067f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80067f6:	8bfa      	ldrh	r2, [r7, #30]
 80067f8:	8abb      	ldrh	r3, [r7, #20]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d906      	bls.n	800680c <mem_trim+0xa4>
 80067fe:	4b52      	ldr	r3, [pc, #328]	; (8006948 <mem_trim+0x1e0>)
 8006800:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006804:	4953      	ldr	r1, [pc, #332]	; (8006954 <mem_trim+0x1ec>)
 8006806:	4852      	ldr	r0, [pc, #328]	; (8006950 <mem_trim+0x1e8>)
 8006808:	f00a fad2 	bl	8010db0 <iprintf>
  if (newsize > size) {
 800680c:	8bfa      	ldrh	r2, [r7, #30]
 800680e:	8abb      	ldrh	r3, [r7, #20]
 8006810:	429a      	cmp	r2, r3
 8006812:	d901      	bls.n	8006818 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	e08f      	b.n	8006938 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006818:	8bfa      	ldrh	r2, [r7, #30]
 800681a:	8abb      	ldrh	r3, [r7, #20]
 800681c:	429a      	cmp	r2, r3
 800681e:	d101      	bne.n	8006824 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	e089      	b.n	8006938 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fdf5 	bl	8006418 <ptr_to_mem>
 800682e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	791b      	ldrb	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d13f      	bne.n	80068b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006840:	d106      	bne.n	8006850 <mem_trim+0xe8>
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <mem_trim+0x1e0>)
 8006844:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006848:	4943      	ldr	r1, [pc, #268]	; (8006958 <mem_trim+0x1f0>)
 800684a:	4841      	ldr	r0, [pc, #260]	; (8006950 <mem_trim+0x1e8>)
 800684c:	f00a fab0 	bl	8010db0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006856:	8afa      	ldrh	r2, [r7, #22]
 8006858:	8bfb      	ldrh	r3, [r7, #30]
 800685a:	4413      	add	r3, r2
 800685c:	b29b      	uxth	r3, r3
 800685e:	3308      	adds	r3, #8
 8006860:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006862:	4b3e      	ldr	r3, [pc, #248]	; (800695c <mem_trim+0x1f4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d106      	bne.n	800687a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fdd2 	bl	8006418 <ptr_to_mem>
 8006874:	4603      	mov	r3, r0
 8006876:	4a39      	ldr	r2, [pc, #228]	; (800695c <mem_trim+0x1f4>)
 8006878:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800687a:	89fb      	ldrh	r3, [r7, #14]
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fdcb 	bl	8006418 <ptr_to_mem>
 8006882:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2200      	movs	r2, #0
 8006888:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	89ba      	ldrh	r2, [r7, #12]
 800688e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	8afa      	ldrh	r2, [r7, #22]
 8006894:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	89fa      	ldrh	r2, [r7, #14]
 800689a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068a4:	d047      	beq.n	8006936 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fdb4 	bl	8006418 <ptr_to_mem>
 80068b0:	4602      	mov	r2, r0
 80068b2:	89fb      	ldrh	r3, [r7, #14]
 80068b4:	8053      	strh	r3, [r2, #2]
 80068b6:	e03e      	b.n	8006936 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80068b8:	8bfb      	ldrh	r3, [r7, #30]
 80068ba:	f103 0214 	add.w	r2, r3, #20
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d838      	bhi.n	8006936 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80068c4:	8afa      	ldrh	r2, [r7, #22]
 80068c6:	8bfb      	ldrh	r3, [r7, #30]
 80068c8:	4413      	add	r3, r2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3308      	adds	r3, #8
 80068ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068d8:	d106      	bne.n	80068e8 <mem_trim+0x180>
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <mem_trim+0x1e0>)
 80068dc:	f240 3216 	movw	r2, #790	; 0x316
 80068e0:	491d      	ldr	r1, [pc, #116]	; (8006958 <mem_trim+0x1f0>)
 80068e2:	481b      	ldr	r0, [pc, #108]	; (8006950 <mem_trim+0x1e8>)
 80068e4:	f00a fa64 	bl	8010db0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fd94 	bl	8006418 <ptr_to_mem>
 80068f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <mem_trim+0x1f4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d202      	bcs.n	8006902 <mem_trim+0x19a>
      lfree = mem2;
 80068fc:	4a17      	ldr	r2, [pc, #92]	; (800695c <mem_trim+0x1f4>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2200      	movs	r2, #0
 8006906:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	8afa      	ldrh	r2, [r7, #22]
 8006914:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	89fa      	ldrh	r2, [r7, #14]
 800691a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006924:	d007      	beq.n	8006936 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fd74 	bl	8006418 <ptr_to_mem>
 8006930:	4602      	mov	r2, r0
 8006932:	89fb      	ldrh	r3, [r7, #14]
 8006934:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006936:	687b      	ldr	r3, [r7, #4]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20005d0c 	.word	0x20005d0c
 8006944:	20005d10 	.word	0x20005d10
 8006948:	08011e9c 	.word	0x08011e9c
 800694c:	0801200c 	.word	0x0801200c
 8006950:	08011ee4 	.word	0x08011ee4
 8006954:	08012024 	.word	0x08012024
 8006958:	08012044 	.word	0x08012044
 800695c:	20005d14 	.word	0x20005d14

08006960 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <mem_malloc+0x14>
    return NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	e0d9      	b.n	8006b28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	3303      	adds	r3, #3
 8006978:	b29b      	uxth	r3, r3
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006980:	8bbb      	ldrh	r3, [r7, #28]
 8006982:	2b0b      	cmp	r3, #11
 8006984:	d801      	bhi.n	800698a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006986:	230c      	movs	r3, #12
 8006988:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800698a:	8bbb      	ldrh	r3, [r7, #28]
 800698c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006990:	d803      	bhi.n	800699a <mem_malloc+0x3a>
 8006992:	8bba      	ldrh	r2, [r7, #28]
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	429a      	cmp	r2, r3
 8006998:	d201      	bcs.n	800699e <mem_malloc+0x3e>
    return NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	e0c4      	b.n	8006b28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800699e:	4b64      	ldr	r3, [pc, #400]	; (8006b30 <mem_malloc+0x1d0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fd4a 	bl	800643c <mem_to_ptr>
 80069a8:	4603      	mov	r3, r0
 80069aa:	83fb      	strh	r3, [r7, #30]
 80069ac:	e0b4      	b.n	8006b18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80069ae:	8bfb      	ldrh	r3, [r7, #30]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fd31 	bl	8006418 <ptr_to_mem>
 80069b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 80a4 	bne.w	8006b0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	8bfb      	ldrh	r3, [r7, #30]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f1a3 0208 	sub.w	r2, r3, #8
 80069d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f0c0 8099 	bcc.w	8006b0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	8bfb      	ldrh	r3, [r7, #30]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f1a3 0208 	sub.w	r2, r3, #8
 80069e6:	8bbb      	ldrh	r3, [r7, #28]
 80069e8:	3314      	adds	r3, #20
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d333      	bcc.n	8006a56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80069ee:	8bfa      	ldrh	r2, [r7, #30]
 80069f0:	8bbb      	ldrh	r3, [r7, #28]
 80069f2:	4413      	add	r3, r2
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3308      	adds	r3, #8
 80069f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80069fa:	8a7b      	ldrh	r3, [r7, #18]
 80069fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a00:	d106      	bne.n	8006a10 <mem_malloc+0xb0>
 8006a02:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <mem_malloc+0x1d4>)
 8006a04:	f240 3287 	movw	r2, #903	; 0x387
 8006a08:	494b      	ldr	r1, [pc, #300]	; (8006b38 <mem_malloc+0x1d8>)
 8006a0a:	484c      	ldr	r0, [pc, #304]	; (8006b3c <mem_malloc+0x1dc>)
 8006a0c:	f00a f9d0 	bl	8010db0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006a10:	8a7b      	ldrh	r3, [r7, #18]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fd00 	bl	8006418 <ptr_to_mem>
 8006a18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	881a      	ldrh	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8bfa      	ldrh	r2, [r7, #30]
 8006a2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	8a7a      	ldrh	r2, [r7, #18]
 8006a32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2201      	movs	r2, #1
 8006a38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a42:	d00b      	beq.n	8006a5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fce5 	bl	8006418 <ptr_to_mem>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	8a7b      	ldrh	r3, [r7, #18]
 8006a52:	8053      	strh	r3, [r2, #2]
 8006a54:	e002      	b.n	8006a5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a5c:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <mem_malloc+0x1d0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d127      	bne.n	8006ab6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006a66:	4b32      	ldr	r3, [pc, #200]	; (8006b30 <mem_malloc+0x1d0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006a6c:	e005      	b.n	8006a7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fcd0 	bl	8006418 <ptr_to_mem>
 8006a78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	791b      	ldrb	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <mem_malloc+0x12c>
 8006a82:	4b2f      	ldr	r3, [pc, #188]	; (8006b40 <mem_malloc+0x1e0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d1f0      	bne.n	8006a6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <mem_malloc+0x1d0>)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <mem_malloc+0x1d0>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <mem_malloc+0x1e0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d00b      	beq.n	8006ab6 <mem_malloc+0x156>
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <mem_malloc+0x1d0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	791b      	ldrb	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d006      	beq.n	8006ab6 <mem_malloc+0x156>
 8006aa8:	4b22      	ldr	r3, [pc, #136]	; (8006b34 <mem_malloc+0x1d4>)
 8006aaa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006aae:	4925      	ldr	r1, [pc, #148]	; (8006b44 <mem_malloc+0x1e4>)
 8006ab0:	4822      	ldr	r0, [pc, #136]	; (8006b3c <mem_malloc+0x1dc>)
 8006ab2:	f00a f97d 	bl	8010db0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006ab6:	8bba      	ldrh	r2, [r7, #28]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4413      	add	r3, r2
 8006abc:	3308      	adds	r3, #8
 8006abe:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <mem_malloc+0x1e0>)
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d906      	bls.n	8006ad4 <mem_malloc+0x174>
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <mem_malloc+0x1d4>)
 8006ac8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006acc:	491e      	ldr	r1, [pc, #120]	; (8006b48 <mem_malloc+0x1e8>)
 8006ace:	481b      	ldr	r0, [pc, #108]	; (8006b3c <mem_malloc+0x1dc>)
 8006ad0:	f00a f96e 	bl	8010db0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d006      	beq.n	8006aec <mem_malloc+0x18c>
 8006ade:	4b15      	ldr	r3, [pc, #84]	; (8006b34 <mem_malloc+0x1d4>)
 8006ae0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006ae4:	4919      	ldr	r1, [pc, #100]	; (8006b4c <mem_malloc+0x1ec>)
 8006ae6:	4815      	ldr	r0, [pc, #84]	; (8006b3c <mem_malloc+0x1dc>)
 8006ae8:	f00a f962 	bl	8010db0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <mem_malloc+0x1a4>
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <mem_malloc+0x1d4>)
 8006af8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006afc:	4914      	ldr	r1, [pc, #80]	; (8006b50 <mem_malloc+0x1f0>)
 8006afe:	480f      	ldr	r0, [pc, #60]	; (8006b3c <mem_malloc+0x1dc>)
 8006b00:	f00a f956 	bl	8010db0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3308      	adds	r3, #8
 8006b08:	e00e      	b.n	8006b28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006b0a:	8bfb      	ldrh	r3, [r7, #30]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fc83 	bl	8006418 <ptr_to_mem>
 8006b12:	4603      	mov	r3, r0
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b18:	8bfa      	ldrh	r2, [r7, #30]
 8006b1a:	8bbb      	ldrh	r3, [r7, #28]
 8006b1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006b20:	429a      	cmp	r2, r3
 8006b22:	f4ff af44 	bcc.w	80069ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20005d14 	.word	0x20005d14
 8006b34:	08011e9c 	.word	0x08011e9c
 8006b38:	08012044 	.word	0x08012044
 8006b3c:	08011ee4 	.word	0x08011ee4
 8006b40:	20005d10 	.word	0x20005d10
 8006b44:	08012058 	.word	0x08012058
 8006b48:	08012074 	.word	0x08012074
 8006b4c:	080120a4 	.word	0x080120a4
 8006b50:	080120d4 	.word	0x080120d4

08006b54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e011      	b.n	8006b9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	dbe7      	blt.n	8006b76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bba:	2300      	movs	r3, #0
 8006bbc:	80fb      	strh	r3, [r7, #6]
 8006bbe:	e009      	b.n	8006bd4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <memp_init+0x30>)
 8006bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff ffc3 	bl	8006b54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	80fb      	strh	r3, [r7, #6]
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d9f2      	bls.n	8006bc0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08015674 	.word	0x08015674

08006be8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d012      	beq.n	8006c24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <do_memp_malloc_pool+0x38>
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <do_memp_malloc_pool+0x48>)
 8006c14:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006c18:	4906      	ldr	r1, [pc, #24]	; (8006c34 <do_memp_malloc_pool+0x4c>)
 8006c1a:	4807      	ldr	r0, [pc, #28]	; (8006c38 <do_memp_malloc_pool+0x50>)
 8006c1c:	f00a f8c8 	bl	8010db0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e000      	b.n	8006c26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	080120f8 	.word	0x080120f8
 8006c34:	08012128 	.word	0x08012128
 8006c38:	0801214c 	.word	0x0801214c

08006c3c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <memp_malloc_pool+0x1c>
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <memp_malloc_pool+0x38>)
 8006c4c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006c50:	4909      	ldr	r1, [pc, #36]	; (8006c78 <memp_malloc_pool+0x3c>)
 8006c52:	480a      	ldr	r0, [pc, #40]	; (8006c7c <memp_malloc_pool+0x40>)
 8006c54:	f00a f8ac 	bl	8010db0 <iprintf>
  if (desc == NULL) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <memp_malloc_pool+0x26>
    return NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e003      	b.n	8006c6a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff ffc0 	bl	8006be8 <do_memp_malloc_pool>
 8006c68:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	080120f8 	.word	0x080120f8
 8006c78:	08012174 	.word	0x08012174
 8006c7c:	0801214c 	.word	0x0801214c

08006c80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d908      	bls.n	8006ca2 <memp_malloc+0x22>
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <memp_malloc+0x3c>)
 8006c92:	f240 1257 	movw	r2, #343	; 0x157
 8006c96:	490a      	ldr	r1, [pc, #40]	; (8006cc0 <memp_malloc+0x40>)
 8006c98:	480a      	ldr	r0, [pc, #40]	; (8006cc4 <memp_malloc+0x44>)
 8006c9a:	f00a f889 	bl	8010db0 <iprintf>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e008      	b.n	8006cb4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <memp_malloc+0x48>)
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff ff9c 	bl	8006be8 <do_memp_malloc_pool>
 8006cb0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	080120f8 	.word	0x080120f8
 8006cc0:	08012188 	.word	0x08012188
 8006cc4:	0801214c 	.word	0x0801214c
 8006cc8:	08015674 	.word	0x08015674

08006ccc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <do_memp_free_pool+0x22>
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <do_memp_free_pool+0x40>)
 8006ce2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006ce6:	490a      	ldr	r1, [pc, #40]	; (8006d10 <do_memp_free_pool+0x44>)
 8006ce8:	480a      	ldr	r0, [pc, #40]	; (8006d14 <do_memp_free_pool+0x48>)
 8006cea:	f00a f861 	bl	8010db0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	080120f8 	.word	0x080120f8
 8006d10:	080121a8 	.word	0x080121a8
 8006d14:	0801214c 	.word	0x0801214c

08006d18 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <memp_free_pool+0x1e>
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <memp_free_pool+0x3c>)
 8006d2a:	f240 1295 	movw	r2, #405	; 0x195
 8006d2e:	490a      	ldr	r1, [pc, #40]	; (8006d58 <memp_free_pool+0x40>)
 8006d30:	480a      	ldr	r0, [pc, #40]	; (8006d5c <memp_free_pool+0x44>)
 8006d32:	f00a f83d 	bl	8010db0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <memp_free_pool+0x34>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ffc1 	bl	8006ccc <do_memp_free_pool>
 8006d4a:	e000      	b.n	8006d4e <memp_free_pool+0x36>
    return;
 8006d4c:	bf00      	nop
}
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	080120f8 	.word	0x080120f8
 8006d58:	08012174 	.word	0x08012174
 8006d5c:	0801214c 	.word	0x0801214c

08006d60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d907      	bls.n	8006d82 <memp_free+0x22>
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <memp_free+0x44>)
 8006d74:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006d78:	490b      	ldr	r1, [pc, #44]	; (8006da8 <memp_free+0x48>)
 8006d7a:	480c      	ldr	r0, [pc, #48]	; (8006dac <memp_free+0x4c>)
 8006d7c:	f00a f818 	bl	8010db0 <iprintf>
 8006d80:	e00c      	b.n	8006d9c <memp_free+0x3c>

  if (mem == NULL) {
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <memp_free+0x50>)
 8006d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff ff9a 	bl	8006ccc <do_memp_free_pool>
 8006d98:	e000      	b.n	8006d9c <memp_free+0x3c>
    return;
 8006d9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	080120f8 	.word	0x080120f8
 8006da8:	080121c8 	.word	0x080121c8
 8006dac:	0801214c 	.word	0x0801214c
 8006db0:	08015674 	.word	0x08015674

08006db4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d108      	bne.n	8006dea <netif_add+0x26>
 8006dd8:	4b57      	ldr	r3, [pc, #348]	; (8006f38 <netif_add+0x174>)
 8006dda:	f240 1227 	movw	r2, #295	; 0x127
 8006dde:	4957      	ldr	r1, [pc, #348]	; (8006f3c <netif_add+0x178>)
 8006de0:	4857      	ldr	r0, [pc, #348]	; (8006f40 <netif_add+0x17c>)
 8006de2:	f009 ffe5 	bl	8010db0 <iprintf>
 8006de6:	2300      	movs	r3, #0
 8006de8:	e0a2      	b.n	8006f30 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <netif_add+0x3e>
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <netif_add+0x174>)
 8006df2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006df6:	4953      	ldr	r1, [pc, #332]	; (8006f44 <netif_add+0x180>)
 8006df8:	4851      	ldr	r0, [pc, #324]	; (8006f40 <netif_add+0x17c>)
 8006dfa:	f009 ffd9 	bl	8010db0 <iprintf>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e096      	b.n	8006f30 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006e08:	4b4f      	ldr	r3, [pc, #316]	; (8006f48 <netif_add+0x184>)
 8006e0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006e12:	4b4d      	ldr	r3, [pc, #308]	; (8006f48 <netif_add+0x184>)
 8006e14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006e1c:	4b4a      	ldr	r3, [pc, #296]	; (8006f48 <netif_add+0x184>)
 8006e1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a45      	ldr	r2, [pc, #276]	; (8006f4c <netif_add+0x188>)
 8006e36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a3a      	ldr	r2, [r7, #32]
 8006e50:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006e52:	4b3f      	ldr	r3, [pc, #252]	; (8006f50 <netif_add+0x18c>)
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e60:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f913 	bl	8007094 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	4798      	blx	r3
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <netif_add+0xba>
    return NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e058      	b.n	8006f30 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e84:	2bff      	cmp	r3, #255	; 0xff
 8006e86:	d103      	bne.n	8006e90 <netif_add+0xcc>
        netif->num = 0;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e94:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <netif_add+0x190>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	e02b      	b.n	8006ef4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d106      	bne.n	8006eb2 <netif_add+0xee>
 8006ea4:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <netif_add+0x174>)
 8006ea6:	f240 128b 	movw	r2, #395	; 0x18b
 8006eaa:	492b      	ldr	r1, [pc, #172]	; (8006f58 <netif_add+0x194>)
 8006eac:	4824      	ldr	r0, [pc, #144]	; (8006f40 <netif_add+0x17c>)
 8006eae:	f009 ff7f 	bl	8010db0 <iprintf>
        num_netifs++;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2bff      	cmp	r3, #255	; 0xff
 8006ebc:	dd06      	ble.n	8006ecc <netif_add+0x108>
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <netif_add+0x174>)
 8006ec0:	f240 128d 	movw	r2, #397	; 0x18d
 8006ec4:	4925      	ldr	r1, [pc, #148]	; (8006f5c <netif_add+0x198>)
 8006ec6:	481e      	ldr	r0, [pc, #120]	; (8006f40 <netif_add+0x17c>)
 8006ec8:	f009 ff72 	bl	8010db0 <iprintf>
        if (netif2->num == netif->num) {
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d108      	bne.n	8006eee <netif_add+0x12a>
          netif->num++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006eec:	e005      	b.n	8006efa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1d0      	bne.n	8006e9c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1be      	bne.n	8006e7e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f06:	2bfe      	cmp	r3, #254	; 0xfe
 8006f08:	d103      	bne.n	8006f12 <netif_add+0x14e>
    netif_num = 0;
 8006f0a:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <netif_add+0x18c>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e006      	b.n	8006f20 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f18:	3301      	adds	r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <netif_add+0x18c>)
 8006f1e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <netif_add+0x190>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006f28:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <netif_add+0x190>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	080121e4 	.word	0x080121e4
 8006f3c:	08012278 	.word	0x08012278
 8006f40:	08012234 	.word	0x08012234
 8006f44:	08012294 	.word	0x08012294
 8006f48:	080156d8 	.word	0x080156d8
 8006f4c:	0800736f 	.word	0x0800736f
 8006f50:	20008c0c 	.word	0x20008c0c
 8006f54:	20008c04 	.word	0x20008c04
 8006f58:	080122b8 	.word	0x080122b8
 8006f5c:	080122cc 	.word	0x080122cc

08006f60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f002 fde9 	bl	8009b44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f007 fb25 	bl	800e5c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <netif_do_set_ipaddr+0x20>
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <netif_do_set_ipaddr+0x88>)
 8006f98:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006f9c:	491c      	ldr	r1, [pc, #112]	; (8007010 <netif_do_set_ipaddr+0x8c>)
 8006f9e:	481d      	ldr	r0, [pc, #116]	; (8007014 <netif_do_set_ipaddr+0x90>)
 8006fa0:	f009 ff06 	bl	8010db0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <netif_do_set_ipaddr+0x34>
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <netif_do_set_ipaddr+0x88>)
 8006fac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006fb0:	4917      	ldr	r1, [pc, #92]	; (8007010 <netif_do_set_ipaddr+0x8c>)
 8006fb2:	4818      	ldr	r0, [pc, #96]	; (8007014 <netif_do_set_ipaddr+0x90>)
 8006fb4:	f009 fefc 	bl	8010db0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d01c      	beq.n	8007000 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006fd6:	f107 0314 	add.w	r3, r7, #20
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff ffbf 	bl	8006f60 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <netif_do_set_ipaddr+0x6a>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	e000      	b.n	8006ff0 <netif_do_set_ipaddr+0x6c>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f8d2 	bl	80071a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	080121e4 	.word	0x080121e4
 8007010:	080122fc 	.word	0x080122fc
 8007014:	08012234 	.word	0x08012234

08007018 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3308      	adds	r3, #8
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d00a      	beq.n	8007048 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <netif_do_set_netmask+0x26>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	e000      	b.n	8007040 <netif_do_set_netmask+0x28>
 800703e:	2300      	movs	r3, #0
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	330c      	adds	r3, #12
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d00a      	beq.n	8007086 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <netif_do_set_gw+0x26>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	e000      	b.n	800707e <netif_do_set_gw+0x28>
 800707c:	2300      	movs	r3, #0
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <netif_set_addr+0x90>)
 80070b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80070ba:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <netif_set_addr+0x90>)
 80070bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80070c4:	4b17      	ldr	r3, [pc, #92]	; (8007124 <netif_set_addr+0x90>)
 80070c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <netif_set_addr+0x42>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <netif_set_addr+0x46>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <netif_set_addr+0x48>
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80070e4:	f107 0310 	add.w	r3, r7, #16
 80070e8:	461a      	mov	r2, r3
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7ff ff49 	bl	8006f84 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff ff8e 	bl	8007018 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ffa8 	bl	8007056 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800710c:	f107 0310 	add.w	r3, r7, #16
 8007110:	461a      	mov	r2, r3
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff ff35 	bl	8006f84 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800711a:	bf00      	nop
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	080156d8 	.word	0x080156d8

08007128 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007130:	4a04      	ldr	r2, [pc, #16]	; (8007144 <netif_set_default+0x1c>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20008c08 	.word	0x20008c08

08007148 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <netif_set_up+0x1e>
 8007156:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <netif_set_up+0x4c>)
 8007158:	f44f 7254 	mov.w	r2, #848	; 0x350
 800715c:	490e      	ldr	r1, [pc, #56]	; (8007198 <netif_set_up+0x50>)
 800715e:	480f      	ldr	r0, [pc, #60]	; (800719c <netif_set_up+0x54>)
 8007160:	f009 fe26 	bl	8010db0 <iprintf>
 8007164:	e013      	b.n	800718e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007186:	2103      	movs	r1, #3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f809 	bl	80071a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	080121e4 	.word	0x080121e4
 8007198:	0801236c 	.word	0x0801236c
 800719c:	08012234 	.word	0x08012234

080071a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <netif_issue_reports+0x20>
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <netif_issue_reports+0x74>)
 80071b4:	f240 326d 	movw	r2, #877	; 0x36d
 80071b8:	4917      	ldr	r1, [pc, #92]	; (8007218 <netif_issue_reports+0x78>)
 80071ba:	4818      	ldr	r0, [pc, #96]	; (800721c <netif_issue_reports+0x7c>)
 80071bc:	f009 fdf8 	bl	8010db0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01e      	beq.n	800720c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d017      	beq.n	800720c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f008 f947 	bl	800f498 <etharp_request>
 800720a:	e000      	b.n	800720e <netif_issue_reports+0x6e>
    return;
 800720c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	080121e4 	.word	0x080121e4
 8007218:	08012388 	.word	0x08012388
 800721c:	08012234 	.word	0x08012234

08007220 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <netif_set_down+0x1e>
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <netif_set_down+0x58>)
 8007230:	f240 329b 	movw	r2, #923	; 0x39b
 8007234:	4911      	ldr	r1, [pc, #68]	; (800727c <netif_set_down+0x5c>)
 8007236:	4812      	ldr	r0, [pc, #72]	; (8007280 <netif_set_down+0x60>)
 8007238:	f009 fdba 	bl	8010db0 <iprintf>
 800723c:	e019      	b.n	8007272 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d012      	beq.n	8007272 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f007 fcd1 	bl	800ec14 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	080121e4 	.word	0x080121e4
 800727c:	080123ac 	.word	0x080123ac
 8007280:	08012234 	.word	0x08012234

08007284 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d107      	bne.n	80072a2 <netif_set_link_up+0x1e>
 8007292:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <netif_set_link_up+0x5c>)
 8007294:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007298:	4912      	ldr	r1, [pc, #72]	; (80072e4 <netif_set_link_up+0x60>)
 800729a:	4813      	ldr	r0, [pc, #76]	; (80072e8 <netif_set_link_up+0x64>)
 800729c:	f009 fd88 	bl	8010db0 <iprintf>
 80072a0:	e01b      	b.n	80072da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d114      	bne.n	80072da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072c2:	2103      	movs	r1, #3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ff6b 	bl	80071a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <netif_set_link_up+0x56>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	080121e4 	.word	0x080121e4
 80072e4:	080123cc 	.word	0x080123cc
 80072e8:	08012234 	.word	0x08012234

080072ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d107      	bne.n	800730a <netif_set_link_down+0x1e>
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <netif_set_link_down+0x54>)
 80072fc:	f240 4206 	movw	r2, #1030	; 0x406
 8007300:	4910      	ldr	r1, [pc, #64]	; (8007344 <netif_set_link_down+0x58>)
 8007302:	4811      	ldr	r0, [pc, #68]	; (8007348 <netif_set_link_down+0x5c>)
 8007304:	f009 fd54 	bl	8010db0 <iprintf>
 8007308:	e017      	b.n	800733a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d010      	beq.n	800733a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800731e:	f023 0304 	bic.w	r3, r3, #4
 8007322:	b2da      	uxtb	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <netif_set_link_down+0x4e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	080121e4 	.word	0x080121e4
 8007344:	080123f0 	.word	0x080123f0
 8007348:	08012234 	.word	0x08012234

0800734c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	61da      	str	r2, [r3, #28]
  }
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800737a:	f06f 030b 	mvn.w	r3, #11
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d013      	beq.n	80073c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <netif_get_by_index+0x48>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e00c      	b.n	80073be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073aa:	3301      	adds	r3, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	79fa      	ldrb	r2, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d101      	bne.n	80073b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e006      	b.n	80073c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1ef      	bne.n	80073a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20008c04 	.word	0x20008c04

080073d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <pbuf_free_ooseq+0x38>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <pbuf_free_ooseq+0x3c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	e00a      	b.n	8007402 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 fbe3 	bl	8009bc0 <tcp_free_ooseq>
      return;
 80073fa:	e005      	b.n	8007408 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f1      	bne.n	80073ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20008c0d 	.word	0x20008c0d
 8007414:	20008c1c 	.word	0x20008c1c

08007418 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800741c:	4b03      	ldr	r3, [pc, #12]	; (800742c <pbuf_pool_is_empty+0x14>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007422:	bf00      	nop
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	20008c0d 	.word	0x20008c0d

08007430 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4611      	mov	r1, r2
 800743c:	461a      	mov	r2, r3
 800743e:	460b      	mov	r3, r1
 8007440:	80fb      	strh	r3, [r7, #6]
 8007442:	4613      	mov	r3, r2
 8007444:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88ba      	ldrh	r2, [r7, #4]
 800745c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800745e:	8b3b      	ldrh	r3, [r7, #24]
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	7f3a      	ldrb	r2, [r7, #28]
 800746a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	73da      	strb	r2, [r3, #15]
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08c      	sub	sp, #48	; 0x30
 8007488:	af02      	add	r7, sp, #8
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
 800748e:	460b      	mov	r3, r1
 8007490:	80bb      	strh	r3, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80074a0:	d07f      	beq.n	80075a2 <pbuf_alloc+0x11e>
 80074a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80074a6:	f300 80c8 	bgt.w	800763a <pbuf_alloc+0x1b6>
 80074aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074ae:	d010      	beq.n	80074d2 <pbuf_alloc+0x4e>
 80074b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80074b4:	f300 80c1 	bgt.w	800763a <pbuf_alloc+0x1b6>
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <pbuf_alloc+0x3e>
 80074bc:	2b41      	cmp	r3, #65	; 0x41
 80074be:	f040 80bc 	bne.w	800763a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	88bb      	ldrh	r3, [r7, #4]
 80074c6:	4619      	mov	r1, r3
 80074c8:	2000      	movs	r0, #0
 80074ca:	f000 f8d1 	bl	8007670 <pbuf_alloc_reference>
 80074ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80074d0:	e0bd      	b.n	800764e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80074da:	88bb      	ldrh	r3, [r7, #4]
 80074dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80074de:	2008      	movs	r0, #8
 80074e0:	f7ff fbce 	bl	8006c80 <memp_malloc>
 80074e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80074ec:	f7ff ff94 	bl	8007418 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80074f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074f8:	f000 faa8 	bl	8007a4c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e0a7      	b.n	8007650 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007502:	3303      	adds	r3, #3
 8007504:	b29b      	uxth	r3, r3
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	b29b      	uxth	r3, r3
 800750c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007510:	b29b      	uxth	r3, r3
 8007512:	8b7a      	ldrh	r2, [r7, #26]
 8007514:	4293      	cmp	r3, r2
 8007516:	bf28      	it	cs
 8007518:	4613      	movcs	r3, r2
 800751a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800751c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800751e:	3310      	adds	r3, #16
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	3303      	adds	r3, #3
 8007526:	f023 0303 	bic.w	r3, r3, #3
 800752a:	4618      	mov	r0, r3
 800752c:	89f9      	ldrh	r1, [r7, #14]
 800752e:	8b7a      	ldrh	r2, [r7, #26]
 8007530:	2300      	movs	r3, #0
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	887b      	ldrh	r3, [r7, #2]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	4601      	mov	r1, r0
 800753c:	6938      	ldr	r0, [r7, #16]
 800753e:	f7ff ff77 	bl	8007430 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d006      	beq.n	800755c <pbuf_alloc+0xd8>
 800754e:	4b42      	ldr	r3, [pc, #264]	; (8007658 <pbuf_alloc+0x1d4>)
 8007550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007554:	4941      	ldr	r1, [pc, #260]	; (800765c <pbuf_alloc+0x1d8>)
 8007556:	4842      	ldr	r0, [pc, #264]	; (8007660 <pbuf_alloc+0x1dc>)
 8007558:	f009 fc2a 	bl	8010db0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800755c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800755e:	3303      	adds	r3, #3
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007568:	d106      	bne.n	8007578 <pbuf_alloc+0xf4>
 800756a:	4b3b      	ldr	r3, [pc, #236]	; (8007658 <pbuf_alloc+0x1d4>)
 800756c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007570:	493c      	ldr	r1, [pc, #240]	; (8007664 <pbuf_alloc+0x1e0>)
 8007572:	483b      	ldr	r0, [pc, #236]	; (8007660 <pbuf_alloc+0x1dc>)
 8007574:	f009 fc1c 	bl	8010db0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
 8007582:	e002      	b.n	800758a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800758e:	8b7a      	ldrh	r2, [r7, #26]
 8007590:	89fb      	ldrh	r3, [r7, #14]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800759a:	8b7b      	ldrh	r3, [r7, #26]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d19e      	bne.n	80074de <pbuf_alloc+0x5a>
      break;
 80075a0:	e055      	b.n	800764e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80075a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075a4:	3303      	adds	r3, #3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	88bb      	ldrh	r3, [r7, #4]
 80075b0:	3303      	adds	r3, #3
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f023 0303 	bic.w	r3, r3, #3
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80075be:	8b3b      	ldrh	r3, [r7, #24]
 80075c0:	3310      	adds	r3, #16
 80075c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075c4:	8b3a      	ldrh	r2, [r7, #24]
 80075c6:	88bb      	ldrh	r3, [r7, #4]
 80075c8:	3303      	adds	r3, #3
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d306      	bcc.n	80075e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80075d2:	8afa      	ldrh	r2, [r7, #22]
 80075d4:	88bb      	ldrh	r3, [r7, #4]
 80075d6:	3303      	adds	r3, #3
 80075d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d201      	bcs.n	80075e4 <pbuf_alloc+0x160>
        return NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e035      	b.n	8007650 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80075e4:	8afb      	ldrh	r3, [r7, #22]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff f9ba 	bl	8006960 <mem_malloc>
 80075ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <pbuf_alloc+0x174>
        return NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e02b      	b.n	8007650 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80075f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075fa:	3310      	adds	r3, #16
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	4413      	add	r3, r2
 8007600:	3303      	adds	r3, #3
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	4618      	mov	r0, r3
 8007608:	88b9      	ldrh	r1, [r7, #4]
 800760a:	88ba      	ldrh	r2, [r7, #4]
 800760c:	2300      	movs	r3, #0
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	887b      	ldrh	r3, [r7, #2]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	460b      	mov	r3, r1
 8007616:	4601      	mov	r1, r0
 8007618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800761a:	f7ff ff09 	bl	8007430 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d010      	beq.n	800764c <pbuf_alloc+0x1c8>
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <pbuf_alloc+0x1d4>)
 800762c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007630:	490d      	ldr	r1, [pc, #52]	; (8007668 <pbuf_alloc+0x1e4>)
 8007632:	480b      	ldr	r0, [pc, #44]	; (8007660 <pbuf_alloc+0x1dc>)
 8007634:	f009 fbbc 	bl	8010db0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007638:	e008      	b.n	800764c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <pbuf_alloc+0x1d4>)
 800763c:	f240 1227 	movw	r2, #295	; 0x127
 8007640:	490a      	ldr	r1, [pc, #40]	; (800766c <pbuf_alloc+0x1e8>)
 8007642:	4807      	ldr	r0, [pc, #28]	; (8007660 <pbuf_alloc+0x1dc>)
 8007644:	f009 fbb4 	bl	8010db0 <iprintf>
      return NULL;
 8007648:	2300      	movs	r3, #0
 800764a:	e001      	b.n	8007650 <pbuf_alloc+0x1cc>
      break;
 800764c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007650:	4618      	mov	r0, r3
 8007652:	3728      	adds	r7, #40	; 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	08012414 	.word	0x08012414
 800765c:	08012444 	.word	0x08012444
 8007660:	08012474 	.word	0x08012474
 8007664:	0801249c 	.word	0x0801249c
 8007668:	080124d0 	.word	0x080124d0
 800766c:	080124fc 	.word	0x080124fc

08007670 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	807b      	strh	r3, [r7, #2]
 800767c:	4613      	mov	r3, r2
 800767e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007680:	883b      	ldrh	r3, [r7, #0]
 8007682:	2b41      	cmp	r3, #65	; 0x41
 8007684:	d009      	beq.n	800769a <pbuf_alloc_reference+0x2a>
 8007686:	883b      	ldrh	r3, [r7, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d006      	beq.n	800769a <pbuf_alloc_reference+0x2a>
 800768c:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <pbuf_alloc_reference+0x5c>)
 800768e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007692:	490f      	ldr	r1, [pc, #60]	; (80076d0 <pbuf_alloc_reference+0x60>)
 8007694:	480f      	ldr	r0, [pc, #60]	; (80076d4 <pbuf_alloc_reference+0x64>)
 8007696:	f009 fb8b 	bl	8010db0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800769a:	2007      	movs	r0, #7
 800769c:	f7ff faf0 	bl	8006c80 <memp_malloc>
 80076a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e00b      	b.n	80076c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80076ac:	8879      	ldrh	r1, [r7, #2]
 80076ae:	887a      	ldrh	r2, [r7, #2]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	883b      	ldrh	r3, [r7, #0]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	460b      	mov	r3, r1
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff feb7 	bl	8007430 <pbuf_init_alloced_pbuf>
  return p;
 80076c2:	68fb      	ldr	r3, [r7, #12]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	08012414 	.word	0x08012414
 80076d0:	08012518 	.word	0x08012518
 80076d4:	08012474 	.word	0x08012474

080076d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	460b      	mov	r3, r1
 80076e6:	81bb      	strh	r3, [r7, #12]
 80076e8:	4613      	mov	r3, r2
 80076ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80076f0:	8a7b      	ldrh	r3, [r7, #18]
 80076f2:	3303      	adds	r3, #3
 80076f4:	f023 0203 	bic.w	r2, r3, #3
 80076f8:	89bb      	ldrh	r3, [r7, #12]
 80076fa:	441a      	add	r2, r3
 80076fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076fe:	429a      	cmp	r2, r3
 8007700:	d901      	bls.n	8007706 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	e018      	b.n	8007738 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d007      	beq.n	800771c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	3303      	adds	r3, #3
 8007710:	f023 0303 	bic.w	r3, r3, #3
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	4413      	add	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e001      	b.n	8007720 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	89b9      	ldrh	r1, [r7, #12]
 8007724:	89ba      	ldrh	r2, [r7, #12]
 8007726:	2302      	movs	r3, #2
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	897b      	ldrh	r3, [r7, #10]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	460b      	mov	r3, r1
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	f7ff fe7d 	bl	8007430 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007736:	687b      	ldr	r3, [r7, #4]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <pbuf_realloc+0x20>
 8007752:	4b3a      	ldr	r3, [pc, #232]	; (800783c <pbuf_realloc+0xfc>)
 8007754:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007758:	4939      	ldr	r1, [pc, #228]	; (8007840 <pbuf_realloc+0x100>)
 800775a:	483a      	ldr	r0, [pc, #232]	; (8007844 <pbuf_realloc+0x104>)
 800775c:	f009 fb28 	bl	8010db0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	891b      	ldrh	r3, [r3, #8]
 8007764:	887a      	ldrh	r2, [r7, #2]
 8007766:	429a      	cmp	r2, r3
 8007768:	d263      	bcs.n	8007832 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	891a      	ldrh	r2, [r3, #8]
 800776e:	887b      	ldrh	r3, [r7, #2]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007774:	887b      	ldrh	r3, [r7, #2]
 8007776:	817b      	strh	r3, [r7, #10]
  q = p;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800777c:	e018      	b.n	80077b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	895b      	ldrh	r3, [r3, #10]
 8007782:	897a      	ldrh	r2, [r7, #10]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	891a      	ldrh	r2, [r3, #8]
 800778c:	893b      	ldrh	r3, [r7, #8]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <pbuf_realloc+0x70>
 80077a2:	4b26      	ldr	r3, [pc, #152]	; (800783c <pbuf_realloc+0xfc>)
 80077a4:	f240 12af 	movw	r2, #431	; 0x1af
 80077a8:	4927      	ldr	r1, [pc, #156]	; (8007848 <pbuf_realloc+0x108>)
 80077aa:	4826      	ldr	r0, [pc, #152]	; (8007844 <pbuf_realloc+0x104>)
 80077ac:	f009 fb00 	bl	8010db0 <iprintf>
  while (rem_len > q->len) {
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	895b      	ldrh	r3, [r3, #10]
 80077b4:	897a      	ldrh	r2, [r7, #10]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d8e1      	bhi.n	800777e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	7b1b      	ldrb	r3, [r3, #12]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d121      	bne.n	800780a <pbuf_realloc+0xca>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	895b      	ldrh	r3, [r3, #10]
 80077ca:	897a      	ldrh	r2, [r7, #10]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d01c      	beq.n	800780a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7b5b      	ldrb	r3, [r3, #13]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d116      	bne.n	800780a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	897b      	ldrh	r3, [r7, #10]
 80077e8:	4413      	add	r3, r2
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7fe ffba 	bl	8006768 <mem_trim>
 80077f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <pbuf_realloc+0xca>
 80077fc:	4b0f      	ldr	r3, [pc, #60]	; (800783c <pbuf_realloc+0xfc>)
 80077fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007802:	4912      	ldr	r1, [pc, #72]	; (800784c <pbuf_realloc+0x10c>)
 8007804:	480f      	ldr	r0, [pc, #60]	; (8007844 <pbuf_realloc+0x104>)
 8007806:	f009 fad3 	bl	8010db0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	897a      	ldrh	r2, [r7, #10]
 800780e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	895a      	ldrh	r2, [r3, #10]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f911 	bl	8007a4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e000      	b.n	8007834 <pbuf_realloc+0xf4>
    return;
 8007832:	bf00      	nop

}
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	08012414 	.word	0x08012414
 8007840:	0801252c 	.word	0x0801252c
 8007844:	08012474 	.word	0x08012474
 8007848:	08012544 	.word	0x08012544
 800784c:	0801255c 	.word	0x0801255c

08007850 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <pbuf_add_header_impl+0x22>
 8007864:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <pbuf_add_header_impl+0xc4>)
 8007866:	f240 12df 	movw	r2, #479	; 0x1df
 800786a:	492b      	ldr	r1, [pc, #172]	; (8007918 <pbuf_add_header_impl+0xc8>)
 800786c:	482b      	ldr	r0, [pc, #172]	; (800791c <pbuf_add_header_impl+0xcc>)
 800786e:	f009 fa9f 	bl	8010db0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <pbuf_add_header_impl+0x30>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787e:	d301      	bcc.n	8007884 <pbuf_add_header_impl+0x34>
    return 1;
 8007880:	2301      	movs	r3, #1
 8007882:	e043      	b.n	800790c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <pbuf_add_header_impl+0x3e>
    return 0;
 800788a:	2300      	movs	r3, #0
 800788c:	e03e      	b.n	800790c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	891a      	ldrh	r2, [r3, #8]
 8007896:	8a7b      	ldrh	r3, [r7, #18]
 8007898:	4413      	add	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	8a7a      	ldrh	r2, [r7, #18]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d901      	bls.n	80078a6 <pbuf_add_header_impl+0x56>
    return 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e032      	b.n	800790c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7b1b      	ldrb	r3, [r3, #12]
 80078aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80078ac:	8a3b      	ldrh	r3, [r7, #16]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00c      	beq.n	80078d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	425b      	negs	r3, r3
 80078be:	4413      	add	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3310      	adds	r3, #16
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d20d      	bcs.n	80078e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e01d      	b.n	800790c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d006      	beq.n	80078e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	425b      	negs	r3, r3
 80078de:	4413      	add	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e001      	b.n	80078e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e011      	b.n	800790c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	895a      	ldrh	r2, [r3, #10]
 80078f2:	8a7b      	ldrh	r3, [r7, #18]
 80078f4:	4413      	add	r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	891a      	ldrh	r2, [r3, #8]
 8007900:	8a7b      	ldrh	r3, [r7, #18]
 8007902:	4413      	add	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	811a      	strh	r2, [r3, #8]


  return 0;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08012414 	.word	0x08012414
 8007918:	08012578 	.word	0x08012578
 800791c:	08012474 	.word	0x08012474

08007920 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800792a:	2200      	movs	r2, #0
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff8e 	bl	8007850 <pbuf_add_header_impl>
 8007934:	4603      	mov	r3, r0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <pbuf_remove_header+0x1e>
 8007950:	4b20      	ldr	r3, [pc, #128]	; (80079d4 <pbuf_remove_header+0x94>)
 8007952:	f240 224b 	movw	r2, #587	; 0x24b
 8007956:	4920      	ldr	r1, [pc, #128]	; (80079d8 <pbuf_remove_header+0x98>)
 8007958:	4820      	ldr	r0, [pc, #128]	; (80079dc <pbuf_remove_header+0x9c>)
 800795a:	f009 fa29 	bl	8010db0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <pbuf_remove_header+0x2c>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796a:	d301      	bcc.n	8007970 <pbuf_remove_header+0x30>
    return 1;
 800796c:	2301      	movs	r3, #1
 800796e:	e02c      	b.n	80079ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <pbuf_remove_header+0x3a>
    return 0;
 8007976:	2300      	movs	r3, #0
 8007978:	e027      	b.n	80079ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	895b      	ldrh	r3, [r3, #10]
 8007982:	89fa      	ldrh	r2, [r7, #14]
 8007984:	429a      	cmp	r2, r3
 8007986:	d908      	bls.n	800799a <pbuf_remove_header+0x5a>
 8007988:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <pbuf_remove_header+0x94>)
 800798a:	f240 2255 	movw	r2, #597	; 0x255
 800798e:	4914      	ldr	r1, [pc, #80]	; (80079e0 <pbuf_remove_header+0xa0>)
 8007990:	4812      	ldr	r0, [pc, #72]	; (80079dc <pbuf_remove_header+0x9c>)
 8007992:	f009 fa0d 	bl	8010db0 <iprintf>
 8007996:	2301      	movs	r3, #1
 8007998:	e017      	b.n	80079ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	441a      	add	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	895a      	ldrh	r2, [r3, #10]
 80079b0:	89fb      	ldrh	r3, [r7, #14]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	891a      	ldrh	r2, [r3, #8]
 80079be:	89fb      	ldrh	r3, [r7, #14]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	08012414 	.word	0x08012414
 80079d8:	08012578 	.word	0x08012578
 80079dc:	08012474 	.word	0x08012474
 80079e0:	08012584 	.word	0x08012584

080079e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	807b      	strh	r3, [r7, #2]
 80079f0:	4613      	mov	r3, r2
 80079f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80079f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da08      	bge.n	8007a0e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80079fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a00:	425b      	negs	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ff9b 	bl	8007940 <pbuf_remove_header>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	e007      	b.n	8007a1e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a12:	787a      	ldrb	r2, [r7, #1]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff ff1a 	bl	8007850 <pbuf_add_header_impl>
 8007a1c:	4603      	mov	r3, r0
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007a32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a36:	2201      	movs	r2, #1
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff ffd2 	bl	80079e4 <pbuf_header_impl>
 8007a40:	4603      	mov	r3, r0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <pbuf_free+0x22>
 8007a60:	4b38      	ldr	r3, [pc, #224]	; (8007b44 <pbuf_free+0xf8>)
 8007a62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007a66:	4938      	ldr	r1, [pc, #224]	; (8007b48 <pbuf_free+0xfc>)
 8007a68:	4838      	ldr	r0, [pc, #224]	; (8007b4c <pbuf_free+0x100>)
 8007a6a:	f009 f9a1 	bl	8010db0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e063      	b.n	8007b3a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007a76:	e05c      	b.n	8007b32 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7b9b      	ldrb	r3, [r3, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <pbuf_free+0x42>
 8007a80:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <pbuf_free+0xf8>)
 8007a82:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007a86:	4932      	ldr	r1, [pc, #200]	; (8007b50 <pbuf_free+0x104>)
 8007a88:	4830      	ldr	r0, [pc, #192]	; (8007b4c <pbuf_free+0x100>)
 8007a8a:	f009 f991 	bl	8010db0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7b9b      	ldrb	r3, [r3, #14]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	739a      	strb	r2, [r3, #14]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7b9b      	ldrb	r3, [r3, #14]
 8007a9e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007aa0:	7dbb      	ldrb	r3, [r7, #22]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d143      	bne.n	8007b2e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7b1b      	ldrb	r3, [r3, #12]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7b5b      	ldrb	r3, [r3, #13]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <pbuf_free+0x90>
 8007ace:	4b1d      	ldr	r3, [pc, #116]	; (8007b44 <pbuf_free+0xf8>)
 8007ad0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007ad4:	491f      	ldr	r1, [pc, #124]	; (8007b54 <pbuf_free+0x108>)
 8007ad6:	481d      	ldr	r0, [pc, #116]	; (8007b4c <pbuf_free+0x100>)
 8007ad8:	f009 f96a 	bl	8010db0 <iprintf>
        pc->custom_free_function(p);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e01d      	b.n	8007b22 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d104      	bne.n	8007af6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	2008      	movs	r0, #8
 8007af0:	f7ff f936 	bl	8006d60 <memp_free>
 8007af4:	e015      	b.n	8007b22 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d104      	bne.n	8007b06 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	2007      	movs	r0, #7
 8007b00:	f7ff f92e 	bl	8006d60 <memp_free>
 8007b04:	e00d      	b.n	8007b22 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <pbuf_free+0xc8>
          mem_free(p);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fe fdc1 	bl	8006694 <mem_free>
 8007b12:	e006      	b.n	8007b22 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <pbuf_free+0xf8>)
 8007b16:	f240 320f 	movw	r2, #783	; 0x30f
 8007b1a:	490f      	ldr	r1, [pc, #60]	; (8007b58 <pbuf_free+0x10c>)
 8007b1c:	480b      	ldr	r0, [pc, #44]	; (8007b4c <pbuf_free+0x100>)
 8007b1e:	f009 f947 	bl	8010db0 <iprintf>
        }
      }
      count++;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	3301      	adds	r3, #1
 8007b26:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	e001      	b.n	8007b32 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d19f      	bne.n	8007a78 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	08012414 	.word	0x08012414
 8007b48:	08012578 	.word	0x08012578
 8007b4c:	08012474 	.word	0x08012474
 8007b50:	080125a4 	.word	0x080125a4
 8007b54:	080125bc 	.word	0x080125bc
 8007b58:	080125e0 	.word	0x080125e0

08007b5c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007b68:	e005      	b.n	8007b76 <pbuf_clen+0x1a>
    ++len;
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f6      	bne.n	8007b6a <pbuf_clen+0xe>
  }
  return len;
 8007b7c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d010      	beq.n	8007bbc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7b9b      	ldrb	r3, [r3, #14]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7b9b      	ldrb	r3, [r3, #14]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <pbuf_ref+0x30>
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <pbuf_ref+0x38>)
 8007bb0:	f240 3242 	movw	r2, #834	; 0x342
 8007bb4:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <pbuf_ref+0x3c>)
 8007bb6:	4805      	ldr	r0, [pc, #20]	; (8007bcc <pbuf_ref+0x40>)
 8007bb8:	f009 f8fa 	bl	8010db0 <iprintf>
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	08012414 	.word	0x08012414
 8007bc8:	080125f4 	.word	0x080125f4
 8007bcc:	08012474 	.word	0x08012474

08007bd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <pbuf_cat+0x16>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d107      	bne.n	8007bf6 <pbuf_cat+0x26>
 8007be6:	4b20      	ldr	r3, [pc, #128]	; (8007c68 <pbuf_cat+0x98>)
 8007be8:	f240 3259 	movw	r2, #857	; 0x359
 8007bec:	491f      	ldr	r1, [pc, #124]	; (8007c6c <pbuf_cat+0x9c>)
 8007bee:	4820      	ldr	r0, [pc, #128]	; (8007c70 <pbuf_cat+0xa0>)
 8007bf0:	f009 f8de 	bl	8010db0 <iprintf>
 8007bf4:	e034      	b.n	8007c60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e00a      	b.n	8007c12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	891a      	ldrh	r2, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	891b      	ldrh	r3, [r3, #8]
 8007c04:	4413      	add	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	891a      	ldrh	r2, [r3, #8]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	895b      	ldrh	r3, [r3, #10]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d006      	beq.n	8007c34 <pbuf_cat+0x64>
 8007c26:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <pbuf_cat+0x98>)
 8007c28:	f240 3262 	movw	r2, #866	; 0x362
 8007c2c:	4911      	ldr	r1, [pc, #68]	; (8007c74 <pbuf_cat+0xa4>)
 8007c2e:	4810      	ldr	r0, [pc, #64]	; (8007c70 <pbuf_cat+0xa0>)
 8007c30:	f009 f8be 	bl	8010db0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <pbuf_cat+0x7a>
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <pbuf_cat+0x98>)
 8007c3e:	f240 3263 	movw	r2, #867	; 0x363
 8007c42:	490d      	ldr	r1, [pc, #52]	; (8007c78 <pbuf_cat+0xa8>)
 8007c44:	480a      	ldr	r0, [pc, #40]	; (8007c70 <pbuf_cat+0xa0>)
 8007c46:	f009 f8b3 	bl	8010db0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	891a      	ldrh	r2, [r3, #8]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	891b      	ldrh	r3, [r3, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	08012414 	.word	0x08012414
 8007c6c:	08012608 	.word	0x08012608
 8007c70:	08012474 	.word	0x08012474
 8007c74:	08012640 	.word	0x08012640
 8007c78:	08012670 	.word	0x08012670

08007c7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <pbuf_copy+0x2a>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <pbuf_copy+0x2a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	891a      	ldrh	r2, [r3, #8]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	891b      	ldrh	r3, [r3, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d209      	bcs.n	8007cba <pbuf_copy+0x3e>
 8007ca6:	4b57      	ldr	r3, [pc, #348]	; (8007e04 <pbuf_copy+0x188>)
 8007ca8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007cac:	4956      	ldr	r1, [pc, #344]	; (8007e08 <pbuf_copy+0x18c>)
 8007cae:	4857      	ldr	r0, [pc, #348]	; (8007e0c <pbuf_copy+0x190>)
 8007cb0:	f009 f87e 	bl	8010db0 <iprintf>
 8007cb4:	f06f 030f 	mvn.w	r3, #15
 8007cb8:	e09f      	b.n	8007dfa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	895b      	ldrh	r3, [r3, #10]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	1ad2      	subs	r2, r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	895b      	ldrh	r3, [r3, #10]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1acb      	subs	r3, r1, r3
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d306      	bcc.n	8007ce0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	895b      	ldrh	r3, [r3, #10]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e005      	b.n	8007cec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	895b      	ldrh	r3, [r3, #10]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	18d0      	adds	r0, r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	f009 f94f 	bl	8010fa2 <memcpy>
    offset_to += len;
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	895b      	ldrh	r3, [r3, #10]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d906      	bls.n	8007d2e <pbuf_copy+0xb2>
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <pbuf_copy+0x188>)
 8007d22:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007d26:	493a      	ldr	r1, [pc, #232]	; (8007e10 <pbuf_copy+0x194>)
 8007d28:	4838      	ldr	r0, [pc, #224]	; (8007e0c <pbuf_copy+0x190>)
 8007d2a:	f009 f841 	bl	8010db0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	895b      	ldrh	r3, [r3, #10]
 8007d32:	461a      	mov	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d906      	bls.n	8007d48 <pbuf_copy+0xcc>
 8007d3a:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <pbuf_copy+0x188>)
 8007d3c:	f240 32da 	movw	r2, #986	; 0x3da
 8007d40:	4934      	ldr	r1, [pc, #208]	; (8007e14 <pbuf_copy+0x198>)
 8007d42:	4832      	ldr	r0, [pc, #200]	; (8007e0c <pbuf_copy+0x190>)
 8007d44:	f009 f834 	bl	8010db0 <iprintf>
    if (offset_from >= p_from->len) {
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	895b      	ldrh	r3, [r3, #10]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d304      	bcc.n	8007d5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	895b      	ldrh	r3, [r3, #10]
 8007d62:	461a      	mov	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d114      	bne.n	8007d94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10c      	bne.n	8007d94 <pbuf_copy+0x118>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <pbuf_copy+0x118>
 8007d80:	4b20      	ldr	r3, [pc, #128]	; (8007e04 <pbuf_copy+0x188>)
 8007d82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007d86:	4924      	ldr	r1, [pc, #144]	; (8007e18 <pbuf_copy+0x19c>)
 8007d88:	4820      	ldr	r0, [pc, #128]	; (8007e0c <pbuf_copy+0x190>)
 8007d8a:	f009 f811 	bl	8010db0 <iprintf>
 8007d8e:	f06f 030f 	mvn.w	r3, #15
 8007d92:	e032      	b.n	8007dfa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d013      	beq.n	8007dc2 <pbuf_copy+0x146>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	895a      	ldrh	r2, [r3, #10]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	891b      	ldrh	r3, [r3, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d10d      	bne.n	8007dc2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <pbuf_copy+0x146>
 8007dae:	4b15      	ldr	r3, [pc, #84]	; (8007e04 <pbuf_copy+0x188>)
 8007db0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007db4:	4919      	ldr	r1, [pc, #100]	; (8007e1c <pbuf_copy+0x1a0>)
 8007db6:	4815      	ldr	r0, [pc, #84]	; (8007e0c <pbuf_copy+0x190>)
 8007db8:	f008 fffa 	bl	8010db0 <iprintf>
 8007dbc:	f06f 0305 	mvn.w	r3, #5
 8007dc0:	e01b      	b.n	8007dfa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d013      	beq.n	8007df0 <pbuf_copy+0x174>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	895a      	ldrh	r2, [r3, #10]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	891b      	ldrh	r3, [r3, #8]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d10d      	bne.n	8007df0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <pbuf_copy+0x174>
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <pbuf_copy+0x188>)
 8007dde:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007de2:	490e      	ldr	r1, [pc, #56]	; (8007e1c <pbuf_copy+0x1a0>)
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <pbuf_copy+0x190>)
 8007de6:	f008 ffe3 	bl	8010db0 <iprintf>
 8007dea:	f06f 0305 	mvn.w	r3, #5
 8007dee:	e004      	b.n	8007dfa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f47f af61 	bne.w	8007cba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08012414 	.word	0x08012414
 8007e08:	080126bc 	.word	0x080126bc
 8007e0c:	08012474 	.word	0x08012474
 8007e10:	080126ec 	.word	0x080126ec
 8007e14:	08012704 	.word	0x08012704
 8007e18:	08012720 	.word	0x08012720
 8007e1c:	08012730 	.word	0x08012730

08007e20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	460b      	mov	r3, r1
 8007e30:	80fb      	strh	r3, [r7, #6]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <pbuf_copy_partial+0x36>
 8007e44:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <pbuf_copy_partial+0xd4>)
 8007e46:	f240 420a 	movw	r2, #1034	; 0x40a
 8007e4a:	492b      	ldr	r1, [pc, #172]	; (8007ef8 <pbuf_copy_partial+0xd8>)
 8007e4c:	482b      	ldr	r0, [pc, #172]	; (8007efc <pbuf_copy_partial+0xdc>)
 8007e4e:	f008 ffaf 	bl	8010db0 <iprintf>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e04a      	b.n	8007eec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <pbuf_copy_partial+0x4e>
 8007e5c:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <pbuf_copy_partial+0xd4>)
 8007e5e:	f240 420b 	movw	r2, #1035	; 0x40b
 8007e62:	4927      	ldr	r1, [pc, #156]	; (8007f00 <pbuf_copy_partial+0xe0>)
 8007e64:	4825      	ldr	r0, [pc, #148]	; (8007efc <pbuf_copy_partial+0xdc>)
 8007e66:	f008 ffa3 	bl	8010db0 <iprintf>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e03e      	b.n	8007eec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	e034      	b.n	8007ede <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007e74:	88bb      	ldrh	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <pbuf_copy_partial+0x70>
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	895b      	ldrh	r3, [r3, #10]
 8007e7e:	88ba      	ldrh	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d305      	bcc.n	8007e90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	895b      	ldrh	r3, [r3, #10]
 8007e88:	88ba      	ldrh	r2, [r7, #4]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	80bb      	strh	r3, [r7, #4]
 8007e8e:	e023      	b.n	8007ed8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	895a      	ldrh	r2, [r3, #10]
 8007e94:	88bb      	ldrh	r3, [r7, #4]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007e9a:	8b3a      	ldrh	r2, [r7, #24]
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d901      	bls.n	8007ea6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ea6:	8b7b      	ldrh	r3, [r7, #26]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	18d0      	adds	r0, r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	88bb      	ldrh	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	8b3a      	ldrh	r2, [r7, #24]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f009 f873 	bl	8010fa2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ebc:	8afa      	ldrh	r2, [r7, #22]
 8007ebe:	8b3b      	ldrh	r3, [r7, #24]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007ec4:	8b7a      	ldrh	r2, [r7, #26]
 8007ec6:	8b3b      	ldrh	r3, [r7, #24]
 8007ec8:	4413      	add	r3, r2
 8007eca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	8b3b      	ldrh	r3, [r7, #24]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <pbuf_copy_partial+0xca>
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1c4      	bne.n	8007e74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007eea:	8afb      	ldrh	r3, [r7, #22]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08012414 	.word	0x08012414
 8007ef8:	0801275c 	.word	0x0801275c
 8007efc:	08012474 	.word	0x08012474
 8007f00:	0801277c 	.word	0x0801277c

08007f04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	603a      	str	r2, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
 8007f10:	460b      	mov	r3, r1
 8007f12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	8919      	ldrh	r1, [r3, #8]
 8007f18:	88ba      	ldrh	r2, [r7, #4]
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fab1 	bl	8007484 <pbuf_alloc>
 8007f22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <pbuf_clone+0x2a>
    return NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e011      	b.n	8007f52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff fea3 	bl	8007c7c <pbuf_copy>
 8007f36:	4603      	mov	r3, r0
 8007f38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007f3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d006      	beq.n	8007f50 <pbuf_clone+0x4c>
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <pbuf_clone+0x58>)
 8007f44:	f240 5224 	movw	r2, #1316	; 0x524
 8007f48:	4905      	ldr	r1, [pc, #20]	; (8007f60 <pbuf_clone+0x5c>)
 8007f4a:	4806      	ldr	r0, [pc, #24]	; (8007f64 <pbuf_clone+0x60>)
 8007f4c:	f008 ff30 	bl	8010db0 <iprintf>
  return q;
 8007f50:	68fb      	ldr	r3, [r7, #12]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08012414 	.word	0x08012414
 8007f60:	08012888 	.word	0x08012888
 8007f64:	08012474 	.word	0x08012474

08007f68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007f6c:	f008 fe20 	bl	8010bb0 <rand>
 8007f70:	4603      	mov	r3, r0
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	4b01      	ldr	r3, [pc, #4]	; (8007f88 <tcp_init+0x20>)
 8007f82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007f84:	bf00      	nop
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000020 	.word	0x20000020

08007f8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7d1b      	ldrb	r3, [r3, #20]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d105      	bne.n	8007fa8 <tcp_free+0x1c>
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <tcp_free+0x2c>)
 8007f9e:	22d4      	movs	r2, #212	; 0xd4
 8007fa0:	4906      	ldr	r1, [pc, #24]	; (8007fbc <tcp_free+0x30>)
 8007fa2:	4807      	ldr	r0, [pc, #28]	; (8007fc0 <tcp_free+0x34>)
 8007fa4:	f008 ff04 	bl	8010db0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	2001      	movs	r0, #1
 8007fac:	f7fe fed8 	bl	8006d60 <memp_free>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	08012914 	.word	0x08012914
 8007fbc:	08012944 	.word	0x08012944
 8007fc0:	08012958 	.word	0x08012958

08007fc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7d1b      	ldrb	r3, [r3, #20]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d105      	bne.n	8007fe0 <tcp_free_listen+0x1c>
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <tcp_free_listen+0x2c>)
 8007fd6:	22df      	movs	r2, #223	; 0xdf
 8007fd8:	4906      	ldr	r1, [pc, #24]	; (8007ff4 <tcp_free_listen+0x30>)
 8007fda:	4807      	ldr	r0, [pc, #28]	; (8007ff8 <tcp_free_listen+0x34>)
 8007fdc:	f008 fee8 	bl	8010db0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	f7fe febc 	bl	8006d60 <memp_free>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	08012914 	.word	0x08012914
 8007ff4:	08012980 	.word	0x08012980
 8007ff8:	08012958 	.word	0x08012958

08007ffc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008000:	f001 f85c 	bl	80090bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <tcp_tmr+0x28>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <tcp_tmr+0x28>)
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	4b04      	ldr	r3, [pc, #16]	; (8008024 <tcp_tmr+0x28>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800801c:	f000 fd0e 	bl	8008a3c <tcp_slowtmr>
  }
}
 8008020:	bf00      	nop
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20008c25 	.word	0x20008c25

08008028 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <tcp_remove_listener+0x1c>
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <tcp_remove_listener+0x48>)
 800803a:	22ff      	movs	r2, #255	; 0xff
 800803c:	490d      	ldr	r1, [pc, #52]	; (8008074 <tcp_remove_listener+0x4c>)
 800803e:	480e      	ldr	r0, [pc, #56]	; (8008078 <tcp_remove_listener+0x50>)
 8008040:	f008 feb6 	bl	8010db0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e00a      	b.n	8008060 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d102      	bne.n	800805a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f1      	bne.n	800804a <tcp_remove_listener+0x22>
    }
  }
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	08012914 	.word	0x08012914
 8008074:	0801299c 	.word	0x0801299c
 8008078:	08012958 	.word	0x08012958

0800807c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <tcp_listen_closed+0x1c>
 800808a:	4b14      	ldr	r3, [pc, #80]	; (80080dc <tcp_listen_closed+0x60>)
 800808c:	f240 1211 	movw	r2, #273	; 0x111
 8008090:	4913      	ldr	r1, [pc, #76]	; (80080e0 <tcp_listen_closed+0x64>)
 8008092:	4814      	ldr	r0, [pc, #80]	; (80080e4 <tcp_listen_closed+0x68>)
 8008094:	f008 fe8c 	bl	8010db0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7d1b      	ldrb	r3, [r3, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d006      	beq.n	80080ae <tcp_listen_closed+0x32>
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <tcp_listen_closed+0x60>)
 80080a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80080a6:	4910      	ldr	r1, [pc, #64]	; (80080e8 <tcp_listen_closed+0x6c>)
 80080a8:	480e      	ldr	r0, [pc, #56]	; (80080e4 <tcp_listen_closed+0x68>)
 80080aa:	f008 fe81 	bl	8010db0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80080ae:	2301      	movs	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e00b      	b.n	80080cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <tcp_listen_closed+0x70>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff ffb1 	bl	8008028 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d9f0      	bls.n	80080b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08012914 	.word	0x08012914
 80080e0:	080129c4 	.word	0x080129c4
 80080e4:	08012958 	.word	0x08012958
 80080e8:	080129d0 	.word	0x080129d0
 80080ec:	080156b0 	.word	0x080156b0

080080f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80080f0:	b5b0      	push	{r4, r5, r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <tcp_close_shutdown+0x20>
 8008102:	4b63      	ldr	r3, [pc, #396]	; (8008290 <tcp_close_shutdown+0x1a0>)
 8008104:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008108:	4962      	ldr	r1, [pc, #392]	; (8008294 <tcp_close_shutdown+0x1a4>)
 800810a:	4863      	ldr	r0, [pc, #396]	; (8008298 <tcp_close_shutdown+0x1a8>)
 800810c:	f008 fe50 	bl	8010db0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d066      	beq.n	80081e4 <tcp_close_shutdown+0xf4>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7d1b      	ldrb	r3, [r3, #20]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d003      	beq.n	8008126 <tcp_close_shutdown+0x36>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7d1b      	ldrb	r3, [r3, #20]
 8008122:	2b07      	cmp	r3, #7
 8008124:	d15e      	bne.n	80081e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <tcp_close_shutdown+0x48>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008132:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008136:	d055      	beq.n	80081e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8b5b      	ldrh	r3, [r3, #26]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <tcp_close_shutdown+0x62>
 8008144:	4b52      	ldr	r3, [pc, #328]	; (8008290 <tcp_close_shutdown+0x1a0>)
 8008146:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800814a:	4954      	ldr	r1, [pc, #336]	; (800829c <tcp_close_shutdown+0x1ac>)
 800814c:	4852      	ldr	r0, [pc, #328]	; (8008298 <tcp_close_shutdown+0x1a8>)
 800814e:	f008 fe2f 	bl	8010db0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800815a:	687d      	ldr	r5, [r7, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	8ad2      	ldrh	r2, [r2, #22]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	8b09      	ldrh	r1, [r1, #24]
 8008168:	9102      	str	r1, [sp, #8]
 800816a:	9201      	str	r2, [sp, #4]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	462b      	mov	r3, r5
 8008170:	4622      	mov	r2, r4
 8008172:	4601      	mov	r1, r0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f005 fd8f 	bl	800dc98 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fb6c 	bl	8009858 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008180:	4b47      	ldr	r3, [pc, #284]	; (80082a0 <tcp_close_shutdown+0x1b0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d105      	bne.n	8008196 <tcp_close_shutdown+0xa6>
 800818a:	4b45      	ldr	r3, [pc, #276]	; (80082a0 <tcp_close_shutdown+0x1b0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	4a43      	ldr	r2, [pc, #268]	; (80082a0 <tcp_close_shutdown+0x1b0>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e013      	b.n	80081be <tcp_close_shutdown+0xce>
 8008196:	4b42      	ldr	r3, [pc, #264]	; (80082a0 <tcp_close_shutdown+0x1b0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	e00c      	b.n	80081b8 <tcp_close_shutdown+0xc8>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d104      	bne.n	80081b2 <tcp_close_shutdown+0xc2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	60da      	str	r2, [r3, #12]
 80081b0:	e005      	b.n	80081be <tcp_close_shutdown+0xce>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ef      	bne.n	800819e <tcp_close_shutdown+0xae>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	60da      	str	r2, [r3, #12]
 80081c4:	4b37      	ldr	r3, [pc, #220]	; (80082a4 <tcp_close_shutdown+0x1b4>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80081ca:	4b37      	ldr	r3, [pc, #220]	; (80082a8 <tcp_close_shutdown+0x1b8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d102      	bne.n	80081da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80081d4:	f004 f804 	bl	800c1e0 <tcp_trigger_input_pcb_close>
 80081d8:	e002      	b.n	80081e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fed6 	bl	8007f8c <tcp_free>
      }
      return ERR_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e050      	b.n	8008286 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7d1b      	ldrb	r3, [r3, #20]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d03b      	beq.n	8008264 <tcp_close_shutdown+0x174>
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	dc44      	bgt.n	800827a <tcp_close_shutdown+0x18a>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <tcp_close_shutdown+0x10a>
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d02a      	beq.n	800824e <tcp_close_shutdown+0x15e>
 80081f8:	e03f      	b.n	800827a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8adb      	ldrh	r3, [r3, #22]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d021      	beq.n	8008246 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008202:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <tcp_close_shutdown+0x1bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	d105      	bne.n	8008218 <tcp_close_shutdown+0x128>
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <tcp_close_shutdown+0x1bc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	4a26      	ldr	r2, [pc, #152]	; (80082ac <tcp_close_shutdown+0x1bc>)
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e013      	b.n	8008240 <tcp_close_shutdown+0x150>
 8008218:	4b24      	ldr	r3, [pc, #144]	; (80082ac <tcp_close_shutdown+0x1bc>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	e00c      	b.n	800823a <tcp_close_shutdown+0x14a>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d104      	bne.n	8008234 <tcp_close_shutdown+0x144>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	60da      	str	r2, [r3, #12]
 8008232:	e005      	b.n	8008240 <tcp_close_shutdown+0x150>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1ef      	bne.n	8008220 <tcp_close_shutdown+0x130>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fea0 	bl	8007f8c <tcp_free>
      break;
 800824c:	e01a      	b.n	8008284 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff ff14 	bl	800807c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4816      	ldr	r0, [pc, #88]	; (80082b0 <tcp_close_shutdown+0x1c0>)
 8008258:	f001 fb4e 	bl	80098f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff feb1 	bl	8007fc4 <tcp_free_listen>
      break;
 8008262:	e00f      	b.n	8008284 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	480e      	ldr	r0, [pc, #56]	; (80082a0 <tcp_close_shutdown+0x1b0>)
 8008268:	f001 fb46 	bl	80098f8 <tcp_pcb_remove>
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <tcp_close_shutdown+0x1b4>)
 800826e:	2201      	movs	r2, #1
 8008270:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe8a 	bl	8007f8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008278:	e004      	b.n	8008284 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f81a 	bl	80082b4 <tcp_close_shutdown_fin>
 8008280:	4603      	mov	r3, r0
 8008282:	e000      	b.n	8008286 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bdb0      	pop	{r4, r5, r7, pc}
 800828e:	bf00      	nop
 8008290:	08012914 	.word	0x08012914
 8008294:	080129e8 	.word	0x080129e8
 8008298:	08012958 	.word	0x08012958
 800829c:	08012a08 	.word	0x08012a08
 80082a0:	20008c1c 	.word	0x20008c1c
 80082a4:	20008c24 	.word	0x20008c24
 80082a8:	20008c5c 	.word	0x20008c5c
 80082ac:	20008c14 	.word	0x20008c14
 80082b0:	20008c18 	.word	0x20008c18

080082b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <tcp_close_shutdown_fin+0x1c>
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <tcp_close_shutdown_fin+0xc8>)
 80082c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80082c8:	492d      	ldr	r1, [pc, #180]	; (8008380 <tcp_close_shutdown_fin+0xcc>)
 80082ca:	482e      	ldr	r0, [pc, #184]	; (8008384 <tcp_close_shutdown_fin+0xd0>)
 80082cc:	f008 fd70 	bl	8010db0 <iprintf>

  switch (pcb->state) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7d1b      	ldrb	r3, [r3, #20]
 80082d4:	2b07      	cmp	r3, #7
 80082d6:	d020      	beq.n	800831a <tcp_close_shutdown_fin+0x66>
 80082d8:	2b07      	cmp	r3, #7
 80082da:	dc2b      	bgt.n	8008334 <tcp_close_shutdown_fin+0x80>
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d002      	beq.n	80082e6 <tcp_close_shutdown_fin+0x32>
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d00d      	beq.n	8008300 <tcp_close_shutdown_fin+0x4c>
 80082e4:	e026      	b.n	8008334 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f004 fde4 	bl	800ceb4 <tcp_send_fin>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80082f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11f      	bne.n	8008338 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2205      	movs	r2, #5
 80082fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80082fe:	e01b      	b.n	8008338 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f004 fdd7 	bl	800ceb4 <tcp_send_fin>
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800830a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d114      	bne.n	800833c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2205      	movs	r2, #5
 8008316:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008318:	e010      	b.n	800833c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f004 fdca 	bl	800ceb4 <tcp_send_fin>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2209      	movs	r2, #9
 8008330:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008332:	e005      	b.n	8008340 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	e01c      	b.n	8008372 <tcp_close_shutdown_fin+0xbe>
      break;
 8008338:	bf00      	nop
 800833a:	e002      	b.n	8008342 <tcp_close_shutdown_fin+0x8e>
      break;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <tcp_close_shutdown_fin+0x8e>
      break;
 8008340:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f004 fef0 	bl	800d130 <tcp_output>
 8008350:	e00d      	b.n	800836e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d108      	bne.n	800836e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8b5b      	ldrh	r3, [r3, #26]
 8008360:	f043 0308 	orr.w	r3, r3, #8
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e001      	b.n	8008372 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800836e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	08012914 	.word	0x08012914
 8008380:	080129c4 	.word	0x080129c4
 8008384:	08012958 	.word	0x08012958

08008388 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <tcp_close+0x22>
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <tcp_close+0x4c>)
 8008398:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800839c:	490e      	ldr	r1, [pc, #56]	; (80083d8 <tcp_close+0x50>)
 800839e:	480f      	ldr	r0, [pc, #60]	; (80083dc <tcp_close+0x54>)
 80083a0:	f008 fd06 	bl	8010db0 <iprintf>
 80083a4:	f06f 030f 	mvn.w	r3, #15
 80083a8:	e00f      	b.n	80083ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7d1b      	ldrb	r3, [r3, #20]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d006      	beq.n	80083c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8b5b      	ldrh	r3, [r3, #26]
 80083b6:	f043 0310 	orr.w	r3, r3, #16
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fe94 	bl	80080f0 <tcp_close_shutdown>
 80083c8:	4603      	mov	r3, r0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	08012914 	.word	0x08012914
 80083d8:	08012a24 	.word	0x08012a24
 80083dc:	08012958 	.word	0x08012958

080083e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <tcp_abandon+0x20>
 80083f0:	4b52      	ldr	r3, [pc, #328]	; (800853c <tcp_abandon+0x15c>)
 80083f2:	f240 223d 	movw	r2, #573	; 0x23d
 80083f6:	4952      	ldr	r1, [pc, #328]	; (8008540 <tcp_abandon+0x160>)
 80083f8:	4852      	ldr	r0, [pc, #328]	; (8008544 <tcp_abandon+0x164>)
 80083fa:	f008 fcd9 	bl	8010db0 <iprintf>
 80083fe:	e099      	b.n	8008534 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7d1b      	ldrb	r3, [r3, #20]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d106      	bne.n	8008416 <tcp_abandon+0x36>
 8008408:	4b4c      	ldr	r3, [pc, #304]	; (800853c <tcp_abandon+0x15c>)
 800840a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800840e:	494e      	ldr	r1, [pc, #312]	; (8008548 <tcp_abandon+0x168>)
 8008410:	484c      	ldr	r0, [pc, #304]	; (8008544 <tcp_abandon+0x164>)
 8008412:	f008 fccd 	bl	8010db0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7d1b      	ldrb	r3, [r3, #20]
 800841a:	2b0a      	cmp	r3, #10
 800841c:	d107      	bne.n	800842e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	484a      	ldr	r0, [pc, #296]	; (800854c <tcp_abandon+0x16c>)
 8008422:	f001 fa69 	bl	80098f8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fdb0 	bl	8007f8c <tcp_free>
 800842c:	e082      	b.n	8008534 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d126      	bne.n	80084a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8adb      	ldrh	r3, [r3, #22]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d02e      	beq.n	80084be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008460:	4b3b      	ldr	r3, [pc, #236]	; (8008550 <tcp_abandon+0x170>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d105      	bne.n	8008476 <tcp_abandon+0x96>
 800846a:	4b39      	ldr	r3, [pc, #228]	; (8008550 <tcp_abandon+0x170>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a37      	ldr	r2, [pc, #220]	; (8008550 <tcp_abandon+0x170>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	e013      	b.n	800849e <tcp_abandon+0xbe>
 8008476:	4b36      	ldr	r3, [pc, #216]	; (8008550 <tcp_abandon+0x170>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	e00c      	b.n	8008498 <tcp_abandon+0xb8>
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d104      	bne.n	8008492 <tcp_abandon+0xb2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	e005      	b.n	800849e <tcp_abandon+0xbe>
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1ef      	bne.n	800847e <tcp_abandon+0x9e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e00b      	b.n	80084be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8adb      	ldrh	r3, [r3, #22]
 80084ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4828      	ldr	r0, [pc, #160]	; (8008554 <tcp_abandon+0x174>)
 80084b4:	f001 fa20 	bl	80098f8 <tcp_pcb_remove>
 80084b8:	4b27      	ldr	r3, [pc, #156]	; (8008558 <tcp_abandon+0x178>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fed6 	bl	800927c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fecd 	bl	800927c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fec4 	bl	800927c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00e      	beq.n	8008518 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3304      	adds	r3, #4
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	8b12      	ldrh	r2, [r2, #24]
 8008504:	9202      	str	r2, [sp, #8]
 8008506:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008508:	9201      	str	r2, [sp, #4]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	460b      	mov	r3, r1
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	69b9      	ldr	r1, [r7, #24]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f005 fbc0 	bl	800dc98 <tcp_rst>
    }
    last_state = pcb->state;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7d1b      	ldrb	r3, [r3, #20]
 800851c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fd34 	bl	8007f8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <tcp_abandon+0x154>
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f06f 010c 	mvn.w	r1, #12
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	4798      	blx	r3
  }
}
 8008534:	3728      	adds	r7, #40	; 0x28
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	08012914 	.word	0x08012914
 8008540:	08012a58 	.word	0x08012a58
 8008544:	08012958 	.word	0x08012958
 8008548:	08012a74 	.word	0x08012a74
 800854c:	20008c20 	.word	0x20008c20
 8008550:	20008c14 	.word	0x20008c14
 8008554:	20008c1c 	.word	0x20008c1c
 8008558:	20008c24 	.word	0x20008c24

0800855c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ff3a 	bl	80083e0 <tcp_abandon>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008582:	2304      	movs	r3, #4
 8008584:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800858c:	4b3e      	ldr	r3, [pc, #248]	; (8008688 <tcp_bind+0x114>)
 800858e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <tcp_bind+0x36>
 8008596:	4b3d      	ldr	r3, [pc, #244]	; (800868c <tcp_bind+0x118>)
 8008598:	f240 22a9 	movw	r2, #681	; 0x2a9
 800859c:	493c      	ldr	r1, [pc, #240]	; (8008690 <tcp_bind+0x11c>)
 800859e:	483d      	ldr	r0, [pc, #244]	; (8008694 <tcp_bind+0x120>)
 80085a0:	f008 fc06 	bl	8010db0 <iprintf>
 80085a4:	f06f 030f 	mvn.w	r3, #15
 80085a8:	e06a      	b.n	8008680 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7d1b      	ldrb	r3, [r3, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d009      	beq.n	80085c6 <tcp_bind+0x52>
 80085b2:	4b36      	ldr	r3, [pc, #216]	; (800868c <tcp_bind+0x118>)
 80085b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80085b8:	4937      	ldr	r1, [pc, #220]	; (8008698 <tcp_bind+0x124>)
 80085ba:	4836      	ldr	r0, [pc, #216]	; (8008694 <tcp_bind+0x120>)
 80085bc:	f008 fbf8 	bl	8010db0 <iprintf>
 80085c0:	f06f 0305 	mvn.w	r3, #5
 80085c4:	e05c      	b.n	8008680 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80085cc:	f000 f9f0 	bl	80089b0 <tcp_new_port>
 80085d0:	4603      	mov	r3, r0
 80085d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d135      	bne.n	8008646 <tcp_bind+0xd2>
      return ERR_BUF;
 80085da:	f06f 0301 	mvn.w	r3, #1
 80085de:	e04f      	b.n	8008680 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e02b      	b.n	800863e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80085e6:	4a2d      	ldr	r2, [pc, #180]	; (800869c <tcp_bind+0x128>)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	e01e      	b.n	8008632 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	8adb      	ldrh	r3, [r3, #22]
 80085f8:	88fa      	ldrh	r2, [r7, #6]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d116      	bne.n	800862c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80085fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00c      	beq.n	8008626 <tcp_bind+0xb2>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008622:	429a      	cmp	r2, r3
 8008624:	d102      	bne.n	800862c <tcp_bind+0xb8>
              return ERR_USE;
 8008626:	f06f 0307 	mvn.w	r3, #7
 800862a:	e029      	b.n	8008680 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	61bb      	str	r3, [r7, #24]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1dd      	bne.n	80085f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	3301      	adds	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	429a      	cmp	r2, r3
 8008644:	dbcf      	blt.n	80085e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00c      	beq.n	8008666 <tcp_bind+0xf2>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d008      	beq.n	8008666 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <tcp_bind+0xec>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	e000      	b.n	8008662 <tcp_bind+0xee>
 8008660:	2300      	movs	r3, #0
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800866c:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <tcp_bind+0x12c>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	60da      	str	r2, [r3, #12]
 8008674:	4a0a      	ldr	r2, [pc, #40]	; (80086a0 <tcp_bind+0x12c>)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	f005 fccf 	bl	800e01c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	080156d8 	.word	0x080156d8
 800868c:	08012914 	.word	0x08012914
 8008690:	08012aa8 	.word	0x08012aa8
 8008694:	08012958 	.word	0x08012958
 8008698:	08012ac0 	.word	0x08012ac0
 800869c:	080156b0 	.word	0x080156b0
 80086a0:	20008c14 	.word	0x20008c14

080086a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <tcp_accept_null+0x22>
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <tcp_accept_null+0x34>)
 80086ba:	f240 320f 	movw	r2, #783	; 0x30f
 80086be:	4907      	ldr	r1, [pc, #28]	; (80086dc <tcp_accept_null+0x38>)
 80086c0:	4807      	ldr	r0, [pc, #28]	; (80086e0 <tcp_accept_null+0x3c>)
 80086c2:	f008 fb75 	bl	8010db0 <iprintf>

  tcp_abort(pcb);
 80086c6:	68b8      	ldr	r0, [r7, #8]
 80086c8:	f7ff ff48 	bl	800855c <tcp_abort>

  return ERR_ABRT;
 80086cc:	f06f 030c 	mvn.w	r3, #12
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	08012914 	.word	0x08012914
 80086dc:	08012ae8 	.word	0x08012ae8
 80086e0:	08012958 	.word	0x08012958

080086e4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	2200      	movs	r2, #0
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f806 	bl	8008708 <tcp_listen_with_backlog_and_err>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	460b      	mov	r3, r1
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d109      	bne.n	8008734 <tcp_listen_with_backlog_and_err+0x2c>
 8008720:	4b47      	ldr	r3, [pc, #284]	; (8008840 <tcp_listen_with_backlog_and_err+0x138>)
 8008722:	f240 3259 	movw	r2, #857	; 0x359
 8008726:	4947      	ldr	r1, [pc, #284]	; (8008844 <tcp_listen_with_backlog_and_err+0x13c>)
 8008728:	4847      	ldr	r0, [pc, #284]	; (8008848 <tcp_listen_with_backlog_and_err+0x140>)
 800872a:	f008 fb41 	bl	8010db0 <iprintf>
 800872e:	23f0      	movs	r3, #240	; 0xf0
 8008730:	76fb      	strb	r3, [r7, #27]
 8008732:	e079      	b.n	8008828 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7d1b      	ldrb	r3, [r3, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d009      	beq.n	8008750 <tcp_listen_with_backlog_and_err+0x48>
 800873c:	4b40      	ldr	r3, [pc, #256]	; (8008840 <tcp_listen_with_backlog_and_err+0x138>)
 800873e:	f240 325a 	movw	r2, #858	; 0x35a
 8008742:	4942      	ldr	r1, [pc, #264]	; (800884c <tcp_listen_with_backlog_and_err+0x144>)
 8008744:	4840      	ldr	r0, [pc, #256]	; (8008848 <tcp_listen_with_backlog_and_err+0x140>)
 8008746:	f008 fb33 	bl	8010db0 <iprintf>
 800874a:	23f1      	movs	r3, #241	; 0xf1
 800874c:	76fb      	strb	r3, [r7, #27]
 800874e:	e06b      	b.n	8008828 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d104      	bne.n	8008762 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800875c:	23f7      	movs	r3, #247	; 0xf7
 800875e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008760:	e062      	b.n	8008828 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008762:	2002      	movs	r0, #2
 8008764:	f7fe fa8c 	bl	8006c80 <memp_malloc>
 8008768:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008770:	23ff      	movs	r3, #255	; 0xff
 8008772:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008774:	e058      	b.n	8008828 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	691a      	ldr	r2, [r3, #16]
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8ada      	ldrh	r2, [r3, #22]
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	2201      	movs	r2, #1
 800878a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7d5a      	ldrb	r2, [r3, #21]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	7a5a      	ldrb	r2, [r3, #9]
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2200      	movs	r2, #0
 80087a0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	7ada      	ldrb	r2, [r3, #11]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	7a9a      	ldrb	r2, [r3, #10]
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8adb      	ldrh	r3, [r3, #22]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d021      	beq.n	8008806 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80087c2:	4b23      	ldr	r3, [pc, #140]	; (8008850 <tcp_listen_with_backlog_and_err+0x148>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d105      	bne.n	80087d8 <tcp_listen_with_backlog_and_err+0xd0>
 80087cc:	4b20      	ldr	r3, [pc, #128]	; (8008850 <tcp_listen_with_backlog_and_err+0x148>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <tcp_listen_with_backlog_and_err+0x148>)
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	e013      	b.n	8008800 <tcp_listen_with_backlog_and_err+0xf8>
 80087d8:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <tcp_listen_with_backlog_and_err+0x148>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e00c      	b.n	80087fa <tcp_listen_with_backlog_and_err+0xf2>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d104      	bne.n	80087f4 <tcp_listen_with_backlog_and_err+0xec>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	e005      	b.n	8008800 <tcp_listen_with_backlog_and_err+0xf8>
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1ef      	bne.n	80087e0 <tcp_listen_with_backlog_and_err+0xd8>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fbc0 	bl	8007f8c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4a11      	ldr	r2, [pc, #68]	; (8008854 <tcp_listen_with_backlog_and_err+0x14c>)
 8008810:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <tcp_listen_with_backlog_and_err+0x150>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	4a0f      	ldr	r2, [pc, #60]	; (8008858 <tcp_listen_with_backlog_and_err+0x150>)
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	f005 fbfc 	bl	800e01c <tcp_timer_needed>
  res = ERR_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7efa      	ldrb	r2, [r7, #27]
 8008832:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008834:	69fb      	ldr	r3, [r7, #28]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	08012914 	.word	0x08012914
 8008844:	08012b08 	.word	0x08012b08
 8008848:	08012958 	.word	0x08012958
 800884c:	08012b38 	.word	0x08012b38
 8008850:	20008c14 	.word	0x20008c14
 8008854:	080086a5 	.word	0x080086a5
 8008858:	20008c18 	.word	0x20008c18

0800885c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <tcp_update_rcv_ann_wnd+0x1c>
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <tcp_update_rcv_ann_wnd+0xa4>)
 800886c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008870:	4924      	ldr	r1, [pc, #144]	; (8008904 <tcp_update_rcv_ann_wnd+0xa8>)
 8008872:	4825      	ldr	r0, [pc, #148]	; (8008908 <tcp_update_rcv_ann_wnd+0xac>)
 8008874:	f008 fa9c 	bl	8010db0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800888c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008890:	bf28      	it	cs
 8008892:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008896:	b292      	uxth	r2, r2
 8008898:	4413      	add	r3, r2
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db08      	blt.n	80088b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	e020      	b.n	80088f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dd03      	ble.n	80088ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088c8:	e014      	b.n	80088f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088dc:	d306      	bcc.n	80088ec <tcp_update_rcv_ann_wnd+0x90>
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <tcp_update_rcv_ann_wnd+0xa4>)
 80088e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80088e4:	4909      	ldr	r1, [pc, #36]	; (800890c <tcp_update_rcv_ann_wnd+0xb0>)
 80088e6:	4808      	ldr	r0, [pc, #32]	; (8008908 <tcp_update_rcv_ann_wnd+0xac>)
 80088e8:	f008 fa62 	bl	8010db0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80088f4:	2300      	movs	r3, #0
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	08012914 	.word	0x08012914
 8008904:	08012b70 	.word	0x08012b70
 8008908:	08012958 	.word	0x08012958
 800890c:	08012b94 	.word	0x08012b94

08008910 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <tcp_recved+0x22>
 8008922:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <tcp_recved+0x90>)
 8008924:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008928:	491e      	ldr	r1, [pc, #120]	; (80089a4 <tcp_recved+0x94>)
 800892a:	481f      	ldr	r0, [pc, #124]	; (80089a8 <tcp_recved+0x98>)
 800892c:	f008 fa40 	bl	8010db0 <iprintf>
 8008930:	e032      	b.n	8008998 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	7d1b      	ldrb	r3, [r3, #20]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d106      	bne.n	8008948 <tcp_recved+0x38>
 800893a:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <tcp_recved+0x90>)
 800893c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008940:	491a      	ldr	r1, [pc, #104]	; (80089ac <tcp_recved+0x9c>)
 8008942:	4819      	ldr	r0, [pc, #100]	; (80089a8 <tcp_recved+0x98>)
 8008944:	f008 fa34 	bl	8010db0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	4413      	add	r3, r2
 8008950:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008958:	d804      	bhi.n	8008964 <tcp_recved+0x54>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895e:	89fa      	ldrh	r2, [r7, #14]
 8008960:	429a      	cmp	r2, r3
 8008962:	d204      	bcs.n	800896e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800896a:	851a      	strh	r2, [r3, #40]	; 0x28
 800896c:	e002      	b.n	8008974 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	89fa      	ldrh	r2, [r7, #14]
 8008972:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff71 	bl	800885c <tcp_update_rcv_ann_wnd>
 800897a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008982:	d309      	bcc.n	8008998 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8b5b      	ldrh	r3, [r3, #26]
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	b29a      	uxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f004 fbcc 	bl	800d130 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	08012914 	.word	0x08012914
 80089a4:	08012bb0 	.word	0x08012bb0
 80089a8:	08012958 	.word	0x08012958
 80089ac:	08012bc8 	.word	0x08012bc8

080089b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80089ba:	4b1e      	ldr	r3, [pc, #120]	; (8008a34 <tcp_new_port+0x84>)
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	4b1c      	ldr	r3, [pc, #112]	; (8008a34 <tcp_new_port+0x84>)
 80089c4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80089c6:	4b1b      	ldr	r3, [pc, #108]	; (8008a34 <tcp_new_port+0x84>)
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d103      	bne.n	80089da <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80089d2:	4b18      	ldr	r3, [pc, #96]	; (8008a34 <tcp_new_port+0x84>)
 80089d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80089d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80089da:	2300      	movs	r3, #0
 80089dc:	71fb      	strb	r3, [r7, #7]
 80089de:	e01e      	b.n	8008a1e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <tcp_new_port+0x88>)
 80089e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	e011      	b.n	8008a12 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	8ada      	ldrh	r2, [r3, #22]
 80089f2:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <tcp_new_port+0x84>)
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d108      	bne.n	8008a0c <tcp_new_port+0x5c>
        n++;
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	3301      	adds	r3, #1
 80089fe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008a00:	88bb      	ldrh	r3, [r7, #4]
 8008a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a06:	d3d8      	bcc.n	80089ba <tcp_new_port+0xa>
          return 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e00d      	b.n	8008a28 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1ea      	bne.n	80089ee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	71fb      	strb	r3, [r7, #7]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d9dd      	bls.n	80089e0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008a24:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <tcp_new_port+0x84>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	20000020 	.word	0x20000020
 8008a38:	080156b0 	.word	0x080156b0

08008a3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b090      	sub	sp, #64	; 0x40
 8008a40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008a48:	4b94      	ldr	r3, [pc, #592]	; (8008c9c <tcp_slowtmr+0x260>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a93      	ldr	r2, [pc, #588]	; (8008c9c <tcp_slowtmr+0x260>)
 8008a50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008a52:	4b93      	ldr	r3, [pc, #588]	; (8008ca0 <tcp_slowtmr+0x264>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	3301      	adds	r3, #1
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	4b91      	ldr	r3, [pc, #580]	; (8008ca0 <tcp_slowtmr+0x264>)
 8008a5c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008a62:	4b90      	ldr	r3, [pc, #576]	; (8008ca4 <tcp_slowtmr+0x268>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008a68:	e29d      	b.n	8008fa6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	7d1b      	ldrb	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <tcp_slowtmr+0x44>
 8008a72:	4b8d      	ldr	r3, [pc, #564]	; (8008ca8 <tcp_slowtmr+0x26c>)
 8008a74:	f240 42be 	movw	r2, #1214	; 0x4be
 8008a78:	498c      	ldr	r1, [pc, #560]	; (8008cac <tcp_slowtmr+0x270>)
 8008a7a:	488d      	ldr	r0, [pc, #564]	; (8008cb0 <tcp_slowtmr+0x274>)
 8008a7c:	f008 f998 	bl	8010db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a82:	7d1b      	ldrb	r3, [r3, #20]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d106      	bne.n	8008a96 <tcp_slowtmr+0x5a>
 8008a88:	4b87      	ldr	r3, [pc, #540]	; (8008ca8 <tcp_slowtmr+0x26c>)
 8008a8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008a8e:	4989      	ldr	r1, [pc, #548]	; (8008cb4 <tcp_slowtmr+0x278>)
 8008a90:	4887      	ldr	r0, [pc, #540]	; (8008cb0 <tcp_slowtmr+0x274>)
 8008a92:	f008 f98d 	bl	8010db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	7d1b      	ldrb	r3, [r3, #20]
 8008a9a:	2b0a      	cmp	r3, #10
 8008a9c:	d106      	bne.n	8008aac <tcp_slowtmr+0x70>
 8008a9e:	4b82      	ldr	r3, [pc, #520]	; (8008ca8 <tcp_slowtmr+0x26c>)
 8008aa0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008aa4:	4984      	ldr	r1, [pc, #528]	; (8008cb8 <tcp_slowtmr+0x27c>)
 8008aa6:	4882      	ldr	r0, [pc, #520]	; (8008cb0 <tcp_slowtmr+0x274>)
 8008aa8:	f008 f982 	bl	8010db0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	7f9a      	ldrb	r2, [r3, #30]
 8008ab0:	4b7b      	ldr	r3, [pc, #492]	; (8008ca0 <tcp_slowtmr+0x264>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d105      	bne.n	8008ac4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008ac2:	e270      	b.n	8008fa6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008ac4:	4b76      	ldr	r3, [pc, #472]	; (8008ca0 <tcp_slowtmr+0x264>)
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	7d1b      	ldrb	r3, [r3, #20]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d10a      	bne.n	8008af6 <tcp_slowtmr+0xba>
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d905      	bls.n	8008af6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aee:	3301      	adds	r3, #1
 8008af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008af4:	e11e      	b.n	8008d34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008afc:	2b0b      	cmp	r3, #11
 8008afe:	d905      	bls.n	8008b0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b04:	3301      	adds	r3, #1
 8008b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b0a:	e113      	b.n	8008d34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d075      	beq.n	8008c02 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <tcp_slowtmr+0xf0>
 8008b1e:	4b62      	ldr	r3, [pc, #392]	; (8008ca8 <tcp_slowtmr+0x26c>)
 8008b20:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008b24:	4965      	ldr	r1, [pc, #404]	; (8008cbc <tcp_slowtmr+0x280>)
 8008b26:	4862      	ldr	r0, [pc, #392]	; (8008cb0 <tcp_slowtmr+0x274>)
 8008b28:	f008 f942 	bl	8010db0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <tcp_slowtmr+0x106>
 8008b34:	4b5c      	ldr	r3, [pc, #368]	; (8008ca8 <tcp_slowtmr+0x26c>)
 8008b36:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008b3a:	4961      	ldr	r1, [pc, #388]	; (8008cc0 <tcp_slowtmr+0x284>)
 8008b3c:	485c      	ldr	r0, [pc, #368]	; (8008cb0 <tcp_slowtmr+0x274>)
 8008b3e:	f008 f937 	bl	8010db0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008b48:	2b0b      	cmp	r3, #11
 8008b4a:	d905      	bls.n	8008b58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b50:	3301      	adds	r3, #1
 8008b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b56:	e0ed      	b.n	8008d34 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	4a58      	ldr	r2, [pc, #352]	; (8008cc4 <tcp_slowtmr+0x288>)
 8008b62:	5cd3      	ldrb	r3, [r2, r3]
 8008b64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008b6c:	7c7a      	ldrb	r2, [r7, #17]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d907      	bls.n	8008b82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008b78:	3301      	adds	r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008b88:	7c7a      	ldrb	r2, [r7, #17]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	f200 80d2 	bhi.w	8008d34 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008b90:	2301      	movs	r3, #1
 8008b92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d108      	bne.n	8008bb0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ba0:	f005 f96e 	bl	800de80 <tcp_zero_window_probe>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d014      	beq.n	8008bd4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008baa:	2300      	movs	r3, #0
 8008bac:	623b      	str	r3, [r7, #32]
 8008bae:	e011      	b.n	8008bd4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bba:	f004 f833 	bl	800cc24 <tcp_split_unsent_seg>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bc6:	f004 fab3 	bl	800d130 <tcp_output>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80ac 	beq.w	8008d34 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008bea:	2b06      	cmp	r3, #6
 8008bec:	f200 80a2 	bhi.w	8008d34 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008c00:	e098      	b.n	8008d34 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	db0f      	blt.n	8008c2c <tcp_slowtmr+0x1f0>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d008      	beq.n	8008c2c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3301      	adds	r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	b21a      	sxth	r2, r3
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	db7b      	blt.n	8008d34 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c3e:	f004 fd6b 	bl	800d718 <tcp_rexmit_rto_prepare>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d007      	beq.n	8008c58 <tcp_slowtmr+0x21c>
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d171      	bne.n	8008d34 <tcp_slowtmr+0x2f8>
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d06d      	beq.n	8008d34 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	7d1b      	ldrb	r3, [r3, #20]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d03a      	beq.n	8008cd6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c66:	2b0c      	cmp	r3, #12
 8008c68:	bf28      	it	cs
 8008c6a:	230c      	movcs	r3, #12
 8008c6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c74:	10db      	asrs	r3, r3, #3
 8008c76:	b21b      	sxth	r3, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c80:	4413      	add	r3, r2
 8008c82:	7efa      	ldrb	r2, [r7, #27]
 8008c84:	4910      	ldr	r1, [pc, #64]	; (8008cc8 <tcp_slowtmr+0x28c>)
 8008c86:	5c8a      	ldrb	r2, [r1, r2]
 8008c88:	4093      	lsls	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008c92:	4293      	cmp	r3, r2
 8008c94:	dc1a      	bgt.n	8008ccc <tcp_slowtmr+0x290>
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	b21a      	sxth	r2, r3
 8008c9a:	e019      	b.n	8008cd0 <tcp_slowtmr+0x294>
 8008c9c:	20008c10 	.word	0x20008c10
 8008ca0:	20008c26 	.word	0x20008c26
 8008ca4:	20008c1c 	.word	0x20008c1c
 8008ca8:	08012914 	.word	0x08012914
 8008cac:	08012c58 	.word	0x08012c58
 8008cb0:	08012958 	.word	0x08012958
 8008cb4:	08012c84 	.word	0x08012c84
 8008cb8:	08012cb0 	.word	0x08012cb0
 8008cbc:	08012ce0 	.word	0x08012ce0
 8008cc0:	08012d14 	.word	0x08012d14
 8008cc4:	080156a8 	.word	0x080156a8
 8008cc8:	08015698 	.word	0x08015698
 8008ccc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	2200      	movs	r2, #0
 8008cda:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	bf28      	it	cs
 8008cec:	4613      	movcs	r3, r2
 8008cee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008cf0:	8a7b      	ldrh	r3, [r7, #18]
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d206      	bcs.n	8008d1c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d30:	f004 fd62 	bl	800d7f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	7d1b      	ldrb	r3, [r3, #20]
 8008d38:	2b06      	cmp	r3, #6
 8008d3a:	d111      	bne.n	8008d60 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	8b5b      	ldrh	r3, [r3, #26]
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d48:	4b9c      	ldr	r3, [pc, #624]	; (8008fbc <tcp_slowtmr+0x580>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b28      	cmp	r3, #40	; 0x28
 8008d54:	d904      	bls.n	8008d60 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	7a5b      	ldrb	r3, [r3, #9]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d04a      	beq.n	8008e02 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d003      	beq.n	8008d7c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008d78:	2b07      	cmp	r3, #7
 8008d7a:	d142      	bne.n	8008e02 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d7c:	4b8f      	ldr	r3, [pc, #572]	; (8008fbc <tcp_slowtmr+0x580>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008d8c:	4b8c      	ldr	r3, [pc, #560]	; (8008fc0 <tcp_slowtmr+0x584>)
 8008d8e:	440b      	add	r3, r1
 8008d90:	498c      	ldr	r1, [pc, #560]	; (8008fc4 <tcp_slowtmr+0x588>)
 8008d92:	fba1 1303 	umull	r1, r3, r1, r3
 8008d96:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d90a      	bls.n	8008db2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da0:	3301      	adds	r3, #1
 8008da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008daa:	3301      	adds	r3, #1
 8008dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008db0:	e027      	b.n	8008e02 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008db2:	4b82      	ldr	r3, [pc, #520]	; (8008fbc <tcp_slowtmr+0x580>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4b7f      	ldr	r3, [pc, #508]	; (8008fc8 <tcp_slowtmr+0x58c>)
 8008dcc:	fb00 f303 	mul.w	r3, r0, r3
 8008dd0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008dd2:	497c      	ldr	r1, [pc, #496]	; (8008fc4 <tcp_slowtmr+0x588>)
 8008dd4:	fba1 1303 	umull	r1, r3, r1, r3
 8008dd8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d911      	bls.n	8008e02 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de0:	f005 f80e 	bl	800de00 <tcp_keepalive>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008dea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d107      	bne.n	8008e02 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008df8:	3301      	adds	r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d011      	beq.n	8008e2e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008e0a:	4b6c      	ldr	r3, [pc, #432]	; (8008fbc <tcp_slowtmr+0x580>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	440b      	add	r3, r1
 8008e22:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d302      	bcc.n	8008e2e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e2a:	f000 fec9 	bl	8009bc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	7d1b      	ldrb	r3, [r3, #20]
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d10b      	bne.n	8008e4e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e36:	4b61      	ldr	r3, [pc, #388]	; (8008fbc <tcp_slowtmr+0x580>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b28      	cmp	r3, #40	; 0x28
 8008e42:	d904      	bls.n	8008e4e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	7d1b      	ldrb	r3, [r3, #20]
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d10b      	bne.n	8008e6e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e56:	4b59      	ldr	r3, [pc, #356]	; (8008fbc <tcp_slowtmr+0x580>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2bf0      	cmp	r3, #240	; 0xf0
 8008e62:	d904      	bls.n	8008e6e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d060      	beq.n	8008f38 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e80:	f000 fcea 	bl	8009858 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d010      	beq.n	8008eac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008e8a:	4b50      	ldr	r3, [pc, #320]	; (8008fcc <tcp_slowtmr+0x590>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d106      	bne.n	8008ea2 <tcp_slowtmr+0x466>
 8008e94:	4b4e      	ldr	r3, [pc, #312]	; (8008fd0 <tcp_slowtmr+0x594>)
 8008e96:	f240 526d 	movw	r2, #1389	; 0x56d
 8008e9a:	494e      	ldr	r1, [pc, #312]	; (8008fd4 <tcp_slowtmr+0x598>)
 8008e9c:	484e      	ldr	r0, [pc, #312]	; (8008fd8 <tcp_slowtmr+0x59c>)
 8008e9e:	f007 ff87 	bl	8010db0 <iprintf>
        prev->next = pcb->next;
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	e00f      	b.n	8008ecc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008eac:	4b47      	ldr	r3, [pc, #284]	; (8008fcc <tcp_slowtmr+0x590>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d006      	beq.n	8008ec4 <tcp_slowtmr+0x488>
 8008eb6:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <tcp_slowtmr+0x594>)
 8008eb8:	f240 5271 	movw	r2, #1393	; 0x571
 8008ebc:	4947      	ldr	r1, [pc, #284]	; (8008fdc <tcp_slowtmr+0x5a0>)
 8008ebe:	4846      	ldr	r0, [pc, #280]	; (8008fd8 <tcp_slowtmr+0x59c>)
 8008ec0:	f007 ff76 	bl	8010db0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4a40      	ldr	r2, [pc, #256]	; (8008fcc <tcp_slowtmr+0x590>)
 8008eca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d013      	beq.n	8008efc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008edc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee4:	8ad2      	ldrh	r2, [r2, #22]
 8008ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee8:	8b09      	ldrh	r1, [r1, #24]
 8008eea:	9102      	str	r1, [sp, #8]
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef8:	f004 fece 	bl	800dc98 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	7d1b      	ldrb	r3, [r3, #20]
 8008f06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008f12:	6838      	ldr	r0, [r7, #0]
 8008f14:	f7ff f83a 	bl	8007f8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008f18:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <tcp_slowtmr+0x5a4>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <tcp_slowtmr+0x4f2>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f06f 010c 	mvn.w	r1, #12
 8008f2a:	68b8      	ldr	r0, [r7, #8]
 8008f2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <tcp_slowtmr+0x5a4>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d037      	beq.n	8008fa6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008f36:	e592      	b.n	8008a5e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	7f1b      	ldrb	r3, [r3, #28]
 8008f46:	3301      	adds	r3, #1
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	7f1a      	ldrb	r2, [r3, #28]
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	7f5b      	ldrb	r3, [r3, #29]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d325      	bcc.n	8008fa6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008f60:	4b1f      	ldr	r3, [pc, #124]	; (8008fe0 <tcp_slowtmr+0x5a4>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <tcp_slowtmr+0x54c>
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f78:	6912      	ldr	r2, [r2, #16]
 8008f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008f86:	e002      	b.n	8008f8e <tcp_slowtmr+0x552>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008f8e:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <tcp_slowtmr+0x5a4>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d000      	beq.n	8008f98 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008f96:	e562      	b.n	8008a5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008f98:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f004 f8c5 	bl	800d130 <tcp_output>
  while (pcb != NULL) {
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f47f ad5e 	bne.w	8008a6a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <tcp_slowtmr+0x5a8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008fb8:	e069      	b.n	800908e <tcp_slowtmr+0x652>
 8008fba:	bf00      	nop
 8008fbc:	20008c10 	.word	0x20008c10
 8008fc0:	000a4cb8 	.word	0x000a4cb8
 8008fc4:	10624dd3 	.word	0x10624dd3
 8008fc8:	000124f8 	.word	0x000124f8
 8008fcc:	20008c1c 	.word	0x20008c1c
 8008fd0:	08012914 	.word	0x08012914
 8008fd4:	08012d4c 	.word	0x08012d4c
 8008fd8:	08012958 	.word	0x08012958
 8008fdc:	08012d78 	.word	0x08012d78
 8008fe0:	20008c24 	.word	0x20008c24
 8008fe4:	20008c20 	.word	0x20008c20
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	7d1b      	ldrb	r3, [r3, #20]
 8008fec:	2b0a      	cmp	r3, #10
 8008fee:	d006      	beq.n	8008ffe <tcp_slowtmr+0x5c2>
 8008ff0:	4b2b      	ldr	r3, [pc, #172]	; (80090a0 <tcp_slowtmr+0x664>)
 8008ff2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008ff6:	492b      	ldr	r1, [pc, #172]	; (80090a4 <tcp_slowtmr+0x668>)
 8008ff8:	482b      	ldr	r0, [pc, #172]	; (80090a8 <tcp_slowtmr+0x66c>)
 8008ffa:	f007 fed9 	bl	8010db0 <iprintf>
    pcb_remove = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009004:	4b29      	ldr	r3, [pc, #164]	; (80090ac <tcp_slowtmr+0x670>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2bf0      	cmp	r3, #240	; 0xf0
 8009010:	d904      	bls.n	800901c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009016:	3301      	adds	r3, #1
 8009018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800901c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02f      	beq.n	8009084 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009026:	f000 fc17 	bl	8009858 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	2b00      	cmp	r3, #0
 800902e:	d010      	beq.n	8009052 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009030:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <tcp_slowtmr+0x674>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009036:	429a      	cmp	r2, r3
 8009038:	d106      	bne.n	8009048 <tcp_slowtmr+0x60c>
 800903a:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <tcp_slowtmr+0x664>)
 800903c:	f240 52af 	movw	r2, #1455	; 0x5af
 8009040:	491c      	ldr	r1, [pc, #112]	; (80090b4 <tcp_slowtmr+0x678>)
 8009042:	4819      	ldr	r0, [pc, #100]	; (80090a8 <tcp_slowtmr+0x66c>)
 8009044:	f007 feb4 	bl	8010db0 <iprintf>
        prev->next = pcb->next;
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	e00f      	b.n	8009072 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <tcp_slowtmr+0x674>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009058:	429a      	cmp	r2, r3
 800905a:	d006      	beq.n	800906a <tcp_slowtmr+0x62e>
 800905c:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <tcp_slowtmr+0x664>)
 800905e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009062:	4915      	ldr	r1, [pc, #84]	; (80090b8 <tcp_slowtmr+0x67c>)
 8009064:	4810      	ldr	r0, [pc, #64]	; (80090a8 <tcp_slowtmr+0x66c>)
 8009066:	f007 fea3 	bl	8010db0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	4a10      	ldr	r2, [pc, #64]	; (80090b0 <tcp_slowtmr+0x674>)
 8009070:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800907c:	69f8      	ldr	r0, [r7, #28]
 800907e:	f7fe ff85 	bl	8007f8c <tcp_free>
 8009082:	e004      	b.n	800908e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1a9      	bne.n	8008fe8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3730      	adds	r7, #48	; 0x30
 800909a:	46bd      	mov	sp, r7
 800909c:	bdb0      	pop	{r4, r5, r7, pc}
 800909e:	bf00      	nop
 80090a0:	08012914 	.word	0x08012914
 80090a4:	08012da4 	.word	0x08012da4
 80090a8:	08012958 	.word	0x08012958
 80090ac:	20008c10 	.word	0x20008c10
 80090b0:	20008c20 	.word	0x20008c20
 80090b4:	08012dd4 	.word	0x08012dd4
 80090b8:	08012dfc 	.word	0x08012dfc

080090bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80090c2:	4b2d      	ldr	r3, [pc, #180]	; (8009178 <tcp_fasttmr+0xbc>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4b2b      	ldr	r3, [pc, #172]	; (8009178 <tcp_fasttmr+0xbc>)
 80090cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80090ce:	4b2b      	ldr	r3, [pc, #172]	; (800917c <tcp_fasttmr+0xc0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80090d4:	e048      	b.n	8009168 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7f9a      	ldrb	r2, [r3, #30]
 80090da:	4b27      	ldr	r3, [pc, #156]	; (8009178 <tcp_fasttmr+0xbc>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d03f      	beq.n	8009162 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80090e2:	4b25      	ldr	r3, [pc, #148]	; (8009178 <tcp_fasttmr+0xbc>)
 80090e4:	781a      	ldrb	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8b5b      	ldrh	r3, [r3, #26]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d010      	beq.n	8009118 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8b5b      	ldrh	r3, [r3, #26]
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f004 f813 	bl	800d130 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8b5b      	ldrh	r3, [r3, #26]
 800910e:	f023 0303 	bic.w	r3, r3, #3
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8b5b      	ldrh	r3, [r3, #26]
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8b5b      	ldrh	r3, [r3, #26]
 8009128:	f023 0308 	bic.w	r3, r3, #8
 800912c:	b29a      	uxth	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff f8be 	bl	80082b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <tcp_fasttmr+0xc4>)
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f819 	bl	8009184 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <tcp_fasttmr+0xc4>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d000      	beq.n	800915c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800915a:	e7b8      	b.n	80090ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	e002      	b.n	8009168 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1b3      	bne.n	80090d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20008c26 	.word	0x20008c26
 800917c:	20008c1c 	.word	0x20008c1c
 8009180:	20008c24 	.word	0x20008c24

08009184 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009184:	b590      	push	{r4, r7, lr}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <tcp_process_refused_data+0x22>
 8009192:	4b37      	ldr	r3, [pc, #220]	; (8009270 <tcp_process_refused_data+0xec>)
 8009194:	f240 6209 	movw	r2, #1545	; 0x609
 8009198:	4936      	ldr	r1, [pc, #216]	; (8009274 <tcp_process_refused_data+0xf0>)
 800919a:	4837      	ldr	r0, [pc, #220]	; (8009278 <tcp_process_refused_data+0xf4>)
 800919c:	f007 fe08 	bl	8010db0 <iprintf>
 80091a0:	f06f 030f 	mvn.w	r3, #15
 80091a4:	e060      	b.n	8009268 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091aa:	7b5b      	ldrb	r3, [r3, #13]
 80091ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <tcp_process_refused_data+0x58>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6918      	ldr	r0, [r3, #16]
 80091ce:	2300      	movs	r3, #0
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	47a0      	blx	r4
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
 80091da:	e007      	b.n	80091ec <tcp_process_refused_data+0x68>
 80091dc:	2300      	movs	r3, #0
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	2000      	movs	r0, #0
 80091e4:	f000 f8c2 	bl	800936c <tcp_recv_null>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80091ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d12a      	bne.n	800924a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d033      	beq.n	8009266 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009202:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009206:	d005      	beq.n	8009214 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920c:	3301      	adds	r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <tcp_process_refused_data+0xb2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6918      	ldr	r0, [r3, #16]
 8009228:	2300      	movs	r3, #0
 800922a:	2200      	movs	r2, #0
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	47a0      	blx	r4
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
 8009234:	e001      	b.n	800923a <tcp_process_refused_data+0xb6>
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800923a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923e:	f113 0f0d 	cmn.w	r3, #13
 8009242:	d110      	bne.n	8009266 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009244:	f06f 030c 	mvn.w	r3, #12
 8009248:	e00e      	b.n	8009268 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800924a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924e:	f113 0f0d 	cmn.w	r3, #13
 8009252:	d102      	bne.n	800925a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009254:	f06f 030c 	mvn.w	r3, #12
 8009258:	e006      	b.n	8009268 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009260:	f06f 0304 	mvn.w	r3, #4
 8009264:	e000      	b.n	8009268 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}
 8009270:	08012914 	.word	0x08012914
 8009274:	08012e24 	.word	0x08012e24
 8009278:	08012958 	.word	0x08012958

0800927c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009284:	e007      	b.n	8009296 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f80a 	bl	80092a6 <tcp_seg_free>
    seg = next;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f4      	bne.n	8009286 <tcp_segs_free+0xa>
  }
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00c      	beq.n	80092ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fbc3 	bl	8007a4c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	2003      	movs	r0, #3
 80092ca:	f7fd fd49 	bl	8006d60 <memp_free>
  }
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <tcp_setprio+0x22>
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <tcp_setprio+0x30>)
 80092ec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80092f0:	4906      	ldr	r1, [pc, #24]	; (800930c <tcp_setprio+0x34>)
 80092f2:	4807      	ldr	r0, [pc, #28]	; (8009310 <tcp_setprio+0x38>)
 80092f4:	f007 fd5c 	bl	8010db0 <iprintf>
 80092f8:	e002      	b.n	8009300 <tcp_setprio+0x28>

  pcb->prio = prio;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	755a      	strb	r2, [r3, #21]
}
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	08012914 	.word	0x08012914
 800930c:	08012e4c 	.word	0x08012e4c
 8009310:	08012958 	.word	0x08012958

08009314 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <tcp_seg_copy+0x1c>
 8009322:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <tcp_seg_copy+0x4c>)
 8009324:	f240 6282 	movw	r2, #1666	; 0x682
 8009328:	490e      	ldr	r1, [pc, #56]	; (8009364 <tcp_seg_copy+0x50>)
 800932a:	480f      	ldr	r0, [pc, #60]	; (8009368 <tcp_seg_copy+0x54>)
 800932c:	f007 fd40 	bl	8010db0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009330:	2003      	movs	r0, #3
 8009332:	f7fd fca5 	bl	8006c80 <memp_malloc>
 8009336:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <tcp_seg_copy+0x2e>
    return NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	e00a      	b.n	8009358 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009342:	2210      	movs	r2, #16
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f007 fe2b 	bl	8010fa2 <memcpy>
  pbuf_ref(cseg->p);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fc1b 	bl	8007b8c <pbuf_ref>
  return cseg;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	08012914 	.word	0x08012914
 8009364:	08012e68 	.word	0x08012e68
 8009368:	08012958 	.word	0x08012958

0800936c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <tcp_recv_null+0x28>
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <tcp_recv_null+0x60>)
 8009382:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009386:	4912      	ldr	r1, [pc, #72]	; (80093d0 <tcp_recv_null+0x64>)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <tcp_recv_null+0x68>)
 800938a:	f007 fd11 	bl	8010db0 <iprintf>
 800938e:	f06f 030f 	mvn.w	r3, #15
 8009392:	e016      	b.n	80093c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	891b      	ldrh	r3, [r3, #8]
 800939e:	4619      	mov	r1, r3
 80093a0:	68b8      	ldr	r0, [r7, #8]
 80093a2:	f7ff fab5 	bl	8008910 <tcp_recved>
    pbuf_free(p);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fe fb50 	bl	8007a4c <pbuf_free>
 80093ac:	e008      	b.n	80093c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80093ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80093b6:	68b8      	ldr	r0, [r7, #8]
 80093b8:	f7fe ffe6 	bl	8008388 <tcp_close>
 80093bc:	4603      	mov	r3, r0
 80093be:	e000      	b.n	80093c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	08012914 	.word	0x08012914
 80093d0:	08012e84 	.word	0x08012e84
 80093d4:	08012958 	.word	0x08012958

080093d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80093e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	db01      	blt.n	80093ee <tcp_kill_prio+0x16>
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	e000      	b.n	80093f0 <tcp_kill_prio+0x18>
 80093ee:	237f      	movs	r3, #127	; 0x7f
 80093f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d034      	beq.n	8009462 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009402:	2300      	movs	r3, #0
 8009404:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009406:	4b19      	ldr	r3, [pc, #100]	; (800946c <tcp_kill_prio+0x94>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e01f      	b.n	800944e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	7d5b      	ldrb	r3, [r3, #21]
 8009412:	7afa      	ldrb	r2, [r7, #11]
 8009414:	429a      	cmp	r2, r3
 8009416:	d80c      	bhi.n	8009432 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800941c:	7afa      	ldrb	r2, [r7, #11]
 800941e:	429a      	cmp	r2, r3
 8009420:	d112      	bne.n	8009448 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <tcp_kill_prio+0x98>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	429a      	cmp	r2, r3
 8009430:	d80a      	bhi.n	8009448 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <tcp_kill_prio+0x98>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	7d5b      	ldrb	r3, [r3, #21]
 8009446:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1dc      	bne.n	800940e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800945a:	6938      	ldr	r0, [r7, #16]
 800945c:	f7ff f87e 	bl	800855c <tcp_abort>
 8009460:	e000      	b.n	8009464 <tcp_kill_prio+0x8c>
    return;
 8009462:	bf00      	nop
  }
}
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20008c1c 	.word	0x20008c1c
 8009470:	20008c10 	.word	0x20008c10

08009474 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d009      	beq.n	8009498 <tcp_kill_state+0x24>
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	2b09      	cmp	r3, #9
 8009488:	d006      	beq.n	8009498 <tcp_kill_state+0x24>
 800948a:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <tcp_kill_state+0x80>)
 800948c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009490:	4919      	ldr	r1, [pc, #100]	; (80094f8 <tcp_kill_state+0x84>)
 8009492:	481a      	ldr	r0, [pc, #104]	; (80094fc <tcp_kill_state+0x88>)
 8009494:	f007 fc8c 	bl	8010db0 <iprintf>

  inactivity = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800949c:	2300      	movs	r3, #0
 800949e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094a0:	4b17      	ldr	r3, [pc, #92]	; (8009500 <tcp_kill_state+0x8c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e017      	b.n	80094d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	7d1b      	ldrb	r3, [r3, #20]
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d10f      	bne.n	80094d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094b2:	4b14      	ldr	r3, [pc, #80]	; (8009504 <tcp_kill_state+0x90>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d807      	bhi.n	80094d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80094c2:	4b10      	ldr	r3, [pc, #64]	; (8009504 <tcp_kill_state+0x90>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e4      	bne.n	80094a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80094e4:	2100      	movs	r1, #0
 80094e6:	6938      	ldr	r0, [r7, #16]
 80094e8:	f7fe ff7a 	bl	80083e0 <tcp_abandon>
  }
}
 80094ec:	bf00      	nop
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	08012914 	.word	0x08012914
 80094f8:	08012ea0 	.word	0x08012ea0
 80094fc:	08012958 	.word	0x08012958
 8009500:	20008c1c 	.word	0x20008c1c
 8009504:	20008c10 	.word	0x20008c10

08009508 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009516:	4b12      	ldr	r3, [pc, #72]	; (8009560 <tcp_kill_timewait+0x58>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e012      	b.n	8009544 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <tcp_kill_timewait+0x5c>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d807      	bhi.n	800953e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <tcp_kill_timewait+0x5c>)
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e9      	bne.n	800951e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f7ff f803 	bl	800855c <tcp_abort>
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20008c20 	.word	0x20008c20
 8009564:	20008c10 	.word	0x20008c10

08009568 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800956e:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <tcp_handle_closepend+0x48>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009574:	e014      	b.n	80095a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	8b5b      	ldrh	r3, [r3, #26]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8b5b      	ldrh	r3, [r3, #26]
 800958c:	f023 0308 	bic.w	r3, r3, #8
 8009590:	b29a      	uxth	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fe fe8c 	bl	80082b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e7      	bne.n	8009576 <tcp_handle_closepend+0xe>
  }
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20008c1c 	.word	0x20008c1c

080095b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095be:	2001      	movs	r0, #1
 80095c0:	f7fd fb5e 	bl	8006c80 <memp_malloc>
 80095c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d126      	bne.n	800961a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80095cc:	f7ff ffcc 	bl	8009568 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80095d0:	f7ff ff9a 	bl	8009508 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095d4:	2001      	movs	r0, #1
 80095d6:	f7fd fb53 	bl	8006c80 <memp_malloc>
 80095da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d11b      	bne.n	800961a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80095e2:	2009      	movs	r0, #9
 80095e4:	f7ff ff46 	bl	8009474 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095e8:	2001      	movs	r0, #1
 80095ea:	f7fd fb49 	bl	8006c80 <memp_malloc>
 80095ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d111      	bne.n	800961a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80095f6:	2008      	movs	r0, #8
 80095f8:	f7ff ff3c 	bl	8009474 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7fd fb3f 	bl	8006c80 <memp_malloc>
 8009602:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d107      	bne.n	800961a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff fee3 	bl	80093d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009612:	2001      	movs	r0, #1
 8009614:	f7fd fb34 	bl	8006c80 <memp_malloc>
 8009618:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d03f      	beq.n	80096a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009620:	229c      	movs	r2, #156	; 0x9c
 8009622:	2100      	movs	r1, #0
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f007 fc28 	bl	8010e7a <memset>
    pcb->prio = prio;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	79fa      	ldrb	r2, [r7, #7]
 800962e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009636:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009656:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2206      	movs	r2, #6
 800965c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2206      	movs	r2, #6
 8009664:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800966c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009676:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <tcp_alloc+0xf8>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <tcp_alloc+0xfc>)
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800968c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <tcp_alloc+0x100>)
 8009694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a07      	ldr	r2, [pc, #28]	; (80096b8 <tcp_alloc+0x104>)
 800969c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80096a0:	68fb      	ldr	r3, [r7, #12]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20008c10 	.word	0x20008c10
 80096b0:	20008c26 	.word	0x20008c26
 80096b4:	0800936d 	.word	0x0800936d
 80096b8:	006ddd00 	.word	0x006ddd00

080096bc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80096c6:	2040      	movs	r0, #64	; 0x40
 80096c8:	f7ff ff74 	bl	80095b4 <tcp_alloc>
 80096cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	611a      	str	r2, [r3, #16]
  }
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00e      	beq.n	800972a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7d1b      	ldrb	r3, [r3, #20]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d106      	bne.n	8009722 <tcp_recv+0x26>
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <tcp_recv+0x38>)
 8009716:	f240 72df 	movw	r2, #2015	; 0x7df
 800971a:	4907      	ldr	r1, [pc, #28]	; (8009738 <tcp_recv+0x3c>)
 800971c:	4807      	ldr	r0, [pc, #28]	; (800973c <tcp_recv+0x40>)
 800971e:	f007 fb47 	bl	8010db0 <iprintf>
    pcb->recv = recv;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08012914 	.word	0x08012914
 8009738:	08012eb0 	.word	0x08012eb0
 800973c:	08012958 	.word	0x08012958

08009740 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00e      	beq.n	800976e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7d1b      	ldrb	r3, [r3, #20]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d106      	bne.n	8009766 <tcp_sent+0x26>
 8009758:	4b07      	ldr	r3, [pc, #28]	; (8009778 <tcp_sent+0x38>)
 800975a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800975e:	4907      	ldr	r1, [pc, #28]	; (800977c <tcp_sent+0x3c>)
 8009760:	4807      	ldr	r0, [pc, #28]	; (8009780 <tcp_sent+0x40>)
 8009762:	f007 fb25 	bl	8010db0 <iprintf>
    pcb->sent = sent;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	08012914 	.word	0x08012914
 800977c:	08012ed8 	.word	0x08012ed8
 8009780:	08012958 	.word	0x08012958

08009784 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00e      	beq.n	80097b2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	7d1b      	ldrb	r3, [r3, #20]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d106      	bne.n	80097aa <tcp_err+0x26>
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <tcp_err+0x38>)
 800979e:	f640 020d 	movw	r2, #2061	; 0x80d
 80097a2:	4907      	ldr	r1, [pc, #28]	; (80097c0 <tcp_err+0x3c>)
 80097a4:	4807      	ldr	r0, [pc, #28]	; (80097c4 <tcp_err+0x40>)
 80097a6:	f007 fb03 	bl	8010db0 <iprintf>
    pcb->errf = err;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	08012914 	.word	0x08012914
 80097c0:	08012f00 	.word	0x08012f00
 80097c4:	08012958 	.word	0x08012958

080097c8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <tcp_accept+0x22>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7d1b      	ldrb	r3, [r3, #20]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d104      	bne.n	80097ea <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	619a      	str	r2, [r3, #24]
  }
}
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
	...

080097f8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	4613      	mov	r3, r2
 8009804:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d107      	bne.n	800981c <tcp_poll+0x24>
 800980c:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <tcp_poll+0x50>)
 800980e:	f640 023d 	movw	r2, #2109	; 0x83d
 8009812:	490e      	ldr	r1, [pc, #56]	; (800984c <tcp_poll+0x54>)
 8009814:	480e      	ldr	r0, [pc, #56]	; (8009850 <tcp_poll+0x58>)
 8009816:	f007 facb 	bl	8010db0 <iprintf>
 800981a:	e011      	b.n	8009840 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	7d1b      	ldrb	r3, [r3, #20]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d106      	bne.n	8009832 <tcp_poll+0x3a>
 8009824:	4b08      	ldr	r3, [pc, #32]	; (8009848 <tcp_poll+0x50>)
 8009826:	f640 023e 	movw	r2, #2110	; 0x83e
 800982a:	490a      	ldr	r1, [pc, #40]	; (8009854 <tcp_poll+0x5c>)
 800982c:	4808      	ldr	r0, [pc, #32]	; (8009850 <tcp_poll+0x58>)
 800982e:	f007 fabf 	bl	8010db0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	79fa      	ldrb	r2, [r7, #7]
 800983e:	775a      	strb	r2, [r3, #29]
}
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08012914 	.word	0x08012914
 800984c:	08012f28 	.word	0x08012f28
 8009850:	08012958 	.word	0x08012958
 8009854:	08012f40 	.word	0x08012f40

08009858 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <tcp_pcb_purge+0x1e>
 8009866:	4b21      	ldr	r3, [pc, #132]	; (80098ec <tcp_pcb_purge+0x94>)
 8009868:	f640 0251 	movw	r2, #2129	; 0x851
 800986c:	4920      	ldr	r1, [pc, #128]	; (80098f0 <tcp_pcb_purge+0x98>)
 800986e:	4821      	ldr	r0, [pc, #132]	; (80098f4 <tcp_pcb_purge+0x9c>)
 8009870:	f007 fa9e 	bl	8010db0 <iprintf>
 8009874:	e037      	b.n	80098e6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	7d1b      	ldrb	r3, [r3, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d033      	beq.n	80098e6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009882:	2b0a      	cmp	r3, #10
 8009884:	d02f      	beq.n	80098e6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800988a:	2b01      	cmp	r3, #1
 800988c:	d02b      	beq.n	80098e6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe f8d6 	bl	8007a4c <pbuf_free>
      pcb->refused_data = NULL;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f986 	bl	8009bc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fcdb 	bl	800927c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fcd6 	bl	800927c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	08012914 	.word	0x08012914
 80098f0:	08012f60 	.word	0x08012f60
 80098f4:	08012958 	.word	0x08012958

080098f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <tcp_pcb_remove+0x1e>
 8009908:	4b3e      	ldr	r3, [pc, #248]	; (8009a04 <tcp_pcb_remove+0x10c>)
 800990a:	f640 0283 	movw	r2, #2179	; 0x883
 800990e:	493e      	ldr	r1, [pc, #248]	; (8009a08 <tcp_pcb_remove+0x110>)
 8009910:	483e      	ldr	r0, [pc, #248]	; (8009a0c <tcp_pcb_remove+0x114>)
 8009912:	f007 fa4d 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <tcp_pcb_remove+0x32>
 800991c:	4b39      	ldr	r3, [pc, #228]	; (8009a04 <tcp_pcb_remove+0x10c>)
 800991e:	f640 0284 	movw	r2, #2180	; 0x884
 8009922:	493b      	ldr	r1, [pc, #236]	; (8009a10 <tcp_pcb_remove+0x118>)
 8009924:	4839      	ldr	r0, [pc, #228]	; (8009a0c <tcp_pcb_remove+0x114>)
 8009926:	f007 fa43 	bl	8010db0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	429a      	cmp	r2, r3
 8009932:	d105      	bne.n	8009940 <tcp_pcb_remove+0x48>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e013      	b.n	8009968 <tcp_pcb_remove+0x70>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e00c      	b.n	8009962 <tcp_pcb_remove+0x6a>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d104      	bne.n	800995c <tcp_pcb_remove+0x64>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	e005      	b.n	8009968 <tcp_pcb_remove+0x70>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1ef      	bne.n	8009948 <tcp_pcb_remove+0x50>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2200      	movs	r2, #0
 800996c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800996e:	6838      	ldr	r0, [r7, #0]
 8009970:	f7ff ff72 	bl	8009858 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	7d1b      	ldrb	r3, [r3, #20]
 8009978:	2b0a      	cmp	r3, #10
 800997a:	d013      	beq.n	80099a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009980:	2b01      	cmp	r3, #1
 8009982:	d00f      	beq.n	80099a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	8b5b      	ldrh	r3, [r3, #26]
 8009988:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	8b5b      	ldrh	r3, [r3, #26]
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	b29a      	uxth	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800999e:	6838      	ldr	r0, [r7, #0]
 80099a0:	f003 fbc6 	bl	800d130 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	7d1b      	ldrb	r3, [r3, #20]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d020      	beq.n	80099ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d006      	beq.n	80099c2 <tcp_pcb_remove+0xca>
 80099b4:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <tcp_pcb_remove+0x10c>)
 80099b6:	f640 0293 	movw	r2, #2195	; 0x893
 80099ba:	4916      	ldr	r1, [pc, #88]	; (8009a14 <tcp_pcb_remove+0x11c>)
 80099bc:	4813      	ldr	r0, [pc, #76]	; (8009a0c <tcp_pcb_remove+0x114>)
 80099be:	f007 f9f7 	bl	8010db0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d006      	beq.n	80099d8 <tcp_pcb_remove+0xe0>
 80099ca:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <tcp_pcb_remove+0x10c>)
 80099cc:	f640 0294 	movw	r2, #2196	; 0x894
 80099d0:	4911      	ldr	r1, [pc, #68]	; (8009a18 <tcp_pcb_remove+0x120>)
 80099d2:	480e      	ldr	r0, [pc, #56]	; (8009a0c <tcp_pcb_remove+0x114>)
 80099d4:	f007 f9ec 	bl	8010db0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d006      	beq.n	80099ee <tcp_pcb_remove+0xf6>
 80099e0:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <tcp_pcb_remove+0x10c>)
 80099e2:	f640 0296 	movw	r2, #2198	; 0x896
 80099e6:	490d      	ldr	r1, [pc, #52]	; (8009a1c <tcp_pcb_remove+0x124>)
 80099e8:	4808      	ldr	r0, [pc, #32]	; (8009a0c <tcp_pcb_remove+0x114>)
 80099ea:	f007 f9e1 	bl	8010db0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2200      	movs	r2, #0
 80099f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	08012914 	.word	0x08012914
 8009a08:	08012f7c 	.word	0x08012f7c
 8009a0c:	08012958 	.word	0x08012958
 8009a10:	08012f98 	.word	0x08012f98
 8009a14:	08012fb8 	.word	0x08012fb8
 8009a18:	08012fd0 	.word	0x08012fd0
 8009a1c:	08012fec 	.word	0x08012fec

08009a20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <tcp_next_iss+0x1c>
 8009a2e:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <tcp_next_iss+0x38>)
 8009a30:	f640 02af 	movw	r2, #2223	; 0x8af
 8009a34:	4909      	ldr	r1, [pc, #36]	; (8009a5c <tcp_next_iss+0x3c>)
 8009a36:	480a      	ldr	r0, [pc, #40]	; (8009a60 <tcp_next_iss+0x40>)
 8009a38:	f007 f9ba 	bl	8010db0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <tcp_next_iss+0x44>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <tcp_next_iss+0x48>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4413      	add	r3, r2
 8009a46:	4a07      	ldr	r2, [pc, #28]	; (8009a64 <tcp_next_iss+0x44>)
 8009a48:	6013      	str	r3, [r2, #0]
  return iss;
 8009a4a:	4b06      	ldr	r3, [pc, #24]	; (8009a64 <tcp_next_iss+0x44>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	08012914 	.word	0x08012914
 8009a5c:	08013004 	.word	0x08013004
 8009a60:	08012958 	.word	0x08012958
 8009a64:	20000024 	.word	0x20000024
 8009a68:	20008c10 	.word	0x20008c10

08009a6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <tcp_eff_send_mss_netif+0x22>
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <tcp_eff_send_mss_netif+0x68>)
 8009a82:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009a86:	4914      	ldr	r1, [pc, #80]	; (8009ad8 <tcp_eff_send_mss_netif+0x6c>)
 8009a88:	4814      	ldr	r0, [pc, #80]	; (8009adc <tcp_eff_send_mss_netif+0x70>)
 8009a8a:	f007 f991 	bl	8010db0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009a94:	89fb      	ldrh	r3, [r7, #14]
 8009a96:	e019      	b.n	8009acc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009a9e:	8afb      	ldrh	r3, [r7, #22]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d012      	beq.n	8009aca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009aa4:	2328      	movs	r3, #40	; 0x28
 8009aa6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009aa8:	8afa      	ldrh	r2, [r7, #22]
 8009aaa:	8abb      	ldrh	r3, [r7, #20]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d904      	bls.n	8009aba <tcp_eff_send_mss_netif+0x4e>
 8009ab0:	8afa      	ldrh	r2, [r7, #22]
 8009ab2:	8abb      	ldrh	r3, [r7, #20]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	e000      	b.n	8009abc <tcp_eff_send_mss_netif+0x50>
 8009aba:	2300      	movs	r3, #0
 8009abc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009abe:	8a7a      	ldrh	r2, [r7, #18]
 8009ac0:	89fb      	ldrh	r3, [r7, #14]
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	bf28      	it	cs
 8009ac6:	4613      	movcs	r3, r2
 8009ac8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009aca:	89fb      	ldrh	r3, [r7, #14]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	08012914 	.word	0x08012914
 8009ad8:	08013020 	.word	0x08013020
 8009adc:	08012958 	.word	0x08012958

08009ae0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d119      	bne.n	8009b28 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009af4:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009af6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009afa:	4910      	ldr	r1, [pc, #64]	; (8009b3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009afc:	4810      	ldr	r0, [pc, #64]	; (8009b40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009afe:	f007 f957 	bl	8010db0 <iprintf>

  while (pcb != NULL) {
 8009b02:	e011      	b.n	8009b28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d108      	bne.n	8009b22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fe fd20 	bl	800855c <tcp_abort>
      pcb = next;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	e002      	b.n	8009b28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1ea      	bne.n	8009b04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	08012914 	.word	0x08012914
 8009b3c:	08013048 	.word	0x08013048
 8009b40:	08012958 	.word	0x08012958

08009b44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d02a      	beq.n	8009baa <tcp_netif_ip_addr_changed+0x66>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d026      	beq.n	8009baa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009b5c:	4b15      	ldr	r3, [pc, #84]	; (8009bb4 <tcp_netif_ip_addr_changed+0x70>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ffbc 	bl	8009ae0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009b68:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <tcp_netif_ip_addr_changed+0x74>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff ffb6 	bl	8009ae0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d017      	beq.n	8009baa <tcp_netif_ip_addr_changed+0x66>
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d013      	beq.n	8009baa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b82:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <tcp_netif_ip_addr_changed+0x78>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	e00c      	b.n	8009ba4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d103      	bne.n	8009b9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1ef      	bne.n	8009b8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20008c1c 	.word	0x20008c1c
 8009bb8:	20008c14 	.word	0x20008c14
 8009bbc:	20008c18 	.word	0x20008c18

08009bc0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff fb51 	bl	800927c <tcp_segs_free>
    pcb->ooseq = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b08d      	sub	sp, #52	; 0x34
 8009bec:	af04      	add	r7, sp, #16
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <tcp_input+0x1c>
 8009bf8:	4b9b      	ldr	r3, [pc, #620]	; (8009e68 <tcp_input+0x280>)
 8009bfa:	2283      	movs	r2, #131	; 0x83
 8009bfc:	499b      	ldr	r1, [pc, #620]	; (8009e6c <tcp_input+0x284>)
 8009bfe:	489c      	ldr	r0, [pc, #624]	; (8009e70 <tcp_input+0x288>)
 8009c00:	f007 f8d6 	bl	8010db0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a9a      	ldr	r2, [pc, #616]	; (8009e74 <tcp_input+0x28c>)
 8009c0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	895b      	ldrh	r3, [r3, #10]
 8009c10:	2b13      	cmp	r3, #19
 8009c12:	f240 83d1 	bls.w	800a3b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c16:	4b98      	ldr	r3, [pc, #608]	; (8009e78 <tcp_input+0x290>)
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	4a97      	ldr	r2, [pc, #604]	; (8009e78 <tcp_input+0x290>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f006 f86f 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 83c7 	bne.w	800a3bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009c2e:	4b92      	ldr	r3, [pc, #584]	; (8009e78 <tcp_input+0x290>)
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c36:	2be0      	cmp	r3, #224	; 0xe0
 8009c38:	f000 83c0 	beq.w	800a3bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009c3c:	4b8d      	ldr	r3, [pc, #564]	; (8009e74 <tcp_input+0x28c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	899b      	ldrh	r3, [r3, #12]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fc fb6d 	bl	8006324 <lwip_htons>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	0b1b      	lsrs	r3, r3, #12
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009c56:	7cbb      	ldrb	r3, [r7, #18]
 8009c58:	2b13      	cmp	r3, #19
 8009c5a:	f240 83b1 	bls.w	800a3c0 <tcp_input+0x7d8>
 8009c5e:	7cbb      	ldrb	r3, [r7, #18]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	891b      	ldrh	r3, [r3, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	f200 83aa 	bhi.w	800a3c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009c6c:	7cbb      	ldrb	r3, [r7, #18]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	3b14      	subs	r3, #20
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	4b81      	ldr	r3, [pc, #516]	; (8009e7c <tcp_input+0x294>)
 8009c76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009c78:	4b81      	ldr	r3, [pc, #516]	; (8009e80 <tcp_input+0x298>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	895a      	ldrh	r2, [r3, #10]
 8009c82:	7cbb      	ldrb	r3, [r7, #18]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d309      	bcc.n	8009c9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009c8a:	4b7c      	ldr	r3, [pc, #496]	; (8009e7c <tcp_input+0x294>)
 8009c8c:	881a      	ldrh	r2, [r3, #0]
 8009c8e:	4b7d      	ldr	r3, [pc, #500]	; (8009e84 <tcp_input+0x29c>)
 8009c90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009c92:	7cbb      	ldrb	r3, [r7, #18]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fd fe52 	bl	8007940 <pbuf_remove_header>
 8009c9c:	e04e      	b.n	8009d3c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <tcp_input+0xca>
 8009ca6:	4b70      	ldr	r3, [pc, #448]	; (8009e68 <tcp_input+0x280>)
 8009ca8:	22c2      	movs	r2, #194	; 0xc2
 8009caa:	4977      	ldr	r1, [pc, #476]	; (8009e88 <tcp_input+0x2a0>)
 8009cac:	4870      	ldr	r0, [pc, #448]	; (8009e70 <tcp_input+0x288>)
 8009cae:	f007 f87f 	bl	8010db0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009cb2:	2114      	movs	r1, #20
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7fd fe43 	bl	8007940 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	895a      	ldrh	r2, [r3, #10]
 8009cbe:	4b71      	ldr	r3, [pc, #452]	; (8009e84 <tcp_input+0x29c>)
 8009cc0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009cc2:	4b6e      	ldr	r3, [pc, #440]	; (8009e7c <tcp_input+0x294>)
 8009cc4:	881a      	ldrh	r2, [r3, #0]
 8009cc6:	4b6f      	ldr	r3, [pc, #444]	; (8009e84 <tcp_input+0x29c>)
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009cce:	4b6d      	ldr	r3, [pc, #436]	; (8009e84 <tcp_input+0x29c>)
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7fd fe33 	bl	8007940 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	895b      	ldrh	r3, [r3, #10]
 8009ce0:	8a3a      	ldrh	r2, [r7, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	f200 836e 	bhi.w	800a3c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	4a64      	ldr	r2, [pc, #400]	; (8009e80 <tcp_input+0x298>)
 8009cf0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	8a3a      	ldrh	r2, [r7, #16]
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fd fe20 	bl	8007940 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	891a      	ldrh	r2, [r3, #8]
 8009d04:	8a3b      	ldrh	r3, [r7, #16]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	895b      	ldrh	r3, [r3, #10]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <tcp_input+0x13a>
 8009d16:	4b54      	ldr	r3, [pc, #336]	; (8009e68 <tcp_input+0x280>)
 8009d18:	22df      	movs	r2, #223	; 0xdf
 8009d1a:	495c      	ldr	r1, [pc, #368]	; (8009e8c <tcp_input+0x2a4>)
 8009d1c:	4854      	ldr	r0, [pc, #336]	; (8009e70 <tcp_input+0x288>)
 8009d1e:	f007 f847 	bl	8010db0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	891a      	ldrh	r2, [r3, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	891b      	ldrh	r3, [r3, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d005      	beq.n	8009d3c <tcp_input+0x154>
 8009d30:	4b4d      	ldr	r3, [pc, #308]	; (8009e68 <tcp_input+0x280>)
 8009d32:	22e0      	movs	r2, #224	; 0xe0
 8009d34:	4956      	ldr	r1, [pc, #344]	; (8009e90 <tcp_input+0x2a8>)
 8009d36:	484e      	ldr	r0, [pc, #312]	; (8009e70 <tcp_input+0x288>)
 8009d38:	f007 f83a 	bl	8010db0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009d3c:	4b4d      	ldr	r3, [pc, #308]	; (8009e74 <tcp_input+0x28c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	4a4b      	ldr	r2, [pc, #300]	; (8009e74 <tcp_input+0x28c>)
 8009d46:	6814      	ldr	r4, [r2, #0]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fc faeb 	bl	8006324 <lwip_htons>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009d52:	4b48      	ldr	r3, [pc, #288]	; (8009e74 <tcp_input+0x28c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4a46      	ldr	r2, [pc, #280]	; (8009e74 <tcp_input+0x28c>)
 8009d5c:	6814      	ldr	r4, [r2, #0]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fc fae0 	bl	8006324 <lwip_htons>
 8009d64:	4603      	mov	r3, r0
 8009d66:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009d68:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <tcp_input+0x28c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	4a41      	ldr	r2, [pc, #260]	; (8009e74 <tcp_input+0x28c>)
 8009d70:	6814      	ldr	r4, [r2, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fc faeb 	bl	800634e <lwip_htonl>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	6063      	str	r3, [r4, #4]
 8009d7c:	6863      	ldr	r3, [r4, #4]
 8009d7e:	4a45      	ldr	r2, [pc, #276]	; (8009e94 <tcp_input+0x2ac>)
 8009d80:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009d82:	4b3c      	ldr	r3, [pc, #240]	; (8009e74 <tcp_input+0x28c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	4a3a      	ldr	r2, [pc, #232]	; (8009e74 <tcp_input+0x28c>)
 8009d8a:	6814      	ldr	r4, [r2, #0]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fc fade 	bl	800634e <lwip_htonl>
 8009d92:	4603      	mov	r3, r0
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	4a3f      	ldr	r2, [pc, #252]	; (8009e98 <tcp_input+0x2b0>)
 8009d9a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009d9c:	4b35      	ldr	r3, [pc, #212]	; (8009e74 <tcp_input+0x28c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	89db      	ldrh	r3, [r3, #14]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4a33      	ldr	r2, [pc, #204]	; (8009e74 <tcp_input+0x28c>)
 8009da6:	6814      	ldr	r4, [r2, #0]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fc fabb 	bl	8006324 <lwip_htons>
 8009dae:	4603      	mov	r3, r0
 8009db0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009db2:	4b30      	ldr	r3, [pc, #192]	; (8009e74 <tcp_input+0x28c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	899b      	ldrh	r3, [r3, #12]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fc fab2 	bl	8006324 <lwip_htons>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	4b34      	ldr	r3, [pc, #208]	; (8009e9c <tcp_input+0x2b4>)
 8009dcc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	891a      	ldrh	r2, [r3, #8]
 8009dd2:	4b33      	ldr	r3, [pc, #204]	; (8009ea0 <tcp_input+0x2b8>)
 8009dd4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009dd6:	4b31      	ldr	r3, [pc, #196]	; (8009e9c <tcp_input+0x2b4>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00c      	beq.n	8009dfc <tcp_input+0x214>
    tcplen++;
 8009de2:	4b2f      	ldr	r3, [pc, #188]	; (8009ea0 <tcp_input+0x2b8>)
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	4b2d      	ldr	r3, [pc, #180]	; (8009ea0 <tcp_input+0x2b8>)
 8009dec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	891a      	ldrh	r2, [r3, #8]
 8009df2:	4b2b      	ldr	r3, [pc, #172]	; (8009ea0 <tcp_input+0x2b8>)
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f200 82e6 	bhi.w	800a3c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e00:	4b28      	ldr	r3, [pc, #160]	; (8009ea4 <tcp_input+0x2bc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	e09d      	b.n	8009f44 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d105      	bne.n	8009e1c <tcp_input+0x234>
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <tcp_input+0x280>)
 8009e12:	22fb      	movs	r2, #251	; 0xfb
 8009e14:	4924      	ldr	r1, [pc, #144]	; (8009ea8 <tcp_input+0x2c0>)
 8009e16:	4816      	ldr	r0, [pc, #88]	; (8009e70 <tcp_input+0x288>)
 8009e18:	f006 ffca 	bl	8010db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	7d1b      	ldrb	r3, [r3, #20]
 8009e20:	2b0a      	cmp	r3, #10
 8009e22:	d105      	bne.n	8009e30 <tcp_input+0x248>
 8009e24:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <tcp_input+0x280>)
 8009e26:	22fc      	movs	r2, #252	; 0xfc
 8009e28:	4920      	ldr	r1, [pc, #128]	; (8009eac <tcp_input+0x2c4>)
 8009e2a:	4811      	ldr	r0, [pc, #68]	; (8009e70 <tcp_input+0x288>)
 8009e2c:	f006 ffc0 	bl	8010db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	7d1b      	ldrb	r3, [r3, #20]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d105      	bne.n	8009e44 <tcp_input+0x25c>
 8009e38:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <tcp_input+0x280>)
 8009e3a:	22fd      	movs	r2, #253	; 0xfd
 8009e3c:	491c      	ldr	r1, [pc, #112]	; (8009eb0 <tcp_input+0x2c8>)
 8009e3e:	480c      	ldr	r0, [pc, #48]	; (8009e70 <tcp_input+0x288>)
 8009e40:	f006 ffb6 	bl	8010db0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	7a1b      	ldrb	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d033      	beq.n	8009eb4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	7a1a      	ldrb	r2, [r3, #8]
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <tcp_input+0x290>)
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e58:	3301      	adds	r3, #1
 8009e5a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d029      	beq.n	8009eb4 <tcp_input+0x2cc>
      prev = pcb;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	61bb      	str	r3, [r7, #24]
      continue;
 8009e64:	e06b      	b.n	8009f3e <tcp_input+0x356>
 8009e66:	bf00      	nop
 8009e68:	0801307c 	.word	0x0801307c
 8009e6c:	080130b0 	.word	0x080130b0
 8009e70:	080130c8 	.word	0x080130c8
 8009e74:	20008c38 	.word	0x20008c38
 8009e78:	200056a0 	.word	0x200056a0
 8009e7c:	20008c3c 	.word	0x20008c3c
 8009e80:	20008c40 	.word	0x20008c40
 8009e84:	20008c3e 	.word	0x20008c3e
 8009e88:	080130f0 	.word	0x080130f0
 8009e8c:	08013100 	.word	0x08013100
 8009e90:	0801310c 	.word	0x0801310c
 8009e94:	20008c48 	.word	0x20008c48
 8009e98:	20008c4c 	.word	0x20008c4c
 8009e9c:	20008c54 	.word	0x20008c54
 8009ea0:	20008c52 	.word	0x20008c52
 8009ea4:	20008c1c 	.word	0x20008c1c
 8009ea8:	0801312c 	.word	0x0801312c
 8009eac:	08013154 	.word	0x08013154
 8009eb0:	08013180 	.word	0x08013180
    }

    if (pcb->remote_port == tcphdr->src &&
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	8b1a      	ldrh	r2, [r3, #24]
 8009eb8:	4b72      	ldr	r3, [pc, #456]	; (800a084 <tcp_input+0x49c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d13a      	bne.n	8009f3a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	8ada      	ldrh	r2, [r3, #22]
 8009ec8:	4b6e      	ldr	r3, [pc, #440]	; (800a084 <tcp_input+0x49c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d132      	bne.n	8009f3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	4b6b      	ldr	r3, [pc, #428]	; (800a088 <tcp_input+0x4a0>)
 8009eda:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d12c      	bne.n	8009f3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4b68      	ldr	r3, [pc, #416]	; (800a088 <tcp_input+0x4a0>)
 8009ee6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d126      	bne.n	8009f3a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d106      	bne.n	8009f04 <tcp_input+0x31c>
 8009ef6:	4b65      	ldr	r3, [pc, #404]	; (800a08c <tcp_input+0x4a4>)
 8009ef8:	f240 120d 	movw	r2, #269	; 0x10d
 8009efc:	4964      	ldr	r1, [pc, #400]	; (800a090 <tcp_input+0x4a8>)
 8009efe:	4865      	ldr	r0, [pc, #404]	; (800a094 <tcp_input+0x4ac>)
 8009f00:	f006 ff56 	bl	8010db0 <iprintf>
      if (prev != NULL) {
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <tcp_input+0x338>
        prev->next = pcb->next;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009f12:	4b61      	ldr	r3, [pc, #388]	; (800a098 <tcp_input+0x4b0>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009f1a:	4a5f      	ldr	r2, [pc, #380]	; (800a098 <tcp_input+0x4b0>)
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	69fa      	ldr	r2, [r7, #28]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d111      	bne.n	8009f4e <tcp_input+0x366>
 8009f2a:	4b58      	ldr	r3, [pc, #352]	; (800a08c <tcp_input+0x4a4>)
 8009f2c:	f240 1215 	movw	r2, #277	; 0x115
 8009f30:	495a      	ldr	r1, [pc, #360]	; (800a09c <tcp_input+0x4b4>)
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <tcp_input+0x4ac>)
 8009f34:	f006 ff3c 	bl	8010db0 <iprintf>
      break;
 8009f38:	e009      	b.n	8009f4e <tcp_input+0x366>
    }
    prev = pcb;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f47f af5e 	bne.w	8009e08 <tcp_input+0x220>
 8009f4c:	e000      	b.n	8009f50 <tcp_input+0x368>
      break;
 8009f4e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 80aa 	bne.w	800a0ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f58:	4b51      	ldr	r3, [pc, #324]	; (800a0a0 <tcp_input+0x4b8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	61fb      	str	r3, [r7, #28]
 8009f5e:	e03f      	b.n	8009fe0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	7d1b      	ldrb	r3, [r3, #20]
 8009f64:	2b0a      	cmp	r3, #10
 8009f66:	d006      	beq.n	8009f76 <tcp_input+0x38e>
 8009f68:	4b48      	ldr	r3, [pc, #288]	; (800a08c <tcp_input+0x4a4>)
 8009f6a:	f240 121f 	movw	r2, #287	; 0x11f
 8009f6e:	494d      	ldr	r1, [pc, #308]	; (800a0a4 <tcp_input+0x4bc>)
 8009f70:	4848      	ldr	r0, [pc, #288]	; (800a094 <tcp_input+0x4ac>)
 8009f72:	f006 ff1d 	bl	8010db0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	7a1b      	ldrb	r3, [r3, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d009      	beq.n	8009f92 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	7a1a      	ldrb	r2, [r3, #8]
 8009f82:	4b41      	ldr	r3, [pc, #260]	; (800a088 <tcp_input+0x4a0>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d122      	bne.n	8009fd8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	8b1a      	ldrh	r2, [r3, #24]
 8009f96:	4b3b      	ldr	r3, [pc, #236]	; (800a084 <tcp_input+0x49c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d11b      	bne.n	8009fda <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	8ada      	ldrh	r2, [r3, #22]
 8009fa6:	4b37      	ldr	r3, [pc, #220]	; (800a084 <tcp_input+0x49c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	885b      	ldrh	r3, [r3, #2]
 8009fac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d113      	bne.n	8009fda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b34      	ldr	r3, [pc, #208]	; (800a088 <tcp_input+0x4a0>)
 8009fb8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d10d      	bne.n	8009fda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b31      	ldr	r3, [pc, #196]	; (800a088 <tcp_input+0x4a0>)
 8009fc4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d107      	bne.n	8009fda <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009fca:	69f8      	ldr	r0, [r7, #28]
 8009fcc:	f000 fb56 	bl	800a67c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fd fd3b 	bl	8007a4c <pbuf_free>
        return;
 8009fd6:	e1fd      	b.n	800a3d4 <tcp_input+0x7ec>
        continue;
 8009fd8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	61fb      	str	r3, [r7, #28]
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1bc      	bne.n	8009f60 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009fea:	4b2f      	ldr	r3, [pc, #188]	; (800a0a8 <tcp_input+0x4c0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e02a      	b.n	800a048 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	7a1b      	ldrb	r3, [r3, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00c      	beq.n	800a014 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	7a1a      	ldrb	r2, [r3, #8]
 8009ffe:	4b22      	ldr	r3, [pc, #136]	; (800a088 <tcp_input+0x4a0>)
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a006:	3301      	adds	r3, #1
 800a008:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d002      	beq.n	800a014 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	61bb      	str	r3, [r7, #24]
        continue;
 800a012:	e016      	b.n	800a042 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	8ada      	ldrh	r2, [r3, #22]
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <tcp_input+0x49c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	429a      	cmp	r2, r3
 800a022:	d10c      	bne.n	800a03e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	4b17      	ldr	r3, [pc, #92]	; (800a088 <tcp_input+0x4a0>)
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d00f      	beq.n	800a050 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00d      	beq.n	800a052 <tcp_input+0x46a>
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1d1      	bne.n	8009ff2 <tcp_input+0x40a>
 800a04e:	e000      	b.n	800a052 <tcp_input+0x46a>
            break;
 800a050:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d029      	beq.n	800a0ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a066:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <tcp_input+0x4c0>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a06e:	4a0e      	ldr	r2, [pc, #56]	; (800a0a8 <tcp_input+0x4c0>)
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a074:	6978      	ldr	r0, [r7, #20]
 800a076:	f000 fa03 	bl	800a480 <tcp_listen_input>
      }
      pbuf_free(p);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fd fce6 	bl	8007a4c <pbuf_free>
      return;
 800a080:	e1a8      	b.n	800a3d4 <tcp_input+0x7ec>
 800a082:	bf00      	nop
 800a084:	20008c38 	.word	0x20008c38
 800a088:	200056a0 	.word	0x200056a0
 800a08c:	0801307c 	.word	0x0801307c
 800a090:	080131a8 	.word	0x080131a8
 800a094:	080130c8 	.word	0x080130c8
 800a098:	20008c1c 	.word	0x20008c1c
 800a09c:	080131d4 	.word	0x080131d4
 800a0a0:	20008c20 	.word	0x20008c20
 800a0a4:	08013200 	.word	0x08013200
 800a0a8:	20008c18 	.word	0x20008c18
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8158 	beq.w	800a364 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a0b4:	4b95      	ldr	r3, [pc, #596]	; (800a30c <tcp_input+0x724>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	891a      	ldrh	r2, [r3, #8]
 800a0be:	4b93      	ldr	r3, [pc, #588]	; (800a30c <tcp_input+0x724>)
 800a0c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a0c2:	4a92      	ldr	r2, [pc, #584]	; (800a30c <tcp_input+0x724>)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a0c8:	4b91      	ldr	r3, [pc, #580]	; (800a310 <tcp_input+0x728>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a8f      	ldr	r2, [pc, #572]	; (800a30c <tcp_input+0x724>)
 800a0ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a0d0:	4b90      	ldr	r3, [pc, #576]	; (800a314 <tcp_input+0x72c>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a0d6:	4b90      	ldr	r3, [pc, #576]	; (800a318 <tcp_input+0x730>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a0dc:	4b8f      	ldr	r3, [pc, #572]	; (800a31c <tcp_input+0x734>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a0e2:	4b8f      	ldr	r3, [pc, #572]	; (800a320 <tcp_input+0x738>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d006      	beq.n	800a0fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	7b5b      	ldrb	r3, [r3, #13]
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a100:	2b00      	cmp	r3, #0
 800a102:	d017      	beq.n	800a134 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a104:	69f8      	ldr	r0, [r7, #28]
 800a106:	f7ff f83d 	bl	8009184 <tcp_process_refused_data>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f113 0f0d 	cmn.w	r3, #13
 800a110:	d007      	beq.n	800a122 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00c      	beq.n	800a134 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a11a:	4b82      	ldr	r3, [pc, #520]	; (800a324 <tcp_input+0x73c>)
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a126:	2b00      	cmp	r3, #0
 800a128:	f040 80e3 	bne.w	800a2f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a12c:	69f8      	ldr	r0, [r7, #28]
 800a12e:	f003 fe05 	bl	800dd3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a132:	e0de      	b.n	800a2f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a134:	4a7c      	ldr	r2, [pc, #496]	; (800a328 <tcp_input+0x740>)
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a13a:	69f8      	ldr	r0, [r7, #28]
 800a13c:	f000 fb18 	bl	800a770 <tcp_process>
 800a140:	4603      	mov	r3, r0
 800a142:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a144:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a148:	f113 0f0d 	cmn.w	r3, #13
 800a14c:	f000 80d3 	beq.w	800a2f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a150:	4b71      	ldr	r3, [pc, #452]	; (800a318 <tcp_input+0x730>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	f003 0308 	and.w	r3, r3, #8
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d015      	beq.n	800a188 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <tcp_input+0x590>
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	6912      	ldr	r2, [r2, #16]
 800a170:	f06f 010d 	mvn.w	r1, #13
 800a174:	4610      	mov	r0, r2
 800a176:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a178:	69f9      	ldr	r1, [r7, #28]
 800a17a:	486c      	ldr	r0, [pc, #432]	; (800a32c <tcp_input+0x744>)
 800a17c:	f7ff fbbc 	bl	80098f8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a180:	69f8      	ldr	r0, [r7, #28]
 800a182:	f7fd ff03 	bl	8007f8c <tcp_free>
 800a186:	e0da      	b.n	800a33e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a18c:	4b63      	ldr	r3, [pc, #396]	; (800a31c <tcp_input+0x734>)
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01d      	beq.n	800a1d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a194:	4b61      	ldr	r3, [pc, #388]	; (800a31c <tcp_input+0x734>)
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00a      	beq.n	800a1ba <tcp_input+0x5d2>
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	6910      	ldr	r0, [r2, #16]
 800a1ae:	89fa      	ldrh	r2, [r7, #14]
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	4798      	blx	r3
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	74fb      	strb	r3, [r7, #19]
 800a1b8:	e001      	b.n	800a1be <tcp_input+0x5d6>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a1be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1c2:	f113 0f0d 	cmn.w	r3, #13
 800a1c6:	f000 8098 	beq.w	800a2fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a1ca:	4b54      	ldr	r3, [pc, #336]	; (800a31c <tcp_input+0x734>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a1d0:	69f8      	ldr	r0, [r7, #28]
 800a1d2:	f000 f915 	bl	800a400 <tcp_input_delayed_close>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f040 8090 	bne.w	800a2fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a1de:	4b4d      	ldr	r3, [pc, #308]	; (800a314 <tcp_input+0x72c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d041      	beq.n	800a26a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d006      	beq.n	800a1fc <tcp_input+0x614>
 800a1ee:	4b50      	ldr	r3, [pc, #320]	; (800a330 <tcp_input+0x748>)
 800a1f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a1f4:	494f      	ldr	r1, [pc, #316]	; (800a334 <tcp_input+0x74c>)
 800a1f6:	4850      	ldr	r0, [pc, #320]	; (800a338 <tcp_input+0x750>)
 800a1f8:	f006 fdda 	bl	8010db0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	8b5b      	ldrh	r3, [r3, #26]
 800a200:	f003 0310 	and.w	r3, r3, #16
 800a204:	2b00      	cmp	r3, #0
 800a206:	d008      	beq.n	800a21a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a208:	4b42      	ldr	r3, [pc, #264]	; (800a314 <tcp_input+0x72c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd fc1d 	bl	8007a4c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a212:	69f8      	ldr	r0, [r7, #28]
 800a214:	f7fe f9a2 	bl	800855c <tcp_abort>
            goto aborted;
 800a218:	e091      	b.n	800a33e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00c      	beq.n	800a23e <tcp_input+0x656>
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	6918      	ldr	r0, [r3, #16]
 800a22e:	4b39      	ldr	r3, [pc, #228]	; (800a314 <tcp_input+0x72c>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	2300      	movs	r3, #0
 800a234:	69f9      	ldr	r1, [r7, #28]
 800a236:	47a0      	blx	r4
 800a238:	4603      	mov	r3, r0
 800a23a:	74fb      	strb	r3, [r7, #19]
 800a23c:	e008      	b.n	800a250 <tcp_input+0x668>
 800a23e:	4b35      	ldr	r3, [pc, #212]	; (800a314 <tcp_input+0x72c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	69f9      	ldr	r1, [r7, #28]
 800a246:	2000      	movs	r0, #0
 800a248:	f7ff f890 	bl	800936c <tcp_recv_null>
 800a24c:	4603      	mov	r3, r0
 800a24e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a254:	f113 0f0d 	cmn.w	r3, #13
 800a258:	d053      	beq.n	800a302 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a25a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a262:	4b2c      	ldr	r3, [pc, #176]	; (800a314 <tcp_input+0x72c>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a26a:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <tcp_input+0x730>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	f003 0320 	and.w	r3, r3, #32
 800a272:	2b00      	cmp	r3, #0
 800a274:	d030      	beq.n	800a2d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a282:	7b5a      	ldrb	r2, [r3, #13]
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a288:	f042 0220 	orr.w	r2, r2, #32
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	735a      	strb	r2, [r3, #13]
 800a290:	e022      	b.n	800a2d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a296:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a29a:	d005      	beq.n	800a2a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <tcp_input+0x6e2>
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	6918      	ldr	r0, [r3, #16]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2200      	movs	r2, #0
 800a2c0:	69f9      	ldr	r1, [r7, #28]
 800a2c2:	47a0      	blx	r4
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	74fb      	strb	r3, [r7, #19]
 800a2c8:	e001      	b.n	800a2ce <tcp_input+0x6e6>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a2ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2d2:	f113 0f0d 	cmn.w	r3, #13
 800a2d6:	d016      	beq.n	800a306 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a2d8:	4b13      	ldr	r3, [pc, #76]	; (800a328 <tcp_input+0x740>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a2de:	69f8      	ldr	r0, [r7, #28]
 800a2e0:	f000 f88e 	bl	800a400 <tcp_input_delayed_close>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d128      	bne.n	800a33c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a2ea:	69f8      	ldr	r0, [r7, #28]
 800a2ec:	f002 ff20 	bl	800d130 <tcp_output>
 800a2f0:	e025      	b.n	800a33e <tcp_input+0x756>
        goto aborted;
 800a2f2:	bf00      	nop
 800a2f4:	e023      	b.n	800a33e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a2f6:	bf00      	nop
 800a2f8:	e021      	b.n	800a33e <tcp_input+0x756>
              goto aborted;
 800a2fa:	bf00      	nop
 800a2fc:	e01f      	b.n	800a33e <tcp_input+0x756>
          goto aborted;
 800a2fe:	bf00      	nop
 800a300:	e01d      	b.n	800a33e <tcp_input+0x756>
            goto aborted;
 800a302:	bf00      	nop
 800a304:	e01b      	b.n	800a33e <tcp_input+0x756>
              goto aborted;
 800a306:	bf00      	nop
 800a308:	e019      	b.n	800a33e <tcp_input+0x756>
 800a30a:	bf00      	nop
 800a30c:	20008c28 	.word	0x20008c28
 800a310:	20008c38 	.word	0x20008c38
 800a314:	20008c58 	.word	0x20008c58
 800a318:	20008c55 	.word	0x20008c55
 800a31c:	20008c50 	.word	0x20008c50
 800a320:	20008c54 	.word	0x20008c54
 800a324:	20008c52 	.word	0x20008c52
 800a328:	20008c5c 	.word	0x20008c5c
 800a32c:	20008c1c 	.word	0x20008c1c
 800a330:	0801307c 	.word	0x0801307c
 800a334:	08013230 	.word	0x08013230
 800a338:	080130c8 	.word	0x080130c8
          goto aborted;
 800a33c:	bf00      	nop
    tcp_input_pcb = NULL;
 800a33e:	4b27      	ldr	r3, [pc, #156]	; (800a3dc <tcp_input+0x7f4>)
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a344:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <tcp_input+0x7f8>)
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a34a:	4b26      	ldr	r3, [pc, #152]	; (800a3e4 <tcp_input+0x7fc>)
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d03f      	beq.n	800a3d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a352:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <tcp_input+0x7fc>)
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	4618      	mov	r0, r3
 800a358:	f7fd fb78 	bl	8007a4c <pbuf_free>
      inseg.p = NULL;
 800a35c:	4b21      	ldr	r3, [pc, #132]	; (800a3e4 <tcp_input+0x7fc>)
 800a35e:	2200      	movs	r2, #0
 800a360:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a362:	e036      	b.n	800a3d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a364:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <tcp_input+0x800>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	899b      	ldrh	r3, [r3, #12]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fb ffd9 	bl	8006324 <lwip_htons>
 800a372:	4603      	mov	r3, r0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d118      	bne.n	800a3b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <tcp_input+0x804>)
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <tcp_input+0x808>)
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <tcp_input+0x80c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a38e:	4b16      	ldr	r3, [pc, #88]	; (800a3e8 <tcp_input+0x800>)
 800a390:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a392:	885b      	ldrh	r3, [r3, #2]
 800a394:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a396:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <tcp_input+0x800>)
 800a398:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a39a:	8812      	ldrh	r2, [r2, #0]
 800a39c:	b292      	uxth	r2, r2
 800a39e:	9202      	str	r2, [sp, #8]
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <tcp_input+0x810>)
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4b15      	ldr	r3, [pc, #84]	; (800a3fc <tcp_input+0x814>)
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f003 fc74 	bl	800dc98 <tcp_rst>
    pbuf_free(p);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7fd fb4b 	bl	8007a4c <pbuf_free>
  return;
 800a3b6:	e00c      	b.n	800a3d2 <tcp_input+0x7ea>
    goto dropped;
 800a3b8:	bf00      	nop
 800a3ba:	e006      	b.n	800a3ca <tcp_input+0x7e2>
    goto dropped;
 800a3bc:	bf00      	nop
 800a3be:	e004      	b.n	800a3ca <tcp_input+0x7e2>
    goto dropped;
 800a3c0:	bf00      	nop
 800a3c2:	e002      	b.n	800a3ca <tcp_input+0x7e2>
      goto dropped;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <tcp_input+0x7e2>
      goto dropped;
 800a3c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7fd fb3e 	bl	8007a4c <pbuf_free>
 800a3d0:	e000      	b.n	800a3d4 <tcp_input+0x7ec>
  return;
 800a3d2:	bf00      	nop
}
 800a3d4:	3724      	adds	r7, #36	; 0x24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20008c5c 	.word	0x20008c5c
 800a3e0:	20008c58 	.word	0x20008c58
 800a3e4:	20008c28 	.word	0x20008c28
 800a3e8:	20008c38 	.word	0x20008c38
 800a3ec:	20008c4c 	.word	0x20008c4c
 800a3f0:	20008c52 	.word	0x20008c52
 800a3f4:	20008c48 	.word	0x20008c48
 800a3f8:	200056b0 	.word	0x200056b0
 800a3fc:	200056b4 	.word	0x200056b4

0800a400 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <tcp_input_delayed_close+0x1c>
 800a40e:	4b17      	ldr	r3, [pc, #92]	; (800a46c <tcp_input_delayed_close+0x6c>)
 800a410:	f240 225a 	movw	r2, #602	; 0x25a
 800a414:	4916      	ldr	r1, [pc, #88]	; (800a470 <tcp_input_delayed_close+0x70>)
 800a416:	4817      	ldr	r0, [pc, #92]	; (800a474 <tcp_input_delayed_close+0x74>)
 800a418:	f006 fcca 	bl	8010db0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <tcp_input_delayed_close+0x78>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 0310 	and.w	r3, r3, #16
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01c      	beq.n	800a462 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	8b5b      	ldrh	r3, [r3, #26]
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10d      	bne.n	800a450 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d008      	beq.n	800a450 <tcp_input_delayed_close+0x50>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	6912      	ldr	r2, [r2, #16]
 800a448:	f06f 010e 	mvn.w	r1, #14
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	480a      	ldr	r0, [pc, #40]	; (800a47c <tcp_input_delayed_close+0x7c>)
 800a454:	f7ff fa50 	bl	80098f8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7fd fd97 	bl	8007f8c <tcp_free>
    return 1;
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	0801307c 	.word	0x0801307c
 800a470:	0801324c 	.word	0x0801324c
 800a474:	080130c8 	.word	0x080130c8
 800a478:	20008c55 	.word	0x20008c55
 800a47c:	20008c1c 	.word	0x20008c1c

0800a480 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b08b      	sub	sp, #44	; 0x2c
 800a484:	af04      	add	r7, sp, #16
 800a486:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a488:	4b6f      	ldr	r3, [pc, #444]	; (800a648 <tcp_listen_input+0x1c8>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	f040 80d2 	bne.w	800a63a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <tcp_listen_input+0x2a>
 800a49c:	4b6b      	ldr	r3, [pc, #428]	; (800a64c <tcp_listen_input+0x1cc>)
 800a49e:	f240 2281 	movw	r2, #641	; 0x281
 800a4a2:	496b      	ldr	r1, [pc, #428]	; (800a650 <tcp_listen_input+0x1d0>)
 800a4a4:	486b      	ldr	r0, [pc, #428]	; (800a654 <tcp_listen_input+0x1d4>)
 800a4a6:	f006 fc83 	bl	8010db0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a4aa:	4b67      	ldr	r3, [pc, #412]	; (800a648 <tcp_listen_input+0x1c8>)
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	f003 0310 	and.w	r3, r3, #16
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d019      	beq.n	800a4ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4b6:	4b68      	ldr	r3, [pc, #416]	; (800a658 <tcp_listen_input+0x1d8>)
 800a4b8:	6819      	ldr	r1, [r3, #0]
 800a4ba:	4b68      	ldr	r3, [pc, #416]	; (800a65c <tcp_listen_input+0x1dc>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4b67      	ldr	r3, [pc, #412]	; (800a660 <tcp_listen_input+0x1e0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4c6:	4b67      	ldr	r3, [pc, #412]	; (800a664 <tcp_listen_input+0x1e4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4ca:	885b      	ldrh	r3, [r3, #2]
 800a4cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4ce:	4a65      	ldr	r2, [pc, #404]	; (800a664 <tcp_listen_input+0x1e4>)
 800a4d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4d2:	8812      	ldrh	r2, [r2, #0]
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	9202      	str	r2, [sp, #8]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	4b63      	ldr	r3, [pc, #396]	; (800a668 <tcp_listen_input+0x1e8>)
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	4b63      	ldr	r3, [pc, #396]	; (800a66c <tcp_listen_input+0x1ec>)
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f003 fbd8 	bl	800dc98 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a4e8:	e0a9      	b.n	800a63e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a4ea:	4b57      	ldr	r3, [pc, #348]	; (800a648 <tcp_listen_input+0x1c8>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 80a3 	beq.w	800a63e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7d5b      	ldrb	r3, [r3, #21]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff f859 	bl	80095b4 <tcp_alloc>
 800a502:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d111      	bne.n	800a52e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <tcp_listen_input+0xa8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6910      	ldr	r0, [r2, #16]
 800a51a:	f04f 32ff 	mov.w	r2, #4294967295
 800a51e:	2100      	movs	r1, #0
 800a520:	4798      	blx	r3
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]
      return;
 800a526:	e08b      	b.n	800a640 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a528:	23f0      	movs	r3, #240	; 0xf0
 800a52a:	73bb      	strb	r3, [r7, #14]
      return;
 800a52c:	e088      	b.n	800a640 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a52e:	4b50      	ldr	r3, [pc, #320]	; (800a670 <tcp_listen_input+0x1f0>)
 800a530:	695a      	ldr	r2, [r3, #20]
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a536:	4b4e      	ldr	r3, [pc, #312]	; (800a670 <tcp_listen_input+0x1f0>)
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8ada      	ldrh	r2, [r3, #22]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a546:	4b47      	ldr	r3, [pc, #284]	; (800a664 <tcp_listen_input+0x1e4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2203      	movs	r2, #3
 800a556:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a558:	4b41      	ldr	r3, [pc, #260]	; (800a660 <tcp_listen_input+0x1e0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a56a:	6978      	ldr	r0, [r7, #20]
 800a56c:	f7ff fa58 	bl	8009a20 <tcp_next_iss>
 800a570:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a58a:	4b35      	ldr	r3, [pc, #212]	; (800a660 <tcp_listen_input+0x1e0>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691a      	ldr	r2, [r3, #16]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7a5b      	ldrb	r3, [r3, #9]
 800a5a6:	f003 030c 	and.w	r3, r3, #12
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7a1a      	ldrb	r2, [r3, #8]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a5b8:	4b2e      	ldr	r3, [pc, #184]	; (800a674 <tcp_listen_input+0x1f4>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	60da      	str	r2, [r3, #12]
 800a5c0:	4a2c      	ldr	r2, [pc, #176]	; (800a674 <tcp_listen_input+0x1f4>)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	f003 fd29 	bl	800e01c <tcp_timer_needed>
 800a5ca:	4b2b      	ldr	r3, [pc, #172]	; (800a678 <tcp_listen_input+0x1f8>)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a5d0:	6978      	ldr	r0, [r7, #20]
 800a5d2:	f001 fd8f 	bl	800c0f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a5d6:	4b23      	ldr	r3, [pc, #140]	; (800a664 <tcp_listen_input+0x1e4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	89db      	ldrh	r3, [r3, #14]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f005 f8ed 	bl	800f7d8 <ip4_route>
 800a5fe:	4601      	mov	r1, r0
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	3304      	adds	r3, #4
 800a604:	461a      	mov	r2, r3
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff fa30 	bl	8009a6c <tcp_eff_send_mss_netif>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a614:	2112      	movs	r1, #18
 800a616:	6978      	ldr	r0, [r7, #20]
 800a618:	f002 fc9c 	bl	800cf54 <tcp_enqueue_flags>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d004      	beq.n	800a632 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a628:	2100      	movs	r1, #0
 800a62a:	6978      	ldr	r0, [r7, #20]
 800a62c:	f7fd fed8 	bl	80083e0 <tcp_abandon>
      return;
 800a630:	e006      	b.n	800a640 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a632:	6978      	ldr	r0, [r7, #20]
 800a634:	f002 fd7c 	bl	800d130 <tcp_output>
  return;
 800a638:	e001      	b.n	800a63e <tcp_listen_input+0x1be>
    return;
 800a63a:	bf00      	nop
 800a63c:	e000      	b.n	800a640 <tcp_listen_input+0x1c0>
  return;
 800a63e:	bf00      	nop
}
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	bd90      	pop	{r4, r7, pc}
 800a646:	bf00      	nop
 800a648:	20008c54 	.word	0x20008c54
 800a64c:	0801307c 	.word	0x0801307c
 800a650:	08013274 	.word	0x08013274
 800a654:	080130c8 	.word	0x080130c8
 800a658:	20008c4c 	.word	0x20008c4c
 800a65c:	20008c52 	.word	0x20008c52
 800a660:	20008c48 	.word	0x20008c48
 800a664:	20008c38 	.word	0x20008c38
 800a668:	200056b0 	.word	0x200056b0
 800a66c:	200056b4 	.word	0x200056b4
 800a670:	200056a0 	.word	0x200056a0
 800a674:	20008c1c 	.word	0x20008c1c
 800a678:	20008c24 	.word	0x20008c24

0800a67c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af04      	add	r7, sp, #16
 800a682:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a684:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <tcp_timewait_input+0xc8>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d153      	bne.n	800a738 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <tcp_timewait_input+0x28>
 800a696:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <tcp_timewait_input+0xcc>)
 800a698:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a69c:	492b      	ldr	r1, [pc, #172]	; (800a74c <tcp_timewait_input+0xd0>)
 800a69e:	482c      	ldr	r0, [pc, #176]	; (800a750 <tcp_timewait_input+0xd4>)
 800a6a0:	f006 fb86 	bl	8010db0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a6a4:	4b27      	ldr	r3, [pc, #156]	; (800a744 <tcp_timewait_input+0xc8>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d02a      	beq.n	800a706 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a6b0:	4b28      	ldr	r3, [pc, #160]	; (800a754 <tcp_timewait_input+0xd8>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	db2d      	blt.n	800a71a <tcp_timewait_input+0x9e>
 800a6be:	4b25      	ldr	r3, [pc, #148]	; (800a754 <tcp_timewait_input+0xd8>)
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6ca:	440b      	add	r3, r1
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dc23      	bgt.n	800a71a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d2:	4b21      	ldr	r3, [pc, #132]	; (800a758 <tcp_timewait_input+0xdc>)
 800a6d4:	6819      	ldr	r1, [r3, #0]
 800a6d6:	4b21      	ldr	r3, [pc, #132]	; (800a75c <tcp_timewait_input+0xe0>)
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <tcp_timewait_input+0xd8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6e2:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <tcp_timewait_input+0xe4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6e6:	885b      	ldrh	r3, [r3, #2]
 800a6e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6ea:	4a1d      	ldr	r2, [pc, #116]	; (800a760 <tcp_timewait_input+0xe4>)
 800a6ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6ee:	8812      	ldrh	r2, [r2, #0]
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	9202      	str	r2, [sp, #8]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	4b1b      	ldr	r3, [pc, #108]	; (800a764 <tcp_timewait_input+0xe8>)
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <tcp_timewait_input+0xec>)
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f003 faca 	bl	800dc98 <tcp_rst>
      return;
 800a704:	e01b      	b.n	800a73e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a706:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <tcp_timewait_input+0xc8>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <tcp_timewait_input+0xf0>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a71a:	4b10      	ldr	r3, [pc, #64]	; (800a75c <tcp_timewait_input+0xe0>)
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8b5b      	ldrh	r3, [r3, #26]
 800a726:	f043 0302 	orr.w	r3, r3, #2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f002 fcfd 	bl	800d130 <tcp_output>
  }
  return;
 800a736:	e001      	b.n	800a73c <tcp_timewait_input+0xc0>
    return;
 800a738:	bf00      	nop
 800a73a:	e000      	b.n	800a73e <tcp_timewait_input+0xc2>
  return;
 800a73c:	bf00      	nop
}
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20008c54 	.word	0x20008c54
 800a748:	0801307c 	.word	0x0801307c
 800a74c:	08013294 	.word	0x08013294
 800a750:	080130c8 	.word	0x080130c8
 800a754:	20008c48 	.word	0x20008c48
 800a758:	20008c4c 	.word	0x20008c4c
 800a75c:	20008c52 	.word	0x20008c52
 800a760:	20008c38 	.word	0x20008c38
 800a764:	200056b0 	.word	0x200056b0
 800a768:	200056b4 	.word	0x200056b4
 800a76c:	20008c10 	.word	0x20008c10

0800a770 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b08d      	sub	sp, #52	; 0x34
 800a774:	af04      	add	r7, sp, #16
 800a776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <tcp_process+0x24>
 800a786:	4b9d      	ldr	r3, [pc, #628]	; (800a9fc <tcp_process+0x28c>)
 800a788:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a78c:	499c      	ldr	r1, [pc, #624]	; (800aa00 <tcp_process+0x290>)
 800a78e:	489d      	ldr	r0, [pc, #628]	; (800aa04 <tcp_process+0x294>)
 800a790:	f006 fb0e 	bl	8010db0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a794:	4b9c      	ldr	r3, [pc, #624]	; (800aa08 <tcp_process+0x298>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d04e      	beq.n	800a83e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7d1b      	ldrb	r3, [r3, #20]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d108      	bne.n	800a7ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7ac:	4b97      	ldr	r3, [pc, #604]	; (800aa0c <tcp_process+0x29c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d123      	bne.n	800a7fc <tcp_process+0x8c>
        acceptable = 1;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	76fb      	strb	r3, [r7, #27]
 800a7b8:	e020      	b.n	800a7fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7be:	4b94      	ldr	r3, [pc, #592]	; (800aa10 <tcp_process+0x2a0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d102      	bne.n	800a7cc <tcp_process+0x5c>
        acceptable = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	76fb      	strb	r3, [r7, #27]
 800a7ca:	e017      	b.n	800a7fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a7cc:	4b90      	ldr	r3, [pc, #576]	; (800aa10 <tcp_process+0x2a0>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	db10      	blt.n	800a7fc <tcp_process+0x8c>
 800a7da:	4b8d      	ldr	r3, [pc, #564]	; (800aa10 <tcp_process+0x2a0>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7e6:	440b      	add	r3, r1
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dc06      	bgt.n	800a7fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8b5b      	ldrh	r3, [r3, #26]
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a7fc:	7efb      	ldrb	r3, [r7, #27]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d01b      	beq.n	800a83a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7d1b      	ldrb	r3, [r3, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <tcp_process+0xa8>
 800a80a:	4b7c      	ldr	r3, [pc, #496]	; (800a9fc <tcp_process+0x28c>)
 800a80c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a810:	4980      	ldr	r1, [pc, #512]	; (800aa14 <tcp_process+0x2a4>)
 800a812:	487c      	ldr	r0, [pc, #496]	; (800aa04 <tcp_process+0x294>)
 800a814:	f006 facc 	bl	8010db0 <iprintf>
      recv_flags |= TF_RESET;
 800a818:	4b7f      	ldr	r3, [pc, #508]	; (800aa18 <tcp_process+0x2a8>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f043 0308 	orr.w	r3, r3, #8
 800a820:	b2da      	uxtb	r2, r3
 800a822:	4b7d      	ldr	r3, [pc, #500]	; (800aa18 <tcp_process+0x2a8>)
 800a824:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	8b5b      	ldrh	r3, [r3, #26]
 800a82a:	f023 0301 	bic.w	r3, r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a834:	f06f 030d 	mvn.w	r3, #13
 800a838:	e37a      	b.n	800af30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	e378      	b.n	800af30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a83e:	4b72      	ldr	r3, [pc, #456]	; (800aa08 <tcp_process+0x298>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b00      	cmp	r3, #0
 800a848:	d010      	beq.n	800a86c <tcp_process+0xfc>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7d1b      	ldrb	r3, [r3, #20]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d00c      	beq.n	800a86c <tcp_process+0xfc>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	7d1b      	ldrb	r3, [r3, #20]
 800a856:	2b03      	cmp	r3, #3
 800a858:	d008      	beq.n	800a86c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	8b5b      	ldrh	r3, [r3, #26]
 800a85e:	f043 0302 	orr.w	r3, r3, #2
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	e361      	b.n	800af30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	8b5b      	ldrh	r3, [r3, #26]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	d103      	bne.n	800a880 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a878:	4b68      	ldr	r3, [pc, #416]	; (800aa1c <tcp_process+0x2ac>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fc2f 	bl	800c0f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7d1b      	ldrb	r3, [r3, #20]
 800a89a:	3b02      	subs	r3, #2
 800a89c:	2b07      	cmp	r3, #7
 800a89e:	f200 8337 	bhi.w	800af10 <tcp_process+0x7a0>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <tcp_process+0x138>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8c9 	.word	0x0800a8c9
 800a8ac:	0800aaf9 	.word	0x0800aaf9
 800a8b0:	0800ac71 	.word	0x0800ac71
 800a8b4:	0800ac9b 	.word	0x0800ac9b
 800a8b8:	0800adbf 	.word	0x0800adbf
 800a8bc:	0800ac71 	.word	0x0800ac71
 800a8c0:	0800ae4b 	.word	0x0800ae4b
 800a8c4:	0800aedb 	.word	0x0800aedb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a8c8:	4b4f      	ldr	r3, [pc, #316]	; (800aa08 <tcp_process+0x298>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80e4 	beq.w	800aa9e <tcp_process+0x32e>
 800a8d6:	4b4c      	ldr	r3, [pc, #304]	; (800aa08 <tcp_process+0x298>)
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 80dd 	beq.w	800aa9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	4b48      	ldr	r3, [pc, #288]	; (800aa0c <tcp_process+0x29c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	f040 80d5 	bne.w	800aa9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a8f4:	4b46      	ldr	r3, [pc, #280]	; (800aa10 <tcp_process+0x2a0>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a906:	4b41      	ldr	r3, [pc, #260]	; (800aa0c <tcp_process+0x29c>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a90e:	4b44      	ldr	r3, [pc, #272]	; (800aa20 <tcp_process+0x2b0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	89db      	ldrh	r3, [r3, #14]
 800a914:	b29a      	uxth	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a928:	4b39      	ldr	r3, [pc, #228]	; (800aa10 <tcp_process+0x2a0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	1e5a      	subs	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2204      	movs	r2, #4
 800a936:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3304      	adds	r3, #4
 800a940:	4618      	mov	r0, r3
 800a942:	f004 ff49 	bl	800f7d8 <ip4_route>
 800a946:	4601      	mov	r1, r0
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	461a      	mov	r2, r3
 800a94e:	4620      	mov	r0, r4
 800a950:	f7ff f88c 	bl	8009a6c <tcp_eff_send_mss_netif>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a960:	009a      	lsls	r2, r3, #2
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	f241 111c 	movw	r1, #4380	; 0x111c
 800a96c:	428b      	cmp	r3, r1
 800a96e:	bf38      	it	cc
 800a970:	460b      	movcc	r3, r1
 800a972:	429a      	cmp	r2, r3
 800a974:	d204      	bcs.n	800a980 <tcp_process+0x210>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	e00d      	b.n	800a99c <tcp_process+0x22c>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	f241 121c 	movw	r2, #4380	; 0x111c
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d904      	bls.n	800a998 <tcp_process+0x228>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	b29b      	uxth	r3, r3
 800a996:	e001      	b.n	800a99c <tcp_process+0x22c>
 800a998:	f241 131c 	movw	r3, #4380	; 0x111c
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <tcp_process+0x24a>
 800a9ac:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <tcp_process+0x28c>)
 800a9ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a9b2:	491c      	ldr	r1, [pc, #112]	; (800aa24 <tcp_process+0x2b4>)
 800a9b4:	4813      	ldr	r0, [pc, #76]	; (800aa04 <tcp_process+0x294>)
 800a9b6:	f006 f9fb 	bl	8010db0 <iprintf>
        --pcb->snd_queuelen;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d12a      	bne.n	800aa2c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d106      	bne.n	800a9f0 <tcp_process+0x280>
 800a9e2:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <tcp_process+0x28c>)
 800a9e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a9e8:	490f      	ldr	r1, [pc, #60]	; (800aa28 <tcp_process+0x2b8>)
 800a9ea:	4806      	ldr	r0, [pc, #24]	; (800aa04 <tcp_process+0x294>)
 800a9ec:	f006 f9e0 	bl	8010db0 <iprintf>
          pcb->unsent = rseg->next;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9f8:	e01c      	b.n	800aa34 <tcp_process+0x2c4>
 800a9fa:	bf00      	nop
 800a9fc:	0801307c 	.word	0x0801307c
 800aa00:	080132b4 	.word	0x080132b4
 800aa04:	080130c8 	.word	0x080130c8
 800aa08:	20008c54 	.word	0x20008c54
 800aa0c:	20008c4c 	.word	0x20008c4c
 800aa10:	20008c48 	.word	0x20008c48
 800aa14:	080132d0 	.word	0x080132d0
 800aa18:	20008c55 	.word	0x20008c55
 800aa1c:	20008c10 	.word	0x20008c10
 800aa20:	20008c38 	.word	0x20008c38
 800aa24:	080132f0 	.word	0x080132f0
 800aa28:	08013308 	.word	0x08013308
        } else {
          pcb->unacked = rseg->next;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800aa34:	69f8      	ldr	r0, [r7, #28]
 800aa36:	f7fe fc36 	bl	80092a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa48:	861a      	strh	r2, [r3, #48]	; 0x30
 800aa4a:	e006      	b.n	800aa5a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <tcp_process+0x30a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	6910      	ldr	r0, [r2, #16]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	4798      	blx	r3
 800aa74:	4603      	mov	r3, r0
 800aa76:	76bb      	strb	r3, [r7, #26]
 800aa78:	e001      	b.n	800aa7e <tcp_process+0x30e>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800aa7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa82:	f113 0f0d 	cmn.w	r3, #13
 800aa86:	d102      	bne.n	800aa8e <tcp_process+0x31e>
          return ERR_ABRT;
 800aa88:	f06f 030c 	mvn.w	r3, #12
 800aa8c:	e250      	b.n	800af30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8b5b      	ldrh	r3, [r3, #26]
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800aa9c:	e23a      	b.n	800af14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800aa9e:	4b98      	ldr	r3, [pc, #608]	; (800ad00 <tcp_process+0x590>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 8234 	beq.w	800af14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aaac:	4b95      	ldr	r3, [pc, #596]	; (800ad04 <tcp_process+0x594>)
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	4b95      	ldr	r3, [pc, #596]	; (800ad08 <tcp_process+0x598>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	4b95      	ldr	r3, [pc, #596]	; (800ad0c <tcp_process+0x59c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aabc:	4b94      	ldr	r3, [pc, #592]	; (800ad10 <tcp_process+0x5a0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aac0:	885b      	ldrh	r3, [r3, #2]
 800aac2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aac4:	4a92      	ldr	r2, [pc, #584]	; (800ad10 <tcp_process+0x5a0>)
 800aac6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aac8:	8812      	ldrh	r2, [r2, #0]
 800aaca:	b292      	uxth	r2, r2
 800aacc:	9202      	str	r2, [sp, #8]
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	4b90      	ldr	r3, [pc, #576]	; (800ad14 <tcp_process+0x5a4>)
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4b90      	ldr	r3, [pc, #576]	; (800ad18 <tcp_process+0x5a8>)
 800aad6:	4602      	mov	r2, r0
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f003 f8dd 	bl	800dc98 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aae4:	2b05      	cmp	r3, #5
 800aae6:	f200 8215 	bhi.w	800af14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f002 fea9 	bl	800d848 <tcp_rexmit_rto>
      break;
 800aaf6:	e20d      	b.n	800af14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800aaf8:	4b81      	ldr	r3, [pc, #516]	; (800ad00 <tcp_process+0x590>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f003 0310 	and.w	r3, r3, #16
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 80a1 	beq.w	800ac48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab06:	4b7f      	ldr	r3, [pc, #508]	; (800ad04 <tcp_process+0x594>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	3b01      	subs	r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	db7e      	blt.n	800ac14 <tcp_process+0x4a4>
 800ab16:	4b7b      	ldr	r3, [pc, #492]	; (800ad04 <tcp_process+0x594>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dc77      	bgt.n	800ac14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2204      	movs	r2, #4
 800ab28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d102      	bne.n	800ab38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ab32:	23fa      	movs	r3, #250	; 0xfa
 800ab34:	76bb      	strb	r3, [r7, #26]
 800ab36:	e01d      	b.n	800ab74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <tcp_process+0x3e0>
 800ab42:	4b76      	ldr	r3, [pc, #472]	; (800ad1c <tcp_process+0x5ac>)
 800ab44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ab48:	4975      	ldr	r1, [pc, #468]	; (800ad20 <tcp_process+0x5b0>)
 800ab4a:	4876      	ldr	r0, [pc, #472]	; (800ad24 <tcp_process+0x5b4>)
 800ab4c:	f006 f930 	bl	8010db0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <tcp_process+0x400>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6910      	ldr	r0, [r2, #16]
 800ab64:	2200      	movs	r2, #0
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4798      	blx	r3
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	76bb      	strb	r3, [r7, #26]
 800ab6e:	e001      	b.n	800ab74 <tcp_process+0x404>
 800ab70:	23f0      	movs	r3, #240	; 0xf0
 800ab72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ab74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00a      	beq.n	800ab92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ab7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab80:	f113 0f0d 	cmn.w	r3, #13
 800ab84:	d002      	beq.n	800ab8c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7fd fce8 	bl	800855c <tcp_abort>
            }
            return ERR_ABRT;
 800ab8c:	f06f 030c 	mvn.w	r3, #12
 800ab90:	e1ce      	b.n	800af30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fae0 	bl	800b158 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ab98:	4b63      	ldr	r3, [pc, #396]	; (800ad28 <tcp_process+0x5b8>)
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <tcp_process+0x43c>
            recv_acked--;
 800aba0:	4b61      	ldr	r3, [pc, #388]	; (800ad28 <tcp_process+0x5b8>)
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	4b5f      	ldr	r3, [pc, #380]	; (800ad28 <tcp_process+0x5b8>)
 800abaa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb0:	009a      	lsls	r2, r3, #2
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	f241 111c 	movw	r1, #4380	; 0x111c
 800abbc:	428b      	cmp	r3, r1
 800abbe:	bf38      	it	cc
 800abc0:	460b      	movcc	r3, r1
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d204      	bcs.n	800abd0 <tcp_process+0x460>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	b29b      	uxth	r3, r3
 800abce:	e00d      	b.n	800abec <tcp_process+0x47c>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	f241 121c 	movw	r2, #4380	; 0x111c
 800abda:	4293      	cmp	r3, r2
 800abdc:	d904      	bls.n	800abe8 <tcp_process+0x478>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	e001      	b.n	800abec <tcp_process+0x47c>
 800abe8:	f241 131c 	movw	r3, #4380	; 0x111c
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800abf2:	4b4e      	ldr	r3, [pc, #312]	; (800ad2c <tcp_process+0x5bc>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d037      	beq.n	800ac6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	8b5b      	ldrh	r3, [r3, #26]
 800ac02:	f043 0302 	orr.w	r3, r3, #2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2207      	movs	r2, #7
 800ac10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ac12:	e02c      	b.n	800ac6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac14:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <tcp_process+0x594>)
 800ac16:	6819      	ldr	r1, [r3, #0]
 800ac18:	4b3b      	ldr	r3, [pc, #236]	; (800ad08 <tcp_process+0x598>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b3b      	ldr	r3, [pc, #236]	; (800ad0c <tcp_process+0x59c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac24:	4b3a      	ldr	r3, [pc, #232]	; (800ad10 <tcp_process+0x5a0>)
 800ac26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac28:	885b      	ldrh	r3, [r3, #2]
 800ac2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac2c:	4a38      	ldr	r2, [pc, #224]	; (800ad10 <tcp_process+0x5a0>)
 800ac2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac30:	8812      	ldrh	r2, [r2, #0]
 800ac32:	b292      	uxth	r2, r2
 800ac34:	9202      	str	r2, [sp, #8]
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	4b36      	ldr	r3, [pc, #216]	; (800ad14 <tcp_process+0x5a4>)
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4b36      	ldr	r3, [pc, #216]	; (800ad18 <tcp_process+0x5a8>)
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f003 f829 	bl	800dc98 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ac46:	e167      	b.n	800af18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ac48:	4b2d      	ldr	r3, [pc, #180]	; (800ad00 <tcp_process+0x590>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8161 	beq.w	800af18 <tcp_process+0x7a8>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	4b2b      	ldr	r3, [pc, #172]	; (800ad0c <tcp_process+0x59c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	f040 8159 	bne.w	800af18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f002 fe10 	bl	800d88c <tcp_rexmit>
      break;
 800ac6c:	e154      	b.n	800af18 <tcp_process+0x7a8>
 800ac6e:	e153      	b.n	800af18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa71 	bl	800b158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ac76:	4b2d      	ldr	r3, [pc, #180]	; (800ad2c <tcp_process+0x5bc>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 814c 	beq.w	800af1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8b5b      	ldrh	r3, [r3, #26]
 800ac88:	f043 0302 	orr.w	r3, r3, #2
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2207      	movs	r2, #7
 800ac96:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac98:	e140      	b.n	800af1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa5c 	bl	800b158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aca0:	4b22      	ldr	r3, [pc, #136]	; (800ad2c <tcp_process+0x5bc>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d071      	beq.n	800ad90 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acac:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <tcp_process+0x590>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 0310 	and.w	r3, r3, #16
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d060      	beq.n	800ad7a <tcp_process+0x60a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <tcp_process+0x594>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d15a      	bne.n	800ad7a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d156      	bne.n	800ad7a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8b5b      	ldrh	r3, [r3, #26]
 800acd0:	f043 0302 	orr.w	r3, r3, #2
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7fe fdbc 	bl	8009858 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ace0:	4b13      	ldr	r3, [pc, #76]	; (800ad30 <tcp_process+0x5c0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d105      	bne.n	800acf6 <tcp_process+0x586>
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <tcp_process+0x5c0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	4a0f      	ldr	r2, [pc, #60]	; (800ad30 <tcp_process+0x5c0>)
 800acf2:	6013      	str	r3, [r2, #0]
 800acf4:	e02e      	b.n	800ad54 <tcp_process+0x5e4>
 800acf6:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <tcp_process+0x5c0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e027      	b.n	800ad4e <tcp_process+0x5de>
 800acfe:	bf00      	nop
 800ad00:	20008c54 	.word	0x20008c54
 800ad04:	20008c4c 	.word	0x20008c4c
 800ad08:	20008c52 	.word	0x20008c52
 800ad0c:	20008c48 	.word	0x20008c48
 800ad10:	20008c38 	.word	0x20008c38
 800ad14:	200056b0 	.word	0x200056b0
 800ad18:	200056b4 	.word	0x200056b4
 800ad1c:	0801307c 	.word	0x0801307c
 800ad20:	0801331c 	.word	0x0801331c
 800ad24:	080130c8 	.word	0x080130c8
 800ad28:	20008c50 	.word	0x20008c50
 800ad2c:	20008c55 	.word	0x20008c55
 800ad30:	20008c1c 	.word	0x20008c1c
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d104      	bne.n	800ad48 <tcp_process+0x5d8>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	e005      	b.n	800ad54 <tcp_process+0x5e4>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	617b      	str	r3, [r7, #20]
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1ef      	bne.n	800ad34 <tcp_process+0x5c4>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	4b77      	ldr	r3, [pc, #476]	; (800af38 <tcp_process+0x7c8>)
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	220a      	movs	r2, #10
 800ad64:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ad66:	4b75      	ldr	r3, [pc, #468]	; (800af3c <tcp_process+0x7cc>)
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	4a73      	ldr	r2, [pc, #460]	; (800af3c <tcp_process+0x7cc>)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	f003 f952 	bl	800e01c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ad78:	e0d2      	b.n	800af20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8b5b      	ldrh	r3, [r3, #26]
 800ad7e:	f043 0302 	orr.w	r3, r3, #2
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	751a      	strb	r2, [r3, #20]
      break;
 800ad8e:	e0c7      	b.n	800af20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad90:	4b6b      	ldr	r3, [pc, #428]	; (800af40 <tcp_process+0x7d0>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f003 0310 	and.w	r3, r3, #16
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80c1 	beq.w	800af20 <tcp_process+0x7b0>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ada2:	4b68      	ldr	r3, [pc, #416]	; (800af44 <tcp_process+0x7d4>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	f040 80ba 	bne.w	800af20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 80b5 	bne.w	800af20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2206      	movs	r2, #6
 800adba:	751a      	strb	r2, [r3, #20]
      break;
 800adbc:	e0b0      	b.n	800af20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9ca 	bl	800b158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800adc4:	4b60      	ldr	r3, [pc, #384]	; (800af48 <tcp_process+0x7d8>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f003 0320 	and.w	r3, r3, #32
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 80a9 	beq.w	800af24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	8b5b      	ldrh	r3, [r3, #26]
 800add6:	f043 0302 	orr.w	r3, r3, #2
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7fe fd39 	bl	8009858 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ade6:	4b59      	ldr	r3, [pc, #356]	; (800af4c <tcp_process+0x7dc>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	429a      	cmp	r2, r3
 800adee:	d105      	bne.n	800adfc <tcp_process+0x68c>
 800adf0:	4b56      	ldr	r3, [pc, #344]	; (800af4c <tcp_process+0x7dc>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	4a55      	ldr	r2, [pc, #340]	; (800af4c <tcp_process+0x7dc>)
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	e013      	b.n	800ae24 <tcp_process+0x6b4>
 800adfc:	4b53      	ldr	r3, [pc, #332]	; (800af4c <tcp_process+0x7dc>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	e00c      	b.n	800ae1e <tcp_process+0x6ae>
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d104      	bne.n	800ae18 <tcp_process+0x6a8>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	60da      	str	r2, [r3, #12]
 800ae16:	e005      	b.n	800ae24 <tcp_process+0x6b4>
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	613b      	str	r3, [r7, #16]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1ef      	bne.n	800ae04 <tcp_process+0x694>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	4b43      	ldr	r3, [pc, #268]	; (800af38 <tcp_process+0x7c8>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	220a      	movs	r2, #10
 800ae34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae36:	4b41      	ldr	r3, [pc, #260]	; (800af3c <tcp_process+0x7cc>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60da      	str	r2, [r3, #12]
 800ae3e:	4a3f      	ldr	r2, [pc, #252]	; (800af3c <tcp_process+0x7cc>)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	f003 f8ea 	bl	800e01c <tcp_timer_needed>
      }
      break;
 800ae48:	e06c      	b.n	800af24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f984 	bl	800b158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae50:	4b3b      	ldr	r3, [pc, #236]	; (800af40 <tcp_process+0x7d0>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f003 0310 	and.w	r3, r3, #16
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d065      	beq.n	800af28 <tcp_process+0x7b8>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae60:	4b38      	ldr	r3, [pc, #224]	; (800af44 <tcp_process+0x7d4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d15f      	bne.n	800af28 <tcp_process+0x7b8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d15b      	bne.n	800af28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7fe fcf1 	bl	8009858 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae76:	4b35      	ldr	r3, [pc, #212]	; (800af4c <tcp_process+0x7dc>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d105      	bne.n	800ae8c <tcp_process+0x71c>
 800ae80:	4b32      	ldr	r3, [pc, #200]	; (800af4c <tcp_process+0x7dc>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	4a31      	ldr	r2, [pc, #196]	; (800af4c <tcp_process+0x7dc>)
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e013      	b.n	800aeb4 <tcp_process+0x744>
 800ae8c:	4b2f      	ldr	r3, [pc, #188]	; (800af4c <tcp_process+0x7dc>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	e00c      	b.n	800aeae <tcp_process+0x73e>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d104      	bne.n	800aea8 <tcp_process+0x738>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	60da      	str	r2, [r3, #12]
 800aea6:	e005      	b.n	800aeb4 <tcp_process+0x744>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1ef      	bne.n	800ae94 <tcp_process+0x724>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	4b1f      	ldr	r3, [pc, #124]	; (800af38 <tcp_process+0x7c8>)
 800aebc:	2201      	movs	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	220a      	movs	r2, #10
 800aec4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aec6:	4b1d      	ldr	r3, [pc, #116]	; (800af3c <tcp_process+0x7cc>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60da      	str	r2, [r3, #12]
 800aece:	4a1b      	ldr	r2, [pc, #108]	; (800af3c <tcp_process+0x7cc>)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	f003 f8a2 	bl	800e01c <tcp_timer_needed>
      }
      break;
 800aed8:	e026      	b.n	800af28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f93c 	bl	800b158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aee0:	4b17      	ldr	r3, [pc, #92]	; (800af40 <tcp_process+0x7d0>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01f      	beq.n	800af2c <tcp_process+0x7bc>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <tcp_process+0x7d4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d119      	bne.n	800af2c <tcp_process+0x7bc>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d115      	bne.n	800af2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800af00:	4b11      	ldr	r3, [pc, #68]	; (800af48 <tcp_process+0x7d8>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f043 0310 	orr.w	r3, r3, #16
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <tcp_process+0x7d8>)
 800af0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800af0e:	e00d      	b.n	800af2c <tcp_process+0x7bc>
    default:
      break;
 800af10:	bf00      	nop
 800af12:	e00c      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af14:	bf00      	nop
 800af16:	e00a      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af18:	bf00      	nop
 800af1a:	e008      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af1c:	bf00      	nop
 800af1e:	e006      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af20:	bf00      	nop
 800af22:	e004      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af24:	bf00      	nop
 800af26:	e002      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af28:	bf00      	nop
 800af2a:	e000      	b.n	800af2e <tcp_process+0x7be>
      break;
 800af2c:	bf00      	nop
  }
  return ERR_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3724      	adds	r7, #36	; 0x24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd90      	pop	{r4, r7, pc}
 800af38:	20008c24 	.word	0x20008c24
 800af3c:	20008c20 	.word	0x20008c20
 800af40:	20008c54 	.word	0x20008c54
 800af44:	20008c4c 	.word	0x20008c4c
 800af48:	20008c55 	.word	0x20008c55
 800af4c:	20008c1c 	.word	0x20008c1c

0800af50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800af50:	b590      	push	{r4, r7, lr}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <tcp_oos_insert_segment+0x1e>
 800af60:	4b3b      	ldr	r3, [pc, #236]	; (800b050 <tcp_oos_insert_segment+0x100>)
 800af62:	f240 421f 	movw	r2, #1055	; 0x41f
 800af66:	493b      	ldr	r1, [pc, #236]	; (800b054 <tcp_oos_insert_segment+0x104>)
 800af68:	483b      	ldr	r0, [pc, #236]	; (800b058 <tcp_oos_insert_segment+0x108>)
 800af6a:	f005 ff21 	bl	8010db0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	899b      	ldrh	r3, [r3, #12]
 800af74:	b29b      	uxth	r3, r3
 800af76:	4618      	mov	r0, r3
 800af78:	f7fb f9d4 	bl	8006324 <lwip_htons>
 800af7c:	4603      	mov	r3, r0
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d028      	beq.n	800afda <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800af88:	6838      	ldr	r0, [r7, #0]
 800af8a:	f7fe f977 	bl	800927c <tcp_segs_free>
    next = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	603b      	str	r3, [r7, #0]
 800af92:	e056      	b.n	800b042 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	899b      	ldrh	r3, [r3, #12]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fb f9c1 	bl	8006324 <lwip_htons>
 800afa2:	4603      	mov	r3, r0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00d      	beq.n	800afca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	899b      	ldrh	r3, [r3, #12]
 800afb4:	b29c      	uxth	r4, r3
 800afb6:	2001      	movs	r0, #1
 800afb8:	f7fb f9b4 	bl	8006324 <lwip_htons>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	4322      	orrs	r2, r4
 800afc6:	b292      	uxth	r2, r2
 800afc8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7fe f966 	bl	80092a6 <tcp_seg_free>
    while (next &&
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00e      	beq.n	800affe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	891b      	ldrh	r3, [r3, #8]
 800afe4:	461a      	mov	r2, r3
 800afe6:	4b1d      	ldr	r3, [pc, #116]	; (800b05c <tcp_oos_insert_segment+0x10c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	441a      	add	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	8909      	ldrh	r1, [r1, #8]
 800aff6:	440b      	add	r3, r1
 800aff8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800affa:	2b00      	cmp	r3, #0
 800affc:	daca      	bge.n	800af94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01e      	beq.n	800b042 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	891b      	ldrh	r3, [r3, #8]
 800b008:	461a      	mov	r2, r3
 800b00a:	4b14      	ldr	r3, [pc, #80]	; (800b05c <tcp_oos_insert_segment+0x10c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	441a      	add	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dd12      	ble.n	800b042 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	b29a      	uxth	r2, r3
 800b024:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <tcp_oos_insert_segment+0x10c>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	891b      	ldrh	r3, [r3, #8]
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fc fb7f 	bl	8007740 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	601a      	str	r2, [r3, #0]
}
 800b048:	bf00      	nop
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd90      	pop	{r4, r7, pc}
 800b050:	0801307c 	.word	0x0801307c
 800b054:	0801333c 	.word	0x0801333c
 800b058:	080130c8 	.word	0x080130c8
 800b05c:	20008c48 	.word	0x20008c48

0800b060 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b06e:	e03e      	b.n	800b0ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fc fd6c 	bl	8007b5c <pbuf_clen>
 800b084:	4603      	mov	r3, r0
 800b086:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b08e:	8a7a      	ldrh	r2, [r7, #18]
 800b090:	429a      	cmp	r2, r3
 800b092:	d906      	bls.n	800b0a2 <tcp_free_acked_segments+0x42>
 800b094:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <tcp_free_acked_segments+0xe0>)
 800b096:	f240 4257 	movw	r2, #1111	; 0x457
 800b09a:	492a      	ldr	r1, [pc, #168]	; (800b144 <tcp_free_acked_segments+0xe4>)
 800b09c:	482a      	ldr	r0, [pc, #168]	; (800b148 <tcp_free_acked_segments+0xe8>)
 800b09e:	f005 fe87 	bl	8010db0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b0a8:	8a7b      	ldrh	r3, [r7, #18]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	891a      	ldrh	r2, [r3, #8]
 800b0b8:	4b24      	ldr	r3, [pc, #144]	; (800b14c <tcp_free_acked_segments+0xec>)
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	4413      	add	r3, r2
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	4b22      	ldr	r3, [pc, #136]	; (800b14c <tcp_free_acked_segments+0xec>)
 800b0c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b0c4:	6978      	ldr	r0, [r7, #20]
 800b0c6:	f7fe f8ee 	bl	80092a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00c      	beq.n	800b0ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d109      	bne.n	800b0ee <tcp_free_acked_segments+0x8e>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d106      	bne.n	800b0ee <tcp_free_acked_segments+0x8e>
 800b0e0:	4b17      	ldr	r3, [pc, #92]	; (800b140 <tcp_free_acked_segments+0xe0>)
 800b0e2:	f240 4261 	movw	r2, #1121	; 0x461
 800b0e6:	491a      	ldr	r1, [pc, #104]	; (800b150 <tcp_free_acked_segments+0xf0>)
 800b0e8:	4817      	ldr	r0, [pc, #92]	; (800b148 <tcp_free_acked_segments+0xe8>)
 800b0ea:	f005 fe61 	bl	8010db0 <iprintf>
  while (seg_list != NULL &&
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d020      	beq.n	800b136 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fb f927 	bl	800634e <lwip_htonl>
 800b100:	4604      	mov	r4, r0
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	891b      	ldrh	r3, [r3, #8]
 800b106:	461d      	mov	r5, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	899b      	ldrh	r3, [r3, #12]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4618      	mov	r0, r3
 800b112:	f7fb f907 	bl	8006324 <lwip_htons>
 800b116:	4603      	mov	r3, r0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <tcp_free_acked_segments+0xc6>
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <tcp_free_acked_segments+0xc8>
 800b126:	2300      	movs	r3, #0
 800b128:	442b      	add	r3, r5
 800b12a:	18e2      	adds	r2, r4, r3
 800b12c:	4b09      	ldr	r3, [pc, #36]	; (800b154 <tcp_free_acked_segments+0xf4>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b132:	2b00      	cmp	r3, #0
 800b134:	dd9c      	ble.n	800b070 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b136:	68bb      	ldr	r3, [r7, #8]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bdb0      	pop	{r4, r5, r7, pc}
 800b140:	0801307c 	.word	0x0801307c
 800b144:	08013364 	.word	0x08013364
 800b148:	080130c8 	.word	0x080130c8
 800b14c:	20008c50 	.word	0x20008c50
 800b150:	0801338c 	.word	0x0801338c
 800b154:	20008c4c 	.word	0x20008c4c

0800b158 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b158:	b5b0      	push	{r4, r5, r7, lr}
 800b15a:	b094      	sub	sp, #80	; 0x50
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d106      	bne.n	800b178 <tcp_receive+0x20>
 800b16a:	4b91      	ldr	r3, [pc, #580]	; (800b3b0 <tcp_receive+0x258>)
 800b16c:	f240 427b 	movw	r2, #1147	; 0x47b
 800b170:	4990      	ldr	r1, [pc, #576]	; (800b3b4 <tcp_receive+0x25c>)
 800b172:	4891      	ldr	r0, [pc, #580]	; (800b3b8 <tcp_receive+0x260>)
 800b174:	f005 fe1c 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	7d1b      	ldrb	r3, [r3, #20]
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d806      	bhi.n	800b18e <tcp_receive+0x36>
 800b180:	4b8b      	ldr	r3, [pc, #556]	; (800b3b0 <tcp_receive+0x258>)
 800b182:	f240 427c 	movw	r2, #1148	; 0x47c
 800b186:	498d      	ldr	r1, [pc, #564]	; (800b3bc <tcp_receive+0x264>)
 800b188:	488b      	ldr	r0, [pc, #556]	; (800b3b8 <tcp_receive+0x260>)
 800b18a:	f005 fe11 	bl	8010db0 <iprintf>

  if (flags & TCP_ACK) {
 800b18e:	4b8c      	ldr	r3, [pc, #560]	; (800b3c0 <tcp_receive+0x268>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 8264 	beq.w	800b664 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a8:	4413      	add	r3, r2
 800b1aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1b0:	4b84      	ldr	r3, [pc, #528]	; (800b3c4 <tcp_receive+0x26c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	db1b      	blt.n	800b1f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1be:	4b81      	ldr	r3, [pc, #516]	; (800b3c4 <tcp_receive+0x26c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d106      	bne.n	800b1d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1ca:	4b7f      	ldr	r3, [pc, #508]	; (800b3c8 <tcp_receive+0x270>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	db0e      	blt.n	800b1f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1d8:	4b7b      	ldr	r3, [pc, #492]	; (800b3c8 <tcp_receive+0x270>)
 800b1da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d125      	bne.n	800b22c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b1e0:	4b7a      	ldr	r3, [pc, #488]	; (800b3cc <tcp_receive+0x274>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	89db      	ldrh	r3, [r3, #14]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d91c      	bls.n	800b22c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b1f2:	4b76      	ldr	r3, [pc, #472]	; (800b3cc <tcp_receive+0x274>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	89db      	ldrh	r3, [r3, #14]
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d205      	bcs.n	800b21c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b21c:	4b69      	ldr	r3, [pc, #420]	; (800b3c4 <tcp_receive+0x26c>)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b224:	4b68      	ldr	r3, [pc, #416]	; (800b3c8 <tcp_receive+0x270>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b22c:	4b66      	ldr	r3, [pc, #408]	; (800b3c8 <tcp_receive+0x270>)
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	dc58      	bgt.n	800b2ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b23a:	4b65      	ldr	r3, [pc, #404]	; (800b3d0 <tcp_receive+0x278>)
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d14b      	bne.n	800b2da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b24c:	4413      	add	r3, r2
 800b24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b250:	429a      	cmp	r2, r3
 800b252:	d142      	bne.n	800b2da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	db3d      	blt.n	800b2da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b262:	4b59      	ldr	r3, [pc, #356]	; (800b3c8 <tcp_receive+0x270>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d137      	bne.n	800b2da <tcp_receive+0x182>
              found_dupack = 1;
 800b26a:	2301      	movs	r3, #1
 800b26c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b274:	2bff      	cmp	r3, #255	; 0xff
 800b276:	d007      	beq.n	800b288 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b27e:	3301      	adds	r3, #1
 800b280:	b2da      	uxtb	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d91b      	bls.n	800b2ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b29c:	4413      	add	r3, r2
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d30a      	bcc.n	800b2c0 <tcp_receive+0x168>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b4:	4413      	add	r3, r2
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b2be:	e004      	b.n	800b2ca <tcp_receive+0x172>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d902      	bls.n	800b2da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f002 fb45 	bl	800d964 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8161 	bne.w	800b5a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2ea:	e15b      	b.n	800b5a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2ec:	4b36      	ldr	r3, [pc, #216]	; (800b3c8 <tcp_receive+0x270>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f2c0 814e 	blt.w	800b59a <tcp_receive+0x442>
 800b2fe:	4b32      	ldr	r3, [pc, #200]	; (800b3c8 <tcp_receive+0x270>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f300 8146 	bgt.w	800b59a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	8b5b      	ldrh	r3, [r3, #26]
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	d010      	beq.n	800b33c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8b5b      	ldrh	r3, [r3, #26]
 800b31e:	f023 0304 	bic.w	r3, r3, #4
 800b322:	b29a      	uxth	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b34a:	10db      	asrs	r3, r3, #3
 800b34c:	b21b      	sxth	r3, r3
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b356:	b29b      	uxth	r3, r3
 800b358:	4413      	add	r3, r2
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	b21a      	sxth	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b364:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <tcp_receive+0x270>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	b29a      	uxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36e:	b29b      	uxth	r3, r3
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b37c:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <tcp_receive+0x270>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7d1b      	ldrb	r3, [r3, #20]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	f240 8097 	bls.w	800b4bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d245      	bcs.n	800b42a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8b5b      	ldrh	r3, [r3, #26]
 800b3a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d014      	beq.n	800b3d4 <tcp_receive+0x27c>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e013      	b.n	800b3d6 <tcp_receive+0x27e>
 800b3ae:	bf00      	nop
 800b3b0:	0801307c 	.word	0x0801307c
 800b3b4:	080133ac 	.word	0x080133ac
 800b3b8:	080130c8 	.word	0x080130c8
 800b3bc:	080133c8 	.word	0x080133c8
 800b3c0:	20008c54 	.word	0x20008c54
 800b3c4:	20008c48 	.word	0x20008c48
 800b3c8:	20008c4c 	.word	0x20008c4c
 800b3cc:	20008c38 	.word	0x20008c38
 800b3d0:	20008c52 	.word	0x20008c52
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b3da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e4:	fb12 f303 	smulbb	r3, r2, r3
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	bf28      	it	cs
 800b3f0:	4613      	movcs	r3, r2
 800b3f2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3fc:	4413      	add	r3, r2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b406:	429a      	cmp	r2, r3
 800b408:	d309      	bcc.n	800b41e <tcp_receive+0x2c6>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b410:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b412:	4413      	add	r3, r2
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b41c:	e04e      	b.n	800b4bc <tcp_receive+0x364>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b428:	e048      	b.n	800b4bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b432:	4413      	add	r3, r2
 800b434:	b29a      	uxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d309      	bcc.n	800b454 <tcp_receive+0x2fc>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b448:	4413      	add	r3, r2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b452:	e004      	b.n	800b45e <tcp_receive+0x306>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b45a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d326      	bcc.n	800b4bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b48e:	4413      	add	r3, r2
 800b490:	b29a      	uxth	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b498:	429a      	cmp	r2, r3
 800b49a:	d30a      	bcc.n	800b4b2 <tcp_receive+0x35a>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4a6:	4413      	add	r3, r2
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4b0:	e004      	b.n	800b4bc <tcp_receive+0x364>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4c4:	4a98      	ldr	r2, [pc, #608]	; (800b728 <tcp_receive+0x5d0>)
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff fdca 	bl	800b060 <tcp_free_acked_segments>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4da:	4a94      	ldr	r2, [pc, #592]	; (800b72c <tcp_receive+0x5d4>)
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff fdbf 	bl	800b060 <tcp_free_acked_segments>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d104      	bne.n	800b4fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4f6:	861a      	strh	r2, [r3, #48]	; 0x30
 800b4f8:	e002      	b.n	800b500 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d103      	bne.n	800b516 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b51c:	4b84      	ldr	r3, [pc, #528]	; (800b730 <tcp_receive+0x5d8>)
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	4413      	add	r3, r2
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8b5b      	ldrh	r3, [r3, #26]
 800b52e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b532:	2b00      	cmp	r3, #0
 800b534:	d035      	beq.n	800b5a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d118      	bne.n	800b570 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00c      	beq.n	800b560 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	4618      	mov	r0, r3
 800b554:	f7fa fefb 	bl	800634e <lwip_htonl>
 800b558:	4603      	mov	r3, r0
 800b55a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc20      	bgt.n	800b5a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	8b5b      	ldrh	r3, [r3, #26]
 800b564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b56e:	e018      	b.n	800b5a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fa fee6 	bl	800634e <lwip_htonl>
 800b582:	4603      	mov	r3, r0
 800b584:	1ae3      	subs	r3, r4, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	dc0b      	bgt.n	800b5a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	8b5b      	ldrh	r3, [r3, #26]
 800b58e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b592:	b29a      	uxth	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b598:	e003      	b.n	800b5a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f002 fbce 	bl	800dd3c <tcp_send_empty_ack>
 800b5a0:	e000      	b.n	800b5a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d05b      	beq.n	800b664 <tcp_receive+0x50c>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b0:	4b60      	ldr	r3, [pc, #384]	; (800b734 <tcp_receive+0x5dc>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da54      	bge.n	800b664 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b5ba:	4b5f      	ldr	r3, [pc, #380]	; (800b738 <tcp_receive+0x5e0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b5ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5d8:	10db      	asrs	r3, r3, #3
 800b5da:	b21b      	sxth	r3, r3
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b5f2:	4413      	add	r3, r2
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	b21a      	sxth	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b5fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b600:	2b00      	cmp	r3, #0
 800b602:	da05      	bge.n	800b610 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b608:	425b      	negs	r3, r3
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b610:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b61a:	109b      	asrs	r3, r3, #2
 800b61c:	b21b      	sxth	r3, r3
 800b61e:	b29b      	uxth	r3, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b29b      	uxth	r3, r3
 800b624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b62e:	b29a      	uxth	r2, r3
 800b630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b634:	4413      	add	r3, r2
 800b636:	b29b      	uxth	r3, r3
 800b638:	b21a      	sxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b644:	10db      	asrs	r3, r3, #3
 800b646:	b21b      	sxth	r3, r3
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b650:	b29b      	uxth	r3, r3
 800b652:	4413      	add	r3, r2
 800b654:	b29b      	uxth	r3, r3
 800b656:	b21a      	sxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b664:	4b35      	ldr	r3, [pc, #212]	; (800b73c <tcp_receive+0x5e4>)
 800b666:	881b      	ldrh	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 84e2 	beq.w	800c032 <tcp_receive+0xeda>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7d1b      	ldrb	r3, [r3, #20]
 800b672:	2b06      	cmp	r3, #6
 800b674:	f200 84dd 	bhi.w	800c032 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b67c:	4b30      	ldr	r3, [pc, #192]	; (800b740 <tcp_receive+0x5e8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	f2c0 808f 	blt.w	800b7a8 <tcp_receive+0x650>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b68e:	4b2b      	ldr	r3, [pc, #172]	; (800b73c <tcp_receive+0x5e4>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	4619      	mov	r1, r3
 800b694:	4b2a      	ldr	r3, [pc, #168]	; (800b740 <tcp_receive+0x5e8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	440b      	add	r3, r1
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	3301      	adds	r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f300 8082 	bgt.w	800b7a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b6a4:	4b27      	ldr	r3, [pc, #156]	; (800b744 <tcp_receive+0x5ec>)
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6ae:	4b24      	ldr	r3, [pc, #144]	; (800b740 <tcp_receive+0x5e8>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b6b6:	4b23      	ldr	r3, [pc, #140]	; (800b744 <tcp_receive+0x5ec>)
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <tcp_receive+0x574>
 800b6be:	4b22      	ldr	r3, [pc, #136]	; (800b748 <tcp_receive+0x5f0>)
 800b6c0:	f240 5294 	movw	r2, #1428	; 0x594
 800b6c4:	4921      	ldr	r1, [pc, #132]	; (800b74c <tcp_receive+0x5f4>)
 800b6c6:	4822      	ldr	r0, [pc, #136]	; (800b750 <tcp_receive+0x5f8>)
 800b6c8:	f005 fb72 	bl	8010db0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d906      	bls.n	800b6e4 <tcp_receive+0x58c>
 800b6d6:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <tcp_receive+0x5f0>)
 800b6d8:	f240 5295 	movw	r2, #1429	; 0x595
 800b6dc:	491d      	ldr	r1, [pc, #116]	; (800b754 <tcp_receive+0x5fc>)
 800b6de:	481c      	ldr	r0, [pc, #112]	; (800b750 <tcp_receive+0x5f8>)
 800b6e0:	f005 fb66 	bl	8010db0 <iprintf>
      off = (u16_t)off32;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b6ea:	4b16      	ldr	r3, [pc, #88]	; (800b744 <tcp_receive+0x5ec>)
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	891b      	ldrh	r3, [r3, #8]
 800b6f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d906      	bls.n	800b706 <tcp_receive+0x5ae>
 800b6f8:	4b13      	ldr	r3, [pc, #76]	; (800b748 <tcp_receive+0x5f0>)
 800b6fa:	f240 5297 	movw	r2, #1431	; 0x597
 800b6fe:	4916      	ldr	r1, [pc, #88]	; (800b758 <tcp_receive+0x600>)
 800b700:	4813      	ldr	r0, [pc, #76]	; (800b750 <tcp_receive+0x5f8>)
 800b702:	f005 fb55 	bl	8010db0 <iprintf>
      inseg.len -= off;
 800b706:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <tcp_receive+0x5ec>)
 800b708:	891a      	ldrh	r2, [r3, #8]
 800b70a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	b29a      	uxth	r2, r3
 800b712:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <tcp_receive+0x5ec>)
 800b714:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <tcp_receive+0x5ec>)
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	891a      	ldrh	r2, [r3, #8]
 800b71c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b724:	e02a      	b.n	800b77c <tcp_receive+0x624>
 800b726:	bf00      	nop
 800b728:	080133e4 	.word	0x080133e4
 800b72c:	080133ec 	.word	0x080133ec
 800b730:	20008c50 	.word	0x20008c50
 800b734:	20008c4c 	.word	0x20008c4c
 800b738:	20008c10 	.word	0x20008c10
 800b73c:	20008c52 	.word	0x20008c52
 800b740:	20008c48 	.word	0x20008c48
 800b744:	20008c28 	.word	0x20008c28
 800b748:	0801307c 	.word	0x0801307c
 800b74c:	080133f4 	.word	0x080133f4
 800b750:	080130c8 	.word	0x080130c8
 800b754:	08013404 	.word	0x08013404
 800b758:	08013414 	.word	0x08013414
        off -= p->len;
 800b75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75e:	895b      	ldrh	r3, [r3, #10]
 800b760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b76c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b76e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b772:	2200      	movs	r2, #0
 800b774:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b77e:	895b      	ldrh	r3, [r3, #10]
 800b780:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b784:	429a      	cmp	r2, r3
 800b786:	d8e9      	bhi.n	800b75c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b78c:	4619      	mov	r1, r3
 800b78e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b790:	f7fc f8d6 	bl	8007940 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	4a91      	ldr	r2, [pc, #580]	; (800b9e0 <tcp_receive+0x888>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	4b91      	ldr	r3, [pc, #580]	; (800b9e4 <tcp_receive+0x88c>)
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	4a8f      	ldr	r2, [pc, #572]	; (800b9e0 <tcp_receive+0x888>)
 800b7a2:	6812      	ldr	r2, [r2, #0]
 800b7a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7a6:	e00d      	b.n	800b7c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b7a8:	4b8d      	ldr	r3, [pc, #564]	; (800b9e0 <tcp_receive+0x888>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da06      	bge.n	800b7c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ba:	f043 0302 	orr.w	r3, r3, #2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b7c4:	4b86      	ldr	r3, [pc, #536]	; (800b9e0 <tcp_receive+0x888>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f2c0 842a 	blt.w	800c028 <tcp_receive+0xed0>
 800b7d4:	4b82      	ldr	r3, [pc, #520]	; (800b9e0 <tcp_receive+0x888>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b7e0:	440b      	add	r3, r1
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f300 841e 	bgt.w	800c028 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7f0:	4b7b      	ldr	r3, [pc, #492]	; (800b9e0 <tcp_receive+0x888>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	f040 829a 	bne.w	800bd2e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b7fa:	4b7a      	ldr	r3, [pc, #488]	; (800b9e4 <tcp_receive+0x88c>)
 800b7fc:	891c      	ldrh	r4, [r3, #8]
 800b7fe:	4b79      	ldr	r3, [pc, #484]	; (800b9e4 <tcp_receive+0x88c>)
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	899b      	ldrh	r3, [r3, #12]
 800b804:	b29b      	uxth	r3, r3
 800b806:	4618      	mov	r0, r3
 800b808:	f7fa fd8c 	bl	8006324 <lwip_htons>
 800b80c:	4603      	mov	r3, r0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <tcp_receive+0x6c4>
 800b818:	2301      	movs	r3, #1
 800b81a:	e000      	b.n	800b81e <tcp_receive+0x6c6>
 800b81c:	2300      	movs	r3, #0
 800b81e:	4423      	add	r3, r4
 800b820:	b29a      	uxth	r2, r3
 800b822:	4b71      	ldr	r3, [pc, #452]	; (800b9e8 <tcp_receive+0x890>)
 800b824:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b82a:	4b6f      	ldr	r3, [pc, #444]	; (800b9e8 <tcp_receive+0x890>)
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d275      	bcs.n	800b91e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b832:	4b6c      	ldr	r3, [pc, #432]	; (800b9e4 <tcp_receive+0x88c>)
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	899b      	ldrh	r3, [r3, #12]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fa fd72 	bl	8006324 <lwip_htons>
 800b840:	4603      	mov	r3, r0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01f      	beq.n	800b88c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b84c:	4b65      	ldr	r3, [pc, #404]	; (800b9e4 <tcp_receive+0x88c>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	899b      	ldrh	r3, [r3, #12]
 800b852:	b29b      	uxth	r3, r3
 800b854:	b21b      	sxth	r3, r3
 800b856:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b85a:	b21c      	sxth	r4, r3
 800b85c:	4b61      	ldr	r3, [pc, #388]	; (800b9e4 <tcp_receive+0x88c>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	899b      	ldrh	r3, [r3, #12]
 800b862:	b29b      	uxth	r3, r3
 800b864:	4618      	mov	r0, r3
 800b866:	f7fa fd5d 	bl	8006324 <lwip_htons>
 800b86a:	4603      	mov	r3, r0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	b29b      	uxth	r3, r3
 800b870:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b874:	b29b      	uxth	r3, r3
 800b876:	4618      	mov	r0, r3
 800b878:	f7fa fd54 	bl	8006324 <lwip_htons>
 800b87c:	4603      	mov	r3, r0
 800b87e:	b21b      	sxth	r3, r3
 800b880:	4323      	orrs	r3, r4
 800b882:	b21a      	sxth	r2, r3
 800b884:	4b57      	ldr	r3, [pc, #348]	; (800b9e4 <tcp_receive+0x88c>)
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	b292      	uxth	r2, r2
 800b88a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b890:	4b54      	ldr	r3, [pc, #336]	; (800b9e4 <tcp_receive+0x88c>)
 800b892:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b894:	4b53      	ldr	r3, [pc, #332]	; (800b9e4 <tcp_receive+0x88c>)
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	899b      	ldrh	r3, [r3, #12]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fa fd41 	bl	8006324 <lwip_htons>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <tcp_receive+0x762>
            inseg.len -= 1;
 800b8ae:	4b4d      	ldr	r3, [pc, #308]	; (800b9e4 <tcp_receive+0x88c>)
 800b8b0:	891b      	ldrh	r3, [r3, #8]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	4b4b      	ldr	r3, [pc, #300]	; (800b9e4 <tcp_receive+0x88c>)
 800b8b8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b8ba:	4b4a      	ldr	r3, [pc, #296]	; (800b9e4 <tcp_receive+0x88c>)
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4a49      	ldr	r2, [pc, #292]	; (800b9e4 <tcp_receive+0x88c>)
 800b8c0:	8912      	ldrh	r2, [r2, #8]
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fb ff3b 	bl	8007740 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b8ca:	4b46      	ldr	r3, [pc, #280]	; (800b9e4 <tcp_receive+0x88c>)
 800b8cc:	891c      	ldrh	r4, [r3, #8]
 800b8ce:	4b45      	ldr	r3, [pc, #276]	; (800b9e4 <tcp_receive+0x88c>)
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fa fd24 	bl	8006324 <lwip_htons>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <tcp_receive+0x794>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e000      	b.n	800b8ee <tcp_receive+0x796>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4423      	add	r3, r4
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	4b3d      	ldr	r3, [pc, #244]	; (800b9e8 <tcp_receive+0x890>)
 800b8f4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b8f6:	4b3c      	ldr	r3, [pc, #240]	; (800b9e8 <tcp_receive+0x890>)
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4b38      	ldr	r3, [pc, #224]	; (800b9e0 <tcp_receive+0x888>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	441a      	add	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b90a:	440b      	add	r3, r1
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d006      	beq.n	800b91e <tcp_receive+0x7c6>
 800b910:	4b36      	ldr	r3, [pc, #216]	; (800b9ec <tcp_receive+0x894>)
 800b912:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b916:	4936      	ldr	r1, [pc, #216]	; (800b9f0 <tcp_receive+0x898>)
 800b918:	4836      	ldr	r0, [pc, #216]	; (800b9f4 <tcp_receive+0x89c>)
 800b91a:	f005 fa49 	bl	8010db0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 80e7 	beq.w	800baf6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b928:	4b2e      	ldr	r3, [pc, #184]	; (800b9e4 <tcp_receive+0x88c>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	899b      	ldrh	r3, [r3, #12]
 800b92e:	b29b      	uxth	r3, r3
 800b930:	4618      	mov	r0, r3
 800b932:	f7fa fcf7 	bl	8006324 <lwip_htons>
 800b936:	4603      	mov	r3, r0
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d010      	beq.n	800b964 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b942:	e00a      	b.n	800b95a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b948:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7fd fca6 	bl	80092a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1f0      	bne.n	800b944 <tcp_receive+0x7ec>
 800b962:	e0c8      	b.n	800baf6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b968:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b96a:	e052      	b.n	800ba12 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	899b      	ldrh	r3, [r3, #12]
 800b972:	b29b      	uxth	r3, r3
 800b974:	4618      	mov	r0, r3
 800b976:	f7fa fcd5 	bl	8006324 <lwip_htons>
 800b97a:	4603      	mov	r3, r0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d03d      	beq.n	800ba02 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b986:	4b17      	ldr	r3, [pc, #92]	; (800b9e4 <tcp_receive+0x88c>)
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	899b      	ldrh	r3, [r3, #12]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fa fcc8 	bl	8006324 <lwip_htons>
 800b994:	4603      	mov	r3, r0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d130      	bne.n	800ba02 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b9a0:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <tcp_receive+0x88c>)
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	899b      	ldrh	r3, [r3, #12]
 800b9a6:	b29c      	uxth	r4, r3
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	f7fa fcbb 	bl	8006324 <lwip_htons>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <tcp_receive+0x88c>)
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	4322      	orrs	r2, r4
 800b9b8:	b292      	uxth	r2, r2
 800b9ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b9bc:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <tcp_receive+0x88c>)
 800b9be:	891c      	ldrh	r4, [r3, #8]
 800b9c0:	4b08      	ldr	r3, [pc, #32]	; (800b9e4 <tcp_receive+0x88c>)
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	899b      	ldrh	r3, [r3, #12]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fa fcab 	bl	8006324 <lwip_htons>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f003 0303 	and.w	r3, r3, #3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00e      	beq.n	800b9f8 <tcp_receive+0x8a0>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e00d      	b.n	800b9fa <tcp_receive+0x8a2>
 800b9de:	bf00      	nop
 800b9e0:	20008c48 	.word	0x20008c48
 800b9e4:	20008c28 	.word	0x20008c28
 800b9e8:	20008c52 	.word	0x20008c52
 800b9ec:	0801307c 	.word	0x0801307c
 800b9f0:	08013424 	.word	0x08013424
 800b9f4:	080130c8 	.word	0x080130c8
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4423      	add	r3, r4
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	4b98      	ldr	r3, [pc, #608]	; (800bc60 <tcp_receive+0xb08>)
 800ba00:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ba02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba04:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ba06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ba0c:	6938      	ldr	r0, [r7, #16]
 800ba0e:	f7fd fc4a 	bl	80092a6 <tcp_seg_free>
            while (next &&
 800ba12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00e      	beq.n	800ba36 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ba18:	4b91      	ldr	r3, [pc, #580]	; (800bc60 <tcp_receive+0xb08>)
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4b91      	ldr	r3, [pc, #580]	; (800bc64 <tcp_receive+0xb0c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	441a      	add	r2, r3
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba2c:	8909      	ldrh	r1, [r1, #8]
 800ba2e:	440b      	add	r3, r1
 800ba30:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da9a      	bge.n	800b96c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ba36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d059      	beq.n	800baf0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ba3c:	4b88      	ldr	r3, [pc, #544]	; (800bc60 <tcp_receive+0xb08>)
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	461a      	mov	r2, r3
 800ba42:	4b88      	ldr	r3, [pc, #544]	; (800bc64 <tcp_receive+0xb0c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	441a      	add	r2, r3
 800ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd4d      	ble.n	800baf0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	4b81      	ldr	r3, [pc, #516]	; (800bc64 <tcp_receive+0xb0c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	4b80      	ldr	r3, [pc, #512]	; (800bc68 <tcp_receive+0xb10>)
 800ba68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba6a:	4b7f      	ldr	r3, [pc, #508]	; (800bc68 <tcp_receive+0xb10>)
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fa fc56 	bl	8006324 <lwip_htons>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <tcp_receive+0x938>
                inseg.len -= 1;
 800ba84:	4b78      	ldr	r3, [pc, #480]	; (800bc68 <tcp_receive+0xb10>)
 800ba86:	891b      	ldrh	r3, [r3, #8]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	4b76      	ldr	r3, [pc, #472]	; (800bc68 <tcp_receive+0xb10>)
 800ba8e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ba90:	4b75      	ldr	r3, [pc, #468]	; (800bc68 <tcp_receive+0xb10>)
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	4a74      	ldr	r2, [pc, #464]	; (800bc68 <tcp_receive+0xb10>)
 800ba96:	8912      	ldrh	r2, [r2, #8]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fb fe50 	bl	8007740 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800baa0:	4b71      	ldr	r3, [pc, #452]	; (800bc68 <tcp_receive+0xb10>)
 800baa2:	891c      	ldrh	r4, [r3, #8]
 800baa4:	4b70      	ldr	r3, [pc, #448]	; (800bc68 <tcp_receive+0xb10>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	899b      	ldrh	r3, [r3, #12]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4618      	mov	r0, r3
 800baae:	f7fa fc39 	bl	8006324 <lwip_htons>
 800bab2:	4603      	mov	r3, r0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <tcp_receive+0x96a>
 800babe:	2301      	movs	r3, #1
 800bac0:	e000      	b.n	800bac4 <tcp_receive+0x96c>
 800bac2:	2300      	movs	r3, #0
 800bac4:	4423      	add	r3, r4
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	4b65      	ldr	r3, [pc, #404]	; (800bc60 <tcp_receive+0xb08>)
 800baca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bacc:	4b64      	ldr	r3, [pc, #400]	; (800bc60 <tcp_receive+0xb08>)
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	4b64      	ldr	r3, [pc, #400]	; (800bc64 <tcp_receive+0xb0c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	441a      	add	r2, r3
 800bad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d006      	beq.n	800baf0 <tcp_receive+0x998>
 800bae2:	4b62      	ldr	r3, [pc, #392]	; (800bc6c <tcp_receive+0xb14>)
 800bae4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bae8:	4961      	ldr	r1, [pc, #388]	; (800bc70 <tcp_receive+0xb18>)
 800baea:	4862      	ldr	r0, [pc, #392]	; (800bc74 <tcp_receive+0xb1c>)
 800baec:	f005 f960 	bl	8010db0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800baf4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800baf6:	4b5a      	ldr	r3, [pc, #360]	; (800bc60 <tcp_receive+0xb08>)
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b59      	ldr	r3, [pc, #356]	; (800bc64 <tcp_receive+0xb0c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	441a      	add	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb0a:	4b55      	ldr	r3, [pc, #340]	; (800bc60 <tcp_receive+0xb08>)
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d206      	bcs.n	800bb20 <tcp_receive+0x9c8>
 800bb12:	4b56      	ldr	r3, [pc, #344]	; (800bc6c <tcp_receive+0xb14>)
 800bb14:	f240 6207 	movw	r2, #1543	; 0x607
 800bb18:	4957      	ldr	r1, [pc, #348]	; (800bc78 <tcp_receive+0xb20>)
 800bb1a:	4856      	ldr	r0, [pc, #344]	; (800bc74 <tcp_receive+0xb1c>)
 800bb1c:	f005 f948 	bl	8010db0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb24:	4b4e      	ldr	r3, [pc, #312]	; (800bc60 <tcp_receive+0xb08>)
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fc fe93 	bl	800885c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bb36:	4b4c      	ldr	r3, [pc, #304]	; (800bc68 <tcp_receive+0xb10>)
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	891b      	ldrh	r3, [r3, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d006      	beq.n	800bb4e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800bb40:	4b49      	ldr	r3, [pc, #292]	; (800bc68 <tcp_receive+0xb10>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	4a4d      	ldr	r2, [pc, #308]	; (800bc7c <tcp_receive+0xb24>)
 800bb46:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bb48:	4b47      	ldr	r3, [pc, #284]	; (800bc68 <tcp_receive+0xb10>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb4e:	4b46      	ldr	r3, [pc, #280]	; (800bc68 <tcp_receive+0xb10>)
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fa fbe4 	bl	8006324 <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 80b8 	beq.w	800bcda <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bb6a:	4b45      	ldr	r3, [pc, #276]	; (800bc80 <tcp_receive+0xb28>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f043 0320 	orr.w	r3, r3, #32
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b42      	ldr	r3, [pc, #264]	; (800bc80 <tcp_receive+0xb28>)
 800bb76:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bb78:	e0af      	b.n	800bcda <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb7e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a36      	ldr	r2, [pc, #216]	; (800bc64 <tcp_receive+0xb0c>)
 800bb8a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	891b      	ldrh	r3, [r3, #8]
 800bb90:	461c      	mov	r4, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	899b      	ldrh	r3, [r3, #12]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fa fbc2 	bl	8006324 <lwip_htons>
 800bba0:	4603      	mov	r3, r0
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 0303 	and.w	r3, r3, #3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <tcp_receive+0xa58>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <tcp_receive+0xa5a>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	191a      	adds	r2, r3, r4
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	441a      	add	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	891b      	ldrh	r3, [r3, #8]
 800bbc8:	461d      	mov	r5, r3
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	899b      	ldrh	r3, [r3, #12]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fa fba6 	bl	8006324 <lwip_htons>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <tcp_receive+0xa90>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e000      	b.n	800bbea <tcp_receive+0xa92>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	442b      	add	r3, r5
 800bbec:	429c      	cmp	r4, r3
 800bbee:	d206      	bcs.n	800bbfe <tcp_receive+0xaa6>
 800bbf0:	4b1e      	ldr	r3, [pc, #120]	; (800bc6c <tcp_receive+0xb14>)
 800bbf2:	f240 622b 	movw	r2, #1579	; 0x62b
 800bbf6:	4923      	ldr	r1, [pc, #140]	; (800bc84 <tcp_receive+0xb2c>)
 800bbf8:	481e      	ldr	r0, [pc, #120]	; (800bc74 <tcp_receive+0xb1c>)
 800bbfa:	f005 f8d9 	bl	8010db0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	891b      	ldrh	r3, [r3, #8]
 800bc02:	461c      	mov	r4, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	899b      	ldrh	r3, [r3, #12]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fa fb89 	bl	8006324 <lwip_htons>
 800bc12:	4603      	mov	r3, r0
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	f003 0303 	and.w	r3, r3, #3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <tcp_receive+0xaca>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <tcp_receive+0xacc>
 800bc22:	2300      	movs	r3, #0
 800bc24:	1919      	adds	r1, r3, r4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc2a:	b28b      	uxth	r3, r1
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7fc fe11 	bl	800885c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	891b      	ldrh	r3, [r3, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d028      	beq.n	800bc96 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <tcp_receive+0xb24>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01d      	beq.n	800bc88 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <tcp_receive+0xb24>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fb ffba 	bl	8007bd0 <pbuf_cat>
 800bc5c:	e018      	b.n	800bc90 <tcp_receive+0xb38>
 800bc5e:	bf00      	nop
 800bc60:	20008c52 	.word	0x20008c52
 800bc64:	20008c48 	.word	0x20008c48
 800bc68:	20008c28 	.word	0x20008c28
 800bc6c:	0801307c 	.word	0x0801307c
 800bc70:	0801345c 	.word	0x0801345c
 800bc74:	080130c8 	.word	0x080130c8
 800bc78:	08013498 	.word	0x08013498
 800bc7c:	20008c58 	.word	0x20008c58
 800bc80:	20008c55 	.word	0x20008c55
 800bc84:	080134b8 	.word	0x080134b8
            } else {
              recv_data = cseg->p;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	4a70      	ldr	r2, [pc, #448]	; (800be50 <tcp_receive+0xcf8>)
 800bc8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	899b      	ldrh	r3, [r3, #12]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fa fb40 	bl	8006324 <lwip_htons>
 800bca4:	4603      	mov	r3, r0
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00d      	beq.n	800bccc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bcb0:	4b68      	ldr	r3, [pc, #416]	; (800be54 <tcp_receive+0xcfc>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f043 0320 	orr.w	r3, r3, #32
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	4b66      	ldr	r3, [pc, #408]	; (800be54 <tcp_receive+0xcfc>)
 800bcbc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	7d1b      	ldrb	r3, [r3, #20]
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d102      	bne.n	800bccc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2207      	movs	r2, #7
 800bcca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bcd4:	68b8      	ldr	r0, [r7, #8]
 800bcd6:	f7fd fae6 	bl	80092a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d008      	beq.n	800bcf4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	f43f af43 	beq.w	800bb7a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	8b5b      	ldrh	r3, [r3, #26]
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <tcp_receive+0xbc6>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	8b5b      	ldrh	r3, [r3, #26]
 800bd04:	f023 0301 	bic.w	r3, r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	835a      	strh	r2, [r3, #26]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8b5b      	ldrh	r3, [r3, #26]
 800bd12:	f043 0302 	orr.w	r3, r3, #2
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd1c:	e188      	b.n	800c030 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	8b5b      	ldrh	r3, [r3, #26]
 800bd22:	f043 0301 	orr.w	r3, r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd2c:	e180      	b.n	800c030 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d106      	bne.n	800bd44 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bd36:	4848      	ldr	r0, [pc, #288]	; (800be58 <tcp_receive+0xd00>)
 800bd38:	f7fd faec 	bl	8009314 <tcp_seg_copy>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	675a      	str	r2, [r3, #116]	; 0x74
 800bd42:	e16d      	b.n	800c020 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd4e:	e157      	b.n	800c000 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800bd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	4b41      	ldr	r3, [pc, #260]	; (800be5c <tcp_receive+0xd04>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d11d      	bne.n	800bd9a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bd5e:	4b3e      	ldr	r3, [pc, #248]	; (800be58 <tcp_receive+0xd00>)
 800bd60:	891a      	ldrh	r2, [r3, #8]
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	891b      	ldrh	r3, [r3, #8]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	f240 814f 	bls.w	800c00a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd6c:	483a      	ldr	r0, [pc, #232]	; (800be58 <tcp_receive+0xd00>)
 800bd6e:	f7fd fad1 	bl	8009314 <tcp_seg_copy>
 800bd72:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8149 	beq.w	800c00e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <tcp_receive+0xc32>
                    prev->next = cseg;
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	e002      	b.n	800bd90 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bd90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd92:	6978      	ldr	r0, [r7, #20]
 800bd94:	f7ff f8dc 	bl	800af50 <tcp_oos_insert_segment>
                }
                break;
 800bd98:	e139      	b.n	800c00e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d117      	bne.n	800bdd0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bda0:	4b2e      	ldr	r3, [pc, #184]	; (800be5c <tcp_receive+0xd04>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da57      	bge.n	800be60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdb0:	4829      	ldr	r0, [pc, #164]	; (800be58 <tcp_receive+0xd00>)
 800bdb2:	f7fd faaf 	bl	8009314 <tcp_seg_copy>
 800bdb6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 8129 	beq.w	800c012 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	69ba      	ldr	r2, [r7, #24]
 800bdc4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bdc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bdc8:	69b8      	ldr	r0, [r7, #24]
 800bdca:	f7ff f8c1 	bl	800af50 <tcp_oos_insert_segment>
                  }
                  break;
 800bdce:	e120      	b.n	800c012 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bdd0:	4b22      	ldr	r3, [pc, #136]	; (800be5c <tcp_receive+0xd04>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	db3e      	blt.n	800be60 <tcp_receive+0xd08>
 800bde2:	4b1e      	ldr	r3, [pc, #120]	; (800be5c <tcp_receive+0xd04>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	3301      	adds	r3, #1
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc35      	bgt.n	800be60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdf4:	4818      	ldr	r0, [pc, #96]	; (800be58 <tcp_receive+0xd00>)
 800bdf6:	f7fd fa8d 	bl	8009314 <tcp_seg_copy>
 800bdfa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f000 8109 	beq.w	800c016 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be0c:	8912      	ldrh	r2, [r2, #8]
 800be0e:	441a      	add	r2, r3
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <tcp_receive+0xd04>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	dd12      	ble.n	800be40 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800be1a:	4b10      	ldr	r3, [pc, #64]	; (800be5c <tcp_receive+0xd04>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	b29a      	uxth	r2, r3
 800be20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	b29b      	uxth	r3, r3
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800be30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	891b      	ldrh	r3, [r3, #8]
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fb fc80 	bl	8007740 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800be46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be48:	69f8      	ldr	r0, [r7, #28]
 800be4a:	f7ff f881 	bl	800af50 <tcp_oos_insert_segment>
                  }
                  break;
 800be4e:	e0e2      	b.n	800c016 <tcp_receive+0xebe>
 800be50:	20008c58 	.word	0x20008c58
 800be54:	20008c55 	.word	0x20008c55
 800be58:	20008c28 	.word	0x20008c28
 800be5c:	20008c48 	.word	0x20008c48
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f040 80c6 	bne.w	800bffa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800be6e:	4b80      	ldr	r3, [pc, #512]	; (800c070 <tcp_receive+0xf18>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f340 80bd 	ble.w	800bffa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800be80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	899b      	ldrh	r3, [r3, #12]
 800be86:	b29b      	uxth	r3, r3
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fa fa4b 	bl	8006324 <lwip_htons>
 800be8e:	4603      	mov	r3, r0
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 80bf 	bne.w	800c01a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800be9c:	4875      	ldr	r0, [pc, #468]	; (800c074 <tcp_receive+0xf1c>)
 800be9e:	f7fd fa39 	bl	8009314 <tcp_seg_copy>
 800bea2:	4602      	mov	r2, r0
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	f000 80b6 	beq.w	800c01e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beba:	8912      	ldrh	r2, [r2, #8]
 800bebc:	441a      	add	r2, r3
 800bebe:	4b6c      	ldr	r3, [pc, #432]	; (800c070 <tcp_receive+0xf18>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dd12      	ble.n	800beee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bec8:	4b69      	ldr	r3, [pc, #420]	; (800c070 <tcp_receive+0xf18>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	b29a      	uxth	r2, r3
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	b29a      	uxth	r2, r3
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	891b      	ldrh	r3, [r3, #8]
 800bee6:	4619      	mov	r1, r3
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fb fc29 	bl	8007740 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800beee:	4b62      	ldr	r3, [pc, #392]	; (800c078 <tcp_receive+0xf20>)
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	4b5e      	ldr	r3, [pc, #376]	; (800c070 <tcp_receive+0xf18>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	441a      	add	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf02:	440b      	add	r3, r1
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f340 8089 	ble.w	800c01e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	899b      	ldrh	r3, [r3, #12]
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fa fa04 	bl	8006324 <lwip_htons>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d022      	beq.n	800bf6e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	899b      	ldrh	r3, [r3, #12]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	b21b      	sxth	r3, r3
 800bf34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf38:	b21c      	sxth	r4, r3
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	899b      	ldrh	r3, [r3, #12]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fa f9ed 	bl	8006324 <lwip_htons>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fa f9e4 	bl	8006324 <lwip_htons>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	b21b      	sxth	r3, r3
 800bf60:	4323      	orrs	r3, r4
 800bf62:	b21a      	sxth	r2, r3
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	b292      	uxth	r2, r2
 800bf6c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf78:	4413      	add	r3, r2
 800bf7a:	b299      	uxth	r1, r3
 800bf7c:	4b3c      	ldr	r3, [pc, #240]	; (800c070 <tcp_receive+0xf18>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	1a8a      	subs	r2, r1, r2
 800bf88:	b292      	uxth	r2, r2
 800bf8a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	891b      	ldrh	r3, [r3, #8]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f7fb fbd0 	bl	8007740 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	891c      	ldrh	r4, [r3, #8]
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	899b      	ldrh	r3, [r3, #12]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fa f9b7 	bl	8006324 <lwip_htons>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <tcp_receive+0xe6e>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e000      	b.n	800bfc8 <tcp_receive+0xe70>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4423      	add	r3, r4
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	4b2a      	ldr	r3, [pc, #168]	; (800c078 <tcp_receive+0xf20>)
 800bfce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bfd0:	4b29      	ldr	r3, [pc, #164]	; (800c078 <tcp_receive+0xf20>)
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4b26      	ldr	r3, [pc, #152]	; (800c070 <tcp_receive+0xf18>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	441a      	add	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bfe4:	440b      	add	r3, r1
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d019      	beq.n	800c01e <tcp_receive+0xec6>
 800bfea:	4b24      	ldr	r3, [pc, #144]	; (800c07c <tcp_receive+0xf24>)
 800bfec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bff0:	4923      	ldr	r1, [pc, #140]	; (800c080 <tcp_receive+0xf28>)
 800bff2:	4824      	ldr	r0, [pc, #144]	; (800c084 <tcp_receive+0xf2c>)
 800bff4:	f004 fedc 	bl	8010db0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bff8:	e011      	b.n	800c01e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	63bb      	str	r3, [r7, #56]	; 0x38
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	2b00      	cmp	r3, #0
 800c004:	f47f aea4 	bne.w	800bd50 <tcp_receive+0xbf8>
 800c008:	e00a      	b.n	800c020 <tcp_receive+0xec8>
                break;
 800c00a:	bf00      	nop
 800c00c:	e008      	b.n	800c020 <tcp_receive+0xec8>
                break;
 800c00e:	bf00      	nop
 800c010:	e006      	b.n	800c020 <tcp_receive+0xec8>
                  break;
 800c012:	bf00      	nop
 800c014:	e004      	b.n	800c020 <tcp_receive+0xec8>
                  break;
 800c016:	bf00      	nop
 800c018:	e002      	b.n	800c020 <tcp_receive+0xec8>
                  break;
 800c01a:	bf00      	nop
 800c01c:	e000      	b.n	800c020 <tcp_receive+0xec8>
                break;
 800c01e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 fe8b 	bl	800dd3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c026:	e003      	b.n	800c030 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f001 fe87 	bl	800dd3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c02e:	e01a      	b.n	800c066 <tcp_receive+0xf0e>
 800c030:	e019      	b.n	800c066 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c032:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <tcp_receive+0xf18>)
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	db0a      	blt.n	800c056 <tcp_receive+0xefe>
 800c040:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <tcp_receive+0xf18>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c04c:	440b      	add	r3, r1
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	3301      	adds	r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	dd07      	ble.n	800c066 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8b5b      	ldrh	r3, [r3, #26]
 800c05a:	f043 0302 	orr.w	r3, r3, #2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c064:	e7ff      	b.n	800c066 <tcp_receive+0xf0e>
 800c066:	bf00      	nop
 800c068:	3750      	adds	r7, #80	; 0x50
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bdb0      	pop	{r4, r5, r7, pc}
 800c06e:	bf00      	nop
 800c070:	20008c48 	.word	0x20008c48
 800c074:	20008c28 	.word	0x20008c28
 800c078:	20008c52 	.word	0x20008c52
 800c07c:	0801307c 	.word	0x0801307c
 800c080:	08013424 	.word	0x08013424
 800c084:	080130c8 	.word	0x080130c8

0800c088 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c08e:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <tcp_get_next_optbyte+0x5c>)
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	b291      	uxth	r1, r2
 800c096:	4a13      	ldr	r2, [pc, #76]	; (800c0e4 <tcp_get_next_optbyte+0x5c>)
 800c098:	8011      	strh	r1, [r2, #0]
 800c09a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c09c:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <tcp_get_next_optbyte+0x60>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <tcp_get_next_optbyte+0x26>
 800c0a4:	4b11      	ldr	r3, [pc, #68]	; (800c0ec <tcp_get_next_optbyte+0x64>)
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	88fa      	ldrh	r2, [r7, #6]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d208      	bcs.n	800c0c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c0ae:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <tcp_get_next_optbyte+0x68>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3314      	adds	r3, #20
 800c0b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	e00b      	b.n	800c0d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	4b09      	ldr	r3, [pc, #36]	; (800c0ec <tcp_get_next_optbyte+0x64>)
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <tcp_get_next_optbyte+0x60>)
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	797b      	ldrb	r3, [r7, #5]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	20008c44 	.word	0x20008c44
 800c0e8:	20008c40 	.word	0x20008c40
 800c0ec:	20008c3e 	.word	0x20008c3e
 800c0f0:	20008c38 	.word	0x20008c38

0800c0f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <tcp_parseopt+0x1c>
 800c102:	4b32      	ldr	r3, [pc, #200]	; (800c1cc <tcp_parseopt+0xd8>)
 800c104:	f240 727d 	movw	r2, #1917	; 0x77d
 800c108:	4931      	ldr	r1, [pc, #196]	; (800c1d0 <tcp_parseopt+0xdc>)
 800c10a:	4832      	ldr	r0, [pc, #200]	; (800c1d4 <tcp_parseopt+0xe0>)
 800c10c:	f004 fe50 	bl	8010db0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c110:	4b31      	ldr	r3, [pc, #196]	; (800c1d8 <tcp_parseopt+0xe4>)
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d055      	beq.n	800c1c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c118:	4b30      	ldr	r3, [pc, #192]	; (800c1dc <tcp_parseopt+0xe8>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	801a      	strh	r2, [r3, #0]
 800c11e:	e045      	b.n	800c1ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c120:	f7ff ffb2 	bl	800c088 <tcp_get_next_optbyte>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d006      	beq.n	800c13c <tcp_parseopt+0x48>
 800c12e:	2b02      	cmp	r3, #2
 800c130:	dc2b      	bgt.n	800c18a <tcp_parseopt+0x96>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d041      	beq.n	800c1ba <tcp_parseopt+0xc6>
 800c136:	2b01      	cmp	r3, #1
 800c138:	d127      	bne.n	800c18a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c13a:	e037      	b.n	800c1ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c13c:	f7ff ffa4 	bl	800c088 <tcp_get_next_optbyte>
 800c140:	4603      	mov	r3, r0
 800c142:	2b04      	cmp	r3, #4
 800c144:	d13b      	bne.n	800c1be <tcp_parseopt+0xca>
 800c146:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <tcp_parseopt+0xe8>)
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	4a22      	ldr	r2, [pc, #136]	; (800c1d8 <tcp_parseopt+0xe4>)
 800c14e:	8812      	ldrh	r2, [r2, #0]
 800c150:	4293      	cmp	r3, r2
 800c152:	da34      	bge.n	800c1be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c154:	f7ff ff98 	bl	800c088 <tcp_get_next_optbyte>
 800c158:	4603      	mov	r3, r0
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c160:	f7ff ff92 	bl	800c088 <tcp_get_next_optbyte>
 800c164:	4603      	mov	r3, r0
 800c166:	b29a      	uxth	r2, r3
 800c168:	89bb      	ldrh	r3, [r7, #12]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c16e:	89bb      	ldrh	r3, [r7, #12]
 800c170:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c174:	d804      	bhi.n	800c180 <tcp_parseopt+0x8c>
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <tcp_parseopt+0x8c>
 800c17c:	89ba      	ldrh	r2, [r7, #12]
 800c17e:	e001      	b.n	800c184 <tcp_parseopt+0x90>
 800c180:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c188:	e010      	b.n	800c1ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c18a:	f7ff ff7d 	bl	800c088 <tcp_get_next_optbyte>
 800c18e:	4603      	mov	r3, r0
 800c190:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d914      	bls.n	800c1c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c198:	7afb      	ldrb	r3, [r7, #11]
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <tcp_parseopt+0xe8>)
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3b02      	subs	r3, #2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <tcp_parseopt+0xe8>)
 800c1aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c1ac:	4b0b      	ldr	r3, [pc, #44]	; (800c1dc <tcp_parseopt+0xe8>)
 800c1ae:	881a      	ldrh	r2, [r3, #0]
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <tcp_parseopt+0xe4>)
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d3b3      	bcc.n	800c120 <tcp_parseopt+0x2c>
 800c1b8:	e004      	b.n	800c1c4 <tcp_parseopt+0xd0>
          return;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <tcp_parseopt+0xd0>
            return;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <tcp_parseopt+0xd0>
            return;
 800c1c2:	bf00      	nop
      }
    }
  }
}
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0801307c 	.word	0x0801307c
 800c1d0:	080134e0 	.word	0x080134e0
 800c1d4:	080130c8 	.word	0x080130c8
 800c1d8:	20008c3c 	.word	0x20008c3c
 800c1dc:	20008c44 	.word	0x20008c44

0800c1e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <tcp_trigger_input_pcb_close+0x1c>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f043 0310 	orr.w	r3, r3, #16
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <tcp_trigger_input_pcb_close+0x1c>)
 800c1f0:	701a      	strb	r2, [r3, #0]
}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	20008c55 	.word	0x20008c55

0800c200 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <tcp_route+0x28>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	7a1b      	ldrb	r3, [r3, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d006      	beq.n	800c228 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	7a1b      	ldrb	r3, [r3, #8]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fb f8b4 	bl	800738c <netif_get_by_index>
 800c224:	4603      	mov	r3, r0
 800c226:	e003      	b.n	800c230 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f003 fad5 	bl	800f7d8 <ip4_route>
 800c22e:	4603      	mov	r3, r0
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c238:	b590      	push	{r4, r7, lr}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	603b      	str	r3, [r7, #0]
 800c244:	4613      	mov	r3, r2
 800c246:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <tcp_create_segment+0x22>
 800c24e:	4b44      	ldr	r3, [pc, #272]	; (800c360 <tcp_create_segment+0x128>)
 800c250:	22a3      	movs	r2, #163	; 0xa3
 800c252:	4944      	ldr	r1, [pc, #272]	; (800c364 <tcp_create_segment+0x12c>)
 800c254:	4844      	ldr	r0, [pc, #272]	; (800c368 <tcp_create_segment+0x130>)
 800c256:	f004 fdab 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d105      	bne.n	800c26c <tcp_create_segment+0x34>
 800c260:	4b3f      	ldr	r3, [pc, #252]	; (800c360 <tcp_create_segment+0x128>)
 800c262:	22a4      	movs	r2, #164	; 0xa4
 800c264:	4941      	ldr	r1, [pc, #260]	; (800c36c <tcp_create_segment+0x134>)
 800c266:	4840      	ldr	r0, [pc, #256]	; (800c368 <tcp_create_segment+0x130>)
 800c268:	f004 fda2 	bl	8010db0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c26c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	b2db      	uxtb	r3, r3
 800c274:	f003 0304 	and.w	r3, r3, #4
 800c278:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c27a:	2003      	movs	r0, #3
 800c27c:	f7fa fd00 	bl	8006c80 <memp_malloc>
 800c280:	6138      	str	r0, [r7, #16]
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d104      	bne.n	800c292 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c288:	68b8      	ldr	r0, [r7, #8]
 800c28a:	f7fb fbdf 	bl	8007a4c <pbuf_free>
    return NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	e061      	b.n	800c356 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c298:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	891a      	ldrh	r2, [r3, #8]
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d205      	bcs.n	800c2be <tcp_create_segment+0x86>
 800c2b2:	4b2b      	ldr	r3, [pc, #172]	; (800c360 <tcp_create_segment+0x128>)
 800c2b4:	22b0      	movs	r2, #176	; 0xb0
 800c2b6:	492e      	ldr	r1, [pc, #184]	; (800c370 <tcp_create_segment+0x138>)
 800c2b8:	482b      	ldr	r0, [pc, #172]	; (800c368 <tcp_create_segment+0x130>)
 800c2ba:	f004 fd79 	bl	8010db0 <iprintf>
  seg->len = p->tot_len - optlen;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	891a      	ldrh	r2, [r3, #8]
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c2ce:	2114      	movs	r1, #20
 800c2d0:	68b8      	ldr	r0, [r7, #8]
 800c2d2:	f7fb fb25 	bl	8007920 <pbuf_add_header>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d004      	beq.n	800c2e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c2dc:	6938      	ldr	r0, [r7, #16]
 800c2de:	f7fc ffe2 	bl	80092a6 <tcp_seg_free>
    return NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e037      	b.n	800c356 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8ada      	ldrh	r2, [r3, #22]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	68dc      	ldr	r4, [r3, #12]
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	f7fa f813 	bl	8006324 <lwip_htons>
 800c2fe:	4603      	mov	r3, r0
 800c300:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8b1a      	ldrh	r2, [r3, #24]
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	68dc      	ldr	r4, [r3, #12]
 800c30a:	4610      	mov	r0, r2
 800c30c:	f7fa f80a 	bl	8006324 <lwip_htons>
 800c310:	4603      	mov	r3, r0
 800c312:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	68dc      	ldr	r4, [r3, #12]
 800c318:	6838      	ldr	r0, [r7, #0]
 800c31a:	f7fa f818 	bl	800634e <lwip_htonl>
 800c31e:	4603      	mov	r3, r0
 800c320:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	089b      	lsrs	r3, r3, #2
 800c326:	b2db      	uxtb	r3, r3
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3305      	adds	r3, #5
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	031b      	lsls	r3, r3, #12
 800c330:	b29a      	uxth	r2, r3
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	b29b      	uxth	r3, r3
 800c336:	4313      	orrs	r3, r2
 800c338:	b29a      	uxth	r2, r3
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	68dc      	ldr	r4, [r3, #12]
 800c33e:	4610      	mov	r0, r2
 800c340:	f7f9 fff0 	bl	8006324 <lwip_htons>
 800c344:	4603      	mov	r3, r0
 800c346:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	749a      	strb	r2, [r3, #18]
 800c350:	2200      	movs	r2, #0
 800c352:	74da      	strb	r2, [r3, #19]
  return seg;
 800c354:	693b      	ldr	r3, [r7, #16]
}
 800c356:	4618      	mov	r0, r3
 800c358:	371c      	adds	r7, #28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd90      	pop	{r4, r7, pc}
 800c35e:	bf00      	nop
 800c360:	080134fc 	.word	0x080134fc
 800c364:	08013530 	.word	0x08013530
 800c368:	08013550 	.word	0x08013550
 800c36c:	08013578 	.word	0x08013578
 800c370:	0801359c 	.word	0x0801359c

0800c374 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	607b      	str	r3, [r7, #4]
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]
 800c380:	460b      	mov	r3, r1
 800c382:	81bb      	strh	r3, [r7, #12]
 800c384:	4613      	mov	r3, r2
 800c386:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c388:	89bb      	ldrh	r3, [r7, #12]
 800c38a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d105      	bne.n	800c39e <tcp_pbuf_prealloc+0x2a>
 800c392:	4b30      	ldr	r3, [pc, #192]	; (800c454 <tcp_pbuf_prealloc+0xe0>)
 800c394:	22e8      	movs	r2, #232	; 0xe8
 800c396:	4930      	ldr	r1, [pc, #192]	; (800c458 <tcp_pbuf_prealloc+0xe4>)
 800c398:	4830      	ldr	r0, [pc, #192]	; (800c45c <tcp_pbuf_prealloc+0xe8>)
 800c39a:	f004 fd09 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <tcp_pbuf_prealloc+0x3c>
 800c3a4:	4b2b      	ldr	r3, [pc, #172]	; (800c454 <tcp_pbuf_prealloc+0xe0>)
 800c3a6:	22e9      	movs	r2, #233	; 0xe9
 800c3a8:	492d      	ldr	r1, [pc, #180]	; (800c460 <tcp_pbuf_prealloc+0xec>)
 800c3aa:	482c      	ldr	r0, [pc, #176]	; (800c45c <tcp_pbuf_prealloc+0xe8>)
 800c3ac:	f004 fd00 	bl	8010db0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c3b0:	89ba      	ldrh	r2, [r7, #12]
 800c3b2:	897b      	ldrh	r3, [r7, #10]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d221      	bcs.n	800c3fc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c3b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3bc:	f003 0302 	and.w	r3, r3, #2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d111      	bne.n	800c3e8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	8b5b      	ldrh	r3, [r3, #26]
 800c3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d115      	bne.n	800c3fc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c3d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d007      	beq.n	800c3e8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d103      	bne.n	800c3e8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c3e8:	89bb      	ldrh	r3, [r7, #12]
 800c3ea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c3ee:	f023 0203 	bic.w	r2, r3, #3
 800c3f2:	897b      	ldrh	r3, [r7, #10]
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	bf28      	it	cs
 800c3f8:	4613      	movcs	r3, r2
 800c3fa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c3fc:	8af9      	ldrh	r1, [r7, #22]
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c404:	4618      	mov	r0, r3
 800c406:	f7fb f83d 	bl	8007484 <pbuf_alloc>
 800c40a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	e019      	b.n	800c44a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d006      	beq.n	800c42c <tcp_pbuf_prealloc+0xb8>
 800c41e:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <tcp_pbuf_prealloc+0xe0>)
 800c420:	f240 120b 	movw	r2, #267	; 0x10b
 800c424:	490f      	ldr	r1, [pc, #60]	; (800c464 <tcp_pbuf_prealloc+0xf0>)
 800c426:	480d      	ldr	r0, [pc, #52]	; (800c45c <tcp_pbuf_prealloc+0xe8>)
 800c428:	f004 fcc2 	bl	8010db0 <iprintf>
  *oversize = p->len - length;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	895a      	ldrh	r2, [r3, #10]
 800c430:	89bb      	ldrh	r3, [r7, #12]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	89ba      	ldrh	r2, [r7, #12]
 800c43e:	811a      	strh	r2, [r3, #8]
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	891a      	ldrh	r2, [r3, #8]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	815a      	strh	r2, [r3, #10]
  return p;
 800c448:	693b      	ldr	r3, [r7, #16]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	080134fc 	.word	0x080134fc
 800c458:	080135b4 	.word	0x080135b4
 800c45c:	08013550 	.word	0x08013550
 800c460:	080135d8 	.word	0x080135d8
 800c464:	080135f8 	.word	0x080135f8

0800c468 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d106      	bne.n	800c488 <tcp_write_checks+0x20>
 800c47a:	4b33      	ldr	r3, [pc, #204]	; (800c548 <tcp_write_checks+0xe0>)
 800c47c:	f240 1233 	movw	r2, #307	; 0x133
 800c480:	4932      	ldr	r1, [pc, #200]	; (800c54c <tcp_write_checks+0xe4>)
 800c482:	4833      	ldr	r0, [pc, #204]	; (800c550 <tcp_write_checks+0xe8>)
 800c484:	f004 fc94 	bl	8010db0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	7d1b      	ldrb	r3, [r3, #20]
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d00e      	beq.n	800c4ae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c494:	2b07      	cmp	r3, #7
 800c496:	d00a      	beq.n	800c4ae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d006      	beq.n	800c4ae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d002      	beq.n	800c4ae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c4a8:	f06f 030a 	mvn.w	r3, #10
 800c4ac:	e048      	b.n	800c540 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c4ae:	887b      	ldrh	r3, [r7, #2]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <tcp_write_checks+0x50>
    return ERR_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	e043      	b.n	800c540 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c4be:	887a      	ldrh	r2, [r7, #2]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d909      	bls.n	800c4d8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	8b5b      	ldrh	r3, [r3, #26]
 800c4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d6:	e033      	b.n	800c540 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4de:	2b08      	cmp	r3, #8
 800c4e0:	d909      	bls.n	800c4f6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	8b5b      	ldrh	r3, [r3, #26]
 800c4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f4:	e024      	b.n	800c540 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00f      	beq.n	800c520 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11a      	bne.n	800c53e <tcp_write_checks+0xd6>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d116      	bne.n	800c53e <tcp_write_checks+0xd6>
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <tcp_write_checks+0xe0>)
 800c512:	f240 1255 	movw	r2, #341	; 0x155
 800c516:	490f      	ldr	r1, [pc, #60]	; (800c554 <tcp_write_checks+0xec>)
 800c518:	480d      	ldr	r0, [pc, #52]	; (800c550 <tcp_write_checks+0xe8>)
 800c51a:	f004 fc49 	bl	8010db0 <iprintf>
 800c51e:	e00e      	b.n	800c53e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c524:	2b00      	cmp	r3, #0
 800c526:	d103      	bne.n	800c530 <tcp_write_checks+0xc8>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d006      	beq.n	800c53e <tcp_write_checks+0xd6>
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <tcp_write_checks+0xe0>)
 800c532:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c536:	4908      	ldr	r1, [pc, #32]	; (800c558 <tcp_write_checks+0xf0>)
 800c538:	4805      	ldr	r0, [pc, #20]	; (800c550 <tcp_write_checks+0xe8>)
 800c53a:	f004 fc39 	bl	8010db0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	080134fc 	.word	0x080134fc
 800c54c:	0801360c 	.word	0x0801360c
 800c550:	08013550 	.word	0x08013550
 800c554:	0801362c 	.word	0x0801362c
 800c558:	08013668 	.word	0x08013668

0800c55c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c55c:	b590      	push	{r4, r7, lr}
 800c55e:	b09b      	sub	sp, #108	; 0x6c
 800c560:	af04      	add	r7, sp, #16
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4611      	mov	r1, r2
 800c568:	461a      	mov	r2, r3
 800c56a:	460b      	mov	r3, r1
 800c56c:	80fb      	strh	r3, [r7, #6]
 800c56e:	4613      	mov	r3, r2
 800c570:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	653b      	str	r3, [r7, #80]	; 0x50
 800c57a:	2300      	movs	r3, #0
 800c57c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c57e:	2300      	movs	r3, #0
 800c580:	64bb      	str	r3, [r7, #72]	; 0x48
 800c582:	2300      	movs	r3, #0
 800c584:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c586:	2300      	movs	r3, #0
 800c588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <tcp_write+0x5c>
 800c5a4:	4ba4      	ldr	r3, [pc, #656]	; (800c838 <tcp_write+0x2dc>)
 800c5a6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c5aa:	49a4      	ldr	r1, [pc, #656]	; (800c83c <tcp_write+0x2e0>)
 800c5ac:	48a4      	ldr	r0, [pc, #656]	; (800c840 <tcp_write+0x2e4>)
 800c5ae:	f004 fbff 	bl	8010db0 <iprintf>
 800c5b2:	f06f 030f 	mvn.w	r3, #15
 800c5b6:	e32a      	b.n	800cc0e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5be:	085b      	lsrs	r3, r3, #1
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	bf28      	it	cs
 800c5ca:	4613      	movcs	r3, r2
 800c5cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d102      	bne.n	800c5da <tcp_write+0x7e>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5d8:	e000      	b.n	800c5dc <tcp_write+0x80>
 800c5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d109      	bne.n	800c5f8 <tcp_write+0x9c>
 800c5e4:	4b94      	ldr	r3, [pc, #592]	; (800c838 <tcp_write+0x2dc>)
 800c5e6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c5ea:	4996      	ldr	r1, [pc, #600]	; (800c844 <tcp_write+0x2e8>)
 800c5ec:	4894      	ldr	r0, [pc, #592]	; (800c840 <tcp_write+0x2e4>)
 800c5ee:	f004 fbdf 	bl	8010db0 <iprintf>
 800c5f2:	f06f 030f 	mvn.w	r3, #15
 800c5f6:	e30a      	b.n	800cc0e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c5f8:	88fb      	ldrh	r3, [r7, #6]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7ff ff33 	bl	800c468 <tcp_write_checks>
 800c602:	4603      	mov	r3, r0
 800c604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c608:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <tcp_write+0xba>
    return err;
 800c610:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c614:	e2fb      	b.n	800cc0e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c61c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c620:	2300      	movs	r3, #0
 800c622:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 80f6 	beq.w	800c81c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c634:	653b      	str	r3, [r7, #80]	; 0x50
 800c636:	e002      	b.n	800c63e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f8      	bne.n	800c638 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c648:	7a9b      	ldrb	r3, [r3, #10]
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	f003 0304 	and.w	r3, r3, #4
 800c652:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c654:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c658:	891b      	ldrh	r3, [r3, #8]
 800c65a:	4619      	mov	r1, r3
 800c65c:	8c3b      	ldrh	r3, [r7, #32]
 800c65e:	440b      	add	r3, r1
 800c660:	429a      	cmp	r2, r3
 800c662:	da06      	bge.n	800c672 <tcp_write+0x116>
 800c664:	4b74      	ldr	r3, [pc, #464]	; (800c838 <tcp_write+0x2dc>)
 800c666:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c66a:	4977      	ldr	r1, [pc, #476]	; (800c848 <tcp_write+0x2ec>)
 800c66c:	4874      	ldr	r0, [pc, #464]	; (800c840 <tcp_write+0x2e4>)
 800c66e:	f004 fb9f 	bl	8010db0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c674:	891a      	ldrh	r2, [r3, #8]
 800c676:	8c3b      	ldrh	r3, [r7, #32]
 800c678:	4413      	add	r3, r2
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c688:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c68a:	8a7b      	ldrh	r3, [r7, #18]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d026      	beq.n	800c6de <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c690:	8a7b      	ldrh	r3, [r7, #18]
 800c692:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c694:	429a      	cmp	r2, r3
 800c696:	d206      	bcs.n	800c6a6 <tcp_write+0x14a>
 800c698:	4b67      	ldr	r3, [pc, #412]	; (800c838 <tcp_write+0x2dc>)
 800c69a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c69e:	496b      	ldr	r1, [pc, #428]	; (800c84c <tcp_write+0x2f0>)
 800c6a0:	4867      	ldr	r0, [pc, #412]	; (800c840 <tcp_write+0x2e4>)
 800c6a2:	f004 fb85 	bl	8010db0 <iprintf>
      seg = last_unsent;
 800c6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c6aa:	8a7b      	ldrh	r3, [r7, #18]
 800c6ac:	88fa      	ldrh	r2, [r7, #6]
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	bf28      	it	cs
 800c6b2:	4613      	movcs	r3, r2
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	bf28      	it	cs
 800c6bc:	4613      	movcs	r3, r2
 800c6be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c6c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c6cc:	8a7a      	ldrh	r2, [r7, #18]
 800c6ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c6d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c6de:	8a7b      	ldrh	r3, [r7, #18]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <tcp_write+0x1a0>
 800c6e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6e8:	88fb      	ldrh	r3, [r7, #6]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d006      	beq.n	800c6fc <tcp_write+0x1a0>
 800c6ee:	4b52      	ldr	r3, [pc, #328]	; (800c838 <tcp_write+0x2dc>)
 800c6f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6f4:	4956      	ldr	r1, [pc, #344]	; (800c850 <tcp_write+0x2f4>)
 800c6f6:	4852      	ldr	r0, [pc, #328]	; (800c840 <tcp_write+0x2e4>)
 800c6f8:	f004 fb5a 	bl	8010db0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c6fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c700:	88fb      	ldrh	r3, [r7, #6]
 800c702:	429a      	cmp	r2, r3
 800c704:	f080 8167 	bcs.w	800c9d6 <tcp_write+0x47a>
 800c708:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 8163 	beq.w	800c9d6 <tcp_write+0x47a>
 800c710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c712:	891b      	ldrh	r3, [r3, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 815e 	beq.w	800c9d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c71a:	88fa      	ldrh	r2, [r7, #6]
 800c71c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c720:	1ad2      	subs	r2, r2, r3
 800c722:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c724:	4293      	cmp	r3, r2
 800c726:	bfa8      	it	ge
 800c728:	4613      	movge	r3, r2
 800c72a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c72e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c730:	797b      	ldrb	r3, [r7, #5]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d027      	beq.n	800c78a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c73a:	f107 0012 	add.w	r0, r7, #18
 800c73e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c740:	8bf9      	ldrh	r1, [r7, #30]
 800c742:	2301      	movs	r3, #1
 800c744:	9302      	str	r3, [sp, #8]
 800c746:	797b      	ldrb	r3, [r7, #5]
 800c748:	9301      	str	r3, [sp, #4]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	4603      	mov	r3, r0
 800c750:	2000      	movs	r0, #0
 800c752:	f7ff fe0f 	bl	800c374 <tcp_pbuf_prealloc>
 800c756:	6578      	str	r0, [r7, #84]	; 0x54
 800c758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 8225 	beq.w	800cbaa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c762:	6858      	ldr	r0, [r3, #4]
 800c764:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	4413      	add	r3, r2
 800c76c:	8bfa      	ldrh	r2, [r7, #30]
 800c76e:	4619      	mov	r1, r3
 800c770:	f004 fc17 	bl	8010fa2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c774:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c776:	f7fb f9f1 	bl	8007b5c <pbuf_clen>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461a      	mov	r2, r3
 800c77e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c782:	4413      	add	r3, r2
 800c784:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c788:	e041      	b.n	800c80e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	637b      	str	r3, [r7, #52]	; 0x34
 800c790:	e002      	b.n	800c798 <tcp_write+0x23c>
 800c792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	637b      	str	r3, [r7, #52]	; 0x34
 800c798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f8      	bne.n	800c792 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a2:	7b1b      	ldrb	r3, [r3, #12]
 800c7a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d115      	bne.n	800c7d8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b2:	8952      	ldrh	r2, [r2, #10]
 800c7b4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d10d      	bne.n	800c7d8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c7bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d006      	beq.n	800c7d2 <tcp_write+0x276>
 800c7c4:	4b1c      	ldr	r3, [pc, #112]	; (800c838 <tcp_write+0x2dc>)
 800c7c6:	f240 2231 	movw	r2, #561	; 0x231
 800c7ca:	4922      	ldr	r1, [pc, #136]	; (800c854 <tcp_write+0x2f8>)
 800c7cc:	481c      	ldr	r0, [pc, #112]	; (800c840 <tcp_write+0x2e4>)
 800c7ce:	f004 faef 	bl	8010db0 <iprintf>
          extendlen = seglen;
 800c7d2:	8bfb      	ldrh	r3, [r7, #30]
 800c7d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c7d6:	e01a      	b.n	800c80e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c7d8:	8bfb      	ldrh	r3, [r7, #30]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4619      	mov	r1, r3
 800c7de:	2000      	movs	r0, #0
 800c7e0:	f7fa fe50 	bl	8007484 <pbuf_alloc>
 800c7e4:	6578      	str	r0, [r7, #84]	; 0x54
 800c7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 81e0 	beq.w	800cbae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c7ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7f8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c7fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7fc:	f7fb f9ae 	bl	8007b5c <pbuf_clen>
 800c800:	4603      	mov	r3, r0
 800c802:	461a      	mov	r2, r3
 800c804:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c808:	4413      	add	r3, r2
 800c80a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c80e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c812:	8bfb      	ldrh	r3, [r7, #30]
 800c814:	4413      	add	r3, r2
 800c816:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c81a:	e0dc      	b.n	800c9d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 80d7 	beq.w	800c9d6 <tcp_write+0x47a>
 800c828:	4b03      	ldr	r3, [pc, #12]	; (800c838 <tcp_write+0x2dc>)
 800c82a:	f240 224a 	movw	r2, #586	; 0x24a
 800c82e:	490a      	ldr	r1, [pc, #40]	; (800c858 <tcp_write+0x2fc>)
 800c830:	4803      	ldr	r0, [pc, #12]	; (800c840 <tcp_write+0x2e4>)
 800c832:	f004 fabd 	bl	8010db0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c836:	e0ce      	b.n	800c9d6 <tcp_write+0x47a>
 800c838:	080134fc 	.word	0x080134fc
 800c83c:	0801369c 	.word	0x0801369c
 800c840:	08013550 	.word	0x08013550
 800c844:	080136b4 	.word	0x080136b4
 800c848:	080136e8 	.word	0x080136e8
 800c84c:	08013700 	.word	0x08013700
 800c850:	08013720 	.word	0x08013720
 800c854:	08013740 	.word	0x08013740
 800c858:	0801376c 	.word	0x0801376c
    struct pbuf *p;
    u16_t left = len - pos;
 800c85c:	88fa      	ldrh	r2, [r7, #6]
 800c85e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c866:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c872:	8b7a      	ldrh	r2, [r7, #26]
 800c874:	8bbb      	ldrh	r3, [r7, #28]
 800c876:	4293      	cmp	r3, r2
 800c878:	bf28      	it	cs
 800c87a:	4613      	movcs	r3, r2
 800c87c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c87e:	797b      	ldrb	r3, [r7, #5]
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	d036      	beq.n	800c8f6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c888:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	8b3b      	ldrh	r3, [r7, #24]
 800c890:	4413      	add	r3, r2
 800c892:	b299      	uxth	r1, r3
 800c894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c896:	2b00      	cmp	r3, #0
 800c898:	bf0c      	ite	eq
 800c89a:	2301      	moveq	r3, #1
 800c89c:	2300      	movne	r3, #0
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f107 0012 	add.w	r0, r7, #18
 800c8a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	797b      	ldrb	r3, [r7, #5]
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2036      	movs	r0, #54	; 0x36
 800c8b4:	f7ff fd5e 	bl	800c374 <tcp_pbuf_prealloc>
 800c8b8:	6338      	str	r0, [r7, #48]	; 0x30
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 8178 	beq.w	800cbb2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	895b      	ldrh	r3, [r3, #10]
 800c8c6:	8b3a      	ldrh	r2, [r7, #24]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d906      	bls.n	800c8da <tcp_write+0x37e>
 800c8cc:	4b8c      	ldr	r3, [pc, #560]	; (800cb00 <tcp_write+0x5a4>)
 800c8ce:	f240 2266 	movw	r2, #614	; 0x266
 800c8d2:	498c      	ldr	r1, [pc, #560]	; (800cb04 <tcp_write+0x5a8>)
 800c8d4:	488c      	ldr	r0, [pc, #560]	; (800cb08 <tcp_write+0x5ac>)
 800c8d6:	f004 fa6b 	bl	8010db0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8e2:	18d0      	adds	r0, r2, r3
 800c8e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	8b3a      	ldrh	r2, [r7, #24]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f004 fb57 	bl	8010fa2 <memcpy>
 800c8f4:	e02f      	b.n	800c956 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c8f6:	8a7b      	ldrh	r3, [r7, #18]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d006      	beq.n	800c90a <tcp_write+0x3ae>
 800c8fc:	4b80      	ldr	r3, [pc, #512]	; (800cb00 <tcp_write+0x5a4>)
 800c8fe:	f240 2271 	movw	r2, #625	; 0x271
 800c902:	4982      	ldr	r1, [pc, #520]	; (800cb0c <tcp_write+0x5b0>)
 800c904:	4880      	ldr	r0, [pc, #512]	; (800cb08 <tcp_write+0x5ac>)
 800c906:	f004 fa53 	bl	8010db0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c90a:	8b3b      	ldrh	r3, [r7, #24]
 800c90c:	2201      	movs	r2, #1
 800c90e:	4619      	mov	r1, r3
 800c910:	2036      	movs	r0, #54	; 0x36
 800c912:	f7fa fdb7 	bl	8007484 <pbuf_alloc>
 800c916:	6178      	str	r0, [r7, #20]
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 814b 	beq.w	800cbb6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	441a      	add	r2, r3
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c92c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c930:	b29b      	uxth	r3, r3
 800c932:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c936:	4619      	mov	r1, r3
 800c938:	2036      	movs	r0, #54	; 0x36
 800c93a:	f7fa fda3 	bl	8007484 <pbuf_alloc>
 800c93e:	6338      	str	r0, [r7, #48]	; 0x30
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c946:	6978      	ldr	r0, [r7, #20]
 800c948:	f7fb f880 	bl	8007a4c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c94c:	e136      	b.n	800cbbc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c94e:	6979      	ldr	r1, [r7, #20]
 800c950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c952:	f7fb f93d 	bl	8007bd0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c958:	f7fb f900 	bl	8007b5c <pbuf_clen>
 800c95c:	4603      	mov	r3, r0
 800c95e:	461a      	mov	r2, r3
 800c960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c964:	4413      	add	r3, r2
 800c966:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c96a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c96e:	2b09      	cmp	r3, #9
 800c970:	d903      	bls.n	800c97a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c974:	f7fb f86a 	bl	8007a4c <pbuf_free>
      goto memerr;
 800c978:	e120      	b.n	800cbbc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c97e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c982:	441a      	add	r2, r3
 800c984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4613      	mov	r3, r2
 800c98c:	2200      	movs	r2, #0
 800c98e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fc51 	bl	800c238 <tcp_create_segment>
 800c996:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 810d 	beq.w	800cbba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d102      	bne.n	800c9ac <tcp_write+0x450>
      queue = seg;
 800c9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c9aa:	e00c      	b.n	800c9c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <tcp_write+0x464>
 800c9b2:	4b53      	ldr	r3, [pc, #332]	; (800cb00 <tcp_write+0x5a4>)
 800c9b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c9b8:	4955      	ldr	r1, [pc, #340]	; (800cb10 <tcp_write+0x5b4>)
 800c9ba:	4853      	ldr	r0, [pc, #332]	; (800cb08 <tcp_write+0x5ac>)
 800c9bc:	f004 f9f8 	bl	8010db0 <iprintf>
      prev_seg->next = seg;
 800c9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c9ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9ce:	8b3b      	ldrh	r3, [r7, #24]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c9d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9da:	88fb      	ldrh	r3, [r7, #6]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	f4ff af3d 	bcc.w	800c85c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c9e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d02c      	beq.n	800ca42 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9ee:	e01e      	b.n	800ca2e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	891a      	ldrh	r2, [r3, #8]
 800c9f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9f6:	4413      	add	r3, r2
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d110      	bne.n	800ca28 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca0c:	8952      	ldrh	r2, [r2, #10]
 800ca0e:	4413      	add	r3, r2
 800ca10:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f004 fac4 	bl	8010fa2 <memcpy>
        p->len += oversize_used;
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	895a      	ldrh	r2, [r3, #10]
 800ca1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca20:	4413      	add	r3, r2
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1dd      	bne.n	800c9f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ca34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca36:	891a      	ldrh	r2, [r3, #8]
 800ca38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca3a:	4413      	add	r3, r2
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ca42:	8a7a      	ldrh	r2, [r7, #18]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ca4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d018      	beq.n	800ca82 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ca50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <tcp_write+0x508>
 800ca56:	4b2a      	ldr	r3, [pc, #168]	; (800cb00 <tcp_write+0x5a4>)
 800ca58:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ca5c:	492d      	ldr	r1, [pc, #180]	; (800cb14 <tcp_write+0x5b8>)
 800ca5e:	482a      	ldr	r0, [pc, #168]	; (800cb08 <tcp_write+0x5ac>)
 800ca60:	f004 f9a6 	bl	8010db0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ca64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fb f8b0 	bl	8007bd0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ca70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca72:	891a      	ldrh	r2, [r3, #8]
 800ca74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca76:	891b      	ldrh	r3, [r3, #8]
 800ca78:	4413      	add	r3, r2
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7e:	811a      	strh	r2, [r3, #8]
 800ca80:	e037      	b.n	800caf2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ca82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d034      	beq.n	800caf2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ca88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d003      	beq.n	800ca96 <tcp_write+0x53a>
 800ca8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <tcp_write+0x548>
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <tcp_write+0x5a4>)
 800ca98:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ca9c:	491e      	ldr	r1, [pc, #120]	; (800cb18 <tcp_write+0x5bc>)
 800ca9e:	481a      	ldr	r0, [pc, #104]	; (800cb08 <tcp_write+0x5ac>)
 800caa0:	f004 f986 	bl	8010db0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800caa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800caaa:	e009      	b.n	800cac0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	891a      	ldrh	r2, [r3, #8]
 800cab0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cab2:	4413      	add	r3, r2
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1f1      	bne.n	800caac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	891a      	ldrh	r2, [r3, #8]
 800cacc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cace:	4413      	add	r3, r2
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	895a      	ldrh	r2, [r3, #10]
 800cada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cadc:	4413      	add	r3, r2
 800cade:	b29a      	uxth	r2, r3
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae6:	891a      	ldrh	r2, [r3, #8]
 800cae8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800caea:	4413      	add	r3, r2
 800caec:	b29a      	uxth	r2, r3
 800caee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800caf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d111      	bne.n	800cb1c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cafc:	66da      	str	r2, [r3, #108]	; 0x6c
 800cafe:	e010      	b.n	800cb22 <tcp_write+0x5c6>
 800cb00:	080134fc 	.word	0x080134fc
 800cb04:	0801379c 	.word	0x0801379c
 800cb08:	08013550 	.word	0x08013550
 800cb0c:	080137dc 	.word	0x080137dc
 800cb10:	080137ec 	.word	0x080137ec
 800cb14:	08013800 	.word	0x08013800
 800cb18:	08013838 	.word	0x08013838
  } else {
    last_unsent->next = queue;
 800cb1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb20:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	441a      	add	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cb34:	88fb      	ldrh	r3, [r7, #6]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cb46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00e      	beq.n	800cb72 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <tcp_write+0x616>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d106      	bne.n	800cb72 <tcp_write+0x616>
 800cb64:	4b2c      	ldr	r3, [pc, #176]	; (800cc18 <tcp_write+0x6bc>)
 800cb66:	f240 3212 	movw	r2, #786	; 0x312
 800cb6a:	492c      	ldr	r1, [pc, #176]	; (800cc1c <tcp_write+0x6c0>)
 800cb6c:	482c      	ldr	r0, [pc, #176]	; (800cc20 <tcp_write+0x6c4>)
 800cb6e:	f004 f91f 	bl	8010db0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d016      	beq.n	800cba6 <tcp_write+0x64a>
 800cb78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d012      	beq.n	800cba6 <tcp_write+0x64a>
 800cb80:	797b      	ldrb	r3, [r7, #5]
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10d      	bne.n	800cba6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	899b      	ldrh	r3, [r3, #12]
 800cb90:	b29c      	uxth	r4, r3
 800cb92:	2008      	movs	r0, #8
 800cb94:	f7f9 fbc6 	bl	8006324 <lwip_htons>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4322      	orrs	r2, r4
 800cba2:	b292      	uxth	r2, r2
 800cba4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cba6:	2300      	movs	r3, #0
 800cba8:	e031      	b.n	800cc0e <tcp_write+0x6b2>
          goto memerr;
 800cbaa:	bf00      	nop
 800cbac:	e006      	b.n	800cbbc <tcp_write+0x660>
            goto memerr;
 800cbae:	bf00      	nop
 800cbb0:	e004      	b.n	800cbbc <tcp_write+0x660>
        goto memerr;
 800cbb2:	bf00      	nop
 800cbb4:	e002      	b.n	800cbbc <tcp_write+0x660>
        goto memerr;
 800cbb6:	bf00      	nop
 800cbb8:	e000      	b.n	800cbbc <tcp_write+0x660>
      goto memerr;
 800cbba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	8b5b      	ldrh	r3, [r3, #26]
 800cbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800cbd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cbd2:	f7fa ff3b 	bl	8007a4c <pbuf_free>
  }
  if (queue != NULL) {
 800cbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800cbdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbde:	f7fc fb4d 	bl	800927c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00e      	beq.n	800cc0a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <tcp_write+0x6ae>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d106      	bne.n	800cc0a <tcp_write+0x6ae>
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <tcp_write+0x6bc>)
 800cbfe:	f240 3227 	movw	r2, #807	; 0x327
 800cc02:	4906      	ldr	r1, [pc, #24]	; (800cc1c <tcp_write+0x6c0>)
 800cc04:	4806      	ldr	r0, [pc, #24]	; (800cc20 <tcp_write+0x6c4>)
 800cc06:	f004 f8d3 	bl	8010db0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cc0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	375c      	adds	r7, #92	; 0x5c
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd90      	pop	{r4, r7, pc}
 800cc16:	bf00      	nop
 800cc18:	080134fc 	.word	0x080134fc
 800cc1c:	08013870 	.word	0x08013870
 800cc20:	08013550 	.word	0x08013550

0800cc24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b08b      	sub	sp, #44	; 0x2c
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61fb      	str	r3, [r7, #28]
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <tcp_split_unsent_seg+0x2c>
 800cc42:	4b95      	ldr	r3, [pc, #596]	; (800ce98 <tcp_split_unsent_seg+0x274>)
 800cc44:	f240 324b 	movw	r2, #843	; 0x34b
 800cc48:	4994      	ldr	r1, [pc, #592]	; (800ce9c <tcp_split_unsent_seg+0x278>)
 800cc4a:	4895      	ldr	r0, [pc, #596]	; (800cea0 <tcp_split_unsent_seg+0x27c>)
 800cc4c:	f004 f8b0 	bl	8010db0 <iprintf>

  useg = pcb->unsent;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e116      	b.n	800ce90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cc62:	887b      	ldrh	r3, [r7, #2]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d109      	bne.n	800cc7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cc68:	4b8b      	ldr	r3, [pc, #556]	; (800ce98 <tcp_split_unsent_seg+0x274>)
 800cc6a:	f240 3253 	movw	r2, #851	; 0x353
 800cc6e:	498d      	ldr	r1, [pc, #564]	; (800cea4 <tcp_split_unsent_seg+0x280>)
 800cc70:	488b      	ldr	r0, [pc, #556]	; (800cea0 <tcp_split_unsent_seg+0x27c>)
 800cc72:	f004 f89d 	bl	8010db0 <iprintf>
    return ERR_VAL;
 800cc76:	f06f 0305 	mvn.w	r3, #5
 800cc7a:	e109      	b.n	800ce90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	887a      	ldrh	r2, [r7, #2]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d301      	bcc.n	800cc8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e102      	b.n	800ce90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc8e:	887a      	ldrh	r2, [r7, #2]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d906      	bls.n	800cca2 <tcp_split_unsent_seg+0x7e>
 800cc94:	4b80      	ldr	r3, [pc, #512]	; (800ce98 <tcp_split_unsent_seg+0x274>)
 800cc96:	f240 325b 	movw	r2, #859	; 0x35b
 800cc9a:	4983      	ldr	r1, [pc, #524]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800cc9c:	4880      	ldr	r0, [pc, #512]	; (800cea0 <tcp_split_unsent_seg+0x27c>)
 800cc9e:	f004 f887 	bl	8010db0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	891b      	ldrh	r3, [r3, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <tcp_split_unsent_seg+0x94>
 800ccaa:	4b7b      	ldr	r3, [pc, #492]	; (800ce98 <tcp_split_unsent_seg+0x274>)
 800ccac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ccb0:	497e      	ldr	r1, [pc, #504]	; (800ceac <tcp_split_unsent_seg+0x288>)
 800ccb2:	487b      	ldr	r0, [pc, #492]	; (800cea0 <tcp_split_unsent_seg+0x27c>)
 800ccb4:	f004 f87c 	bl	8010db0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	7a9b      	ldrb	r3, [r3, #10]
 800ccbc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	891a      	ldrh	r2, [r3, #8]
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	89bb      	ldrh	r3, [r7, #12]
 800ccda:	4413      	add	r3, r2
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cce2:	4619      	mov	r1, r3
 800cce4:	2036      	movs	r0, #54	; 0x36
 800cce6:	f7fa fbcd 	bl	8007484 <pbuf_alloc>
 800ccea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 80b7 	beq.w	800ce62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	891a      	ldrh	r2, [r3, #8]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	4413      	add	r3, r2
 800cd06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	6858      	ldr	r0, [r3, #4]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	18d1      	adds	r1, r2, r3
 800cd14:	897b      	ldrh	r3, [r7, #10]
 800cd16:	89ba      	ldrh	r2, [r7, #12]
 800cd18:	f7fb f882 	bl	8007e20 <pbuf_copy_partial>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	461a      	mov	r2, r3
 800cd20:	89bb      	ldrh	r3, [r7, #12]
 800cd22:	4293      	cmp	r3, r2
 800cd24:	f040 809f 	bne.w	800ce66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7f9 faf7 	bl	8006324 <lwip_htons>
 800cd36:	4603      	mov	r3, r0
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cd40:	2300      	movs	r3, #0
 800cd42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cd44:	7efb      	ldrb	r3, [r7, #27]
 800cd46:	f003 0308 	and.w	r3, r3, #8
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cd4e:	7efb      	ldrb	r3, [r7, #27]
 800cd50:	f023 0308 	bic.w	r3, r3, #8
 800cd54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cd56:	7ebb      	ldrb	r3, [r7, #26]
 800cd58:	f043 0308 	orr.w	r3, r3, #8
 800cd5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cd5e:	7efb      	ldrb	r3, [r7, #27]
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cd68:	7efb      	ldrb	r3, [r7, #27]
 800cd6a:	f023 0301 	bic.w	r3, r3, #1
 800cd6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cd70:	7ebb      	ldrb	r3, [r7, #26]
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f9 fae5 	bl	800634e <lwip_htonl>
 800cd84:	4602      	mov	r2, r0
 800cd86:	887b      	ldrh	r3, [r7, #2]
 800cd88:	18d1      	adds	r1, r2, r3
 800cd8a:	7eba      	ldrb	r2, [r7, #26]
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	460b      	mov	r3, r1
 800cd92:	6939      	ldr	r1, [r7, #16]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7ff fa4f 	bl	800c238 <tcp_create_segment>
 800cd9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d063      	beq.n	800ce6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fa fed8 	bl	8007b5c <pbuf_clen>
 800cdac:	4603      	mov	r3, r0
 800cdae:	461a      	mov	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdb6:	1a9b      	subs	r3, r3, r2
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	6858      	ldr	r0, [r3, #4]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	891a      	ldrh	r2, [r3, #8]
 800cdca:	89bb      	ldrh	r3, [r7, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	f7fa fcb5 	bl	8007740 <pbuf_realloc>
  useg->len -= remainder;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	891a      	ldrh	r2, [r3, #8]
 800cdda:	89bb      	ldrh	r3, [r7, #12]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	b29c      	uxth	r4, r3
 800cdec:	7efb      	ldrb	r3, [r7, #27]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f9 fa97 	bl	8006324 <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	4322      	orrs	r2, r4
 800ce00:	b292      	uxth	r2, r2
 800ce02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fa fea7 	bl	8007b5c <pbuf_clen>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	461a      	mov	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce18:	4413      	add	r3, r2
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fa fe98 	bl	8007b5c <pbuf_clen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	461a      	mov	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce36:	4413      	add	r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d103      	bne.n	800ce5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e016      	b.n	800ce90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ce62:	bf00      	nop
 800ce64:	e002      	b.n	800ce6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ce66:	bf00      	nop
 800ce68:	e000      	b.n	800ce6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ce6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d006      	beq.n	800ce80 <tcp_split_unsent_seg+0x25c>
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <tcp_split_unsent_seg+0x274>)
 800ce74:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ce78:	490d      	ldr	r1, [pc, #52]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800ce7a:	4809      	ldr	r0, [pc, #36]	; (800cea0 <tcp_split_unsent_seg+0x27c>)
 800ce7c:	f003 ff98 	bl	8010db0 <iprintf>
  if (p != NULL) {
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ce86:	6938      	ldr	r0, [r7, #16]
 800ce88:	f7fa fde0 	bl	8007a4c <pbuf_free>
  }

  return ERR_MEM;
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3724      	adds	r7, #36	; 0x24
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd90      	pop	{r4, r7, pc}
 800ce98:	080134fc 	.word	0x080134fc
 800ce9c:	08013890 	.word	0x08013890
 800cea0:	08013550 	.word	0x08013550
 800cea4:	080138b4 	.word	0x080138b4
 800cea8:	080138d8 	.word	0x080138d8
 800ceac:	080138e8 	.word	0x080138e8
 800ceb0:	080138f8 	.word	0x080138f8

0800ceb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <tcp_send_fin+0x1c>
 800cec2:	4b21      	ldr	r3, [pc, #132]	; (800cf48 <tcp_send_fin+0x94>)
 800cec4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cec8:	4920      	ldr	r1, [pc, #128]	; (800cf4c <tcp_send_fin+0x98>)
 800ceca:	4821      	ldr	r0, [pc, #132]	; (800cf50 <tcp_send_fin+0x9c>)
 800cecc:	f003 ff70 	bl	8010db0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d02e      	beq.n	800cf36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	e002      	b.n	800cee6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f8      	bne.n	800cee0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	899b      	ldrh	r3, [r3, #12]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f9 fa14 	bl	8006324 <lwip_htons>
 800cefc:	4603      	mov	r3, r0
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	f003 0307 	and.w	r3, r3, #7
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d116      	bne.n	800cf36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	899b      	ldrh	r3, [r3, #12]
 800cf0e:	b29c      	uxth	r4, r3
 800cf10:	2001      	movs	r0, #1
 800cf12:	f7f9 fa07 	bl	8006324 <lwip_htons>
 800cf16:	4603      	mov	r3, r0
 800cf18:	461a      	mov	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	4322      	orrs	r2, r4
 800cf20:	b292      	uxth	r2, r2
 800cf22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8b5b      	ldrh	r3, [r3, #26]
 800cf28:	f043 0320 	orr.w	r3, r3, #32
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e004      	b.n	800cf40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf36:	2101      	movs	r1, #1
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f80b 	bl	800cf54 <tcp_enqueue_flags>
 800cf3e:	4603      	mov	r3, r0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}
 800cf48:	080134fc 	.word	0x080134fc
 800cf4c:	08013904 	.word	0x08013904
 800cf50:	08013550 	.word	0x08013550

0800cf54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	f003 0303 	and.w	r3, r3, #3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <tcp_enqueue_flags+0x2c>
 800cf72:	4b67      	ldr	r3, [pc, #412]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800cf74:	f240 4211 	movw	r2, #1041	; 0x411
 800cf78:	4966      	ldr	r1, [pc, #408]	; (800d114 <tcp_enqueue_flags+0x1c0>)
 800cf7a:	4867      	ldr	r0, [pc, #412]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800cf7c:	f003 ff18 	bl	8010db0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d106      	bne.n	800cf94 <tcp_enqueue_flags+0x40>
 800cf86:	4b62      	ldr	r3, [pc, #392]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800cf88:	f240 4213 	movw	r2, #1043	; 0x413
 800cf8c:	4963      	ldr	r1, [pc, #396]	; (800d11c <tcp_enqueue_flags+0x1c8>)
 800cf8e:	4862      	ldr	r0, [pc, #392]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800cf90:	f003 ff0e 	bl	8010db0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cf94:	78fb      	ldrb	r3, [r7, #3]
 800cf96:	f003 0302 	and.w	r3, r3, #2
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	2036      	movs	r0, #54	; 0x36
 800cfba:	f7fa fa63 	bl	8007484 <pbuf_alloc>
 800cfbe:	6138      	str	r0, [r7, #16]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	8b5b      	ldrh	r3, [r3, #26]
 800cfca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cfd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd8:	e095      	b.n	800d106 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	895a      	ldrh	r2, [r3, #10]
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d206      	bcs.n	800cff4 <tcp_enqueue_flags+0xa0>
 800cfe6:	4b4a      	ldr	r3, [pc, #296]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800cfe8:	f240 4239 	movw	r2, #1081	; 0x439
 800cfec:	494c      	ldr	r1, [pc, #304]	; (800d120 <tcp_enqueue_flags+0x1cc>)
 800cfee:	484a      	ldr	r0, [pc, #296]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800cff0:	f003 fede 	bl	8010db0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cff8:	78fa      	ldrb	r2, [r7, #3]
 800cffa:	7ffb      	ldrb	r3, [r7, #31]
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	460b      	mov	r3, r1
 800d000:	6939      	ldr	r1, [r7, #16]
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff f918 	bl	800c238 <tcp_create_segment>
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295
 800d022:	e070      	b.n	800d106 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f003 0303 	and.w	r3, r3, #3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <tcp_enqueue_flags+0xea>
 800d030:	4b37      	ldr	r3, [pc, #220]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800d032:	f240 4242 	movw	r2, #1090	; 0x442
 800d036:	493b      	ldr	r1, [pc, #236]	; (800d124 <tcp_enqueue_flags+0x1d0>)
 800d038:	4837      	ldr	r0, [pc, #220]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800d03a:	f003 feb9 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	891b      	ldrh	r3, [r3, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d006      	beq.n	800d054 <tcp_enqueue_flags+0x100>
 800d046:	4b32      	ldr	r3, [pc, #200]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800d048:	f240 4243 	movw	r2, #1091	; 0x443
 800d04c:	4936      	ldr	r1, [pc, #216]	; (800d128 <tcp_enqueue_flags+0x1d4>)
 800d04e:	4832      	ldr	r0, [pc, #200]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800d050:	f003 feae 	bl	8010db0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d103      	bne.n	800d064 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	66da      	str	r2, [r3, #108]	; 0x6c
 800d062:	e00d      	b.n	800d080 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d068:	61bb      	str	r3, [r7, #24]
 800d06a:	e002      	b.n	800d072 <tcp_enqueue_flags+0x11e>
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	61bb      	str	r3, [r7, #24]
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f8      	bne.n	800d06c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d104      	bne.n	800d09c <tcp_enqueue_flags+0x148>
 800d092:	78fb      	ldrb	r3, [r7, #3]
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8b5b      	ldrh	r3, [r3, #26]
 800d0b4:	f043 0320 	orr.w	r3, r3, #32
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fa fd4a 	bl	8007b5c <pbuf_clen>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0d2:	4413      	add	r3, r2
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00e      	beq.n	800d104 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <tcp_enqueue_flags+0x1b0>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d106      	bne.n	800d104 <tcp_enqueue_flags+0x1b0>
 800d0f6:	4b06      	ldr	r3, [pc, #24]	; (800d110 <tcp_enqueue_flags+0x1bc>)
 800d0f8:	f240 4265 	movw	r2, #1125	; 0x465
 800d0fc:	490b      	ldr	r1, [pc, #44]	; (800d12c <tcp_enqueue_flags+0x1d8>)
 800d0fe:	4806      	ldr	r0, [pc, #24]	; (800d118 <tcp_enqueue_flags+0x1c4>)
 800d100:	f003 fe56 	bl	8010db0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3720      	adds	r7, #32
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	080134fc 	.word	0x080134fc
 800d114:	08013920 	.word	0x08013920
 800d118:	08013550 	.word	0x08013550
 800d11c:	08013978 	.word	0x08013978
 800d120:	08013998 	.word	0x08013998
 800d124:	080139d4 	.word	0x080139d4
 800d128:	080139ec 	.word	0x080139ec
 800d12c:	08013a18 	.word	0x08013a18

0800d130 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d130:	b5b0      	push	{r4, r5, r7, lr}
 800d132:	b08a      	sub	sp, #40	; 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <tcp_output+0x1c>
 800d13e:	4b8a      	ldr	r3, [pc, #552]	; (800d368 <tcp_output+0x238>)
 800d140:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d144:	4989      	ldr	r1, [pc, #548]	; (800d36c <tcp_output+0x23c>)
 800d146:	488a      	ldr	r0, [pc, #552]	; (800d370 <tcp_output+0x240>)
 800d148:	f003 fe32 	bl	8010db0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7d1b      	ldrb	r3, [r3, #20]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d106      	bne.n	800d162 <tcp_output+0x32>
 800d154:	4b84      	ldr	r3, [pc, #528]	; (800d368 <tcp_output+0x238>)
 800d156:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d15a:	4986      	ldr	r1, [pc, #536]	; (800d374 <tcp_output+0x244>)
 800d15c:	4884      	ldr	r0, [pc, #528]	; (800d370 <tcp_output+0x240>)
 800d15e:	f003 fe27 	bl	8010db0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d162:	4b85      	ldr	r3, [pc, #532]	; (800d378 <tcp_output+0x248>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d101      	bne.n	800d170 <tcp_output+0x40>
    return ERR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e1ce      	b.n	800d50e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d17c:	4293      	cmp	r3, r2
 800d17e:	bf28      	it	cs
 800d180:	4613      	movcs	r3, r2
 800d182:	b29b      	uxth	r3, r3
 800d184:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d18a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10b      	bne.n	800d1aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b5b      	ldrh	r3, [r3, #26]
 800d196:	f003 0302 	and.w	r3, r3, #2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 81aa 	beq.w	800d4f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fdcb 	bl	800dd3c <tcp_send_empty_ack>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	e1b1      	b.n	800d50e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff f824 	bl	800c200 <tcp_route>
 800d1b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <tcp_output+0x96>
    return ERR_RTE;
 800d1c0:	f06f 0303 	mvn.w	r3, #3
 800d1c4:	e1a3      	b.n	800d50e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d003      	beq.n	800d1d4 <tcp_output+0xa4>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d111      	bne.n	800d1f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <tcp_output+0xb0>
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	e000      	b.n	800d1e2 <tcp_output+0xb2>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d102      	bne.n	800d1f0 <tcp_output+0xc0>
      return ERR_RTE;
 800d1ea:	f06f 0303 	mvn.w	r3, #3
 800d1ee:	e18e      	b.n	800d50e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f9 f8a5 	bl	800634e <lwip_htonl>
 800d204:	4602      	mov	r2, r0
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d20e:	8912      	ldrh	r2, [r2, #8]
 800d210:	4413      	add	r3, r2
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	429a      	cmp	r2, r3
 800d216:	d227      	bcs.n	800d268 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d21e:	461a      	mov	r2, r3
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	4293      	cmp	r3, r2
 800d224:	d114      	bne.n	800d250 <tcp_output+0x120>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d110      	bne.n	800d250 <tcp_output+0x120>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10b      	bne.n	800d250 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	8b5b      	ldrh	r3, [r3, #26]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 814d 	beq.w	800d4f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fd6c 	bl	800dd3c <tcp_send_empty_ack>
 800d264:	4603      	mov	r3, r0
 800d266:	e152      	b.n	800d50e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d274:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 811c 	beq.w	800d4b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d27e:	e002      	b.n	800d286 <tcp_output+0x156>
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	623b      	str	r3, [r7, #32]
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1f8      	bne.n	800d280 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d28e:	e112      	b.n	800d4b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	899b      	ldrh	r3, [r3, #12]
 800d296:	b29b      	uxth	r3, r3
 800d298:	4618      	mov	r0, r3
 800d29a:	f7f9 f843 	bl	8006324 <lwip_htons>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	f003 0304 	and.w	r3, r3, #4
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d006      	beq.n	800d2b8 <tcp_output+0x188>
 800d2aa:	4b2f      	ldr	r3, [pc, #188]	; (800d368 <tcp_output+0x238>)
 800d2ac:	f240 5236 	movw	r2, #1334	; 0x536
 800d2b0:	4932      	ldr	r1, [pc, #200]	; (800d37c <tcp_output+0x24c>)
 800d2b2:	482f      	ldr	r0, [pc, #188]	; (800d370 <tcp_output+0x240>)
 800d2b4:	f003 fd7c 	bl	8010db0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01f      	beq.n	800d300 <tcp_output+0x1d0>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b5b      	ldrh	r3, [r3, #26]
 800d2c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d119      	bne.n	800d300 <tcp_output+0x1d0>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00b      	beq.n	800d2ec <tcp_output+0x1bc>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d110      	bne.n	800d300 <tcp_output+0x1d0>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e2:	891a      	ldrh	r2, [r3, #8]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d209      	bcs.n	800d300 <tcp_output+0x1d0>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d004      	beq.n	800d300 <tcp_output+0x1d0>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2fc:	2b08      	cmp	r3, #8
 800d2fe:	d901      	bls.n	800d304 <tcp_output+0x1d4>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <tcp_output+0x1d6>
 800d304:	2300      	movs	r3, #0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d106      	bne.n	800d318 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8b5b      	ldrh	r3, [r3, #26]
 800d30e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 80e4 	beq.w	800d4e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7d1b      	ldrb	r3, [r3, #20]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d00d      	beq.n	800d33c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	899b      	ldrh	r3, [r3, #12]
 800d326:	b29c      	uxth	r4, r3
 800d328:	2010      	movs	r0, #16
 800d32a:	f7f8 fffb 	bl	8006324 <lwip_htons>
 800d32e:	4603      	mov	r3, r0
 800d330:	461a      	mov	r2, r3
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	4322      	orrs	r2, r4
 800d338:	b292      	uxth	r2, r2
 800d33a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d342:	f000 f909 	bl	800d558 <tcp_output_segment>
 800d346:	4603      	mov	r3, r0
 800d348:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d016      	beq.n	800d380 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	8b5b      	ldrh	r3, [r3, #26]
 800d356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	835a      	strh	r2, [r3, #26]
      return err;
 800d360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d364:	e0d3      	b.n	800d50e <tcp_output+0x3de>
 800d366:	bf00      	nop
 800d368:	080134fc 	.word	0x080134fc
 800d36c:	08013a40 	.word	0x08013a40
 800d370:	08013550 	.word	0x08013550
 800d374:	08013a58 	.word	0x08013a58
 800d378:	20008c5c 	.word	0x20008c5c
 800d37c:	08013a80 	.word	0x08013a80
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d006      	beq.n	800d39e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	8b5b      	ldrh	r3, [r3, #26]
 800d394:	f023 0303 	bic.w	r3, r3, #3
 800d398:	b29a      	uxth	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7f8 ffd2 	bl	800634e <lwip_htonl>
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	891b      	ldrh	r3, [r3, #8]
 800d3b0:	461d      	mov	r5, r3
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	899b      	ldrh	r3, [r3, #12]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f8 ffb2 	bl	8006324 <lwip_htons>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	f003 0303 	and.w	r3, r3, #3
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <tcp_output+0x2a0>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <tcp_output+0x2a2>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	442b      	add	r3, r5
 800d3d4:	4423      	add	r3, r4
 800d3d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	da02      	bge.n	800d3ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	891b      	ldrh	r3, [r3, #8]
 800d3ee:	461c      	mov	r4, r3
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	899b      	ldrh	r3, [r3, #12]
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f8 ff93 	bl	8006324 <lwip_htons>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b2db      	uxtb	r3, r3
 800d402:	f003 0303 	and.w	r3, r3, #3
 800d406:	2b00      	cmp	r3, #0
 800d408:	d001      	beq.n	800d40e <tcp_output+0x2de>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e000      	b.n	800d410 <tcp_output+0x2e0>
 800d40e:	2300      	movs	r3, #0
 800d410:	4423      	add	r3, r4
 800d412:	2b00      	cmp	r3, #0
 800d414:	d049      	beq.n	800d4aa <tcp_output+0x37a>
      seg->next = NULL;
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d420:	2b00      	cmp	r3, #0
 800d422:	d105      	bne.n	800d430 <tcp_output+0x300>
        pcb->unacked = seg;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d428:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	623b      	str	r3, [r7, #32]
 800d42e:	e03f      	b.n	800d4b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	f7f8 ff89 	bl	800634e <lwip_htonl>
 800d43c:	4604      	mov	r4, r0
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4618      	mov	r0, r3
 800d446:	f7f8 ff82 	bl	800634e <lwip_htonl>
 800d44a:	4603      	mov	r3, r0
 800d44c:	1ae3      	subs	r3, r4, r3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	da24      	bge.n	800d49c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	3370      	adds	r3, #112	; 0x70
 800d456:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d458:	e002      	b.n	800d460 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d011      	beq.n	800d48c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f7f8 ff6c 	bl	800634e <lwip_htonl>
 800d476:	4604      	mov	r4, r0
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f8 ff65 	bl	800634e <lwip_htonl>
 800d484:	4603      	mov	r3, r0
 800d486:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dbe6      	blt.n	800d45a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d498:	601a      	str	r2, [r3, #0]
 800d49a:	e009      	b.n	800d4b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	623b      	str	r3, [r7, #32]
 800d4a8:	e002      	b.n	800d4b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d4aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ac:	f7fb fefb 	bl	80092a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d012      	beq.n	800d4e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7f8 ff43 	bl	800634e <lwip_htonl>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d2:	8912      	ldrh	r2, [r2, #8]
 800d4d4:	4413      	add	r3, r2
  while (seg != NULL &&
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	f4bf aed9 	bcs.w	800d290 <tcp_output+0x160>
 800d4de:	e000      	b.n	800d4e2 <tcp_output+0x3b2>
      break;
 800d4e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d108      	bne.n	800d4fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d4f2:	e004      	b.n	800d4fe <tcp_output+0x3ce>
    goto output_done;
 800d4f4:	bf00      	nop
 800d4f6:	e002      	b.n	800d4fe <tcp_output+0x3ce>
    goto output_done;
 800d4f8:	bf00      	nop
 800d4fa:	e000      	b.n	800d4fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d4fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	8b5b      	ldrh	r3, [r3, #26]
 800d502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d506:	b29a      	uxth	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3728      	adds	r7, #40	; 0x28
 800d512:	46bd      	mov	sp, r7
 800d514:	bdb0      	pop	{r4, r5, r7, pc}
 800d516:	bf00      	nop

0800d518 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcp_output_segment_busy+0x1c>
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <tcp_output_segment_busy+0x34>)
 800d528:	f240 529a 	movw	r2, #1434	; 0x59a
 800d52c:	4908      	ldr	r1, [pc, #32]	; (800d550 <tcp_output_segment_busy+0x38>)
 800d52e:	4809      	ldr	r0, [pc, #36]	; (800d554 <tcp_output_segment_busy+0x3c>)
 800d530:	f003 fc3e 	bl	8010db0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	7b9b      	ldrb	r3, [r3, #14]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d001      	beq.n	800d542 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	080134fc 	.word	0x080134fc
 800d550:	08013a98 	.word	0x08013a98
 800d554:	08013550 	.word	0x08013550

0800d558 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d558:	b5b0      	push	{r4, r5, r7, lr}
 800d55a:	b08c      	sub	sp, #48	; 0x30
 800d55c:	af04      	add	r7, sp, #16
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <tcp_output_segment+0x20>
 800d56a:	4b64      	ldr	r3, [pc, #400]	; (800d6fc <tcp_output_segment+0x1a4>)
 800d56c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d570:	4963      	ldr	r1, [pc, #396]	; (800d700 <tcp_output_segment+0x1a8>)
 800d572:	4864      	ldr	r0, [pc, #400]	; (800d704 <tcp_output_segment+0x1ac>)
 800d574:	f003 fc1c 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <tcp_output_segment+0x34>
 800d57e:	4b5f      	ldr	r3, [pc, #380]	; (800d6fc <tcp_output_segment+0x1a4>)
 800d580:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d584:	4960      	ldr	r1, [pc, #384]	; (800d708 <tcp_output_segment+0x1b0>)
 800d586:	485f      	ldr	r0, [pc, #380]	; (800d704 <tcp_output_segment+0x1ac>)
 800d588:	f003 fc12 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <tcp_output_segment+0x48>
 800d592:	4b5a      	ldr	r3, [pc, #360]	; (800d6fc <tcp_output_segment+0x1a4>)
 800d594:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d598:	495c      	ldr	r1, [pc, #368]	; (800d70c <tcp_output_segment+0x1b4>)
 800d59a:	485a      	ldr	r0, [pc, #360]	; (800d704 <tcp_output_segment+0x1ac>)
 800d59c:	f003 fc08 	bl	8010db0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7ff ffb9 	bl	800d518 <tcp_output_segment_busy>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	e0a1      	b.n	800d6f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	68dc      	ldr	r4, [r3, #12]
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7f8 fec8 	bl	800634e <lwip_htonl>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	68dc      	ldr	r4, [r3, #12]
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	f7f8 feaa 	bl	8006324 <lwip_htons>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d5dc:	441a      	add	r2, r3
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	3314      	adds	r3, #20
 800d5e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	7a9b      	ldrb	r3, [r3, #10]
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d015      	beq.n	800d622 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	6879      	ldr	r1, [r7, #4]
 800d5fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d602:	f7fc fa33 	bl	8009a6c <tcp_eff_send_mss_netif>
 800d606:	4603      	mov	r3, r0
 800d608:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d60a:	8b7b      	ldrh	r3, [r7, #26]
 800d60c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d610:	4618      	mov	r0, r3
 800d612:	f7f8 fe9c 	bl	800634e <lwip_htonl>
 800d616:	4602      	mov	r2, r0
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	3304      	adds	r3, #4
 800d620:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d628:	2b00      	cmp	r3, #0
 800d62a:	da02      	bge.n	800d632 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2200      	movs	r2, #0
 800d630:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10c      	bne.n	800d654 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d63a:	4b35      	ldr	r3, [pc, #212]	; (800d710 <tcp_output_segment+0x1b8>)
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7f8 fe80 	bl	800634e <lwip_htonl>
 800d64e:	4602      	mov	r2, r0
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	8959      	ldrh	r1, [r3, #10]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	8b3a      	ldrh	r2, [r7, #24]
 800d66e:	1a8a      	subs	r2, r1, r2
 800d670:	b292      	uxth	r2, r2
 800d672:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	8919      	ldrh	r1, [r3, #8]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	8b3a      	ldrh	r2, [r7, #24]
 800d680:	1a8a      	subs	r2, r1, r2
 800d682:	b292      	uxth	r2, r2
 800d684:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	68d2      	ldr	r2, [r2, #12]
 800d68e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	741a      	strb	r2, [r3, #16]
 800d698:	2200      	movs	r2, #0
 800d69a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	68da      	ldr	r2, [r3, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	7a9b      	ldrb	r3, [r3, #10]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <tcp_output_segment+0x158>
 800d6ac:	2318      	movs	r3, #24
 800d6ae:	e000      	b.n	800d6b2 <tcp_output_segment+0x15a>
 800d6b0:	2314      	movs	r3, #20
 800d6b2:	4413      	add	r3, r2
 800d6b4:	69fa      	ldr	r2, [r7, #28]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d006      	beq.n	800d6c8 <tcp_output_segment+0x170>
 800d6ba:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <tcp_output_segment+0x1a4>)
 800d6bc:	f240 621c 	movw	r2, #1564	; 0x61c
 800d6c0:	4914      	ldr	r1, [pc, #80]	; (800d714 <tcp_output_segment+0x1bc>)
 800d6c2:	4810      	ldr	r0, [pc, #64]	; (800d704 <tcp_output_segment+0x1ac>)
 800d6c4:	f003 fb74 	bl	8010db0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6858      	ldr	r0, [r3, #4]
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	1d1c      	adds	r4, r3, #4
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	7add      	ldrb	r5, [r3, #11]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	7a9b      	ldrb	r3, [r3, #10]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	9202      	str	r2, [sp, #8]
 800d6de:	2206      	movs	r2, #6
 800d6e0:	9201      	str	r2, [sp, #4]
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	462b      	mov	r3, r5
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	f002 fa34 	bl	800fb54 <ip4_output_if>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d6f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d6fc:	080134fc 	.word	0x080134fc
 800d700:	08013ac0 	.word	0x08013ac0
 800d704:	08013550 	.word	0x08013550
 800d708:	08013ae0 	.word	0x08013ae0
 800d70c:	08013b00 	.word	0x08013b00
 800d710:	20008c10 	.word	0x20008c10
 800d714:	08013b24 	.word	0x08013b24

0800d718 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d718:	b5b0      	push	{r4, r5, r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d106      	bne.n	800d734 <tcp_rexmit_rto_prepare+0x1c>
 800d726:	4b31      	ldr	r3, [pc, #196]	; (800d7ec <tcp_rexmit_rto_prepare+0xd4>)
 800d728:	f240 6263 	movw	r2, #1635	; 0x663
 800d72c:	4930      	ldr	r1, [pc, #192]	; (800d7f0 <tcp_rexmit_rto_prepare+0xd8>)
 800d72e:	4831      	ldr	r0, [pc, #196]	; (800d7f4 <tcp_rexmit_rto_prepare+0xdc>)
 800d730:	f003 fb3e 	bl	8010db0 <iprintf>

  if (pcb->unacked == NULL) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d102      	bne.n	800d742 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d73c:	f06f 0305 	mvn.w	r3, #5
 800d740:	e050      	b.n	800d7e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d746:	60fb      	str	r3, [r7, #12]
 800d748:	e00b      	b.n	800d762 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7ff fee4 	bl	800d518 <tcp_output_segment_busy>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d002      	beq.n	800d75c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d756:	f06f 0305 	mvn.w	r3, #5
 800d75a:	e043      	b.n	800d7e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	60fb      	str	r3, [r7, #12]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1ef      	bne.n	800d74a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff fed4 	bl	800d518 <tcp_output_segment_busy>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d776:	f06f 0305 	mvn.w	r3, #5
 800d77a:	e033      	b.n	800d7e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	8b5b      	ldrh	r3, [r3, #26]
 800d796:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f8 fdd1 	bl	800634e <lwip_htonl>
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	891b      	ldrh	r3, [r3, #8]
 800d7b2:	461d      	mov	r5, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	899b      	ldrh	r3, [r3, #12]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f8 fdb1 	bl	8006324 <lwip_htons>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0303 	and.w	r3, r3, #3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <tcp_rexmit_rto_prepare+0xba>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e000      	b.n	800d7d4 <tcp_rexmit_rto_prepare+0xbc>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	442b      	add	r3, r5
 800d7d6:	18e2      	adds	r2, r4, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ec:	080134fc 	.word	0x080134fc
 800d7f0:	08013b38 	.word	0x08013b38
 800d7f4:	08013550 	.word	0x08013550

0800d7f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d106      	bne.n	800d814 <tcp_rexmit_rto_commit+0x1c>
 800d806:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <tcp_rexmit_rto_commit+0x44>)
 800d808:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d80c:	490c      	ldr	r1, [pc, #48]	; (800d840 <tcp_rexmit_rto_commit+0x48>)
 800d80e:	480d      	ldr	r0, [pc, #52]	; (800d844 <tcp_rexmit_rto_commit+0x4c>)
 800d810:	f003 face 	bl	8010db0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d81a:	2bff      	cmp	r3, #255	; 0xff
 800d81c:	d007      	beq.n	800d82e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d824:	3301      	adds	r3, #1
 800d826:	b2da      	uxtb	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff fc7e 	bl	800d130 <tcp_output>
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	080134fc 	.word	0x080134fc
 800d840:	08013b5c 	.word	0x08013b5c
 800d844:	08013550 	.word	0x08013550

0800d848 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <tcp_rexmit_rto+0x1c>
 800d856:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <tcp_rexmit_rto+0x38>)
 800d858:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d85c:	4909      	ldr	r1, [pc, #36]	; (800d884 <tcp_rexmit_rto+0x3c>)
 800d85e:	480a      	ldr	r0, [pc, #40]	; (800d888 <tcp_rexmit_rto+0x40>)
 800d860:	f003 faa6 	bl	8010db0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff ff57 	bl	800d718 <tcp_rexmit_rto_prepare>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7ff ffc1 	bl	800d7f8 <tcp_rexmit_rto_commit>
  }
}
 800d876:	bf00      	nop
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	080134fc 	.word	0x080134fc
 800d884:	08013b80 	.word	0x08013b80
 800d888:	08013550 	.word	0x08013550

0800d88c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d88c:	b590      	push	{r4, r7, lr}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <tcp_rexmit+0x1c>
 800d89a:	4b2f      	ldr	r3, [pc, #188]	; (800d958 <tcp_rexmit+0xcc>)
 800d89c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d8a0:	492e      	ldr	r1, [pc, #184]	; (800d95c <tcp_rexmit+0xd0>)
 800d8a2:	482f      	ldr	r0, [pc, #188]	; (800d960 <tcp_rexmit+0xd4>)
 800d8a4:	f003 fa84 	bl	8010db0 <iprintf>

  if (pcb->unacked == NULL) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d102      	bne.n	800d8b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d8b0:	f06f 0305 	mvn.w	r3, #5
 800d8b4:	e04c      	b.n	800d950 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d8bc:	68b8      	ldr	r0, [r7, #8]
 800d8be:	f7ff fe2b 	bl	800d518 <tcp_output_segment_busy>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d8c8:	f06f 0305 	mvn.w	r3, #5
 800d8cc:	e040      	b.n	800d950 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	336c      	adds	r3, #108	; 0x6c
 800d8da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d8dc:	e002      	b.n	800d8e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d011      	beq.n	800d910 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f8 fd2a 	bl	800634e <lwip_htonl>
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	4618      	mov	r0, r3
 800d904:	f7f8 fd23 	bl	800634e <lwip_htonl>
 800d908:	4603      	mov	r3, r0
 800d90a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dbe6      	blt.n	800d8de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d934:	2bff      	cmp	r3, #255	; 0xff
 800d936:	d007      	beq.n	800d948 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d93e:	3301      	adds	r3, #1
 800d940:	b2da      	uxtb	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	bd90      	pop	{r4, r7, pc}
 800d958:	080134fc 	.word	0x080134fc
 800d95c:	08013b9c 	.word	0x08013b9c
 800d960:	08013550 	.word	0x08013550

0800d964 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <tcp_rexmit_fast+0x1c>
 800d972:	4b2a      	ldr	r3, [pc, #168]	; (800da1c <tcp_rexmit_fast+0xb8>)
 800d974:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d978:	4929      	ldr	r1, [pc, #164]	; (800da20 <tcp_rexmit_fast+0xbc>)
 800d97a:	482a      	ldr	r0, [pc, #168]	; (800da24 <tcp_rexmit_fast+0xc0>)
 800d97c:	f003 fa18 	bl	8010db0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d984:	2b00      	cmp	r3, #0
 800d986:	d045      	beq.n	800da14 <tcp_rexmit_fast+0xb0>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8b5b      	ldrh	r3, [r3, #26]
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	d13f      	bne.n	800da14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff ff79 	bl	800d88c <tcp_rexmit>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d139      	bne.n	800da14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bf28      	it	cs
 800d9b0:	4613      	movcs	r3, r2
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	da00      	bge.n	800d9ba <tcp_rexmit_fast+0x56>
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	105b      	asrs	r3, r3, #1
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d206      	bcs.n	800d9e4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	0049      	lsls	r1, r1, #1
 800d9f2:	440b      	add	r3, r1
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	4413      	add	r3, r2
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	8b5b      	ldrh	r3, [r3, #26]
 800da04:	f043 0304 	orr.w	r3, r3, #4
 800da08:	b29a      	uxth	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	080134fc 	.word	0x080134fc
 800da20:	08013bb4 	.word	0x08013bb4
 800da24:	08013550 	.word	0x08013550

0800da28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	460b      	mov	r3, r1
 800da34:	817b      	strh	r3, [r7, #10]
 800da36:	4613      	mov	r3, r2
 800da38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800da3a:	897a      	ldrh	r2, [r7, #10]
 800da3c:	893b      	ldrh	r3, [r7, #8]
 800da3e:	4413      	add	r3, r2
 800da40:	b29b      	uxth	r3, r3
 800da42:	3314      	adds	r3, #20
 800da44:	b29b      	uxth	r3, r3
 800da46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da4a:	4619      	mov	r1, r3
 800da4c:	2022      	movs	r0, #34	; 0x22
 800da4e:	f7f9 fd19 	bl	8007484 <pbuf_alloc>
 800da52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d04d      	beq.n	800daf6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800da5a:	897b      	ldrh	r3, [r7, #10]
 800da5c:	3313      	adds	r3, #19
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	8952      	ldrh	r2, [r2, #10]
 800da62:	4293      	cmp	r3, r2
 800da64:	db06      	blt.n	800da74 <tcp_output_alloc_header_common+0x4c>
 800da66:	4b26      	ldr	r3, [pc, #152]	; (800db00 <tcp_output_alloc_header_common+0xd8>)
 800da68:	f240 7223 	movw	r2, #1827	; 0x723
 800da6c:	4925      	ldr	r1, [pc, #148]	; (800db04 <tcp_output_alloc_header_common+0xdc>)
 800da6e:	4826      	ldr	r0, [pc, #152]	; (800db08 <tcp_output_alloc_header_common+0xe0>)
 800da70:	f003 f99e 	bl	8010db0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800da7a:	8c3b      	ldrh	r3, [r7, #32]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7f8 fc51 	bl	8006324 <lwip_htons>
 800da82:	4603      	mov	r3, r0
 800da84:	461a      	mov	r2, r3
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800da8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f8 fc49 	bl	8006324 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7f8 fc54 	bl	800634e <lwip_htonl>
 800daa6:	4602      	mov	r2, r0
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800daac:	897b      	ldrh	r3, [r7, #10]
 800daae:	089b      	lsrs	r3, r3, #2
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	3305      	adds	r3, #5
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	031b      	lsls	r3, r3, #12
 800dab8:	b29a      	uxth	r2, r3
 800daba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	4313      	orrs	r3, r2
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f8 fc2d 	bl	8006324 <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	461a      	mov	r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f8 fc25 	bl	8006324 <lwip_htons>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2200      	movs	r2, #0
 800dae6:	741a      	strb	r2, [r3, #16]
 800dae8:	2200      	movs	r2, #0
 800daea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	2200      	movs	r2, #0
 800daf0:	749a      	strb	r2, [r3, #18]
 800daf2:	2200      	movs	r2, #0
 800daf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800daf6:	697b      	ldr	r3, [r7, #20]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	080134fc 	.word	0x080134fc
 800db04:	08013bd4 	.word	0x08013bd4
 800db08:	08013550 	.word	0x08013550

0800db0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db0c:	b5b0      	push	{r4, r5, r7, lr}
 800db0e:	b08a      	sub	sp, #40	; 0x28
 800db10:	af04      	add	r7, sp, #16
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	817b      	strh	r3, [r7, #10]
 800db1a:	4613      	mov	r3, r2
 800db1c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <tcp_output_alloc_header+0x26>
 800db24:	4b15      	ldr	r3, [pc, #84]	; (800db7c <tcp_output_alloc_header+0x70>)
 800db26:	f240 7242 	movw	r2, #1858	; 0x742
 800db2a:	4915      	ldr	r1, [pc, #84]	; (800db80 <tcp_output_alloc_header+0x74>)
 800db2c:	4815      	ldr	r0, [pc, #84]	; (800db84 <tcp_output_alloc_header+0x78>)
 800db2e:	f003 f93f 	bl	8010db0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8adb      	ldrh	r3, [r3, #22]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	8b12      	ldrh	r2, [r2, #24]
 800db3e:	68f9      	ldr	r1, [r7, #12]
 800db40:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800db42:	893d      	ldrh	r5, [r7, #8]
 800db44:	897c      	ldrh	r4, [r7, #10]
 800db46:	9103      	str	r1, [sp, #12]
 800db48:	2110      	movs	r1, #16
 800db4a:	9102      	str	r1, [sp, #8]
 800db4c:	9201      	str	r2, [sp, #4]
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	462a      	mov	r2, r5
 800db54:	4621      	mov	r1, r4
 800db56:	f7ff ff67 	bl	800da28 <tcp_output_alloc_header_common>
 800db5a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d006      	beq.n	800db70 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800db6a:	441a      	add	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800db70:	697b      	ldr	r3, [r7, #20]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bdb0      	pop	{r4, r5, r7, pc}
 800db7a:	bf00      	nop
 800db7c:	080134fc 	.word	0x080134fc
 800db80:	08013c04 	.word	0x08013c04
 800db84:	08013550 	.word	0x08013550

0800db88 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4611      	mov	r1, r2
 800db94:	461a      	mov	r2, r3
 800db96:	460b      	mov	r3, r1
 800db98:	71fb      	strb	r3, [r7, #7]
 800db9a:	4613      	mov	r3, r2
 800db9c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d106      	bne.n	800dbb6 <tcp_output_fill_options+0x2e>
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <tcp_output_fill_options+0x6c>)
 800dbaa:	f240 7256 	movw	r2, #1878	; 0x756
 800dbae:	4912      	ldr	r1, [pc, #72]	; (800dbf8 <tcp_output_fill_options+0x70>)
 800dbb0:	4812      	ldr	r0, [pc, #72]	; (800dbfc <tcp_output_fill_options+0x74>)
 800dbb2:	f003 f8fd 	bl	8010db0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	3314      	adds	r3, #20
 800dbc0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dbc2:	8bfb      	ldrh	r3, [r7, #30]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	f003 0304 	and.w	r3, r3, #4
 800dbd0:	4413      	add	r3, r2
 800dbd2:	3314      	adds	r3, #20
 800dbd4:	69ba      	ldr	r2, [r7, #24]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	697a      	ldr	r2, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d006      	beq.n	800dbec <tcp_output_fill_options+0x64>
 800dbde:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <tcp_output_fill_options+0x6c>)
 800dbe0:	f240 7275 	movw	r2, #1909	; 0x775
 800dbe4:	4906      	ldr	r1, [pc, #24]	; (800dc00 <tcp_output_fill_options+0x78>)
 800dbe6:	4805      	ldr	r0, [pc, #20]	; (800dbfc <tcp_output_fill_options+0x74>)
 800dbe8:	f003 f8e2 	bl	8010db0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dbec:	bf00      	nop
 800dbee:	3720      	adds	r7, #32
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	080134fc 	.word	0x080134fc
 800dbf8:	08013c2c 	.word	0x08013c2c
 800dbfc:	08013550 	.word	0x08013550
 800dc00:	08013b24 	.word	0x08013b24

0800dc04 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08a      	sub	sp, #40	; 0x28
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <tcp_output_control_segment+0x22>
 800dc18:	4b1c      	ldr	r3, [pc, #112]	; (800dc8c <tcp_output_control_segment+0x88>)
 800dc1a:	f240 7287 	movw	r2, #1927	; 0x787
 800dc1e:	491c      	ldr	r1, [pc, #112]	; (800dc90 <tcp_output_control_segment+0x8c>)
 800dc20:	481c      	ldr	r0, [pc, #112]	; (800dc94 <tcp_output_control_segment+0x90>)
 800dc22:	f003 f8c5 	bl	8010db0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7fe fae8 	bl	800c200 <tcp_route>
 800dc30:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dc38:	23fc      	movs	r3, #252	; 0xfc
 800dc3a:	75fb      	strb	r3, [r7, #23]
 800dc3c:	e01c      	b.n	800dc78 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d006      	beq.n	800dc52 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	7adb      	ldrb	r3, [r3, #11]
 800dc48:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	7a9b      	ldrb	r3, [r3, #10]
 800dc4e:	757b      	strb	r3, [r7, #21]
 800dc50:	e003      	b.n	800dc5a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dc52:	23ff      	movs	r3, #255	; 0xff
 800dc54:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dc5a:	7dba      	ldrb	r2, [r7, #22]
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	9302      	str	r3, [sp, #8]
 800dc60:	2306      	movs	r3, #6
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	7d7b      	ldrb	r3, [r7, #21]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	68b8      	ldr	r0, [r7, #8]
 800dc70:	f001 ff70 	bl	800fb54 <ip4_output_if>
 800dc74:	4603      	mov	r3, r0
 800dc76:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dc78:	68b8      	ldr	r0, [r7, #8]
 800dc7a:	f7f9 fee7 	bl	8007a4c <pbuf_free>
  return err;
 800dc7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	080134fc 	.word	0x080134fc
 800dc90:	08013c54 	.word	0x08013c54
 800dc94:	08013550 	.word	0x08013550

0800dc98 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dc98:	b590      	push	{r4, r7, lr}
 800dc9a:	b08b      	sub	sp, #44	; 0x2c
 800dc9c:	af04      	add	r7, sp, #16
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <tcp_rst+0x22>
 800dcac:	4b1f      	ldr	r3, [pc, #124]	; (800dd2c <tcp_rst+0x94>)
 800dcae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dcb2:	491f      	ldr	r1, [pc, #124]	; (800dd30 <tcp_rst+0x98>)
 800dcb4:	481f      	ldr	r0, [pc, #124]	; (800dd34 <tcp_rst+0x9c>)
 800dcb6:	f003 f87b 	bl	8010db0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d106      	bne.n	800dcce <tcp_rst+0x36>
 800dcc0:	4b1a      	ldr	r3, [pc, #104]	; (800dd2c <tcp_rst+0x94>)
 800dcc2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dcc6:	491c      	ldr	r1, [pc, #112]	; (800dd38 <tcp_rst+0xa0>)
 800dcc8:	481a      	ldr	r0, [pc, #104]	; (800dd34 <tcp_rst+0x9c>)
 800dcca:	f003 f871 	bl	8010db0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dcce:	2300      	movs	r3, #0
 800dcd0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dcd2:	f246 0308 	movw	r3, #24584	; 0x6008
 800dcd6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	b29c      	uxth	r4, r3
 800dcdc:	68b8      	ldr	r0, [r7, #8]
 800dcde:	f7f8 fb36 	bl	800634e <lwip_htonl>
 800dce2:	4602      	mov	r2, r0
 800dce4:	8abb      	ldrh	r3, [r7, #20]
 800dce6:	9303      	str	r3, [sp, #12]
 800dce8:	2314      	movs	r3, #20
 800dcea:	9302      	str	r3, [sp, #8]
 800dcec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff fe94 	bl	800da28 <tcp_output_alloc_header_common>
 800dd00:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00c      	beq.n	800dd22 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	6939      	ldr	r1, [r7, #16]
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f7ff ff3a 	bl	800db88 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	6939      	ldr	r1, [r7, #16]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff ff72 	bl	800dc04 <tcp_output_control_segment>
 800dd20:	e000      	b.n	800dd24 <tcp_rst+0x8c>
    return;
 800dd22:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dd24:	371c      	adds	r7, #28
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd90      	pop	{r4, r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	080134fc 	.word	0x080134fc
 800dd30:	08013c80 	.word	0x08013c80
 800dd34:	08013550 	.word	0x08013550
 800dd38:	08013c9c 	.word	0x08013c9c

0800dd3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d106      	bne.n	800dd60 <tcp_send_empty_ack+0x24>
 800dd52:	4b28      	ldr	r3, [pc, #160]	; (800ddf4 <tcp_send_empty_ack+0xb8>)
 800dd54:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dd58:	4927      	ldr	r1, [pc, #156]	; (800ddf8 <tcp_send_empty_ack+0xbc>)
 800dd5a:	4828      	ldr	r0, [pc, #160]	; (800ddfc <tcp_send_empty_ack+0xc0>)
 800dd5c:	f003 f828 	bl	8010db0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dd6c:	7d7b      	ldrb	r3, [r7, #21]
 800dd6e:	b29c      	uxth	r4, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f8 faea 	bl	800634e <lwip_htonl>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	4621      	mov	r1, r4
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff fec3 	bl	800db0c <tcp_output_alloc_header>
 800dd86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d109      	bne.n	800dda2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	8b5b      	ldrh	r3, [r3, #26]
 800dd92:	f043 0303 	orr.w	r3, r3, #3
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dd9c:	f06f 0301 	mvn.w	r3, #1
 800dda0:	e023      	b.n	800ddea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dda2:	7dbb      	ldrb	r3, [r7, #22]
 800dda4:	7dfa      	ldrb	r2, [r7, #23]
 800dda6:	6939      	ldr	r1, [r7, #16]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7ff feed 	bl	800db88 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	6939      	ldr	r1, [r7, #16]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7ff ff24 	bl	800dc04 <tcp_output_control_segment>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ddc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d007      	beq.n	800ddd8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8b5b      	ldrh	r3, [r3, #26]
 800ddcc:	f043 0303 	orr.w	r3, r3, #3
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	835a      	strh	r2, [r3, #26]
 800ddd6:	e006      	b.n	800dde6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	8b5b      	ldrh	r3, [r3, #26]
 800dddc:	f023 0303 	bic.w	r3, r3, #3
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd90      	pop	{r4, r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	080134fc 	.word	0x080134fc
 800ddf8:	08013cb8 	.word	0x08013cb8
 800ddfc:	08013550 	.word	0x08013550

0800de00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b087      	sub	sp, #28
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de08:	2300      	movs	r3, #0
 800de0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcp_keepalive+0x20>
 800de12:	4b18      	ldr	r3, [pc, #96]	; (800de74 <tcp_keepalive+0x74>)
 800de14:	f640 0224 	movw	r2, #2084	; 0x824
 800de18:	4917      	ldr	r1, [pc, #92]	; (800de78 <tcp_keepalive+0x78>)
 800de1a:	4818      	ldr	r0, [pc, #96]	; (800de7c <tcp_keepalive+0x7c>)
 800de1c:	f002 ffc8 	bl	8010db0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	b29c      	uxth	r4, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de28:	3b01      	subs	r3, #1
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7f8 fa8f 	bl	800634e <lwip_htonl>
 800de30:	4603      	mov	r3, r0
 800de32:	2200      	movs	r2, #0
 800de34:	4621      	mov	r1, r4
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7ff fe68 	bl	800db0c <tcp_output_alloc_header>
 800de3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d102      	bne.n	800de4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800de44:	f04f 33ff 	mov.w	r3, #4294967295
 800de48:	e010      	b.n	800de6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	2200      	movs	r2, #0
 800de4e:	6939      	ldr	r1, [r7, #16]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f7ff fe99 	bl	800db88 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3304      	adds	r3, #4
 800de5c:	6939      	ldr	r1, [r7, #16]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff fed0 	bl	800dc04 <tcp_output_control_segment>
 800de64:	4603      	mov	r3, r0
 800de66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800de68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	371c      	adds	r7, #28
 800de70:	46bd      	mov	sp, r7
 800de72:	bd90      	pop	{r4, r7, pc}
 800de74:	080134fc 	.word	0x080134fc
 800de78:	08013cd8 	.word	0x08013cd8
 800de7c:	08013550 	.word	0x08013550

0800de80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b08b      	sub	sp, #44	; 0x2c
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <tcp_zero_window_probe+0x22>
 800de94:	4b4c      	ldr	r3, [pc, #304]	; (800dfc8 <tcp_zero_window_probe+0x148>)
 800de96:	f640 024f 	movw	r2, #2127	; 0x84f
 800de9a:	494c      	ldr	r1, [pc, #304]	; (800dfcc <tcp_zero_window_probe+0x14c>)
 800de9c:	484c      	ldr	r0, [pc, #304]	; (800dfd0 <tcp_zero_window_probe+0x150>)
 800de9e:	f002 ff87 	bl	8010db0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	e086      	b.n	800dfc0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800deb8:	2bff      	cmp	r3, #255	; 0xff
 800deba:	d007      	beq.n	800decc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dec2:	3301      	adds	r3, #1
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	899b      	ldrh	r3, [r3, #12]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7f8 fa25 	bl	8006324 <lwip_htons>
 800deda:	4603      	mov	r3, r0
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <tcp_zero_window_probe+0x72>
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	891b      	ldrh	r3, [r3, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <tcp_zero_window_probe+0x72>
 800deee:	2301      	movs	r3, #1
 800def0:	e000      	b.n	800def4 <tcp_zero_window_probe+0x74>
 800def2:	2300      	movs	r3, #0
 800def4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800def6:	7ffb      	ldrb	r3, [r7, #31]
 800def8:	2b00      	cmp	r3, #0
 800defa:	bf0c      	ite	eq
 800defc:	2301      	moveq	r3, #1
 800defe:	2300      	movne	r3, #0
 800df00:	b2db      	uxtb	r3, r3
 800df02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df08:	b299      	uxth	r1, r3
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	8bba      	ldrh	r2, [r7, #28]
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff fdfa 	bl	800db0c <tcp_output_alloc_header>
 800df18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d102      	bne.n	800df26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800df20:	f04f 33ff 	mov.w	r3, #4294967295
 800df24:	e04c      	b.n	800dfc0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800df2c:	7ffb      	ldrb	r3, [r7, #31]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d011      	beq.n	800df56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	899b      	ldrh	r3, [r3, #12]
 800df36:	b29b      	uxth	r3, r3
 800df38:	b21b      	sxth	r3, r3
 800df3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df3e:	b21c      	sxth	r4, r3
 800df40:	2011      	movs	r0, #17
 800df42:	f7f8 f9ef 	bl	8006324 <lwip_htons>
 800df46:	4603      	mov	r3, r0
 800df48:	b21b      	sxth	r3, r3
 800df4a:	4323      	orrs	r3, r4
 800df4c:	b21b      	sxth	r3, r3
 800df4e:	b29a      	uxth	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	819a      	strh	r2, [r3, #12]
 800df54:	e010      	b.n	800df78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	3314      	adds	r3, #20
 800df5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	6858      	ldr	r0, [r3, #4]
 800df62:	6a3b      	ldr	r3, [r7, #32]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	891a      	ldrh	r2, [r3, #8]
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	891b      	ldrh	r3, [r3, #8]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	b29b      	uxth	r3, r3
 800df70:	2201      	movs	r2, #1
 800df72:	6939      	ldr	r1, [r7, #16]
 800df74:	f7f9 ff54 	bl	8007e20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f8 f9e5 	bl	800634e <lwip_htonl>
 800df84:	4603      	mov	r3, r0
 800df86:	3301      	adds	r3, #1
 800df88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	2b00      	cmp	r3, #0
 800df94:	da02      	bge.n	800df9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	69b9      	ldr	r1, [r7, #24]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff fdef 	bl	800db88 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	3304      	adds	r3, #4
 800dfb0:	69b9      	ldr	r1, [r7, #24]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff fe26 	bl	800dc04 <tcp_output_control_segment>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dfbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	372c      	adds	r7, #44	; 0x2c
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd90      	pop	{r4, r7, pc}
 800dfc8:	080134fc 	.word	0x080134fc
 800dfcc:	08013cf4 	.word	0x08013cf4
 800dfd0:	08013550 	.word	0x08013550

0800dfd4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dfdc:	f7fa f80e 	bl	8007ffc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dfe0:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <tcpip_tcp_timer+0x38>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d103      	bne.n	800dff0 <tcpip_tcp_timer+0x1c>
 800dfe8:	4b09      	ldr	r3, [pc, #36]	; (800e010 <tcpip_tcp_timer+0x3c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d005      	beq.n	800dffc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dff0:	2200      	movs	r2, #0
 800dff2:	4908      	ldr	r1, [pc, #32]	; (800e014 <tcpip_tcp_timer+0x40>)
 800dff4:	20fa      	movs	r0, #250	; 0xfa
 800dff6:	f000 f8f3 	bl	800e1e0 <sys_timeout>
 800dffa:	e003      	b.n	800e004 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dffc:	4b06      	ldr	r3, [pc, #24]	; (800e018 <tcpip_tcp_timer+0x44>)
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
  }
}
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	20008c1c 	.word	0x20008c1c
 800e010:	20008c20 	.word	0x20008c20
 800e014:	0800dfd5 	.word	0x0800dfd5
 800e018:	20008c68 	.word	0x20008c68

0800e01c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e020:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <tcp_timer_needed+0x30>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10f      	bne.n	800e048 <tcp_timer_needed+0x2c>
 800e028:	4b09      	ldr	r3, [pc, #36]	; (800e050 <tcp_timer_needed+0x34>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d103      	bne.n	800e038 <tcp_timer_needed+0x1c>
 800e030:	4b08      	ldr	r3, [pc, #32]	; (800e054 <tcp_timer_needed+0x38>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d007      	beq.n	800e048 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e038:	4b04      	ldr	r3, [pc, #16]	; (800e04c <tcp_timer_needed+0x30>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e03e:	2200      	movs	r2, #0
 800e040:	4905      	ldr	r1, [pc, #20]	; (800e058 <tcp_timer_needed+0x3c>)
 800e042:	20fa      	movs	r0, #250	; 0xfa
 800e044:	f000 f8cc 	bl	800e1e0 <sys_timeout>
  }
}
 800e048:	bf00      	nop
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	20008c68 	.word	0x20008c68
 800e050:	20008c1c 	.word	0x20008c1c
 800e054:	20008c20 	.word	0x20008c20
 800e058:	0800dfd5 	.word	0x0800dfd5

0800e05c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e068:	2006      	movs	r0, #6
 800e06a:	f7f8 fe09 	bl	8006c80 <memp_malloc>
 800e06e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d109      	bne.n	800e08a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d151      	bne.n	800e120 <sys_timeout_abs+0xc4>
 800e07c:	4b2a      	ldr	r3, [pc, #168]	; (800e128 <sys_timeout_abs+0xcc>)
 800e07e:	22be      	movs	r2, #190	; 0xbe
 800e080:	492a      	ldr	r1, [pc, #168]	; (800e12c <sys_timeout_abs+0xd0>)
 800e082:	482b      	ldr	r0, [pc, #172]	; (800e130 <sys_timeout_abs+0xd4>)
 800e084:	f002 fe94 	bl	8010db0 <iprintf>
    return;
 800e088:	e04a      	b.n	800e120 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2200      	movs	r2, #0
 800e08e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e0a2:	4b24      	ldr	r3, [pc, #144]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d103      	bne.n	800e0b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e0aa:	4a22      	ldr	r2, [pc, #136]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	6013      	str	r3, [r2, #0]
    return;
 800e0b0:	e037      	b.n	800e122 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	685a      	ldr	r2, [r3, #4]
 800e0b6:	4b1f      	ldr	r3, [pc, #124]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	0fdb      	lsrs	r3, r3, #31
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e0ca:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e0d2:	4a18      	ldr	r2, [pc, #96]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	6013      	str	r3, [r2, #0]
 800e0d8:	e023      	b.n	800e122 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e0da:	4b16      	ldr	r3, [pc, #88]	; (800e134 <sys_timeout_abs+0xd8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	e01a      	b.n	800e118 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00b      	beq.n	800e102 <sys_timeout_abs+0xa6>
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	0fdb      	lsrs	r3, r3, #31
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d007      	beq.n	800e112 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	601a      	str	r2, [r3, #0]
        break;
 800e110:	e007      	b.n	800e122 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	617b      	str	r3, [r7, #20]
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1e1      	bne.n	800e0e2 <sys_timeout_abs+0x86>
 800e11e:	e000      	b.n	800e122 <sys_timeout_abs+0xc6>
    return;
 800e120:	bf00      	nop
      }
    }
  }
}
 800e122:	3718      	adds	r7, #24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	08013d18 	.word	0x08013d18
 800e12c:	08013d4c 	.word	0x08013d4c
 800e130:	08013d8c 	.word	0x08013d8c
 800e134:	20008c60 	.word	0x20008c60

0800e138 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4798      	blx	r3

  now = sys_now();
 800e14a:	f7f7 f8c5 	bl	80052d8 <sys_now>
 800e14e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <lwip_cyclic_timer+0x5c>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4413      	add	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	0fdb      	lsrs	r3, r3, #31
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d009      	beq.n	800e182 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	4413      	add	r3, r2
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	4907      	ldr	r1, [pc, #28]	; (800e198 <lwip_cyclic_timer+0x60>)
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff ff6e 	bl	800e05c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e180:	e004      	b.n	800e18c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	4904      	ldr	r1, [pc, #16]	; (800e198 <lwip_cyclic_timer+0x60>)
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7ff ff68 	bl	800e05c <sys_timeout_abs>
}
 800e18c:	bf00      	nop
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20008c64 	.word	0x20008c64
 800e198:	0800e139 	.word	0x0800e139

0800e19c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	e00e      	b.n	800e1c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e1a8:	4a0b      	ldr	r2, [pc, #44]	; (800e1d8 <sys_timeouts_init+0x3c>)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	00db      	lsls	r3, r3, #3
 800e1b4:	4a08      	ldr	r2, [pc, #32]	; (800e1d8 <sys_timeouts_init+0x3c>)
 800e1b6:	4413      	add	r3, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4908      	ldr	r1, [pc, #32]	; (800e1dc <sys_timeouts_init+0x40>)
 800e1bc:	f000 f810 	bl	800e1e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	607b      	str	r3, [r7, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d9ed      	bls.n	800e1a8 <sys_timeouts_init+0xc>
  }
}
 800e1cc:	bf00      	nop
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	080156c0 	.word	0x080156c0
 800e1dc:	0800e139 	.word	0x0800e139

0800e1e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1f2:	d306      	bcc.n	800e202 <sys_timeout+0x22>
 800e1f4:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <sys_timeout+0x40>)
 800e1f6:	f240 1229 	movw	r2, #297	; 0x129
 800e1fa:	490a      	ldr	r1, [pc, #40]	; (800e224 <sys_timeout+0x44>)
 800e1fc:	480a      	ldr	r0, [pc, #40]	; (800e228 <sys_timeout+0x48>)
 800e1fe:	f002 fdd7 	bl	8010db0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e202:	f7f7 f869 	bl	80052d8 <sys_now>
 800e206:	4602      	mov	r2, r0
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4413      	add	r3, r2
 800e20c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	6978      	ldr	r0, [r7, #20]
 800e214:	f7ff ff22 	bl	800e05c <sys_timeout_abs>
#endif
}
 800e218:	bf00      	nop
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	08013d18 	.word	0x08013d18
 800e224:	08013db4 	.word	0x08013db4
 800e228:	08013d8c 	.word	0x08013d8c

0800e22c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e232:	f7f7 f851 	bl	80052d8 <sys_now>
 800e236:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e238:	4b1a      	ldr	r3, [pc, #104]	; (800e2a4 <sys_check_timeouts+0x78>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <sys_check_timeouts+0x1a>
 800e242:	f7f9 f8c9 	bl	80073d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e246:	4b18      	ldr	r3, [pc, #96]	; (800e2a8 <sys_check_timeouts+0x7c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d022      	beq.n	800e298 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	0fdb      	lsrs	r3, r3, #31
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d11a      	bne.n	800e29c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a0f      	ldr	r2, [pc, #60]	; (800e2a8 <sys_check_timeouts+0x7c>)
 800e26c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	4a0b      	ldr	r2, [pc, #44]	; (800e2ac <sys_check_timeouts+0x80>)
 800e280:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	2006      	movs	r0, #6
 800e286:	f7f8 fd6b 	bl	8006d60 <memp_free>
    if (handler != NULL) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0d3      	beq.n	800e238 <sys_check_timeouts+0xc>
      handler(arg);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6838      	ldr	r0, [r7, #0]
 800e294:	4798      	blx	r3
  do {
 800e296:	e7cf      	b.n	800e238 <sys_check_timeouts+0xc>
      return;
 800e298:	bf00      	nop
 800e29a:	e000      	b.n	800e29e <sys_check_timeouts+0x72>
      return;
 800e29c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	20008c0d 	.word	0x20008c0d
 800e2a8:	20008c60 	.word	0x20008c60
 800e2ac:	20008c64 	.word	0x20008c64

0800e2b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2b4:	f002 fc7c 	bl	8010bb0 <rand>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	4b01      	ldr	r3, [pc, #4]	; (800e2d0 <udp_init+0x20>)
 800e2ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2cc:	bf00      	nop
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	20000028 	.word	0x20000028

0800e2d4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d105      	bne.n	800e2f4 <udp_input_local_match+0x20>
 800e2e8:	4b27      	ldr	r3, [pc, #156]	; (800e388 <udp_input_local_match+0xb4>)
 800e2ea:	2287      	movs	r2, #135	; 0x87
 800e2ec:	4927      	ldr	r1, [pc, #156]	; (800e38c <udp_input_local_match+0xb8>)
 800e2ee:	4828      	ldr	r0, [pc, #160]	; (800e390 <udp_input_local_match+0xbc>)
 800e2f0:	f002 fd5e 	bl	8010db0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d105      	bne.n	800e306 <udp_input_local_match+0x32>
 800e2fa:	4b23      	ldr	r3, [pc, #140]	; (800e388 <udp_input_local_match+0xb4>)
 800e2fc:	2288      	movs	r2, #136	; 0x88
 800e2fe:	4925      	ldr	r1, [pc, #148]	; (800e394 <udp_input_local_match+0xc0>)
 800e300:	4823      	ldr	r0, [pc, #140]	; (800e390 <udp_input_local_match+0xbc>)
 800e302:	f002 fd55 	bl	8010db0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7a1b      	ldrb	r3, [r3, #8]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00b      	beq.n	800e326 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	7a1a      	ldrb	r2, [r3, #8]
 800e312:	4b21      	ldr	r3, [pc, #132]	; (800e398 <udp_input_local_match+0xc4>)
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e31a:	3301      	adds	r3, #1
 800e31c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e31e:	429a      	cmp	r2, r3
 800e320:	d001      	beq.n	800e326 <udp_input_local_match+0x52>
    return 0;
 800e322:	2300      	movs	r3, #0
 800e324:	e02b      	b.n	800e37e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d018      	beq.n	800e35e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d013      	beq.n	800e35a <udp_input_local_match+0x86>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00f      	beq.n	800e35a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e33a:	4b17      	ldr	r3, [pc, #92]	; (800e398 <udp_input_local_match+0xc4>)
 800e33c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e342:	d00a      	beq.n	800e35a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	4b13      	ldr	r3, [pc, #76]	; (800e398 <udp_input_local_match+0xc4>)
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	405a      	eors	r2, r3
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	3308      	adds	r3, #8
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e356:	2b00      	cmp	r3, #0
 800e358:	d110      	bne.n	800e37c <udp_input_local_match+0xa8>
          return 1;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e00f      	b.n	800e37e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d009      	beq.n	800e378 <udp_input_local_match+0xa4>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <udp_input_local_match+0xa4>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4b09      	ldr	r3, [pc, #36]	; (800e398 <udp_input_local_match+0xc4>)
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	429a      	cmp	r2, r3
 800e376:	d101      	bne.n	800e37c <udp_input_local_match+0xa8>
        return 1;
 800e378:	2301      	movs	r3, #1
 800e37a:	e000      	b.n	800e37e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	08013e00 	.word	0x08013e00
 800e38c:	08013e30 	.word	0x08013e30
 800e390:	08013e54 	.word	0x08013e54
 800e394:	08013e7c 	.word	0x08013e7c
 800e398:	200056a0 	.word	0x200056a0

0800e39c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e39c:	b590      	push	{r4, r7, lr}
 800e39e:	b08d      	sub	sp, #52	; 0x34
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d105      	bne.n	800e3bc <udp_input+0x20>
 800e3b0:	4b7c      	ldr	r3, [pc, #496]	; (800e5a4 <udp_input+0x208>)
 800e3b2:	22cf      	movs	r2, #207	; 0xcf
 800e3b4:	497c      	ldr	r1, [pc, #496]	; (800e5a8 <udp_input+0x20c>)
 800e3b6:	487d      	ldr	r0, [pc, #500]	; (800e5ac <udp_input+0x210>)
 800e3b8:	f002 fcfa 	bl	8010db0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d105      	bne.n	800e3ce <udp_input+0x32>
 800e3c2:	4b78      	ldr	r3, [pc, #480]	; (800e5a4 <udp_input+0x208>)
 800e3c4:	22d0      	movs	r2, #208	; 0xd0
 800e3c6:	497a      	ldr	r1, [pc, #488]	; (800e5b0 <udp_input+0x214>)
 800e3c8:	4878      	ldr	r0, [pc, #480]	; (800e5ac <udp_input+0x210>)
 800e3ca:	f002 fcf1 	bl	8010db0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	895b      	ldrh	r3, [r3, #10]
 800e3d2:	2b07      	cmp	r3, #7
 800e3d4:	d803      	bhi.n	800e3de <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7f9 fb38 	bl	8007a4c <pbuf_free>
    goto end;
 800e3dc:	e0de      	b.n	800e59c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e3e4:	4b73      	ldr	r3, [pc, #460]	; (800e5b4 <udp_input+0x218>)
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	4a72      	ldr	r2, [pc, #456]	; (800e5b4 <udp_input+0x218>)
 800e3ea:	6812      	ldr	r2, [r2, #0]
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f001 fc88 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f7 ff90 	bl	8006324 <lwip_htons>
 800e404:	4603      	mov	r3, r0
 800e406:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	885b      	ldrh	r3, [r3, #2]
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f7 ff88 	bl	8006324 <lwip_htons>
 800e414:	4603      	mov	r3, r0
 800e416:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e418:	2300      	movs	r3, #0
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e424:	4b64      	ldr	r3, [pc, #400]	; (800e5b8 <udp_input+0x21c>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	627b      	str	r3, [r7, #36]	; 0x24
 800e42a:	e054      	b.n	800e4d6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	8a5b      	ldrh	r3, [r3, #18]
 800e430:	89fa      	ldrh	r2, [r7, #14]
 800e432:	429a      	cmp	r2, r3
 800e434:	d14a      	bne.n	800e4cc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e436:	7cfb      	ldrb	r3, [r7, #19]
 800e438:	461a      	mov	r2, r3
 800e43a:	6839      	ldr	r1, [r7, #0]
 800e43c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e43e:	f7ff ff49 	bl	800e2d4 <udp_input_local_match>
 800e442:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e444:	2b00      	cmp	r3, #0
 800e446:	d041      	beq.n	800e4cc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	7c1b      	ldrb	r3, [r3, #16]
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d11d      	bne.n	800e490 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	61fb      	str	r3, [r7, #28]
 800e45e:	e017      	b.n	800e490 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e460:	7cfb      	ldrb	r3, [r7, #19]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d014      	beq.n	800e490 <udp_input+0xf4>
 800e466:	4b53      	ldr	r3, [pc, #332]	; (800e5b4 <udp_input+0x218>)
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e46e:	d10f      	bne.n	800e490 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3304      	adds	r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d008      	beq.n	800e490 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	3304      	adds	r3, #4
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d101      	bne.n	800e490 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	8a9b      	ldrh	r3, [r3, #20]
 800e494:	8a3a      	ldrh	r2, [r7, #16]
 800e496:	429a      	cmp	r2, r3
 800e498:	d118      	bne.n	800e4cc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	4b43      	ldr	r3, [pc, #268]	; (800e5b4 <udp_input+0x218>)
 800e4a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d10e      	bne.n	800e4cc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d014      	beq.n	800e4de <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	68da      	ldr	r2, [r3, #12]
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e4bc:	4b3e      	ldr	r3, [pc, #248]	; (800e5b8 <udp_input+0x21c>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e4c4:	4a3c      	ldr	r2, [pc, #240]	; (800e5b8 <udp_input+0x21c>)
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e4ca:	e008      	b.n	800e4de <udp_input+0x142>
      }
    }

    prev = pcb;
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1a7      	bne.n	800e42c <udp_input+0x90>
 800e4dc:	e000      	b.n	800e4e0 <udp_input+0x144>
        break;
 800e4de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <udp_input+0x14e>
    pcb = uncon_pcb;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <udp_input+0x15a>
    for_us = 1;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	76fb      	strb	r3, [r7, #27]
 800e4f4:	e00a      	b.n	800e50c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	4b2d      	ldr	r3, [pc, #180]	; (800e5b4 <udp_input+0x218>)
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	429a      	cmp	r2, r3
 800e502:	bf0c      	ite	eq
 800e504:	2301      	moveq	r3, #1
 800e506:	2300      	movne	r3, #0
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e50c:	7efb      	ldrb	r3, [r7, #27]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d041      	beq.n	800e596 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e512:	2108      	movs	r1, #8
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7f9 fa13 	bl	8007940 <pbuf_remove_header>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00a      	beq.n	800e536 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e520:	4b20      	ldr	r3, [pc, #128]	; (800e5a4 <udp_input+0x208>)
 800e522:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e526:	4925      	ldr	r1, [pc, #148]	; (800e5bc <udp_input+0x220>)
 800e528:	4820      	ldr	r0, [pc, #128]	; (800e5ac <udp_input+0x210>)
 800e52a:	f002 fc41 	bl	8010db0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f9 fa8c 	bl	8007a4c <pbuf_free>
      goto end;
 800e534:	e032      	b.n	800e59c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d012      	beq.n	800e562 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00a      	beq.n	800e55a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	699c      	ldr	r4, [r3, #24]
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	69d8      	ldr	r0, [r3, #28]
 800e54c:	8a3b      	ldrh	r3, [r7, #16]
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	4b1b      	ldr	r3, [pc, #108]	; (800e5c0 <udp_input+0x224>)
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e556:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e558:	e021      	b.n	800e59e <udp_input+0x202>
        pbuf_free(p);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7f9 fa76 	bl	8007a4c <pbuf_free>
        goto end;
 800e560:	e01c      	b.n	800e59c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e562:	7cfb      	ldrb	r3, [r7, #19]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d112      	bne.n	800e58e <udp_input+0x1f2>
 800e568:	4b12      	ldr	r3, [pc, #72]	; (800e5b4 <udp_input+0x218>)
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e570:	2be0      	cmp	r3, #224	; 0xe0
 800e572:	d00c      	beq.n	800e58e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e574:	4b0f      	ldr	r3, [pc, #60]	; (800e5b4 <udp_input+0x218>)
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	3308      	adds	r3, #8
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	b21b      	sxth	r3, r3
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f9 fa50 	bl	8007a26 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e586:	2103      	movs	r1, #3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 f89b 	bl	800f6c4 <icmp_dest_unreach>
      pbuf_free(p);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7f9 fa5c 	bl	8007a4c <pbuf_free>
  return;
 800e594:	e003      	b.n	800e59e <udp_input+0x202>
    pbuf_free(p);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f9 fa58 	bl	8007a4c <pbuf_free>
  return;
 800e59c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e59e:	372c      	adds	r7, #44	; 0x2c
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd90      	pop	{r4, r7, pc}
 800e5a4:	08013e00 	.word	0x08013e00
 800e5a8:	08013ea4 	.word	0x08013ea4
 800e5ac:	08013e54 	.word	0x08013e54
 800e5b0:	08013ebc 	.word	0x08013ebc
 800e5b4:	200056a0 	.word	0x200056a0
 800e5b8:	20008c6c 	.word	0x20008c6c
 800e5bc:	08013ed8 	.word	0x08013ed8
 800e5c0:	200056b0 	.word	0x200056b0

0800e5c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d01e      	beq.n	800e612 <udp_netif_ip_addr_changed+0x4e>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d01a      	beq.n	800e612 <udp_netif_ip_addr_changed+0x4e>
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d017      	beq.n	800e612 <udp_netif_ip_addr_changed+0x4e>
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d013      	beq.n	800e612 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e5ea:	4b0d      	ldr	r3, [pc, #52]	; (800e620 <udp_netif_ip_addr_changed+0x5c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	e00c      	b.n	800e60c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d103      	bne.n	800e606 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1ef      	bne.n	800e5f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e612:	bf00      	nop
 800e614:	3714      	adds	r7, #20
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	20008c6c 	.word	0x20008c6c

0800e624 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e62c:	4915      	ldr	r1, [pc, #84]	; (800e684 <etharp_free_entry+0x60>)
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	4613      	mov	r3, r2
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d013      	beq.n	800e668 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e640:	4910      	ldr	r1, [pc, #64]	; (800e684 <etharp_free_entry+0x60>)
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4613      	mov	r3, r2
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	4413      	add	r3, r2
 800e64a:	00db      	lsls	r3, r3, #3
 800e64c:	440b      	add	r3, r1
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f7f9 f9fb 	bl	8007a4c <pbuf_free>
    arp_table[i].q = NULL;
 800e656:	490b      	ldr	r1, [pc, #44]	; (800e684 <etharp_free_entry+0x60>)
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	4613      	mov	r3, r2
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	4413      	add	r3, r2
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	440b      	add	r3, r1
 800e664:	2200      	movs	r2, #0
 800e666:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e668:	4906      	ldr	r1, [pc, #24]	; (800e684 <etharp_free_entry+0x60>)
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4613      	mov	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4413      	add	r3, r2
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	440b      	add	r3, r1
 800e676:	3314      	adds	r3, #20
 800e678:	2200      	movs	r2, #0
 800e67a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	20008c70 	.word	0x20008c70

0800e688 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e68e:	2300      	movs	r3, #0
 800e690:	607b      	str	r3, [r7, #4]
 800e692:	e096      	b.n	800e7c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e694:	494f      	ldr	r1, [pc, #316]	; (800e7d4 <etharp_tmr+0x14c>)
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	4613      	mov	r3, r2
 800e69a:	005b      	lsls	r3, r3, #1
 800e69c:	4413      	add	r3, r2
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	440b      	add	r3, r1
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e6a8:	78fb      	ldrb	r3, [r7, #3]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 8086 	beq.w	800e7bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e6b0:	4948      	ldr	r1, [pc, #288]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	4413      	add	r3, r2
 800e6ba:	00db      	lsls	r3, r3, #3
 800e6bc:	440b      	add	r3, r1
 800e6be:	3312      	adds	r3, #18
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	b298      	uxth	r0, r3
 800e6c6:	4943      	ldr	r1, [pc, #268]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	4413      	add	r3, r2
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	440b      	add	r3, r1
 800e6d4:	3312      	adds	r3, #18
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e6da:	493e      	ldr	r1, [pc, #248]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	005b      	lsls	r3, r3, #1
 800e6e2:	4413      	add	r3, r2
 800e6e4:	00db      	lsls	r3, r3, #3
 800e6e6:	440b      	add	r3, r1
 800e6e8:	3312      	adds	r3, #18
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e6f0:	d215      	bcs.n	800e71e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e6f2:	4938      	ldr	r1, [pc, #224]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	4413      	add	r3, r2
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	440b      	add	r3, r1
 800e700:	3314      	adds	r3, #20
 800e702:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e704:	2b01      	cmp	r3, #1
 800e706:	d10e      	bne.n	800e726 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e708:	4932      	ldr	r1, [pc, #200]	; (800e7d4 <etharp_tmr+0x14c>)
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	4613      	mov	r3, r2
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	4413      	add	r3, r2
 800e712:	00db      	lsls	r3, r3, #3
 800e714:	440b      	add	r3, r1
 800e716:	3312      	adds	r3, #18
 800e718:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d903      	bls.n	800e726 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff ff80 	bl	800e624 <etharp_free_entry>
 800e724:	e04a      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e726:	492b      	ldr	r1, [pc, #172]	; (800e7d4 <etharp_tmr+0x14c>)
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	4613      	mov	r3, r2
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	4413      	add	r3, r2
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	440b      	add	r3, r1
 800e734:	3314      	adds	r3, #20
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	2b03      	cmp	r3, #3
 800e73a:	d10a      	bne.n	800e752 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e73c:	4925      	ldr	r1, [pc, #148]	; (800e7d4 <etharp_tmr+0x14c>)
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	4613      	mov	r3, r2
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	4413      	add	r3, r2
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	440b      	add	r3, r1
 800e74a:	3314      	adds	r3, #20
 800e74c:	2204      	movs	r2, #4
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e034      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e752:	4920      	ldr	r1, [pc, #128]	; (800e7d4 <etharp_tmr+0x14c>)
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	4613      	mov	r3, r2
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	00db      	lsls	r3, r3, #3
 800e75e:	440b      	add	r3, r1
 800e760:	3314      	adds	r3, #20
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b04      	cmp	r3, #4
 800e766:	d10a      	bne.n	800e77e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e768:	491a      	ldr	r1, [pc, #104]	; (800e7d4 <etharp_tmr+0x14c>)
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	4613      	mov	r3, r2
 800e76e:	005b      	lsls	r3, r3, #1
 800e770:	4413      	add	r3, r2
 800e772:	00db      	lsls	r3, r3, #3
 800e774:	440b      	add	r3, r1
 800e776:	3314      	adds	r3, #20
 800e778:	2202      	movs	r2, #2
 800e77a:	701a      	strb	r2, [r3, #0]
 800e77c:	e01e      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e77e:	4915      	ldr	r1, [pc, #84]	; (800e7d4 <etharp_tmr+0x14c>)
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	4613      	mov	r3, r2
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	4413      	add	r3, r2
 800e788:	00db      	lsls	r3, r3, #3
 800e78a:	440b      	add	r3, r1
 800e78c:	3314      	adds	r3, #20
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d113      	bne.n	800e7bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e794:	490f      	ldr	r1, [pc, #60]	; (800e7d4 <etharp_tmr+0x14c>)
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	4613      	mov	r3, r2
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	4413      	add	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	440b      	add	r3, r1
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	4413      	add	r3, r2
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <etharp_tmr+0x14c>)
 800e7b2:	4413      	add	r3, r2
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f000 fe6e 	bl	800f498 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	607b      	str	r3, [r7, #4]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	f77f af65 	ble.w	800e694 <etharp_tmr+0xc>
      }
    }
  }
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	20008c70 	.word	0x20008c70

0800e7d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08a      	sub	sp, #40	; 0x28
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e7e6:	230a      	movs	r3, #10
 800e7e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e7ea:	230a      	movs	r3, #10
 800e7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e7f6:	230a      	movs	r3, #10
 800e7f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	83bb      	strh	r3, [r7, #28]
 800e7fe:	2300      	movs	r3, #0
 800e800:	837b      	strh	r3, [r7, #26]
 800e802:	2300      	movs	r3, #0
 800e804:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e806:	2300      	movs	r3, #0
 800e808:	843b      	strh	r3, [r7, #32]
 800e80a:	e0ae      	b.n	800e96a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e80c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e810:	49a6      	ldr	r1, [pc, #664]	; (800eaac <etharp_find_entry+0x2d4>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	440b      	add	r3, r1
 800e81c:	3314      	adds	r3, #20
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e826:	2b0a      	cmp	r3, #10
 800e828:	d105      	bne.n	800e836 <etharp_find_entry+0x5e>
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e830:	8c3b      	ldrh	r3, [r7, #32]
 800e832:	847b      	strh	r3, [r7, #34]	; 0x22
 800e834:	e095      	b.n	800e962 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 8092 	beq.w	800e962 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d009      	beq.n	800e858 <etharp_find_entry+0x80>
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b01      	cmp	r3, #1
 800e848:	d806      	bhi.n	800e858 <etharp_find_entry+0x80>
 800e84a:	4b99      	ldr	r3, [pc, #612]	; (800eab0 <etharp_find_entry+0x2d8>)
 800e84c:	f240 1223 	movw	r2, #291	; 0x123
 800e850:	4998      	ldr	r1, [pc, #608]	; (800eab4 <etharp_find_entry+0x2dc>)
 800e852:	4899      	ldr	r0, [pc, #612]	; (800eab8 <etharp_find_entry+0x2e0>)
 800e854:	f002 faac 	bl	8010db0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d020      	beq.n	800e8a0 <etharp_find_entry+0xc8>
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6819      	ldr	r1, [r3, #0]
 800e862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e866:	4891      	ldr	r0, [pc, #580]	; (800eaac <etharp_find_entry+0x2d4>)
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	4403      	add	r3, r0
 800e872:	3304      	adds	r3, #4
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4299      	cmp	r1, r3
 800e878:	d112      	bne.n	800e8a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00c      	beq.n	800e89a <etharp_find_entry+0xc2>
 800e880:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e884:	4989      	ldr	r1, [pc, #548]	; (800eaac <etharp_find_entry+0x2d4>)
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	440b      	add	r3, r1
 800e890:	3308      	adds	r3, #8
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	429a      	cmp	r2, r3
 800e898:	d102      	bne.n	800e8a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e89a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e89e:	e100      	b.n	800eaa2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e8a0:	7dfb      	ldrb	r3, [r7, #23]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d140      	bne.n	800e928 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e8a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8aa:	4980      	ldr	r1, [pc, #512]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	005b      	lsls	r3, r3, #1
 800e8b0:	4413      	add	r3, r2
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	440b      	add	r3, r1
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d01a      	beq.n	800e8f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8c0:	497a      	ldr	r1, [pc, #488]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3312      	adds	r3, #18
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	8bba      	ldrh	r2, [r7, #28]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d845      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_queue = i;
 800e8d6:	8c3b      	ldrh	r3, [r7, #32]
 800e8d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e8da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8de:	4973      	ldr	r1, [pc, #460]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	4413      	add	r3, r2
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	440b      	add	r3, r1
 800e8ea:	3312      	adds	r3, #18
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	83bb      	strh	r3, [r7, #28]
 800e8f0:	e037      	b.n	800e962 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e8f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8f6:	496d      	ldr	r1, [pc, #436]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4413      	add	r3, r2
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	440b      	add	r3, r1
 800e902:	3312      	adds	r3, #18
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	8b7a      	ldrh	r2, [r7, #26]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d82a      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_pending = i;
 800e90c:	8c3b      	ldrh	r3, [r7, #32]
 800e90e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e914:	4965      	ldr	r1, [pc, #404]	; (800eaac <etharp_find_entry+0x2d4>)
 800e916:	4613      	mov	r3, r2
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	440b      	add	r3, r1
 800e920:	3312      	adds	r3, #18
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	837b      	strh	r3, [r7, #26]
 800e926:	e01c      	b.n	800e962 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d919      	bls.n	800e962 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e92e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e932:	495e      	ldr	r1, [pc, #376]	; (800eaac <etharp_find_entry+0x2d4>)
 800e934:	4613      	mov	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	4413      	add	r3, r2
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	440b      	add	r3, r1
 800e93e:	3312      	adds	r3, #18
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	8b3a      	ldrh	r2, [r7, #24]
 800e944:	429a      	cmp	r2, r3
 800e946:	d80c      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_stable = i;
 800e948:	8c3b      	ldrh	r3, [r7, #32]
 800e94a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e94c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e950:	4956      	ldr	r1, [pc, #344]	; (800eaac <etharp_find_entry+0x2d4>)
 800e952:	4613      	mov	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	4413      	add	r3, r2
 800e958:	00db      	lsls	r3, r3, #3
 800e95a:	440b      	add	r3, r1
 800e95c:	3312      	adds	r3, #18
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e962:	8c3b      	ldrh	r3, [r7, #32]
 800e964:	3301      	adds	r3, #1
 800e966:	b29b      	uxth	r3, r3
 800e968:	843b      	strh	r3, [r7, #32]
 800e96a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e96e:	2b09      	cmp	r3, #9
 800e970:	f77f af4c 	ble.w	800e80c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d108      	bne.n	800e990 <etharp_find_entry+0x1b8>
 800e97e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e982:	2b0a      	cmp	r3, #10
 800e984:	d107      	bne.n	800e996 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e986:	7afb      	ldrb	r3, [r7, #11]
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e990:	f04f 33ff 	mov.w	r3, #4294967295
 800e994:	e085      	b.n	800eaa2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	dc02      	bgt.n	800e9a4 <etharp_find_entry+0x1cc>
    i = empty;
 800e99e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9a0:	843b      	strh	r3, [r7, #32]
 800e9a2:	e039      	b.n	800ea18 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e9a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e9a8:	2b09      	cmp	r3, #9
 800e9aa:	dc14      	bgt.n	800e9d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e9b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9b4:	493d      	ldr	r1, [pc, #244]	; (800eaac <etharp_find_entry+0x2d4>)
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	4413      	add	r3, r2
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	440b      	add	r3, r1
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d018      	beq.n	800e9f8 <etharp_find_entry+0x220>
 800e9c6:	4b3a      	ldr	r3, [pc, #232]	; (800eab0 <etharp_find_entry+0x2d8>)
 800e9c8:	f240 126d 	movw	r2, #365	; 0x16d
 800e9cc:	493b      	ldr	r1, [pc, #236]	; (800eabc <etharp_find_entry+0x2e4>)
 800e9ce:	483a      	ldr	r0, [pc, #232]	; (800eab8 <etharp_find_entry+0x2e0>)
 800e9d0:	f002 f9ee 	bl	8010db0 <iprintf>
 800e9d4:	e010      	b.n	800e9f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e9d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e9da:	2b09      	cmp	r3, #9
 800e9dc:	dc02      	bgt.n	800e9e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e9de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9e0:	843b      	strh	r3, [r7, #32]
 800e9e2:	e009      	b.n	800e9f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e9e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	dc02      	bgt.n	800e9f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e9ec:	8bfb      	ldrh	r3, [r7, #30]
 800e9ee:	843b      	strh	r3, [r7, #32]
 800e9f0:	e002      	b.n	800e9f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f6:	e054      	b.n	800eaa2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e9f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e9fc:	2b09      	cmp	r3, #9
 800e9fe:	dd06      	ble.n	800ea0e <etharp_find_entry+0x236>
 800ea00:	4b2b      	ldr	r3, [pc, #172]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea02:	f240 127f 	movw	r2, #383	; 0x17f
 800ea06:	492e      	ldr	r1, [pc, #184]	; (800eac0 <etharp_find_entry+0x2e8>)
 800ea08:	482b      	ldr	r0, [pc, #172]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea0a:	f002 f9d1 	bl	8010db0 <iprintf>
    etharp_free_entry(i);
 800ea0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff fe06 	bl	800e624 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	dd06      	ble.n	800ea2e <etharp_find_entry+0x256>
 800ea20:	4b23      	ldr	r3, [pc, #140]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea22:	f240 1283 	movw	r2, #387	; 0x183
 800ea26:	4926      	ldr	r1, [pc, #152]	; (800eac0 <etharp_find_entry+0x2e8>)
 800ea28:	4823      	ldr	r0, [pc, #140]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea2a:	f002 f9c1 	bl	8010db0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea32:	491e      	ldr	r1, [pc, #120]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea34:	4613      	mov	r3, r2
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	4413      	add	r3, r2
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	440b      	add	r3, r1
 800ea3e:	3314      	adds	r3, #20
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d006      	beq.n	800ea54 <etharp_find_entry+0x27c>
 800ea46:	4b1a      	ldr	r3, [pc, #104]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea48:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ea4c:	491d      	ldr	r1, [pc, #116]	; (800eac4 <etharp_find_entry+0x2ec>)
 800ea4e:	481a      	ldr	r0, [pc, #104]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea50:	f002 f9ae 	bl	8010db0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00b      	beq.n	800ea72 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ea5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6819      	ldr	r1, [r3, #0]
 800ea62:	4812      	ldr	r0, [pc, #72]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea64:	4613      	mov	r3, r2
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	4413      	add	r3, r2
 800ea6a:	00db      	lsls	r3, r3, #3
 800ea6c:	4403      	add	r3, r0
 800ea6e:	3304      	adds	r3, #4
 800ea70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ea72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea76:	490d      	ldr	r1, [pc, #52]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea78:	4613      	mov	r3, r2
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	4413      	add	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	440b      	add	r3, r1
 800ea82:	3312      	adds	r3, #18
 800ea84:	2200      	movs	r2, #0
 800ea86:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ea88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea8c:	4907      	ldr	r1, [pc, #28]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea8e:	4613      	mov	r3, r2
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	4413      	add	r3, r2
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	440b      	add	r3, r1
 800ea98:	3308      	adds	r3, #8
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ea9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3728      	adds	r7, #40	; 0x28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20008c70 	.word	0x20008c70
 800eab0:	08014164 	.word	0x08014164
 800eab4:	0801419c 	.word	0x0801419c
 800eab8:	080141dc 	.word	0x080141dc
 800eabc:	08014204 	.word	0x08014204
 800eac0:	0801421c 	.word	0x0801421c
 800eac4:	08014230 	.word	0x08014230

0800eac8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af02      	add	r7, sp, #8
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eadc:	2b06      	cmp	r3, #6
 800eade:	d006      	beq.n	800eaee <etharp_update_arp_entry+0x26>
 800eae0:	4b48      	ldr	r3, [pc, #288]	; (800ec04 <etharp_update_arp_entry+0x13c>)
 800eae2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eae6:	4948      	ldr	r1, [pc, #288]	; (800ec08 <etharp_update_arp_entry+0x140>)
 800eae8:	4848      	ldr	r0, [pc, #288]	; (800ec0c <etharp_update_arp_entry+0x144>)
 800eaea:	f002 f961 	bl	8010db0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d012      	beq.n	800eb1a <etharp_update_arp_entry+0x52>
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68f9      	ldr	r1, [r7, #12]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 f8fe 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800eb08:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d105      	bne.n	800eb1a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb16:	2be0      	cmp	r3, #224	; 0xe0
 800eb18:	d102      	bne.n	800eb20 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb1a:	f06f 030f 	mvn.w	r3, #15
 800eb1e:	e06c      	b.n	800ebfa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4619      	mov	r1, r3
 800eb26:	68b8      	ldr	r0, [r7, #8]
 800eb28:	f7ff fe56 	bl	800e7d8 <etharp_find_entry>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	da02      	bge.n	800eb3e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb38:	8afb      	ldrh	r3, [r7, #22]
 800eb3a:	b25b      	sxtb	r3, r3
 800eb3c:	e05d      	b.n	800ebfa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eb3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb42:	4933      	ldr	r1, [pc, #204]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb44:	4613      	mov	r3, r2
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	4413      	add	r3, r2
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	440b      	add	r3, r1
 800eb4e:	3314      	adds	r3, #20
 800eb50:	2202      	movs	r2, #2
 800eb52:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb58:	492d      	ldr	r1, [pc, #180]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	4413      	add	r3, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	440b      	add	r3, r1
 800eb64:	3308      	adds	r3, #8
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eb6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	4413      	add	r3, r2
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	3308      	adds	r3, #8
 800eb78:	4a25      	ldr	r2, [pc, #148]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb7a:	4413      	add	r3, r2
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	2206      	movs	r2, #6
 800eb80:	6879      	ldr	r1, [r7, #4]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f002 fa0d 	bl	8010fa2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eb88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb8c:	4920      	ldr	r1, [pc, #128]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb8e:	4613      	mov	r3, r2
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4413      	add	r3, r2
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	440b      	add	r3, r1
 800eb98:	3312      	adds	r3, #18
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800eb9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eba2:	491b      	ldr	r1, [pc, #108]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eba4:	4613      	mov	r3, r2
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	4413      	add	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	440b      	add	r3, r1
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d021      	beq.n	800ebf8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ebb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebb8:	4915      	ldr	r1, [pc, #84]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	440b      	add	r3, r1
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ebc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebcc:	4910      	ldr	r1, [pc, #64]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	440b      	add	r3, r1
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ebe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6939      	ldr	r1, [r7, #16]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f001 ff97 	bl	8010b20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ebf2:	6938      	ldr	r0, [r7, #16]
 800ebf4:	f7f8 ff2a 	bl	8007a4c <pbuf_free>
  }
  return ERR_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	08014164 	.word	0x08014164
 800ec08:	0801425c 	.word	0x0801425c
 800ec0c:	080141dc 	.word	0x080141dc
 800ec10:	20008c70 	.word	0x20008c70

0800ec14 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e01e      	b.n	800ec60 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ec22:	4913      	ldr	r1, [pc, #76]	; (800ec70 <etharp_cleanup_netif+0x5c>)
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4613      	mov	r3, r2
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	4413      	add	r3, r2
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	440b      	add	r3, r1
 800ec30:	3314      	adds	r3, #20
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec36:	7afb      	ldrb	r3, [r7, #11]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00e      	beq.n	800ec5a <etharp_cleanup_netif+0x46>
 800ec3c:	490c      	ldr	r1, [pc, #48]	; (800ec70 <etharp_cleanup_netif+0x5c>)
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	4613      	mov	r3, r2
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	440b      	add	r3, r1
 800ec4a:	3308      	adds	r3, #8
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f7ff fce5 	bl	800e624 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b09      	cmp	r3, #9
 800ec64:	dddd      	ble.n	800ec22 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ec66:	bf00      	nop
 800ec68:	bf00      	nop
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	20008c70 	.word	0x20008c70

0800ec74 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ec74:	b5b0      	push	{r4, r5, r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af04      	add	r7, sp, #16
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d107      	bne.n	800ec94 <etharp_input+0x20>
 800ec84:	4b3d      	ldr	r3, [pc, #244]	; (800ed7c <etharp_input+0x108>)
 800ec86:	f240 228a 	movw	r2, #650	; 0x28a
 800ec8a:	493d      	ldr	r1, [pc, #244]	; (800ed80 <etharp_input+0x10c>)
 800ec8c:	483d      	ldr	r0, [pc, #244]	; (800ed84 <etharp_input+0x110>)
 800ec8e:	f002 f88f 	bl	8010db0 <iprintf>
 800ec92:	e06f      	b.n	800ed74 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eca4:	d10c      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ecaa:	2b06      	cmp	r3, #6
 800ecac:	d108      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ecb2:	2b04      	cmp	r3, #4
 800ecb4:	d104      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecbc:	2b08      	cmp	r3, #8
 800ecbe:	d003      	beq.n	800ecc8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f8 fec3 	bl	8007a4c <pbuf_free>
    return;
 800ecc6:	e055      	b.n	800ed74 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	330e      	adds	r3, #14
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	3318      	adds	r3, #24
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <etharp_input+0x74>
    for_us = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	75fb      	strb	r3, [r7, #23]
 800ece6:	e009      	b.n	800ecfc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	3304      	adds	r3, #4
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	bf0c      	ite	eq
 800ecf4:	2301      	moveq	r3, #1
 800ecf6:	2300      	movne	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	f103 0208 	add.w	r2, r3, #8
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <etharp_input+0x98>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <etharp_input+0x9a>
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	f107 010c 	add.w	r1, r7, #12
 800ed12:	6838      	ldr	r0, [r7, #0]
 800ed14:	f7ff fed8 	bl	800eac8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed22:	d003      	beq.n	800ed2c <etharp_input+0xb8>
 800ed24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed28:	d01e      	beq.n	800ed68 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ed2a:	e020      	b.n	800ed6e <etharp_input+0xfa>
      if (for_us) {
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d01c      	beq.n	800ed6c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ed4c:	2102      	movs	r1, #2
 800ed4e:	9103      	str	r1, [sp, #12]
 800ed50:	f107 010c 	add.w	r1, r7, #12
 800ed54:	9102      	str	r1, [sp, #8]
 800ed56:	9201      	str	r2, [sp, #4]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4601      	mov	r1, r0
 800ed60:	6838      	ldr	r0, [r7, #0]
 800ed62:	f000 faeb 	bl	800f33c <etharp_raw>
      break;
 800ed66:	e001      	b.n	800ed6c <etharp_input+0xf8>
      break;
 800ed68:	bf00      	nop
 800ed6a:	e000      	b.n	800ed6e <etharp_input+0xfa>
      break;
 800ed6c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7f8 fe6c 	bl	8007a4c <pbuf_free>
}
 800ed74:	3718      	adds	r7, #24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bdb0      	pop	{r4, r5, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	08014164 	.word	0x08014164
 800ed80:	080142b4 	.word	0x080142b4
 800ed84:	080141dc 	.word	0x080141dc

0800ed88 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af02      	add	r7, sp, #8
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	4613      	mov	r3, r2
 800ed94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ed96:	79fa      	ldrb	r2, [r7, #7]
 800ed98:	4944      	ldr	r1, [pc, #272]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	4413      	add	r3, r2
 800eda0:	00db      	lsls	r3, r3, #3
 800eda2:	440b      	add	r3, r1
 800eda4:	3314      	adds	r3, #20
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d806      	bhi.n	800edba <etharp_output_to_arp_index+0x32>
 800edac:	4b40      	ldr	r3, [pc, #256]	; (800eeb0 <etharp_output_to_arp_index+0x128>)
 800edae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800edb2:	4940      	ldr	r1, [pc, #256]	; (800eeb4 <etharp_output_to_arp_index+0x12c>)
 800edb4:	4840      	ldr	r0, [pc, #256]	; (800eeb8 <etharp_output_to_arp_index+0x130>)
 800edb6:	f001 fffb 	bl	8010db0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800edba:	79fa      	ldrb	r2, [r7, #7]
 800edbc:	493b      	ldr	r1, [pc, #236]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800edbe:	4613      	mov	r3, r2
 800edc0:	005b      	lsls	r3, r3, #1
 800edc2:	4413      	add	r3, r2
 800edc4:	00db      	lsls	r3, r3, #3
 800edc6:	440b      	add	r3, r1
 800edc8:	3314      	adds	r3, #20
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d153      	bne.n	800ee78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800edd0:	79fa      	ldrb	r2, [r7, #7]
 800edd2:	4936      	ldr	r1, [pc, #216]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800edd4:	4613      	mov	r3, r2
 800edd6:	005b      	lsls	r3, r3, #1
 800edd8:	4413      	add	r3, r2
 800edda:	00db      	lsls	r3, r3, #3
 800eddc:	440b      	add	r3, r1
 800edde:	3312      	adds	r3, #18
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ede6:	d919      	bls.n	800ee1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ede8:	79fa      	ldrb	r2, [r7, #7]
 800edea:	4613      	mov	r3, r2
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	4413      	add	r3, r2
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	4a2e      	ldr	r2, [pc, #184]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800edf4:	4413      	add	r3, r2
 800edf6:	3304      	adds	r3, #4
 800edf8:	4619      	mov	r1, r3
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f000 fb4c 	bl	800f498 <etharp_request>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d138      	bne.n	800ee78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee06:	79fa      	ldrb	r2, [r7, #7]
 800ee08:	4928      	ldr	r1, [pc, #160]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	4413      	add	r3, r2
 800ee10:	00db      	lsls	r3, r3, #3
 800ee12:	440b      	add	r3, r1
 800ee14:	3314      	adds	r3, #20
 800ee16:	2203      	movs	r2, #3
 800ee18:	701a      	strb	r2, [r3, #0]
 800ee1a:	e02d      	b.n	800ee78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ee1c:	79fa      	ldrb	r2, [r7, #7]
 800ee1e:	4923      	ldr	r1, [pc, #140]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee20:	4613      	mov	r3, r2
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	4413      	add	r3, r2
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	440b      	add	r3, r1
 800ee2a:	3312      	adds	r3, #18
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee32:	d321      	bcc.n	800ee78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee34:	79fa      	ldrb	r2, [r7, #7]
 800ee36:	4613      	mov	r3, r2
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	4413      	add	r3, r2
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	4a1b      	ldr	r2, [pc, #108]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee40:	4413      	add	r3, r2
 800ee42:	1d19      	adds	r1, r3, #4
 800ee44:	79fa      	ldrb	r2, [r7, #7]
 800ee46:	4613      	mov	r3, r2
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	3308      	adds	r3, #8
 800ee50:	4a16      	ldr	r2, [pc, #88]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee52:	4413      	add	r3, r2
 800ee54:	3304      	adds	r3, #4
 800ee56:	461a      	mov	r2, r3
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 fafb 	bl	800f454 <etharp_request_dst>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d109      	bne.n	800ee78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee64:	79fa      	ldrb	r2, [r7, #7]
 800ee66:	4911      	ldr	r1, [pc, #68]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee68:	4613      	mov	r3, r2
 800ee6a:	005b      	lsls	r3, r3, #1
 800ee6c:	4413      	add	r3, r2
 800ee6e:	00db      	lsls	r3, r3, #3
 800ee70:	440b      	add	r3, r1
 800ee72:	3314      	adds	r3, #20
 800ee74:	2203      	movs	r2, #3
 800ee76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ee7e:	79fa      	ldrb	r2, [r7, #7]
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	3308      	adds	r3, #8
 800ee8a:	4a08      	ldr	r2, [pc, #32]	; (800eeac <etharp_output_to_arp_index+0x124>)
 800ee8c:	4413      	add	r3, r2
 800ee8e:	3304      	adds	r3, #4
 800ee90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee94:	9200      	str	r2, [sp, #0]
 800ee96:	460a      	mov	r2, r1
 800ee98:	68b9      	ldr	r1, [r7, #8]
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f001 fe40 	bl	8010b20 <ethernet_output>
 800eea0:	4603      	mov	r3, r0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	20008c70 	.word	0x20008c70
 800eeb0:	08014164 	.word	0x08014164
 800eeb4:	080142d4 	.word	0x080142d4
 800eeb8:	080141dc 	.word	0x080141dc

0800eebc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08a      	sub	sp, #40	; 0x28
 800eec0:	af02      	add	r7, sp, #8
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <etharp_output+0x24>
 800eed2:	4b73      	ldr	r3, [pc, #460]	; (800f0a0 <etharp_output+0x1e4>)
 800eed4:	f240 321e 	movw	r2, #798	; 0x31e
 800eed8:	4972      	ldr	r1, [pc, #456]	; (800f0a4 <etharp_output+0x1e8>)
 800eeda:	4873      	ldr	r0, [pc, #460]	; (800f0a8 <etharp_output+0x1ec>)
 800eedc:	f001 ff68 	bl	8010db0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d106      	bne.n	800eef4 <etharp_output+0x38>
 800eee6:	4b6e      	ldr	r3, [pc, #440]	; (800f0a0 <etharp_output+0x1e4>)
 800eee8:	f240 321f 	movw	r2, #799	; 0x31f
 800eeec:	496f      	ldr	r1, [pc, #444]	; (800f0ac <etharp_output+0x1f0>)
 800eeee:	486e      	ldr	r0, [pc, #440]	; (800f0a8 <etharp_output+0x1ec>)
 800eef0:	f001 ff5e 	bl	8010db0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d106      	bne.n	800ef08 <etharp_output+0x4c>
 800eefa:	4b69      	ldr	r3, [pc, #420]	; (800f0a0 <etharp_output+0x1e4>)
 800eefc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ef00:	496b      	ldr	r1, [pc, #428]	; (800f0b0 <etharp_output+0x1f4>)
 800ef02:	4869      	ldr	r0, [pc, #420]	; (800f0a8 <etharp_output+0x1ec>)
 800ef04:	f001 ff54 	bl	8010db0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68f9      	ldr	r1, [r7, #12]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 fef8 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d002      	beq.n	800ef20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ef1a:	4b66      	ldr	r3, [pc, #408]	; (800f0b4 <etharp_output+0x1f8>)
 800ef1c:	61fb      	str	r3, [r7, #28]
 800ef1e:	e0af      	b.n	800f080 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef28:	2be0      	cmp	r3, #224	; 0xe0
 800ef2a:	d118      	bne.n	800ef5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef30:	2300      	movs	r3, #0
 800ef32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef34:	235e      	movs	r3, #94	; 0x5e
 800ef36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3303      	adds	r3, #3
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ef56:	f107 0310 	add.w	r3, r7, #16
 800ef5a:	61fb      	str	r3, [r7, #28]
 800ef5c:	e090      	b.n	800f080 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	3304      	adds	r3, #4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	405a      	eors	r2, r3
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4013      	ands	r3, r2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d012      	beq.n	800ef9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef7c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d00b      	beq.n	800ef9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	330c      	adds	r3, #12
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d003      	beq.n	800ef96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	330c      	adds	r3, #12
 800ef92:	61bb      	str	r3, [r7, #24]
 800ef94:	e002      	b.n	800ef9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ef96:	f06f 0303 	mvn.w	r3, #3
 800ef9a:	e07d      	b.n	800f098 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ef9c:	4b46      	ldr	r3, [pc, #280]	; (800f0b8 <etharp_output+0x1fc>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	4619      	mov	r1, r3
 800efa2:	4a46      	ldr	r2, [pc, #280]	; (800f0bc <etharp_output+0x200>)
 800efa4:	460b      	mov	r3, r1
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	440b      	add	r3, r1
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	4413      	add	r3, r2
 800efae:	3314      	adds	r3, #20
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d925      	bls.n	800f002 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800efb6:	4b40      	ldr	r3, [pc, #256]	; (800f0b8 <etharp_output+0x1fc>)
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	4619      	mov	r1, r3
 800efbc:	4a3f      	ldr	r2, [pc, #252]	; (800f0bc <etharp_output+0x200>)
 800efbe:	460b      	mov	r3, r1
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	440b      	add	r3, r1
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	4413      	add	r3, r2
 800efc8:	3308      	adds	r3, #8
 800efca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d117      	bne.n	800f002 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	4b38      	ldr	r3, [pc, #224]	; (800f0b8 <etharp_output+0x1fc>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	4618      	mov	r0, r3
 800efdc:	4937      	ldr	r1, [pc, #220]	; (800f0bc <etharp_output+0x200>)
 800efde:	4603      	mov	r3, r0
 800efe0:	005b      	lsls	r3, r3, #1
 800efe2:	4403      	add	r3, r0
 800efe4:	00db      	lsls	r3, r3, #3
 800efe6:	440b      	add	r3, r1
 800efe8:	3304      	adds	r3, #4
 800efea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800efec:	429a      	cmp	r2, r3
 800efee:	d108      	bne.n	800f002 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800eff0:	4b31      	ldr	r3, [pc, #196]	; (800f0b8 <etharp_output+0x1fc>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	461a      	mov	r2, r3
 800eff6:	68b9      	ldr	r1, [r7, #8]
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f7ff fec5 	bl	800ed88 <etharp_output_to_arp_index>
 800effe:	4603      	mov	r3, r0
 800f000:	e04a      	b.n	800f098 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f002:	2300      	movs	r3, #0
 800f004:	75fb      	strb	r3, [r7, #23]
 800f006:	e031      	b.n	800f06c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f008:	7dfa      	ldrb	r2, [r7, #23]
 800f00a:	492c      	ldr	r1, [pc, #176]	; (800f0bc <etharp_output+0x200>)
 800f00c:	4613      	mov	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	4413      	add	r3, r2
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	440b      	add	r3, r1
 800f016:	3314      	adds	r3, #20
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d923      	bls.n	800f066 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f01e:	7dfa      	ldrb	r2, [r7, #23]
 800f020:	4926      	ldr	r1, [pc, #152]	; (800f0bc <etharp_output+0x200>)
 800f022:	4613      	mov	r3, r2
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	4413      	add	r3, r2
 800f028:	00db      	lsls	r3, r3, #3
 800f02a:	440b      	add	r3, r1
 800f02c:	3308      	adds	r3, #8
 800f02e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	429a      	cmp	r2, r3
 800f034:	d117      	bne.n	800f066 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	6819      	ldr	r1, [r3, #0]
 800f03a:	7dfa      	ldrb	r2, [r7, #23]
 800f03c:	481f      	ldr	r0, [pc, #124]	; (800f0bc <etharp_output+0x200>)
 800f03e:	4613      	mov	r3, r2
 800f040:	005b      	lsls	r3, r3, #1
 800f042:	4413      	add	r3, r2
 800f044:	00db      	lsls	r3, r3, #3
 800f046:	4403      	add	r3, r0
 800f048:	3304      	adds	r3, #4
 800f04a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f04c:	4299      	cmp	r1, r3
 800f04e:	d10a      	bne.n	800f066 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f050:	4a19      	ldr	r2, [pc, #100]	; (800f0b8 <etharp_output+0x1fc>)
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f056:	7dfb      	ldrb	r3, [r7, #23]
 800f058:	461a      	mov	r2, r3
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f7ff fe93 	bl	800ed88 <etharp_output_to_arp_index>
 800f062:	4603      	mov	r3, r0
 800f064:	e018      	b.n	800f098 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	3301      	adds	r3, #1
 800f06a:	75fb      	strb	r3, [r7, #23]
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d9ca      	bls.n	800f008 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	69b9      	ldr	r1, [r7, #24]
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 f822 	bl	800f0c0 <etharp_query>
 800f07c:	4603      	mov	r3, r0
 800f07e:	e00b      	b.n	800f098 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f086:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f001 fd45 	bl	8010b20 <ethernet_output>
 800f096:	4603      	mov	r3, r0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	08014164 	.word	0x08014164
 800f0a4:	080142b4 	.word	0x080142b4
 800f0a8:	080141dc 	.word	0x080141dc
 800f0ac:	08014304 	.word	0x08014304
 800f0b0:	080142a4 	.word	0x080142a4
 800f0b4:	080156dc 	.word	0x080156dc
 800f0b8:	20008d60 	.word	0x20008d60
 800f0bc:	20008c70 	.word	0x20008c70

0800f0c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08c      	sub	sp, #48	; 0x30
 800f0c4:	af02      	add	r7, sp, #8
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3326      	adds	r3, #38	; 0x26
 800f0d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f0d2:	23ff      	movs	r3, #255	; 0xff
 800f0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68f9      	ldr	r1, [r7, #12]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fe0e 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d10c      	bne.n	800f108 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0f6:	2be0      	cmp	r3, #224	; 0xe0
 800f0f8:	d006      	beq.n	800f108 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d003      	beq.n	800f108 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d102      	bne.n	800f10e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f108:	f06f 030f 	mvn.w	r3, #15
 800f10c:	e101      	b.n	800f312 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	2101      	movs	r1, #1
 800f112:	68b8      	ldr	r0, [r7, #8]
 800f114:	f7ff fb60 	bl	800e7d8 <etharp_find_entry>
 800f118:	4603      	mov	r3, r0
 800f11a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f11c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f120:	2b00      	cmp	r3, #0
 800f122:	da02      	bge.n	800f12a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f124:	8a7b      	ldrh	r3, [r7, #18]
 800f126:	b25b      	sxtb	r3, r3
 800f128:	e0f3      	b.n	800f312 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f12a:	8a7b      	ldrh	r3, [r7, #18]
 800f12c:	2b7e      	cmp	r3, #126	; 0x7e
 800f12e:	d906      	bls.n	800f13e <etharp_query+0x7e>
 800f130:	4b7a      	ldr	r3, [pc, #488]	; (800f31c <etharp_query+0x25c>)
 800f132:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f136:	497a      	ldr	r1, [pc, #488]	; (800f320 <etharp_query+0x260>)
 800f138:	487a      	ldr	r0, [pc, #488]	; (800f324 <etharp_query+0x264>)
 800f13a:	f001 fe39 	bl	8010db0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f13e:	8a7b      	ldrh	r3, [r7, #18]
 800f140:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f142:	7c7a      	ldrb	r2, [r7, #17]
 800f144:	4978      	ldr	r1, [pc, #480]	; (800f328 <etharp_query+0x268>)
 800f146:	4613      	mov	r3, r2
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	4413      	add	r3, r2
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	440b      	add	r3, r1
 800f150:	3314      	adds	r3, #20
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d115      	bne.n	800f184 <etharp_query+0xc4>
    is_new_entry = 1;
 800f158:	2301      	movs	r3, #1
 800f15a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f15c:	7c7a      	ldrb	r2, [r7, #17]
 800f15e:	4972      	ldr	r1, [pc, #456]	; (800f328 <etharp_query+0x268>)
 800f160:	4613      	mov	r3, r2
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	4413      	add	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	440b      	add	r3, r1
 800f16a:	3314      	adds	r3, #20
 800f16c:	2201      	movs	r2, #1
 800f16e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f170:	7c7a      	ldrb	r2, [r7, #17]
 800f172:	496d      	ldr	r1, [pc, #436]	; (800f328 <etharp_query+0x268>)
 800f174:	4613      	mov	r3, r2
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	4413      	add	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	440b      	add	r3, r1
 800f17e:	3308      	adds	r3, #8
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f184:	7c7a      	ldrb	r2, [r7, #17]
 800f186:	4968      	ldr	r1, [pc, #416]	; (800f328 <etharp_query+0x268>)
 800f188:	4613      	mov	r3, r2
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	4413      	add	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	440b      	add	r3, r1
 800f192:	3314      	adds	r3, #20
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d011      	beq.n	800f1be <etharp_query+0xfe>
 800f19a:	7c7a      	ldrb	r2, [r7, #17]
 800f19c:	4962      	ldr	r1, [pc, #392]	; (800f328 <etharp_query+0x268>)
 800f19e:	4613      	mov	r3, r2
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	4413      	add	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	440b      	add	r3, r1
 800f1a8:	3314      	adds	r3, #20
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d806      	bhi.n	800f1be <etharp_query+0xfe>
 800f1b0:	4b5a      	ldr	r3, [pc, #360]	; (800f31c <etharp_query+0x25c>)
 800f1b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f1b6:	495d      	ldr	r1, [pc, #372]	; (800f32c <etharp_query+0x26c>)
 800f1b8:	485a      	ldr	r0, [pc, #360]	; (800f324 <etharp_query+0x264>)
 800f1ba:	f001 fdf9 	bl	8010db0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d102      	bne.n	800f1ca <etharp_query+0x10a>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d10c      	bne.n	800f1e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 f963 	bl	800f498 <etharp_request>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d102      	bne.n	800f1e4 <etharp_query+0x124>
      return result;
 800f1de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1e2:	e096      	b.n	800f312 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d106      	bne.n	800f1f8 <etharp_query+0x138>
 800f1ea:	4b4c      	ldr	r3, [pc, #304]	; (800f31c <etharp_query+0x25c>)
 800f1ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f1f0:	494f      	ldr	r1, [pc, #316]	; (800f330 <etharp_query+0x270>)
 800f1f2:	484c      	ldr	r0, [pc, #304]	; (800f324 <etharp_query+0x264>)
 800f1f4:	f001 fddc 	bl	8010db0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f1f8:	7c7a      	ldrb	r2, [r7, #17]
 800f1fa:	494b      	ldr	r1, [pc, #300]	; (800f328 <etharp_query+0x268>)
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	440b      	add	r3, r1
 800f206:	3314      	adds	r3, #20
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d917      	bls.n	800f23e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f20e:	4a49      	ldr	r2, [pc, #292]	; (800f334 <etharp_query+0x274>)
 800f210:	7c7b      	ldrb	r3, [r7, #17]
 800f212:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f214:	7c7a      	ldrb	r2, [r7, #17]
 800f216:	4613      	mov	r3, r2
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	4413      	add	r3, r2
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	3308      	adds	r3, #8
 800f220:	4a41      	ldr	r2, [pc, #260]	; (800f328 <etharp_query+0x268>)
 800f222:	4413      	add	r3, r2
 800f224:	3304      	adds	r3, #4
 800f226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f22a:	9200      	str	r2, [sp, #0]
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f001 fc75 	bl	8010b20 <ethernet_output>
 800f236:	4603      	mov	r3, r0
 800f238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f23c:	e067      	b.n	800f30e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f23e:	7c7a      	ldrb	r2, [r7, #17]
 800f240:	4939      	ldr	r1, [pc, #228]	; (800f328 <etharp_query+0x268>)
 800f242:	4613      	mov	r3, r2
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	4413      	add	r3, r2
 800f248:	00db      	lsls	r3, r3, #3
 800f24a:	440b      	add	r3, r1
 800f24c:	3314      	adds	r3, #20
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d15c      	bne.n	800f30e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f25c:	e01c      	b.n	800f298 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	895a      	ldrh	r2, [r3, #10]
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	891b      	ldrh	r3, [r3, #8]
 800f266:	429a      	cmp	r2, r3
 800f268:	d10a      	bne.n	800f280 <etharp_query+0x1c0>
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d006      	beq.n	800f280 <etharp_query+0x1c0>
 800f272:	4b2a      	ldr	r3, [pc, #168]	; (800f31c <etharp_query+0x25c>)
 800f274:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f278:	492f      	ldr	r1, [pc, #188]	; (800f338 <etharp_query+0x278>)
 800f27a:	482a      	ldr	r0, [pc, #168]	; (800f324 <etharp_query+0x264>)
 800f27c:	f001 fd98 	bl	8010db0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	7b1b      	ldrb	r3, [r3, #12]
 800f284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <etharp_query+0x1d2>
        copy_needed = 1;
 800f28c:	2301      	movs	r3, #1
 800f28e:	61bb      	str	r3, [r7, #24]
        break;
 800f290:	e005      	b.n	800f29e <etharp_query+0x1de>
      }
      p = p->next;
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1df      	bne.n	800f25e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d007      	beq.n	800f2b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f2aa:	200e      	movs	r0, #14
 800f2ac:	f7f8 fe2a 	bl	8007f04 <pbuf_clone>
 800f2b0:	61f8      	str	r0, [r7, #28]
 800f2b2:	e004      	b.n	800f2be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f2b8:	69f8      	ldr	r0, [r7, #28]
 800f2ba:	f7f8 fc67 	bl	8007b8c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d021      	beq.n	800f308 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f2c4:	7c7a      	ldrb	r2, [r7, #17]
 800f2c6:	4918      	ldr	r1, [pc, #96]	; (800f328 <etharp_query+0x268>)
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	4413      	add	r3, r2
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	440b      	add	r3, r1
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00a      	beq.n	800f2ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f2d8:	7c7a      	ldrb	r2, [r7, #17]
 800f2da:	4913      	ldr	r1, [pc, #76]	; (800f328 <etharp_query+0x268>)
 800f2dc:	4613      	mov	r3, r2
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	4413      	add	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	440b      	add	r3, r1
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7f8 fbaf 	bl	8007a4c <pbuf_free>
      }
      arp_table[i].q = p;
 800f2ee:	7c7a      	ldrb	r2, [r7, #17]
 800f2f0:	490d      	ldr	r1, [pc, #52]	; (800f328 <etharp_query+0x268>)
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	440b      	add	r3, r1
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f306:	e002      	b.n	800f30e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f308:	23ff      	movs	r3, #255	; 0xff
 800f30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f30e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f312:	4618      	mov	r0, r3
 800f314:	3728      	adds	r7, #40	; 0x28
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	08014164 	.word	0x08014164
 800f320:	08014310 	.word	0x08014310
 800f324:	080141dc 	.word	0x080141dc
 800f328:	20008c70 	.word	0x20008c70
 800f32c:	08014320 	.word	0x08014320
 800f330:	08014304 	.word	0x08014304
 800f334:	20008d60 	.word	0x20008d60
 800f338:	08014348 	.word	0x08014348

0800f33c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b08a      	sub	sp, #40	; 0x28
 800f340:	af02      	add	r7, sp, #8
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
 800f348:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d106      	bne.n	800f362 <etharp_raw+0x26>
 800f354:	4b3a      	ldr	r3, [pc, #232]	; (800f440 <etharp_raw+0x104>)
 800f356:	f240 4257 	movw	r2, #1111	; 0x457
 800f35a:	493a      	ldr	r1, [pc, #232]	; (800f444 <etharp_raw+0x108>)
 800f35c:	483a      	ldr	r0, [pc, #232]	; (800f448 <etharp_raw+0x10c>)
 800f35e:	f001 fd27 	bl	8010db0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f362:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f366:	211c      	movs	r1, #28
 800f368:	200e      	movs	r0, #14
 800f36a:	f7f8 f88b 	bl	8007484 <pbuf_alloc>
 800f36e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f376:	f04f 33ff 	mov.w	r3, #4294967295
 800f37a:	e05d      	b.n	800f438 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	895b      	ldrh	r3, [r3, #10]
 800f380:	2b1b      	cmp	r3, #27
 800f382:	d806      	bhi.n	800f392 <etharp_raw+0x56>
 800f384:	4b2e      	ldr	r3, [pc, #184]	; (800f440 <etharp_raw+0x104>)
 800f386:	f240 4262 	movw	r2, #1122	; 0x462
 800f38a:	4930      	ldr	r1, [pc, #192]	; (800f44c <etharp_raw+0x110>)
 800f38c:	482e      	ldr	r0, [pc, #184]	; (800f448 <etharp_raw+0x10c>)
 800f38e:	f001 fd0f 	bl	8010db0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f398:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7f6 ffc2 	bl	8006324 <lwip_htons>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3ae:	2b06      	cmp	r3, #6
 800f3b0:	d006      	beq.n	800f3c0 <etharp_raw+0x84>
 800f3b2:	4b23      	ldr	r3, [pc, #140]	; (800f440 <etharp_raw+0x104>)
 800f3b4:	f240 4269 	movw	r2, #1129	; 0x469
 800f3b8:	4925      	ldr	r1, [pc, #148]	; (800f450 <etharp_raw+0x114>)
 800f3ba:	4823      	ldr	r0, [pc, #140]	; (800f448 <etharp_raw+0x10c>)
 800f3bc:	f001 fcf8 	bl	8010db0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	2206      	movs	r2, #6
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f001 fdea 	bl	8010fa2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	3312      	adds	r3, #18
 800f3d2:	2206      	movs	r2, #6
 800f3d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f001 fde3 	bl	8010fa2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	330e      	adds	r3, #14
 800f3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3e2:	6812      	ldr	r2, [r2, #0]
 800f3e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	3318      	adds	r3, #24
 800f3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ec:	6812      	ldr	r2, [r2, #0]
 800f3ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f042 0201 	orr.w	r2, r2, #1
 800f3fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2200      	movs	r2, #0
 800f402:	f042 0208 	orr.w	r2, r2, #8
 800f406:	709a      	strb	r2, [r3, #2]
 800f408:	2200      	movs	r2, #0
 800f40a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	2206      	movs	r2, #6
 800f410:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2204      	movs	r2, #4
 800f416:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f418:	f640 0306 	movw	r3, #2054	; 0x806
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	69b9      	ldr	r1, [r7, #24]
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f001 fb7b 	bl	8010b20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f42a:	69b8      	ldr	r0, [r7, #24]
 800f42c:	f7f8 fb0e 	bl	8007a4c <pbuf_free>
  p = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f434:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3720      	adds	r7, #32
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	08014164 	.word	0x08014164
 800f444:	080142b4 	.word	0x080142b4
 800f448:	080141dc 	.word	0x080141dc
 800f44c:	08014364 	.word	0x08014364
 800f450:	08014398 	.word	0x08014398

0800f454 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b088      	sub	sp, #32
 800f458:	af04      	add	r7, sp, #16
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f470:	2201      	movs	r2, #1
 800f472:	9203      	str	r2, [sp, #12]
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	9202      	str	r2, [sp, #8]
 800f478:	4a06      	ldr	r2, [pc, #24]	; (800f494 <etharp_request_dst+0x40>)
 800f47a:	9201      	str	r2, [sp, #4]
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	4603      	mov	r3, r0
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff ff5a 	bl	800f33c <etharp_raw>
 800f488:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	080156e4 	.word	0x080156e4

0800f498 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f4a2:	4a05      	ldr	r2, [pc, #20]	; (800f4b8 <etharp_request+0x20>)
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff ffd4 	bl	800f454 <etharp_request_dst>
 800f4ac:	4603      	mov	r3, r0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	080156dc 	.word	0x080156dc

0800f4bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b08e      	sub	sp, #56	; 0x38
 800f4c0:	af04      	add	r7, sp, #16
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f4c6:	4b79      	ldr	r3, [pc, #484]	; (800f6ac <icmp_input+0x1f0>)
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	f003 030f 	and.w	r3, r3, #15
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f4dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4de:	2b13      	cmp	r3, #19
 800f4e0:	f240 80cd 	bls.w	800f67e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	895b      	ldrh	r3, [r3, #10]
 800f4e8:	2b03      	cmp	r3, #3
 800f4ea:	f240 80ca 	bls.w	800f682 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f4f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f000 80b7 	beq.w	800f670 <icmp_input+0x1b4>
 800f502:	2b08      	cmp	r3, #8
 800f504:	f040 80b7 	bne.w	800f676 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f508:	4b69      	ldr	r3, [pc, #420]	; (800f6b0 <icmp_input+0x1f4>)
 800f50a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f50c:	4b67      	ldr	r3, [pc, #412]	; (800f6ac <icmp_input+0x1f0>)
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f514:	2be0      	cmp	r3, #224	; 0xe0
 800f516:	f000 80bb 	beq.w	800f690 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f51a:	4b64      	ldr	r3, [pc, #400]	; (800f6ac <icmp_input+0x1f0>)
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	4a63      	ldr	r2, [pc, #396]	; (800f6ac <icmp_input+0x1f0>)
 800f520:	6812      	ldr	r2, [r2, #0]
 800f522:	4611      	mov	r1, r2
 800f524:	4618      	mov	r0, r3
 800f526:	f000 fbed 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 80b1 	bne.w	800f694 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	891b      	ldrh	r3, [r3, #8]
 800f536:	2b07      	cmp	r3, #7
 800f538:	f240 80a5 	bls.w	800f686 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f53e:	330e      	adds	r3, #14
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7f8 f9ec 	bl	8007920 <pbuf_add_header>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d04b      	beq.n	800f5e6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	891a      	ldrh	r2, [r3, #8]
 800f552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f554:	4413      	add	r3, r2
 800f556:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	891b      	ldrh	r3, [r3, #8]
 800f55c:	8b7a      	ldrh	r2, [r7, #26]
 800f55e:	429a      	cmp	r2, r3
 800f560:	f0c0 809a 	bcc.w	800f698 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f564:	8b7b      	ldrh	r3, [r7, #26]
 800f566:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f56a:	4619      	mov	r1, r3
 800f56c:	200e      	movs	r0, #14
 800f56e:	f7f7 ff89 	bl	8007484 <pbuf_alloc>
 800f572:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f000 8090 	beq.w	800f69c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	895b      	ldrh	r3, [r3, #10]
 800f580:	461a      	mov	r2, r3
 800f582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f584:	3308      	adds	r3, #8
 800f586:	429a      	cmp	r2, r3
 800f588:	d203      	bcs.n	800f592 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f58a:	6978      	ldr	r0, [r7, #20]
 800f58c:	f7f8 fa5e 	bl	8007a4c <pbuf_free>
          goto icmperr;
 800f590:	e085      	b.n	800f69e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f59a:	4618      	mov	r0, r3
 800f59c:	f001 fd01 	bl	8010fa2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f5a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	6978      	ldr	r0, [r7, #20]
 800f5a6:	f7f8 f9cb 	bl	8007940 <pbuf_remove_header>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d009      	beq.n	800f5c4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f5b0:	4b40      	ldr	r3, [pc, #256]	; (800f6b4 <icmp_input+0x1f8>)
 800f5b2:	22b6      	movs	r2, #182	; 0xb6
 800f5b4:	4940      	ldr	r1, [pc, #256]	; (800f6b8 <icmp_input+0x1fc>)
 800f5b6:	4841      	ldr	r0, [pc, #260]	; (800f6bc <icmp_input+0x200>)
 800f5b8:	f001 fbfa 	bl	8010db0 <iprintf>
          pbuf_free(r);
 800f5bc:	6978      	ldr	r0, [r7, #20]
 800f5be:	f7f8 fa45 	bl	8007a4c <pbuf_free>
          goto icmperr;
 800f5c2:	e06c      	b.n	800f69e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f5c4:	6879      	ldr	r1, [r7, #4]
 800f5c6:	6978      	ldr	r0, [r7, #20]
 800f5c8:	f7f8 fb58 	bl	8007c7c <pbuf_copy>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d003      	beq.n	800f5da <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f5d2:	6978      	ldr	r0, [r7, #20]
 800f5d4:	f7f8 fa3a 	bl	8007a4c <pbuf_free>
          goto icmperr;
 800f5d8:	e061      	b.n	800f69e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7f8 fa36 	bl	8007a4c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	607b      	str	r3, [r7, #4]
 800f5e4:	e00f      	b.n	800f606 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f5e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5e8:	330e      	adds	r3, #14
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7f8 f9a7 	bl	8007940 <pbuf_remove_header>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d006      	beq.n	800f606 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f5f8:	4b2e      	ldr	r3, [pc, #184]	; (800f6b4 <icmp_input+0x1f8>)
 800f5fa:	22c7      	movs	r2, #199	; 0xc7
 800f5fc:	4930      	ldr	r1, [pc, #192]	; (800f6c0 <icmp_input+0x204>)
 800f5fe:	482f      	ldr	r0, [pc, #188]	; (800f6bc <icmp_input+0x200>)
 800f600:	f001 fbd6 	bl	8010db0 <iprintf>
          goto icmperr;
 800f604:	e04b      	b.n	800f69e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f60c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7f8 f985 	bl	8007920 <pbuf_add_header>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d12b      	bne.n	800f674 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f62a:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <icmp_input+0x1f0>)
 800f62c:	691a      	ldr	r2, [r3, #16]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	2200      	movs	r2, #0
 800f636:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2200      	movs	r2, #0
 800f63c:	709a      	strb	r2, [r3, #2]
 800f63e:	2200      	movs	r2, #0
 800f640:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	22ff      	movs	r2, #255	; 0xff
 800f646:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	729a      	strb	r2, [r3, #10]
 800f64e:	2200      	movs	r2, #0
 800f650:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	9302      	str	r3, [sp, #8]
 800f656:	2301      	movs	r3, #1
 800f658:	9301      	str	r3, [sp, #4]
 800f65a:	2300      	movs	r3, #0
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	23ff      	movs	r3, #255	; 0xff
 800f660:	2200      	movs	r2, #0
 800f662:	69f9      	ldr	r1, [r7, #28]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 fa75 	bl	800fb54 <ip4_output_if>
 800f66a:	4603      	mov	r3, r0
 800f66c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f66e:	e001      	b.n	800f674 <icmp_input+0x1b8>
      break;
 800f670:	bf00      	nop
 800f672:	e000      	b.n	800f676 <icmp_input+0x1ba>
      break;
 800f674:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7f8 f9e8 	bl	8007a4c <pbuf_free>
  return;
 800f67c:	e013      	b.n	800f6a6 <icmp_input+0x1ea>
    goto lenerr;
 800f67e:	bf00      	nop
 800f680:	e002      	b.n	800f688 <icmp_input+0x1cc>
    goto lenerr;
 800f682:	bf00      	nop
 800f684:	e000      	b.n	800f688 <icmp_input+0x1cc>
        goto lenerr;
 800f686:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7f8 f9df 	bl	8007a4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f68e:	e00a      	b.n	800f6a6 <icmp_input+0x1ea>
        goto icmperr;
 800f690:	bf00      	nop
 800f692:	e004      	b.n	800f69e <icmp_input+0x1e2>
        goto icmperr;
 800f694:	bf00      	nop
 800f696:	e002      	b.n	800f69e <icmp_input+0x1e2>
          goto icmperr;
 800f698:	bf00      	nop
 800f69a:	e000      	b.n	800f69e <icmp_input+0x1e2>
          goto icmperr;
 800f69c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7f8 f9d4 	bl	8007a4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f6a6:	3728      	adds	r7, #40	; 0x28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	200056a0 	.word	0x200056a0
 800f6b0:	200056b4 	.word	0x200056b4
 800f6b4:	080143dc 	.word	0x080143dc
 800f6b8:	08014414 	.word	0x08014414
 800f6bc:	0801444c 	.word	0x0801444c
 800f6c0:	08014474 	.word	0x08014474

0800f6c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	2103      	movs	r1, #3
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 f814 	bl	800f704 <icmp_send_response>
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	210b      	movs	r1, #11
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f804 	bl	800f704 <icmp_send_response>
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08c      	sub	sp, #48	; 0x30
 800f708:	af04      	add	r7, sp, #16
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	70fb      	strb	r3, [r7, #3]
 800f710:	4613      	mov	r3, r2
 800f712:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f714:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f718:	2124      	movs	r1, #36	; 0x24
 800f71a:	2022      	movs	r0, #34	; 0x22
 800f71c:	f7f7 feb2 	bl	8007484 <pbuf_alloc>
 800f720:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d04c      	beq.n	800f7c2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	895b      	ldrh	r3, [r3, #10]
 800f72c:	2b23      	cmp	r3, #35	; 0x23
 800f72e:	d806      	bhi.n	800f73e <icmp_send_response+0x3a>
 800f730:	4b26      	ldr	r3, [pc, #152]	; (800f7cc <icmp_send_response+0xc8>)
 800f732:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f736:	4926      	ldr	r1, [pc, #152]	; (800f7d0 <icmp_send_response+0xcc>)
 800f738:	4826      	ldr	r0, [pc, #152]	; (800f7d4 <icmp_send_response+0xd0>)
 800f73a:	f001 fb39 	bl	8010db0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	78fa      	ldrb	r2, [r7, #3]
 800f74e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	78ba      	ldrb	r2, [r7, #2]
 800f754:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2200      	movs	r2, #0
 800f75a:	711a      	strb	r2, [r3, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	2200      	movs	r2, #0
 800f764:	719a      	strb	r2, [r3, #6]
 800f766:	2200      	movs	r2, #0
 800f768:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	f103 0008 	add.w	r0, r3, #8
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	221c      	movs	r2, #28
 800f778:	4619      	mov	r1, r3
 800f77a:	f001 fc12 	bl	8010fa2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f784:	f107 030c 	add.w	r3, r7, #12
 800f788:	4618      	mov	r0, r3
 800f78a:	f000 f825 	bl	800f7d8 <ip4_route>
 800f78e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d011      	beq.n	800f7ba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2200      	movs	r2, #0
 800f79a:	709a      	strb	r2, [r3, #2]
 800f79c:	2200      	movs	r2, #0
 800f79e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f7a0:	f107 020c 	add.w	r2, r7, #12
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	9302      	str	r3, [sp, #8]
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	23ff      	movs	r3, #255	; 0xff
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	69f8      	ldr	r0, [r7, #28]
 800f7b6:	f000 f9cd 	bl	800fb54 <ip4_output_if>
  }
  pbuf_free(q);
 800f7ba:	69f8      	ldr	r0, [r7, #28]
 800f7bc:	f7f8 f946 	bl	8007a4c <pbuf_free>
 800f7c0:	e000      	b.n	800f7c4 <icmp_send_response+0xc0>
    return;
 800f7c2:	bf00      	nop
}
 800f7c4:	3720      	adds	r7, #32
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	080143dc 	.word	0x080143dc
 800f7d0:	080144a8 	.word	0x080144a8
 800f7d4:	0801444c 	.word	0x0801444c

0800f7d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f7e0:	4b33      	ldr	r3, [pc, #204]	; (800f8b0 <ip4_route+0xd8>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	e036      	b.n	800f856 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d02b      	beq.n	800f850 <ip4_route+0x78>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7fe:	089b      	lsrs	r3, r3, #2
 800f800:	f003 0301 	and.w	r3, r3, #1
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d022      	beq.n	800f850 <ip4_route+0x78>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3304      	adds	r3, #4
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d01d      	beq.n	800f850 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3304      	adds	r3, #4
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	405a      	eors	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3308      	adds	r3, #8
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4013      	ands	r3, r2
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	e038      	b.n	800f8a2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f836:	f003 0302 	and.w	r3, r3, #2
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d108      	bne.n	800f850 <ip4_route+0x78>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	330c      	adds	r3, #12
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d101      	bne.n	800f850 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	e028      	b.n	800f8a2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1c5      	bne.n	800f7e8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f85c:	4b15      	ldr	r3, [pc, #84]	; (800f8b4 <ip4_route+0xdc>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d01a      	beq.n	800f89a <ip4_route+0xc2>
 800f864:	4b13      	ldr	r3, [pc, #76]	; (800f8b4 <ip4_route+0xdc>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	d012      	beq.n	800f89a <ip4_route+0xc2>
 800f874:	4b0f      	ldr	r3, [pc, #60]	; (800f8b4 <ip4_route+0xdc>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f87c:	f003 0304 	and.w	r3, r3, #4
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00a      	beq.n	800f89a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f884:	4b0b      	ldr	r3, [pc, #44]	; (800f8b4 <ip4_route+0xdc>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3304      	adds	r3, #4
 800f88a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d004      	beq.n	800f89a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b7f      	cmp	r3, #127	; 0x7f
 800f898:	d101      	bne.n	800f89e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f89a:	2300      	movs	r3, #0
 800f89c:	e001      	b.n	800f8a2 <ip4_route+0xca>
  }

  return netif_default;
 800f89e:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <ip4_route+0xdc>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3714      	adds	r7, #20
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	20008c04 	.word	0x20008c04
 800f8b4:	20008c08 	.word	0x20008c08

0800f8b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8c6:	f003 0301 	and.w	r3, r3, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d016      	beq.n	800f8fe <ip4_input_accept+0x46>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d011      	beq.n	800f8fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f8da:	4b0b      	ldr	r3, [pc, #44]	; (800f908 <ip4_input_accept+0x50>)
 800f8dc:	695a      	ldr	r2, [r3, #20]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d008      	beq.n	800f8fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f8e8:	4b07      	ldr	r3, [pc, #28]	; (800f908 <ip4_input_accept+0x50>)
 800f8ea:	695b      	ldr	r3, [r3, #20]
 800f8ec:	6879      	ldr	r1, [r7, #4]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f000 fa08 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800f8f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e000      	b.n	800f900 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	200056a0 	.word	0x200056a0

0800f90c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	091b      	lsrs	r3, r3, #4
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b04      	cmp	r3, #4
 800f926:	d004      	beq.n	800f932 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7f8 f88f 	bl	8007a4c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	e107      	b.n	800fb42 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 030f 	and.w	r3, r3, #15
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	885b      	ldrh	r3, [r3, #2]
 800f946:	b29b      	uxth	r3, r3
 800f948:	4618      	mov	r0, r3
 800f94a:	f7f6 fceb 	bl	8006324 <lwip_htons>
 800f94e:	4603      	mov	r3, r0
 800f950:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	891b      	ldrh	r3, [r3, #8]
 800f956:	89ba      	ldrh	r2, [r7, #12]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d204      	bcs.n	800f966 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f95c:	89bb      	ldrh	r3, [r7, #12]
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7f7 feed 	bl	8007740 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	895b      	ldrh	r3, [r3, #10]
 800f96a:	89fa      	ldrh	r2, [r7, #14]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d807      	bhi.n	800f980 <ip4_input+0x74>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	891b      	ldrh	r3, [r3, #8]
 800f974:	89ba      	ldrh	r2, [r7, #12]
 800f976:	429a      	cmp	r2, r3
 800f978:	d802      	bhi.n	800f980 <ip4_input+0x74>
 800f97a:	89fb      	ldrh	r3, [r7, #14]
 800f97c:	2b13      	cmp	r3, #19
 800f97e:	d804      	bhi.n	800f98a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7f8 f863 	bl	8007a4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	e0db      	b.n	800fb42 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	4a6f      	ldr	r2, [pc, #444]	; (800fb4c <ip4_input+0x240>)
 800f990:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	4a6d      	ldr	r2, [pc, #436]	; (800fb4c <ip4_input+0x240>)
 800f998:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f99a:	4b6c      	ldr	r3, [pc, #432]	; (800fb4c <ip4_input+0x240>)
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9a2:	2be0      	cmp	r3, #224	; 0xe0
 800f9a4:	d112      	bne.n	800f9cc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9ac:	f003 0301 	and.w	r3, r3, #1
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d007      	beq.n	800f9c6 <ip4_input+0xba>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <ip4_input+0xba>
      netif = inp;
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	e02a      	b.n	800fa1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	613b      	str	r3, [r7, #16]
 800f9ca:	e027      	b.n	800fa1c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f9cc:	6838      	ldr	r0, [r7, #0]
 800f9ce:	f7ff ff73 	bl	800f8b8 <ip4_input_accept>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d002      	beq.n	800f9de <ip4_input+0xd2>
      netif = inp;
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	613b      	str	r3, [r7, #16]
 800f9dc:	e01e      	b.n	800fa1c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f9e2:	4b5a      	ldr	r3, [pc, #360]	; (800fb4c <ip4_input+0x240>)
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	2b7f      	cmp	r3, #127	; 0x7f
 800f9ea:	d017      	beq.n	800fa1c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f9ec:	4b58      	ldr	r3, [pc, #352]	; (800fb50 <ip4_input+0x244>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	613b      	str	r3, [r7, #16]
 800f9f2:	e00e      	b.n	800fa12 <ip4_input+0x106>
          if (netif == inp) {
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d006      	beq.n	800fa0a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f9fc:	6938      	ldr	r0, [r7, #16]
 800f9fe:	f7ff ff5b 	bl	800f8b8 <ip4_input_accept>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d108      	bne.n	800fa1a <ip4_input+0x10e>
 800fa08:	e000      	b.n	800fa0c <ip4_input+0x100>
            continue;
 800fa0a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	613b      	str	r3, [r7, #16]
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1ed      	bne.n	800f9f4 <ip4_input+0xe8>
 800fa18:	e000      	b.n	800fa1c <ip4_input+0x110>
            break;
 800fa1a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa1c:	4b4b      	ldr	r3, [pc, #300]	; (800fb4c <ip4_input+0x240>)
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	6839      	ldr	r1, [r7, #0]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 f96e 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d105      	bne.n	800fa3a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fa2e:	4b47      	ldr	r3, [pc, #284]	; (800fb4c <ip4_input+0x240>)
 800fa30:	691b      	ldr	r3, [r3, #16]
 800fa32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa36:	2be0      	cmp	r3, #224	; 0xe0
 800fa38:	d104      	bne.n	800fa44 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7f8 f806 	bl	8007a4c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	e07e      	b.n	800fb42 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d104      	bne.n	800fa54 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7f7 fffe 	bl	8007a4c <pbuf_free>
    return ERR_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	e076      	b.n	800fb42 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	88db      	ldrh	r3, [r3, #6]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fa60:	4013      	ands	r3, r2
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00b      	beq.n	800fa7e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fc92 	bl	8010390 <ip4_reass>
 800fa6c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <ip4_input+0x16c>
      return ERR_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	e064      	b.n	800fb42 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fa7e:	4a33      	ldr	r2, [pc, #204]	; (800fb4c <ip4_input+0x240>)
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fa84:	4a31      	ldr	r2, [pc, #196]	; (800fb4c <ip4_input+0x240>)
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fa8a:	4a30      	ldr	r2, [pc, #192]	; (800fb4c <ip4_input+0x240>)
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	f003 030f 	and.w	r3, r3, #15
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	4b2a      	ldr	r3, [pc, #168]	; (800fb4c <ip4_input+0x240>)
 800faa2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800faa4:	89fb      	ldrh	r3, [r7, #14]
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7f7 ff49 	bl	8007940 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	7a5b      	ldrb	r3, [r3, #9]
 800fab2:	2b11      	cmp	r3, #17
 800fab4:	d006      	beq.n	800fac4 <ip4_input+0x1b8>
 800fab6:	2b11      	cmp	r3, #17
 800fab8:	dc13      	bgt.n	800fae2 <ip4_input+0x1d6>
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d00c      	beq.n	800fad8 <ip4_input+0x1cc>
 800fabe:	2b06      	cmp	r3, #6
 800fac0:	d005      	beq.n	800face <ip4_input+0x1c2>
 800fac2:	e00e      	b.n	800fae2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fac4:	6839      	ldr	r1, [r7, #0]
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7fe fc68 	bl	800e39c <udp_input>
        break;
 800facc:	e026      	b.n	800fb1c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7fa f889 	bl	8009be8 <tcp_input>
        break;
 800fad6:	e021      	b.n	800fb1c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fad8:	6839      	ldr	r1, [r7, #0]
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f7ff fcee 	bl	800f4bc <icmp_input>
        break;
 800fae0:	e01c      	b.n	800fb1c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fae2:	4b1a      	ldr	r3, [pc, #104]	; (800fb4c <ip4_input+0x240>)
 800fae4:	695b      	ldr	r3, [r3, #20]
 800fae6:	6939      	ldr	r1, [r7, #16]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f90b 	bl	800fd04 <ip4_addr_isbroadcast_u32>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10f      	bne.n	800fb14 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800faf4:	4b15      	ldr	r3, [pc, #84]	; (800fb4c <ip4_input+0x240>)
 800faf6:	695b      	ldr	r3, [r3, #20]
 800faf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fafc:	2be0      	cmp	r3, #224	; 0xe0
 800fafe:	d009      	beq.n	800fb14 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fb00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb04:	4619      	mov	r1, r3
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7f7 ff8d 	bl	8007a26 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fb0c:	2102      	movs	r1, #2
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7ff fdd8 	bl	800f6c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7f7 ff99 	bl	8007a4c <pbuf_free>
        break;
 800fb1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <ip4_input+0x240>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fb22:	4b0a      	ldr	r3, [pc, #40]	; (800fb4c <ip4_input+0x240>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fb28:	4b08      	ldr	r3, [pc, #32]	; (800fb4c <ip4_input+0x240>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fb2e:	4b07      	ldr	r3, [pc, #28]	; (800fb4c <ip4_input+0x240>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fb34:	4b05      	ldr	r3, [pc, #20]	; (800fb4c <ip4_input+0x240>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fb3a:	4b04      	ldr	r3, [pc, #16]	; (800fb4c <ip4_input+0x240>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200056a0 	.word	0x200056a0
 800fb50:	20008c04 	.word	0x20008c04

0800fb54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b08a      	sub	sp, #40	; 0x28
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d009      	beq.n	800fb80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d003      	beq.n	800fb7a <ip4_output_if+0x26>
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d102      	bne.n	800fb80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fb80:	78fa      	ldrb	r2, [r7, #3]
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	9302      	str	r3, [sp, #8]
 800fb86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb8a:	9301      	str	r3, [sp, #4]
 800fb8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4613      	mov	r3, r2
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	6979      	ldr	r1, [r7, #20]
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 f805 	bl	800fba8 <ip4_output_if_src>
 800fb9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3718      	adds	r7, #24
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b088      	sub	sp, #32
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	7b9b      	ldrb	r3, [r3, #14]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d006      	beq.n	800fbcc <ip4_output_if_src+0x24>
 800fbbe:	4b4b      	ldr	r3, [pc, #300]	; (800fcec <ip4_output_if_src+0x144>)
 800fbc0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fbc4:	494a      	ldr	r1, [pc, #296]	; (800fcf0 <ip4_output_if_src+0x148>)
 800fbc6:	484b      	ldr	r0, [pc, #300]	; (800fcf4 <ip4_output_if_src+0x14c>)
 800fbc8:	f001 f8f2 	bl	8010db0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d060      	beq.n	800fc94 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fbd2:	2314      	movs	r3, #20
 800fbd4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fbd6:	2114      	movs	r1, #20
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7f7 fea1 	bl	8007920 <pbuf_add_header>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d002      	beq.n	800fbea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fbe4:	f06f 0301 	mvn.w	r3, #1
 800fbe8:	e07c      	b.n	800fce4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	895b      	ldrh	r3, [r3, #10]
 800fbf4:	2b13      	cmp	r3, #19
 800fbf6:	d806      	bhi.n	800fc06 <ip4_output_if_src+0x5e>
 800fbf8:	4b3c      	ldr	r3, [pc, #240]	; (800fcec <ip4_output_if_src+0x144>)
 800fbfa:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fbfe:	493e      	ldr	r1, [pc, #248]	; (800fcf8 <ip4_output_if_src+0x150>)
 800fc00:	483c      	ldr	r0, [pc, #240]	; (800fcf4 <ip4_output_if_src+0x14c>)
 800fc02:	f001 f8d5 	bl	8010db0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	78fa      	ldrb	r2, [r7, #3]
 800fc0a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc12:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fc1c:	8b7b      	ldrh	r3, [r7, #26]
 800fc1e:	089b      	lsrs	r3, r3, #2
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fc34:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	891b      	ldrh	r3, [r3, #8]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7f6 fb72 	bl	8006324 <lwip_htons>
 800fc40:	4603      	mov	r3, r0
 800fc42:	461a      	mov	r2, r3
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	719a      	strb	r2, [r3, #6]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fc52:	4b2a      	ldr	r3, [pc, #168]	; (800fcfc <ip4_output_if_src+0x154>)
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f6 fb64 	bl	8006324 <lwip_htons>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	461a      	mov	r2, r3
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fc64:	4b25      	ldr	r3, [pc, #148]	; (800fcfc <ip4_output_if_src+0x154>)
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	4b23      	ldr	r3, [pc, #140]	; (800fcfc <ip4_output_if_src+0x154>)
 800fc6e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d104      	bne.n	800fc80 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fc76:	4b22      	ldr	r3, [pc, #136]	; (800fd00 <ip4_output_if_src+0x158>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	60da      	str	r2, [r3, #12]
 800fc7e:	e003      	b.n	800fc88 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	729a      	strb	r2, [r3, #10]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	72da      	strb	r2, [r3, #11]
 800fc92:	e00f      	b.n	800fcb4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	895b      	ldrh	r3, [r3, #10]
 800fc98:	2b13      	cmp	r3, #19
 800fc9a:	d802      	bhi.n	800fca2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc9c:	f06f 0301 	mvn.w	r3, #1
 800fca0:	e020      	b.n	800fce4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fcae:	f107 0314 	add.w	r3, r7, #20
 800fcb2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00c      	beq.n	800fcd6 <ip4_output_if_src+0x12e>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	891a      	ldrh	r2, [r3, #8]
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d906      	bls.n	800fcd6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 fd53 	bl	8010778 <ip4_frag>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	e006      	b.n	800fce4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	695b      	ldr	r3, [r3, #20]
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	68f9      	ldr	r1, [r7, #12]
 800fcde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fce0:	4798      	blx	r3
 800fce2:	4603      	mov	r3, r0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3720      	adds	r7, #32
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	080144d4 	.word	0x080144d4
 800fcf0:	08014508 	.word	0x08014508
 800fcf4:	08014514 	.word	0x08014514
 800fcf8:	0801453c 	.word	0x0801453c
 800fcfc:	20008d62 	.word	0x20008d62
 800fd00:	080156d8 	.word	0x080156d8

0800fd04 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd18:	d002      	beq.n	800fd20 <ip4_addr_isbroadcast_u32+0x1c>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d101      	bne.n	800fd24 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd20:	2301      	movs	r3, #1
 800fd22:	e02a      	b.n	800fd7a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd2a:	f003 0302 	and.w	r3, r3, #2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e021      	b.n	800fd7a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	3304      	adds	r3, #4
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d101      	bne.n	800fd46 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e019      	b.n	800fd7a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	405a      	eors	r2, r3
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	3308      	adds	r3, #8
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4013      	ands	r3, r2
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10d      	bne.n	800fd78 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	3308      	adds	r3, #8
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	43da      	mvns	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d101      	bne.n	800fd78 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fd74:	2301      	movs	r3, #1
 800fd76:	e000      	b.n	800fd7a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fd78:	2300      	movs	r3, #0
  }
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
	...

0800fd88 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fd92:	4b12      	ldr	r3, [pc, #72]	; (800fddc <ip_reass_tmr+0x54>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fd98:	e018      	b.n	800fdcc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	7fdb      	ldrb	r3, [r3, #31]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00b      	beq.n	800fdba <ip_reass_tmr+0x32>
      r->timer--;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	7fdb      	ldrb	r3, [r3, #31]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	e008      	b.n	800fdcc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fdc4:	68b9      	ldr	r1, [r7, #8]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f80a 	bl	800fde0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1e3      	bne.n	800fd9a <ip_reass_tmr+0x12>
    }
  }
}
 800fdd2:	bf00      	nop
 800fdd4:	bf00      	nop
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	20008d64 	.word	0x20008d64

0800fde0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b088      	sub	sp, #32
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fdee:	683a      	ldr	r2, [r7, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d105      	bne.n	800fe02 <ip_reass_free_complete_datagram+0x22>
 800fdf6:	4b45      	ldr	r3, [pc, #276]	; (800ff0c <ip_reass_free_complete_datagram+0x12c>)
 800fdf8:	22ab      	movs	r2, #171	; 0xab
 800fdfa:	4945      	ldr	r1, [pc, #276]	; (800ff10 <ip_reass_free_complete_datagram+0x130>)
 800fdfc:	4845      	ldr	r0, [pc, #276]	; (800ff14 <ip_reass_free_complete_datagram+0x134>)
 800fdfe:	f000 ffd7 	bl	8010db0 <iprintf>
  if (prev != NULL) {
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00a      	beq.n	800fe1e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d005      	beq.n	800fe1e <ip_reass_free_complete_datagram+0x3e>
 800fe12:	4b3e      	ldr	r3, [pc, #248]	; (800ff0c <ip_reass_free_complete_datagram+0x12c>)
 800fe14:	22ad      	movs	r2, #173	; 0xad
 800fe16:	4940      	ldr	r1, [pc, #256]	; (800ff18 <ip_reass_free_complete_datagram+0x138>)
 800fe18:	483e      	ldr	r0, [pc, #248]	; (800ff14 <ip_reass_free_complete_datagram+0x134>)
 800fe1a:	f000 ffc9 	bl	8010db0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	889b      	ldrh	r3, [r3, #4]
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d12a      	bne.n	800fe86 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	6858      	ldr	r0, [r3, #4]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	3308      	adds	r3, #8
 800fe46:	2214      	movs	r2, #20
 800fe48:	4619      	mov	r1, r3
 800fe4a:	f001 f8aa 	bl	8010fa2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fe4e:	2101      	movs	r1, #1
 800fe50:	69b8      	ldr	r0, [r7, #24]
 800fe52:	f7ff fc47 	bl	800f6e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fe56:	69b8      	ldr	r0, [r7, #24]
 800fe58:	f7f7 fe80 	bl	8007b5c <pbuf_clen>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fe60:	8bfa      	ldrh	r2, [r7, #30]
 800fe62:	8a7b      	ldrh	r3, [r7, #18]
 800fe64:	4413      	add	r3, r2
 800fe66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe6a:	db05      	blt.n	800fe78 <ip_reass_free_complete_datagram+0x98>
 800fe6c:	4b27      	ldr	r3, [pc, #156]	; (800ff0c <ip_reass_free_complete_datagram+0x12c>)
 800fe6e:	22bc      	movs	r2, #188	; 0xbc
 800fe70:	492a      	ldr	r1, [pc, #168]	; (800ff1c <ip_reass_free_complete_datagram+0x13c>)
 800fe72:	4828      	ldr	r0, [pc, #160]	; (800ff14 <ip_reass_free_complete_datagram+0x134>)
 800fe74:	f000 ff9c 	bl	8010db0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fe78:	8bfa      	ldrh	r2, [r7, #30]
 800fe7a:	8a7b      	ldrh	r3, [r7, #18]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fe80:	69b8      	ldr	r0, [r7, #24]
 800fe82:	f7f7 fde3 	bl	8007a4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fe8c:	e01f      	b.n	800fece <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	f7f7 fe5c 	bl	8007b5c <pbuf_clen>
 800fea4:	4603      	mov	r3, r0
 800fea6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fea8:	8bfa      	ldrh	r2, [r7, #30]
 800feaa:	8a7b      	ldrh	r3, [r7, #18]
 800feac:	4413      	add	r3, r2
 800feae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feb2:	db05      	blt.n	800fec0 <ip_reass_free_complete_datagram+0xe0>
 800feb4:	4b15      	ldr	r3, [pc, #84]	; (800ff0c <ip_reass_free_complete_datagram+0x12c>)
 800feb6:	22cc      	movs	r2, #204	; 0xcc
 800feb8:	4918      	ldr	r1, [pc, #96]	; (800ff1c <ip_reass_free_complete_datagram+0x13c>)
 800feba:	4816      	ldr	r0, [pc, #88]	; (800ff14 <ip_reass_free_complete_datagram+0x134>)
 800febc:	f000 ff78 	bl	8010db0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fec0:	8bfa      	ldrh	r2, [r7, #30]
 800fec2:	8a7b      	ldrh	r3, [r7, #18]
 800fec4:	4413      	add	r3, r2
 800fec6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f7f7 fdbf 	bl	8007a4c <pbuf_free>
  while (p != NULL) {
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1dc      	bne.n	800fe8e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fed4:	6839      	ldr	r1, [r7, #0]
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 f8c2 	bl	8010060 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fedc:	4b10      	ldr	r3, [pc, #64]	; (800ff20 <ip_reass_free_complete_datagram+0x140>)
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	8bfa      	ldrh	r2, [r7, #30]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d905      	bls.n	800fef2 <ip_reass_free_complete_datagram+0x112>
 800fee6:	4b09      	ldr	r3, [pc, #36]	; (800ff0c <ip_reass_free_complete_datagram+0x12c>)
 800fee8:	22d2      	movs	r2, #210	; 0xd2
 800feea:	490e      	ldr	r1, [pc, #56]	; (800ff24 <ip_reass_free_complete_datagram+0x144>)
 800feec:	4809      	ldr	r0, [pc, #36]	; (800ff14 <ip_reass_free_complete_datagram+0x134>)
 800feee:	f000 ff5f 	bl	8010db0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <ip_reass_free_complete_datagram+0x140>)
 800fef4:	881a      	ldrh	r2, [r3, #0]
 800fef6:	8bfb      	ldrh	r3, [r7, #30]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <ip_reass_free_complete_datagram+0x140>)
 800fefe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ff00:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	0801456c 	.word	0x0801456c
 800ff10:	080145a8 	.word	0x080145a8
 800ff14:	080145b4 	.word	0x080145b4
 800ff18:	080145dc 	.word	0x080145dc
 800ff1c:	080145f0 	.word	0x080145f0
 800ff20:	20008d68 	.word	0x20008d68
 800ff24:	08014610 	.word	0x08014610

0800ff28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ff32:	2300      	movs	r3, #0
 800ff34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ff46:	4b28      	ldr	r3, [pc, #160]	; (800ffe8 <ip_reass_remove_oldest_datagram+0xc0>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ff4c:	e030      	b.n	800ffb0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	695a      	ldr	r2, [r3, #20]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d10c      	bne.n	800ff74 <ip_reass_remove_oldest_datagram+0x4c>
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	699a      	ldr	r2, [r3, #24]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d106      	bne.n	800ff74 <ip_reass_remove_oldest_datagram+0x4c>
 800ff66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff68:	899a      	ldrh	r2, [r3, #12]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	889b      	ldrh	r3, [r3, #4]
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d014      	beq.n	800ff9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	3301      	adds	r3, #1
 800ff78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ff7a:	6a3b      	ldr	r3, [r7, #32]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d104      	bne.n	800ff8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	61bb      	str	r3, [r7, #24]
 800ff88:	e009      	b.n	800ff9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	7fda      	ldrb	r2, [r3, #31]
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	7fdb      	ldrb	r3, [r3, #31]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d803      	bhi.n	800ff9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ff9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d001      	beq.n	800ffaa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1cb      	bne.n	800ff4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d008      	beq.n	800ffce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ffbc:	69b9      	ldr	r1, [r7, #24]
 800ffbe:	6a38      	ldr	r0, [r7, #32]
 800ffc0:	f7ff ff0e 	bl	800fde0 <ip_reass_free_complete_datagram>
 800ffc4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ffc6:	697a      	ldr	r2, [r7, #20]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	da02      	bge.n	800ffdc <ip_reass_remove_oldest_datagram+0xb4>
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	dcac      	bgt.n	800ff36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ffdc:	697b      	ldr	r3, [r7, #20]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3728      	adds	r7, #40	; 0x28
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	20008d64 	.word	0x20008d64

0800ffec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fff6:	2004      	movs	r0, #4
 800fff8:	f7f6 fe42 	bl	8006c80 <memp_malloc>
 800fffc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d110      	bne.n	8010026 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010004:	6839      	ldr	r1, [r7, #0]
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7ff ff8e 	bl	800ff28 <ip_reass_remove_oldest_datagram>
 801000c:	4602      	mov	r2, r0
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	4293      	cmp	r3, r2
 8010012:	dc03      	bgt.n	801001c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010014:	2004      	movs	r0, #4
 8010016:	f7f6 fe33 	bl	8006c80 <memp_malloc>
 801001a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010022:	2300      	movs	r3, #0
 8010024:	e016      	b.n	8010054 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010026:	2220      	movs	r2, #32
 8010028:	2100      	movs	r1, #0
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f000 ff25 	bl	8010e7a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	220f      	movs	r2, #15
 8010034:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010036:	4b09      	ldr	r3, [pc, #36]	; (801005c <ip_reass_enqueue_new_datagram+0x70>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801003e:	4a07      	ldr	r2, [pc, #28]	; (801005c <ip_reass_enqueue_new_datagram+0x70>)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3308      	adds	r3, #8
 8010048:	2214      	movs	r2, #20
 801004a:	6879      	ldr	r1, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 ffa8 	bl	8010fa2 <memcpy>
  return ipr;
 8010052:	68fb      	ldr	r3, [r7, #12]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	20008d64 	.word	0x20008d64

08010060 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801006a:	4b10      	ldr	r3, [pc, #64]	; (80100ac <ip_reass_dequeue_datagram+0x4c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	429a      	cmp	r2, r3
 8010072:	d104      	bne.n	801007e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a0c      	ldr	r2, [pc, #48]	; (80100ac <ip_reass_dequeue_datagram+0x4c>)
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	e00d      	b.n	801009a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d106      	bne.n	8010092 <ip_reass_dequeue_datagram+0x32>
 8010084:	4b0a      	ldr	r3, [pc, #40]	; (80100b0 <ip_reass_dequeue_datagram+0x50>)
 8010086:	f240 1245 	movw	r2, #325	; 0x145
 801008a:	490a      	ldr	r1, [pc, #40]	; (80100b4 <ip_reass_dequeue_datagram+0x54>)
 801008c:	480a      	ldr	r0, [pc, #40]	; (80100b8 <ip_reass_dequeue_datagram+0x58>)
 801008e:	f000 fe8f 	bl	8010db0 <iprintf>
    prev->next = ipr->next;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	2004      	movs	r0, #4
 801009e:	f7f6 fe5f 	bl	8006d60 <memp_free>
}
 80100a2:	bf00      	nop
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	20008d64 	.word	0x20008d64
 80100b0:	0801456c 	.word	0x0801456c
 80100b4:	08014634 	.word	0x08014634
 80100b8:	080145b4 	.word	0x080145b4

080100bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b08c      	sub	sp, #48	; 0x30
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80100c8:	2300      	movs	r3, #0
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80100cc:	2301      	movs	r3, #1
 80100ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	885b      	ldrh	r3, [r3, #2]
 80100da:	b29b      	uxth	r3, r3
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f6 f921 	bl	8006324 <lwip_htons>
 80100e2:	4603      	mov	r3, r0
 80100e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	f003 030f 	and.w	r3, r3, #15
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80100f4:	7e7b      	ldrb	r3, [r7, #25]
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	8b7a      	ldrh	r2, [r7, #26]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d202      	bcs.n	8010104 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80100fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010102:	e135      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010104:	7e7b      	ldrb	r3, [r7, #25]
 8010106:	b29b      	uxth	r3, r3
 8010108:	8b7a      	ldrh	r2, [r7, #26]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	88db      	ldrh	r3, [r3, #6]
 8010112:	b29b      	uxth	r3, r3
 8010114:	4618      	mov	r0, r3
 8010116:	f7f6 f905 	bl	8006324 <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010120:	b29b      	uxth	r3, r3
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	2200      	movs	r2, #0
 8010130:	701a      	strb	r2, [r3, #0]
 8010132:	2200      	movs	r2, #0
 8010134:	705a      	strb	r2, [r3, #1]
 8010136:	2200      	movs	r2, #0
 8010138:	709a      	strb	r2, [r3, #2]
 801013a:	2200      	movs	r2, #0
 801013c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	8afa      	ldrh	r2, [r7, #22]
 8010142:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010144:	8afa      	ldrh	r2, [r7, #22]
 8010146:	8b7b      	ldrh	r3, [r7, #26]
 8010148:	4413      	add	r3, r2
 801014a:	b29a      	uxth	r2, r3
 801014c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	88db      	ldrh	r3, [r3, #6]
 8010154:	b29b      	uxth	r3, r3
 8010156:	8afa      	ldrh	r2, [r7, #22]
 8010158:	429a      	cmp	r2, r3
 801015a:	d902      	bls.n	8010162 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801015c:	f04f 33ff 	mov.w	r3, #4294967295
 8010160:	e106      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	627b      	str	r3, [r7, #36]	; 0x24
 8010168:	e068      	b.n	801023c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	889b      	ldrh	r3, [r3, #4]
 8010174:	b29a      	uxth	r2, r3
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	889b      	ldrh	r3, [r3, #4]
 801017a:	b29b      	uxth	r3, r3
 801017c:	429a      	cmp	r2, r3
 801017e:	d235      	bcs.n	80101ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010184:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010188:	2b00      	cmp	r3, #0
 801018a:	d020      	beq.n	80101ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	889b      	ldrh	r3, [r3, #4]
 8010190:	b29a      	uxth	r2, r3
 8010192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010194:	88db      	ldrh	r3, [r3, #6]
 8010196:	b29b      	uxth	r3, r3
 8010198:	429a      	cmp	r2, r3
 801019a:	d307      	bcc.n	80101ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019e:	88db      	ldrh	r3, [r3, #6]
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	889b      	ldrh	r3, [r3, #4]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d902      	bls.n	80101b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101ac:	f04f 33ff 	mov.w	r3, #4294967295
 80101b0:	e0de      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80101b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b4:	68ba      	ldr	r2, [r7, #8]
 80101b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80101b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ba:	88db      	ldrh	r3, [r3, #6]
 80101bc:	b29a      	uxth	r2, r3
 80101be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c0:	889b      	ldrh	r3, [r3, #4]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d03d      	beq.n	8010244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80101c8:	2300      	movs	r3, #0
 80101ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80101cc:	e03a      	b.n	8010244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80101ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d0:	88db      	ldrh	r3, [r3, #6]
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	889b      	ldrh	r3, [r3, #4]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	429a      	cmp	r2, r3
 80101dc:	d902      	bls.n	80101e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101de:	f04f 33ff 	mov.w	r3, #4294967295
 80101e2:	e0c5      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	605a      	str	r2, [r3, #4]
      break;
 80101ea:	e02b      	b.n	8010244 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	889b      	ldrh	r3, [r3, #4]
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	889b      	ldrh	r3, [r3, #4]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d102      	bne.n	8010202 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010200:	e0b6      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010204:	889b      	ldrh	r3, [r3, #4]
 8010206:	b29a      	uxth	r2, r3
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	88db      	ldrh	r3, [r3, #6]
 801020c:	b29b      	uxth	r3, r3
 801020e:	429a      	cmp	r2, r3
 8010210:	d202      	bcs.n	8010218 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010212:	f04f 33ff 	mov.w	r3, #4294967295
 8010216:	e0ab      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	2b00      	cmp	r3, #0
 801021c:	d009      	beq.n	8010232 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801021e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010220:	88db      	ldrh	r3, [r3, #6]
 8010222:	b29a      	uxth	r2, r3
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	889b      	ldrh	r3, [r3, #4]
 8010228:	b29b      	uxth	r3, r3
 801022a:	429a      	cmp	r2, r3
 801022c:	d001      	beq.n	8010232 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801022e:	2300      	movs	r3, #0
 8010230:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	2b00      	cmp	r3, #0
 8010240:	d193      	bne.n	801016a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010242:	e000      	b.n	8010246 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010244:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	2b00      	cmp	r3, #0
 801024a:	d12d      	bne.n	80102a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801024c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024e:	2b00      	cmp	r3, #0
 8010250:	d01c      	beq.n	801028c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	88db      	ldrh	r3, [r3, #6]
 8010256:	b29a      	uxth	r2, r3
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	889b      	ldrh	r3, [r3, #4]
 801025c:	b29b      	uxth	r3, r3
 801025e:	429a      	cmp	r2, r3
 8010260:	d906      	bls.n	8010270 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010262:	4b45      	ldr	r3, [pc, #276]	; (8010378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010264:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010268:	4944      	ldr	r1, [pc, #272]	; (801037c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801026a:	4845      	ldr	r0, [pc, #276]	; (8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801026c:	f000 fda0 	bl	8010db0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010272:	68ba      	ldr	r2, [r7, #8]
 8010274:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	88db      	ldrh	r3, [r3, #6]
 801027a:	b29a      	uxth	r2, r3
 801027c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027e:	889b      	ldrh	r3, [r3, #4]
 8010280:	b29b      	uxth	r3, r3
 8010282:	429a      	cmp	r2, r3
 8010284:	d010      	beq.n	80102a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	623b      	str	r3, [r7, #32]
 801028a:	e00d      	b.n	80102a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d006      	beq.n	80102a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010294:	4b38      	ldr	r3, [pc, #224]	; (8010378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010296:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801029a:	493a      	ldr	r1, [pc, #232]	; (8010384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801029c:	4838      	ldr	r0, [pc, #224]	; (8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801029e:	f000 fd87 	bl	8010db0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	7f9b      	ldrb	r3, [r3, #30]
 80102b2:	f003 0301 	and.w	r3, r3, #1
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d059      	beq.n	801036e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d04f      	beq.n	8010360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d006      	beq.n	80102d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	889b      	ldrh	r3, [r3, #4]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d002      	beq.n	80102dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	623b      	str	r3, [r7, #32]
 80102da:	e041      	b.n	8010360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80102e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80102e6:	e012      	b.n	801030e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80102ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f0:	88db      	ldrh	r3, [r3, #6]
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	889b      	ldrh	r3, [r3, #4]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d002      	beq.n	8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	623b      	str	r3, [r7, #32]
            break;
 8010302:	e007      	b.n	8010314 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010306:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1e9      	bne.n	80102e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d022      	beq.n	8010360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d106      	bne.n	8010330 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010322:	4b15      	ldr	r3, [pc, #84]	; (8010378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010324:	f240 12df 	movw	r2, #479	; 0x1df
 8010328:	4917      	ldr	r1, [pc, #92]	; (8010388 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801032a:	4815      	ldr	r0, [pc, #84]	; (8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801032c:	f000 fd40 	bl	8010db0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010338:	429a      	cmp	r2, r3
 801033a:	d106      	bne.n	801034a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801033c:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801033e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010342:	4911      	ldr	r1, [pc, #68]	; (8010388 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010344:	480e      	ldr	r0, [pc, #56]	; (8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010346:	f000 fd33 	bl	8010db0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d006      	beq.n	8010360 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010352:	4b09      	ldr	r3, [pc, #36]	; (8010378 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010354:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010358:	490c      	ldr	r1, [pc, #48]	; (801038c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801035a:	4809      	ldr	r0, [pc, #36]	; (8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801035c:	f000 fd28 	bl	8010db0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	2b00      	cmp	r3, #0
 8010364:	bf14      	ite	ne
 8010366:	2301      	movne	r3, #1
 8010368:	2300      	moveq	r3, #0
 801036a:	b2db      	uxtb	r3, r3
 801036c:	e000      	b.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801036e:	2300      	movs	r3, #0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3730      	adds	r7, #48	; 0x30
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	0801456c 	.word	0x0801456c
 801037c:	08014650 	.word	0x08014650
 8010380:	080145b4 	.word	0x080145b4
 8010384:	08014670 	.word	0x08014670
 8010388:	080146a8 	.word	0x080146a8
 801038c:	080146b8 	.word	0x080146b8

08010390 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b08e      	sub	sp, #56	; 0x38
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801039e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	f003 030f 	and.w	r3, r3, #15
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b14      	cmp	r3, #20
 80103ae:	f040 8171 	bne.w	8010694 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80103b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b4:	88db      	ldrh	r3, [r3, #6]
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f5 ffb3 	bl	8006324 <lwip_htons>
 80103be:	4603      	mov	r3, r0
 80103c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	00db      	lsls	r3, r3, #3
 80103c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80103ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103cc:	885b      	ldrh	r3, [r3, #2]
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f5 ffa7 	bl	8006324 <lwip_htons>
 80103d6:	4603      	mov	r3, r0
 80103d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	f003 030f 	and.w	r3, r3, #15
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80103ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80103f2:	429a      	cmp	r2, r3
 80103f4:	f0c0 8150 	bcc.w	8010698 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80103f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7f7 fba9 	bl	8007b5c <pbuf_clen>
 801040a:	4603      	mov	r3, r0
 801040c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801040e:	4b8c      	ldr	r3, [pc, #560]	; (8010640 <ip4_reass+0x2b0>)
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	461a      	mov	r2, r3
 8010414:	8c3b      	ldrh	r3, [r7, #32]
 8010416:	4413      	add	r3, r2
 8010418:	2b0a      	cmp	r3, #10
 801041a:	dd10      	ble.n	801043e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801041c:	8c3b      	ldrh	r3, [r7, #32]
 801041e:	4619      	mov	r1, r3
 8010420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010422:	f7ff fd81 	bl	800ff28 <ip_reass_remove_oldest_datagram>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 8137 	beq.w	801069c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801042e:	4b84      	ldr	r3, [pc, #528]	; (8010640 <ip4_reass+0x2b0>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	8c3b      	ldrh	r3, [r7, #32]
 8010436:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010438:	2b0a      	cmp	r3, #10
 801043a:	f300 812f 	bgt.w	801069c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801043e:	4b81      	ldr	r3, [pc, #516]	; (8010644 <ip4_reass+0x2b4>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	633b      	str	r3, [r7, #48]	; 0x30
 8010444:	e015      	b.n	8010472 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	695a      	ldr	r2, [r3, #20]
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	429a      	cmp	r2, r3
 8010450:	d10c      	bne.n	801046c <ip4_reass+0xdc>
 8010452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010454:	699a      	ldr	r2, [r3, #24]
 8010456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	429a      	cmp	r2, r3
 801045c:	d106      	bne.n	801046c <ip4_reass+0xdc>
 801045e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010460:	899a      	ldrh	r2, [r3, #12]
 8010462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010464:	889b      	ldrh	r3, [r3, #4]
 8010466:	b29b      	uxth	r3, r3
 8010468:	429a      	cmp	r2, r3
 801046a:	d006      	beq.n	801047a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	633b      	str	r3, [r7, #48]	; 0x30
 8010472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010474:	2b00      	cmp	r3, #0
 8010476:	d1e6      	bne.n	8010446 <ip4_reass+0xb6>
 8010478:	e000      	b.n	801047c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801047a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047e:	2b00      	cmp	r3, #0
 8010480:	d109      	bne.n	8010496 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010482:	8c3b      	ldrh	r3, [r7, #32]
 8010484:	4619      	mov	r1, r3
 8010486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010488:	f7ff fdb0 	bl	800ffec <ip_reass_enqueue_new_datagram>
 801048c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010490:	2b00      	cmp	r3, #0
 8010492:	d11c      	bne.n	80104ce <ip4_reass+0x13e>
      goto nullreturn;
 8010494:	e105      	b.n	80106a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	88db      	ldrh	r3, [r3, #6]
 801049a:	b29b      	uxth	r3, r3
 801049c:	4618      	mov	r0, r3
 801049e:	f7f5 ff41 	bl	8006324 <lwip_htons>
 80104a2:	4603      	mov	r3, r0
 80104a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d110      	bne.n	80104ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80104ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ae:	89db      	ldrh	r3, [r3, #14]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f5 ff37 	bl	8006324 <lwip_htons>
 80104b6:	4603      	mov	r3, r0
 80104b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d006      	beq.n	80104ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80104c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c2:	3308      	adds	r3, #8
 80104c4:	2214      	movs	r2, #20
 80104c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 fd6a 	bl	8010fa2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	88db      	ldrh	r3, [r3, #6]
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	f003 0320 	and.w	r3, r3, #32
 80104d8:	2b00      	cmp	r3, #0
 80104da:	bf0c      	ite	eq
 80104dc:	2301      	moveq	r3, #1
 80104de:	2300      	movne	r3, #0
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00e      	beq.n	8010508 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80104ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80104ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104ee:	4413      	add	r3, r2
 80104f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80104f2:	8b7a      	ldrh	r2, [r7, #26]
 80104f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80104f6:	429a      	cmp	r2, r3
 80104f8:	f0c0 80a0 	bcc.w	801063c <ip4_reass+0x2ac>
 80104fc:	8b7b      	ldrh	r3, [r7, #26]
 80104fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010502:	4293      	cmp	r3, r2
 8010504:	f200 809a 	bhi.w	801063c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010508:	69fa      	ldr	r2, [r7, #28]
 801050a:	6879      	ldr	r1, [r7, #4]
 801050c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801050e:	f7ff fdd5 	bl	80100bc <ip_reass_chain_frag_into_datagram_and_validate>
 8010512:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051a:	f000 809b 	beq.w	8010654 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801051e:	4b48      	ldr	r3, [pc, #288]	; (8010640 <ip4_reass+0x2b0>)
 8010520:	881a      	ldrh	r2, [r3, #0]
 8010522:	8c3b      	ldrh	r3, [r7, #32]
 8010524:	4413      	add	r3, r2
 8010526:	b29a      	uxth	r2, r3
 8010528:	4b45      	ldr	r3, [pc, #276]	; (8010640 <ip4_reass+0x2b0>)
 801052a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00d      	beq.n	801054e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010536:	4413      	add	r3, r2
 8010538:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801053a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053c:	8a7a      	ldrh	r2, [r7, #18]
 801053e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010542:	7f9b      	ldrb	r3, [r3, #30]
 8010544:	f043 0301 	orr.w	r3, r3, #1
 8010548:	b2da      	uxtb	r2, r3
 801054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2b01      	cmp	r3, #1
 8010552:	d171      	bne.n	8010638 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	8b9b      	ldrh	r3, [r3, #28]
 8010558:	3314      	adds	r3, #20
 801055a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	3308      	adds	r3, #8
 8010572:	2214      	movs	r2, #20
 8010574:	4619      	mov	r1, r3
 8010576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010578:	f000 fd13 	bl	8010fa2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801057c:	8a3b      	ldrh	r3, [r7, #16]
 801057e:	4618      	mov	r0, r3
 8010580:	f7f5 fed0 	bl	8006324 <lwip_htons>
 8010584:	4603      	mov	r3, r0
 8010586:	461a      	mov	r2, r3
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	2200      	movs	r2, #0
 8010590:	719a      	strb	r2, [r3, #6]
 8010592:	2200      	movs	r2, #0
 8010594:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	2200      	movs	r2, #0
 801059a:	729a      	strb	r2, [r3, #10]
 801059c:	2200      	movs	r2, #0
 801059e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80105a6:	e00d      	b.n	80105c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80105ae:	2114      	movs	r1, #20
 80105b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105b2:	f7f7 f9c5 	bl	8007940 <pbuf_remove_header>
      pbuf_cat(p, r);
 80105b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7f7 fb09 	bl	8007bd0 <pbuf_cat>
      r = iprh->next_pbuf;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80105c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1ee      	bne.n	80105a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80105ca:	4b1e      	ldr	r3, [pc, #120]	; (8010644 <ip4_reass+0x2b4>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d102      	bne.n	80105da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105d8:	e010      	b.n	80105fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80105da:	4b1a      	ldr	r3, [pc, #104]	; (8010644 <ip4_reass+0x2b4>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105e0:	e007      	b.n	80105f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d006      	beq.n	80105fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80105ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1f4      	bne.n	80105e2 <ip4_reass+0x252>
 80105f8:	e000      	b.n	80105fc <ip4_reass+0x26c>
          break;
 80105fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80105fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010600:	f7ff fd2e 	bl	8010060 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7f7 faa9 	bl	8007b5c <pbuf_clen>
 801060a:	4603      	mov	r3, r0
 801060c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801060e:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <ip4_reass+0x2b0>)
 8010610:	881b      	ldrh	r3, [r3, #0]
 8010612:	8c3a      	ldrh	r2, [r7, #32]
 8010614:	429a      	cmp	r2, r3
 8010616:	d906      	bls.n	8010626 <ip4_reass+0x296>
 8010618:	4b0b      	ldr	r3, [pc, #44]	; (8010648 <ip4_reass+0x2b8>)
 801061a:	f240 229b 	movw	r2, #667	; 0x29b
 801061e:	490b      	ldr	r1, [pc, #44]	; (801064c <ip4_reass+0x2bc>)
 8010620:	480b      	ldr	r0, [pc, #44]	; (8010650 <ip4_reass+0x2c0>)
 8010622:	f000 fbc5 	bl	8010db0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010626:	4b06      	ldr	r3, [pc, #24]	; (8010640 <ip4_reass+0x2b0>)
 8010628:	881a      	ldrh	r2, [r3, #0]
 801062a:	8c3b      	ldrh	r3, [r7, #32]
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	b29a      	uxth	r2, r3
 8010630:	4b03      	ldr	r3, [pc, #12]	; (8010640 <ip4_reass+0x2b0>)
 8010632:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	e038      	b.n	80106aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010638:	2300      	movs	r3, #0
 801063a:	e036      	b.n	80106aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801063c:	bf00      	nop
 801063e:	e00a      	b.n	8010656 <ip4_reass+0x2c6>
 8010640:	20008d68 	.word	0x20008d68
 8010644:	20008d64 	.word	0x20008d64
 8010648:	0801456c 	.word	0x0801456c
 801064c:	080146dc 	.word	0x080146dc
 8010650:	080145b4 	.word	0x080145b4
    goto nullreturn_ipr;
 8010654:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	2b00      	cmp	r3, #0
 801065a:	d106      	bne.n	801066a <ip4_reass+0x2da>
 801065c:	4b15      	ldr	r3, [pc, #84]	; (80106b4 <ip4_reass+0x324>)
 801065e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010662:	4915      	ldr	r1, [pc, #84]	; (80106b8 <ip4_reass+0x328>)
 8010664:	4815      	ldr	r0, [pc, #84]	; (80106bc <ip4_reass+0x32c>)
 8010666:	f000 fba3 	bl	8010db0 <iprintf>
  if (ipr->p == NULL) {
 801066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d116      	bne.n	80106a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010672:	4b13      	ldr	r3, [pc, #76]	; (80106c0 <ip4_reass+0x330>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010678:	429a      	cmp	r2, r3
 801067a:	d006      	beq.n	801068a <ip4_reass+0x2fa>
 801067c:	4b0d      	ldr	r3, [pc, #52]	; (80106b4 <ip4_reass+0x324>)
 801067e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010682:	4910      	ldr	r1, [pc, #64]	; (80106c4 <ip4_reass+0x334>)
 8010684:	480d      	ldr	r0, [pc, #52]	; (80106bc <ip4_reass+0x32c>)
 8010686:	f000 fb93 	bl	8010db0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801068a:	2100      	movs	r1, #0
 801068c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801068e:	f7ff fce7 	bl	8010060 <ip_reass_dequeue_datagram>
 8010692:	e006      	b.n	80106a2 <ip4_reass+0x312>
    goto nullreturn;
 8010694:	bf00      	nop
 8010696:	e004      	b.n	80106a2 <ip4_reass+0x312>
    goto nullreturn;
 8010698:	bf00      	nop
 801069a:	e002      	b.n	80106a2 <ip4_reass+0x312>
      goto nullreturn;
 801069c:	bf00      	nop
 801069e:	e000      	b.n	80106a2 <ip4_reass+0x312>
  }

nullreturn:
 80106a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7f7 f9d2 	bl	8007a4c <pbuf_free>
  return NULL;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3738      	adds	r7, #56	; 0x38
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	0801456c 	.word	0x0801456c
 80106b8:	080146f8 	.word	0x080146f8
 80106bc:	080145b4 	.word	0x080145b4
 80106c0:	20008d64 	.word	0x20008d64
 80106c4:	08014704 	.word	0x08014704

080106c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80106cc:	2005      	movs	r0, #5
 80106ce:	f7f6 fad7 	bl	8006c80 <memp_malloc>
 80106d2:	4603      	mov	r3, r0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80106e6:	4b07      	ldr	r3, [pc, #28]	; (8010704 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80106e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80106ec:	4906      	ldr	r1, [pc, #24]	; (8010708 <ip_frag_free_pbuf_custom_ref+0x30>)
 80106ee:	4807      	ldr	r0, [pc, #28]	; (801070c <ip_frag_free_pbuf_custom_ref+0x34>)
 80106f0:	f000 fb5e 	bl	8010db0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80106f4:	6879      	ldr	r1, [r7, #4]
 80106f6:	2005      	movs	r0, #5
 80106f8:	f7f6 fb32 	bl	8006d60 <memp_free>
}
 80106fc:	bf00      	nop
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	0801456c 	.word	0x0801456c
 8010708:	08014724 	.word	0x08014724
 801070c:	080145b4 	.word	0x080145b4

08010710 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <ipfrag_free_pbuf_custom+0x20>
 8010722:	4b11      	ldr	r3, [pc, #68]	; (8010768 <ipfrag_free_pbuf_custom+0x58>)
 8010724:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010728:	4910      	ldr	r1, [pc, #64]	; (801076c <ipfrag_free_pbuf_custom+0x5c>)
 801072a:	4811      	ldr	r0, [pc, #68]	; (8010770 <ipfrag_free_pbuf_custom+0x60>)
 801072c:	f000 fb40 	bl	8010db0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	429a      	cmp	r2, r3
 8010736:	d006      	beq.n	8010746 <ipfrag_free_pbuf_custom+0x36>
 8010738:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <ipfrag_free_pbuf_custom+0x58>)
 801073a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801073e:	490d      	ldr	r1, [pc, #52]	; (8010774 <ipfrag_free_pbuf_custom+0x64>)
 8010740:	480b      	ldr	r0, [pc, #44]	; (8010770 <ipfrag_free_pbuf_custom+0x60>)
 8010742:	f000 fb35 	bl	8010db0 <iprintf>
  if (pcr->original != NULL) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	695b      	ldr	r3, [r3, #20]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d004      	beq.n	8010758 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	4618      	mov	r0, r3
 8010754:	f7f7 f97a 	bl	8007a4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f7ff ffbd 	bl	80106d8 <ip_frag_free_pbuf_custom_ref>
}
 801075e:	bf00      	nop
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	0801456c 	.word	0x0801456c
 801076c:	08014730 	.word	0x08014730
 8010770:	080145b4 	.word	0x080145b4
 8010774:	0801473c 	.word	0x0801473c

08010778 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b094      	sub	sp, #80	; 0x50
 801077c:	af02      	add	r7, sp, #8
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801078e:	3b14      	subs	r3, #20
 8010790:	2b00      	cmp	r3, #0
 8010792:	da00      	bge.n	8010796 <ip4_frag+0x1e>
 8010794:	3307      	adds	r3, #7
 8010796:	10db      	asrs	r3, r3, #3
 8010798:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801079a:	2314      	movs	r3, #20
 801079c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f003 030f 	and.w	r3, r3, #15
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b14      	cmp	r3, #20
 80107b8:	d002      	beq.n	80107c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80107ba:	f06f 0305 	mvn.w	r3, #5
 80107be:	e110      	b.n	80109e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	895b      	ldrh	r3, [r3, #10]
 80107c4:	2b13      	cmp	r3, #19
 80107c6:	d809      	bhi.n	80107dc <ip4_frag+0x64>
 80107c8:	4b88      	ldr	r3, [pc, #544]	; (80109ec <ip4_frag+0x274>)
 80107ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80107ce:	4988      	ldr	r1, [pc, #544]	; (80109f0 <ip4_frag+0x278>)
 80107d0:	4888      	ldr	r0, [pc, #544]	; (80109f4 <ip4_frag+0x27c>)
 80107d2:	f000 faed 	bl	8010db0 <iprintf>
 80107d6:	f06f 0305 	mvn.w	r3, #5
 80107da:	e102      	b.n	80109e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80107dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107de:	88db      	ldrh	r3, [r3, #6]
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f5 fd9e 	bl	8006324 <lwip_htons>
 80107e8:	4603      	mov	r3, r0
 80107ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80107ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80107f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	891b      	ldrh	r3, [r3, #8]
 8010802:	3b14      	subs	r3, #20
 8010804:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010808:	e0e1      	b.n	80109ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801080a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801080c:	00db      	lsls	r3, r3, #3
 801080e:	b29b      	uxth	r3, r3
 8010810:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010814:	4293      	cmp	r3, r2
 8010816:	bf28      	it	cs
 8010818:	4613      	movcs	r3, r2
 801081a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801081c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010820:	2114      	movs	r1, #20
 8010822:	200e      	movs	r0, #14
 8010824:	f7f6 fe2e 	bl	8007484 <pbuf_alloc>
 8010828:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082c:	2b00      	cmp	r3, #0
 801082e:	f000 80d5 	beq.w	80109dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010834:	895b      	ldrh	r3, [r3, #10]
 8010836:	2b13      	cmp	r3, #19
 8010838:	d806      	bhi.n	8010848 <ip4_frag+0xd0>
 801083a:	4b6c      	ldr	r3, [pc, #432]	; (80109ec <ip4_frag+0x274>)
 801083c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010840:	496d      	ldr	r1, [pc, #436]	; (80109f8 <ip4_frag+0x280>)
 8010842:	486c      	ldr	r0, [pc, #432]	; (80109f4 <ip4_frag+0x27c>)
 8010844:	f000 fab4 	bl	8010db0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	2214      	movs	r2, #20
 801084e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010850:	4618      	mov	r0, r3
 8010852:	f000 fba6 	bl	8010fa2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801085c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801085e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010862:	e064      	b.n	801092e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	895a      	ldrh	r2, [r3, #10]
 8010868:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	895b      	ldrh	r3, [r3, #10]
 8010872:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010874:	429a      	cmp	r2, r3
 8010876:	d906      	bls.n	8010886 <ip4_frag+0x10e>
 8010878:	4b5c      	ldr	r3, [pc, #368]	; (80109ec <ip4_frag+0x274>)
 801087a:	f240 322d 	movw	r2, #813	; 0x32d
 801087e:	495f      	ldr	r1, [pc, #380]	; (80109fc <ip4_frag+0x284>)
 8010880:	485c      	ldr	r0, [pc, #368]	; (80109f4 <ip4_frag+0x27c>)
 8010882:	f000 fa95 	bl	8010db0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010886:	8bfa      	ldrh	r2, [r7, #30]
 8010888:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801088c:	4293      	cmp	r3, r2
 801088e:	bf28      	it	cs
 8010890:	4613      	movcs	r3, r2
 8010892:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801089a:	2b00      	cmp	r3, #0
 801089c:	d105      	bne.n	80108aa <ip4_frag+0x132>
        poff = 0;
 801089e:	2300      	movs	r3, #0
 80108a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	60fb      	str	r3, [r7, #12]
        continue;
 80108a8:	e041      	b.n	801092e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80108aa:	f7ff ff0d 	bl	80106c8 <ip_frag_alloc_pbuf_custom_ref>
 80108ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d103      	bne.n	80108be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80108b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108b8:	f7f7 f8c8 	bl	8007a4c <pbuf_free>
        goto memerr;
 80108bc:	e08f      	b.n	80109de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80108be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80108c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108c6:	4413      	add	r3, r2
 80108c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80108cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80108d0:	9201      	str	r2, [sp, #4]
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	4603      	mov	r3, r0
 80108d6:	2241      	movs	r2, #65	; 0x41
 80108d8:	2000      	movs	r0, #0
 80108da:	f7f6 fefd 	bl	80076d8 <pbuf_alloced_custom>
 80108de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80108e6:	69b8      	ldr	r0, [r7, #24]
 80108e8:	f7ff fef6 	bl	80106d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80108ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108ee:	f7f7 f8ad 	bl	8007a4c <pbuf_free>
        goto memerr;
 80108f2:	e074      	b.n	80109de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f7f7 f949 	bl	8007b8c <pbuf_ref>
      pcr->original = p;
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	4a3f      	ldr	r2, [pc, #252]	; (8010a00 <ip4_frag+0x288>)
 8010904:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010906:	6979      	ldr	r1, [r7, #20]
 8010908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801090a:	f7f7 f961 	bl	8007bd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801090e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801091c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010920:	2b00      	cmp	r3, #0
 8010922:	d004      	beq.n	801092e <ip4_frag+0x1b6>
        poff = 0;
 8010924:	2300      	movs	r3, #0
 8010926:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801092e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010932:	2b00      	cmp	r3, #0
 8010934:	d196      	bne.n	8010864 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010936:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010938:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801093c:	4413      	add	r3, r2
 801093e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010944:	f1a3 0213 	sub.w	r2, r3, #19
 8010948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801094c:	429a      	cmp	r2, r3
 801094e:	bfcc      	ite	gt
 8010950:	2301      	movgt	r3, #1
 8010952:	2300      	movle	r3, #0
 8010954:	b2db      	uxtb	r3, r3
 8010956:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801095c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010960:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <ip4_frag+0x1f6>
 8010968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096a:	2b00      	cmp	r3, #0
 801096c:	d003      	beq.n	8010976 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801096e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010974:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010976:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010978:	4618      	mov	r0, r3
 801097a:	f7f5 fcd3 	bl	8006324 <lwip_htons>
 801097e:	4603      	mov	r3, r0
 8010980:	461a      	mov	r2, r3
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010988:	3314      	adds	r3, #20
 801098a:	b29b      	uxth	r3, r3
 801098c:	4618      	mov	r0, r3
 801098e:	f7f5 fcc9 	bl	8006324 <lwip_htons>
 8010992:	4603      	mov	r3, r0
 8010994:	461a      	mov	r2, r3
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099c:	2200      	movs	r2, #0
 801099e:	729a      	strb	r2, [r3, #10]
 80109a0:	2200      	movs	r2, #0
 80109a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109ac:	68b8      	ldr	r0, [r7, #8]
 80109ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80109b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109b2:	f7f7 f84b 	bl	8007a4c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80109b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80109c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80109c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80109c8:	4413      	add	r3, r2
 80109ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80109ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f47f af19 	bne.w	801080a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80109d8:	2300      	movs	r3, #0
 80109da:	e002      	b.n	80109e2 <ip4_frag+0x26a>
      goto memerr;
 80109dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80109de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3748      	adds	r7, #72	; 0x48
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	0801456c 	.word	0x0801456c
 80109f0:	08014748 	.word	0x08014748
 80109f4:	080145b4 	.word	0x080145b4
 80109f8:	08014764 	.word	0x08014764
 80109fc:	08014784 	.word	0x08014784
 8010a00:	08010711 	.word	0x08010711

08010a04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010a0e:	230e      	movs	r3, #14
 8010a10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	895b      	ldrh	r3, [r3, #10]
 8010a16:	2b0e      	cmp	r3, #14
 8010a18:	d96e      	bls.n	8010af8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	7bdb      	ldrb	r3, [r3, #15]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a28:	3301      	adds	r3, #1
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	7b1a      	ldrb	r2, [r3, #12]
 8010a3a:	7b5b      	ldrb	r3, [r3, #13]
 8010a3c:	021b      	lsls	r3, r3, #8
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	f003 0301 	and.w	r3, r3, #1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d023      	beq.n	8010a96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d10f      	bne.n	8010a76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	785b      	ldrb	r3, [r3, #1]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d11b      	bne.n	8010a96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a62:	2b5e      	cmp	r3, #94	; 0x5e
 8010a64:	d117      	bne.n	8010a96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	7b5b      	ldrb	r3, [r3, #13]
 8010a6a:	f043 0310 	orr.w	r3, r3, #16
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	735a      	strb	r2, [r3, #13]
 8010a74:	e00f      	b.n	8010a96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	2206      	movs	r2, #6
 8010a7a:	4928      	ldr	r1, [pc, #160]	; (8010b1c <ethernet_input+0x118>)
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f000 f9ec 	bl	8010e5a <memcmp>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d106      	bne.n	8010a96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7b5b      	ldrb	r3, [r3, #13]
 8010a8c:	f043 0308 	orr.w	r3, r3, #8
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010a96:	89fb      	ldrh	r3, [r7, #14]
 8010a98:	2b08      	cmp	r3, #8
 8010a9a:	d003      	beq.n	8010aa4 <ethernet_input+0xa0>
 8010a9c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010aa0:	d014      	beq.n	8010acc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010aa2:	e032      	b.n	8010b0a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aaa:	f003 0308 	and.w	r3, r3, #8
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d024      	beq.n	8010afc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ab2:	8afb      	ldrh	r3, [r7, #22]
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7f6 ff42 	bl	8007940 <pbuf_remove_header>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d11e      	bne.n	8010b00 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010ac2:	6839      	ldr	r1, [r7, #0]
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7fe ff21 	bl	800f90c <ip4_input>
      break;
 8010aca:	e013      	b.n	8010af4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ad2:	f003 0308 	and.w	r3, r3, #8
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d014      	beq.n	8010b04 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ada:	8afb      	ldrh	r3, [r7, #22]
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7f6 ff2e 	bl	8007940 <pbuf_remove_header>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d10e      	bne.n	8010b08 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010aea:	6839      	ldr	r1, [r7, #0]
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7fe f8c1 	bl	800ec74 <etharp_input>
      break;
 8010af2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010af4:	2300      	movs	r3, #0
 8010af6:	e00c      	b.n	8010b12 <ethernet_input+0x10e>
    goto free_and_return;
 8010af8:	bf00      	nop
 8010afa:	e006      	b.n	8010b0a <ethernet_input+0x106>
        goto free_and_return;
 8010afc:	bf00      	nop
 8010afe:	e004      	b.n	8010b0a <ethernet_input+0x106>
        goto free_and_return;
 8010b00:	bf00      	nop
 8010b02:	e002      	b.n	8010b0a <ethernet_input+0x106>
        goto free_and_return;
 8010b04:	bf00      	nop
 8010b06:	e000      	b.n	8010b0a <ethernet_input+0x106>
        goto free_and_return;
 8010b08:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7f6 ff9e 	bl	8007a4c <pbuf_free>
  return ERR_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	080156dc 	.word	0x080156dc

08010b20 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
 8010b2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010b2e:	8c3b      	ldrh	r3, [r7, #32]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7f5 fbf7 	bl	8006324 <lwip_htons>
 8010b36:	4603      	mov	r3, r0
 8010b38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010b3a:	210e      	movs	r1, #14
 8010b3c:	68b8      	ldr	r0, [r7, #8]
 8010b3e:	f7f6 feef 	bl	8007920 <pbuf_add_header>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d125      	bne.n	8010b94 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	8afa      	ldrh	r2, [r7, #22]
 8010b52:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2206      	movs	r2, #6
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f000 fa21 	bl	8010fa2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	3306      	adds	r3, #6
 8010b64:	2206      	movs	r2, #6
 8010b66:	6879      	ldr	r1, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fa1a 	bl	8010fa2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b74:	2b06      	cmp	r3, #6
 8010b76:	d006      	beq.n	8010b86 <ethernet_output+0x66>
 8010b78:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <ethernet_output+0x84>)
 8010b7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010b7e:	490a      	ldr	r1, [pc, #40]	; (8010ba8 <ethernet_output+0x88>)
 8010b80:	480a      	ldr	r0, [pc, #40]	; (8010bac <ethernet_output+0x8c>)
 8010b82:	f000 f915 	bl	8010db0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	699b      	ldr	r3, [r3, #24]
 8010b8a:	68b9      	ldr	r1, [r7, #8]
 8010b8c:	68f8      	ldr	r0, [r7, #12]
 8010b8e:	4798      	blx	r3
 8010b90:	4603      	mov	r3, r0
 8010b92:	e002      	b.n	8010b9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010b94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010b96:	f06f 0301 	mvn.w	r3, #1
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	08014794 	.word	0x08014794
 8010ba8:	080147cc 	.word	0x080147cc
 8010bac:	08014800 	.word	0x08014800

08010bb0 <rand>:
 8010bb0:	4b16      	ldr	r3, [pc, #88]	; (8010c0c <rand+0x5c>)
 8010bb2:	b510      	push	{r4, lr}
 8010bb4:	681c      	ldr	r4, [r3, #0]
 8010bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010bb8:	b9b3      	cbnz	r3, 8010be8 <rand+0x38>
 8010bba:	2018      	movs	r0, #24
 8010bbc:	f000 fa6a 	bl	8011094 <malloc>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	6320      	str	r0, [r4, #48]	; 0x30
 8010bc4:	b920      	cbnz	r0, 8010bd0 <rand+0x20>
 8010bc6:	4b12      	ldr	r3, [pc, #72]	; (8010c10 <rand+0x60>)
 8010bc8:	4812      	ldr	r0, [pc, #72]	; (8010c14 <rand+0x64>)
 8010bca:	2152      	movs	r1, #82	; 0x52
 8010bcc:	f000 f9f8 	bl	8010fc0 <__assert_func>
 8010bd0:	4911      	ldr	r1, [pc, #68]	; (8010c18 <rand+0x68>)
 8010bd2:	4b12      	ldr	r3, [pc, #72]	; (8010c1c <rand+0x6c>)
 8010bd4:	e9c0 1300 	strd	r1, r3, [r0]
 8010bd8:	4b11      	ldr	r3, [pc, #68]	; (8010c20 <rand+0x70>)
 8010bda:	6083      	str	r3, [r0, #8]
 8010bdc:	230b      	movs	r3, #11
 8010bde:	8183      	strh	r3, [r0, #12]
 8010be0:	2100      	movs	r1, #0
 8010be2:	2001      	movs	r0, #1
 8010be4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010be8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010bea:	480e      	ldr	r0, [pc, #56]	; (8010c24 <rand+0x74>)
 8010bec:	690b      	ldr	r3, [r1, #16]
 8010bee:	694c      	ldr	r4, [r1, #20]
 8010bf0:	4a0d      	ldr	r2, [pc, #52]	; (8010c28 <rand+0x78>)
 8010bf2:	4358      	muls	r0, r3
 8010bf4:	fb02 0004 	mla	r0, r2, r4, r0
 8010bf8:	fba3 3202 	umull	r3, r2, r3, r2
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	eb40 0002 	adc.w	r0, r0, r2
 8010c02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010c06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010c0a:	bd10      	pop	{r4, pc}
 8010c0c:	20000084 	.word	0x20000084
 8010c10:	080156ea 	.word	0x080156ea
 8010c14:	08015701 	.word	0x08015701
 8010c18:	abcd330e 	.word	0xabcd330e
 8010c1c:	e66d1234 	.word	0xe66d1234
 8010c20:	0005deec 	.word	0x0005deec
 8010c24:	5851f42d 	.word	0x5851f42d
 8010c28:	4c957f2d 	.word	0x4c957f2d

08010c2c <std>:
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	b510      	push	{r4, lr}
 8010c30:	4604      	mov	r4, r0
 8010c32:	e9c0 3300 	strd	r3, r3, [r0]
 8010c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c3a:	6083      	str	r3, [r0, #8]
 8010c3c:	8181      	strh	r1, [r0, #12]
 8010c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010c40:	81c2      	strh	r2, [r0, #14]
 8010c42:	6183      	str	r3, [r0, #24]
 8010c44:	4619      	mov	r1, r3
 8010c46:	2208      	movs	r2, #8
 8010c48:	305c      	adds	r0, #92	; 0x5c
 8010c4a:	f000 f916 	bl	8010e7a <memset>
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	; (8010c84 <std+0x58>)
 8010c50:	6263      	str	r3, [r4, #36]	; 0x24
 8010c52:	4b0d      	ldr	r3, [pc, #52]	; (8010c88 <std+0x5c>)
 8010c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c56:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <std+0x60>)
 8010c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c5a:	4b0d      	ldr	r3, [pc, #52]	; (8010c90 <std+0x64>)
 8010c5c:	6323      	str	r3, [r4, #48]	; 0x30
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	; (8010c94 <std+0x68>)
 8010c60:	6224      	str	r4, [r4, #32]
 8010c62:	429c      	cmp	r4, r3
 8010c64:	d006      	beq.n	8010c74 <std+0x48>
 8010c66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010c6a:	4294      	cmp	r4, r2
 8010c6c:	d002      	beq.n	8010c74 <std+0x48>
 8010c6e:	33d0      	adds	r3, #208	; 0xd0
 8010c70:	429c      	cmp	r4, r3
 8010c72:	d105      	bne.n	8010c80 <std+0x54>
 8010c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7c:	f000 b98e 	b.w	8010f9c <__retarget_lock_init_recursive>
 8010c80:	bd10      	pop	{r4, pc}
 8010c82:	bf00      	nop
 8010c84:	08010dd5 	.word	0x08010dd5
 8010c88:	08010df7 	.word	0x08010df7
 8010c8c:	08010e2f 	.word	0x08010e2f
 8010c90:	08010e53 	.word	0x08010e53
 8010c94:	20008d6c 	.word	0x20008d6c

08010c98 <stdio_exit_handler>:
 8010c98:	4a02      	ldr	r2, [pc, #8]	; (8010ca4 <stdio_exit_handler+0xc>)
 8010c9a:	4903      	ldr	r1, [pc, #12]	; (8010ca8 <stdio_exit_handler+0x10>)
 8010c9c:	4803      	ldr	r0, [pc, #12]	; (8010cac <stdio_exit_handler+0x14>)
 8010c9e:	f000 b869 	b.w	8010d74 <_fwalk_sglue>
 8010ca2:	bf00      	nop
 8010ca4:	2000002c 	.word	0x2000002c
 8010ca8:	080118b1 	.word	0x080118b1
 8010cac:	20000038 	.word	0x20000038

08010cb0 <cleanup_stdio>:
 8010cb0:	6841      	ldr	r1, [r0, #4]
 8010cb2:	4b0c      	ldr	r3, [pc, #48]	; (8010ce4 <cleanup_stdio+0x34>)
 8010cb4:	4299      	cmp	r1, r3
 8010cb6:	b510      	push	{r4, lr}
 8010cb8:	4604      	mov	r4, r0
 8010cba:	d001      	beq.n	8010cc0 <cleanup_stdio+0x10>
 8010cbc:	f000 fdf8 	bl	80118b0 <_fflush_r>
 8010cc0:	68a1      	ldr	r1, [r4, #8]
 8010cc2:	4b09      	ldr	r3, [pc, #36]	; (8010ce8 <cleanup_stdio+0x38>)
 8010cc4:	4299      	cmp	r1, r3
 8010cc6:	d002      	beq.n	8010cce <cleanup_stdio+0x1e>
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f000 fdf1 	bl	80118b0 <_fflush_r>
 8010cce:	68e1      	ldr	r1, [r4, #12]
 8010cd0:	4b06      	ldr	r3, [pc, #24]	; (8010cec <cleanup_stdio+0x3c>)
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	d004      	beq.n	8010ce0 <cleanup_stdio+0x30>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cdc:	f000 bde8 	b.w	80118b0 <_fflush_r>
 8010ce0:	bd10      	pop	{r4, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20008d6c 	.word	0x20008d6c
 8010ce8:	20008dd4 	.word	0x20008dd4
 8010cec:	20008e3c 	.word	0x20008e3c

08010cf0 <global_stdio_init.part.0>:
 8010cf0:	b510      	push	{r4, lr}
 8010cf2:	4b0b      	ldr	r3, [pc, #44]	; (8010d20 <global_stdio_init.part.0+0x30>)
 8010cf4:	4c0b      	ldr	r4, [pc, #44]	; (8010d24 <global_stdio_init.part.0+0x34>)
 8010cf6:	4a0c      	ldr	r2, [pc, #48]	; (8010d28 <global_stdio_init.part.0+0x38>)
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	2104      	movs	r1, #4
 8010d00:	f7ff ff94 	bl	8010c2c <std>
 8010d04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010d08:	2201      	movs	r2, #1
 8010d0a:	2109      	movs	r1, #9
 8010d0c:	f7ff ff8e 	bl	8010c2c <std>
 8010d10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010d14:	2202      	movs	r2, #2
 8010d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d1a:	2112      	movs	r1, #18
 8010d1c:	f7ff bf86 	b.w	8010c2c <std>
 8010d20:	20008ea4 	.word	0x20008ea4
 8010d24:	20008d6c 	.word	0x20008d6c
 8010d28:	08010c99 	.word	0x08010c99

08010d2c <__sfp_lock_acquire>:
 8010d2c:	4801      	ldr	r0, [pc, #4]	; (8010d34 <__sfp_lock_acquire+0x8>)
 8010d2e:	f000 b936 	b.w	8010f9e <__retarget_lock_acquire_recursive>
 8010d32:	bf00      	nop
 8010d34:	20008ead 	.word	0x20008ead

08010d38 <__sfp_lock_release>:
 8010d38:	4801      	ldr	r0, [pc, #4]	; (8010d40 <__sfp_lock_release+0x8>)
 8010d3a:	f000 b931 	b.w	8010fa0 <__retarget_lock_release_recursive>
 8010d3e:	bf00      	nop
 8010d40:	20008ead 	.word	0x20008ead

08010d44 <__sinit>:
 8010d44:	b510      	push	{r4, lr}
 8010d46:	4604      	mov	r4, r0
 8010d48:	f7ff fff0 	bl	8010d2c <__sfp_lock_acquire>
 8010d4c:	6a23      	ldr	r3, [r4, #32]
 8010d4e:	b11b      	cbz	r3, 8010d58 <__sinit+0x14>
 8010d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d54:	f7ff bff0 	b.w	8010d38 <__sfp_lock_release>
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <__sinit+0x28>)
 8010d5a:	6223      	str	r3, [r4, #32]
 8010d5c:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <__sinit+0x2c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1f5      	bne.n	8010d50 <__sinit+0xc>
 8010d64:	f7ff ffc4 	bl	8010cf0 <global_stdio_init.part.0>
 8010d68:	e7f2      	b.n	8010d50 <__sinit+0xc>
 8010d6a:	bf00      	nop
 8010d6c:	08010cb1 	.word	0x08010cb1
 8010d70:	20008ea4 	.word	0x20008ea4

08010d74 <_fwalk_sglue>:
 8010d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d78:	4607      	mov	r7, r0
 8010d7a:	4688      	mov	r8, r1
 8010d7c:	4614      	mov	r4, r2
 8010d7e:	2600      	movs	r6, #0
 8010d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d84:	f1b9 0901 	subs.w	r9, r9, #1
 8010d88:	d505      	bpl.n	8010d96 <_fwalk_sglue+0x22>
 8010d8a:	6824      	ldr	r4, [r4, #0]
 8010d8c:	2c00      	cmp	r4, #0
 8010d8e:	d1f7      	bne.n	8010d80 <_fwalk_sglue+0xc>
 8010d90:	4630      	mov	r0, r6
 8010d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d96:	89ab      	ldrh	r3, [r5, #12]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d907      	bls.n	8010dac <_fwalk_sglue+0x38>
 8010d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010da0:	3301      	adds	r3, #1
 8010da2:	d003      	beq.n	8010dac <_fwalk_sglue+0x38>
 8010da4:	4629      	mov	r1, r5
 8010da6:	4638      	mov	r0, r7
 8010da8:	47c0      	blx	r8
 8010daa:	4306      	orrs	r6, r0
 8010dac:	3568      	adds	r5, #104	; 0x68
 8010dae:	e7e9      	b.n	8010d84 <_fwalk_sglue+0x10>

08010db0 <iprintf>:
 8010db0:	b40f      	push	{r0, r1, r2, r3}
 8010db2:	b507      	push	{r0, r1, r2, lr}
 8010db4:	4906      	ldr	r1, [pc, #24]	; (8010dd0 <iprintf+0x20>)
 8010db6:	ab04      	add	r3, sp, #16
 8010db8:	6808      	ldr	r0, [r1, #0]
 8010dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dbe:	6881      	ldr	r1, [r0, #8]
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	f000 fa45 	bl	8011250 <_vfiprintf_r>
 8010dc6:	b003      	add	sp, #12
 8010dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dcc:	b004      	add	sp, #16
 8010dce:	4770      	bx	lr
 8010dd0:	20000084 	.word	0x20000084

08010dd4 <__sread>:
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ddc:	f000 f896 	bl	8010f0c <_read_r>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	bfab      	itete	ge
 8010de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010de6:	89a3      	ldrhlt	r3, [r4, #12]
 8010de8:	181b      	addge	r3, r3, r0
 8010dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010dee:	bfac      	ite	ge
 8010df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010df2:	81a3      	strhlt	r3, [r4, #12]
 8010df4:	bd10      	pop	{r4, pc}

08010df6 <__swrite>:
 8010df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfa:	461f      	mov	r7, r3
 8010dfc:	898b      	ldrh	r3, [r1, #12]
 8010dfe:	05db      	lsls	r3, r3, #23
 8010e00:	4605      	mov	r5, r0
 8010e02:	460c      	mov	r4, r1
 8010e04:	4616      	mov	r6, r2
 8010e06:	d505      	bpl.n	8010e14 <__swrite+0x1e>
 8010e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f000 f86a 	bl	8010ee8 <_lseek_r>
 8010e14:	89a3      	ldrh	r3, [r4, #12]
 8010e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e1e:	81a3      	strh	r3, [r4, #12]
 8010e20:	4632      	mov	r2, r6
 8010e22:	463b      	mov	r3, r7
 8010e24:	4628      	mov	r0, r5
 8010e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2a:	f000 b881 	b.w	8010f30 <_write_r>

08010e2e <__sseek>:
 8010e2e:	b510      	push	{r4, lr}
 8010e30:	460c      	mov	r4, r1
 8010e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e36:	f000 f857 	bl	8010ee8 <_lseek_r>
 8010e3a:	1c43      	adds	r3, r0, #1
 8010e3c:	89a3      	ldrh	r3, [r4, #12]
 8010e3e:	bf15      	itete	ne
 8010e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e4a:	81a3      	strheq	r3, [r4, #12]
 8010e4c:	bf18      	it	ne
 8010e4e:	81a3      	strhne	r3, [r4, #12]
 8010e50:	bd10      	pop	{r4, pc}

08010e52 <__sclose>:
 8010e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e56:	f000 b837 	b.w	8010ec8 <_close_r>

08010e5a <memcmp>:
 8010e5a:	b510      	push	{r4, lr}
 8010e5c:	3901      	subs	r1, #1
 8010e5e:	4402      	add	r2, r0
 8010e60:	4290      	cmp	r0, r2
 8010e62:	d101      	bne.n	8010e68 <memcmp+0xe>
 8010e64:	2000      	movs	r0, #0
 8010e66:	e005      	b.n	8010e74 <memcmp+0x1a>
 8010e68:	7803      	ldrb	r3, [r0, #0]
 8010e6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010e6e:	42a3      	cmp	r3, r4
 8010e70:	d001      	beq.n	8010e76 <memcmp+0x1c>
 8010e72:	1b18      	subs	r0, r3, r4
 8010e74:	bd10      	pop	{r4, pc}
 8010e76:	3001      	adds	r0, #1
 8010e78:	e7f2      	b.n	8010e60 <memcmp+0x6>

08010e7a <memset>:
 8010e7a:	4402      	add	r2, r0
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d100      	bne.n	8010e84 <memset+0xa>
 8010e82:	4770      	bx	lr
 8010e84:	f803 1b01 	strb.w	r1, [r3], #1
 8010e88:	e7f9      	b.n	8010e7e <memset+0x4>

08010e8a <strchr>:
 8010e8a:	b2c9      	uxtb	r1, r1
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e92:	b11a      	cbz	r2, 8010e9c <strchr+0x12>
 8010e94:	428a      	cmp	r2, r1
 8010e96:	d1f9      	bne.n	8010e8c <strchr+0x2>
 8010e98:	4618      	mov	r0, r3
 8010e9a:	4770      	bx	lr
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	bf18      	it	ne
 8010ea0:	2300      	movne	r3, #0
 8010ea2:	e7f9      	b.n	8010e98 <strchr+0xe>

08010ea4 <strncmp>:
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	b16a      	cbz	r2, 8010ec4 <strncmp+0x20>
 8010ea8:	3901      	subs	r1, #1
 8010eaa:	1884      	adds	r4, r0, r2
 8010eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d103      	bne.n	8010ec0 <strncmp+0x1c>
 8010eb8:	42a0      	cmp	r0, r4
 8010eba:	d001      	beq.n	8010ec0 <strncmp+0x1c>
 8010ebc:	2a00      	cmp	r2, #0
 8010ebe:	d1f5      	bne.n	8010eac <strncmp+0x8>
 8010ec0:	1ad0      	subs	r0, r2, r3
 8010ec2:	bd10      	pop	{r4, pc}
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	e7fc      	b.n	8010ec2 <strncmp+0x1e>

08010ec8 <_close_r>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	4d06      	ldr	r5, [pc, #24]	; (8010ee4 <_close_r+0x1c>)
 8010ecc:	2300      	movs	r3, #0
 8010ece:	4604      	mov	r4, r0
 8010ed0:	4608      	mov	r0, r1
 8010ed2:	602b      	str	r3, [r5, #0]
 8010ed4:	f7ef feab 	bl	8000c2e <_close>
 8010ed8:	1c43      	adds	r3, r0, #1
 8010eda:	d102      	bne.n	8010ee2 <_close_r+0x1a>
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	b103      	cbz	r3, 8010ee2 <_close_r+0x1a>
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	bd38      	pop	{r3, r4, r5, pc}
 8010ee4:	20008ea8 	.word	0x20008ea8

08010ee8 <_lseek_r>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	4d07      	ldr	r5, [pc, #28]	; (8010f08 <_lseek_r+0x20>)
 8010eec:	4604      	mov	r4, r0
 8010eee:	4608      	mov	r0, r1
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	602a      	str	r2, [r5, #0]
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	f7ef fec0 	bl	8000c7c <_lseek>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_lseek_r+0x1e>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_lseek_r+0x1e>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	20008ea8 	.word	0x20008ea8

08010f0c <_read_r>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	4d07      	ldr	r5, [pc, #28]	; (8010f2c <_read_r+0x20>)
 8010f10:	4604      	mov	r4, r0
 8010f12:	4608      	mov	r0, r1
 8010f14:	4611      	mov	r1, r2
 8010f16:	2200      	movs	r2, #0
 8010f18:	602a      	str	r2, [r5, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	f7ef fe4e 	bl	8000bbc <_read>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d102      	bne.n	8010f2a <_read_r+0x1e>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	b103      	cbz	r3, 8010f2a <_read_r+0x1e>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	20008ea8 	.word	0x20008ea8

08010f30 <_write_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d07      	ldr	r5, [pc, #28]	; (8010f50 <_write_r+0x20>)
 8010f34:	4604      	mov	r4, r0
 8010f36:	4608      	mov	r0, r1
 8010f38:	4611      	mov	r1, r2
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	602a      	str	r2, [r5, #0]
 8010f3e:	461a      	mov	r2, r3
 8010f40:	f7ef fe59 	bl	8000bf6 <_write>
 8010f44:	1c43      	adds	r3, r0, #1
 8010f46:	d102      	bne.n	8010f4e <_write_r+0x1e>
 8010f48:	682b      	ldr	r3, [r5, #0]
 8010f4a:	b103      	cbz	r3, 8010f4e <_write_r+0x1e>
 8010f4c:	6023      	str	r3, [r4, #0]
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	20008ea8 	.word	0x20008ea8

08010f54 <__libc_init_array>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	4d0d      	ldr	r5, [pc, #52]	; (8010f8c <__libc_init_array+0x38>)
 8010f58:	4c0d      	ldr	r4, [pc, #52]	; (8010f90 <__libc_init_array+0x3c>)
 8010f5a:	1b64      	subs	r4, r4, r5
 8010f5c:	10a4      	asrs	r4, r4, #2
 8010f5e:	2600      	movs	r6, #0
 8010f60:	42a6      	cmp	r6, r4
 8010f62:	d109      	bne.n	8010f78 <__libc_init_array+0x24>
 8010f64:	4d0b      	ldr	r5, [pc, #44]	; (8010f94 <__libc_init_array+0x40>)
 8010f66:	4c0c      	ldr	r4, [pc, #48]	; (8010f98 <__libc_init_array+0x44>)
 8010f68:	f000 fe52 	bl	8011c10 <_init>
 8010f6c:	1b64      	subs	r4, r4, r5
 8010f6e:	10a4      	asrs	r4, r4, #2
 8010f70:	2600      	movs	r6, #0
 8010f72:	42a6      	cmp	r6, r4
 8010f74:	d105      	bne.n	8010f82 <__libc_init_array+0x2e>
 8010f76:	bd70      	pop	{r4, r5, r6, pc}
 8010f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f7c:	4798      	blx	r3
 8010f7e:	3601      	adds	r6, #1
 8010f80:	e7ee      	b.n	8010f60 <__libc_init_array+0xc>
 8010f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f86:	4798      	blx	r3
 8010f88:	3601      	adds	r6, #1
 8010f8a:	e7f2      	b.n	8010f72 <__libc_init_array+0x1e>
 8010f8c:	080157d0 	.word	0x080157d0
 8010f90:	080157d0 	.word	0x080157d0
 8010f94:	080157d0 	.word	0x080157d0
 8010f98:	080157d4 	.word	0x080157d4

08010f9c <__retarget_lock_init_recursive>:
 8010f9c:	4770      	bx	lr

08010f9e <__retarget_lock_acquire_recursive>:
 8010f9e:	4770      	bx	lr

08010fa0 <__retarget_lock_release_recursive>:
 8010fa0:	4770      	bx	lr

08010fa2 <memcpy>:
 8010fa2:	440a      	add	r2, r1
 8010fa4:	4291      	cmp	r1, r2
 8010fa6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010faa:	d100      	bne.n	8010fae <memcpy+0xc>
 8010fac:	4770      	bx	lr
 8010fae:	b510      	push	{r4, lr}
 8010fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fb8:	4291      	cmp	r1, r2
 8010fba:	d1f9      	bne.n	8010fb0 <memcpy+0xe>
 8010fbc:	bd10      	pop	{r4, pc}
	...

08010fc0 <__assert_func>:
 8010fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	4b09      	ldr	r3, [pc, #36]	; (8010fec <__assert_func+0x2c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4605      	mov	r5, r0
 8010fcc:	68d8      	ldr	r0, [r3, #12]
 8010fce:	b14c      	cbz	r4, 8010fe4 <__assert_func+0x24>
 8010fd0:	4b07      	ldr	r3, [pc, #28]	; (8010ff0 <__assert_func+0x30>)
 8010fd2:	9100      	str	r1, [sp, #0]
 8010fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fd8:	4906      	ldr	r1, [pc, #24]	; (8010ff4 <__assert_func+0x34>)
 8010fda:	462b      	mov	r3, r5
 8010fdc:	f000 fc90 	bl	8011900 <fiprintf>
 8010fe0:	f000 fd46 	bl	8011a70 <abort>
 8010fe4:	4b04      	ldr	r3, [pc, #16]	; (8010ff8 <__assert_func+0x38>)
 8010fe6:	461c      	mov	r4, r3
 8010fe8:	e7f3      	b.n	8010fd2 <__assert_func+0x12>
 8010fea:	bf00      	nop
 8010fec:	20000084 	.word	0x20000084
 8010ff0:	08015759 	.word	0x08015759
 8010ff4:	08015766 	.word	0x08015766
 8010ff8:	08015794 	.word	0x08015794

08010ffc <_free_r>:
 8010ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ffe:	2900      	cmp	r1, #0
 8011000:	d044      	beq.n	801108c <_free_r+0x90>
 8011002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011006:	9001      	str	r0, [sp, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	f1a1 0404 	sub.w	r4, r1, #4
 801100e:	bfb8      	it	lt
 8011010:	18e4      	addlt	r4, r4, r3
 8011012:	f000 f8e7 	bl	80111e4 <__malloc_lock>
 8011016:	4a1e      	ldr	r2, [pc, #120]	; (8011090 <_free_r+0x94>)
 8011018:	9801      	ldr	r0, [sp, #4]
 801101a:	6813      	ldr	r3, [r2, #0]
 801101c:	b933      	cbnz	r3, 801102c <_free_r+0x30>
 801101e:	6063      	str	r3, [r4, #4]
 8011020:	6014      	str	r4, [r2, #0]
 8011022:	b003      	add	sp, #12
 8011024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011028:	f000 b8e2 	b.w	80111f0 <__malloc_unlock>
 801102c:	42a3      	cmp	r3, r4
 801102e:	d908      	bls.n	8011042 <_free_r+0x46>
 8011030:	6825      	ldr	r5, [r4, #0]
 8011032:	1961      	adds	r1, r4, r5
 8011034:	428b      	cmp	r3, r1
 8011036:	bf01      	itttt	eq
 8011038:	6819      	ldreq	r1, [r3, #0]
 801103a:	685b      	ldreq	r3, [r3, #4]
 801103c:	1949      	addeq	r1, r1, r5
 801103e:	6021      	streq	r1, [r4, #0]
 8011040:	e7ed      	b.n	801101e <_free_r+0x22>
 8011042:	461a      	mov	r2, r3
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	b10b      	cbz	r3, 801104c <_free_r+0x50>
 8011048:	42a3      	cmp	r3, r4
 801104a:	d9fa      	bls.n	8011042 <_free_r+0x46>
 801104c:	6811      	ldr	r1, [r2, #0]
 801104e:	1855      	adds	r5, r2, r1
 8011050:	42a5      	cmp	r5, r4
 8011052:	d10b      	bne.n	801106c <_free_r+0x70>
 8011054:	6824      	ldr	r4, [r4, #0]
 8011056:	4421      	add	r1, r4
 8011058:	1854      	adds	r4, r2, r1
 801105a:	42a3      	cmp	r3, r4
 801105c:	6011      	str	r1, [r2, #0]
 801105e:	d1e0      	bne.n	8011022 <_free_r+0x26>
 8011060:	681c      	ldr	r4, [r3, #0]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	6053      	str	r3, [r2, #4]
 8011066:	440c      	add	r4, r1
 8011068:	6014      	str	r4, [r2, #0]
 801106a:	e7da      	b.n	8011022 <_free_r+0x26>
 801106c:	d902      	bls.n	8011074 <_free_r+0x78>
 801106e:	230c      	movs	r3, #12
 8011070:	6003      	str	r3, [r0, #0]
 8011072:	e7d6      	b.n	8011022 <_free_r+0x26>
 8011074:	6825      	ldr	r5, [r4, #0]
 8011076:	1961      	adds	r1, r4, r5
 8011078:	428b      	cmp	r3, r1
 801107a:	bf04      	itt	eq
 801107c:	6819      	ldreq	r1, [r3, #0]
 801107e:	685b      	ldreq	r3, [r3, #4]
 8011080:	6063      	str	r3, [r4, #4]
 8011082:	bf04      	itt	eq
 8011084:	1949      	addeq	r1, r1, r5
 8011086:	6021      	streq	r1, [r4, #0]
 8011088:	6054      	str	r4, [r2, #4]
 801108a:	e7ca      	b.n	8011022 <_free_r+0x26>
 801108c:	b003      	add	sp, #12
 801108e:	bd30      	pop	{r4, r5, pc}
 8011090:	20008eb0 	.word	0x20008eb0

08011094 <malloc>:
 8011094:	4b02      	ldr	r3, [pc, #8]	; (80110a0 <malloc+0xc>)
 8011096:	4601      	mov	r1, r0
 8011098:	6818      	ldr	r0, [r3, #0]
 801109a:	f000 b823 	b.w	80110e4 <_malloc_r>
 801109e:	bf00      	nop
 80110a0:	20000084 	.word	0x20000084

080110a4 <sbrk_aligned>:
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	4e0e      	ldr	r6, [pc, #56]	; (80110e0 <sbrk_aligned+0x3c>)
 80110a8:	460c      	mov	r4, r1
 80110aa:	6831      	ldr	r1, [r6, #0]
 80110ac:	4605      	mov	r5, r0
 80110ae:	b911      	cbnz	r1, 80110b6 <sbrk_aligned+0x12>
 80110b0:	f000 fcce 	bl	8011a50 <_sbrk_r>
 80110b4:	6030      	str	r0, [r6, #0]
 80110b6:	4621      	mov	r1, r4
 80110b8:	4628      	mov	r0, r5
 80110ba:	f000 fcc9 	bl	8011a50 <_sbrk_r>
 80110be:	1c43      	adds	r3, r0, #1
 80110c0:	d00a      	beq.n	80110d8 <sbrk_aligned+0x34>
 80110c2:	1cc4      	adds	r4, r0, #3
 80110c4:	f024 0403 	bic.w	r4, r4, #3
 80110c8:	42a0      	cmp	r0, r4
 80110ca:	d007      	beq.n	80110dc <sbrk_aligned+0x38>
 80110cc:	1a21      	subs	r1, r4, r0
 80110ce:	4628      	mov	r0, r5
 80110d0:	f000 fcbe 	bl	8011a50 <_sbrk_r>
 80110d4:	3001      	adds	r0, #1
 80110d6:	d101      	bne.n	80110dc <sbrk_aligned+0x38>
 80110d8:	f04f 34ff 	mov.w	r4, #4294967295
 80110dc:	4620      	mov	r0, r4
 80110de:	bd70      	pop	{r4, r5, r6, pc}
 80110e0:	20008eb4 	.word	0x20008eb4

080110e4 <_malloc_r>:
 80110e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e8:	1ccd      	adds	r5, r1, #3
 80110ea:	f025 0503 	bic.w	r5, r5, #3
 80110ee:	3508      	adds	r5, #8
 80110f0:	2d0c      	cmp	r5, #12
 80110f2:	bf38      	it	cc
 80110f4:	250c      	movcc	r5, #12
 80110f6:	2d00      	cmp	r5, #0
 80110f8:	4607      	mov	r7, r0
 80110fa:	db01      	blt.n	8011100 <_malloc_r+0x1c>
 80110fc:	42a9      	cmp	r1, r5
 80110fe:	d905      	bls.n	801110c <_malloc_r+0x28>
 8011100:	230c      	movs	r3, #12
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	2600      	movs	r6, #0
 8011106:	4630      	mov	r0, r6
 8011108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801110c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80111e0 <_malloc_r+0xfc>
 8011110:	f000 f868 	bl	80111e4 <__malloc_lock>
 8011114:	f8d8 3000 	ldr.w	r3, [r8]
 8011118:	461c      	mov	r4, r3
 801111a:	bb5c      	cbnz	r4, 8011174 <_malloc_r+0x90>
 801111c:	4629      	mov	r1, r5
 801111e:	4638      	mov	r0, r7
 8011120:	f7ff ffc0 	bl	80110a4 <sbrk_aligned>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	4604      	mov	r4, r0
 8011128:	d155      	bne.n	80111d6 <_malloc_r+0xf2>
 801112a:	f8d8 4000 	ldr.w	r4, [r8]
 801112e:	4626      	mov	r6, r4
 8011130:	2e00      	cmp	r6, #0
 8011132:	d145      	bne.n	80111c0 <_malloc_r+0xdc>
 8011134:	2c00      	cmp	r4, #0
 8011136:	d048      	beq.n	80111ca <_malloc_r+0xe6>
 8011138:	6823      	ldr	r3, [r4, #0]
 801113a:	4631      	mov	r1, r6
 801113c:	4638      	mov	r0, r7
 801113e:	eb04 0903 	add.w	r9, r4, r3
 8011142:	f000 fc85 	bl	8011a50 <_sbrk_r>
 8011146:	4581      	cmp	r9, r0
 8011148:	d13f      	bne.n	80111ca <_malloc_r+0xe6>
 801114a:	6821      	ldr	r1, [r4, #0]
 801114c:	1a6d      	subs	r5, r5, r1
 801114e:	4629      	mov	r1, r5
 8011150:	4638      	mov	r0, r7
 8011152:	f7ff ffa7 	bl	80110a4 <sbrk_aligned>
 8011156:	3001      	adds	r0, #1
 8011158:	d037      	beq.n	80111ca <_malloc_r+0xe6>
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	442b      	add	r3, r5
 801115e:	6023      	str	r3, [r4, #0]
 8011160:	f8d8 3000 	ldr.w	r3, [r8]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d038      	beq.n	80111da <_malloc_r+0xf6>
 8011168:	685a      	ldr	r2, [r3, #4]
 801116a:	42a2      	cmp	r2, r4
 801116c:	d12b      	bne.n	80111c6 <_malloc_r+0xe2>
 801116e:	2200      	movs	r2, #0
 8011170:	605a      	str	r2, [r3, #4]
 8011172:	e00f      	b.n	8011194 <_malloc_r+0xb0>
 8011174:	6822      	ldr	r2, [r4, #0]
 8011176:	1b52      	subs	r2, r2, r5
 8011178:	d41f      	bmi.n	80111ba <_malloc_r+0xd6>
 801117a:	2a0b      	cmp	r2, #11
 801117c:	d917      	bls.n	80111ae <_malloc_r+0xca>
 801117e:	1961      	adds	r1, r4, r5
 8011180:	42a3      	cmp	r3, r4
 8011182:	6025      	str	r5, [r4, #0]
 8011184:	bf18      	it	ne
 8011186:	6059      	strne	r1, [r3, #4]
 8011188:	6863      	ldr	r3, [r4, #4]
 801118a:	bf08      	it	eq
 801118c:	f8c8 1000 	streq.w	r1, [r8]
 8011190:	5162      	str	r2, [r4, r5]
 8011192:	604b      	str	r3, [r1, #4]
 8011194:	4638      	mov	r0, r7
 8011196:	f104 060b 	add.w	r6, r4, #11
 801119a:	f000 f829 	bl	80111f0 <__malloc_unlock>
 801119e:	f026 0607 	bic.w	r6, r6, #7
 80111a2:	1d23      	adds	r3, r4, #4
 80111a4:	1af2      	subs	r2, r6, r3
 80111a6:	d0ae      	beq.n	8011106 <_malloc_r+0x22>
 80111a8:	1b9b      	subs	r3, r3, r6
 80111aa:	50a3      	str	r3, [r4, r2]
 80111ac:	e7ab      	b.n	8011106 <_malloc_r+0x22>
 80111ae:	42a3      	cmp	r3, r4
 80111b0:	6862      	ldr	r2, [r4, #4]
 80111b2:	d1dd      	bne.n	8011170 <_malloc_r+0x8c>
 80111b4:	f8c8 2000 	str.w	r2, [r8]
 80111b8:	e7ec      	b.n	8011194 <_malloc_r+0xb0>
 80111ba:	4623      	mov	r3, r4
 80111bc:	6864      	ldr	r4, [r4, #4]
 80111be:	e7ac      	b.n	801111a <_malloc_r+0x36>
 80111c0:	4634      	mov	r4, r6
 80111c2:	6876      	ldr	r6, [r6, #4]
 80111c4:	e7b4      	b.n	8011130 <_malloc_r+0x4c>
 80111c6:	4613      	mov	r3, r2
 80111c8:	e7cc      	b.n	8011164 <_malloc_r+0x80>
 80111ca:	230c      	movs	r3, #12
 80111cc:	603b      	str	r3, [r7, #0]
 80111ce:	4638      	mov	r0, r7
 80111d0:	f000 f80e 	bl	80111f0 <__malloc_unlock>
 80111d4:	e797      	b.n	8011106 <_malloc_r+0x22>
 80111d6:	6025      	str	r5, [r4, #0]
 80111d8:	e7dc      	b.n	8011194 <_malloc_r+0xb0>
 80111da:	605b      	str	r3, [r3, #4]
 80111dc:	deff      	udf	#255	; 0xff
 80111de:	bf00      	nop
 80111e0:	20008eb0 	.word	0x20008eb0

080111e4 <__malloc_lock>:
 80111e4:	4801      	ldr	r0, [pc, #4]	; (80111ec <__malloc_lock+0x8>)
 80111e6:	f7ff beda 	b.w	8010f9e <__retarget_lock_acquire_recursive>
 80111ea:	bf00      	nop
 80111ec:	20008eac 	.word	0x20008eac

080111f0 <__malloc_unlock>:
 80111f0:	4801      	ldr	r0, [pc, #4]	; (80111f8 <__malloc_unlock+0x8>)
 80111f2:	f7ff bed5 	b.w	8010fa0 <__retarget_lock_release_recursive>
 80111f6:	bf00      	nop
 80111f8:	20008eac 	.word	0x20008eac

080111fc <__sfputc_r>:
 80111fc:	6893      	ldr	r3, [r2, #8]
 80111fe:	3b01      	subs	r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	b410      	push	{r4}
 8011204:	6093      	str	r3, [r2, #8]
 8011206:	da08      	bge.n	801121a <__sfputc_r+0x1e>
 8011208:	6994      	ldr	r4, [r2, #24]
 801120a:	42a3      	cmp	r3, r4
 801120c:	db01      	blt.n	8011212 <__sfputc_r+0x16>
 801120e:	290a      	cmp	r1, #10
 8011210:	d103      	bne.n	801121a <__sfputc_r+0x1e>
 8011212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011216:	f000 bb85 	b.w	8011924 <__swbuf_r>
 801121a:	6813      	ldr	r3, [r2, #0]
 801121c:	1c58      	adds	r0, r3, #1
 801121e:	6010      	str	r0, [r2, #0]
 8011220:	7019      	strb	r1, [r3, #0]
 8011222:	4608      	mov	r0, r1
 8011224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011228:	4770      	bx	lr

0801122a <__sfputs_r>:
 801122a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122c:	4606      	mov	r6, r0
 801122e:	460f      	mov	r7, r1
 8011230:	4614      	mov	r4, r2
 8011232:	18d5      	adds	r5, r2, r3
 8011234:	42ac      	cmp	r4, r5
 8011236:	d101      	bne.n	801123c <__sfputs_r+0x12>
 8011238:	2000      	movs	r0, #0
 801123a:	e007      	b.n	801124c <__sfputs_r+0x22>
 801123c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011240:	463a      	mov	r2, r7
 8011242:	4630      	mov	r0, r6
 8011244:	f7ff ffda 	bl	80111fc <__sfputc_r>
 8011248:	1c43      	adds	r3, r0, #1
 801124a:	d1f3      	bne.n	8011234 <__sfputs_r+0xa>
 801124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011250 <_vfiprintf_r>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	460d      	mov	r5, r1
 8011256:	b09d      	sub	sp, #116	; 0x74
 8011258:	4614      	mov	r4, r2
 801125a:	4698      	mov	r8, r3
 801125c:	4606      	mov	r6, r0
 801125e:	b118      	cbz	r0, 8011268 <_vfiprintf_r+0x18>
 8011260:	6a03      	ldr	r3, [r0, #32]
 8011262:	b90b      	cbnz	r3, 8011268 <_vfiprintf_r+0x18>
 8011264:	f7ff fd6e 	bl	8010d44 <__sinit>
 8011268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801126a:	07d9      	lsls	r1, r3, #31
 801126c:	d405      	bmi.n	801127a <_vfiprintf_r+0x2a>
 801126e:	89ab      	ldrh	r3, [r5, #12]
 8011270:	059a      	lsls	r2, r3, #22
 8011272:	d402      	bmi.n	801127a <_vfiprintf_r+0x2a>
 8011274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011276:	f7ff fe92 	bl	8010f9e <__retarget_lock_acquire_recursive>
 801127a:	89ab      	ldrh	r3, [r5, #12]
 801127c:	071b      	lsls	r3, r3, #28
 801127e:	d501      	bpl.n	8011284 <_vfiprintf_r+0x34>
 8011280:	692b      	ldr	r3, [r5, #16]
 8011282:	b99b      	cbnz	r3, 80112ac <_vfiprintf_r+0x5c>
 8011284:	4629      	mov	r1, r5
 8011286:	4630      	mov	r0, r6
 8011288:	f000 fb8a 	bl	80119a0 <__swsetup_r>
 801128c:	b170      	cbz	r0, 80112ac <_vfiprintf_r+0x5c>
 801128e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011290:	07dc      	lsls	r4, r3, #31
 8011292:	d504      	bpl.n	801129e <_vfiprintf_r+0x4e>
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	b01d      	add	sp, #116	; 0x74
 801129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129e:	89ab      	ldrh	r3, [r5, #12]
 80112a0:	0598      	lsls	r0, r3, #22
 80112a2:	d4f7      	bmi.n	8011294 <_vfiprintf_r+0x44>
 80112a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112a6:	f7ff fe7b 	bl	8010fa0 <__retarget_lock_release_recursive>
 80112aa:	e7f3      	b.n	8011294 <_vfiprintf_r+0x44>
 80112ac:	2300      	movs	r3, #0
 80112ae:	9309      	str	r3, [sp, #36]	; 0x24
 80112b0:	2320      	movs	r3, #32
 80112b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ba:	2330      	movs	r3, #48	; 0x30
 80112bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011470 <_vfiprintf_r+0x220>
 80112c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112c4:	f04f 0901 	mov.w	r9, #1
 80112c8:	4623      	mov	r3, r4
 80112ca:	469a      	mov	sl, r3
 80112cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112d0:	b10a      	cbz	r2, 80112d6 <_vfiprintf_r+0x86>
 80112d2:	2a25      	cmp	r2, #37	; 0x25
 80112d4:	d1f9      	bne.n	80112ca <_vfiprintf_r+0x7a>
 80112d6:	ebba 0b04 	subs.w	fp, sl, r4
 80112da:	d00b      	beq.n	80112f4 <_vfiprintf_r+0xa4>
 80112dc:	465b      	mov	r3, fp
 80112de:	4622      	mov	r2, r4
 80112e0:	4629      	mov	r1, r5
 80112e2:	4630      	mov	r0, r6
 80112e4:	f7ff ffa1 	bl	801122a <__sfputs_r>
 80112e8:	3001      	adds	r0, #1
 80112ea:	f000 80a9 	beq.w	8011440 <_vfiprintf_r+0x1f0>
 80112ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112f0:	445a      	add	r2, fp
 80112f2:	9209      	str	r2, [sp, #36]	; 0x24
 80112f4:	f89a 3000 	ldrb.w	r3, [sl]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 80a1 	beq.w	8011440 <_vfiprintf_r+0x1f0>
 80112fe:	2300      	movs	r3, #0
 8011300:	f04f 32ff 	mov.w	r2, #4294967295
 8011304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011308:	f10a 0a01 	add.w	sl, sl, #1
 801130c:	9304      	str	r3, [sp, #16]
 801130e:	9307      	str	r3, [sp, #28]
 8011310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011314:	931a      	str	r3, [sp, #104]	; 0x68
 8011316:	4654      	mov	r4, sl
 8011318:	2205      	movs	r2, #5
 801131a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801131e:	4854      	ldr	r0, [pc, #336]	; (8011470 <_vfiprintf_r+0x220>)
 8011320:	f7ee ffa6 	bl	8000270 <memchr>
 8011324:	9a04      	ldr	r2, [sp, #16]
 8011326:	b9d8      	cbnz	r0, 8011360 <_vfiprintf_r+0x110>
 8011328:	06d1      	lsls	r1, r2, #27
 801132a:	bf44      	itt	mi
 801132c:	2320      	movmi	r3, #32
 801132e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011332:	0713      	lsls	r3, r2, #28
 8011334:	bf44      	itt	mi
 8011336:	232b      	movmi	r3, #43	; 0x2b
 8011338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801133c:	f89a 3000 	ldrb.w	r3, [sl]
 8011340:	2b2a      	cmp	r3, #42	; 0x2a
 8011342:	d015      	beq.n	8011370 <_vfiprintf_r+0x120>
 8011344:	9a07      	ldr	r2, [sp, #28]
 8011346:	4654      	mov	r4, sl
 8011348:	2000      	movs	r0, #0
 801134a:	f04f 0c0a 	mov.w	ip, #10
 801134e:	4621      	mov	r1, r4
 8011350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011354:	3b30      	subs	r3, #48	; 0x30
 8011356:	2b09      	cmp	r3, #9
 8011358:	d94d      	bls.n	80113f6 <_vfiprintf_r+0x1a6>
 801135a:	b1b0      	cbz	r0, 801138a <_vfiprintf_r+0x13a>
 801135c:	9207      	str	r2, [sp, #28]
 801135e:	e014      	b.n	801138a <_vfiprintf_r+0x13a>
 8011360:	eba0 0308 	sub.w	r3, r0, r8
 8011364:	fa09 f303 	lsl.w	r3, r9, r3
 8011368:	4313      	orrs	r3, r2
 801136a:	9304      	str	r3, [sp, #16]
 801136c:	46a2      	mov	sl, r4
 801136e:	e7d2      	b.n	8011316 <_vfiprintf_r+0xc6>
 8011370:	9b03      	ldr	r3, [sp, #12]
 8011372:	1d19      	adds	r1, r3, #4
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	9103      	str	r1, [sp, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	bfbb      	ittet	lt
 801137c:	425b      	neglt	r3, r3
 801137e:	f042 0202 	orrlt.w	r2, r2, #2
 8011382:	9307      	strge	r3, [sp, #28]
 8011384:	9307      	strlt	r3, [sp, #28]
 8011386:	bfb8      	it	lt
 8011388:	9204      	strlt	r2, [sp, #16]
 801138a:	7823      	ldrb	r3, [r4, #0]
 801138c:	2b2e      	cmp	r3, #46	; 0x2e
 801138e:	d10c      	bne.n	80113aa <_vfiprintf_r+0x15a>
 8011390:	7863      	ldrb	r3, [r4, #1]
 8011392:	2b2a      	cmp	r3, #42	; 0x2a
 8011394:	d134      	bne.n	8011400 <_vfiprintf_r+0x1b0>
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	1d1a      	adds	r2, r3, #4
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	9203      	str	r2, [sp, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	bfb8      	it	lt
 80113a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80113a6:	3402      	adds	r4, #2
 80113a8:	9305      	str	r3, [sp, #20]
 80113aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011480 <_vfiprintf_r+0x230>
 80113ae:	7821      	ldrb	r1, [r4, #0]
 80113b0:	2203      	movs	r2, #3
 80113b2:	4650      	mov	r0, sl
 80113b4:	f7ee ff5c 	bl	8000270 <memchr>
 80113b8:	b138      	cbz	r0, 80113ca <_vfiprintf_r+0x17a>
 80113ba:	9b04      	ldr	r3, [sp, #16]
 80113bc:	eba0 000a 	sub.w	r0, r0, sl
 80113c0:	2240      	movs	r2, #64	; 0x40
 80113c2:	4082      	lsls	r2, r0
 80113c4:	4313      	orrs	r3, r2
 80113c6:	3401      	adds	r4, #1
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ce:	4829      	ldr	r0, [pc, #164]	; (8011474 <_vfiprintf_r+0x224>)
 80113d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113d4:	2206      	movs	r2, #6
 80113d6:	f7ee ff4b 	bl	8000270 <memchr>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d03f      	beq.n	801145e <_vfiprintf_r+0x20e>
 80113de:	4b26      	ldr	r3, [pc, #152]	; (8011478 <_vfiprintf_r+0x228>)
 80113e0:	bb1b      	cbnz	r3, 801142a <_vfiprintf_r+0x1da>
 80113e2:	9b03      	ldr	r3, [sp, #12]
 80113e4:	3307      	adds	r3, #7
 80113e6:	f023 0307 	bic.w	r3, r3, #7
 80113ea:	3308      	adds	r3, #8
 80113ec:	9303      	str	r3, [sp, #12]
 80113ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f0:	443b      	add	r3, r7
 80113f2:	9309      	str	r3, [sp, #36]	; 0x24
 80113f4:	e768      	b.n	80112c8 <_vfiprintf_r+0x78>
 80113f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80113fa:	460c      	mov	r4, r1
 80113fc:	2001      	movs	r0, #1
 80113fe:	e7a6      	b.n	801134e <_vfiprintf_r+0xfe>
 8011400:	2300      	movs	r3, #0
 8011402:	3401      	adds	r4, #1
 8011404:	9305      	str	r3, [sp, #20]
 8011406:	4619      	mov	r1, r3
 8011408:	f04f 0c0a 	mov.w	ip, #10
 801140c:	4620      	mov	r0, r4
 801140e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011412:	3a30      	subs	r2, #48	; 0x30
 8011414:	2a09      	cmp	r2, #9
 8011416:	d903      	bls.n	8011420 <_vfiprintf_r+0x1d0>
 8011418:	2b00      	cmp	r3, #0
 801141a:	d0c6      	beq.n	80113aa <_vfiprintf_r+0x15a>
 801141c:	9105      	str	r1, [sp, #20]
 801141e:	e7c4      	b.n	80113aa <_vfiprintf_r+0x15a>
 8011420:	fb0c 2101 	mla	r1, ip, r1, r2
 8011424:	4604      	mov	r4, r0
 8011426:	2301      	movs	r3, #1
 8011428:	e7f0      	b.n	801140c <_vfiprintf_r+0x1bc>
 801142a:	ab03      	add	r3, sp, #12
 801142c:	9300      	str	r3, [sp, #0]
 801142e:	462a      	mov	r2, r5
 8011430:	4b12      	ldr	r3, [pc, #72]	; (801147c <_vfiprintf_r+0x22c>)
 8011432:	a904      	add	r1, sp, #16
 8011434:	4630      	mov	r0, r6
 8011436:	f3af 8000 	nop.w
 801143a:	4607      	mov	r7, r0
 801143c:	1c78      	adds	r0, r7, #1
 801143e:	d1d6      	bne.n	80113ee <_vfiprintf_r+0x19e>
 8011440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011442:	07d9      	lsls	r1, r3, #31
 8011444:	d405      	bmi.n	8011452 <_vfiprintf_r+0x202>
 8011446:	89ab      	ldrh	r3, [r5, #12]
 8011448:	059a      	lsls	r2, r3, #22
 801144a:	d402      	bmi.n	8011452 <_vfiprintf_r+0x202>
 801144c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801144e:	f7ff fda7 	bl	8010fa0 <__retarget_lock_release_recursive>
 8011452:	89ab      	ldrh	r3, [r5, #12]
 8011454:	065b      	lsls	r3, r3, #25
 8011456:	f53f af1d 	bmi.w	8011294 <_vfiprintf_r+0x44>
 801145a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801145c:	e71c      	b.n	8011298 <_vfiprintf_r+0x48>
 801145e:	ab03      	add	r3, sp, #12
 8011460:	9300      	str	r3, [sp, #0]
 8011462:	462a      	mov	r2, r5
 8011464:	4b05      	ldr	r3, [pc, #20]	; (801147c <_vfiprintf_r+0x22c>)
 8011466:	a904      	add	r1, sp, #16
 8011468:	4630      	mov	r0, r6
 801146a:	f000 f879 	bl	8011560 <_printf_i>
 801146e:	e7e4      	b.n	801143a <_vfiprintf_r+0x1ea>
 8011470:	08015795 	.word	0x08015795
 8011474:	0801579f 	.word	0x0801579f
 8011478:	00000000 	.word	0x00000000
 801147c:	0801122b 	.word	0x0801122b
 8011480:	0801579b 	.word	0x0801579b

08011484 <_printf_common>:
 8011484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011488:	4616      	mov	r6, r2
 801148a:	4699      	mov	r9, r3
 801148c:	688a      	ldr	r2, [r1, #8]
 801148e:	690b      	ldr	r3, [r1, #16]
 8011490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011494:	4293      	cmp	r3, r2
 8011496:	bfb8      	it	lt
 8011498:	4613      	movlt	r3, r2
 801149a:	6033      	str	r3, [r6, #0]
 801149c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114a0:	4607      	mov	r7, r0
 80114a2:	460c      	mov	r4, r1
 80114a4:	b10a      	cbz	r2, 80114aa <_printf_common+0x26>
 80114a6:	3301      	adds	r3, #1
 80114a8:	6033      	str	r3, [r6, #0]
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	0699      	lsls	r1, r3, #26
 80114ae:	bf42      	ittt	mi
 80114b0:	6833      	ldrmi	r3, [r6, #0]
 80114b2:	3302      	addmi	r3, #2
 80114b4:	6033      	strmi	r3, [r6, #0]
 80114b6:	6825      	ldr	r5, [r4, #0]
 80114b8:	f015 0506 	ands.w	r5, r5, #6
 80114bc:	d106      	bne.n	80114cc <_printf_common+0x48>
 80114be:	f104 0a19 	add.w	sl, r4, #25
 80114c2:	68e3      	ldr	r3, [r4, #12]
 80114c4:	6832      	ldr	r2, [r6, #0]
 80114c6:	1a9b      	subs	r3, r3, r2
 80114c8:	42ab      	cmp	r3, r5
 80114ca:	dc26      	bgt.n	801151a <_printf_common+0x96>
 80114cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80114d0:	1e13      	subs	r3, r2, #0
 80114d2:	6822      	ldr	r2, [r4, #0]
 80114d4:	bf18      	it	ne
 80114d6:	2301      	movne	r3, #1
 80114d8:	0692      	lsls	r2, r2, #26
 80114da:	d42b      	bmi.n	8011534 <_printf_common+0xb0>
 80114dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114e0:	4649      	mov	r1, r9
 80114e2:	4638      	mov	r0, r7
 80114e4:	47c0      	blx	r8
 80114e6:	3001      	adds	r0, #1
 80114e8:	d01e      	beq.n	8011528 <_printf_common+0xa4>
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	6922      	ldr	r2, [r4, #16]
 80114ee:	f003 0306 	and.w	r3, r3, #6
 80114f2:	2b04      	cmp	r3, #4
 80114f4:	bf02      	ittt	eq
 80114f6:	68e5      	ldreq	r5, [r4, #12]
 80114f8:	6833      	ldreq	r3, [r6, #0]
 80114fa:	1aed      	subeq	r5, r5, r3
 80114fc:	68a3      	ldr	r3, [r4, #8]
 80114fe:	bf0c      	ite	eq
 8011500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011504:	2500      	movne	r5, #0
 8011506:	4293      	cmp	r3, r2
 8011508:	bfc4      	itt	gt
 801150a:	1a9b      	subgt	r3, r3, r2
 801150c:	18ed      	addgt	r5, r5, r3
 801150e:	2600      	movs	r6, #0
 8011510:	341a      	adds	r4, #26
 8011512:	42b5      	cmp	r5, r6
 8011514:	d11a      	bne.n	801154c <_printf_common+0xc8>
 8011516:	2000      	movs	r0, #0
 8011518:	e008      	b.n	801152c <_printf_common+0xa8>
 801151a:	2301      	movs	r3, #1
 801151c:	4652      	mov	r2, sl
 801151e:	4649      	mov	r1, r9
 8011520:	4638      	mov	r0, r7
 8011522:	47c0      	blx	r8
 8011524:	3001      	adds	r0, #1
 8011526:	d103      	bne.n	8011530 <_printf_common+0xac>
 8011528:	f04f 30ff 	mov.w	r0, #4294967295
 801152c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011530:	3501      	adds	r5, #1
 8011532:	e7c6      	b.n	80114c2 <_printf_common+0x3e>
 8011534:	18e1      	adds	r1, r4, r3
 8011536:	1c5a      	adds	r2, r3, #1
 8011538:	2030      	movs	r0, #48	; 0x30
 801153a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801153e:	4422      	add	r2, r4
 8011540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011548:	3302      	adds	r3, #2
 801154a:	e7c7      	b.n	80114dc <_printf_common+0x58>
 801154c:	2301      	movs	r3, #1
 801154e:	4622      	mov	r2, r4
 8011550:	4649      	mov	r1, r9
 8011552:	4638      	mov	r0, r7
 8011554:	47c0      	blx	r8
 8011556:	3001      	adds	r0, #1
 8011558:	d0e6      	beq.n	8011528 <_printf_common+0xa4>
 801155a:	3601      	adds	r6, #1
 801155c:	e7d9      	b.n	8011512 <_printf_common+0x8e>
	...

08011560 <_printf_i>:
 8011560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011564:	7e0f      	ldrb	r7, [r1, #24]
 8011566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011568:	2f78      	cmp	r7, #120	; 0x78
 801156a:	4691      	mov	r9, r2
 801156c:	4680      	mov	r8, r0
 801156e:	460c      	mov	r4, r1
 8011570:	469a      	mov	sl, r3
 8011572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011576:	d807      	bhi.n	8011588 <_printf_i+0x28>
 8011578:	2f62      	cmp	r7, #98	; 0x62
 801157a:	d80a      	bhi.n	8011592 <_printf_i+0x32>
 801157c:	2f00      	cmp	r7, #0
 801157e:	f000 80d4 	beq.w	801172a <_printf_i+0x1ca>
 8011582:	2f58      	cmp	r7, #88	; 0x58
 8011584:	f000 80c0 	beq.w	8011708 <_printf_i+0x1a8>
 8011588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801158c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011590:	e03a      	b.n	8011608 <_printf_i+0xa8>
 8011592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011596:	2b15      	cmp	r3, #21
 8011598:	d8f6      	bhi.n	8011588 <_printf_i+0x28>
 801159a:	a101      	add	r1, pc, #4	; (adr r1, 80115a0 <_printf_i+0x40>)
 801159c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115a0:	080115f9 	.word	0x080115f9
 80115a4:	0801160d 	.word	0x0801160d
 80115a8:	08011589 	.word	0x08011589
 80115ac:	08011589 	.word	0x08011589
 80115b0:	08011589 	.word	0x08011589
 80115b4:	08011589 	.word	0x08011589
 80115b8:	0801160d 	.word	0x0801160d
 80115bc:	08011589 	.word	0x08011589
 80115c0:	08011589 	.word	0x08011589
 80115c4:	08011589 	.word	0x08011589
 80115c8:	08011589 	.word	0x08011589
 80115cc:	08011711 	.word	0x08011711
 80115d0:	08011639 	.word	0x08011639
 80115d4:	080116cb 	.word	0x080116cb
 80115d8:	08011589 	.word	0x08011589
 80115dc:	08011589 	.word	0x08011589
 80115e0:	08011733 	.word	0x08011733
 80115e4:	08011589 	.word	0x08011589
 80115e8:	08011639 	.word	0x08011639
 80115ec:	08011589 	.word	0x08011589
 80115f0:	08011589 	.word	0x08011589
 80115f4:	080116d3 	.word	0x080116d3
 80115f8:	682b      	ldr	r3, [r5, #0]
 80115fa:	1d1a      	adds	r2, r3, #4
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	602a      	str	r2, [r5, #0]
 8011600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011608:	2301      	movs	r3, #1
 801160a:	e09f      	b.n	801174c <_printf_i+0x1ec>
 801160c:	6820      	ldr	r0, [r4, #0]
 801160e:	682b      	ldr	r3, [r5, #0]
 8011610:	0607      	lsls	r7, r0, #24
 8011612:	f103 0104 	add.w	r1, r3, #4
 8011616:	6029      	str	r1, [r5, #0]
 8011618:	d501      	bpl.n	801161e <_printf_i+0xbe>
 801161a:	681e      	ldr	r6, [r3, #0]
 801161c:	e003      	b.n	8011626 <_printf_i+0xc6>
 801161e:	0646      	lsls	r6, r0, #25
 8011620:	d5fb      	bpl.n	801161a <_printf_i+0xba>
 8011622:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011626:	2e00      	cmp	r6, #0
 8011628:	da03      	bge.n	8011632 <_printf_i+0xd2>
 801162a:	232d      	movs	r3, #45	; 0x2d
 801162c:	4276      	negs	r6, r6
 801162e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011632:	485a      	ldr	r0, [pc, #360]	; (801179c <_printf_i+0x23c>)
 8011634:	230a      	movs	r3, #10
 8011636:	e012      	b.n	801165e <_printf_i+0xfe>
 8011638:	682b      	ldr	r3, [r5, #0]
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	1d19      	adds	r1, r3, #4
 801163e:	6029      	str	r1, [r5, #0]
 8011640:	0605      	lsls	r5, r0, #24
 8011642:	d501      	bpl.n	8011648 <_printf_i+0xe8>
 8011644:	681e      	ldr	r6, [r3, #0]
 8011646:	e002      	b.n	801164e <_printf_i+0xee>
 8011648:	0641      	lsls	r1, r0, #25
 801164a:	d5fb      	bpl.n	8011644 <_printf_i+0xe4>
 801164c:	881e      	ldrh	r6, [r3, #0]
 801164e:	4853      	ldr	r0, [pc, #332]	; (801179c <_printf_i+0x23c>)
 8011650:	2f6f      	cmp	r7, #111	; 0x6f
 8011652:	bf0c      	ite	eq
 8011654:	2308      	moveq	r3, #8
 8011656:	230a      	movne	r3, #10
 8011658:	2100      	movs	r1, #0
 801165a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801165e:	6865      	ldr	r5, [r4, #4]
 8011660:	60a5      	str	r5, [r4, #8]
 8011662:	2d00      	cmp	r5, #0
 8011664:	bfa2      	ittt	ge
 8011666:	6821      	ldrge	r1, [r4, #0]
 8011668:	f021 0104 	bicge.w	r1, r1, #4
 801166c:	6021      	strge	r1, [r4, #0]
 801166e:	b90e      	cbnz	r6, 8011674 <_printf_i+0x114>
 8011670:	2d00      	cmp	r5, #0
 8011672:	d04b      	beq.n	801170c <_printf_i+0x1ac>
 8011674:	4615      	mov	r5, r2
 8011676:	fbb6 f1f3 	udiv	r1, r6, r3
 801167a:	fb03 6711 	mls	r7, r3, r1, r6
 801167e:	5dc7      	ldrb	r7, [r0, r7]
 8011680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011684:	4637      	mov	r7, r6
 8011686:	42bb      	cmp	r3, r7
 8011688:	460e      	mov	r6, r1
 801168a:	d9f4      	bls.n	8011676 <_printf_i+0x116>
 801168c:	2b08      	cmp	r3, #8
 801168e:	d10b      	bne.n	80116a8 <_printf_i+0x148>
 8011690:	6823      	ldr	r3, [r4, #0]
 8011692:	07de      	lsls	r6, r3, #31
 8011694:	d508      	bpl.n	80116a8 <_printf_i+0x148>
 8011696:	6923      	ldr	r3, [r4, #16]
 8011698:	6861      	ldr	r1, [r4, #4]
 801169a:	4299      	cmp	r1, r3
 801169c:	bfde      	ittt	le
 801169e:	2330      	movle	r3, #48	; 0x30
 80116a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116a8:	1b52      	subs	r2, r2, r5
 80116aa:	6122      	str	r2, [r4, #16]
 80116ac:	f8cd a000 	str.w	sl, [sp]
 80116b0:	464b      	mov	r3, r9
 80116b2:	aa03      	add	r2, sp, #12
 80116b4:	4621      	mov	r1, r4
 80116b6:	4640      	mov	r0, r8
 80116b8:	f7ff fee4 	bl	8011484 <_printf_common>
 80116bc:	3001      	adds	r0, #1
 80116be:	d14a      	bne.n	8011756 <_printf_i+0x1f6>
 80116c0:	f04f 30ff 	mov.w	r0, #4294967295
 80116c4:	b004      	add	sp, #16
 80116c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	f043 0320 	orr.w	r3, r3, #32
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	4833      	ldr	r0, [pc, #204]	; (80117a0 <_printf_i+0x240>)
 80116d4:	2778      	movs	r7, #120	; 0x78
 80116d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80116da:	6823      	ldr	r3, [r4, #0]
 80116dc:	6829      	ldr	r1, [r5, #0]
 80116de:	061f      	lsls	r7, r3, #24
 80116e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80116e4:	d402      	bmi.n	80116ec <_printf_i+0x18c>
 80116e6:	065f      	lsls	r7, r3, #25
 80116e8:	bf48      	it	mi
 80116ea:	b2b6      	uxthmi	r6, r6
 80116ec:	07df      	lsls	r7, r3, #31
 80116ee:	bf48      	it	mi
 80116f0:	f043 0320 	orrmi.w	r3, r3, #32
 80116f4:	6029      	str	r1, [r5, #0]
 80116f6:	bf48      	it	mi
 80116f8:	6023      	strmi	r3, [r4, #0]
 80116fa:	b91e      	cbnz	r6, 8011704 <_printf_i+0x1a4>
 80116fc:	6823      	ldr	r3, [r4, #0]
 80116fe:	f023 0320 	bic.w	r3, r3, #32
 8011702:	6023      	str	r3, [r4, #0]
 8011704:	2310      	movs	r3, #16
 8011706:	e7a7      	b.n	8011658 <_printf_i+0xf8>
 8011708:	4824      	ldr	r0, [pc, #144]	; (801179c <_printf_i+0x23c>)
 801170a:	e7e4      	b.n	80116d6 <_printf_i+0x176>
 801170c:	4615      	mov	r5, r2
 801170e:	e7bd      	b.n	801168c <_printf_i+0x12c>
 8011710:	682b      	ldr	r3, [r5, #0]
 8011712:	6826      	ldr	r6, [r4, #0]
 8011714:	6961      	ldr	r1, [r4, #20]
 8011716:	1d18      	adds	r0, r3, #4
 8011718:	6028      	str	r0, [r5, #0]
 801171a:	0635      	lsls	r5, r6, #24
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	d501      	bpl.n	8011724 <_printf_i+0x1c4>
 8011720:	6019      	str	r1, [r3, #0]
 8011722:	e002      	b.n	801172a <_printf_i+0x1ca>
 8011724:	0670      	lsls	r0, r6, #25
 8011726:	d5fb      	bpl.n	8011720 <_printf_i+0x1c0>
 8011728:	8019      	strh	r1, [r3, #0]
 801172a:	2300      	movs	r3, #0
 801172c:	6123      	str	r3, [r4, #16]
 801172e:	4615      	mov	r5, r2
 8011730:	e7bc      	b.n	80116ac <_printf_i+0x14c>
 8011732:	682b      	ldr	r3, [r5, #0]
 8011734:	1d1a      	adds	r2, r3, #4
 8011736:	602a      	str	r2, [r5, #0]
 8011738:	681d      	ldr	r5, [r3, #0]
 801173a:	6862      	ldr	r2, [r4, #4]
 801173c:	2100      	movs	r1, #0
 801173e:	4628      	mov	r0, r5
 8011740:	f7ee fd96 	bl	8000270 <memchr>
 8011744:	b108      	cbz	r0, 801174a <_printf_i+0x1ea>
 8011746:	1b40      	subs	r0, r0, r5
 8011748:	6060      	str	r0, [r4, #4]
 801174a:	6863      	ldr	r3, [r4, #4]
 801174c:	6123      	str	r3, [r4, #16]
 801174e:	2300      	movs	r3, #0
 8011750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011754:	e7aa      	b.n	80116ac <_printf_i+0x14c>
 8011756:	6923      	ldr	r3, [r4, #16]
 8011758:	462a      	mov	r2, r5
 801175a:	4649      	mov	r1, r9
 801175c:	4640      	mov	r0, r8
 801175e:	47d0      	blx	sl
 8011760:	3001      	adds	r0, #1
 8011762:	d0ad      	beq.n	80116c0 <_printf_i+0x160>
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	079b      	lsls	r3, r3, #30
 8011768:	d413      	bmi.n	8011792 <_printf_i+0x232>
 801176a:	68e0      	ldr	r0, [r4, #12]
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	4298      	cmp	r0, r3
 8011770:	bfb8      	it	lt
 8011772:	4618      	movlt	r0, r3
 8011774:	e7a6      	b.n	80116c4 <_printf_i+0x164>
 8011776:	2301      	movs	r3, #1
 8011778:	4632      	mov	r2, r6
 801177a:	4649      	mov	r1, r9
 801177c:	4640      	mov	r0, r8
 801177e:	47d0      	blx	sl
 8011780:	3001      	adds	r0, #1
 8011782:	d09d      	beq.n	80116c0 <_printf_i+0x160>
 8011784:	3501      	adds	r5, #1
 8011786:	68e3      	ldr	r3, [r4, #12]
 8011788:	9903      	ldr	r1, [sp, #12]
 801178a:	1a5b      	subs	r3, r3, r1
 801178c:	42ab      	cmp	r3, r5
 801178e:	dcf2      	bgt.n	8011776 <_printf_i+0x216>
 8011790:	e7eb      	b.n	801176a <_printf_i+0x20a>
 8011792:	2500      	movs	r5, #0
 8011794:	f104 0619 	add.w	r6, r4, #25
 8011798:	e7f5      	b.n	8011786 <_printf_i+0x226>
 801179a:	bf00      	nop
 801179c:	080157a6 	.word	0x080157a6
 80117a0:	080157b7 	.word	0x080157b7

080117a4 <__sflush_r>:
 80117a4:	898a      	ldrh	r2, [r1, #12]
 80117a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117aa:	4605      	mov	r5, r0
 80117ac:	0710      	lsls	r0, r2, #28
 80117ae:	460c      	mov	r4, r1
 80117b0:	d458      	bmi.n	8011864 <__sflush_r+0xc0>
 80117b2:	684b      	ldr	r3, [r1, #4]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dc05      	bgt.n	80117c4 <__sflush_r+0x20>
 80117b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	dc02      	bgt.n	80117c4 <__sflush_r+0x20>
 80117be:	2000      	movs	r0, #0
 80117c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117c6:	2e00      	cmp	r6, #0
 80117c8:	d0f9      	beq.n	80117be <__sflush_r+0x1a>
 80117ca:	2300      	movs	r3, #0
 80117cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117d0:	682f      	ldr	r7, [r5, #0]
 80117d2:	6a21      	ldr	r1, [r4, #32]
 80117d4:	602b      	str	r3, [r5, #0]
 80117d6:	d032      	beq.n	801183e <__sflush_r+0x9a>
 80117d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	075a      	lsls	r2, r3, #29
 80117de:	d505      	bpl.n	80117ec <__sflush_r+0x48>
 80117e0:	6863      	ldr	r3, [r4, #4]
 80117e2:	1ac0      	subs	r0, r0, r3
 80117e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117e6:	b10b      	cbz	r3, 80117ec <__sflush_r+0x48>
 80117e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117ea:	1ac0      	subs	r0, r0, r3
 80117ec:	2300      	movs	r3, #0
 80117ee:	4602      	mov	r2, r0
 80117f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117f2:	6a21      	ldr	r1, [r4, #32]
 80117f4:	4628      	mov	r0, r5
 80117f6:	47b0      	blx	r6
 80117f8:	1c43      	adds	r3, r0, #1
 80117fa:	89a3      	ldrh	r3, [r4, #12]
 80117fc:	d106      	bne.n	801180c <__sflush_r+0x68>
 80117fe:	6829      	ldr	r1, [r5, #0]
 8011800:	291d      	cmp	r1, #29
 8011802:	d82b      	bhi.n	801185c <__sflush_r+0xb8>
 8011804:	4a29      	ldr	r2, [pc, #164]	; (80118ac <__sflush_r+0x108>)
 8011806:	410a      	asrs	r2, r1
 8011808:	07d6      	lsls	r6, r2, #31
 801180a:	d427      	bmi.n	801185c <__sflush_r+0xb8>
 801180c:	2200      	movs	r2, #0
 801180e:	6062      	str	r2, [r4, #4]
 8011810:	04d9      	lsls	r1, r3, #19
 8011812:	6922      	ldr	r2, [r4, #16]
 8011814:	6022      	str	r2, [r4, #0]
 8011816:	d504      	bpl.n	8011822 <__sflush_r+0x7e>
 8011818:	1c42      	adds	r2, r0, #1
 801181a:	d101      	bne.n	8011820 <__sflush_r+0x7c>
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	b903      	cbnz	r3, 8011822 <__sflush_r+0x7e>
 8011820:	6560      	str	r0, [r4, #84]	; 0x54
 8011822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011824:	602f      	str	r7, [r5, #0]
 8011826:	2900      	cmp	r1, #0
 8011828:	d0c9      	beq.n	80117be <__sflush_r+0x1a>
 801182a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801182e:	4299      	cmp	r1, r3
 8011830:	d002      	beq.n	8011838 <__sflush_r+0x94>
 8011832:	4628      	mov	r0, r5
 8011834:	f7ff fbe2 	bl	8010ffc <_free_r>
 8011838:	2000      	movs	r0, #0
 801183a:	6360      	str	r0, [r4, #52]	; 0x34
 801183c:	e7c0      	b.n	80117c0 <__sflush_r+0x1c>
 801183e:	2301      	movs	r3, #1
 8011840:	4628      	mov	r0, r5
 8011842:	47b0      	blx	r6
 8011844:	1c41      	adds	r1, r0, #1
 8011846:	d1c8      	bne.n	80117da <__sflush_r+0x36>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d0c5      	beq.n	80117da <__sflush_r+0x36>
 801184e:	2b1d      	cmp	r3, #29
 8011850:	d001      	beq.n	8011856 <__sflush_r+0xb2>
 8011852:	2b16      	cmp	r3, #22
 8011854:	d101      	bne.n	801185a <__sflush_r+0xb6>
 8011856:	602f      	str	r7, [r5, #0]
 8011858:	e7b1      	b.n	80117be <__sflush_r+0x1a>
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011860:	81a3      	strh	r3, [r4, #12]
 8011862:	e7ad      	b.n	80117c0 <__sflush_r+0x1c>
 8011864:	690f      	ldr	r7, [r1, #16]
 8011866:	2f00      	cmp	r7, #0
 8011868:	d0a9      	beq.n	80117be <__sflush_r+0x1a>
 801186a:	0793      	lsls	r3, r2, #30
 801186c:	680e      	ldr	r6, [r1, #0]
 801186e:	bf08      	it	eq
 8011870:	694b      	ldreq	r3, [r1, #20]
 8011872:	600f      	str	r7, [r1, #0]
 8011874:	bf18      	it	ne
 8011876:	2300      	movne	r3, #0
 8011878:	eba6 0807 	sub.w	r8, r6, r7
 801187c:	608b      	str	r3, [r1, #8]
 801187e:	f1b8 0f00 	cmp.w	r8, #0
 8011882:	dd9c      	ble.n	80117be <__sflush_r+0x1a>
 8011884:	6a21      	ldr	r1, [r4, #32]
 8011886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011888:	4643      	mov	r3, r8
 801188a:	463a      	mov	r2, r7
 801188c:	4628      	mov	r0, r5
 801188e:	47b0      	blx	r6
 8011890:	2800      	cmp	r0, #0
 8011892:	dc06      	bgt.n	80118a2 <__sflush_r+0xfe>
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801189a:	81a3      	strh	r3, [r4, #12]
 801189c:	f04f 30ff 	mov.w	r0, #4294967295
 80118a0:	e78e      	b.n	80117c0 <__sflush_r+0x1c>
 80118a2:	4407      	add	r7, r0
 80118a4:	eba8 0800 	sub.w	r8, r8, r0
 80118a8:	e7e9      	b.n	801187e <__sflush_r+0xda>
 80118aa:	bf00      	nop
 80118ac:	dfbffffe 	.word	0xdfbffffe

080118b0 <_fflush_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	690b      	ldr	r3, [r1, #16]
 80118b4:	4605      	mov	r5, r0
 80118b6:	460c      	mov	r4, r1
 80118b8:	b913      	cbnz	r3, 80118c0 <_fflush_r+0x10>
 80118ba:	2500      	movs	r5, #0
 80118bc:	4628      	mov	r0, r5
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	b118      	cbz	r0, 80118ca <_fflush_r+0x1a>
 80118c2:	6a03      	ldr	r3, [r0, #32]
 80118c4:	b90b      	cbnz	r3, 80118ca <_fflush_r+0x1a>
 80118c6:	f7ff fa3d 	bl	8010d44 <__sinit>
 80118ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d0f3      	beq.n	80118ba <_fflush_r+0xa>
 80118d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118d4:	07d0      	lsls	r0, r2, #31
 80118d6:	d404      	bmi.n	80118e2 <_fflush_r+0x32>
 80118d8:	0599      	lsls	r1, r3, #22
 80118da:	d402      	bmi.n	80118e2 <_fflush_r+0x32>
 80118dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118de:	f7ff fb5e 	bl	8010f9e <__retarget_lock_acquire_recursive>
 80118e2:	4628      	mov	r0, r5
 80118e4:	4621      	mov	r1, r4
 80118e6:	f7ff ff5d 	bl	80117a4 <__sflush_r>
 80118ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118ec:	07da      	lsls	r2, r3, #31
 80118ee:	4605      	mov	r5, r0
 80118f0:	d4e4      	bmi.n	80118bc <_fflush_r+0xc>
 80118f2:	89a3      	ldrh	r3, [r4, #12]
 80118f4:	059b      	lsls	r3, r3, #22
 80118f6:	d4e1      	bmi.n	80118bc <_fflush_r+0xc>
 80118f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118fa:	f7ff fb51 	bl	8010fa0 <__retarget_lock_release_recursive>
 80118fe:	e7dd      	b.n	80118bc <_fflush_r+0xc>

08011900 <fiprintf>:
 8011900:	b40e      	push	{r1, r2, r3}
 8011902:	b503      	push	{r0, r1, lr}
 8011904:	4601      	mov	r1, r0
 8011906:	ab03      	add	r3, sp, #12
 8011908:	4805      	ldr	r0, [pc, #20]	; (8011920 <fiprintf+0x20>)
 801190a:	f853 2b04 	ldr.w	r2, [r3], #4
 801190e:	6800      	ldr	r0, [r0, #0]
 8011910:	9301      	str	r3, [sp, #4]
 8011912:	f7ff fc9d 	bl	8011250 <_vfiprintf_r>
 8011916:	b002      	add	sp, #8
 8011918:	f85d eb04 	ldr.w	lr, [sp], #4
 801191c:	b003      	add	sp, #12
 801191e:	4770      	bx	lr
 8011920:	20000084 	.word	0x20000084

08011924 <__swbuf_r>:
 8011924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011926:	460e      	mov	r6, r1
 8011928:	4614      	mov	r4, r2
 801192a:	4605      	mov	r5, r0
 801192c:	b118      	cbz	r0, 8011936 <__swbuf_r+0x12>
 801192e:	6a03      	ldr	r3, [r0, #32]
 8011930:	b90b      	cbnz	r3, 8011936 <__swbuf_r+0x12>
 8011932:	f7ff fa07 	bl	8010d44 <__sinit>
 8011936:	69a3      	ldr	r3, [r4, #24]
 8011938:	60a3      	str	r3, [r4, #8]
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	071a      	lsls	r2, r3, #28
 801193e:	d525      	bpl.n	801198c <__swbuf_r+0x68>
 8011940:	6923      	ldr	r3, [r4, #16]
 8011942:	b31b      	cbz	r3, 801198c <__swbuf_r+0x68>
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	6922      	ldr	r2, [r4, #16]
 8011948:	1a98      	subs	r0, r3, r2
 801194a:	6963      	ldr	r3, [r4, #20]
 801194c:	b2f6      	uxtb	r6, r6
 801194e:	4283      	cmp	r3, r0
 8011950:	4637      	mov	r7, r6
 8011952:	dc04      	bgt.n	801195e <__swbuf_r+0x3a>
 8011954:	4621      	mov	r1, r4
 8011956:	4628      	mov	r0, r5
 8011958:	f7ff ffaa 	bl	80118b0 <_fflush_r>
 801195c:	b9e0      	cbnz	r0, 8011998 <__swbuf_r+0x74>
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	3b01      	subs	r3, #1
 8011962:	60a3      	str	r3, [r4, #8]
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	1c5a      	adds	r2, r3, #1
 8011968:	6022      	str	r2, [r4, #0]
 801196a:	701e      	strb	r6, [r3, #0]
 801196c:	6962      	ldr	r2, [r4, #20]
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	429a      	cmp	r2, r3
 8011972:	d004      	beq.n	801197e <__swbuf_r+0x5a>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	07db      	lsls	r3, r3, #31
 8011978:	d506      	bpl.n	8011988 <__swbuf_r+0x64>
 801197a:	2e0a      	cmp	r6, #10
 801197c:	d104      	bne.n	8011988 <__swbuf_r+0x64>
 801197e:	4621      	mov	r1, r4
 8011980:	4628      	mov	r0, r5
 8011982:	f7ff ff95 	bl	80118b0 <_fflush_r>
 8011986:	b938      	cbnz	r0, 8011998 <__swbuf_r+0x74>
 8011988:	4638      	mov	r0, r7
 801198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801198c:	4621      	mov	r1, r4
 801198e:	4628      	mov	r0, r5
 8011990:	f000 f806 	bl	80119a0 <__swsetup_r>
 8011994:	2800      	cmp	r0, #0
 8011996:	d0d5      	beq.n	8011944 <__swbuf_r+0x20>
 8011998:	f04f 37ff 	mov.w	r7, #4294967295
 801199c:	e7f4      	b.n	8011988 <__swbuf_r+0x64>
	...

080119a0 <__swsetup_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4b2a      	ldr	r3, [pc, #168]	; (8011a4c <__swsetup_r+0xac>)
 80119a4:	4605      	mov	r5, r0
 80119a6:	6818      	ldr	r0, [r3, #0]
 80119a8:	460c      	mov	r4, r1
 80119aa:	b118      	cbz	r0, 80119b4 <__swsetup_r+0x14>
 80119ac:	6a03      	ldr	r3, [r0, #32]
 80119ae:	b90b      	cbnz	r3, 80119b4 <__swsetup_r+0x14>
 80119b0:	f7ff f9c8 	bl	8010d44 <__sinit>
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119ba:	0718      	lsls	r0, r3, #28
 80119bc:	d422      	bmi.n	8011a04 <__swsetup_r+0x64>
 80119be:	06d9      	lsls	r1, r3, #27
 80119c0:	d407      	bmi.n	80119d2 <__swsetup_r+0x32>
 80119c2:	2309      	movs	r3, #9
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119ca:	81a3      	strh	r3, [r4, #12]
 80119cc:	f04f 30ff 	mov.w	r0, #4294967295
 80119d0:	e034      	b.n	8011a3c <__swsetup_r+0x9c>
 80119d2:	0758      	lsls	r0, r3, #29
 80119d4:	d512      	bpl.n	80119fc <__swsetup_r+0x5c>
 80119d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119d8:	b141      	cbz	r1, 80119ec <__swsetup_r+0x4c>
 80119da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119de:	4299      	cmp	r1, r3
 80119e0:	d002      	beq.n	80119e8 <__swsetup_r+0x48>
 80119e2:	4628      	mov	r0, r5
 80119e4:	f7ff fb0a 	bl	8010ffc <_free_r>
 80119e8:	2300      	movs	r3, #0
 80119ea:	6363      	str	r3, [r4, #52]	; 0x34
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	2300      	movs	r3, #0
 80119f6:	6063      	str	r3, [r4, #4]
 80119f8:	6923      	ldr	r3, [r4, #16]
 80119fa:	6023      	str	r3, [r4, #0]
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	f043 0308 	orr.w	r3, r3, #8
 8011a02:	81a3      	strh	r3, [r4, #12]
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	b94b      	cbnz	r3, 8011a1c <__swsetup_r+0x7c>
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a12:	d003      	beq.n	8011a1c <__swsetup_r+0x7c>
 8011a14:	4621      	mov	r1, r4
 8011a16:	4628      	mov	r0, r5
 8011a18:	f000 f857 	bl	8011aca <__smakebuf_r>
 8011a1c:	89a0      	ldrh	r0, [r4, #12]
 8011a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a22:	f010 0301 	ands.w	r3, r0, #1
 8011a26:	d00a      	beq.n	8011a3e <__swsetup_r+0x9e>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	60a3      	str	r3, [r4, #8]
 8011a2c:	6963      	ldr	r3, [r4, #20]
 8011a2e:	425b      	negs	r3, r3
 8011a30:	61a3      	str	r3, [r4, #24]
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	b943      	cbnz	r3, 8011a48 <__swsetup_r+0xa8>
 8011a36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a3a:	d1c4      	bne.n	80119c6 <__swsetup_r+0x26>
 8011a3c:	bd38      	pop	{r3, r4, r5, pc}
 8011a3e:	0781      	lsls	r1, r0, #30
 8011a40:	bf58      	it	pl
 8011a42:	6963      	ldrpl	r3, [r4, #20]
 8011a44:	60a3      	str	r3, [r4, #8]
 8011a46:	e7f4      	b.n	8011a32 <__swsetup_r+0x92>
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e7f7      	b.n	8011a3c <__swsetup_r+0x9c>
 8011a4c:	20000084 	.word	0x20000084

08011a50 <_sbrk_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d06      	ldr	r5, [pc, #24]	; (8011a6c <_sbrk_r+0x1c>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	f7ef f91c 	bl	8000c98 <_sbrk>
 8011a60:	1c43      	adds	r3, r0, #1
 8011a62:	d102      	bne.n	8011a6a <_sbrk_r+0x1a>
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	b103      	cbz	r3, 8011a6a <_sbrk_r+0x1a>
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	bd38      	pop	{r3, r4, r5, pc}
 8011a6c:	20008ea8 	.word	0x20008ea8

08011a70 <abort>:
 8011a70:	b508      	push	{r3, lr}
 8011a72:	2006      	movs	r0, #6
 8011a74:	f000 f88e 	bl	8011b94 <raise>
 8011a78:	2001      	movs	r0, #1
 8011a7a:	f7ef f895 	bl	8000ba8 <_exit>

08011a7e <__swhatbuf_r>:
 8011a7e:	b570      	push	{r4, r5, r6, lr}
 8011a80:	460c      	mov	r4, r1
 8011a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a86:	2900      	cmp	r1, #0
 8011a88:	b096      	sub	sp, #88	; 0x58
 8011a8a:	4615      	mov	r5, r2
 8011a8c:	461e      	mov	r6, r3
 8011a8e:	da0d      	bge.n	8011aac <__swhatbuf_r+0x2e>
 8011a90:	89a3      	ldrh	r3, [r4, #12]
 8011a92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011a96:	f04f 0100 	mov.w	r1, #0
 8011a9a:	bf0c      	ite	eq
 8011a9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011aa0:	2340      	movne	r3, #64	; 0x40
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	6031      	str	r1, [r6, #0]
 8011aa6:	602b      	str	r3, [r5, #0]
 8011aa8:	b016      	add	sp, #88	; 0x58
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	466a      	mov	r2, sp
 8011aae:	f000 f879 	bl	8011ba4 <_fstat_r>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	dbec      	blt.n	8011a90 <__swhatbuf_r+0x12>
 8011ab6:	9901      	ldr	r1, [sp, #4]
 8011ab8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011abc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011ac0:	4259      	negs	r1, r3
 8011ac2:	4159      	adcs	r1, r3
 8011ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ac8:	e7eb      	b.n	8011aa2 <__swhatbuf_r+0x24>

08011aca <__smakebuf_r>:
 8011aca:	898b      	ldrh	r3, [r1, #12]
 8011acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ace:	079d      	lsls	r5, r3, #30
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	d507      	bpl.n	8011ae6 <__smakebuf_r+0x1c>
 8011ad6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ada:	6023      	str	r3, [r4, #0]
 8011adc:	6123      	str	r3, [r4, #16]
 8011ade:	2301      	movs	r3, #1
 8011ae0:	6163      	str	r3, [r4, #20]
 8011ae2:	b002      	add	sp, #8
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	ab01      	add	r3, sp, #4
 8011ae8:	466a      	mov	r2, sp
 8011aea:	f7ff ffc8 	bl	8011a7e <__swhatbuf_r>
 8011aee:	9900      	ldr	r1, [sp, #0]
 8011af0:	4605      	mov	r5, r0
 8011af2:	4630      	mov	r0, r6
 8011af4:	f7ff faf6 	bl	80110e4 <_malloc_r>
 8011af8:	b948      	cbnz	r0, 8011b0e <__smakebuf_r+0x44>
 8011afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011afe:	059a      	lsls	r2, r3, #22
 8011b00:	d4ef      	bmi.n	8011ae2 <__smakebuf_r+0x18>
 8011b02:	f023 0303 	bic.w	r3, r3, #3
 8011b06:	f043 0302 	orr.w	r3, r3, #2
 8011b0a:	81a3      	strh	r3, [r4, #12]
 8011b0c:	e7e3      	b.n	8011ad6 <__smakebuf_r+0xc>
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	6020      	str	r0, [r4, #0]
 8011b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b16:	81a3      	strh	r3, [r4, #12]
 8011b18:	9b00      	ldr	r3, [sp, #0]
 8011b1a:	6163      	str	r3, [r4, #20]
 8011b1c:	9b01      	ldr	r3, [sp, #4]
 8011b1e:	6120      	str	r0, [r4, #16]
 8011b20:	b15b      	cbz	r3, 8011b3a <__smakebuf_r+0x70>
 8011b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b26:	4630      	mov	r0, r6
 8011b28:	f000 f84e 	bl	8011bc8 <_isatty_r>
 8011b2c:	b128      	cbz	r0, 8011b3a <__smakebuf_r+0x70>
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	f023 0303 	bic.w	r3, r3, #3
 8011b34:	f043 0301 	orr.w	r3, r3, #1
 8011b38:	81a3      	strh	r3, [r4, #12]
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	431d      	orrs	r5, r3
 8011b3e:	81a5      	strh	r5, [r4, #12]
 8011b40:	e7cf      	b.n	8011ae2 <__smakebuf_r+0x18>

08011b42 <_raise_r>:
 8011b42:	291f      	cmp	r1, #31
 8011b44:	b538      	push	{r3, r4, r5, lr}
 8011b46:	4604      	mov	r4, r0
 8011b48:	460d      	mov	r5, r1
 8011b4a:	d904      	bls.n	8011b56 <_raise_r+0x14>
 8011b4c:	2316      	movs	r3, #22
 8011b4e:	6003      	str	r3, [r0, #0]
 8011b50:	f04f 30ff 	mov.w	r0, #4294967295
 8011b54:	bd38      	pop	{r3, r4, r5, pc}
 8011b56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011b58:	b112      	cbz	r2, 8011b60 <_raise_r+0x1e>
 8011b5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b5e:	b94b      	cbnz	r3, 8011b74 <_raise_r+0x32>
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 f853 	bl	8011c0c <_getpid_r>
 8011b66:	462a      	mov	r2, r5
 8011b68:	4601      	mov	r1, r0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b70:	f000 b83a 	b.w	8011be8 <_kill_r>
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d00a      	beq.n	8011b8e <_raise_r+0x4c>
 8011b78:	1c59      	adds	r1, r3, #1
 8011b7a:	d103      	bne.n	8011b84 <_raise_r+0x42>
 8011b7c:	2316      	movs	r3, #22
 8011b7e:	6003      	str	r3, [r0, #0]
 8011b80:	2001      	movs	r0, #1
 8011b82:	e7e7      	b.n	8011b54 <_raise_r+0x12>
 8011b84:	2400      	movs	r4, #0
 8011b86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	4798      	blx	r3
 8011b8e:	2000      	movs	r0, #0
 8011b90:	e7e0      	b.n	8011b54 <_raise_r+0x12>
	...

08011b94 <raise>:
 8011b94:	4b02      	ldr	r3, [pc, #8]	; (8011ba0 <raise+0xc>)
 8011b96:	4601      	mov	r1, r0
 8011b98:	6818      	ldr	r0, [r3, #0]
 8011b9a:	f7ff bfd2 	b.w	8011b42 <_raise_r>
 8011b9e:	bf00      	nop
 8011ba0:	20000084 	.word	0x20000084

08011ba4 <_fstat_r>:
 8011ba4:	b538      	push	{r3, r4, r5, lr}
 8011ba6:	4d07      	ldr	r5, [pc, #28]	; (8011bc4 <_fstat_r+0x20>)
 8011ba8:	2300      	movs	r3, #0
 8011baa:	4604      	mov	r4, r0
 8011bac:	4608      	mov	r0, r1
 8011bae:	4611      	mov	r1, r2
 8011bb0:	602b      	str	r3, [r5, #0]
 8011bb2:	f7ef f848 	bl	8000c46 <_fstat>
 8011bb6:	1c43      	adds	r3, r0, #1
 8011bb8:	d102      	bne.n	8011bc0 <_fstat_r+0x1c>
 8011bba:	682b      	ldr	r3, [r5, #0]
 8011bbc:	b103      	cbz	r3, 8011bc0 <_fstat_r+0x1c>
 8011bbe:	6023      	str	r3, [r4, #0]
 8011bc0:	bd38      	pop	{r3, r4, r5, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20008ea8 	.word	0x20008ea8

08011bc8 <_isatty_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4d06      	ldr	r5, [pc, #24]	; (8011be4 <_isatty_r+0x1c>)
 8011bcc:	2300      	movs	r3, #0
 8011bce:	4604      	mov	r4, r0
 8011bd0:	4608      	mov	r0, r1
 8011bd2:	602b      	str	r3, [r5, #0]
 8011bd4:	f7ef f847 	bl	8000c66 <_isatty>
 8011bd8:	1c43      	adds	r3, r0, #1
 8011bda:	d102      	bne.n	8011be2 <_isatty_r+0x1a>
 8011bdc:	682b      	ldr	r3, [r5, #0]
 8011bde:	b103      	cbz	r3, 8011be2 <_isatty_r+0x1a>
 8011be0:	6023      	str	r3, [r4, #0]
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
 8011be4:	20008ea8 	.word	0x20008ea8

08011be8 <_kill_r>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	4d07      	ldr	r5, [pc, #28]	; (8011c08 <_kill_r+0x20>)
 8011bec:	2300      	movs	r3, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4608      	mov	r0, r1
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	602b      	str	r3, [r5, #0]
 8011bf6:	f7ee ffc5 	bl	8000b84 <_kill>
 8011bfa:	1c43      	adds	r3, r0, #1
 8011bfc:	d102      	bne.n	8011c04 <_kill_r+0x1c>
 8011bfe:	682b      	ldr	r3, [r5, #0]
 8011c00:	b103      	cbz	r3, 8011c04 <_kill_r+0x1c>
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	bd38      	pop	{r3, r4, r5, pc}
 8011c06:	bf00      	nop
 8011c08:	20008ea8 	.word	0x20008ea8

08011c0c <_getpid_r>:
 8011c0c:	f7ee bfb2 	b.w	8000b74 <_getpid>

08011c10 <_init>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	bf00      	nop
 8011c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c16:	bc08      	pop	{r3}
 8011c18:	469e      	mov	lr, r3
 8011c1a:	4770      	bx	lr

08011c1c <_fini>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	bf00      	nop
 8011c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c22:	bc08      	pop	{r3}
 8011c24:	469e      	mov	lr, r3
 8011c26:	4770      	bx	lr
